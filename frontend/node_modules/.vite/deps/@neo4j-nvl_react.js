import {
  gracefulDecodeURIComponent
} from "./chunk-E7YZTEZA.js";
import {
  PersistedPriorityQueue,
  isOffline,
  mergedOptions,
  pWhile,
  recordIntegrationMetric
} from "./chunk-SIJXYC4K.js";
import {
  getCDN,
  getGlobalAnalytics,
  loadScript,
  setGlobalAnalytics,
  setGlobalAnalyticsKey,
  setGlobalCDNUrl
} from "./chunk-HVBN44Z7.js";
import {
  Context,
  SEGMENT_API_HOST,
  Stats,
  applyDestinationMiddleware,
  fetch,
  getGlobal,
  getVersionType,
  toFacade,
  version
} from "./chunk-TNMG6KJR.js";
import {
  ContextCancelation,
  CoreEventFactory,
  CoreEventQueue,
  Emitter,
  PriorityQueue,
  attempt,
  createDeferred,
  dispatch,
  isFunction,
  isNumber,
  isPlainObject,
  isString,
  v4
} from "./chunk-UNPKGPRK.js";
import {
  __assign,
  __awaiter,
  __extends,
  __generator,
  __rest,
  __spreadArray
} from "./chunk-OKOUEKDN.js";
import {
  require_jsx_runtime
} from "./chunk-IULEFUF5.js";
import {
  require_react
} from "./chunk-I773Y2XN.js";
import {
  __commonJS,
  __esm,
  __export,
  __publicField,
  __require,
  __toCommonJS,
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/layout-base/layout-base.js
var require_layout_base = __commonJS({
  "node_modules/layout-base/layout-base.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory();
      else if (typeof define === "function" && define.amd)
        define([], factory);
      else if (typeof exports === "object")
        exports["layoutBase"] = factory();
      else
        root["layoutBase"] = factory();
    })(exports, function() {
      return (
        /******/
        function(modules2) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
              return installedModules[moduleId].exports;
            }
            var module2 = installedModules[moduleId] = {
              /******/
              i: moduleId,
              /******/
              l: false,
              /******/
              exports: {}
              /******/
            };
            modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
            module2.l = true;
            return module2.exports;
          }
          __webpack_require__.m = modules2;
          __webpack_require__.c = installedModules;
          __webpack_require__.i = function(value) {
            return value;
          };
          __webpack_require__.d = function(exports2, name, getter) {
            if (!__webpack_require__.o(exports2, name)) {
              Object.defineProperty(exports2, name, {
                /******/
                configurable: false,
                /******/
                enumerable: true,
                /******/
                get: getter
                /******/
              });
            }
          };
          __webpack_require__.n = function(module2) {
            var getter = module2 && module2.__esModule ? (
              /******/
              function getDefault() {
                return module2["default"];
              }
            ) : (
              /******/
              function getModuleExports() {
                return module2;
              }
            );
            __webpack_require__.d(getter, "a", getter);
            return getter;
          };
          __webpack_require__.o = function(object3, property) {
            return Object.prototype.hasOwnProperty.call(object3, property);
          };
          __webpack_require__.p = "";
          return __webpack_require__(__webpack_require__.s = 26);
        }([
          /* 0 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function LayoutConstants() {
            }
            LayoutConstants.QUALITY = 1;
            LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED = false;
            LayoutConstants.DEFAULT_INCREMENTAL = false;
            LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT = true;
            LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT = false;
            LayoutConstants.DEFAULT_ANIMATION_PERIOD = 50;
            LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES = false;
            LayoutConstants.DEFAULT_GRAPH_MARGIN = 15;
            LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = false;
            LayoutConstants.SIMPLE_NODE_SIZE = 40;
            LayoutConstants.SIMPLE_NODE_HALF_SIZE = LayoutConstants.SIMPLE_NODE_SIZE / 2;
            LayoutConstants.EMPTY_COMPOUND_NODE_SIZE = 40;
            LayoutConstants.MIN_EDGE_LENGTH = 1;
            LayoutConstants.WORLD_BOUNDARY = 1e6;
            LayoutConstants.INITIAL_WORLD_BOUNDARY = LayoutConstants.WORLD_BOUNDARY / 1e3;
            LayoutConstants.WORLD_CENTER_X = 1200;
            LayoutConstants.WORLD_CENTER_Y = 900;
            module2.exports = LayoutConstants;
          },
          /* 1 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var LGraphObject = __webpack_require__(2);
            var IGeometry = __webpack_require__(8);
            var IMath = __webpack_require__(9);
            function LEdge(source, target, vEdge) {
              LGraphObject.call(this, vEdge);
              this.isOverlapingSourceAndTarget = false;
              this.vGraphObject = vEdge;
              this.bendpoints = [];
              this.source = source;
              this.target = target;
            }
            LEdge.prototype = Object.create(LGraphObject.prototype);
            for (var prop in LGraphObject) {
              LEdge[prop] = LGraphObject[prop];
            }
            LEdge.prototype.getSource = function() {
              return this.source;
            };
            LEdge.prototype.getTarget = function() {
              return this.target;
            };
            LEdge.prototype.isInterGraph = function() {
              return this.isInterGraph;
            };
            LEdge.prototype.getLength = function() {
              return this.length;
            };
            LEdge.prototype.isOverlapingSourceAndTarget = function() {
              return this.isOverlapingSourceAndTarget;
            };
            LEdge.prototype.getBendpoints = function() {
              return this.bendpoints;
            };
            LEdge.prototype.getLca = function() {
              return this.lca;
            };
            LEdge.prototype.getSourceInLca = function() {
              return this.sourceInLca;
            };
            LEdge.prototype.getTargetInLca = function() {
              return this.targetInLca;
            };
            LEdge.prototype.getOtherEnd = function(node) {
              if (this.source === node) {
                return this.target;
              } else if (this.target === node) {
                return this.source;
              } else {
                throw "Node is not incident with this edge";
              }
            };
            LEdge.prototype.getOtherEndInGraph = function(node, graph) {
              var otherEnd = this.getOtherEnd(node);
              var root = graph.getGraphManager().getRoot();
              while (true) {
                if (otherEnd.getOwner() == graph) {
                  return otherEnd;
                }
                if (otherEnd.getOwner() == root) {
                  break;
                }
                otherEnd = otherEnd.getOwner().getParent();
              }
              return null;
            };
            LEdge.prototype.updateLength = function() {
              var clipPointCoordinates = new Array(4);
              this.isOverlapingSourceAndTarget = IGeometry.getIntersection(this.target.getRect(), this.source.getRect(), clipPointCoordinates);
              if (!this.isOverlapingSourceAndTarget) {
                this.lengthX = clipPointCoordinates[0] - clipPointCoordinates[2];
                this.lengthY = clipPointCoordinates[1] - clipPointCoordinates[3];
                if (Math.abs(this.lengthX) < 1) {
                  this.lengthX = IMath.sign(this.lengthX);
                }
                if (Math.abs(this.lengthY) < 1) {
                  this.lengthY = IMath.sign(this.lengthY);
                }
                this.length = Math.sqrt(this.lengthX * this.lengthX + this.lengthY * this.lengthY);
              }
            };
            LEdge.prototype.updateLengthSimple = function() {
              this.lengthX = this.target.getCenterX() - this.source.getCenterX();
              this.lengthY = this.target.getCenterY() - this.source.getCenterY();
              if (Math.abs(this.lengthX) < 1) {
                this.lengthX = IMath.sign(this.lengthX);
              }
              if (Math.abs(this.lengthY) < 1) {
                this.lengthY = IMath.sign(this.lengthY);
              }
              this.length = Math.sqrt(this.lengthX * this.lengthX + this.lengthY * this.lengthY);
            };
            module2.exports = LEdge;
          },
          /* 2 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function LGraphObject(vGraphObject) {
              this.vGraphObject = vGraphObject;
            }
            module2.exports = LGraphObject;
          },
          /* 3 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var LGraphObject = __webpack_require__(2);
            var Integer = __webpack_require__(10);
            var RectangleD = __webpack_require__(13);
            var LayoutConstants = __webpack_require__(0);
            var RandomSeed = __webpack_require__(16);
            var PointD = __webpack_require__(4);
            function LNode(gm, loc, size3, vNode) {
              if (size3 == null && vNode == null) {
                vNode = loc;
              }
              LGraphObject.call(this, vNode);
              if (gm.graphManager != null) gm = gm.graphManager;
              this.estimatedSize = Integer.MIN_VALUE;
              this.inclusionTreeDepth = Integer.MAX_VALUE;
              this.vGraphObject = vNode;
              this.edges = [];
              this.graphManager = gm;
              if (size3 != null && loc != null) this.rect = new RectangleD(loc.x, loc.y, size3.width, size3.height);
              else this.rect = new RectangleD();
            }
            LNode.prototype = Object.create(LGraphObject.prototype);
            for (var prop in LGraphObject) {
              LNode[prop] = LGraphObject[prop];
            }
            LNode.prototype.getEdges = function() {
              return this.edges;
            };
            LNode.prototype.getChild = function() {
              return this.child;
            };
            LNode.prototype.getOwner = function() {
              return this.owner;
            };
            LNode.prototype.getWidth = function() {
              return this.rect.width;
            };
            LNode.prototype.setWidth = function(width2) {
              this.rect.width = width2;
            };
            LNode.prototype.getHeight = function() {
              return this.rect.height;
            };
            LNode.prototype.setHeight = function(height2) {
              this.rect.height = height2;
            };
            LNode.prototype.getCenterX = function() {
              return this.rect.x + this.rect.width / 2;
            };
            LNode.prototype.getCenterY = function() {
              return this.rect.y + this.rect.height / 2;
            };
            LNode.prototype.getCenter = function() {
              return new PointD(this.rect.x + this.rect.width / 2, this.rect.y + this.rect.height / 2);
            };
            LNode.prototype.getLocation = function() {
              return new PointD(this.rect.x, this.rect.y);
            };
            LNode.prototype.getRect = function() {
              return this.rect;
            };
            LNode.prototype.getDiagonal = function() {
              return Math.sqrt(this.rect.width * this.rect.width + this.rect.height * this.rect.height);
            };
            LNode.prototype.getHalfTheDiagonal = function() {
              return Math.sqrt(this.rect.height * this.rect.height + this.rect.width * this.rect.width) / 2;
            };
            LNode.prototype.setRect = function(upperLeft, dimension) {
              this.rect.x = upperLeft.x;
              this.rect.y = upperLeft.y;
              this.rect.width = dimension.width;
              this.rect.height = dimension.height;
            };
            LNode.prototype.setCenter = function(cx, cy) {
              this.rect.x = cx - this.rect.width / 2;
              this.rect.y = cy - this.rect.height / 2;
            };
            LNode.prototype.setLocation = function(x3, y3) {
              this.rect.x = x3;
              this.rect.y = y3;
            };
            LNode.prototype.moveBy = function(dx, dy) {
              this.rect.x += dx;
              this.rect.y += dy;
            };
            LNode.prototype.getEdgeListToNode = function(to2) {
              var edgeList = [];
              var edge;
              var self2 = this;
              self2.edges.forEach(function(edge2) {
                if (edge2.target == to2) {
                  if (edge2.source != self2) throw "Incorrect edge source!";
                  edgeList.push(edge2);
                }
              });
              return edgeList;
            };
            LNode.prototype.getEdgesBetween = function(other) {
              var edgeList = [];
              var edge;
              var self2 = this;
              self2.edges.forEach(function(edge2) {
                if (!(edge2.source == self2 || edge2.target == self2)) throw "Incorrect edge source and/or target";
                if (edge2.target == other || edge2.source == other) {
                  edgeList.push(edge2);
                }
              });
              return edgeList;
            };
            LNode.prototype.getNeighborsList = function() {
              var neighbors = /* @__PURE__ */ new Set();
              var self2 = this;
              self2.edges.forEach(function(edge) {
                if (edge.source == self2) {
                  neighbors.add(edge.target);
                } else {
                  if (edge.target != self2) {
                    throw "Incorrect incidency!";
                  }
                  neighbors.add(edge.source);
                }
              });
              return neighbors;
            };
            LNode.prototype.withChildren = function() {
              var withNeighborsList = /* @__PURE__ */ new Set();
              var childNode;
              var children;
              withNeighborsList.add(this);
              if (this.child != null) {
                var nodes3 = this.child.getNodes();
                for (var i2 = 0; i2 < nodes3.length; i2++) {
                  childNode = nodes3[i2];
                  children = childNode.withChildren();
                  children.forEach(function(node) {
                    withNeighborsList.add(node);
                  });
                }
              }
              return withNeighborsList;
            };
            LNode.prototype.getNoOfChildren = function() {
              var noOfChildren = 0;
              var childNode;
              if (this.child == null) {
                noOfChildren = 1;
              } else {
                var nodes3 = this.child.getNodes();
                for (var i2 = 0; i2 < nodes3.length; i2++) {
                  childNode = nodes3[i2];
                  noOfChildren += childNode.getNoOfChildren();
                }
              }
              if (noOfChildren == 0) {
                noOfChildren = 1;
              }
              return noOfChildren;
            };
            LNode.prototype.getEstimatedSize = function() {
              if (this.estimatedSize == Integer.MIN_VALUE) {
                throw "assert failed";
              }
              return this.estimatedSize;
            };
            LNode.prototype.calcEstimatedSize = function() {
              if (this.child == null) {
                return this.estimatedSize = (this.rect.width + this.rect.height) / 2;
              } else {
                this.estimatedSize = this.child.calcEstimatedSize();
                this.rect.width = this.estimatedSize;
                this.rect.height = this.estimatedSize;
                return this.estimatedSize;
              }
            };
            LNode.prototype.scatter = function() {
              var randomCenterX;
              var randomCenterY;
              var minX = -LayoutConstants.INITIAL_WORLD_BOUNDARY;
              var maxX = LayoutConstants.INITIAL_WORLD_BOUNDARY;
              randomCenterX = LayoutConstants.WORLD_CENTER_X + RandomSeed.nextDouble() * (maxX - minX) + minX;
              var minY = -LayoutConstants.INITIAL_WORLD_BOUNDARY;
              var maxY = LayoutConstants.INITIAL_WORLD_BOUNDARY;
              randomCenterY = LayoutConstants.WORLD_CENTER_Y + RandomSeed.nextDouble() * (maxY - minY) + minY;
              this.rect.x = randomCenterX;
              this.rect.y = randomCenterY;
            };
            LNode.prototype.updateBounds = function() {
              if (this.getChild() == null) {
                throw "assert failed";
              }
              if (this.getChild().getNodes().length != 0) {
                var childGraph = this.getChild();
                childGraph.updateBounds(true);
                this.rect.x = childGraph.getLeft();
                this.rect.y = childGraph.getTop();
                this.setWidth(childGraph.getRight() - childGraph.getLeft());
                this.setHeight(childGraph.getBottom() - childGraph.getTop());
                if (LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS) {
                  var width2 = childGraph.getRight() - childGraph.getLeft();
                  var height2 = childGraph.getBottom() - childGraph.getTop();
                  if (this.labelWidth > width2) {
                    this.rect.x -= (this.labelWidth - width2) / 2;
                    this.setWidth(this.labelWidth);
                  }
                  if (this.labelHeight > height2) {
                    if (this.labelPos == "center") {
                      this.rect.y -= (this.labelHeight - height2) / 2;
                    } else if (this.labelPos == "top") {
                      this.rect.y -= this.labelHeight - height2;
                    }
                    this.setHeight(this.labelHeight);
                  }
                }
              }
            };
            LNode.prototype.getInclusionTreeDepth = function() {
              if (this.inclusionTreeDepth == Integer.MAX_VALUE) {
                throw "assert failed";
              }
              return this.inclusionTreeDepth;
            };
            LNode.prototype.transform = function(trans) {
              var left = this.rect.x;
              if (left > LayoutConstants.WORLD_BOUNDARY) {
                left = LayoutConstants.WORLD_BOUNDARY;
              } else if (left < -LayoutConstants.WORLD_BOUNDARY) {
                left = -LayoutConstants.WORLD_BOUNDARY;
              }
              var top = this.rect.y;
              if (top > LayoutConstants.WORLD_BOUNDARY) {
                top = LayoutConstants.WORLD_BOUNDARY;
              } else if (top < -LayoutConstants.WORLD_BOUNDARY) {
                top = -LayoutConstants.WORLD_BOUNDARY;
              }
              var leftTop = new PointD(left, top);
              var vLeftTop = trans.inverseTransformPoint(leftTop);
              this.setLocation(vLeftTop.x, vLeftTop.y);
            };
            LNode.prototype.getLeft = function() {
              return this.rect.x;
            };
            LNode.prototype.getRight = function() {
              return this.rect.x + this.rect.width;
            };
            LNode.prototype.getTop = function() {
              return this.rect.y;
            };
            LNode.prototype.getBottom = function() {
              return this.rect.y + this.rect.height;
            };
            LNode.prototype.getParent = function() {
              if (this.owner == null) {
                return null;
              }
              return this.owner.getParent();
            };
            module2.exports = LNode;
          },
          /* 4 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function PointD(x3, y3) {
              if (x3 == null && y3 == null) {
                this.x = 0;
                this.y = 0;
              } else {
                this.x = x3;
                this.y = y3;
              }
            }
            PointD.prototype.getX = function() {
              return this.x;
            };
            PointD.prototype.getY = function() {
              return this.y;
            };
            PointD.prototype.setX = function(x3) {
              this.x = x3;
            };
            PointD.prototype.setY = function(y3) {
              this.y = y3;
            };
            PointD.prototype.getDifference = function(pt2) {
              return new DimensionD(this.x - pt2.x, this.y - pt2.y);
            };
            PointD.prototype.getCopy = function() {
              return new PointD(this.x, this.y);
            };
            PointD.prototype.translate = function(dim) {
              this.x += dim.width;
              this.y += dim.height;
              return this;
            };
            module2.exports = PointD;
          },
          /* 5 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var LGraphObject = __webpack_require__(2);
            var Integer = __webpack_require__(10);
            var LayoutConstants = __webpack_require__(0);
            var LGraphManager = __webpack_require__(6);
            var LNode = __webpack_require__(3);
            var LEdge = __webpack_require__(1);
            var RectangleD = __webpack_require__(13);
            var Point2 = __webpack_require__(12);
            var LinkedList = __webpack_require__(11);
            function LGraph(parent4, obj2, vGraph) {
              LGraphObject.call(this, vGraph);
              this.estimatedSize = Integer.MIN_VALUE;
              this.margin = LayoutConstants.DEFAULT_GRAPH_MARGIN;
              this.edges = [];
              this.nodes = [];
              this.isConnected = false;
              this.parent = parent4;
              if (obj2 != null && obj2 instanceof LGraphManager) {
                this.graphManager = obj2;
              } else if (obj2 != null && obj2 instanceof Layout) {
                this.graphManager = obj2.graphManager;
              }
            }
            LGraph.prototype = Object.create(LGraphObject.prototype);
            for (var prop in LGraphObject) {
              LGraph[prop] = LGraphObject[prop];
            }
            LGraph.prototype.getNodes = function() {
              return this.nodes;
            };
            LGraph.prototype.getEdges = function() {
              return this.edges;
            };
            LGraph.prototype.getGraphManager = function() {
              return this.graphManager;
            };
            LGraph.prototype.getParent = function() {
              return this.parent;
            };
            LGraph.prototype.getLeft = function() {
              return this.left;
            };
            LGraph.prototype.getRight = function() {
              return this.right;
            };
            LGraph.prototype.getTop = function() {
              return this.top;
            };
            LGraph.prototype.getBottom = function() {
              return this.bottom;
            };
            LGraph.prototype.isConnected = function() {
              return this.isConnected;
            };
            LGraph.prototype.add = function(obj1, sourceNode, targetNode) {
              if (sourceNode == null && targetNode == null) {
                var newNode = obj1;
                if (this.graphManager == null) {
                  throw "Graph has no graph mgr!";
                }
                if (this.getNodes().indexOf(newNode) > -1) {
                  throw "Node already in graph!";
                }
                newNode.owner = this;
                this.getNodes().push(newNode);
                return newNode;
              } else {
                var newEdge = obj1;
                if (!(this.getNodes().indexOf(sourceNode) > -1 && this.getNodes().indexOf(targetNode) > -1)) {
                  throw "Source or target not in graph!";
                }
                if (!(sourceNode.owner == targetNode.owner && sourceNode.owner == this)) {
                  throw "Both owners must be this graph!";
                }
                if (sourceNode.owner != targetNode.owner) {
                  return null;
                }
                newEdge.source = sourceNode;
                newEdge.target = targetNode;
                newEdge.isInterGraph = false;
                this.getEdges().push(newEdge);
                sourceNode.edges.push(newEdge);
                if (targetNode != sourceNode) {
                  targetNode.edges.push(newEdge);
                }
                return newEdge;
              }
            };
            LGraph.prototype.remove = function(obj) {
              var node = obj;
              if (obj instanceof LNode) {
                if (node == null) {
                  throw "Node is null!";
                }
                if (!(node.owner != null && node.owner == this)) {
                  throw "Owner graph is invalid!";
                }
                if (this.graphManager == null) {
                  throw "Owner graph manager is invalid!";
                }
                var edgesToBeRemoved = node.edges.slice();
                var edge;
                var s2 = edgesToBeRemoved.length;
                for (var i2 = 0; i2 < s2; i2++) {
                  edge = edgesToBeRemoved[i2];
                  if (edge.isInterGraph) {
                    this.graphManager.remove(edge);
                  } else {
                    edge.source.owner.remove(edge);
                  }
                }
                var index = this.nodes.indexOf(node);
                if (index == -1) {
                  throw "Node not in owner node list!";
                }
                this.nodes.splice(index, 1);
              } else if (obj instanceof LEdge) {
                var edge = obj;
                if (edge == null) {
                  throw "Edge is null!";
                }
                if (!(edge.source != null && edge.target != null)) {
                  throw "Source and/or target is null!";
                }
                if (!(edge.source.owner != null && edge.target.owner != null && edge.source.owner == this && edge.target.owner == this)) {
                  throw "Source and/or target owner is invalid!";
                }
                var sourceIndex = edge.source.edges.indexOf(edge);
                var targetIndex = edge.target.edges.indexOf(edge);
                if (!(sourceIndex > -1 && targetIndex > -1)) {
                  throw "Source and/or target doesn't know this edge!";
                }
                edge.source.edges.splice(sourceIndex, 1);
                if (edge.target != edge.source) {
                  edge.target.edges.splice(targetIndex, 1);
                }
                var index = edge.source.owner.getEdges().indexOf(edge);
                if (index == -1) {
                  throw "Not in owner's edge list!";
                }
                edge.source.owner.getEdges().splice(index, 1);
              }
            };
            LGraph.prototype.updateLeftTop = function() {
              var top = Integer.MAX_VALUE;
              var left = Integer.MAX_VALUE;
              var nodeTop;
              var nodeLeft;
              var margin;
              var nodes3 = this.getNodes();
              var s2 = nodes3.length;
              for (var i2 = 0; i2 < s2; i2++) {
                var lNode = nodes3[i2];
                nodeTop = lNode.getTop();
                nodeLeft = lNode.getLeft();
                if (top > nodeTop) {
                  top = nodeTop;
                }
                if (left > nodeLeft) {
                  left = nodeLeft;
                }
              }
              if (top == Integer.MAX_VALUE) {
                return null;
              }
              if (nodes3[0].getParent().paddingLeft != void 0) {
                margin = nodes3[0].getParent().paddingLeft;
              } else {
                margin = this.margin;
              }
              this.left = left - margin;
              this.top = top - margin;
              return new Point2(this.left, this.top);
            };
            LGraph.prototype.updateBounds = function(recursive) {
              var left = Integer.MAX_VALUE;
              var right = -Integer.MAX_VALUE;
              var top = Integer.MAX_VALUE;
              var bottom = -Integer.MAX_VALUE;
              var nodeLeft;
              var nodeRight;
              var nodeTop;
              var nodeBottom;
              var margin;
              var nodes3 = this.nodes;
              var s2 = nodes3.length;
              for (var i2 = 0; i2 < s2; i2++) {
                var lNode = nodes3[i2];
                if (recursive && lNode.child != null) {
                  lNode.updateBounds();
                }
                nodeLeft = lNode.getLeft();
                nodeRight = lNode.getRight();
                nodeTop = lNode.getTop();
                nodeBottom = lNode.getBottom();
                if (left > nodeLeft) {
                  left = nodeLeft;
                }
                if (right < nodeRight) {
                  right = nodeRight;
                }
                if (top > nodeTop) {
                  top = nodeTop;
                }
                if (bottom < nodeBottom) {
                  bottom = nodeBottom;
                }
              }
              var boundingRect = new RectangleD(left, top, right - left, bottom - top);
              if (left == Integer.MAX_VALUE) {
                this.left = this.parent.getLeft();
                this.right = this.parent.getRight();
                this.top = this.parent.getTop();
                this.bottom = this.parent.getBottom();
              }
              if (nodes3[0].getParent().paddingLeft != void 0) {
                margin = nodes3[0].getParent().paddingLeft;
              } else {
                margin = this.margin;
              }
              this.left = boundingRect.x - margin;
              this.right = boundingRect.x + boundingRect.width + margin;
              this.top = boundingRect.y - margin;
              this.bottom = boundingRect.y + boundingRect.height + margin;
            };
            LGraph.calculateBounds = function(nodes3) {
              var left = Integer.MAX_VALUE;
              var right = -Integer.MAX_VALUE;
              var top = Integer.MAX_VALUE;
              var bottom = -Integer.MAX_VALUE;
              var nodeLeft;
              var nodeRight;
              var nodeTop;
              var nodeBottom;
              var s2 = nodes3.length;
              for (var i2 = 0; i2 < s2; i2++) {
                var lNode = nodes3[i2];
                nodeLeft = lNode.getLeft();
                nodeRight = lNode.getRight();
                nodeTop = lNode.getTop();
                nodeBottom = lNode.getBottom();
                if (left > nodeLeft) {
                  left = nodeLeft;
                }
                if (right < nodeRight) {
                  right = nodeRight;
                }
                if (top > nodeTop) {
                  top = nodeTop;
                }
                if (bottom < nodeBottom) {
                  bottom = nodeBottom;
                }
              }
              var boundingRect = new RectangleD(left, top, right - left, bottom - top);
              return boundingRect;
            };
            LGraph.prototype.getInclusionTreeDepth = function() {
              if (this == this.graphManager.getRoot()) {
                return 1;
              } else {
                return this.parent.getInclusionTreeDepth();
              }
            };
            LGraph.prototype.getEstimatedSize = function() {
              if (this.estimatedSize == Integer.MIN_VALUE) {
                throw "assert failed";
              }
              return this.estimatedSize;
            };
            LGraph.prototype.calcEstimatedSize = function() {
              var size3 = 0;
              var nodes3 = this.nodes;
              var s2 = nodes3.length;
              for (var i2 = 0; i2 < s2; i2++) {
                var lNode = nodes3[i2];
                size3 += lNode.calcEstimatedSize();
              }
              if (size3 == 0) {
                this.estimatedSize = LayoutConstants.EMPTY_COMPOUND_NODE_SIZE;
              } else {
                this.estimatedSize = size3 / Math.sqrt(this.nodes.length);
              }
              return this.estimatedSize;
            };
            LGraph.prototype.updateConnected = function() {
              var self2 = this;
              if (this.nodes.length == 0) {
                this.isConnected = true;
                return;
              }
              var queue = new LinkedList();
              var visited = /* @__PURE__ */ new Set();
              var currentNode = this.nodes[0];
              var neighborEdges;
              var currentNeighbor;
              var childrenOfNode = currentNode.withChildren();
              childrenOfNode.forEach(function(node) {
                queue.push(node);
                visited.add(node);
              });
              while (queue.length !== 0) {
                currentNode = queue.shift();
                neighborEdges = currentNode.getEdges();
                var size3 = neighborEdges.length;
                for (var i2 = 0; i2 < size3; i2++) {
                  var neighborEdge = neighborEdges[i2];
                  currentNeighbor = neighborEdge.getOtherEndInGraph(currentNode, this);
                  if (currentNeighbor != null && !visited.has(currentNeighbor)) {
                    var childrenOfNeighbor = currentNeighbor.withChildren();
                    childrenOfNeighbor.forEach(function(node) {
                      queue.push(node);
                      visited.add(node);
                    });
                  }
                }
              }
              this.isConnected = false;
              if (visited.size >= this.nodes.length) {
                var noOfVisitedInThisGraph = 0;
                visited.forEach(function(visitedNode) {
                  if (visitedNode.owner == self2) {
                    noOfVisitedInThisGraph++;
                  }
                });
                if (noOfVisitedInThisGraph == this.nodes.length) {
                  this.isConnected = true;
                }
              }
            };
            module2.exports = LGraph;
          },
          /* 6 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var LGraph;
            var LEdge = __webpack_require__(1);
            function LGraphManager(layout6) {
              LGraph = __webpack_require__(5);
              this.layout = layout6;
              this.graphs = [];
              this.edges = [];
            }
            LGraphManager.prototype.addRoot = function() {
              var ngraph = this.layout.newGraph();
              var nnode = this.layout.newNode(null);
              var root = this.add(ngraph, nnode);
              this.setRootGraph(root);
              return this.rootGraph;
            };
            LGraphManager.prototype.add = function(newGraph, parentNode, newEdge, sourceNode, targetNode) {
              if (newEdge == null && sourceNode == null && targetNode == null) {
                if (newGraph == null) {
                  throw "Graph is null!";
                }
                if (parentNode == null) {
                  throw "Parent node is null!";
                }
                if (this.graphs.indexOf(newGraph) > -1) {
                  throw "Graph already in this graph mgr!";
                }
                this.graphs.push(newGraph);
                if (newGraph.parent != null) {
                  throw "Already has a parent!";
                }
                if (parentNode.child != null) {
                  throw "Already has a child!";
                }
                newGraph.parent = parentNode;
                parentNode.child = newGraph;
                return newGraph;
              } else {
                targetNode = newEdge;
                sourceNode = parentNode;
                newEdge = newGraph;
                var sourceGraph = sourceNode.getOwner();
                var targetGraph = targetNode.getOwner();
                if (!(sourceGraph != null && sourceGraph.getGraphManager() == this)) {
                  throw "Source not in this graph mgr!";
                }
                if (!(targetGraph != null && targetGraph.getGraphManager() == this)) {
                  throw "Target not in this graph mgr!";
                }
                if (sourceGraph == targetGraph) {
                  newEdge.isInterGraph = false;
                  return sourceGraph.add(newEdge, sourceNode, targetNode);
                } else {
                  newEdge.isInterGraph = true;
                  newEdge.source = sourceNode;
                  newEdge.target = targetNode;
                  if (this.edges.indexOf(newEdge) > -1) {
                    throw "Edge already in inter-graph edge list!";
                  }
                  this.edges.push(newEdge);
                  if (!(newEdge.source != null && newEdge.target != null)) {
                    throw "Edge source and/or target is null!";
                  }
                  if (!(newEdge.source.edges.indexOf(newEdge) == -1 && newEdge.target.edges.indexOf(newEdge) == -1)) {
                    throw "Edge already in source and/or target incidency list!";
                  }
                  newEdge.source.edges.push(newEdge);
                  newEdge.target.edges.push(newEdge);
                  return newEdge;
                }
              }
            };
            LGraphManager.prototype.remove = function(lObj) {
              if (lObj instanceof LGraph) {
                var graph = lObj;
                if (graph.getGraphManager() != this) {
                  throw "Graph not in this graph mgr";
                }
                if (!(graph == this.rootGraph || graph.parent != null && graph.parent.graphManager == this)) {
                  throw "Invalid parent node!";
                }
                var edgesToBeRemoved = [];
                edgesToBeRemoved = edgesToBeRemoved.concat(graph.getEdges());
                var edge;
                var s2 = edgesToBeRemoved.length;
                for (var i2 = 0; i2 < s2; i2++) {
                  edge = edgesToBeRemoved[i2];
                  graph.remove(edge);
                }
                var nodesToBeRemoved = [];
                nodesToBeRemoved = nodesToBeRemoved.concat(graph.getNodes());
                var node;
                s2 = nodesToBeRemoved.length;
                for (var i2 = 0; i2 < s2; i2++) {
                  node = nodesToBeRemoved[i2];
                  graph.remove(node);
                }
                if (graph == this.rootGraph) {
                  this.setRootGraph(null);
                }
                var index = this.graphs.indexOf(graph);
                this.graphs.splice(index, 1);
                graph.parent = null;
              } else if (lObj instanceof LEdge) {
                edge = lObj;
                if (edge == null) {
                  throw "Edge is null!";
                }
                if (!edge.isInterGraph) {
                  throw "Not an inter-graph edge!";
                }
                if (!(edge.source != null && edge.target != null)) {
                  throw "Source and/or target is null!";
                }
                if (!(edge.source.edges.indexOf(edge) != -1 && edge.target.edges.indexOf(edge) != -1)) {
                  throw "Source and/or target doesn't know this edge!";
                }
                var index = edge.source.edges.indexOf(edge);
                edge.source.edges.splice(index, 1);
                index = edge.target.edges.indexOf(edge);
                edge.target.edges.splice(index, 1);
                if (!(edge.source.owner != null && edge.source.owner.getGraphManager() != null)) {
                  throw "Edge owner graph or owner graph manager is null!";
                }
                if (edge.source.owner.getGraphManager().edges.indexOf(edge) == -1) {
                  throw "Not in owner graph manager's edge list!";
                }
                var index = edge.source.owner.getGraphManager().edges.indexOf(edge);
                edge.source.owner.getGraphManager().edges.splice(index, 1);
              }
            };
            LGraphManager.prototype.updateBounds = function() {
              this.rootGraph.updateBounds(true);
            };
            LGraphManager.prototype.getGraphs = function() {
              return this.graphs;
            };
            LGraphManager.prototype.getAllNodes = function() {
              if (this.allNodes == null) {
                var nodeList = [];
                var graphs = this.getGraphs();
                var s2 = graphs.length;
                for (var i2 = 0; i2 < s2; i2++) {
                  nodeList = nodeList.concat(graphs[i2].getNodes());
                }
                this.allNodes = nodeList;
              }
              return this.allNodes;
            };
            LGraphManager.prototype.resetAllNodes = function() {
              this.allNodes = null;
            };
            LGraphManager.prototype.resetAllEdges = function() {
              this.allEdges = null;
            };
            LGraphManager.prototype.resetAllNodesToApplyGravitation = function() {
              this.allNodesToApplyGravitation = null;
            };
            LGraphManager.prototype.getAllEdges = function() {
              if (this.allEdges == null) {
                var edgeList = [];
                var graphs = this.getGraphs();
                var s2 = graphs.length;
                for (var i2 = 0; i2 < graphs.length; i2++) {
                  edgeList = edgeList.concat(graphs[i2].getEdges());
                }
                edgeList = edgeList.concat(this.edges);
                this.allEdges = edgeList;
              }
              return this.allEdges;
            };
            LGraphManager.prototype.getAllNodesToApplyGravitation = function() {
              return this.allNodesToApplyGravitation;
            };
            LGraphManager.prototype.setAllNodesToApplyGravitation = function(nodeList) {
              if (this.allNodesToApplyGravitation != null) {
                throw "assert failed";
              }
              this.allNodesToApplyGravitation = nodeList;
            };
            LGraphManager.prototype.getRoot = function() {
              return this.rootGraph;
            };
            LGraphManager.prototype.setRootGraph = function(graph) {
              if (graph.getGraphManager() != this) {
                throw "Root not in this graph mgr!";
              }
              this.rootGraph = graph;
              if (graph.parent == null) {
                graph.parent = this.layout.newNode("Root node");
              }
            };
            LGraphManager.prototype.getLayout = function() {
              return this.layout;
            };
            LGraphManager.prototype.isOneAncestorOfOther = function(firstNode, secondNode) {
              if (!(firstNode != null && secondNode != null)) {
                throw "assert failed";
              }
              if (firstNode == secondNode) {
                return true;
              }
              var ownerGraph = firstNode.getOwner();
              var parentNode;
              do {
                parentNode = ownerGraph.getParent();
                if (parentNode == null) {
                  break;
                }
                if (parentNode == secondNode) {
                  return true;
                }
                ownerGraph = parentNode.getOwner();
                if (ownerGraph == null) {
                  break;
                }
              } while (true);
              ownerGraph = secondNode.getOwner();
              do {
                parentNode = ownerGraph.getParent();
                if (parentNode == null) {
                  break;
                }
                if (parentNode == firstNode) {
                  return true;
                }
                ownerGraph = parentNode.getOwner();
                if (ownerGraph == null) {
                  break;
                }
              } while (true);
              return false;
            };
            LGraphManager.prototype.calcLowestCommonAncestors = function() {
              var edge;
              var sourceNode;
              var targetNode;
              var sourceAncestorGraph;
              var targetAncestorGraph;
              var edges3 = this.getAllEdges();
              var s2 = edges3.length;
              for (var i2 = 0; i2 < s2; i2++) {
                edge = edges3[i2];
                sourceNode = edge.source;
                targetNode = edge.target;
                edge.lca = null;
                edge.sourceInLca = sourceNode;
                edge.targetInLca = targetNode;
                if (sourceNode == targetNode) {
                  edge.lca = sourceNode.getOwner();
                  continue;
                }
                sourceAncestorGraph = sourceNode.getOwner();
                while (edge.lca == null) {
                  edge.targetInLca = targetNode;
                  targetAncestorGraph = targetNode.getOwner();
                  while (edge.lca == null) {
                    if (targetAncestorGraph == sourceAncestorGraph) {
                      edge.lca = targetAncestorGraph;
                      break;
                    }
                    if (targetAncestorGraph == this.rootGraph) {
                      break;
                    }
                    if (edge.lca != null) {
                      throw "assert failed";
                    }
                    edge.targetInLca = targetAncestorGraph.getParent();
                    targetAncestorGraph = edge.targetInLca.getOwner();
                  }
                  if (sourceAncestorGraph == this.rootGraph) {
                    break;
                  }
                  if (edge.lca == null) {
                    edge.sourceInLca = sourceAncestorGraph.getParent();
                    sourceAncestorGraph = edge.sourceInLca.getOwner();
                  }
                }
                if (edge.lca == null) {
                  throw "assert failed";
                }
              }
            };
            LGraphManager.prototype.calcLowestCommonAncestor = function(firstNode, secondNode) {
              if (firstNode == secondNode) {
                return firstNode.getOwner();
              }
              var firstOwnerGraph = firstNode.getOwner();
              do {
                if (firstOwnerGraph == null) {
                  break;
                }
                var secondOwnerGraph = secondNode.getOwner();
                do {
                  if (secondOwnerGraph == null) {
                    break;
                  }
                  if (secondOwnerGraph == firstOwnerGraph) {
                    return secondOwnerGraph;
                  }
                  secondOwnerGraph = secondOwnerGraph.getParent().getOwner();
                } while (true);
                firstOwnerGraph = firstOwnerGraph.getParent().getOwner();
              } while (true);
              return firstOwnerGraph;
            };
            LGraphManager.prototype.calcInclusionTreeDepths = function(graph, depth) {
              if (graph == null && depth == null) {
                graph = this.rootGraph;
                depth = 1;
              }
              var node;
              var nodes3 = graph.getNodes();
              var s2 = nodes3.length;
              for (var i2 = 0; i2 < s2; i2++) {
                node = nodes3[i2];
                node.inclusionTreeDepth = depth;
                if (node.child != null) {
                  this.calcInclusionTreeDepths(node.child, depth + 1);
                }
              }
            };
            LGraphManager.prototype.includesInvalidEdge = function() {
              var edge;
              var s2 = this.edges.length;
              for (var i2 = 0; i2 < s2; i2++) {
                edge = this.edges[i2];
                if (this.isOneAncestorOfOther(edge.source, edge.target)) {
                  return true;
                }
              }
              return false;
            };
            module2.exports = LGraphManager;
          },
          /* 7 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var LayoutConstants = __webpack_require__(0);
            function FDLayoutConstants() {
            }
            for (var prop in LayoutConstants) {
              FDLayoutConstants[prop] = LayoutConstants[prop];
            }
            FDLayoutConstants.MAX_ITERATIONS = 2500;
            FDLayoutConstants.DEFAULT_EDGE_LENGTH = 50;
            FDLayoutConstants.DEFAULT_SPRING_STRENGTH = 0.45;
            FDLayoutConstants.DEFAULT_REPULSION_STRENGTH = 4500;
            FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH = 0.4;
            FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = 1;
            FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR = 3.8;
            FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = 1.5;
            FDLayoutConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION = true;
            FDLayoutConstants.DEFAULT_USE_SMART_REPULSION_RANGE_CALCULATION = true;
            FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = 0.3;
            FDLayoutConstants.COOLING_ADAPTATION_FACTOR = 0.33;
            FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT = 1e3;
            FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT = 5e3;
            FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL = 100;
            FDLayoutConstants.MAX_NODE_DISPLACEMENT = FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL * 3;
            FDLayoutConstants.MIN_REPULSION_DIST = FDLayoutConstants.DEFAULT_EDGE_LENGTH / 10;
            FDLayoutConstants.CONVERGENCE_CHECK_PERIOD = 100;
            FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = 0.1;
            FDLayoutConstants.MIN_EDGE_LENGTH = 1;
            FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD = 10;
            module2.exports = FDLayoutConstants;
          },
          /* 8 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var Point2 = __webpack_require__(12);
            function IGeometry() {
            }
            IGeometry.calcSeparationAmount = function(rectA, rectB, overlapAmount, separationBuffer) {
              if (!rectA.intersects(rectB)) {
                throw "assert failed";
              }
              var directions = new Array(2);
              this.decideDirectionsForOverlappingNodes(rectA, rectB, directions);
              overlapAmount[0] = Math.min(rectA.getRight(), rectB.getRight()) - Math.max(rectA.x, rectB.x);
              overlapAmount[1] = Math.min(rectA.getBottom(), rectB.getBottom()) - Math.max(rectA.y, rectB.y);
              if (rectA.getX() <= rectB.getX() && rectA.getRight() >= rectB.getRight()) {
                overlapAmount[0] += Math.min(rectB.getX() - rectA.getX(), rectA.getRight() - rectB.getRight());
              } else if (rectB.getX() <= rectA.getX() && rectB.getRight() >= rectA.getRight()) {
                overlapAmount[0] += Math.min(rectA.getX() - rectB.getX(), rectB.getRight() - rectA.getRight());
              }
              if (rectA.getY() <= rectB.getY() && rectA.getBottom() >= rectB.getBottom()) {
                overlapAmount[1] += Math.min(rectB.getY() - rectA.getY(), rectA.getBottom() - rectB.getBottom());
              } else if (rectB.getY() <= rectA.getY() && rectB.getBottom() >= rectA.getBottom()) {
                overlapAmount[1] += Math.min(rectA.getY() - rectB.getY(), rectB.getBottom() - rectA.getBottom());
              }
              var slope = Math.abs((rectB.getCenterY() - rectA.getCenterY()) / (rectB.getCenterX() - rectA.getCenterX()));
              if (rectB.getCenterY() === rectA.getCenterY() && rectB.getCenterX() === rectA.getCenterX()) {
                slope = 1;
              }
              var moveByY = slope * overlapAmount[0];
              var moveByX = overlapAmount[1] / slope;
              if (overlapAmount[0] < moveByX) {
                moveByX = overlapAmount[0];
              } else {
                moveByY = overlapAmount[1];
              }
              overlapAmount[0] = -1 * directions[0] * (moveByX / 2 + separationBuffer);
              overlapAmount[1] = -1 * directions[1] * (moveByY / 2 + separationBuffer);
            };
            IGeometry.decideDirectionsForOverlappingNodes = function(rectA, rectB, directions) {
              if (rectA.getCenterX() < rectB.getCenterX()) {
                directions[0] = -1;
              } else {
                directions[0] = 1;
              }
              if (rectA.getCenterY() < rectB.getCenterY()) {
                directions[1] = -1;
              } else {
                directions[1] = 1;
              }
            };
            IGeometry.getIntersection2 = function(rectA, rectB, result) {
              var p1x = rectA.getCenterX();
              var p1y = rectA.getCenterY();
              var p2x = rectB.getCenterX();
              var p2y = rectB.getCenterY();
              if (rectA.intersects(rectB)) {
                result[0] = p1x;
                result[1] = p1y;
                result[2] = p2x;
                result[3] = p2y;
                return true;
              }
              var topLeftAx = rectA.getX();
              var topLeftAy = rectA.getY();
              var topRightAx = rectA.getRight();
              var bottomLeftAx = rectA.getX();
              var bottomLeftAy = rectA.getBottom();
              var bottomRightAx = rectA.getRight();
              var halfWidthA = rectA.getWidthHalf();
              var halfHeightA = rectA.getHeightHalf();
              var topLeftBx = rectB.getX();
              var topLeftBy = rectB.getY();
              var topRightBx = rectB.getRight();
              var bottomLeftBx = rectB.getX();
              var bottomLeftBy = rectB.getBottom();
              var bottomRightBx = rectB.getRight();
              var halfWidthB = rectB.getWidthHalf();
              var halfHeightB = rectB.getHeightHalf();
              var clipPointAFound = false;
              var clipPointBFound = false;
              if (p1x === p2x) {
                if (p1y > p2y) {
                  result[0] = p1x;
                  result[1] = topLeftAy;
                  result[2] = p2x;
                  result[3] = bottomLeftBy;
                  return false;
                } else if (p1y < p2y) {
                  result[0] = p1x;
                  result[1] = bottomLeftAy;
                  result[2] = p2x;
                  result[3] = topLeftBy;
                  return false;
                } else {
                }
              } else if (p1y === p2y) {
                if (p1x > p2x) {
                  result[0] = topLeftAx;
                  result[1] = p1y;
                  result[2] = topRightBx;
                  result[3] = p2y;
                  return false;
                } else if (p1x < p2x) {
                  result[0] = topRightAx;
                  result[1] = p1y;
                  result[2] = topLeftBx;
                  result[3] = p2y;
                  return false;
                } else {
                }
              } else {
                var slopeA = rectA.height / rectA.width;
                var slopeB = rectB.height / rectB.width;
                var slopePrime = (p2y - p1y) / (p2x - p1x);
                var cardinalDirectionA = void 0;
                var cardinalDirectionB = void 0;
                var tempPointAx = void 0;
                var tempPointAy = void 0;
                var tempPointBx = void 0;
                var tempPointBy = void 0;
                if (-slopeA === slopePrime) {
                  if (p1x > p2x) {
                    result[0] = bottomLeftAx;
                    result[1] = bottomLeftAy;
                    clipPointAFound = true;
                  } else {
                    result[0] = topRightAx;
                    result[1] = topLeftAy;
                    clipPointAFound = true;
                  }
                } else if (slopeA === slopePrime) {
                  if (p1x > p2x) {
                    result[0] = topLeftAx;
                    result[1] = topLeftAy;
                    clipPointAFound = true;
                  } else {
                    result[0] = bottomRightAx;
                    result[1] = bottomLeftAy;
                    clipPointAFound = true;
                  }
                }
                if (-slopeB === slopePrime) {
                  if (p2x > p1x) {
                    result[2] = bottomLeftBx;
                    result[3] = bottomLeftBy;
                    clipPointBFound = true;
                  } else {
                    result[2] = topRightBx;
                    result[3] = topLeftBy;
                    clipPointBFound = true;
                  }
                } else if (slopeB === slopePrime) {
                  if (p2x > p1x) {
                    result[2] = topLeftBx;
                    result[3] = topLeftBy;
                    clipPointBFound = true;
                  } else {
                    result[2] = bottomRightBx;
                    result[3] = bottomLeftBy;
                    clipPointBFound = true;
                  }
                }
                if (clipPointAFound && clipPointBFound) {
                  return false;
                }
                if (p1x > p2x) {
                  if (p1y > p2y) {
                    cardinalDirectionA = this.getCardinalDirection(slopeA, slopePrime, 4);
                    cardinalDirectionB = this.getCardinalDirection(slopeB, slopePrime, 2);
                  } else {
                    cardinalDirectionA = this.getCardinalDirection(-slopeA, slopePrime, 3);
                    cardinalDirectionB = this.getCardinalDirection(-slopeB, slopePrime, 1);
                  }
                } else {
                  if (p1y > p2y) {
                    cardinalDirectionA = this.getCardinalDirection(-slopeA, slopePrime, 1);
                    cardinalDirectionB = this.getCardinalDirection(-slopeB, slopePrime, 3);
                  } else {
                    cardinalDirectionA = this.getCardinalDirection(slopeA, slopePrime, 2);
                    cardinalDirectionB = this.getCardinalDirection(slopeB, slopePrime, 4);
                  }
                }
                if (!clipPointAFound) {
                  switch (cardinalDirectionA) {
                    case 1:
                      tempPointAy = topLeftAy;
                      tempPointAx = p1x + -halfHeightA / slopePrime;
                      result[0] = tempPointAx;
                      result[1] = tempPointAy;
                      break;
                    case 2:
                      tempPointAx = bottomRightAx;
                      tempPointAy = p1y + halfWidthA * slopePrime;
                      result[0] = tempPointAx;
                      result[1] = tempPointAy;
                      break;
                    case 3:
                      tempPointAy = bottomLeftAy;
                      tempPointAx = p1x + halfHeightA / slopePrime;
                      result[0] = tempPointAx;
                      result[1] = tempPointAy;
                      break;
                    case 4:
                      tempPointAx = bottomLeftAx;
                      tempPointAy = p1y + -halfWidthA * slopePrime;
                      result[0] = tempPointAx;
                      result[1] = tempPointAy;
                      break;
                  }
                }
                if (!clipPointBFound) {
                  switch (cardinalDirectionB) {
                    case 1:
                      tempPointBy = topLeftBy;
                      tempPointBx = p2x + -halfHeightB / slopePrime;
                      result[2] = tempPointBx;
                      result[3] = tempPointBy;
                      break;
                    case 2:
                      tempPointBx = bottomRightBx;
                      tempPointBy = p2y + halfWidthB * slopePrime;
                      result[2] = tempPointBx;
                      result[3] = tempPointBy;
                      break;
                    case 3:
                      tempPointBy = bottomLeftBy;
                      tempPointBx = p2x + halfHeightB / slopePrime;
                      result[2] = tempPointBx;
                      result[3] = tempPointBy;
                      break;
                    case 4:
                      tempPointBx = bottomLeftBx;
                      tempPointBy = p2y + -halfWidthB * slopePrime;
                      result[2] = tempPointBx;
                      result[3] = tempPointBy;
                      break;
                  }
                }
              }
              return false;
            };
            IGeometry.getCardinalDirection = function(slope, slopePrime, line) {
              if (slope > slopePrime) {
                return line;
              } else {
                return 1 + line % 4;
              }
            };
            IGeometry.getIntersection = function(s1, s2, f1, f2) {
              if (f2 == null) {
                return this.getIntersection2(s1, s2, f1);
              }
              var x1 = s1.x;
              var y1 = s1.y;
              var x22 = s2.x;
              var y22 = s2.y;
              var x3 = f1.x;
              var y3 = f1.y;
              var x4 = f2.x;
              var y4 = f2.y;
              var x5 = void 0, y5 = void 0;
              var a1 = void 0, a2 = void 0, b1 = void 0, b2 = void 0, c1 = void 0, c2 = void 0;
              var denom = void 0;
              a1 = y22 - y1;
              b1 = x1 - x22;
              c1 = x22 * y1 - x1 * y22;
              a2 = y4 - y3;
              b2 = x3 - x4;
              c2 = x4 * y3 - x3 * y4;
              denom = a1 * b2 - a2 * b1;
              if (denom === 0) {
                return null;
              }
              x5 = (b1 * c2 - b2 * c1) / denom;
              y5 = (a2 * c1 - a1 * c2) / denom;
              return new Point2(x5, y5);
            };
            IGeometry.angleOfVector = function(Cx, Cy, Nx, Ny) {
              var C_angle = void 0;
              if (Cx !== Nx) {
                C_angle = Math.atan((Ny - Cy) / (Nx - Cx));
                if (Nx < Cx) {
                  C_angle += Math.PI;
                } else if (Ny < Cy) {
                  C_angle += this.TWO_PI;
                }
              } else if (Ny < Cy) {
                C_angle = this.ONE_AND_HALF_PI;
              } else {
                C_angle = this.HALF_PI;
              }
              return C_angle;
            };
            IGeometry.doIntersect = function(p1, p22, p3, p4) {
              var a2 = p1.x;
              var b2 = p1.y;
              var c2 = p22.x;
              var d2 = p22.y;
              var p5 = p3.x;
              var q2 = p3.y;
              var r2 = p4.x;
              var s2 = p4.y;
              var det = (c2 - a2) * (s2 - q2) - (r2 - p5) * (d2 - b2);
              if (det === 0) {
                return false;
              } else {
                var lambda = ((s2 - q2) * (r2 - a2) + (p5 - r2) * (s2 - b2)) / det;
                var gamma = ((b2 - d2) * (r2 - a2) + (c2 - a2) * (s2 - b2)) / det;
                return 0 < lambda && lambda < 1 && 0 < gamma && gamma < 1;
              }
            };
            IGeometry.HALF_PI = 0.5 * Math.PI;
            IGeometry.ONE_AND_HALF_PI = 1.5 * Math.PI;
            IGeometry.TWO_PI = 2 * Math.PI;
            IGeometry.THREE_PI = 3 * Math.PI;
            module2.exports = IGeometry;
          },
          /* 9 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function IMath() {
            }
            IMath.sign = function(value) {
              if (value > 0) {
                return 1;
              } else if (value < 0) {
                return -1;
              } else {
                return 0;
              }
            };
            IMath.floor = function(value) {
              return value < 0 ? Math.ceil(value) : Math.floor(value);
            };
            IMath.ceil = function(value) {
              return value < 0 ? Math.floor(value) : Math.ceil(value);
            };
            module2.exports = IMath;
          },
          /* 10 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function Integer() {
            }
            Integer.MAX_VALUE = 2147483647;
            Integer.MIN_VALUE = -2147483648;
            module2.exports = Integer;
          },
          /* 11 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var _createClass2 = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i2 = 0; i2 < props.length; i2++) {
                  var descriptor = props[i2];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            function _classCallCheck2(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var nodeFrom = function nodeFrom2(value) {
              return { value, next: null, prev: null };
            };
            var add3 = function add4(prev, node, next2, list) {
              if (prev !== null) {
                prev.next = node;
              } else {
                list.head = node;
              }
              if (next2 !== null) {
                next2.prev = node;
              } else {
                list.tail = node;
              }
              node.prev = prev;
              node.next = next2;
              list.length++;
              return node;
            };
            var _remove = function _remove2(node, list) {
              var prev = node.prev, next2 = node.next;
              if (prev !== null) {
                prev.next = next2;
              } else {
                list.head = next2;
              }
              if (next2 !== null) {
                next2.prev = prev;
              } else {
                list.tail = prev;
              }
              node.prev = node.next = null;
              list.length--;
              return node;
            };
            var LinkedList = function() {
              function LinkedList2(vals) {
                var _this = this;
                _classCallCheck2(this, LinkedList2);
                this.length = 0;
                this.head = null;
                this.tail = null;
                if (vals != null) {
                  vals.forEach(function(v3) {
                    return _this.push(v3);
                  });
                }
              }
              _createClass2(LinkedList2, [{
                key: "size",
                value: function size3() {
                  return this.length;
                }
              }, {
                key: "insertBefore",
                value: function insertBefore(val, otherNode) {
                  return add3(otherNode.prev, nodeFrom(val), otherNode, this);
                }
              }, {
                key: "insertAfter",
                value: function insertAfter(val, otherNode) {
                  return add3(otherNode, nodeFrom(val), otherNode.next, this);
                }
              }, {
                key: "insertNodeBefore",
                value: function insertNodeBefore(newNode, otherNode) {
                  return add3(otherNode.prev, newNode, otherNode, this);
                }
              }, {
                key: "insertNodeAfter",
                value: function insertNodeAfter(newNode, otherNode) {
                  return add3(otherNode, newNode, otherNode.next, this);
                }
              }, {
                key: "push",
                value: function push3(val) {
                  return add3(this.tail, nodeFrom(val), null, this);
                }
              }, {
                key: "unshift",
                value: function unshift(val) {
                  return add3(null, nodeFrom(val), this.head, this);
                }
              }, {
                key: "remove",
                value: function remove2(node) {
                  return _remove(node, this);
                }
              }, {
                key: "pop",
                value: function pop() {
                  return _remove(this.tail, this).value;
                }
              }, {
                key: "popNode",
                value: function popNode() {
                  return _remove(this.tail, this);
                }
              }, {
                key: "shift",
                value: function shift2() {
                  return _remove(this.head, this).value;
                }
              }, {
                key: "shiftNode",
                value: function shiftNode() {
                  return _remove(this.head, this);
                }
              }, {
                key: "get_object_at",
                value: function get_object_at(index) {
                  if (index <= this.length()) {
                    var i2 = 1;
                    var current = this.head;
                    while (i2 < index) {
                      current = current.next;
                      i2++;
                    }
                    return current.value;
                  }
                }
              }, {
                key: "set_object_at",
                value: function set_object_at(index, value) {
                  if (index <= this.length()) {
                    var i2 = 1;
                    var current = this.head;
                    while (i2 < index) {
                      current = current.next;
                      i2++;
                    }
                    current.value = value;
                  }
                }
              }]);
              return LinkedList2;
            }();
            module2.exports = LinkedList;
          },
          /* 12 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function Point2(x3, y3, p3) {
              this.x = null;
              this.y = null;
              if (x3 == null && y3 == null && p3 == null) {
                this.x = 0;
                this.y = 0;
              } else if (typeof x3 == "number" && typeof y3 == "number" && p3 == null) {
                this.x = x3;
                this.y = y3;
              } else if (x3.constructor.name == "Point" && y3 == null && p3 == null) {
                p3 = x3;
                this.x = p3.x;
                this.y = p3.y;
              }
            }
            Point2.prototype.getX = function() {
              return this.x;
            };
            Point2.prototype.getY = function() {
              return this.y;
            };
            Point2.prototype.getLocation = function() {
              return new Point2(this.x, this.y);
            };
            Point2.prototype.setLocation = function(x3, y3, p3) {
              if (x3.constructor.name == "Point" && y3 == null && p3 == null) {
                p3 = x3;
                this.setLocation(p3.x, p3.y);
              } else if (typeof x3 == "number" && typeof y3 == "number" && p3 == null) {
                if (parseInt(x3) == x3 && parseInt(y3) == y3) {
                  this.move(x3, y3);
                } else {
                  this.x = Math.floor(x3 + 0.5);
                  this.y = Math.floor(y3 + 0.5);
                }
              }
            };
            Point2.prototype.move = function(x3, y3) {
              this.x = x3;
              this.y = y3;
            };
            Point2.prototype.translate = function(dx, dy) {
              this.x += dx;
              this.y += dy;
            };
            Point2.prototype.equals = function(obj) {
              if (obj.constructor.name == "Point") {
                var pt2 = obj;
                return this.x == pt2.x && this.y == pt2.y;
              }
              return this == obj;
            };
            Point2.prototype.toString = function() {
              return new Point2().constructor.name + "[x=" + this.x + ",y=" + this.y + "]";
            };
            module2.exports = Point2;
          },
          /* 13 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function RectangleD(x3, y3, width2, height2) {
              this.x = 0;
              this.y = 0;
              this.width = 0;
              this.height = 0;
              if (x3 != null && y3 != null && width2 != null && height2 != null) {
                this.x = x3;
                this.y = y3;
                this.width = width2;
                this.height = height2;
              }
            }
            RectangleD.prototype.getX = function() {
              return this.x;
            };
            RectangleD.prototype.setX = function(x3) {
              this.x = x3;
            };
            RectangleD.prototype.getY = function() {
              return this.y;
            };
            RectangleD.prototype.setY = function(y3) {
              this.y = y3;
            };
            RectangleD.prototype.getWidth = function() {
              return this.width;
            };
            RectangleD.prototype.setWidth = function(width2) {
              this.width = width2;
            };
            RectangleD.prototype.getHeight = function() {
              return this.height;
            };
            RectangleD.prototype.setHeight = function(height2) {
              this.height = height2;
            };
            RectangleD.prototype.getRight = function() {
              return this.x + this.width;
            };
            RectangleD.prototype.getBottom = function() {
              return this.y + this.height;
            };
            RectangleD.prototype.intersects = function(a2) {
              if (this.getRight() < a2.x) {
                return false;
              }
              if (this.getBottom() < a2.y) {
                return false;
              }
              if (a2.getRight() < this.x) {
                return false;
              }
              if (a2.getBottom() < this.y) {
                return false;
              }
              return true;
            };
            RectangleD.prototype.getCenterX = function() {
              return this.x + this.width / 2;
            };
            RectangleD.prototype.getMinX = function() {
              return this.getX();
            };
            RectangleD.prototype.getMaxX = function() {
              return this.getX() + this.width;
            };
            RectangleD.prototype.getCenterY = function() {
              return this.y + this.height / 2;
            };
            RectangleD.prototype.getMinY = function() {
              return this.getY();
            };
            RectangleD.prototype.getMaxY = function() {
              return this.getY() + this.height;
            };
            RectangleD.prototype.getWidthHalf = function() {
              return this.width / 2;
            };
            RectangleD.prototype.getHeightHalf = function() {
              return this.height / 2;
            };
            module2.exports = RectangleD;
          },
          /* 14 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
              return typeof obj;
            } : function(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            function UniqueIDGeneretor() {
            }
            UniqueIDGeneretor.lastID = 0;
            UniqueIDGeneretor.createID = function(obj) {
              if (UniqueIDGeneretor.isPrimitive(obj)) {
                return obj;
              }
              if (obj.uniqueID != null) {
                return obj.uniqueID;
              }
              obj.uniqueID = UniqueIDGeneretor.getString();
              UniqueIDGeneretor.lastID++;
              return obj.uniqueID;
            };
            UniqueIDGeneretor.getString = function(id2) {
              if (id2 == null) id2 = UniqueIDGeneretor.lastID;
              return "Object#" + id2;
            };
            UniqueIDGeneretor.isPrimitive = function(arg) {
              var type2 = typeof arg === "undefined" ? "undefined" : _typeof2(arg);
              return arg == null || type2 != "object" && type2 != "function";
            };
            module2.exports = UniqueIDGeneretor;
          },
          /* 15 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function _toConsumableArray2(arr) {
              if (Array.isArray(arr)) {
                for (var i2 = 0, arr2 = Array(arr.length); i2 < arr.length; i2++) {
                  arr2[i2] = arr[i2];
                }
                return arr2;
              } else {
                return Array.from(arr);
              }
            }
            var LayoutConstants = __webpack_require__(0);
            var LGraphManager = __webpack_require__(6);
            var LNode = __webpack_require__(3);
            var LEdge = __webpack_require__(1);
            var LGraph = __webpack_require__(5);
            var PointD = __webpack_require__(4);
            var Transform = __webpack_require__(17);
            var Emitter3 = __webpack_require__(27);
            function Layout2(isRemoteUse) {
              Emitter3.call(this);
              this.layoutQuality = LayoutConstants.QUALITY;
              this.createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;
              this.incremental = LayoutConstants.DEFAULT_INCREMENTAL;
              this.animationOnLayout = LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT;
              this.animationDuringLayout = LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT;
              this.animationPeriod = LayoutConstants.DEFAULT_ANIMATION_PERIOD;
              this.uniformLeafNodeSizes = LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES;
              this.edgeToDummyNodes = /* @__PURE__ */ new Map();
              this.graphManager = new LGraphManager(this);
              this.isLayoutFinished = false;
              this.isSubLayout = false;
              this.isRemoteUse = false;
              if (isRemoteUse != null) {
                this.isRemoteUse = isRemoteUse;
              }
            }
            Layout2.RANDOM_SEED = 1;
            Layout2.prototype = Object.create(Emitter3.prototype);
            Layout2.prototype.getGraphManager = function() {
              return this.graphManager;
            };
            Layout2.prototype.getAllNodes = function() {
              return this.graphManager.getAllNodes();
            };
            Layout2.prototype.getAllEdges = function() {
              return this.graphManager.getAllEdges();
            };
            Layout2.prototype.getAllNodesToApplyGravitation = function() {
              return this.graphManager.getAllNodesToApplyGravitation();
            };
            Layout2.prototype.newGraphManager = function() {
              var gm = new LGraphManager(this);
              this.graphManager = gm;
              return gm;
            };
            Layout2.prototype.newGraph = function(vGraph) {
              return new LGraph(null, this.graphManager, vGraph);
            };
            Layout2.prototype.newNode = function(vNode) {
              return new LNode(this.graphManager, vNode);
            };
            Layout2.prototype.newEdge = function(vEdge) {
              return new LEdge(null, null, vEdge);
            };
            Layout2.prototype.checkLayoutSuccess = function() {
              return this.graphManager.getRoot() == null || this.graphManager.getRoot().getNodes().length == 0 || this.graphManager.includesInvalidEdge();
            };
            Layout2.prototype.runLayout = function() {
              this.isLayoutFinished = false;
              if (this.tilingPreLayout) {
                this.tilingPreLayout();
              }
              this.initParameters();
              var isLayoutSuccessfull;
              if (this.checkLayoutSuccess()) {
                isLayoutSuccessfull = false;
              } else {
                isLayoutSuccessfull = this.layout();
              }
              if (LayoutConstants.ANIMATE === "during") {
                return false;
              }
              if (isLayoutSuccessfull) {
                if (!this.isSubLayout) {
                  this.doPostLayout();
                }
              }
              if (this.tilingPostLayout) {
                this.tilingPostLayout();
              }
              this.isLayoutFinished = true;
              return isLayoutSuccessfull;
            };
            Layout2.prototype.doPostLayout = function() {
              if (!this.incremental) {
                this.transform();
              }
              this.update();
            };
            Layout2.prototype.update2 = function() {
              if (this.createBendsAsNeeded) {
                this.createBendpointsFromDummyNodes();
                this.graphManager.resetAllEdges();
              }
              if (!this.isRemoteUse) {
                var edge;
                var allEdges = this.graphManager.getAllEdges();
                for (var i2 = 0; i2 < allEdges.length; i2++) {
                  edge = allEdges[i2];
                }
                var node;
                var nodes3 = this.graphManager.getRoot().getNodes();
                for (var i2 = 0; i2 < nodes3.length; i2++) {
                  node = nodes3[i2];
                }
                this.update(this.graphManager.getRoot());
              }
            };
            Layout2.prototype.update = function(obj) {
              if (obj == null) {
                this.update2();
              } else if (obj instanceof LNode) {
                var node = obj;
                if (node.getChild() != null) {
                  var nodes3 = node.getChild().getNodes();
                  for (var i2 = 0; i2 < nodes3.length; i2++) {
                    update(nodes3[i2]);
                  }
                }
                if (node.vGraphObject != null) {
                  var vNode = node.vGraphObject;
                  vNode.update(node);
                }
              } else if (obj instanceof LEdge) {
                var edge = obj;
                if (edge.vGraphObject != null) {
                  var vEdge = edge.vGraphObject;
                  vEdge.update(edge);
                }
              } else if (obj instanceof LGraph) {
                var graph = obj;
                if (graph.vGraphObject != null) {
                  var vGraph = graph.vGraphObject;
                  vGraph.update(graph);
                }
              }
            };
            Layout2.prototype.initParameters = function() {
              if (!this.isSubLayout) {
                this.layoutQuality = LayoutConstants.QUALITY;
                this.animationDuringLayout = LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT;
                this.animationPeriod = LayoutConstants.DEFAULT_ANIMATION_PERIOD;
                this.animationOnLayout = LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT;
                this.incremental = LayoutConstants.DEFAULT_INCREMENTAL;
                this.createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;
                this.uniformLeafNodeSizes = LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES;
              }
              if (this.animationDuringLayout) {
                this.animationOnLayout = false;
              }
            };
            Layout2.prototype.transform = function(newLeftTop) {
              if (newLeftTop == void 0) {
                this.transform(new PointD(0, 0));
              } else {
                var trans = new Transform();
                var leftTop = this.graphManager.getRoot().updateLeftTop();
                if (leftTop != null) {
                  trans.setWorldOrgX(newLeftTop.x);
                  trans.setWorldOrgY(newLeftTop.y);
                  trans.setDeviceOrgX(leftTop.x);
                  trans.setDeviceOrgY(leftTop.y);
                  var nodes3 = this.getAllNodes();
                  var node;
                  for (var i2 = 0; i2 < nodes3.length; i2++) {
                    node = nodes3[i2];
                    node.transform(trans);
                  }
                }
              }
            };
            Layout2.prototype.positionNodesRandomly = function(graph) {
              if (graph == void 0) {
                this.positionNodesRandomly(this.getGraphManager().getRoot());
                this.getGraphManager().getRoot().updateBounds(true);
              } else {
                var lNode;
                var childGraph;
                var nodes3 = graph.getNodes();
                for (var i2 = 0; i2 < nodes3.length; i2++) {
                  lNode = nodes3[i2];
                  childGraph = lNode.getChild();
                  if (childGraph == null) {
                    lNode.scatter();
                  } else if (childGraph.getNodes().length == 0) {
                    lNode.scatter();
                  } else {
                    this.positionNodesRandomly(childGraph);
                    lNode.updateBounds();
                  }
                }
              }
            };
            Layout2.prototype.getFlatForest = function() {
              var flatForest = [];
              var isForest = true;
              var allNodes = this.graphManager.getRoot().getNodes();
              var isFlat = true;
              for (var i2 = 0; i2 < allNodes.length; i2++) {
                if (allNodes[i2].getChild() != null) {
                  isFlat = false;
                }
              }
              if (!isFlat) {
                return flatForest;
              }
              var visited = /* @__PURE__ */ new Set();
              var toBeVisited = [];
              var parents2 = /* @__PURE__ */ new Map();
              var unProcessedNodes = [];
              unProcessedNodes = unProcessedNodes.concat(allNodes);
              while (unProcessedNodes.length > 0 && isForest) {
                toBeVisited.push(unProcessedNodes[0]);
                while (toBeVisited.length > 0 && isForest) {
                  var currentNode = toBeVisited[0];
                  toBeVisited.splice(0, 1);
                  visited.add(currentNode);
                  var neighborEdges = currentNode.getEdges();
                  for (var i2 = 0; i2 < neighborEdges.length; i2++) {
                    var currentNeighbor = neighborEdges[i2].getOtherEnd(currentNode);
                    if (parents2.get(currentNode) != currentNeighbor) {
                      if (!visited.has(currentNeighbor)) {
                        toBeVisited.push(currentNeighbor);
                        parents2.set(currentNeighbor, currentNode);
                      } else {
                        isForest = false;
                        break;
                      }
                    }
                  }
                }
                if (!isForest) {
                  flatForest = [];
                } else {
                  var temp = [].concat(_toConsumableArray2(visited));
                  flatForest.push(temp);
                  for (var i2 = 0; i2 < temp.length; i2++) {
                    var value = temp[i2];
                    var index = unProcessedNodes.indexOf(value);
                    if (index > -1) {
                      unProcessedNodes.splice(index, 1);
                    }
                  }
                  visited = /* @__PURE__ */ new Set();
                  parents2 = /* @__PURE__ */ new Map();
                }
              }
              return flatForest;
            };
            Layout2.prototype.createDummyNodesForBendpoints = function(edge) {
              var dummyNodes = [];
              var prev = edge.source;
              var graph = this.graphManager.calcLowestCommonAncestor(edge.source, edge.target);
              for (var i2 = 0; i2 < edge.bendpoints.length; i2++) {
                var dummyNode = this.newNode(null);
                dummyNode.setRect(new Point(0, 0), new Dimension(1, 1));
                graph.add(dummyNode);
                var dummyEdge = this.newEdge(null);
                this.graphManager.add(dummyEdge, prev, dummyNode);
                dummyNodes.add(dummyNode);
                prev = dummyNode;
              }
              var dummyEdge = this.newEdge(null);
              this.graphManager.add(dummyEdge, prev, edge.target);
              this.edgeToDummyNodes.set(edge, dummyNodes);
              if (edge.isInterGraph()) {
                this.graphManager.remove(edge);
              } else {
                graph.remove(edge);
              }
              return dummyNodes;
            };
            Layout2.prototype.createBendpointsFromDummyNodes = function() {
              var edges3 = [];
              edges3 = edges3.concat(this.graphManager.getAllEdges());
              edges3 = [].concat(_toConsumableArray2(this.edgeToDummyNodes.keys())).concat(edges3);
              for (var k2 = 0; k2 < edges3.length; k2++) {
                var lEdge = edges3[k2];
                if (lEdge.bendpoints.length > 0) {
                  var path = this.edgeToDummyNodes.get(lEdge);
                  for (var i2 = 0; i2 < path.length; i2++) {
                    var dummyNode = path[i2];
                    var p3 = new PointD(dummyNode.getCenterX(), dummyNode.getCenterY());
                    var ebp = lEdge.bendpoints.get(i2);
                    ebp.x = p3.x;
                    ebp.y = p3.y;
                    dummyNode.getOwner().remove(dummyNode);
                  }
                  this.graphManager.add(lEdge, lEdge.source, lEdge.target);
                }
              }
            };
            Layout2.transform = function(sliderValue, defaultValue, minDiv, maxMul) {
              if (minDiv != void 0 && maxMul != void 0) {
                var value = defaultValue;
                if (sliderValue <= 50) {
                  var minValue = defaultValue / minDiv;
                  value -= (defaultValue - minValue) / 50 * (50 - sliderValue);
                } else {
                  var maxValue = defaultValue * maxMul;
                  value += (maxValue - defaultValue) / 50 * (sliderValue - 50);
                }
                return value;
              } else {
                var a2, b2;
                if (sliderValue <= 50) {
                  a2 = 9 * defaultValue / 500;
                  b2 = defaultValue / 10;
                } else {
                  a2 = 9 * defaultValue / 50;
                  b2 = -8 * defaultValue;
                }
                return a2 * sliderValue + b2;
              }
            };
            Layout2.findCenterOfTree = function(nodes3) {
              var list = [];
              list = list.concat(nodes3);
              var removedNodes = [];
              var remainingDegrees = /* @__PURE__ */ new Map();
              var foundCenter = false;
              var centerNode = null;
              if (list.length == 1 || list.length == 2) {
                foundCenter = true;
                centerNode = list[0];
              }
              for (var i2 = 0; i2 < list.length; i2++) {
                var node = list[i2];
                var degree = node.getNeighborsList().size;
                remainingDegrees.set(node, node.getNeighborsList().size);
                if (degree == 1) {
                  removedNodes.push(node);
                }
              }
              var tempList = [];
              tempList = tempList.concat(removedNodes);
              while (!foundCenter) {
                var tempList2 = [];
                tempList2 = tempList2.concat(tempList);
                tempList = [];
                for (var i2 = 0; i2 < list.length; i2++) {
                  var node = list[i2];
                  var index = list.indexOf(node);
                  if (index >= 0) {
                    list.splice(index, 1);
                  }
                  var neighbours = node.getNeighborsList();
                  neighbours.forEach(function(neighbour) {
                    if (removedNodes.indexOf(neighbour) < 0) {
                      var otherDegree = remainingDegrees.get(neighbour);
                      var newDegree = otherDegree - 1;
                      if (newDegree == 1) {
                        tempList.push(neighbour);
                      }
                      remainingDegrees.set(neighbour, newDegree);
                    }
                  });
                }
                removedNodes = removedNodes.concat(tempList);
                if (list.length == 1 || list.length == 2) {
                  foundCenter = true;
                  centerNode = list[0];
                }
              }
              return centerNode;
            };
            Layout2.prototype.setGraphManager = function(gm) {
              this.graphManager = gm;
            };
            module2.exports = Layout2;
          },
          /* 16 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function RandomSeed() {
            }
            RandomSeed.seed = 1;
            RandomSeed.x = 0;
            RandomSeed.nextDouble = function() {
              RandomSeed.x = Math.sin(RandomSeed.seed++) * 1e4;
              return RandomSeed.x - Math.floor(RandomSeed.x);
            };
            module2.exports = RandomSeed;
          },
          /* 17 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var PointD = __webpack_require__(4);
            function Transform(x3, y3) {
              this.lworldOrgX = 0;
              this.lworldOrgY = 0;
              this.ldeviceOrgX = 0;
              this.ldeviceOrgY = 0;
              this.lworldExtX = 1;
              this.lworldExtY = 1;
              this.ldeviceExtX = 1;
              this.ldeviceExtY = 1;
            }
            Transform.prototype.getWorldOrgX = function() {
              return this.lworldOrgX;
            };
            Transform.prototype.setWorldOrgX = function(wox) {
              this.lworldOrgX = wox;
            };
            Transform.prototype.getWorldOrgY = function() {
              return this.lworldOrgY;
            };
            Transform.prototype.setWorldOrgY = function(woy) {
              this.lworldOrgY = woy;
            };
            Transform.prototype.getWorldExtX = function() {
              return this.lworldExtX;
            };
            Transform.prototype.setWorldExtX = function(wex) {
              this.lworldExtX = wex;
            };
            Transform.prototype.getWorldExtY = function() {
              return this.lworldExtY;
            };
            Transform.prototype.setWorldExtY = function(wey) {
              this.lworldExtY = wey;
            };
            Transform.prototype.getDeviceOrgX = function() {
              return this.ldeviceOrgX;
            };
            Transform.prototype.setDeviceOrgX = function(dox) {
              this.ldeviceOrgX = dox;
            };
            Transform.prototype.getDeviceOrgY = function() {
              return this.ldeviceOrgY;
            };
            Transform.prototype.setDeviceOrgY = function(doy) {
              this.ldeviceOrgY = doy;
            };
            Transform.prototype.getDeviceExtX = function() {
              return this.ldeviceExtX;
            };
            Transform.prototype.setDeviceExtX = function(dex) {
              this.ldeviceExtX = dex;
            };
            Transform.prototype.getDeviceExtY = function() {
              return this.ldeviceExtY;
            };
            Transform.prototype.setDeviceExtY = function(dey) {
              this.ldeviceExtY = dey;
            };
            Transform.prototype.transformX = function(x3) {
              var xDevice = 0;
              var worldExtX = this.lworldExtX;
              if (worldExtX != 0) {
                xDevice = this.ldeviceOrgX + (x3 - this.lworldOrgX) * this.ldeviceExtX / worldExtX;
              }
              return xDevice;
            };
            Transform.prototype.transformY = function(y3) {
              var yDevice = 0;
              var worldExtY = this.lworldExtY;
              if (worldExtY != 0) {
                yDevice = this.ldeviceOrgY + (y3 - this.lworldOrgY) * this.ldeviceExtY / worldExtY;
              }
              return yDevice;
            };
            Transform.prototype.inverseTransformX = function(x3) {
              var xWorld = 0;
              var deviceExtX = this.ldeviceExtX;
              if (deviceExtX != 0) {
                xWorld = this.lworldOrgX + (x3 - this.ldeviceOrgX) * this.lworldExtX / deviceExtX;
              }
              return xWorld;
            };
            Transform.prototype.inverseTransformY = function(y3) {
              var yWorld = 0;
              var deviceExtY = this.ldeviceExtY;
              if (deviceExtY != 0) {
                yWorld = this.lworldOrgY + (y3 - this.ldeviceOrgY) * this.lworldExtY / deviceExtY;
              }
              return yWorld;
            };
            Transform.prototype.inverseTransformPoint = function(inPoint) {
              var outPoint = new PointD(this.inverseTransformX(inPoint.x), this.inverseTransformY(inPoint.y));
              return outPoint;
            };
            module2.exports = Transform;
          },
          /* 18 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function _toConsumableArray2(arr) {
              if (Array.isArray(arr)) {
                for (var i2 = 0, arr2 = Array(arr.length); i2 < arr.length; i2++) {
                  arr2[i2] = arr[i2];
                }
                return arr2;
              } else {
                return Array.from(arr);
              }
            }
            var Layout2 = __webpack_require__(15);
            var FDLayoutConstants = __webpack_require__(7);
            var LayoutConstants = __webpack_require__(0);
            var IGeometry = __webpack_require__(8);
            var IMath = __webpack_require__(9);
            function FDLayout() {
              Layout2.call(this);
              this.useSmartIdealEdgeLengthCalculation = FDLayoutConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;
              this.idealEdgeLength = FDLayoutConstants.DEFAULT_EDGE_LENGTH;
              this.springConstant = FDLayoutConstants.DEFAULT_SPRING_STRENGTH;
              this.repulsionConstant = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH;
              this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;
              this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;
              this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;
              this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;
              this.displacementThresholdPerNode = 3 * FDLayoutConstants.DEFAULT_EDGE_LENGTH / 100;
              this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;
              this.initialCoolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;
              this.totalDisplacement = 0;
              this.oldTotalDisplacement = 0;
              this.maxIterations = FDLayoutConstants.MAX_ITERATIONS;
            }
            FDLayout.prototype = Object.create(Layout2.prototype);
            for (var prop in Layout2) {
              FDLayout[prop] = Layout2[prop];
            }
            FDLayout.prototype.initParameters = function() {
              Layout2.prototype.initParameters.call(this, arguments);
              this.totalIterations = 0;
              this.notAnimatedIterations = 0;
              this.useFRGridVariant = FDLayoutConstants.DEFAULT_USE_SMART_REPULSION_RANGE_CALCULATION;
              this.grid = [];
            };
            FDLayout.prototype.calcIdealEdgeLengths = function() {
              var edge;
              var lcaDepth;
              var source;
              var target;
              var sizeOfSourceInLca;
              var sizeOfTargetInLca;
              var allEdges = this.getGraphManager().getAllEdges();
              for (var i2 = 0; i2 < allEdges.length; i2++) {
                edge = allEdges[i2];
                edge.idealLength = this.idealEdgeLength;
                if (edge.isInterGraph) {
                  source = edge.getSource();
                  target = edge.getTarget();
                  sizeOfSourceInLca = edge.getSourceInLca().getEstimatedSize();
                  sizeOfTargetInLca = edge.getTargetInLca().getEstimatedSize();
                  if (this.useSmartIdealEdgeLengthCalculation) {
                    edge.idealLength += sizeOfSourceInLca + sizeOfTargetInLca - 2 * LayoutConstants.SIMPLE_NODE_SIZE;
                  }
                  lcaDepth = edge.getLca().getInclusionTreeDepth();
                  edge.idealLength += FDLayoutConstants.DEFAULT_EDGE_LENGTH * FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR * (source.getInclusionTreeDepth() + target.getInclusionTreeDepth() - 2 * lcaDepth);
                }
              }
            };
            FDLayout.prototype.initSpringEmbedder = function() {
              var s2 = this.getAllNodes().length;
              if (this.incremental) {
                if (s2 > FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) {
                  this.coolingFactor = Math.max(this.coolingFactor * FDLayoutConstants.COOLING_ADAPTATION_FACTOR, this.coolingFactor - (s2 - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) / (FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) * this.coolingFactor * (1 - FDLayoutConstants.COOLING_ADAPTATION_FACTOR));
                }
                this.maxNodeDisplacement = FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL;
              } else {
                if (s2 > FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) {
                  this.coolingFactor = Math.max(FDLayoutConstants.COOLING_ADAPTATION_FACTOR, 1 - (s2 - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) / (FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) * (1 - FDLayoutConstants.COOLING_ADAPTATION_FACTOR));
                } else {
                  this.coolingFactor = 1;
                }
                this.initialCoolingFactor = this.coolingFactor;
                this.maxNodeDisplacement = FDLayoutConstants.MAX_NODE_DISPLACEMENT;
              }
              this.maxIterations = Math.max(this.getAllNodes().length * 5, this.maxIterations);
              this.totalDisplacementThreshold = this.displacementThresholdPerNode * this.getAllNodes().length;
              this.repulsionRange = this.calcRepulsionRange();
            };
            FDLayout.prototype.calcSpringForces = function() {
              var lEdges = this.getAllEdges();
              var edge;
              for (var i2 = 0; i2 < lEdges.length; i2++) {
                edge = lEdges[i2];
                this.calcSpringForce(edge, edge.idealLength);
              }
            };
            FDLayout.prototype.calcRepulsionForces = function() {
              var gridUpdateAllowed = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
              var forceToNodeSurroundingUpdate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              var i2, j2;
              var nodeA, nodeB;
              var lNodes = this.getAllNodes();
              var processedNodeSet;
              if (this.useFRGridVariant) {
                if (this.totalIterations % FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1 && gridUpdateAllowed) {
                  this.updateGrid();
                }
                processedNodeSet = /* @__PURE__ */ new Set();
                for (i2 = 0; i2 < lNodes.length; i2++) {
                  nodeA = lNodes[i2];
                  this.calculateRepulsionForceOfANode(nodeA, processedNodeSet, gridUpdateAllowed, forceToNodeSurroundingUpdate);
                  processedNodeSet.add(nodeA);
                }
              } else {
                for (i2 = 0; i2 < lNodes.length; i2++) {
                  nodeA = lNodes[i2];
                  for (j2 = i2 + 1; j2 < lNodes.length; j2++) {
                    nodeB = lNodes[j2];
                    if (nodeA.getOwner() != nodeB.getOwner()) {
                      continue;
                    }
                    this.calcRepulsionForce(nodeA, nodeB);
                  }
                }
              }
            };
            FDLayout.prototype.calcGravitationalForces = function() {
              var node;
              var lNodes = this.getAllNodesToApplyGravitation();
              for (var i2 = 0; i2 < lNodes.length; i2++) {
                node = lNodes[i2];
                this.calcGravitationalForce(node);
              }
            };
            FDLayout.prototype.moveNodes = function() {
              var lNodes = this.getAllNodes();
              var node;
              for (var i2 = 0; i2 < lNodes.length; i2++) {
                node = lNodes[i2];
                node.move();
              }
            };
            FDLayout.prototype.calcSpringForce = function(edge, idealLength) {
              var sourceNode = edge.getSource();
              var targetNode = edge.getTarget();
              var length;
              var springForce;
              var springForceX;
              var springForceY;
              if (this.uniformLeafNodeSizes && sourceNode.getChild() == null && targetNode.getChild() == null) {
                edge.updateLengthSimple();
              } else {
                edge.updateLength();
                if (edge.isOverlapingSourceAndTarget) {
                  return;
                }
              }
              length = edge.getLength();
              if (length == 0) return;
              springForce = this.springConstant * (length - idealLength);
              springForceX = springForce * (edge.lengthX / length);
              springForceY = springForce * (edge.lengthY / length);
              sourceNode.springForceX += springForceX;
              sourceNode.springForceY += springForceY;
              targetNode.springForceX -= springForceX;
              targetNode.springForceY -= springForceY;
            };
            FDLayout.prototype.calcRepulsionForce = function(nodeA, nodeB) {
              var rectA = nodeA.getRect();
              var rectB = nodeB.getRect();
              var overlapAmount = new Array(2);
              var clipPoints = new Array(4);
              var distanceX;
              var distanceY;
              var distanceSquared;
              var distance;
              var repulsionForce;
              var repulsionForceX;
              var repulsionForceY;
              if (rectA.intersects(rectB)) {
                IGeometry.calcSeparationAmount(rectA, rectB, overlapAmount, FDLayoutConstants.DEFAULT_EDGE_LENGTH / 2);
                repulsionForceX = 2 * overlapAmount[0];
                repulsionForceY = 2 * overlapAmount[1];
                var childrenConstant = nodeA.noOfChildren * nodeB.noOfChildren / (nodeA.noOfChildren + nodeB.noOfChildren);
                nodeA.repulsionForceX -= childrenConstant * repulsionForceX;
                nodeA.repulsionForceY -= childrenConstant * repulsionForceY;
                nodeB.repulsionForceX += childrenConstant * repulsionForceX;
                nodeB.repulsionForceY += childrenConstant * repulsionForceY;
              } else {
                if (this.uniformLeafNodeSizes && nodeA.getChild() == null && nodeB.getChild() == null) {
                  distanceX = rectB.getCenterX() - rectA.getCenterX();
                  distanceY = rectB.getCenterY() - rectA.getCenterY();
                } else {
                  IGeometry.getIntersection(rectA, rectB, clipPoints);
                  distanceX = clipPoints[2] - clipPoints[0];
                  distanceY = clipPoints[3] - clipPoints[1];
                }
                if (Math.abs(distanceX) < FDLayoutConstants.MIN_REPULSION_DIST) {
                  distanceX = IMath.sign(distanceX) * FDLayoutConstants.MIN_REPULSION_DIST;
                }
                if (Math.abs(distanceY) < FDLayoutConstants.MIN_REPULSION_DIST) {
                  distanceY = IMath.sign(distanceY) * FDLayoutConstants.MIN_REPULSION_DIST;
                }
                distanceSquared = distanceX * distanceX + distanceY * distanceY;
                distance = Math.sqrt(distanceSquared);
                repulsionForce = this.repulsionConstant * nodeA.noOfChildren * nodeB.noOfChildren / distanceSquared;
                repulsionForceX = repulsionForce * distanceX / distance;
                repulsionForceY = repulsionForce * distanceY / distance;
                nodeA.repulsionForceX -= repulsionForceX;
                nodeA.repulsionForceY -= repulsionForceY;
                nodeB.repulsionForceX += repulsionForceX;
                nodeB.repulsionForceY += repulsionForceY;
              }
            };
            FDLayout.prototype.calcGravitationalForce = function(node) {
              var ownerGraph;
              var ownerCenterX;
              var ownerCenterY;
              var distanceX;
              var distanceY;
              var absDistanceX;
              var absDistanceY;
              var estimatedSize;
              ownerGraph = node.getOwner();
              ownerCenterX = (ownerGraph.getRight() + ownerGraph.getLeft()) / 2;
              ownerCenterY = (ownerGraph.getTop() + ownerGraph.getBottom()) / 2;
              distanceX = node.getCenterX() - ownerCenterX;
              distanceY = node.getCenterY() - ownerCenterY;
              absDistanceX = Math.abs(distanceX) + node.getWidth() / 2;
              absDistanceY = Math.abs(distanceY) + node.getHeight() / 2;
              if (node.getOwner() == this.graphManager.getRoot()) {
                estimatedSize = ownerGraph.getEstimatedSize() * this.gravityRangeFactor;
                if (absDistanceX > estimatedSize || absDistanceY > estimatedSize) {
                  node.gravitationForceX = -this.gravityConstant * distanceX;
                  node.gravitationForceY = -this.gravityConstant * distanceY;
                }
              } else {
                estimatedSize = ownerGraph.getEstimatedSize() * this.compoundGravityRangeFactor;
                if (absDistanceX > estimatedSize || absDistanceY > estimatedSize) {
                  node.gravitationForceX = -this.gravityConstant * distanceX * this.compoundGravityConstant;
                  node.gravitationForceY = -this.gravityConstant * distanceY * this.compoundGravityConstant;
                }
              }
            };
            FDLayout.prototype.isConverged = function() {
              var converged;
              var oscilating = false;
              if (this.totalIterations > this.maxIterations / 3) {
                oscilating = Math.abs(this.totalDisplacement - this.oldTotalDisplacement) < 2;
              }
              converged = this.totalDisplacement < this.totalDisplacementThreshold;
              this.oldTotalDisplacement = this.totalDisplacement;
              return converged || oscilating;
            };
            FDLayout.prototype.animate = function() {
              if (this.animationDuringLayout && !this.isSubLayout) {
                if (this.notAnimatedIterations == this.animationPeriod) {
                  this.update();
                  this.notAnimatedIterations = 0;
                } else {
                  this.notAnimatedIterations++;
                }
              }
            };
            FDLayout.prototype.calcNoOfChildrenForAllNodes = function() {
              var node;
              var allNodes = this.graphManager.getAllNodes();
              for (var i2 = 0; i2 < allNodes.length; i2++) {
                node = allNodes[i2];
                node.noOfChildren = node.getNoOfChildren();
              }
            };
            FDLayout.prototype.calcGrid = function(graph) {
              var sizeX = 0;
              var sizeY = 0;
              sizeX = parseInt(Math.ceil((graph.getRight() - graph.getLeft()) / this.repulsionRange));
              sizeY = parseInt(Math.ceil((graph.getBottom() - graph.getTop()) / this.repulsionRange));
              var grid = new Array(sizeX);
              for (var i2 = 0; i2 < sizeX; i2++) {
                grid[i2] = new Array(sizeY);
              }
              for (var i2 = 0; i2 < sizeX; i2++) {
                for (var j2 = 0; j2 < sizeY; j2++) {
                  grid[i2][j2] = new Array();
                }
              }
              return grid;
            };
            FDLayout.prototype.addNodeToGrid = function(v3, left, top) {
              var startX2 = 0;
              var finishX = 0;
              var startY2 = 0;
              var finishY = 0;
              startX2 = parseInt(Math.floor((v3.getRect().x - left) / this.repulsionRange));
              finishX = parseInt(Math.floor((v3.getRect().width + v3.getRect().x - left) / this.repulsionRange));
              startY2 = parseInt(Math.floor((v3.getRect().y - top) / this.repulsionRange));
              finishY = parseInt(Math.floor((v3.getRect().height + v3.getRect().y - top) / this.repulsionRange));
              for (var i2 = startX2; i2 <= finishX; i2++) {
                for (var j2 = startY2; j2 <= finishY; j2++) {
                  this.grid[i2][j2].push(v3);
                  v3.setGridCoordinates(startX2, finishX, startY2, finishY);
                }
              }
            };
            FDLayout.prototype.updateGrid = function() {
              var i2;
              var nodeA;
              var lNodes = this.getAllNodes();
              this.grid = this.calcGrid(this.graphManager.getRoot());
              for (i2 = 0; i2 < lNodes.length; i2++) {
                nodeA = lNodes[i2];
                this.addNodeToGrid(nodeA, this.graphManager.getRoot().getLeft(), this.graphManager.getRoot().getTop());
              }
            };
            FDLayout.prototype.calculateRepulsionForceOfANode = function(nodeA, processedNodeSet, gridUpdateAllowed, forceToNodeSurroundingUpdate) {
              if (this.totalIterations % FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1 && gridUpdateAllowed || forceToNodeSurroundingUpdate) {
                var surrounding = /* @__PURE__ */ new Set();
                nodeA.surrounding = new Array();
                var nodeB;
                var grid = this.grid;
                for (var i2 = nodeA.startX - 1; i2 < nodeA.finishX + 2; i2++) {
                  for (var j2 = nodeA.startY - 1; j2 < nodeA.finishY + 2; j2++) {
                    if (!(i2 < 0 || j2 < 0 || i2 >= grid.length || j2 >= grid[0].length)) {
                      for (var k2 = 0; k2 < grid[i2][j2].length; k2++) {
                        nodeB = grid[i2][j2][k2];
                        if (nodeA.getOwner() != nodeB.getOwner() || nodeA == nodeB) {
                          continue;
                        }
                        if (!processedNodeSet.has(nodeB) && !surrounding.has(nodeB)) {
                          var distanceX = Math.abs(nodeA.getCenterX() - nodeB.getCenterX()) - (nodeA.getWidth() / 2 + nodeB.getWidth() / 2);
                          var distanceY = Math.abs(nodeA.getCenterY() - nodeB.getCenterY()) - (nodeA.getHeight() / 2 + nodeB.getHeight() / 2);
                          if (distanceX <= this.repulsionRange && distanceY <= this.repulsionRange) {
                            surrounding.add(nodeB);
                          }
                        }
                      }
                    }
                  }
                }
                nodeA.surrounding = [].concat(_toConsumableArray2(surrounding));
              }
              for (i2 = 0; i2 < nodeA.surrounding.length; i2++) {
                this.calcRepulsionForce(nodeA, nodeA.surrounding[i2]);
              }
            };
            FDLayout.prototype.calcRepulsionRange = function() {
              return 0;
            };
            module2.exports = FDLayout;
          },
          /* 19 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var LEdge = __webpack_require__(1);
            var FDLayoutConstants = __webpack_require__(7);
            function FDLayoutEdge(source, target, vEdge) {
              LEdge.call(this, source, target, vEdge);
              this.idealLength = FDLayoutConstants.DEFAULT_EDGE_LENGTH;
            }
            FDLayoutEdge.prototype = Object.create(LEdge.prototype);
            for (var prop in LEdge) {
              FDLayoutEdge[prop] = LEdge[prop];
            }
            module2.exports = FDLayoutEdge;
          },
          /* 20 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var LNode = __webpack_require__(3);
            function FDLayoutNode(gm, loc, size3, vNode) {
              LNode.call(this, gm, loc, size3, vNode);
              this.springForceX = 0;
              this.springForceY = 0;
              this.repulsionForceX = 0;
              this.repulsionForceY = 0;
              this.gravitationForceX = 0;
              this.gravitationForceY = 0;
              this.displacementX = 0;
              this.displacementY = 0;
              this.startX = 0;
              this.finishX = 0;
              this.startY = 0;
              this.finishY = 0;
              this.surrounding = [];
            }
            FDLayoutNode.prototype = Object.create(LNode.prototype);
            for (var prop in LNode) {
              FDLayoutNode[prop] = LNode[prop];
            }
            FDLayoutNode.prototype.setGridCoordinates = function(_startX, _finishX, _startY, _finishY) {
              this.startX = _startX;
              this.finishX = _finishX;
              this.startY = _startY;
              this.finishY = _finishY;
            };
            module2.exports = FDLayoutNode;
          },
          /* 21 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function DimensionD2(width2, height2) {
              this.width = 0;
              this.height = 0;
              if (width2 !== null && height2 !== null) {
                this.height = height2;
                this.width = width2;
              }
            }
            DimensionD2.prototype.getWidth = function() {
              return this.width;
            };
            DimensionD2.prototype.setWidth = function(width2) {
              this.width = width2;
            };
            DimensionD2.prototype.getHeight = function() {
              return this.height;
            };
            DimensionD2.prototype.setHeight = function(height2) {
              this.height = height2;
            };
            module2.exports = DimensionD2;
          },
          /* 22 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var UniqueIDGeneretor = __webpack_require__(14);
            function HashMap() {
              this.map = {};
              this.keys = [];
            }
            HashMap.prototype.put = function(key, value) {
              var theId = UniqueIDGeneretor.createID(key);
              if (!this.contains(theId)) {
                this.map[theId] = value;
                this.keys.push(key);
              }
            };
            HashMap.prototype.contains = function(key) {
              var theId = UniqueIDGeneretor.createID(key);
              return this.map[key] != null;
            };
            HashMap.prototype.get = function(key) {
              var theId = UniqueIDGeneretor.createID(key);
              return this.map[theId];
            };
            HashMap.prototype.keySet = function() {
              return this.keys;
            };
            module2.exports = HashMap;
          },
          /* 23 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var UniqueIDGeneretor = __webpack_require__(14);
            function HashSet() {
              this.set = {};
            }
            ;
            HashSet.prototype.add = function(obj) {
              var theId = UniqueIDGeneretor.createID(obj);
              if (!this.contains(theId)) this.set[theId] = obj;
            };
            HashSet.prototype.remove = function(obj) {
              delete this.set[UniqueIDGeneretor.createID(obj)];
            };
            HashSet.prototype.clear = function() {
              this.set = {};
            };
            HashSet.prototype.contains = function(obj) {
              return this.set[UniqueIDGeneretor.createID(obj)] == obj;
            };
            HashSet.prototype.isEmpty = function() {
              return this.size() === 0;
            };
            HashSet.prototype.size = function() {
              return Object.keys(this.set).length;
            };
            HashSet.prototype.addAllTo = function(list) {
              var keys2 = Object.keys(this.set);
              var length = keys2.length;
              for (var i2 = 0; i2 < length; i2++) {
                list.push(this.set[keys2[i2]]);
              }
            };
            HashSet.prototype.size = function() {
              return Object.keys(this.set).length;
            };
            HashSet.prototype.addAll = function(list) {
              var s2 = list.length;
              for (var i2 = 0; i2 < s2; i2++) {
                var v3 = list[i2];
                this.add(v3);
              }
            };
            module2.exports = HashSet;
          },
          /* 24 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var _createClass2 = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i2 = 0; i2 < props.length; i2++) {
                  var descriptor = props[i2];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            function _classCallCheck2(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var LinkedList = __webpack_require__(11);
            var Quicksort = function() {
              function Quicksort2(A2, compareFunction) {
                _classCallCheck2(this, Quicksort2);
                if (compareFunction !== null || compareFunction !== void 0) this.compareFunction = this._defaultCompareFunction;
                var length = void 0;
                if (A2 instanceof LinkedList) length = A2.size();
                else length = A2.length;
                this._quicksort(A2, 0, length - 1);
              }
              _createClass2(Quicksort2, [{
                key: "_quicksort",
                value: function _quicksort(A2, p3, r2) {
                  if (p3 < r2) {
                    var q2 = this._partition(A2, p3, r2);
                    this._quicksort(A2, p3, q2);
                    this._quicksort(A2, q2 + 1, r2);
                  }
                }
              }, {
                key: "_partition",
                value: function _partition(A2, p3, r2) {
                  var x3 = this._get(A2, p3);
                  var i2 = p3;
                  var j2 = r2;
                  while (true) {
                    while (this.compareFunction(x3, this._get(A2, j2))) {
                      j2--;
                    }
                    while (this.compareFunction(this._get(A2, i2), x3)) {
                      i2++;
                    }
                    if (i2 < j2) {
                      this._swap(A2, i2, j2);
                      i2++;
                      j2--;
                    } else return j2;
                  }
                }
              }, {
                key: "_get",
                value: function _get(object3, index) {
                  if (object3 instanceof LinkedList) return object3.get_object_at(index);
                  else return object3[index];
                }
              }, {
                key: "_set",
                value: function _set(object3, index, value) {
                  if (object3 instanceof LinkedList) object3.set_object_at(index, value);
                  else object3[index] = value;
                }
              }, {
                key: "_swap",
                value: function _swap(A2, i2, j2) {
                  var temp = this._get(A2, i2);
                  this._set(A2, i2, this._get(A2, j2));
                  this._set(A2, j2, temp);
                }
              }, {
                key: "_defaultCompareFunction",
                value: function _defaultCompareFunction(a2, b2) {
                  return b2 > a2;
                }
              }]);
              return Quicksort2;
            }();
            module2.exports = Quicksort;
          },
          /* 25 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var _createClass2 = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i2 = 0; i2 < props.length; i2++) {
                  var descriptor = props[i2];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            function _classCallCheck2(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var NeedlemanWunsch = function() {
              function NeedlemanWunsch2(sequence1, sequence2) {
                var match_score = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
                var mismatch_penalty = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : -1;
                var gap_penalty = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : -1;
                _classCallCheck2(this, NeedlemanWunsch2);
                this.sequence1 = sequence1;
                this.sequence2 = sequence2;
                this.match_score = match_score;
                this.mismatch_penalty = mismatch_penalty;
                this.gap_penalty = gap_penalty;
                this.iMax = sequence1.length + 1;
                this.jMax = sequence2.length + 1;
                this.grid = new Array(this.iMax);
                for (var i2 = 0; i2 < this.iMax; i2++) {
                  this.grid[i2] = new Array(this.jMax);
                  for (var j2 = 0; j2 < this.jMax; j2++) {
                    this.grid[i2][j2] = 0;
                  }
                }
                this.tracebackGrid = new Array(this.iMax);
                for (var _i2 = 0; _i2 < this.iMax; _i2++) {
                  this.tracebackGrid[_i2] = new Array(this.jMax);
                  for (var _j = 0; _j < this.jMax; _j++) {
                    this.tracebackGrid[_i2][_j] = [null, null, null];
                  }
                }
                this.alignments = [];
                this.score = -1;
                this.computeGrids();
              }
              _createClass2(NeedlemanWunsch2, [{
                key: "getScore",
                value: function getScore() {
                  return this.score;
                }
              }, {
                key: "getAlignments",
                value: function getAlignments() {
                  return this.alignments;
                }
                // Main dynamic programming procedure
              }, {
                key: "computeGrids",
                value: function computeGrids() {
                  for (var j2 = 1; j2 < this.jMax; j2++) {
                    this.grid[0][j2] = this.grid[0][j2 - 1] + this.gap_penalty;
                    this.tracebackGrid[0][j2] = [false, false, true];
                  }
                  for (var i2 = 1; i2 < this.iMax; i2++) {
                    this.grid[i2][0] = this.grid[i2 - 1][0] + this.gap_penalty;
                    this.tracebackGrid[i2][0] = [false, true, false];
                  }
                  for (var _i2 = 1; _i2 < this.iMax; _i2++) {
                    for (var _j2 = 1; _j2 < this.jMax; _j2++) {
                      var diag = void 0;
                      if (this.sequence1[_i2 - 1] === this.sequence2[_j2 - 1]) diag = this.grid[_i2 - 1][_j2 - 1] + this.match_score;
                      else diag = this.grid[_i2 - 1][_j2 - 1] + this.mismatch_penalty;
                      var up = this.grid[_i2 - 1][_j2] + this.gap_penalty;
                      var left = this.grid[_i2][_j2 - 1] + this.gap_penalty;
                      var maxOf = [diag, up, left];
                      var indices = this.arrayAllMaxIndexes(maxOf);
                      this.grid[_i2][_j2] = maxOf[indices[0]];
                      this.tracebackGrid[_i2][_j2] = [indices.includes(0), indices.includes(1), indices.includes(2)];
                    }
                  }
                  this.score = this.grid[this.iMax - 1][this.jMax - 1];
                }
                // Gets all possible valid sequence combinations
              }, {
                key: "alignmentTraceback",
                value: function alignmentTraceback() {
                  var inProcessAlignments = [];
                  inProcessAlignments.push({
                    pos: [this.sequence1.length, this.sequence2.length],
                    seq1: "",
                    seq2: ""
                  });
                  while (inProcessAlignments[0]) {
                    var current = inProcessAlignments[0];
                    var directions = this.tracebackGrid[current.pos[0]][current.pos[1]];
                    if (directions[0]) {
                      inProcessAlignments.push({
                        pos: [current.pos[0] - 1, current.pos[1] - 1],
                        seq1: this.sequence1[current.pos[0] - 1] + current.seq1,
                        seq2: this.sequence2[current.pos[1] - 1] + current.seq2
                      });
                    }
                    if (directions[1]) {
                      inProcessAlignments.push({
                        pos: [current.pos[0] - 1, current.pos[1]],
                        seq1: this.sequence1[current.pos[0] - 1] + current.seq1,
                        seq2: "-" + current.seq2
                      });
                    }
                    if (directions[2]) {
                      inProcessAlignments.push({
                        pos: [current.pos[0], current.pos[1] - 1],
                        seq1: "-" + current.seq1,
                        seq2: this.sequence2[current.pos[1] - 1] + current.seq2
                      });
                    }
                    if (current.pos[0] === 0 && current.pos[1] === 0) this.alignments.push({
                      sequence1: current.seq1,
                      sequence2: current.seq2
                    });
                    inProcessAlignments.shift();
                  }
                  return this.alignments;
                }
                // Helper Functions
              }, {
                key: "getAllIndexes",
                value: function getAllIndexes(arr, val) {
                  var indexes = [], i2 = -1;
                  while ((i2 = arr.indexOf(val, i2 + 1)) !== -1) {
                    indexes.push(i2);
                  }
                  return indexes;
                }
              }, {
                key: "arrayAllMaxIndexes",
                value: function arrayAllMaxIndexes(array3) {
                  return this.getAllIndexes(array3, Math.max.apply(null, array3));
                }
              }]);
              return NeedlemanWunsch2;
            }();
            module2.exports = NeedlemanWunsch;
          },
          /* 26 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var layoutBase = function layoutBase2() {
              return;
            };
            layoutBase.FDLayout = __webpack_require__(18);
            layoutBase.FDLayoutConstants = __webpack_require__(7);
            layoutBase.FDLayoutEdge = __webpack_require__(19);
            layoutBase.FDLayoutNode = __webpack_require__(20);
            layoutBase.DimensionD = __webpack_require__(21);
            layoutBase.HashMap = __webpack_require__(22);
            layoutBase.HashSet = __webpack_require__(23);
            layoutBase.IGeometry = __webpack_require__(8);
            layoutBase.IMath = __webpack_require__(9);
            layoutBase.Integer = __webpack_require__(10);
            layoutBase.Point = __webpack_require__(12);
            layoutBase.PointD = __webpack_require__(4);
            layoutBase.RandomSeed = __webpack_require__(16);
            layoutBase.RectangleD = __webpack_require__(13);
            layoutBase.Transform = __webpack_require__(17);
            layoutBase.UniqueIDGeneretor = __webpack_require__(14);
            layoutBase.Quicksort = __webpack_require__(24);
            layoutBase.LinkedList = __webpack_require__(11);
            layoutBase.LGraphObject = __webpack_require__(2);
            layoutBase.LGraph = __webpack_require__(5);
            layoutBase.LEdge = __webpack_require__(1);
            layoutBase.LGraphManager = __webpack_require__(6);
            layoutBase.LNode = __webpack_require__(3);
            layoutBase.Layout = __webpack_require__(15);
            layoutBase.LayoutConstants = __webpack_require__(0);
            layoutBase.NeedlemanWunsch = __webpack_require__(25);
            module2.exports = layoutBase;
          },
          /* 27 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function Emitter3() {
              this.listeners = [];
            }
            var p3 = Emitter3.prototype;
            p3.addListener = function(event3, callback) {
              this.listeners.push({
                event: event3,
                callback
              });
            };
            p3.removeListener = function(event3, callback) {
              for (var i2 = this.listeners.length; i2 >= 0; i2--) {
                var l2 = this.listeners[i2];
                if (l2.event === event3 && l2.callback === callback) {
                  this.listeners.splice(i2, 1);
                }
              }
            };
            p3.emit = function(event3, data4) {
              for (var i2 = 0; i2 < this.listeners.length; i2++) {
                var l2 = this.listeners[i2];
                if (event3 === l2.event) {
                  l2.callback(data4);
                }
              }
            };
            module2.exports = Emitter3;
          }
          /******/
        ])
      );
    });
  }
});

// node_modules/cose-base/cose-base.js
var require_cose_base = __commonJS({
  "node_modules/cose-base/cose-base.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory(require_layout_base());
      else if (typeof define === "function" && define.amd)
        define(["layout-base"], factory);
      else if (typeof exports === "object")
        exports["coseBase"] = factory(require_layout_base());
      else
        root["coseBase"] = factory(root["layoutBase"]);
    })(exports, function(__WEBPACK_EXTERNAL_MODULE_0__) {
      return (
        /******/
        function(modules2) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
              return installedModules[moduleId].exports;
            }
            var module2 = installedModules[moduleId] = {
              /******/
              i: moduleId,
              /******/
              l: false,
              /******/
              exports: {}
              /******/
            };
            modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
            module2.l = true;
            return module2.exports;
          }
          __webpack_require__.m = modules2;
          __webpack_require__.c = installedModules;
          __webpack_require__.i = function(value) {
            return value;
          };
          __webpack_require__.d = function(exports2, name, getter) {
            if (!__webpack_require__.o(exports2, name)) {
              Object.defineProperty(exports2, name, {
                /******/
                configurable: false,
                /******/
                enumerable: true,
                /******/
                get: getter
                /******/
              });
            }
          };
          __webpack_require__.n = function(module2) {
            var getter = module2 && module2.__esModule ? (
              /******/
              function getDefault() {
                return module2["default"];
              }
            ) : (
              /******/
              function getModuleExports() {
                return module2;
              }
            );
            __webpack_require__.d(getter, "a", getter);
            return getter;
          };
          __webpack_require__.o = function(object3, property) {
            return Object.prototype.hasOwnProperty.call(object3, property);
          };
          __webpack_require__.p = "";
          return __webpack_require__(__webpack_require__.s = 7);
        }([
          /* 0 */
          /***/
          function(module2, exports2) {
            module2.exports = __WEBPACK_EXTERNAL_MODULE_0__;
          },
          /* 1 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var FDLayoutConstants = __webpack_require__(0).FDLayoutConstants;
            function CoSEConstants() {
            }
            for (var prop in FDLayoutConstants) {
              CoSEConstants[prop] = FDLayoutConstants[prop];
            }
            CoSEConstants.DEFAULT_USE_MULTI_LEVEL_SCALING = false;
            CoSEConstants.DEFAULT_RADIAL_SEPARATION = FDLayoutConstants.DEFAULT_EDGE_LENGTH;
            CoSEConstants.DEFAULT_COMPONENT_SEPERATION = 60;
            CoSEConstants.TILE = true;
            CoSEConstants.TILING_PADDING_VERTICAL = 10;
            CoSEConstants.TILING_PADDING_HORIZONTAL = 10;
            CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL = false;
            module2.exports = CoSEConstants;
          },
          /* 2 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var FDLayoutEdge = __webpack_require__(0).FDLayoutEdge;
            function CoSEEdge(source, target, vEdge) {
              FDLayoutEdge.call(this, source, target, vEdge);
            }
            CoSEEdge.prototype = Object.create(FDLayoutEdge.prototype);
            for (var prop in FDLayoutEdge) {
              CoSEEdge[prop] = FDLayoutEdge[prop];
            }
            module2.exports = CoSEEdge;
          },
          /* 3 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var LGraph = __webpack_require__(0).LGraph;
            function CoSEGraph(parent4, graphMgr, vGraph) {
              LGraph.call(this, parent4, graphMgr, vGraph);
            }
            CoSEGraph.prototype = Object.create(LGraph.prototype);
            for (var prop in LGraph) {
              CoSEGraph[prop] = LGraph[prop];
            }
            module2.exports = CoSEGraph;
          },
          /* 4 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var LGraphManager = __webpack_require__(0).LGraphManager;
            function CoSEGraphManager(layout6) {
              LGraphManager.call(this, layout6);
            }
            CoSEGraphManager.prototype = Object.create(LGraphManager.prototype);
            for (var prop in LGraphManager) {
              CoSEGraphManager[prop] = LGraphManager[prop];
            }
            module2.exports = CoSEGraphManager;
          },
          /* 5 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var FDLayoutNode = __webpack_require__(0).FDLayoutNode;
            var IMath = __webpack_require__(0).IMath;
            function CoSENode(gm, loc, size3, vNode) {
              FDLayoutNode.call(this, gm, loc, size3, vNode);
            }
            CoSENode.prototype = Object.create(FDLayoutNode.prototype);
            for (var prop in FDLayoutNode) {
              CoSENode[prop] = FDLayoutNode[prop];
            }
            CoSENode.prototype.move = function() {
              var layout6 = this.graphManager.getLayout();
              this.displacementX = layout6.coolingFactor * (this.springForceX + this.repulsionForceX + this.gravitationForceX) / this.noOfChildren;
              this.displacementY = layout6.coolingFactor * (this.springForceY + this.repulsionForceY + this.gravitationForceY) / this.noOfChildren;
              if (Math.abs(this.displacementX) > layout6.coolingFactor * layout6.maxNodeDisplacement) {
                this.displacementX = layout6.coolingFactor * layout6.maxNodeDisplacement * IMath.sign(this.displacementX);
              }
              if (Math.abs(this.displacementY) > layout6.coolingFactor * layout6.maxNodeDisplacement) {
                this.displacementY = layout6.coolingFactor * layout6.maxNodeDisplacement * IMath.sign(this.displacementY);
              }
              if (this.child == null) {
                this.moveBy(this.displacementX, this.displacementY);
              } else if (this.child.getNodes().length == 0) {
                this.moveBy(this.displacementX, this.displacementY);
              } else {
                this.propogateDisplacementToChildren(this.displacementX, this.displacementY);
              }
              layout6.totalDisplacement += Math.abs(this.displacementX) + Math.abs(this.displacementY);
              this.springForceX = 0;
              this.springForceY = 0;
              this.repulsionForceX = 0;
              this.repulsionForceY = 0;
              this.gravitationForceX = 0;
              this.gravitationForceY = 0;
              this.displacementX = 0;
              this.displacementY = 0;
            };
            CoSENode.prototype.propogateDisplacementToChildren = function(dX, dY) {
              var nodes3 = this.getChild().getNodes();
              var node;
              for (var i2 = 0; i2 < nodes3.length; i2++) {
                node = nodes3[i2];
                if (node.getChild() == null) {
                  node.moveBy(dX, dY);
                  node.displacementX += dX;
                  node.displacementY += dY;
                } else {
                  node.propogateDisplacementToChildren(dX, dY);
                }
              }
            };
            CoSENode.prototype.setPred1 = function(pred12) {
              this.pred1 = pred12;
            };
            CoSENode.prototype.getPred1 = function() {
              return pred1;
            };
            CoSENode.prototype.getPred2 = function() {
              return pred2;
            };
            CoSENode.prototype.setNext = function(next2) {
              this.next = next2;
            };
            CoSENode.prototype.getNext = function() {
              return next;
            };
            CoSENode.prototype.setProcessed = function(processed2) {
              this.processed = processed2;
            };
            CoSENode.prototype.isProcessed = function() {
              return processed;
            };
            module2.exports = CoSENode;
          },
          /* 6 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var FDLayout = __webpack_require__(0).FDLayout;
            var CoSEGraphManager = __webpack_require__(4);
            var CoSEGraph = __webpack_require__(3);
            var CoSENode = __webpack_require__(5);
            var CoSEEdge = __webpack_require__(2);
            var CoSEConstants = __webpack_require__(1);
            var FDLayoutConstants = __webpack_require__(0).FDLayoutConstants;
            var LayoutConstants = __webpack_require__(0).LayoutConstants;
            var Point2 = __webpack_require__(0).Point;
            var PointD = __webpack_require__(0).PointD;
            var Layout2 = __webpack_require__(0).Layout;
            var Integer = __webpack_require__(0).Integer;
            var IGeometry = __webpack_require__(0).IGeometry;
            var LGraph = __webpack_require__(0).LGraph;
            var Transform = __webpack_require__(0).Transform;
            function CoSELayout() {
              FDLayout.call(this);
              this.toBeTiled = {};
            }
            CoSELayout.prototype = Object.create(FDLayout.prototype);
            for (var prop in FDLayout) {
              CoSELayout[prop] = FDLayout[prop];
            }
            CoSELayout.prototype.newGraphManager = function() {
              var gm = new CoSEGraphManager(this);
              this.graphManager = gm;
              return gm;
            };
            CoSELayout.prototype.newGraph = function(vGraph) {
              return new CoSEGraph(null, this.graphManager, vGraph);
            };
            CoSELayout.prototype.newNode = function(vNode) {
              return new CoSENode(this.graphManager, vNode);
            };
            CoSELayout.prototype.newEdge = function(vEdge) {
              return new CoSEEdge(null, null, vEdge);
            };
            CoSELayout.prototype.initParameters = function() {
              FDLayout.prototype.initParameters.call(this, arguments);
              if (!this.isSubLayout) {
                if (CoSEConstants.DEFAULT_EDGE_LENGTH < 10) {
                  this.idealEdgeLength = 10;
                } else {
                  this.idealEdgeLength = CoSEConstants.DEFAULT_EDGE_LENGTH;
                }
                this.useSmartIdealEdgeLengthCalculation = CoSEConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;
                this.springConstant = FDLayoutConstants.DEFAULT_SPRING_STRENGTH;
                this.repulsionConstant = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH;
                this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;
                this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;
                this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;
                this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;
                this.prunedNodesAll = [];
                this.growTreeIterations = 0;
                this.afterGrowthIterations = 0;
                this.isTreeGrowing = false;
                this.isGrowthFinished = false;
                this.coolingCycle = 0;
                this.maxCoolingCycle = this.maxIterations / FDLayoutConstants.CONVERGENCE_CHECK_PERIOD;
                this.finalTemperature = FDLayoutConstants.CONVERGENCE_CHECK_PERIOD / this.maxIterations;
                this.coolingAdjuster = 1;
              }
            };
            CoSELayout.prototype.layout = function() {
              var createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;
              if (createBendsAsNeeded) {
                this.createBendpoints();
                this.graphManager.resetAllEdges();
              }
              this.level = 0;
              return this.classicLayout();
            };
            CoSELayout.prototype.classicLayout = function() {
              this.nodesWithGravity = this.calculateNodesToApplyGravitationTo();
              this.graphManager.setAllNodesToApplyGravitation(this.nodesWithGravity);
              this.calcNoOfChildrenForAllNodes();
              this.graphManager.calcLowestCommonAncestors();
              this.graphManager.calcInclusionTreeDepths();
              this.graphManager.getRoot().calcEstimatedSize();
              this.calcIdealEdgeLengths();
              if (!this.incremental) {
                var forest = this.getFlatForest();
                if (forest.length > 0) {
                  this.positionNodesRadially(forest);
                } else {
                  this.reduceTrees();
                  this.graphManager.resetAllNodesToApplyGravitation();
                  var allNodes = new Set(this.getAllNodes());
                  var intersection2 = this.nodesWithGravity.filter(function(x3) {
                    return allNodes.has(x3);
                  });
                  this.graphManager.setAllNodesToApplyGravitation(intersection2);
                  this.positionNodesRandomly();
                }
              } else {
                if (CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL) {
                  this.reduceTrees();
                  this.graphManager.resetAllNodesToApplyGravitation();
                  var allNodes = new Set(this.getAllNodes());
                  var intersection2 = this.nodesWithGravity.filter(function(x3) {
                    return allNodes.has(x3);
                  });
                  this.graphManager.setAllNodesToApplyGravitation(intersection2);
                }
              }
              this.initSpringEmbedder();
              this.runSpringEmbedder();
              return true;
            };
            CoSELayout.prototype.tick = function() {
              this.totalIterations++;
              if (this.totalIterations === this.maxIterations && !this.isTreeGrowing && !this.isGrowthFinished) {
                if (this.prunedNodesAll.length > 0) {
                  this.isTreeGrowing = true;
                } else {
                  return true;
                }
              }
              if (this.totalIterations % FDLayoutConstants.CONVERGENCE_CHECK_PERIOD == 0 && !this.isTreeGrowing && !this.isGrowthFinished) {
                if (this.isConverged()) {
                  if (this.prunedNodesAll.length > 0) {
                    this.isTreeGrowing = true;
                  } else {
                    return true;
                  }
                }
                this.coolingCycle++;
                if (this.layoutQuality == 0) {
                  this.coolingAdjuster = this.coolingCycle;
                } else if (this.layoutQuality == 1) {
                  this.coolingAdjuster = this.coolingCycle / 3;
                }
                this.coolingFactor = Math.max(this.initialCoolingFactor - Math.pow(this.coolingCycle, Math.log(100 * (this.initialCoolingFactor - this.finalTemperature)) / Math.log(this.maxCoolingCycle)) / 100 * this.coolingAdjuster, this.finalTemperature);
                this.animationPeriod = Math.ceil(this.initialAnimationPeriod * Math.sqrt(this.coolingFactor));
              }
              if (this.isTreeGrowing) {
                if (this.growTreeIterations % 10 == 0) {
                  if (this.prunedNodesAll.length > 0) {
                    this.graphManager.updateBounds();
                    this.updateGrid();
                    this.growTree(this.prunedNodesAll);
                    this.graphManager.resetAllNodesToApplyGravitation();
                    var allNodes = new Set(this.getAllNodes());
                    var intersection2 = this.nodesWithGravity.filter(function(x3) {
                      return allNodes.has(x3);
                    });
                    this.graphManager.setAllNodesToApplyGravitation(intersection2);
                    this.graphManager.updateBounds();
                    this.updateGrid();
                    this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;
                  } else {
                    this.isTreeGrowing = false;
                    this.isGrowthFinished = true;
                  }
                }
                this.growTreeIterations++;
              }
              if (this.isGrowthFinished) {
                if (this.isConverged()) {
                  return true;
                }
                if (this.afterGrowthIterations % 10 == 0) {
                  this.graphManager.updateBounds();
                  this.updateGrid();
                }
                this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL * ((100 - this.afterGrowthIterations) / 100);
                this.afterGrowthIterations++;
              }
              var gridUpdateAllowed = !this.isTreeGrowing && !this.isGrowthFinished;
              var forceToNodeSurroundingUpdate = this.growTreeIterations % 10 == 1 && this.isTreeGrowing || this.afterGrowthIterations % 10 == 1 && this.isGrowthFinished;
              this.totalDisplacement = 0;
              this.graphManager.updateBounds();
              this.calcSpringForces();
              this.calcRepulsionForces(gridUpdateAllowed, forceToNodeSurroundingUpdate);
              this.calcGravitationalForces();
              this.moveNodes();
              this.animate();
              return false;
            };
            CoSELayout.prototype.getPositionsData = function() {
              var allNodes = this.graphManager.getAllNodes();
              var pData = {};
              for (var i2 = 0; i2 < allNodes.length; i2++) {
                var rect = allNodes[i2].rect;
                var id2 = allNodes[i2].id;
                pData[id2] = {
                  id: id2,
                  x: rect.getCenterX(),
                  y: rect.getCenterY(),
                  w: rect.width,
                  h: rect.height
                };
              }
              return pData;
            };
            CoSELayout.prototype.runSpringEmbedder = function() {
              this.initialAnimationPeriod = 25;
              this.animationPeriod = this.initialAnimationPeriod;
              var layoutEnded = false;
              if (FDLayoutConstants.ANIMATE === "during") {
                this.emit("layoutstarted");
              } else {
                while (!layoutEnded) {
                  layoutEnded = this.tick();
                }
                this.graphManager.updateBounds();
              }
            };
            CoSELayout.prototype.calculateNodesToApplyGravitationTo = function() {
              var nodeList = [];
              var graph;
              var graphs = this.graphManager.getGraphs();
              var size3 = graphs.length;
              var i2;
              for (i2 = 0; i2 < size3; i2++) {
                graph = graphs[i2];
                graph.updateConnected();
                if (!graph.isConnected) {
                  nodeList = nodeList.concat(graph.getNodes());
                }
              }
              return nodeList;
            };
            CoSELayout.prototype.createBendpoints = function() {
              var edges3 = [];
              edges3 = edges3.concat(this.graphManager.getAllEdges());
              var visited = /* @__PURE__ */ new Set();
              var i2;
              for (i2 = 0; i2 < edges3.length; i2++) {
                var edge = edges3[i2];
                if (!visited.has(edge)) {
                  var source = edge.getSource();
                  var target = edge.getTarget();
                  if (source == target) {
                    edge.getBendpoints().push(new PointD());
                    edge.getBendpoints().push(new PointD());
                    this.createDummyNodesForBendpoints(edge);
                    visited.add(edge);
                  } else {
                    var edgeList = [];
                    edgeList = edgeList.concat(source.getEdgeListToNode(target));
                    edgeList = edgeList.concat(target.getEdgeListToNode(source));
                    if (!visited.has(edgeList[0])) {
                      if (edgeList.length > 1) {
                        var k2;
                        for (k2 = 0; k2 < edgeList.length; k2++) {
                          var multiEdge = edgeList[k2];
                          multiEdge.getBendpoints().push(new PointD());
                          this.createDummyNodesForBendpoints(multiEdge);
                        }
                      }
                      edgeList.forEach(function(edge2) {
                        visited.add(edge2);
                      });
                    }
                  }
                }
                if (visited.size == edges3.length) {
                  break;
                }
              }
            };
            CoSELayout.prototype.positionNodesRadially = function(forest) {
              var currentStartingPoint = new Point2(0, 0);
              var numberOfColumns = Math.ceil(Math.sqrt(forest.length));
              var height2 = 0;
              var currentY = 0;
              var currentX = 0;
              var point = new PointD(0, 0);
              for (var i2 = 0; i2 < forest.length; i2++) {
                if (i2 % numberOfColumns == 0) {
                  currentX = 0;
                  currentY = height2;
                  if (i2 != 0) {
                    currentY += CoSEConstants.DEFAULT_COMPONENT_SEPERATION;
                  }
                  height2 = 0;
                }
                var tree = forest[i2];
                var centerNode = Layout2.findCenterOfTree(tree);
                currentStartingPoint.x = currentX;
                currentStartingPoint.y = currentY;
                point = CoSELayout.radialLayout(tree, centerNode, currentStartingPoint);
                if (point.y > height2) {
                  height2 = Math.floor(point.y);
                }
                currentX = Math.floor(point.x + CoSEConstants.DEFAULT_COMPONENT_SEPERATION);
              }
              this.transform(new PointD(LayoutConstants.WORLD_CENTER_X - point.x / 2, LayoutConstants.WORLD_CENTER_Y - point.y / 2));
            };
            CoSELayout.radialLayout = function(tree, centerNode, startingPoint) {
              var radialSep = Math.max(this.maxDiagonalInTree(tree), CoSEConstants.DEFAULT_RADIAL_SEPARATION);
              CoSELayout.branchRadialLayout(centerNode, null, 0, 359, 0, radialSep);
              var bounds2 = LGraph.calculateBounds(tree);
              var transform8 = new Transform();
              transform8.setDeviceOrgX(bounds2.getMinX());
              transform8.setDeviceOrgY(bounds2.getMinY());
              transform8.setWorldOrgX(startingPoint.x);
              transform8.setWorldOrgY(startingPoint.y);
              for (var i2 = 0; i2 < tree.length; i2++) {
                var node = tree[i2];
                node.transform(transform8);
              }
              var bottomRight = new PointD(bounds2.getMaxX(), bounds2.getMaxY());
              return transform8.inverseTransformPoint(bottomRight);
            };
            CoSELayout.branchRadialLayout = function(node, parentOfNode, startAngle, endAngle, distance, radialSeparation) {
              var halfInterval = (endAngle - startAngle + 1) / 2;
              if (halfInterval < 0) {
                halfInterval += 180;
              }
              var nodeAngle = (halfInterval + startAngle) % 360;
              var teta = nodeAngle * IGeometry.TWO_PI / 360;
              var cos_teta = Math.cos(teta);
              var x_ = distance * Math.cos(teta);
              var y_ = distance * Math.sin(teta);
              node.setCenter(x_, y_);
              var neighborEdges = [];
              neighborEdges = neighborEdges.concat(node.getEdges());
              var childCount = neighborEdges.length;
              if (parentOfNode != null) {
                childCount--;
              }
              var branchCount = 0;
              var incEdgesCount = neighborEdges.length;
              var startIndex;
              var edges3 = node.getEdgesBetween(parentOfNode);
              while (edges3.length > 1) {
                var temp = edges3[0];
                edges3.splice(0, 1);
                var index = neighborEdges.indexOf(temp);
                if (index >= 0) {
                  neighborEdges.splice(index, 1);
                }
                incEdgesCount--;
                childCount--;
              }
              if (parentOfNode != null) {
                startIndex = (neighborEdges.indexOf(edges3[0]) + 1) % incEdgesCount;
              } else {
                startIndex = 0;
              }
              var stepAngle = Math.abs(endAngle - startAngle) / childCount;
              for (var i2 = startIndex; branchCount != childCount; i2 = ++i2 % incEdgesCount) {
                var currentNeighbor = neighborEdges[i2].getOtherEnd(node);
                if (currentNeighbor == parentOfNode) {
                  continue;
                }
                var childStartAngle = (startAngle + branchCount * stepAngle) % 360;
                var childEndAngle = (childStartAngle + stepAngle) % 360;
                CoSELayout.branchRadialLayout(currentNeighbor, node, childStartAngle, childEndAngle, distance + radialSeparation, radialSeparation);
                branchCount++;
              }
            };
            CoSELayout.maxDiagonalInTree = function(tree) {
              var maxDiagonal = Integer.MIN_VALUE;
              for (var i2 = 0; i2 < tree.length; i2++) {
                var node = tree[i2];
                var diagonal = node.getDiagonal();
                if (diagonal > maxDiagonal) {
                  maxDiagonal = diagonal;
                }
              }
              return maxDiagonal;
            };
            CoSELayout.prototype.calcRepulsionRange = function() {
              return 2 * (this.level + 1) * this.idealEdgeLength;
            };
            CoSELayout.prototype.groupZeroDegreeMembers = function() {
              var self2 = this;
              var tempMemberGroups = {};
              this.memberGroups = {};
              this.idToDummyNode = {};
              var zeroDegree = [];
              var allNodes = this.graphManager.getAllNodes();
              for (var i2 = 0; i2 < allNodes.length; i2++) {
                var node = allNodes[i2];
                var parent4 = node.getParent();
                if (this.getNodeDegreeWithChildren(node) === 0 && (parent4.id == void 0 || !this.getToBeTiled(parent4))) {
                  zeroDegree.push(node);
                }
              }
              for (var i2 = 0; i2 < zeroDegree.length; i2++) {
                var node = zeroDegree[i2];
                var p_id = node.getParent().id;
                if (typeof tempMemberGroups[p_id] === "undefined") tempMemberGroups[p_id] = [];
                tempMemberGroups[p_id] = tempMemberGroups[p_id].concat(node);
              }
              Object.keys(tempMemberGroups).forEach(function(p_id2) {
                if (tempMemberGroups[p_id2].length > 1) {
                  var dummyCompoundId = "DummyCompound_" + p_id2;
                  self2.memberGroups[dummyCompoundId] = tempMemberGroups[p_id2];
                  var parent5 = tempMemberGroups[p_id2][0].getParent();
                  var dummyCompound = new CoSENode(self2.graphManager);
                  dummyCompound.id = dummyCompoundId;
                  dummyCompound.paddingLeft = parent5.paddingLeft || 0;
                  dummyCompound.paddingRight = parent5.paddingRight || 0;
                  dummyCompound.paddingBottom = parent5.paddingBottom || 0;
                  dummyCompound.paddingTop = parent5.paddingTop || 0;
                  self2.idToDummyNode[dummyCompoundId] = dummyCompound;
                  var dummyParentGraph = self2.getGraphManager().add(self2.newGraph(), dummyCompound);
                  var parentGraph = parent5.getChild();
                  parentGraph.add(dummyCompound);
                  for (var i3 = 0; i3 < tempMemberGroups[p_id2].length; i3++) {
                    var node2 = tempMemberGroups[p_id2][i3];
                    parentGraph.remove(node2);
                    dummyParentGraph.add(node2);
                  }
                }
              });
            };
            CoSELayout.prototype.clearCompounds = function() {
              var childGraphMap = {};
              var idToNode = {};
              this.performDFSOnCompounds();
              for (var i2 = 0; i2 < this.compoundOrder.length; i2++) {
                idToNode[this.compoundOrder[i2].id] = this.compoundOrder[i2];
                childGraphMap[this.compoundOrder[i2].id] = [].concat(this.compoundOrder[i2].getChild().getNodes());
                this.graphManager.remove(this.compoundOrder[i2].getChild());
                this.compoundOrder[i2].child = null;
              }
              this.graphManager.resetAllNodes();
              this.tileCompoundMembers(childGraphMap, idToNode);
            };
            CoSELayout.prototype.clearZeroDegreeMembers = function() {
              var self2 = this;
              var tiledZeroDegreePack = this.tiledZeroDegreePack = [];
              Object.keys(this.memberGroups).forEach(function(id2) {
                var compoundNode = self2.idToDummyNode[id2];
                tiledZeroDegreePack[id2] = self2.tileNodes(self2.memberGroups[id2], compoundNode.paddingLeft + compoundNode.paddingRight);
                compoundNode.rect.width = tiledZeroDegreePack[id2].width;
                compoundNode.rect.height = tiledZeroDegreePack[id2].height;
              });
            };
            CoSELayout.prototype.repopulateCompounds = function() {
              for (var i2 = this.compoundOrder.length - 1; i2 >= 0; i2--) {
                var lCompoundNode = this.compoundOrder[i2];
                var id2 = lCompoundNode.id;
                var horizontalMargin = lCompoundNode.paddingLeft;
                var verticalMargin = lCompoundNode.paddingTop;
                this.adjustLocations(this.tiledMemberPack[id2], lCompoundNode.rect.x, lCompoundNode.rect.y, horizontalMargin, verticalMargin);
              }
            };
            CoSELayout.prototype.repopulateZeroDegreeMembers = function() {
              var self2 = this;
              var tiledPack = this.tiledZeroDegreePack;
              Object.keys(tiledPack).forEach(function(id2) {
                var compoundNode = self2.idToDummyNode[id2];
                var horizontalMargin = compoundNode.paddingLeft;
                var verticalMargin = compoundNode.paddingTop;
                self2.adjustLocations(tiledPack[id2], compoundNode.rect.x, compoundNode.rect.y, horizontalMargin, verticalMargin);
              });
            };
            CoSELayout.prototype.getToBeTiled = function(node) {
              var id2 = node.id;
              if (this.toBeTiled[id2] != null) {
                return this.toBeTiled[id2];
              }
              var childGraph = node.getChild();
              if (childGraph == null) {
                this.toBeTiled[id2] = false;
                return false;
              }
              var children = childGraph.getNodes();
              for (var i2 = 0; i2 < children.length; i2++) {
                var theChild = children[i2];
                if (this.getNodeDegree(theChild) > 0) {
                  this.toBeTiled[id2] = false;
                  return false;
                }
                if (theChild.getChild() == null) {
                  this.toBeTiled[theChild.id] = false;
                  continue;
                }
                if (!this.getToBeTiled(theChild)) {
                  this.toBeTiled[id2] = false;
                  return false;
                }
              }
              this.toBeTiled[id2] = true;
              return true;
            };
            CoSELayout.prototype.getNodeDegree = function(node) {
              var id2 = node.id;
              var edges3 = node.getEdges();
              var degree = 0;
              for (var i2 = 0; i2 < edges3.length; i2++) {
                var edge = edges3[i2];
                if (edge.getSource().id !== edge.getTarget().id) {
                  degree = degree + 1;
                }
              }
              return degree;
            };
            CoSELayout.prototype.getNodeDegreeWithChildren = function(node) {
              var degree = this.getNodeDegree(node);
              if (node.getChild() == null) {
                return degree;
              }
              var children = node.getChild().getNodes();
              for (var i2 = 0; i2 < children.length; i2++) {
                var child = children[i2];
                degree += this.getNodeDegreeWithChildren(child);
              }
              return degree;
            };
            CoSELayout.prototype.performDFSOnCompounds = function() {
              this.compoundOrder = [];
              this.fillCompexOrderByDFS(this.graphManager.getRoot().getNodes());
            };
            CoSELayout.prototype.fillCompexOrderByDFS = function(children) {
              for (var i2 = 0; i2 < children.length; i2++) {
                var child = children[i2];
                if (child.getChild() != null) {
                  this.fillCompexOrderByDFS(child.getChild().getNodes());
                }
                if (this.getToBeTiled(child)) {
                  this.compoundOrder.push(child);
                }
              }
            };
            CoSELayout.prototype.adjustLocations = function(organization, x3, y3, compoundHorizontalMargin, compoundVerticalMargin) {
              x3 += compoundHorizontalMargin;
              y3 += compoundVerticalMargin;
              var left = x3;
              for (var i2 = 0; i2 < organization.rows.length; i2++) {
                var row = organization.rows[i2];
                x3 = left;
                var maxHeight = 0;
                for (var j2 = 0; j2 < row.length; j2++) {
                  var lnode = row[j2];
                  lnode.rect.x = x3;
                  lnode.rect.y = y3;
                  x3 += lnode.rect.width + organization.horizontalPadding;
                  if (lnode.rect.height > maxHeight) maxHeight = lnode.rect.height;
                }
                y3 += maxHeight + organization.verticalPadding;
              }
            };
            CoSELayout.prototype.tileCompoundMembers = function(childGraphMap, idToNode) {
              var self2 = this;
              this.tiledMemberPack = [];
              Object.keys(childGraphMap).forEach(function(id2) {
                var compoundNode = idToNode[id2];
                self2.tiledMemberPack[id2] = self2.tileNodes(childGraphMap[id2], compoundNode.paddingLeft + compoundNode.paddingRight);
                compoundNode.rect.width = self2.tiledMemberPack[id2].width;
                compoundNode.rect.height = self2.tiledMemberPack[id2].height;
              });
            };
            CoSELayout.prototype.tileNodes = function(nodes3, minWidth) {
              var verticalPadding = CoSEConstants.TILING_PADDING_VERTICAL;
              var horizontalPadding = CoSEConstants.TILING_PADDING_HORIZONTAL;
              var organization = {
                rows: [],
                rowWidth: [],
                rowHeight: [],
                width: 0,
                height: minWidth,
                // assume minHeight equals to minWidth
                verticalPadding,
                horizontalPadding
              };
              nodes3.sort(function(n1, n2) {
                if (n1.rect.width * n1.rect.height > n2.rect.width * n2.rect.height) return -1;
                if (n1.rect.width * n1.rect.height < n2.rect.width * n2.rect.height) return 1;
                return 0;
              });
              for (var i2 = 0; i2 < nodes3.length; i2++) {
                var lNode = nodes3[i2];
                if (organization.rows.length == 0) {
                  this.insertNodeToRow(organization, lNode, 0, minWidth);
                } else if (this.canAddHorizontal(organization, lNode.rect.width, lNode.rect.height)) {
                  this.insertNodeToRow(organization, lNode, this.getShortestRowIndex(organization), minWidth);
                } else {
                  this.insertNodeToRow(organization, lNode, organization.rows.length, minWidth);
                }
                this.shiftToLastRow(organization);
              }
              return organization;
            };
            CoSELayout.prototype.insertNodeToRow = function(organization, node, rowIndex, minWidth) {
              var minCompoundSize = minWidth;
              if (rowIndex == organization.rows.length) {
                var secondDimension = [];
                organization.rows.push(secondDimension);
                organization.rowWidth.push(minCompoundSize);
                organization.rowHeight.push(0);
              }
              var w2 = organization.rowWidth[rowIndex] + node.rect.width;
              if (organization.rows[rowIndex].length > 0) {
                w2 += organization.horizontalPadding;
              }
              organization.rowWidth[rowIndex] = w2;
              if (organization.width < w2) {
                organization.width = w2;
              }
              var h2 = node.rect.height;
              if (rowIndex > 0) h2 += organization.verticalPadding;
              var extraHeight = 0;
              if (h2 > organization.rowHeight[rowIndex]) {
                extraHeight = organization.rowHeight[rowIndex];
                organization.rowHeight[rowIndex] = h2;
                extraHeight = organization.rowHeight[rowIndex] - extraHeight;
              }
              organization.height += extraHeight;
              organization.rows[rowIndex].push(node);
            };
            CoSELayout.prototype.getShortestRowIndex = function(organization) {
              var r2 = -1;
              var min4 = Number.MAX_VALUE;
              for (var i2 = 0; i2 < organization.rows.length; i2++) {
                if (organization.rowWidth[i2] < min4) {
                  r2 = i2;
                  min4 = organization.rowWidth[i2];
                }
              }
              return r2;
            };
            CoSELayout.prototype.getLongestRowIndex = function(organization) {
              var r2 = -1;
              var max5 = Number.MIN_VALUE;
              for (var i2 = 0; i2 < organization.rows.length; i2++) {
                if (organization.rowWidth[i2] > max5) {
                  r2 = i2;
                  max5 = organization.rowWidth[i2];
                }
              }
              return r2;
            };
            CoSELayout.prototype.canAddHorizontal = function(organization, extraWidth, extraHeight) {
              var sri = this.getShortestRowIndex(organization);
              if (sri < 0) {
                return true;
              }
              var min4 = organization.rowWidth[sri];
              if (min4 + organization.horizontalPadding + extraWidth <= organization.width) return true;
              var hDiff = 0;
              if (organization.rowHeight[sri] < extraHeight) {
                if (sri > 0) hDiff = extraHeight + organization.verticalPadding - organization.rowHeight[sri];
              }
              var add_to_row_ratio;
              if (organization.width - min4 >= extraWidth + organization.horizontalPadding) {
                add_to_row_ratio = (organization.height + hDiff) / (min4 + extraWidth + organization.horizontalPadding);
              } else {
                add_to_row_ratio = (organization.height + hDiff) / organization.width;
              }
              hDiff = extraHeight + organization.verticalPadding;
              var add_new_row_ratio;
              if (organization.width < extraWidth) {
                add_new_row_ratio = (organization.height + hDiff) / extraWidth;
              } else {
                add_new_row_ratio = (organization.height + hDiff) / organization.width;
              }
              if (add_new_row_ratio < 1) add_new_row_ratio = 1 / add_new_row_ratio;
              if (add_to_row_ratio < 1) add_to_row_ratio = 1 / add_to_row_ratio;
              return add_to_row_ratio < add_new_row_ratio;
            };
            CoSELayout.prototype.shiftToLastRow = function(organization) {
              var longest = this.getLongestRowIndex(organization);
              var last2 = organization.rowWidth.length - 1;
              var row = organization.rows[longest];
              var node = row[row.length - 1];
              var diff2 = node.width + organization.horizontalPadding;
              if (organization.width - organization.rowWidth[last2] > diff2 && longest != last2) {
                row.splice(-1, 1);
                organization.rows[last2].push(node);
                organization.rowWidth[longest] = organization.rowWidth[longest] - diff2;
                organization.rowWidth[last2] = organization.rowWidth[last2] + diff2;
                organization.width = organization.rowWidth[instance.getLongestRowIndex(organization)];
                var maxHeight = Number.MIN_VALUE;
                for (var i2 = 0; i2 < row.length; i2++) {
                  if (row[i2].height > maxHeight) maxHeight = row[i2].height;
                }
                if (longest > 0) maxHeight += organization.verticalPadding;
                var prevTotal = organization.rowHeight[longest] + organization.rowHeight[last2];
                organization.rowHeight[longest] = maxHeight;
                if (organization.rowHeight[last2] < node.height + organization.verticalPadding) organization.rowHeight[last2] = node.height + organization.verticalPadding;
                var finalTotal = organization.rowHeight[longest] + organization.rowHeight[last2];
                organization.height += finalTotal - prevTotal;
                this.shiftToLastRow(organization);
              }
            };
            CoSELayout.prototype.tilingPreLayout = function() {
              if (CoSEConstants.TILE) {
                this.groupZeroDegreeMembers();
                this.clearCompounds();
                this.clearZeroDegreeMembers();
              }
            };
            CoSELayout.prototype.tilingPostLayout = function() {
              if (CoSEConstants.TILE) {
                this.repopulateZeroDegreeMembers();
                this.repopulateCompounds();
              }
            };
            CoSELayout.prototype.reduceTrees = function() {
              var prunedNodesAll = [];
              var containsLeaf = true;
              var node;
              while (containsLeaf) {
                var allNodes = this.graphManager.getAllNodes();
                var prunedNodesInStepTemp = [];
                containsLeaf = false;
                for (var i2 = 0; i2 < allNodes.length; i2++) {
                  node = allNodes[i2];
                  if (node.getEdges().length == 1 && !node.getEdges()[0].isInterGraph && node.getChild() == null) {
                    prunedNodesInStepTemp.push([node, node.getEdges()[0], node.getOwner()]);
                    containsLeaf = true;
                  }
                }
                if (containsLeaf == true) {
                  var prunedNodesInStep = [];
                  for (var j2 = 0; j2 < prunedNodesInStepTemp.length; j2++) {
                    if (prunedNodesInStepTemp[j2][0].getEdges().length == 1) {
                      prunedNodesInStep.push(prunedNodesInStepTemp[j2]);
                      prunedNodesInStepTemp[j2][0].getOwner().remove(prunedNodesInStepTemp[j2][0]);
                    }
                  }
                  prunedNodesAll.push(prunedNodesInStep);
                  this.graphManager.resetAllNodes();
                  this.graphManager.resetAllEdges();
                }
              }
              this.prunedNodesAll = prunedNodesAll;
            };
            CoSELayout.prototype.growTree = function(prunedNodesAll) {
              var lengthOfPrunedNodesInStep = prunedNodesAll.length;
              var prunedNodesInStep = prunedNodesAll[lengthOfPrunedNodesInStep - 1];
              var nodeData;
              for (var i2 = 0; i2 < prunedNodesInStep.length; i2++) {
                nodeData = prunedNodesInStep[i2];
                this.findPlaceforPrunedNode(nodeData);
                nodeData[2].add(nodeData[0]);
                nodeData[2].add(nodeData[1], nodeData[1].source, nodeData[1].target);
              }
              prunedNodesAll.splice(prunedNodesAll.length - 1, 1);
              this.graphManager.resetAllNodes();
              this.graphManager.resetAllEdges();
            };
            CoSELayout.prototype.findPlaceforPrunedNode = function(nodeData) {
              var gridForPrunedNode;
              var nodeToConnect;
              var prunedNode = nodeData[0];
              if (prunedNode == nodeData[1].source) {
                nodeToConnect = nodeData[1].target;
              } else {
                nodeToConnect = nodeData[1].source;
              }
              var startGridX = nodeToConnect.startX;
              var finishGridX = nodeToConnect.finishX;
              var startGridY = nodeToConnect.startY;
              var finishGridY = nodeToConnect.finishY;
              var upNodeCount = 0;
              var downNodeCount = 0;
              var rightNodeCount = 0;
              var leftNodeCount = 0;
              var controlRegions = [upNodeCount, rightNodeCount, downNodeCount, leftNodeCount];
              if (startGridY > 0) {
                for (var i2 = startGridX; i2 <= finishGridX; i2++) {
                  controlRegions[0] += this.grid[i2][startGridY - 1].length + this.grid[i2][startGridY].length - 1;
                }
              }
              if (finishGridX < this.grid.length - 1) {
                for (var i2 = startGridY; i2 <= finishGridY; i2++) {
                  controlRegions[1] += this.grid[finishGridX + 1][i2].length + this.grid[finishGridX][i2].length - 1;
                }
              }
              if (finishGridY < this.grid[0].length - 1) {
                for (var i2 = startGridX; i2 <= finishGridX; i2++) {
                  controlRegions[2] += this.grid[i2][finishGridY + 1].length + this.grid[i2][finishGridY].length - 1;
                }
              }
              if (startGridX > 0) {
                for (var i2 = startGridY; i2 <= finishGridY; i2++) {
                  controlRegions[3] += this.grid[startGridX - 1][i2].length + this.grid[startGridX][i2].length - 1;
                }
              }
              var min4 = Integer.MAX_VALUE;
              var minCount;
              var minIndex;
              for (var j2 = 0; j2 < controlRegions.length; j2++) {
                if (controlRegions[j2] < min4) {
                  min4 = controlRegions[j2];
                  minCount = 1;
                  minIndex = j2;
                } else if (controlRegions[j2] == min4) {
                  minCount++;
                }
              }
              if (minCount == 3 && min4 == 0) {
                if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[2] == 0) {
                  gridForPrunedNode = 1;
                } else if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[3] == 0) {
                  gridForPrunedNode = 0;
                } else if (controlRegions[0] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {
                  gridForPrunedNode = 3;
                } else if (controlRegions[1] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {
                  gridForPrunedNode = 2;
                }
              } else if (minCount == 2 && min4 == 0) {
                var random = Math.floor(Math.random() * 2);
                if (controlRegions[0] == 0 && controlRegions[1] == 0) {
                  ;
                  if (random == 0) {
                    gridForPrunedNode = 0;
                  } else {
                    gridForPrunedNode = 1;
                  }
                } else if (controlRegions[0] == 0 && controlRegions[2] == 0) {
                  if (random == 0) {
                    gridForPrunedNode = 0;
                  } else {
                    gridForPrunedNode = 2;
                  }
                } else if (controlRegions[0] == 0 && controlRegions[3] == 0) {
                  if (random == 0) {
                    gridForPrunedNode = 0;
                  } else {
                    gridForPrunedNode = 3;
                  }
                } else if (controlRegions[1] == 0 && controlRegions[2] == 0) {
                  if (random == 0) {
                    gridForPrunedNode = 1;
                  } else {
                    gridForPrunedNode = 2;
                  }
                } else if (controlRegions[1] == 0 && controlRegions[3] == 0) {
                  if (random == 0) {
                    gridForPrunedNode = 1;
                  } else {
                    gridForPrunedNode = 3;
                  }
                } else {
                  if (random == 0) {
                    gridForPrunedNode = 2;
                  } else {
                    gridForPrunedNode = 3;
                  }
                }
              } else if (minCount == 4 && min4 == 0) {
                var random = Math.floor(Math.random() * 4);
                gridForPrunedNode = random;
              } else {
                gridForPrunedNode = minIndex;
              }
              if (gridForPrunedNode == 0) {
                prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() - nodeToConnect.getHeight() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getHeight() / 2);
              } else if (gridForPrunedNode == 1) {
                prunedNode.setCenter(nodeToConnect.getCenterX() + nodeToConnect.getWidth() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getWidth() / 2, nodeToConnect.getCenterY());
              } else if (gridForPrunedNode == 2) {
                prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() + nodeToConnect.getHeight() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getHeight() / 2);
              } else {
                prunedNode.setCenter(nodeToConnect.getCenterX() - nodeToConnect.getWidth() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getWidth() / 2, nodeToConnect.getCenterY());
              }
            };
            module2.exports = CoSELayout;
          },
          /* 7 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var coseBase = {};
            coseBase.layoutBase = __webpack_require__(0);
            coseBase.CoSEConstants = __webpack_require__(1);
            coseBase.CoSEEdge = __webpack_require__(2);
            coseBase.CoSEGraph = __webpack_require__(3);
            coseBase.CoSEGraphManager = __webpack_require__(4);
            coseBase.CoSELayout = __webpack_require__(6);
            coseBase.CoSENode = __webpack_require__(5);
            module2.exports = coseBase;
          }
          /******/
        ])
      );
    });
  }
});

// node_modules/cytoscape-cose-bilkent/cytoscape-cose-bilkent.js
var require_cytoscape_cose_bilkent = __commonJS({
  "node_modules/cytoscape-cose-bilkent/cytoscape-cose-bilkent.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory(require_cose_base());
      else if (typeof define === "function" && define.amd)
        define(["cose-base"], factory);
      else if (typeof exports === "object")
        exports["cytoscapeCoseBilkent"] = factory(require_cose_base());
      else
        root["cytoscapeCoseBilkent"] = factory(root["coseBase"]);
    })(exports, function(__WEBPACK_EXTERNAL_MODULE_0__) {
      return (
        /******/
        function(modules2) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
              return installedModules[moduleId].exports;
            }
            var module2 = installedModules[moduleId] = {
              /******/
              i: moduleId,
              /******/
              l: false,
              /******/
              exports: {}
              /******/
            };
            modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
            module2.l = true;
            return module2.exports;
          }
          __webpack_require__.m = modules2;
          __webpack_require__.c = installedModules;
          __webpack_require__.i = function(value) {
            return value;
          };
          __webpack_require__.d = function(exports2, name, getter) {
            if (!__webpack_require__.o(exports2, name)) {
              Object.defineProperty(exports2, name, {
                /******/
                configurable: false,
                /******/
                enumerable: true,
                /******/
                get: getter
                /******/
              });
            }
          };
          __webpack_require__.n = function(module2) {
            var getter = module2 && module2.__esModule ? (
              /******/
              function getDefault() {
                return module2["default"];
              }
            ) : (
              /******/
              function getModuleExports() {
                return module2;
              }
            );
            __webpack_require__.d(getter, "a", getter);
            return getter;
          };
          __webpack_require__.o = function(object3, property) {
            return Object.prototype.hasOwnProperty.call(object3, property);
          };
          __webpack_require__.p = "";
          return __webpack_require__(__webpack_require__.s = 1);
        }([
          /* 0 */
          /***/
          function(module2, exports2) {
            module2.exports = __WEBPACK_EXTERNAL_MODULE_0__;
          },
          /* 1 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var LayoutConstants = __webpack_require__(0).layoutBase.LayoutConstants;
            var FDLayoutConstants = __webpack_require__(0).layoutBase.FDLayoutConstants;
            var CoSEConstants = __webpack_require__(0).CoSEConstants;
            var CoSELayout = __webpack_require__(0).CoSELayout;
            var CoSENode = __webpack_require__(0).CoSENode;
            var PointD = __webpack_require__(0).layoutBase.PointD;
            var DimensionD2 = __webpack_require__(0).layoutBase.DimensionD;
            var defaults4 = {
              // Called on `layoutready`
              ready: function ready4() {
              },
              // Called on `layoutstop`
              stop: function stop5() {
              },
              // 'draft', 'default' or 'proof" 
              // - 'draft' fast cooling rate 
              // - 'default' moderate cooling rate 
              // - "proof" slow cooling rate
              quality: "default",
              // include labels in node dimensions
              nodeDimensionsIncludeLabels: false,
              // number of ticks per frame; higher is faster but more jerky
              refresh: 30,
              // Whether to fit the network view after when done
              fit: true,
              // Padding on fit
              padding: 10,
              // Whether to enable incremental mode
              randomize: true,
              // Node repulsion (non overlapping) multiplier
              nodeRepulsion: 4500,
              // Ideal edge (non nested) length
              idealEdgeLength: 50,
              // Divisor to compute edge forces
              edgeElasticity: 0.45,
              // Nesting factor (multiplier) to compute ideal edge length for nested edges
              nestingFactor: 0.1,
              // Gravity force (constant)
              gravity: 0.25,
              // Maximum number of iterations to perform
              numIter: 2500,
              // For enabling tiling
              tile: true,
              // Type of layout animation. The option set is {'during', 'end', false}
              animate: "end",
              // Duration for animate:end
              animationDuration: 500,
              // Represents the amount of the vertical space to put between the zero degree members during the tiling operation(can also be a function)
              tilingPaddingVertical: 10,
              // Represents the amount of the horizontal space to put between the zero degree members during the tiling operation(can also be a function)
              tilingPaddingHorizontal: 10,
              // Gravity range (constant) for compounds
              gravityRangeCompound: 1.5,
              // Gravity force (constant) for compounds
              gravityCompound: 1,
              // Gravity range (constant)
              gravityRange: 3.8,
              // Initial cooling factor for incremental layout
              initialEnergyOnIncremental: 0.5
            };
            function extend2(defaults5, options3) {
              var obj = {};
              for (var i2 in defaults5) {
                obj[i2] = defaults5[i2];
              }
              for (var i2 in options3) {
                obj[i2] = options3[i2];
              }
              return obj;
            }
            ;
            function _CoSELayout(_options) {
              this.options = extend2(defaults4, _options);
              getUserOptions(this.options);
            }
            var getUserOptions = function getUserOptions2(options3) {
              if (options3.nodeRepulsion != null) CoSEConstants.DEFAULT_REPULSION_STRENGTH = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH = options3.nodeRepulsion;
              if (options3.idealEdgeLength != null) CoSEConstants.DEFAULT_EDGE_LENGTH = FDLayoutConstants.DEFAULT_EDGE_LENGTH = options3.idealEdgeLength;
              if (options3.edgeElasticity != null) CoSEConstants.DEFAULT_SPRING_STRENGTH = FDLayoutConstants.DEFAULT_SPRING_STRENGTH = options3.edgeElasticity;
              if (options3.nestingFactor != null) CoSEConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = options3.nestingFactor;
              if (options3.gravity != null) CoSEConstants.DEFAULT_GRAVITY_STRENGTH = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH = options3.gravity;
              if (options3.numIter != null) CoSEConstants.MAX_ITERATIONS = FDLayoutConstants.MAX_ITERATIONS = options3.numIter;
              if (options3.gravityRange != null) CoSEConstants.DEFAULT_GRAVITY_RANGE_FACTOR = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR = options3.gravityRange;
              if (options3.gravityCompound != null) CoSEConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = options3.gravityCompound;
              if (options3.gravityRangeCompound != null) CoSEConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = options3.gravityRangeCompound;
              if (options3.initialEnergyOnIncremental != null) CoSEConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = options3.initialEnergyOnIncremental;
              if (options3.quality == "draft") LayoutConstants.QUALITY = 0;
              else if (options3.quality == "proof") LayoutConstants.QUALITY = 2;
              else LayoutConstants.QUALITY = 1;
              CoSEConstants.NODE_DIMENSIONS_INCLUDE_LABELS = FDLayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = options3.nodeDimensionsIncludeLabels;
              CoSEConstants.DEFAULT_INCREMENTAL = FDLayoutConstants.DEFAULT_INCREMENTAL = LayoutConstants.DEFAULT_INCREMENTAL = !options3.randomize;
              CoSEConstants.ANIMATE = FDLayoutConstants.ANIMATE = LayoutConstants.ANIMATE = options3.animate;
              CoSEConstants.TILE = options3.tile;
              CoSEConstants.TILING_PADDING_VERTICAL = typeof options3.tilingPaddingVertical === "function" ? options3.tilingPaddingVertical.call() : options3.tilingPaddingVertical;
              CoSEConstants.TILING_PADDING_HORIZONTAL = typeof options3.tilingPaddingHorizontal === "function" ? options3.tilingPaddingHorizontal.call() : options3.tilingPaddingHorizontal;
            };
            _CoSELayout.prototype.run = function() {
              var ready4;
              var frameId;
              var options3 = this.options;
              var idToLNode = this.idToLNode = {};
              var layout6 = this.layout = new CoSELayout();
              var self2 = this;
              self2.stopped = false;
              this.cy = this.options.cy;
              this.cy.trigger({ type: "layoutstart", layout: this });
              var gm = layout6.newGraphManager();
              this.gm = gm;
              var nodes3 = this.options.eles.nodes();
              var edges3 = this.options.eles.edges();
              this.root = gm.addRoot();
              this.processChildrenList(this.root, this.getTopMostNodes(nodes3), layout6);
              for (var i2 = 0; i2 < edges3.length; i2++) {
                var edge = edges3[i2];
                var sourceNode = this.idToLNode[edge.data("source")];
                var targetNode = this.idToLNode[edge.data("target")];
                if (sourceNode !== targetNode && sourceNode.getEdgesBetween(targetNode).length == 0) {
                  var e1 = gm.add(layout6.newEdge(), sourceNode, targetNode);
                  e1.id = edge.id();
                }
              }
              var getPositions = function getPositions2(ele, i3) {
                if (typeof ele === "number") {
                  ele = i3;
                }
                var theId = ele.data("id");
                var lNode = self2.idToLNode[theId];
                return {
                  x: lNode.getRect().getCenterX(),
                  y: lNode.getRect().getCenterY()
                };
              };
              var iterateAnimated = function iterateAnimated2() {
                var afterReposition = function afterReposition2() {
                  if (options3.fit) {
                    options3.cy.fit(options3.eles, options3.padding);
                  }
                  if (!ready4) {
                    ready4 = true;
                    self2.cy.one("layoutready", options3.ready);
                    self2.cy.trigger({ type: "layoutready", layout: self2 });
                  }
                };
                var ticksPerFrame = self2.options.refresh;
                var isDone;
                for (var i3 = 0; i3 < ticksPerFrame && !isDone; i3++) {
                  isDone = self2.stopped || self2.layout.tick();
                }
                if (isDone) {
                  if (layout6.checkLayoutSuccess() && !layout6.isSubLayout) {
                    layout6.doPostLayout();
                  }
                  if (layout6.tilingPostLayout) {
                    layout6.tilingPostLayout();
                  }
                  layout6.isLayoutFinished = true;
                  self2.options.eles.nodes().positions(getPositions);
                  afterReposition();
                  self2.cy.one("layoutstop", self2.options.stop);
                  self2.cy.trigger({ type: "layoutstop", layout: self2 });
                  if (frameId) {
                    cancelAnimationFrame(frameId);
                  }
                  ready4 = false;
                  return;
                }
                var animationData = self2.layout.getPositionsData();
                options3.eles.nodes().positions(function(ele, i4) {
                  if (typeof ele === "number") {
                    ele = i4;
                  }
                  if (!ele.isParent()) {
                    var theId = ele.id();
                    var pNode = animationData[theId];
                    var temp = ele;
                    while (pNode == null) {
                      pNode = animationData[temp.data("parent")] || animationData["DummyCompound_" + temp.data("parent")];
                      animationData[theId] = pNode;
                      temp = temp.parent()[0];
                      if (temp == void 0) {
                        break;
                      }
                    }
                    if (pNode != null) {
                      return {
                        x: pNode.x,
                        y: pNode.y
                      };
                    } else {
                      return {
                        x: ele.position("x"),
                        y: ele.position("y")
                      };
                    }
                  }
                });
                afterReposition();
                frameId = requestAnimationFrame(iterateAnimated2);
              };
              layout6.addListener("layoutstarted", function() {
                if (self2.options.animate === "during") {
                  frameId = requestAnimationFrame(iterateAnimated);
                }
              });
              layout6.runLayout();
              if (this.options.animate !== "during") {
                self2.options.eles.nodes().not(":parent").layoutPositions(self2, self2.options, getPositions);
                ready4 = false;
              }
              return this;
            };
            _CoSELayout.prototype.getTopMostNodes = function(nodes3) {
              var nodesMap = {};
              for (var i2 = 0; i2 < nodes3.length; i2++) {
                nodesMap[nodes3[i2].id()] = true;
              }
              var roots = nodes3.filter(function(ele, i3) {
                if (typeof ele === "number") {
                  ele = i3;
                }
                var parent4 = ele.parent()[0];
                while (parent4 != null) {
                  if (nodesMap[parent4.id()]) {
                    return false;
                  }
                  parent4 = parent4.parent()[0];
                }
                return true;
              });
              return roots;
            };
            _CoSELayout.prototype.processChildrenList = function(parent4, children, layout6) {
              var size3 = children.length;
              for (var i2 = 0; i2 < size3; i2++) {
                var theChild = children[i2];
                var children_of_children = theChild.children();
                var theNode;
                var dimensions2 = theChild.layoutDimensions({
                  nodeDimensionsIncludeLabels: this.options.nodeDimensionsIncludeLabels
                });
                if (theChild.outerWidth() != null && theChild.outerHeight() != null) {
                  theNode = parent4.add(new CoSENode(layout6.graphManager, new PointD(theChild.position("x") - dimensions2.w / 2, theChild.position("y") - dimensions2.h / 2), new DimensionD2(parseFloat(dimensions2.w), parseFloat(dimensions2.h))));
                } else {
                  theNode = parent4.add(new CoSENode(this.graphManager));
                }
                theNode.id = theChild.data("id");
                theNode.paddingLeft = parseInt(theChild.css("padding"));
                theNode.paddingTop = parseInt(theChild.css("padding"));
                theNode.paddingRight = parseInt(theChild.css("padding"));
                theNode.paddingBottom = parseInt(theChild.css("padding"));
                if (this.options.nodeDimensionsIncludeLabels) {
                  if (theChild.isParent()) {
                    var labelWidth = theChild.boundingBox({ includeLabels: true, includeNodes: false }).w;
                    var labelHeight = theChild.boundingBox({ includeLabels: true, includeNodes: false }).h;
                    var labelPos = theChild.css("text-halign");
                    theNode.labelWidth = labelWidth;
                    theNode.labelHeight = labelHeight;
                    theNode.labelPos = labelPos;
                  }
                }
                this.idToLNode[theChild.data("id")] = theNode;
                if (isNaN(theNode.rect.x)) {
                  theNode.rect.x = 0;
                }
                if (isNaN(theNode.rect.y)) {
                  theNode.rect.y = 0;
                }
                if (children_of_children != null && children_of_children.length > 0) {
                  var theNewGraph;
                  theNewGraph = layout6.getGraphManager().add(layout6.newGraph(), theNode);
                  this.processChildrenList(theNewGraph, children_of_children, layout6);
                }
              }
            };
            _CoSELayout.prototype.stop = function() {
              this.stopped = true;
              return this;
            };
            var register = function register2(cytoscape4) {
              cytoscape4("layout", "cose-bilkent", _CoSELayout);
            };
            if (typeof cytoscape !== "undefined") {
              register(cytoscape);
            }
            module2.exports = register;
          }
          /******/
        ])
      );
    });
  }
});

// node_modules/lodash/_listCacheClear.js
var require_listCacheClear2 = __commonJS({
  "node_modules/lodash/_listCacheClear.js"(exports, module) {
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    module.exports = listCacheClear;
  }
});

// node_modules/lodash/eq.js
var require_eq = __commonJS({
  "node_modules/lodash/eq.js"(exports, module) {
    function eq2(value, other) {
      return value === other || value !== value && other !== other;
    }
    module.exports = eq2;
  }
});

// node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf2 = __commonJS({
  "node_modules/lodash/_assocIndexOf.js"(exports, module) {
    var eq2 = require_eq();
    function assocIndexOf(array3, key) {
      var length = array3.length;
      while (length--) {
        if (eq2(array3[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    module.exports = assocIndexOf;
  }
});

// node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete2 = __commonJS({
  "node_modules/lodash/_listCacheDelete.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf2();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data4 = this.__data__, index = assocIndexOf(data4, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data4.length - 1;
      if (index == lastIndex) {
        data4.pop();
      } else {
        splice.call(data4, index, 1);
      }
      --this.size;
      return true;
    }
    module.exports = listCacheDelete;
  }
});

// node_modules/lodash/_listCacheGet.js
var require_listCacheGet2 = __commonJS({
  "node_modules/lodash/_listCacheGet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf2();
    function listCacheGet(key) {
      var data4 = this.__data__, index = assocIndexOf(data4, key);
      return index < 0 ? void 0 : data4[index][1];
    }
    module.exports = listCacheGet;
  }
});

// node_modules/lodash/_listCacheHas.js
var require_listCacheHas2 = __commonJS({
  "node_modules/lodash/_listCacheHas.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf2();
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    module.exports = listCacheHas;
  }
});

// node_modules/lodash/_listCacheSet.js
var require_listCacheSet2 = __commonJS({
  "node_modules/lodash/_listCacheSet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf2();
    function listCacheSet(key, value) {
      var data4 = this.__data__, index = assocIndexOf(data4, key);
      if (index < 0) {
        ++this.size;
        data4.push([key, value]);
      } else {
        data4[index][1] = value;
      }
      return this;
    }
    module.exports = listCacheSet;
  }
});

// node_modules/lodash/_ListCache.js
var require_ListCache2 = __commonJS({
  "node_modules/lodash/_ListCache.js"(exports, module) {
    var listCacheClear = require_listCacheClear2();
    var listCacheDelete = require_listCacheDelete2();
    var listCacheGet = require_listCacheGet2();
    var listCacheHas = require_listCacheHas2();
    var listCacheSet = require_listCacheSet2();
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
  }
});

// node_modules/lodash/_stackClear.js
var require_stackClear = __commonJS({
  "node_modules/lodash/_stackClear.js"(exports, module) {
    var ListCache = require_ListCache2();
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    module.exports = stackClear;
  }
});

// node_modules/lodash/_stackDelete.js
var require_stackDelete = __commonJS({
  "node_modules/lodash/_stackDelete.js"(exports, module) {
    function stackDelete(key) {
      var data4 = this.__data__, result = data4["delete"](key);
      this.size = data4.size;
      return result;
    }
    module.exports = stackDelete;
  }
});

// node_modules/lodash/_stackGet.js
var require_stackGet = __commonJS({
  "node_modules/lodash/_stackGet.js"(exports, module) {
    function stackGet(key) {
      return this.__data__.get(key);
    }
    module.exports = stackGet;
  }
});

// node_modules/lodash/_stackHas.js
var require_stackHas = __commonJS({
  "node_modules/lodash/_stackHas.js"(exports, module) {
    function stackHas(key) {
      return this.__data__.has(key);
    }
    module.exports = stackHas;
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal2 = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root2 = __commonJS({
  "node_modules/lodash/_root.js"(exports, module) {
    var freeGlobal = require_freeGlobal2();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module.exports = root;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol2 = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module) {
    var root = require_root2();
    var Symbol2 = root.Symbol;
    module.exports = Symbol2;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag2 = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module) {
    var Symbol2 = require_Symbol2();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString2 = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag2 = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module) {
    var Symbol2 = require_Symbol2();
    var getRawTag = require_getRawTag2();
    var objectToString = require_objectToString2();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module) {
    function isObject(value) {
      var type2 = typeof value;
      return value != null && (type2 == "object" || type2 == "function");
    }
    module.exports = isObject;
  }
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/lodash/isFunction.js"(exports, module) {
    var baseGetTag = require_baseGetTag2();
    var isObject = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction2(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module.exports = isFunction2;
  }
});

// node_modules/lodash/_coreJsData.js
var require_coreJsData2 = __commonJS({
  "node_modules/lodash/_coreJsData.js"(exports, module) {
    var root = require_root2();
    var coreJsData = root["__core-js_shared__"];
    module.exports = coreJsData;
  }
});

// node_modules/lodash/_isMasked.js
var require_isMasked2 = __commonJS({
  "node_modules/lodash/_isMasked.js"(exports, module) {
    var coreJsData = require_coreJsData2();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module.exports = isMasked;
  }
});

// node_modules/lodash/_toSource.js
var require_toSource2 = __commonJS({
  "node_modules/lodash/_toSource.js"(exports, module) {
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    module.exports = toSource;
  }
});

// node_modules/lodash/_baseIsNative.js
var require_baseIsNative2 = __commonJS({
  "node_modules/lodash/_baseIsNative.js"(exports, module) {
    var isFunction2 = require_isFunction();
    var isMasked = require_isMasked2();
    var isObject = require_isObject();
    var toSource = require_toSource2();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    module.exports = baseIsNative;
  }
});

// node_modules/lodash/_getValue.js
var require_getValue2 = __commonJS({
  "node_modules/lodash/_getValue.js"(exports, module) {
    function getValue2(object3, key) {
      return object3 == null ? void 0 : object3[key];
    }
    module.exports = getValue2;
  }
});

// node_modules/lodash/_getNative.js
var require_getNative2 = __commonJS({
  "node_modules/lodash/_getNative.js"(exports, module) {
    var baseIsNative = require_baseIsNative2();
    var getValue2 = require_getValue2();
    function getNative(object3, key) {
      var value = getValue2(object3, key);
      return baseIsNative(value) ? value : void 0;
    }
    module.exports = getNative;
  }
});

// node_modules/lodash/_Map.js
var require_Map2 = __commonJS({
  "node_modules/lodash/_Map.js"(exports, module) {
    var getNative = require_getNative2();
    var root = require_root2();
    var Map2 = getNative(root, "Map");
    module.exports = Map2;
  }
});

// node_modules/lodash/_nativeCreate.js
var require_nativeCreate2 = __commonJS({
  "node_modules/lodash/_nativeCreate.js"(exports, module) {
    var getNative = require_getNative2();
    var nativeCreate = getNative(Object, "create");
    module.exports = nativeCreate;
  }
});

// node_modules/lodash/_hashClear.js
var require_hashClear2 = __commonJS({
  "node_modules/lodash/_hashClear.js"(exports, module) {
    var nativeCreate = require_nativeCreate2();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    module.exports = hashClear;
  }
});

// node_modules/lodash/_hashDelete.js
var require_hashDelete2 = __commonJS({
  "node_modules/lodash/_hashDelete.js"(exports, module) {
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = hashDelete;
  }
});

// node_modules/lodash/_hashGet.js
var require_hashGet2 = __commonJS({
  "node_modules/lodash/_hashGet.js"(exports, module) {
    var nativeCreate = require_nativeCreate2();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashGet(key) {
      var data4 = this.__data__;
      if (nativeCreate) {
        var result = data4[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data4, key) ? data4[key] : void 0;
    }
    module.exports = hashGet;
  }
});

// node_modules/lodash/_hashHas.js
var require_hashHas2 = __commonJS({
  "node_modules/lodash/_hashHas.js"(exports, module) {
    var nativeCreate = require_nativeCreate2();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashHas(key) {
      var data4 = this.__data__;
      return nativeCreate ? data4[key] !== void 0 : hasOwnProperty.call(data4, key);
    }
    module.exports = hashHas;
  }
});

// node_modules/lodash/_hashSet.js
var require_hashSet2 = __commonJS({
  "node_modules/lodash/_hashSet.js"(exports, module) {
    var nativeCreate = require_nativeCreate2();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data4 = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data4[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    module.exports = hashSet;
  }
});

// node_modules/lodash/_Hash.js
var require_Hash2 = __commonJS({
  "node_modules/lodash/_Hash.js"(exports, module) {
    var hashClear = require_hashClear2();
    var hashDelete = require_hashDelete2();
    var hashGet = require_hashGet2();
    var hashHas = require_hashHas2();
    var hashSet = require_hashSet2();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
  }
});

// node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear2 = __commonJS({
  "node_modules/lodash/_mapCacheClear.js"(exports, module) {
    var Hash = require_Hash2();
    var ListCache = require_ListCache2();
    var Map2 = require_Map2();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    module.exports = mapCacheClear;
  }
});

// node_modules/lodash/_isKeyable.js
var require_isKeyable2 = __commonJS({
  "node_modules/lodash/_isKeyable.js"(exports, module) {
    function isKeyable(value) {
      var type2 = typeof value;
      return type2 == "string" || type2 == "number" || type2 == "symbol" || type2 == "boolean" ? value !== "__proto__" : value === null;
    }
    module.exports = isKeyable;
  }
});

// node_modules/lodash/_getMapData.js
var require_getMapData2 = __commonJS({
  "node_modules/lodash/_getMapData.js"(exports, module) {
    var isKeyable = require_isKeyable2();
    function getMapData(map2, key) {
      var data4 = map2.__data__;
      return isKeyable(key) ? data4[typeof key == "string" ? "string" : "hash"] : data4.map;
    }
    module.exports = getMapData;
  }
});

// node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete2 = __commonJS({
  "node_modules/lodash/_mapCacheDelete.js"(exports, module) {
    var getMapData = require_getMapData2();
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = mapCacheDelete;
  }
});

// node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet2 = __commonJS({
  "node_modules/lodash/_mapCacheGet.js"(exports, module) {
    var getMapData = require_getMapData2();
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    module.exports = mapCacheGet;
  }
});

// node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas2 = __commonJS({
  "node_modules/lodash/_mapCacheHas.js"(exports, module) {
    var getMapData = require_getMapData2();
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    module.exports = mapCacheHas;
  }
});

// node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet2 = __commonJS({
  "node_modules/lodash/_mapCacheSet.js"(exports, module) {
    var getMapData = require_getMapData2();
    function mapCacheSet(key, value) {
      var data4 = getMapData(this, key), size3 = data4.size;
      data4.set(key, value);
      this.size += data4.size == size3 ? 0 : 1;
      return this;
    }
    module.exports = mapCacheSet;
  }
});

// node_modules/lodash/_MapCache.js
var require_MapCache2 = __commonJS({
  "node_modules/lodash/_MapCache.js"(exports, module) {
    var mapCacheClear = require_mapCacheClear2();
    var mapCacheDelete = require_mapCacheDelete2();
    var mapCacheGet = require_mapCacheGet2();
    var mapCacheHas = require_mapCacheHas2();
    var mapCacheSet = require_mapCacheSet2();
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
  }
});

// node_modules/lodash/_stackSet.js
var require_stackSet = __commonJS({
  "node_modules/lodash/_stackSet.js"(exports, module) {
    var ListCache = require_ListCache2();
    var Map2 = require_Map2();
    var MapCache = require_MapCache2();
    var LARGE_ARRAY_SIZE = 200;
    function stackSet(key, value) {
      var data4 = this.__data__;
      if (data4 instanceof ListCache) {
        var pairs = data4.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data4.size;
          return this;
        }
        data4 = this.__data__ = new MapCache(pairs);
      }
      data4.set(key, value);
      this.size = data4.size;
      return this;
    }
    module.exports = stackSet;
  }
});

// node_modules/lodash/_Stack.js
var require_Stack = __commonJS({
  "node_modules/lodash/_Stack.js"(exports, module) {
    var ListCache = require_ListCache2();
    var stackClear = require_stackClear();
    var stackDelete = require_stackDelete();
    var stackGet = require_stackGet();
    var stackHas = require_stackHas();
    var stackSet = require_stackSet();
    function Stack(entries) {
      var data4 = this.__data__ = new ListCache(entries);
      this.size = data4.size;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    module.exports = Stack;
  }
});

// node_modules/lodash/_arrayEach.js
var require_arrayEach = __commonJS({
  "node_modules/lodash/_arrayEach.js"(exports, module) {
    function arrayEach(array3, iteratee) {
      var index = -1, length = array3 == null ? 0 : array3.length;
      while (++index < length) {
        if (iteratee(array3[index], index, array3) === false) {
          break;
        }
      }
      return array3;
    }
    module.exports = arrayEach;
  }
});

// node_modules/lodash/_defineProperty.js
var require_defineProperty2 = __commonJS({
  "node_modules/lodash/_defineProperty.js"(exports, module) {
    var getNative = require_getNative2();
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    module.exports = defineProperty;
  }
});

// node_modules/lodash/_baseAssignValue.js
var require_baseAssignValue2 = __commonJS({
  "node_modules/lodash/_baseAssignValue.js"(exports, module) {
    var defineProperty = require_defineProperty2();
    function baseAssignValue(object3, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object3, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object3[key] = value;
      }
    }
    module.exports = baseAssignValue;
  }
});

// node_modules/lodash/_assignValue.js
var require_assignValue2 = __commonJS({
  "node_modules/lodash/_assignValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue2();
    var eq2 = require_eq();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function assignValue(object3, key, value) {
      var objValue = object3[key];
      if (!(hasOwnProperty.call(object3, key) && eq2(objValue, value)) || value === void 0 && !(key in object3)) {
        baseAssignValue(object3, key, value);
      }
    }
    module.exports = assignValue;
  }
});

// node_modules/lodash/_copyObject.js
var require_copyObject = __commonJS({
  "node_modules/lodash/_copyObject.js"(exports, module) {
    var assignValue = require_assignValue2();
    var baseAssignValue = require_baseAssignValue2();
    function copyObject(source, props, object3, customizer) {
      var isNew = !object3;
      object3 || (object3 = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object3[key], source[key], key, object3, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object3, key, newValue);
        } else {
          assignValue(object3, key, newValue);
        }
      }
      return object3;
    }
    module.exports = copyObject;
  }
});

// node_modules/lodash/_baseTimes.js
var require_baseTimes = __commonJS({
  "node_modules/lodash/_baseTimes.js"(exports, module) {
    function baseTimes(n2, iteratee) {
      var index = -1, result = Array(n2);
      while (++index < n2) {
        result[index] = iteratee(index);
      }
      return result;
    }
    module.exports = baseTimes;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports, module) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module.exports = isObjectLike;
  }
});

// node_modules/lodash/_baseIsArguments.js
var require_baseIsArguments = __commonJS({
  "node_modules/lodash/_baseIsArguments.js"(exports, module) {
    var baseGetTag = require_baseGetTag2();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    module.exports = baseIsArguments;
  }
});

// node_modules/lodash/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/lodash/isArguments.js"(exports, module) {
    var baseIsArguments = require_baseIsArguments();
    var isObjectLike = require_isObjectLike();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    module.exports = isArguments;
  }
});

// node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/lodash/isArray.js"(exports, module) {
    var isArray = Array.isArray;
    module.exports = isArray;
  }
});

// node_modules/lodash/stubFalse.js
var require_stubFalse = __commonJS({
  "node_modules/lodash/stubFalse.js"(exports, module) {
    function stubFalse() {
      return false;
    }
    module.exports = stubFalse;
  }
});

// node_modules/lodash/isBuffer.js
var require_isBuffer = __commonJS({
  "node_modules/lodash/isBuffer.js"(exports, module) {
    var root = require_root2();
    var stubFalse = require_stubFalse();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    module.exports = isBuffer;
  }
});

// node_modules/lodash/_isIndex.js
var require_isIndex2 = __commonJS({
  "node_modules/lodash/_isIndex.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type2 = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type2 == "number" || type2 != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    module.exports = isIndex;
  }
});

// node_modules/lodash/isLength.js
var require_isLength = __commonJS({
  "node_modules/lodash/isLength.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    module.exports = isLength;
  }
});

// node_modules/lodash/_baseIsTypedArray.js
var require_baseIsTypedArray = __commonJS({
  "node_modules/lodash/_baseIsTypedArray.js"(exports, module) {
    var baseGetTag = require_baseGetTag2();
    var isLength = require_isLength();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    module.exports = baseIsTypedArray;
  }
});

// node_modules/lodash/_baseUnary.js
var require_baseUnary = __commonJS({
  "node_modules/lodash/_baseUnary.js"(exports, module) {
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    module.exports = baseUnary;
  }
});

// node_modules/lodash/_nodeUtil.js
var require_nodeUtil = __commonJS({
  "node_modules/lodash/_nodeUtil.js"(exports, module) {
    var freeGlobal = require_freeGlobal2();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    module.exports = nodeUtil;
  }
});

// node_modules/lodash/isTypedArray.js
var require_isTypedArray = __commonJS({
  "node_modules/lodash/isTypedArray.js"(exports, module) {
    var baseIsTypedArray = require_baseIsTypedArray();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    module.exports = isTypedArray;
  }
});

// node_modules/lodash/_arrayLikeKeys.js
var require_arrayLikeKeys = __commonJS({
  "node_modules/lodash/_arrayLikeKeys.js"(exports, module) {
    var baseTimes = require_baseTimes();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isIndex = require_isIndex2();
    var isTypedArray = require_isTypedArray();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = arrayLikeKeys;
  }
});

// node_modules/lodash/_isPrototype.js
var require_isPrototype = __commonJS({
  "node_modules/lodash/_isPrototype.js"(exports, module) {
    var objectProto = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    module.exports = isPrototype;
  }
});

// node_modules/lodash/_overArg.js
var require_overArg = __commonJS({
  "node_modules/lodash/_overArg.js"(exports, module) {
    function overArg(func, transform8) {
      return function(arg) {
        return func(transform8(arg));
      };
    }
    module.exports = overArg;
  }
});

// node_modules/lodash/_nativeKeys.js
var require_nativeKeys = __commonJS({
  "node_modules/lodash/_nativeKeys.js"(exports, module) {
    var overArg = require_overArg();
    var nativeKeys = overArg(Object.keys, Object);
    module.exports = nativeKeys;
  }
});

// node_modules/lodash/_baseKeys.js
var require_baseKeys = __commonJS({
  "node_modules/lodash/_baseKeys.js"(exports, module) {
    var isPrototype = require_isPrototype();
    var nativeKeys = require_nativeKeys();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeys(object3) {
      if (!isPrototype(object3)) {
        return nativeKeys(object3);
      }
      var result = [];
      for (var key in Object(object3)) {
        if (hasOwnProperty.call(object3, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeys;
  }
});

// node_modules/lodash/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/lodash/isArrayLike.js"(exports, module) {
    var isFunction2 = require_isFunction();
    var isLength = require_isLength();
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction2(value);
    }
    module.exports = isArrayLike;
  }
});

// node_modules/lodash/keys.js
var require_keys = __commonJS({
  "node_modules/lodash/keys.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeys = require_baseKeys();
    var isArrayLike = require_isArrayLike();
    function keys2(object3) {
      return isArrayLike(object3) ? arrayLikeKeys(object3) : baseKeys(object3);
    }
    module.exports = keys2;
  }
});

// node_modules/lodash/_baseAssign.js
var require_baseAssign = __commonJS({
  "node_modules/lodash/_baseAssign.js"(exports, module) {
    var copyObject = require_copyObject();
    var keys2 = require_keys();
    function baseAssign(object3, source) {
      return object3 && copyObject(source, keys2(source), object3);
    }
    module.exports = baseAssign;
  }
});

// node_modules/lodash/_nativeKeysIn.js
var require_nativeKeysIn = __commonJS({
  "node_modules/lodash/_nativeKeysIn.js"(exports, module) {
    function nativeKeysIn(object3) {
      var result = [];
      if (object3 != null) {
        for (var key in Object(object3)) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = nativeKeysIn;
  }
});

// node_modules/lodash/_baseKeysIn.js
var require_baseKeysIn = __commonJS({
  "node_modules/lodash/_baseKeysIn.js"(exports, module) {
    var isObject = require_isObject();
    var isPrototype = require_isPrototype();
    var nativeKeysIn = require_nativeKeysIn();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeysIn(object3) {
      if (!isObject(object3)) {
        return nativeKeysIn(object3);
      }
      var isProto = isPrototype(object3), result = [];
      for (var key in object3) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object3, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeysIn;
  }
});

// node_modules/lodash/keysIn.js
var require_keysIn = __commonJS({
  "node_modules/lodash/keysIn.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeysIn = require_baseKeysIn();
    var isArrayLike = require_isArrayLike();
    function keysIn(object3) {
      return isArrayLike(object3) ? arrayLikeKeys(object3, true) : baseKeysIn(object3);
    }
    module.exports = keysIn;
  }
});

// node_modules/lodash/_baseAssignIn.js
var require_baseAssignIn = __commonJS({
  "node_modules/lodash/_baseAssignIn.js"(exports, module) {
    var copyObject = require_copyObject();
    var keysIn = require_keysIn();
    function baseAssignIn(object3, source) {
      return object3 && copyObject(source, keysIn(source), object3);
    }
    module.exports = baseAssignIn;
  }
});

// node_modules/lodash/_cloneBuffer.js
var require_cloneBuffer = __commonJS({
  "node_modules/lodash/_cloneBuffer.js"(exports, module) {
    var root = require_root2();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    module.exports = cloneBuffer;
  }
});

// node_modules/lodash/_copyArray.js
var require_copyArray2 = __commonJS({
  "node_modules/lodash/_copyArray.js"(exports, module) {
    function copyArray3(source, array3) {
      var index = -1, length = source.length;
      array3 || (array3 = Array(length));
      while (++index < length) {
        array3[index] = source[index];
      }
      return array3;
    }
    module.exports = copyArray3;
  }
});

// node_modules/lodash/_arrayFilter.js
var require_arrayFilter = __commonJS({
  "node_modules/lodash/_arrayFilter.js"(exports, module) {
    function arrayFilter(array3, predicate) {
      var index = -1, length = array3 == null ? 0 : array3.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array3[index];
        if (predicate(value, index, array3)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    module.exports = arrayFilter;
  }
});

// node_modules/lodash/stubArray.js
var require_stubArray = __commonJS({
  "node_modules/lodash/stubArray.js"(exports, module) {
    function stubArray() {
      return [];
    }
    module.exports = stubArray;
  }
});

// node_modules/lodash/_getSymbols.js
var require_getSymbols = __commonJS({
  "node_modules/lodash/_getSymbols.js"(exports, module) {
    var arrayFilter = require_arrayFilter();
    var stubArray = require_stubArray();
    var objectProto = Object.prototype;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols ? stubArray : function(object3) {
      if (object3 == null) {
        return [];
      }
      object3 = Object(object3);
      return arrayFilter(nativeGetSymbols(object3), function(symbol) {
        return propertyIsEnumerable.call(object3, symbol);
      });
    };
    module.exports = getSymbols;
  }
});

// node_modules/lodash/_copySymbols.js
var require_copySymbols = __commonJS({
  "node_modules/lodash/_copySymbols.js"(exports, module) {
    var copyObject = require_copyObject();
    var getSymbols = require_getSymbols();
    function copySymbols(source, object3) {
      return copyObject(source, getSymbols(source), object3);
    }
    module.exports = copySymbols;
  }
});

// node_modules/lodash/_arrayPush.js
var require_arrayPush = __commonJS({
  "node_modules/lodash/_arrayPush.js"(exports, module) {
    function arrayPush(array3, values) {
      var index = -1, length = values.length, offset = array3.length;
      while (++index < length) {
        array3[offset + index] = values[index];
      }
      return array3;
    }
    module.exports = arrayPush;
  }
});

// node_modules/lodash/_getPrototype.js
var require_getPrototype = __commonJS({
  "node_modules/lodash/_getPrototype.js"(exports, module) {
    var overArg = require_overArg();
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    module.exports = getPrototype;
  }
});

// node_modules/lodash/_getSymbolsIn.js
var require_getSymbolsIn = __commonJS({
  "node_modules/lodash/_getSymbolsIn.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var getPrototype = require_getPrototype();
    var getSymbols = require_getSymbols();
    var stubArray = require_stubArray();
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object3) {
      var result = [];
      while (object3) {
        arrayPush(result, getSymbols(object3));
        object3 = getPrototype(object3);
      }
      return result;
    };
    module.exports = getSymbolsIn;
  }
});

// node_modules/lodash/_copySymbolsIn.js
var require_copySymbolsIn = __commonJS({
  "node_modules/lodash/_copySymbolsIn.js"(exports, module) {
    var copyObject = require_copyObject();
    var getSymbolsIn = require_getSymbolsIn();
    function copySymbolsIn(source, object3) {
      return copyObject(source, getSymbolsIn(source), object3);
    }
    module.exports = copySymbolsIn;
  }
});

// node_modules/lodash/_baseGetAllKeys.js
var require_baseGetAllKeys = __commonJS({
  "node_modules/lodash/_baseGetAllKeys.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isArray = require_isArray();
    function baseGetAllKeys(object3, keysFunc, symbolsFunc) {
      var result = keysFunc(object3);
      return isArray(object3) ? result : arrayPush(result, symbolsFunc(object3));
    }
    module.exports = baseGetAllKeys;
  }
});

// node_modules/lodash/_getAllKeys.js
var require_getAllKeys = __commonJS({
  "node_modules/lodash/_getAllKeys.js"(exports, module) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbols = require_getSymbols();
    var keys2 = require_keys();
    function getAllKeys(object3) {
      return baseGetAllKeys(object3, keys2, getSymbols);
    }
    module.exports = getAllKeys;
  }
});

// node_modules/lodash/_getAllKeysIn.js
var require_getAllKeysIn = __commonJS({
  "node_modules/lodash/_getAllKeysIn.js"(exports, module) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbolsIn = require_getSymbolsIn();
    var keysIn = require_keysIn();
    function getAllKeysIn(object3) {
      return baseGetAllKeys(object3, keysIn, getSymbolsIn);
    }
    module.exports = getAllKeysIn;
  }
});

// node_modules/lodash/_DataView.js
var require_DataView = __commonJS({
  "node_modules/lodash/_DataView.js"(exports, module) {
    var getNative = require_getNative2();
    var root = require_root2();
    var DataView = getNative(root, "DataView");
    module.exports = DataView;
  }
});

// node_modules/lodash/_Promise.js
var require_Promise = __commonJS({
  "node_modules/lodash/_Promise.js"(exports, module) {
    var getNative = require_getNative2();
    var root = require_root2();
    var Promise2 = getNative(root, "Promise");
    module.exports = Promise2;
  }
});

// node_modules/lodash/_Set.js
var require_Set = __commonJS({
  "node_modules/lodash/_Set.js"(exports, module) {
    var getNative = require_getNative2();
    var root = require_root2();
    var Set2 = getNative(root, "Set");
    module.exports = Set2;
  }
});

// node_modules/lodash/_WeakMap.js
var require_WeakMap = __commonJS({
  "node_modules/lodash/_WeakMap.js"(exports, module) {
    var getNative = require_getNative2();
    var root = require_root2();
    var WeakMap2 = getNative(root, "WeakMap");
    module.exports = WeakMap2;
  }
});

// node_modules/lodash/_getTag.js
var require_getTag = __commonJS({
  "node_modules/lodash/_getTag.js"(exports, module) {
    var DataView = require_DataView();
    var Map2 = require_Map2();
    var Promise2 = require_Promise();
    var Set2 = require_Set();
    var WeakMap2 = require_WeakMap();
    var baseGetTag = require_baseGetTag2();
    var toSource = require_toSource2();
    var mapTag = "[object Map]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var setTag = "[object Set]";
    var weakMapTag = "[object WeakMap]";
    var dataViewTag = "[object DataView]";
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    module.exports = getTag;
  }
});

// node_modules/lodash/_initCloneArray.js
var require_initCloneArray = __commonJS({
  "node_modules/lodash/_initCloneArray.js"(exports, module) {
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function initCloneArray(array3) {
      var length = array3.length, result = new array3.constructor(length);
      if (length && typeof array3[0] == "string" && hasOwnProperty.call(array3, "index")) {
        result.index = array3.index;
        result.input = array3.input;
      }
      return result;
    }
    module.exports = initCloneArray;
  }
});

// node_modules/lodash/_Uint8Array.js
var require_Uint8Array = __commonJS({
  "node_modules/lodash/_Uint8Array.js"(exports, module) {
    var root = require_root2();
    var Uint8Array2 = root.Uint8Array;
    module.exports = Uint8Array2;
  }
});

// node_modules/lodash/_cloneArrayBuffer.js
var require_cloneArrayBuffer = __commonJS({
  "node_modules/lodash/_cloneArrayBuffer.js"(exports, module) {
    var Uint8Array2 = require_Uint8Array();
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    module.exports = cloneArrayBuffer;
  }
});

// node_modules/lodash/_cloneDataView.js
var require_cloneDataView = __commonJS({
  "node_modules/lodash/_cloneDataView.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }
    module.exports = cloneDataView;
  }
});

// node_modules/lodash/_cloneRegExp.js
var require_cloneRegExp = __commonJS({
  "node_modules/lodash/_cloneRegExp.js"(exports, module) {
    var reFlags = /\w*$/;
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }
    module.exports = cloneRegExp;
  }
});

// node_modules/lodash/_cloneSymbol.js
var require_cloneSymbol = __commonJS({
  "node_modules/lodash/_cloneSymbol.js"(exports, module) {
    var Symbol2 = require_Symbol2();
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }
    module.exports = cloneSymbol;
  }
});

// node_modules/lodash/_cloneTypedArray.js
var require_cloneTypedArray = __commonJS({
  "node_modules/lodash/_cloneTypedArray.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    module.exports = cloneTypedArray;
  }
});

// node_modules/lodash/_initCloneByTag.js
var require_initCloneByTag = __commonJS({
  "node_modules/lodash/_initCloneByTag.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    var cloneDataView = require_cloneDataView();
    var cloneRegExp = require_cloneRegExp();
    var cloneSymbol = require_cloneSymbol();
    var cloneTypedArray = require_cloneTypedArray();
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    function initCloneByTag(object3, tag, isDeep) {
      var Ctor = object3.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object3);
        case boolTag:
        case dateTag:
          return new Ctor(+object3);
        case dataViewTag:
          return cloneDataView(object3, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
          return cloneTypedArray(object3, isDeep);
        case mapTag:
          return new Ctor();
        case numberTag:
        case stringTag:
          return new Ctor(object3);
        case regexpTag:
          return cloneRegExp(object3);
        case setTag:
          return new Ctor();
        case symbolTag:
          return cloneSymbol(object3);
      }
    }
    module.exports = initCloneByTag;
  }
});

// node_modules/lodash/_baseCreate.js
var require_baseCreate = __commonJS({
  "node_modules/lodash/_baseCreate.js"(exports, module) {
    var isObject = require_isObject();
    var objectCreate = Object.create;
    var baseCreate = /* @__PURE__ */ function() {
      function object3() {
      }
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object3.prototype = proto;
        var result = new object3();
        object3.prototype = void 0;
        return result;
      };
    }();
    module.exports = baseCreate;
  }
});

// node_modules/lodash/_initCloneObject.js
var require_initCloneObject = __commonJS({
  "node_modules/lodash/_initCloneObject.js"(exports, module) {
    var baseCreate = require_baseCreate();
    var getPrototype = require_getPrototype();
    var isPrototype = require_isPrototype();
    function initCloneObject(object3) {
      return typeof object3.constructor == "function" && !isPrototype(object3) ? baseCreate(getPrototype(object3)) : {};
    }
    module.exports = initCloneObject;
  }
});

// node_modules/lodash/_baseIsMap.js
var require_baseIsMap = __commonJS({
  "node_modules/lodash/_baseIsMap.js"(exports, module) {
    var getTag = require_getTag();
    var isObjectLike = require_isObjectLike();
    var mapTag = "[object Map]";
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }
    module.exports = baseIsMap;
  }
});

// node_modules/lodash/isMap.js
var require_isMap = __commonJS({
  "node_modules/lodash/isMap.js"(exports, module) {
    var baseIsMap = require_baseIsMap();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsMap = nodeUtil && nodeUtil.isMap;
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
    module.exports = isMap;
  }
});

// node_modules/lodash/_baseIsSet.js
var require_baseIsSet = __commonJS({
  "node_modules/lodash/_baseIsSet.js"(exports, module) {
    var getTag = require_getTag();
    var isObjectLike = require_isObjectLike();
    var setTag = "[object Set]";
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }
    module.exports = baseIsSet;
  }
});

// node_modules/lodash/isSet.js
var require_isSet = __commonJS({
  "node_modules/lodash/isSet.js"(exports, module) {
    var baseIsSet = require_baseIsSet();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsSet = nodeUtil && nodeUtil.isSet;
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
    module.exports = isSet;
  }
});

// node_modules/lodash/_baseClone.js
var require_baseClone = __commonJS({
  "node_modules/lodash/_baseClone.js"(exports, module) {
    var Stack = require_Stack();
    var arrayEach = require_arrayEach();
    var assignValue = require_assignValue2();
    var baseAssign = require_baseAssign();
    var baseAssignIn = require_baseAssignIn();
    var cloneBuffer = require_cloneBuffer();
    var copyArray3 = require_copyArray2();
    var copySymbols = require_copySymbols();
    var copySymbolsIn = require_copySymbolsIn();
    var getAllKeys = require_getAllKeys();
    var getAllKeysIn = require_getAllKeysIn();
    var getTag = require_getTag();
    var initCloneArray = require_initCloneArray();
    var initCloneByTag = require_initCloneByTag();
    var initCloneObject = require_initCloneObject();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isMap = require_isMap();
    var isObject = require_isObject();
    var isSet = require_isSet();
    var keys2 = require_keys();
    var keysIn = require_keysIn();
    var CLONE_DEEP_FLAG = 1;
    var CLONE_FLAT_FLAG = 2;
    var CLONE_SYMBOLS_FLAG = 4;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    function baseClone(value, bitmask, customizer, key, object3, stack) {
      var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
      if (customizer) {
        result = object3 ? customizer(value, key, object3, stack) : customizer(value);
      }
      if (result !== void 0) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray3(value, result);
        }
      } else {
        var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || isFunc && !object3) {
          result = isFlat || isFunc ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object3 ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      stack || (stack = new Stack());
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);
      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key2) {
          result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
        });
      }
      var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys2;
      var props = isArr ? void 0 : keysFunc(value);
      arrayEach(props || value, function(subValue, key2) {
        if (props) {
          key2 = subValue;
          subValue = value[key2];
        }
        assignValue(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
      });
      return result;
    }
    module.exports = baseClone;
  }
});

// node_modules/lodash/clone.js
var require_clone = __commonJS({
  "node_modules/lodash/clone.js"(exports, module) {
    var baseClone = require_baseClone();
    var CLONE_SYMBOLS_FLAG = 4;
    function clone3(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }
    module.exports = clone3;
  }
});

// node_modules/lodash/constant.js
var require_constant = __commonJS({
  "node_modules/lodash/constant.js"(exports, module) {
    function constant(value) {
      return function() {
        return value;
      };
    }
    module.exports = constant;
  }
});

// node_modules/lodash/_createBaseFor.js
var require_createBaseFor = __commonJS({
  "node_modules/lodash/_createBaseFor.js"(exports, module) {
    function createBaseFor(fromRight) {
      return function(object3, iteratee, keysFunc) {
        var index = -1, iterable = Object(object3), props = keysFunc(object3), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object3;
      };
    }
    module.exports = createBaseFor;
  }
});

// node_modules/lodash/_baseFor.js
var require_baseFor = __commonJS({
  "node_modules/lodash/_baseFor.js"(exports, module) {
    var createBaseFor = require_createBaseFor();
    var baseFor = createBaseFor();
    module.exports = baseFor;
  }
});

// node_modules/lodash/_baseForOwn.js
var require_baseForOwn = __commonJS({
  "node_modules/lodash/_baseForOwn.js"(exports, module) {
    var baseFor = require_baseFor();
    var keys2 = require_keys();
    function baseForOwn(object3, iteratee) {
      return object3 && baseFor(object3, iteratee, keys2);
    }
    module.exports = baseForOwn;
  }
});

// node_modules/lodash/_createBaseEach.js
var require_createBaseEach = __commonJS({
  "node_modules/lodash/_createBaseEach.js"(exports, module) {
    var isArrayLike = require_isArrayLike();
    function createBaseEach(eachFunc, fromRight) {
      return function(collection4, iteratee) {
        if (collection4 == null) {
          return collection4;
        }
        if (!isArrayLike(collection4)) {
          return eachFunc(collection4, iteratee);
        }
        var length = collection4.length, index = fromRight ? length : -1, iterable = Object(collection4);
        while (fromRight ? index-- : ++index < length) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection4;
      };
    }
    module.exports = createBaseEach;
  }
});

// node_modules/lodash/_baseEach.js
var require_baseEach = __commonJS({
  "node_modules/lodash/_baseEach.js"(exports, module) {
    var baseForOwn = require_baseForOwn();
    var createBaseEach = require_createBaseEach();
    var baseEach = createBaseEach(baseForOwn);
    module.exports = baseEach;
  }
});

// node_modules/lodash/identity.js
var require_identity = __commonJS({
  "node_modules/lodash/identity.js"(exports, module) {
    function identity3(value) {
      return value;
    }
    module.exports = identity3;
  }
});

// node_modules/lodash/_castFunction.js
var require_castFunction = __commonJS({
  "node_modules/lodash/_castFunction.js"(exports, module) {
    var identity3 = require_identity();
    function castFunction(value) {
      return typeof value == "function" ? value : identity3;
    }
    module.exports = castFunction;
  }
});

// node_modules/lodash/forEach.js
var require_forEach = __commonJS({
  "node_modules/lodash/forEach.js"(exports, module) {
    var arrayEach = require_arrayEach();
    var baseEach = require_baseEach();
    var castFunction = require_castFunction();
    var isArray = require_isArray();
    function forEach2(collection4, iteratee) {
      var func = isArray(collection4) ? arrayEach : baseEach;
      return func(collection4, castFunction(iteratee));
    }
    module.exports = forEach2;
  }
});

// node_modules/lodash/each.js
var require_each = __commonJS({
  "node_modules/lodash/each.js"(exports, module) {
    module.exports = require_forEach();
  }
});

// node_modules/lodash/_baseFilter.js
var require_baseFilter = __commonJS({
  "node_modules/lodash/_baseFilter.js"(exports, module) {
    var baseEach = require_baseEach();
    function baseFilter(collection4, predicate) {
      var result = [];
      baseEach(collection4, function(value, index, collection5) {
        if (predicate(value, index, collection5)) {
          result.push(value);
        }
      });
      return result;
    }
    module.exports = baseFilter;
  }
});

// node_modules/lodash/_setCacheAdd.js
var require_setCacheAdd = __commonJS({
  "node_modules/lodash/_setCacheAdd.js"(exports, module) {
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    module.exports = setCacheAdd;
  }
});

// node_modules/lodash/_setCacheHas.js
var require_setCacheHas = __commonJS({
  "node_modules/lodash/_setCacheHas.js"(exports, module) {
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    module.exports = setCacheHas;
  }
});

// node_modules/lodash/_SetCache.js
var require_SetCache = __commonJS({
  "node_modules/lodash/_SetCache.js"(exports, module) {
    var MapCache = require_MapCache2();
    var setCacheAdd = require_setCacheAdd();
    var setCacheHas = require_setCacheHas();
    function SetCache(values) {
      var index = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module.exports = SetCache;
  }
});

// node_modules/lodash/_arraySome.js
var require_arraySome = __commonJS({
  "node_modules/lodash/_arraySome.js"(exports, module) {
    function arraySome(array3, predicate) {
      var index = -1, length = array3 == null ? 0 : array3.length;
      while (++index < length) {
        if (predicate(array3[index], index, array3)) {
          return true;
        }
      }
      return false;
    }
    module.exports = arraySome;
  }
});

// node_modules/lodash/_cacheHas.js
var require_cacheHas = __commonJS({
  "node_modules/lodash/_cacheHas.js"(exports, module) {
    function cacheHas(cache3, key) {
      return cache3.has(key);
    }
    module.exports = cacheHas;
  }
});

// node_modules/lodash/_equalArrays.js
var require_equalArrays = __commonJS({
  "node_modules/lodash/_equalArrays.js"(exports, module) {
    var SetCache = require_SetCache();
    var arraySome = require_arraySome();
    var cacheHas = require_cacheHas();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function equalArrays(array3, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array3.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array3);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array3;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array3, other);
      stack.set(other, array3);
      while (++index < arrLength) {
        var arrValue = array3[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array3, stack) : customizer(arrValue, othValue, index, array3, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array3);
      stack["delete"](other);
      return result;
    }
    module.exports = equalArrays;
  }
});

// node_modules/lodash/_mapToArray.js
var require_mapToArray = __commonJS({
  "node_modules/lodash/_mapToArray.js"(exports, module) {
    function mapToArray(map2) {
      var index = -1, result = Array(map2.size);
      map2.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    module.exports = mapToArray;
  }
});

// node_modules/lodash/_setToArray.js
var require_setToArray = __commonJS({
  "node_modules/lodash/_setToArray.js"(exports, module) {
    function setToArray(set2) {
      var index = -1, result = Array(set2.size);
      set2.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    module.exports = setToArray;
  }
});

// node_modules/lodash/_equalByTag.js
var require_equalByTag = __commonJS({
  "node_modules/lodash/_equalByTag.js"(exports, module) {
    var Symbol2 = require_Symbol2();
    var Uint8Array2 = require_Uint8Array();
    var eq2 = require_eq();
    var equalArrays = require_equalArrays();
    var mapToArray = require_mapToArray();
    var setToArray = require_setToArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function equalByTag(object3, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object3.byteLength != other.byteLength || object3.byteOffset != other.byteOffset) {
            return false;
          }
          object3 = object3.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object3.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object3), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq2(+object3, +other);
        case errorTag:
          return object3.name == other.name && object3.message == other.message;
        case regexpTag:
        case stringTag:
          return object3 == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object3.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object3);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object3, other);
          var result = equalArrays(convert(object3), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object3);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object3) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    module.exports = equalByTag;
  }
});

// node_modules/lodash/_equalObjects.js
var require_equalObjects = __commonJS({
  "node_modules/lodash/_equalObjects.js"(exports, module) {
    var getAllKeys = require_getAllKeys();
    var COMPARE_PARTIAL_FLAG = 1;
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function equalObjects(object3, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object3), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack.get(object3);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object3;
      }
      var result = true;
      stack.set(object3, other);
      stack.set(other, object3);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object3[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object3, stack) : customizer(objValue, othValue, key, object3, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object3.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object3 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object3);
      stack["delete"](other);
      return result;
    }
    module.exports = equalObjects;
  }
});

// node_modules/lodash/_baseIsEqualDeep.js
var require_baseIsEqualDeep = __commonJS({
  "node_modules/lodash/_baseIsEqualDeep.js"(exports, module) {
    var Stack = require_Stack();
    var equalArrays = require_equalArrays();
    var equalByTag = require_equalByTag();
    var equalObjects = require_equalObjects();
    var getTag = require_getTag();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isTypedArray = require_isTypedArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var objectTag = "[object Object]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseIsEqualDeep(object3, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object3), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object3), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object3)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object3) ? equalArrays(object3, other, bitmask, customizer, equalFunc, stack) : equalByTag(object3, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object3, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object3.value() : object3, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object3, other, bitmask, customizer, equalFunc, stack);
    }
    module.exports = baseIsEqualDeep;
  }
});

// node_modules/lodash/_baseIsEqual.js
var require_baseIsEqual = __commonJS({
  "node_modules/lodash/_baseIsEqual.js"(exports, module) {
    var baseIsEqualDeep = require_baseIsEqualDeep();
    var isObjectLike = require_isObjectLike();
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    module.exports = baseIsEqual;
  }
});

// node_modules/lodash/_baseIsMatch.js
var require_baseIsMatch = __commonJS({
  "node_modules/lodash/_baseIsMatch.js"(exports, module) {
    var Stack = require_Stack();
    var baseIsEqual = require_baseIsEqual();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseIsMatch(object3, source, matchData, customizer) {
      var index = matchData.length, length = index, noCustomizer = !customizer;
      if (object3 == null) {
        return !length;
      }
      object3 = Object(object3);
      while (index--) {
        var data4 = matchData[index];
        if (noCustomizer && data4[2] ? data4[1] !== object3[data4[0]] : !(data4[0] in object3)) {
          return false;
        }
      }
      while (++index < length) {
        data4 = matchData[index];
        var key = data4[0], objValue = object3[key], srcValue = data4[1];
        if (noCustomizer && data4[2]) {
          if (objValue === void 0 && !(key in object3)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object3, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    module.exports = baseIsMatch;
  }
});

// node_modules/lodash/_isStrictComparable.js
var require_isStrictComparable = __commonJS({
  "node_modules/lodash/_isStrictComparable.js"(exports, module) {
    var isObject = require_isObject();
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }
    module.exports = isStrictComparable;
  }
});

// node_modules/lodash/_getMatchData.js
var require_getMatchData = __commonJS({
  "node_modules/lodash/_getMatchData.js"(exports, module) {
    var isStrictComparable = require_isStrictComparable();
    var keys2 = require_keys();
    function getMatchData(object3) {
      var result = keys2(object3), length = result.length;
      while (length--) {
        var key = result[length], value = object3[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    module.exports = getMatchData;
  }
});

// node_modules/lodash/_matchesStrictComparable.js
var require_matchesStrictComparable = __commonJS({
  "node_modules/lodash/_matchesStrictComparable.js"(exports, module) {
    function matchesStrictComparable(key, srcValue) {
      return function(object3) {
        if (object3 == null) {
          return false;
        }
        return object3[key] === srcValue && (srcValue !== void 0 || key in Object(object3));
      };
    }
    module.exports = matchesStrictComparable;
  }
});

// node_modules/lodash/_baseMatches.js
var require_baseMatches = __commonJS({
  "node_modules/lodash/_baseMatches.js"(exports, module) {
    var baseIsMatch = require_baseIsMatch();
    var getMatchData = require_getMatchData();
    var matchesStrictComparable = require_matchesStrictComparable();
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object3) {
        return object3 === source || baseIsMatch(object3, source, matchData);
      };
    }
    module.exports = baseMatches;
  }
});

// node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "node_modules/lodash/isSymbol.js"(exports, module) {
    var baseGetTag = require_baseGetTag2();
    var isObjectLike = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    module.exports = isSymbol;
  }
});

// node_modules/lodash/_isKey.js
var require_isKey2 = __commonJS({
  "node_modules/lodash/_isKey.js"(exports, module) {
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    function isKey(value, object3) {
      if (isArray(value)) {
        return false;
      }
      var type2 = typeof value;
      if (type2 == "number" || type2 == "symbol" || type2 == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object3 != null && value in Object(object3);
    }
    module.exports = isKey;
  }
});

// node_modules/lodash/memoize.js
var require_memoize = __commonJS({
  "node_modules/lodash/memoize.js"(exports, module) {
    var MapCache = require_MapCache2();
    var FUNC_ERROR_TEXT = "Expected a function";
    function memoize3(func, resolver3) {
      if (typeof func != "function" || resolver3 != null && typeof resolver3 != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver3 ? resolver3.apply(this, args) : args[0], cache3 = memoized.cache;
        if (cache3.has(key)) {
          return cache3.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache3.set(key, result) || cache3;
        return result;
      };
      memoized.cache = new (memoize3.Cache || MapCache)();
      return memoized;
    }
    memoize3.Cache = MapCache;
    module.exports = memoize3;
  }
});

// node_modules/lodash/_memoizeCapped.js
var require_memoizeCapped2 = __commonJS({
  "node_modules/lodash/_memoizeCapped.js"(exports, module) {
    var memoize3 = require_memoize();
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped(func) {
      var result = memoize3(func, function(key) {
        if (cache3.size === MAX_MEMOIZE_SIZE) {
          cache3.clear();
        }
        return key;
      });
      var cache3 = result.cache;
      return result;
    }
    module.exports = memoizeCapped;
  }
});

// node_modules/lodash/_stringToPath.js
var require_stringToPath2 = __commonJS({
  "node_modules/lodash/_stringToPath.js"(exports, module) {
    var memoizeCapped = require_memoizeCapped2();
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = memoizeCapped(function(string3) {
      var result = [];
      if (string3.charCodeAt(0) === 46) {
        result.push("");
      }
      string3.replace(rePropName, function(match2, number3, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number3 || match2);
      });
      return result;
    });
    module.exports = stringToPath;
  }
});

// node_modules/lodash/_arrayMap.js
var require_arrayMap2 = __commonJS({
  "node_modules/lodash/_arrayMap.js"(exports, module) {
    function arrayMap(array3, iteratee) {
      var index = -1, length = array3 == null ? 0 : array3.length, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array3[index], index, array3);
      }
      return result;
    }
    module.exports = arrayMap;
  }
});

// node_modules/lodash/_baseToString.js
var require_baseToString2 = __commonJS({
  "node_modules/lodash/_baseToString.js"(exports, module) {
    var Symbol2 = require_Symbol2();
    var arrayMap = require_arrayMap2();
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray(value)) {
        return arrayMap(value, baseToString) + "";
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = baseToString;
  }
});

// node_modules/lodash/toString.js
var require_toString = __commonJS({
  "node_modules/lodash/toString.js"(exports, module) {
    var baseToString = require_baseToString2();
    function toString3(value) {
      return value == null ? "" : baseToString(value);
    }
    module.exports = toString3;
  }
});

// node_modules/lodash/_castPath.js
var require_castPath2 = __commonJS({
  "node_modules/lodash/_castPath.js"(exports, module) {
    var isArray = require_isArray();
    var isKey = require_isKey2();
    var stringToPath = require_stringToPath2();
    var toString3 = require_toString();
    function castPath(value, object3) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object3) ? [value] : stringToPath(toString3(value));
    }
    module.exports = castPath;
  }
});

// node_modules/lodash/_toKey.js
var require_toKey2 = __commonJS({
  "node_modules/lodash/_toKey.js"(exports, module) {
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = toKey;
  }
});

// node_modules/lodash/_baseGet.js
var require_baseGet2 = __commonJS({
  "node_modules/lodash/_baseGet.js"(exports, module) {
    var castPath = require_castPath2();
    var toKey = require_toKey2();
    function baseGet(object3, path) {
      path = castPath(path, object3);
      var index = 0, length = path.length;
      while (object3 != null && index < length) {
        object3 = object3[toKey(path[index++])];
      }
      return index && index == length ? object3 : void 0;
    }
    module.exports = baseGet;
  }
});

// node_modules/lodash/get.js
var require_get = __commonJS({
  "node_modules/lodash/get.js"(exports, module) {
    var baseGet = require_baseGet2();
    function get2(object3, path, defaultValue) {
      var result = object3 == null ? void 0 : baseGet(object3, path);
      return result === void 0 ? defaultValue : result;
    }
    module.exports = get2;
  }
});

// node_modules/lodash/_baseHasIn.js
var require_baseHasIn = __commonJS({
  "node_modules/lodash/_baseHasIn.js"(exports, module) {
    function baseHasIn(object3, key) {
      return object3 != null && key in Object(object3);
    }
    module.exports = baseHasIn;
  }
});

// node_modules/lodash/_hasPath.js
var require_hasPath = __commonJS({
  "node_modules/lodash/_hasPath.js"(exports, module) {
    var castPath = require_castPath2();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isIndex = require_isIndex2();
    var isLength = require_isLength();
    var toKey = require_toKey2();
    function hasPath(object3, path, hasFunc) {
      path = castPath(path, object3);
      var index = -1, length = path.length, result = false;
      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object3 != null && hasFunc(object3, key))) {
          break;
        }
        object3 = object3[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object3 == null ? 0 : object3.length;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object3) || isArguments(object3));
    }
    module.exports = hasPath;
  }
});

// node_modules/lodash/hasIn.js
var require_hasIn = __commonJS({
  "node_modules/lodash/hasIn.js"(exports, module) {
    var baseHasIn = require_baseHasIn();
    var hasPath = require_hasPath();
    function hasIn(object3, path) {
      return object3 != null && hasPath(object3, path, baseHasIn);
    }
    module.exports = hasIn;
  }
});

// node_modules/lodash/_baseMatchesProperty.js
var require_baseMatchesProperty = __commonJS({
  "node_modules/lodash/_baseMatchesProperty.js"(exports, module) {
    var baseIsEqual = require_baseIsEqual();
    var get2 = require_get();
    var hasIn = require_hasIn();
    var isKey = require_isKey2();
    var isStrictComparable = require_isStrictComparable();
    var matchesStrictComparable = require_matchesStrictComparable();
    var toKey = require_toKey2();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object3) {
        var objValue = get2(object3, path);
        return objValue === void 0 && objValue === srcValue ? hasIn(object3, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }
    module.exports = baseMatchesProperty;
  }
});

// node_modules/lodash/_baseProperty.js
var require_baseProperty = __commonJS({
  "node_modules/lodash/_baseProperty.js"(exports, module) {
    function baseProperty(key) {
      return function(object3) {
        return object3 == null ? void 0 : object3[key];
      };
    }
    module.exports = baseProperty;
  }
});

// node_modules/lodash/_basePropertyDeep.js
var require_basePropertyDeep = __commonJS({
  "node_modules/lodash/_basePropertyDeep.js"(exports, module) {
    var baseGet = require_baseGet2();
    function basePropertyDeep(path) {
      return function(object3) {
        return baseGet(object3, path);
      };
    }
    module.exports = basePropertyDeep;
  }
});

// node_modules/lodash/property.js
var require_property = __commonJS({
  "node_modules/lodash/property.js"(exports, module) {
    var baseProperty = require_baseProperty();
    var basePropertyDeep = require_basePropertyDeep();
    var isKey = require_isKey2();
    var toKey = require_toKey2();
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    module.exports = property;
  }
});

// node_modules/lodash/_baseIteratee.js
var require_baseIteratee = __commonJS({
  "node_modules/lodash/_baseIteratee.js"(exports, module) {
    var baseMatches = require_baseMatches();
    var baseMatchesProperty = require_baseMatchesProperty();
    var identity3 = require_identity();
    var isArray = require_isArray();
    var property = require_property();
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity3;
      }
      if (typeof value == "object") {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    module.exports = baseIteratee;
  }
});

// node_modules/lodash/filter.js
var require_filter = __commonJS({
  "node_modules/lodash/filter.js"(exports, module) {
    var arrayFilter = require_arrayFilter();
    var baseFilter = require_baseFilter();
    var baseIteratee = require_baseIteratee();
    var isArray = require_isArray();
    function filter4(collection4, predicate) {
      var func = isArray(collection4) ? arrayFilter : baseFilter;
      return func(collection4, baseIteratee(predicate, 3));
    }
    module.exports = filter4;
  }
});

// node_modules/lodash/_baseHas.js
var require_baseHas = __commonJS({
  "node_modules/lodash/_baseHas.js"(exports, module) {
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseHas(object3, key) {
      return object3 != null && hasOwnProperty.call(object3, key);
    }
    module.exports = baseHas;
  }
});

// node_modules/lodash/has.js
var require_has = __commonJS({
  "node_modules/lodash/has.js"(exports, module) {
    var baseHas = require_baseHas();
    var hasPath = require_hasPath();
    function has(object3, path) {
      return object3 != null && hasPath(object3, path, baseHas);
    }
    module.exports = has;
  }
});

// node_modules/lodash/isEmpty.js
var require_isEmpty = __commonJS({
  "node_modules/lodash/isEmpty.js"(exports, module) {
    var baseKeys = require_baseKeys();
    var getTag = require_getTag();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isArrayLike = require_isArrayLike();
    var isBuffer = require_isBuffer();
    var isPrototype = require_isPrototype();
    var isTypedArray = require_isTypedArray();
    var mapTag = "[object Map]";
    var setTag = "[object Set]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }
    module.exports = isEmpty;
  }
});

// node_modules/lodash/isUndefined.js
var require_isUndefined = __commonJS({
  "node_modules/lodash/isUndefined.js"(exports, module) {
    function isUndefined(value) {
      return value === void 0;
    }
    module.exports = isUndefined;
  }
});

// node_modules/lodash/_baseMap.js
var require_baseMap = __commonJS({
  "node_modules/lodash/_baseMap.js"(exports, module) {
    var baseEach = require_baseEach();
    var isArrayLike = require_isArrayLike();
    function baseMap(collection4, iteratee) {
      var index = -1, result = isArrayLike(collection4) ? Array(collection4.length) : [];
      baseEach(collection4, function(value, key, collection5) {
        result[++index] = iteratee(value, key, collection5);
      });
      return result;
    }
    module.exports = baseMap;
  }
});

// node_modules/lodash/map.js
var require_map = __commonJS({
  "node_modules/lodash/map.js"(exports, module) {
    var arrayMap = require_arrayMap2();
    var baseIteratee = require_baseIteratee();
    var baseMap = require_baseMap();
    var isArray = require_isArray();
    function map2(collection4, iteratee) {
      var func = isArray(collection4) ? arrayMap : baseMap;
      return func(collection4, baseIteratee(iteratee, 3));
    }
    module.exports = map2;
  }
});

// node_modules/lodash/_arrayReduce.js
var require_arrayReduce = __commonJS({
  "node_modules/lodash/_arrayReduce.js"(exports, module) {
    function arrayReduce(array3, iteratee, accumulator, initAccum) {
      var index = -1, length = array3 == null ? 0 : array3.length;
      if (initAccum && length) {
        accumulator = array3[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array3[index], index, array3);
      }
      return accumulator;
    }
    module.exports = arrayReduce;
  }
});

// node_modules/lodash/_baseReduce.js
var require_baseReduce = __commonJS({
  "node_modules/lodash/_baseReduce.js"(exports, module) {
    function baseReduce(collection4, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection4, function(value, index, collection5) {
        accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection5);
      });
      return accumulator;
    }
    module.exports = baseReduce;
  }
});

// node_modules/lodash/reduce.js
var require_reduce = __commonJS({
  "node_modules/lodash/reduce.js"(exports, module) {
    var arrayReduce = require_arrayReduce();
    var baseEach = require_baseEach();
    var baseIteratee = require_baseIteratee();
    var baseReduce = require_baseReduce();
    var isArray = require_isArray();
    function reduce2(collection4, iteratee, accumulator) {
      var func = isArray(collection4) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
      return func(collection4, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }
    module.exports = reduce2;
  }
});

// node_modules/lodash/isString.js
var require_isString = __commonJS({
  "node_modules/lodash/isString.js"(exports, module) {
    var baseGetTag = require_baseGetTag2();
    var isArray = require_isArray();
    var isObjectLike = require_isObjectLike();
    var stringTag = "[object String]";
    function isString2(value) {
      return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
    }
    module.exports = isString2;
  }
});

// node_modules/lodash/_asciiSize.js
var require_asciiSize = __commonJS({
  "node_modules/lodash/_asciiSize.js"(exports, module) {
    var baseProperty = require_baseProperty();
    var asciiSize = baseProperty("length");
    module.exports = asciiSize;
  }
});

// node_modules/lodash/_hasUnicode.js
var require_hasUnicode = __commonJS({
  "node_modules/lodash/_hasUnicode.js"(exports, module) {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsZWJ = "\\u200d";
    var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
    function hasUnicode(string3) {
      return reHasUnicode.test(string3);
    }
    module.exports = hasUnicode;
  }
});

// node_modules/lodash/_unicodeSize.js
var require_unicodeSize = __commonJS({
  "node_modules/lodash/_unicodeSize.js"(exports, module) {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsAstral = "[" + rsAstralRange + "]";
    var rsCombo = "[" + rsComboRange + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsZWJ = "\\u200d";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange + "]?";
    var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
    var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    function unicodeSize(string3) {
      var result = reUnicode.lastIndex = 0;
      while (reUnicode.test(string3)) {
        ++result;
      }
      return result;
    }
    module.exports = unicodeSize;
  }
});

// node_modules/lodash/_stringSize.js
var require_stringSize = __commonJS({
  "node_modules/lodash/_stringSize.js"(exports, module) {
    var asciiSize = require_asciiSize();
    var hasUnicode = require_hasUnicode();
    var unicodeSize = require_unicodeSize();
    function stringSize(string3) {
      return hasUnicode(string3) ? unicodeSize(string3) : asciiSize(string3);
    }
    module.exports = stringSize;
  }
});

// node_modules/lodash/size.js
var require_size = __commonJS({
  "node_modules/lodash/size.js"(exports, module) {
    var baseKeys = require_baseKeys();
    var getTag = require_getTag();
    var isArrayLike = require_isArrayLike();
    var isString2 = require_isString();
    var stringSize = require_stringSize();
    var mapTag = "[object Map]";
    var setTag = "[object Set]";
    function size3(collection4) {
      if (collection4 == null) {
        return 0;
      }
      if (isArrayLike(collection4)) {
        return isString2(collection4) ? stringSize(collection4) : collection4.length;
      }
      var tag = getTag(collection4);
      if (tag == mapTag || tag == setTag) {
        return collection4.size;
      }
      return baseKeys(collection4).length;
    }
    module.exports = size3;
  }
});

// node_modules/lodash/transform.js
var require_transform = __commonJS({
  "node_modules/lodash/transform.js"(exports, module) {
    var arrayEach = require_arrayEach();
    var baseCreate = require_baseCreate();
    var baseForOwn = require_baseForOwn();
    var baseIteratee = require_baseIteratee();
    var getPrototype = require_getPrototype();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isFunction2 = require_isFunction();
    var isObject = require_isObject();
    var isTypedArray = require_isTypedArray();
    function transform8(object3, iteratee, accumulator) {
      var isArr = isArray(object3), isArrLike = isArr || isBuffer(object3) || isTypedArray(object3);
      iteratee = baseIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object3 && object3.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor() : [];
        } else if (isObject(object3)) {
          accumulator = isFunction2(Ctor) ? baseCreate(getPrototype(object3)) : {};
        } else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object3, function(value, index, object4) {
        return iteratee(accumulator, value, index, object4);
      });
      return accumulator;
    }
    module.exports = transform8;
  }
});

// node_modules/lodash/_isFlattenable.js
var require_isFlattenable = __commonJS({
  "node_modules/lodash/_isFlattenable.js"(exports, module) {
    var Symbol2 = require_Symbol2();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }
    module.exports = isFlattenable;
  }
});

// node_modules/lodash/_baseFlatten.js
var require_baseFlatten = __commonJS({
  "node_modules/lodash/_baseFlatten.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isFlattenable = require_isFlattenable();
    function baseFlatten(array3, depth, predicate, isStrict, result) {
      var index = -1, length = array3.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index < length) {
        var value = array3[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    module.exports = baseFlatten;
  }
});

// node_modules/lodash/_apply.js
var require_apply = __commonJS({
  "node_modules/lodash/_apply.js"(exports, module) {
    function apply2(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    module.exports = apply2;
  }
});

// node_modules/lodash/_overRest.js
var require_overRest = __commonJS({
  "node_modules/lodash/_overRest.js"(exports, module) {
    var apply2 = require_apply();
    var nativeMax = Math.max;
    function overRest(func, start, transform8) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array3 = Array(length);
        while (++index < length) {
          array3[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform8(array3);
        return apply2(func, this, otherArgs);
      };
    }
    module.exports = overRest;
  }
});

// node_modules/lodash/_baseSetToString.js
var require_baseSetToString = __commonJS({
  "node_modules/lodash/_baseSetToString.js"(exports, module) {
    var constant = require_constant();
    var defineProperty = require_defineProperty2();
    var identity3 = require_identity();
    var baseSetToString = !defineProperty ? identity3 : function(func, string3) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string3),
        "writable": true
      });
    };
    module.exports = baseSetToString;
  }
});

// node_modules/lodash/_shortOut.js
var require_shortOut = __commonJS({
  "node_modules/lodash/_shortOut.js"(exports, module) {
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var nativeNow = Date.now;
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    module.exports = shortOut;
  }
});

// node_modules/lodash/_setToString.js
var require_setToString = __commonJS({
  "node_modules/lodash/_setToString.js"(exports, module) {
    var baseSetToString = require_baseSetToString();
    var shortOut = require_shortOut();
    var setToString = shortOut(baseSetToString);
    module.exports = setToString;
  }
});

// node_modules/lodash/_baseRest.js
var require_baseRest = __commonJS({
  "node_modules/lodash/_baseRest.js"(exports, module) {
    var identity3 = require_identity();
    var overRest = require_overRest();
    var setToString = require_setToString();
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity3), func + "");
    }
    module.exports = baseRest;
  }
});

// node_modules/lodash/_baseFindIndex.js
var require_baseFindIndex = __commonJS({
  "node_modules/lodash/_baseFindIndex.js"(exports, module) {
    function baseFindIndex(array3, predicate, fromIndex, fromRight) {
      var length = array3.length, index = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index-- : ++index < length) {
        if (predicate(array3[index], index, array3)) {
          return index;
        }
      }
      return -1;
    }
    module.exports = baseFindIndex;
  }
});

// node_modules/lodash/_baseIsNaN.js
var require_baseIsNaN = __commonJS({
  "node_modules/lodash/_baseIsNaN.js"(exports, module) {
    function baseIsNaN(value) {
      return value !== value;
    }
    module.exports = baseIsNaN;
  }
});

// node_modules/lodash/_strictIndexOf.js
var require_strictIndexOf = __commonJS({
  "node_modules/lodash/_strictIndexOf.js"(exports, module) {
    function strictIndexOf(array3, value, fromIndex) {
      var index = fromIndex - 1, length = array3.length;
      while (++index < length) {
        if (array3[index] === value) {
          return index;
        }
      }
      return -1;
    }
    module.exports = strictIndexOf;
  }
});

// node_modules/lodash/_baseIndexOf.js
var require_baseIndexOf = __commonJS({
  "node_modules/lodash/_baseIndexOf.js"(exports, module) {
    var baseFindIndex = require_baseFindIndex();
    var baseIsNaN = require_baseIsNaN();
    var strictIndexOf = require_strictIndexOf();
    function baseIndexOf(array3, value, fromIndex) {
      return value === value ? strictIndexOf(array3, value, fromIndex) : baseFindIndex(array3, baseIsNaN, fromIndex);
    }
    module.exports = baseIndexOf;
  }
});

// node_modules/lodash/_arrayIncludes.js
var require_arrayIncludes = __commonJS({
  "node_modules/lodash/_arrayIncludes.js"(exports, module) {
    var baseIndexOf = require_baseIndexOf();
    function arrayIncludes(array3, value) {
      var length = array3 == null ? 0 : array3.length;
      return !!length && baseIndexOf(array3, value, 0) > -1;
    }
    module.exports = arrayIncludes;
  }
});

// node_modules/lodash/_arrayIncludesWith.js
var require_arrayIncludesWith = __commonJS({
  "node_modules/lodash/_arrayIncludesWith.js"(exports, module) {
    function arrayIncludesWith(array3, value, comparator) {
      var index = -1, length = array3 == null ? 0 : array3.length;
      while (++index < length) {
        if (comparator(value, array3[index])) {
          return true;
        }
      }
      return false;
    }
    module.exports = arrayIncludesWith;
  }
});

// node_modules/lodash/noop.js
var require_noop = __commonJS({
  "node_modules/lodash/noop.js"(exports, module) {
    function noop4() {
    }
    module.exports = noop4;
  }
});

// node_modules/lodash/_createSet.js
var require_createSet = __commonJS({
  "node_modules/lodash/_createSet.js"(exports, module) {
    var Set2 = require_Set();
    var noop4 = require_noop();
    var setToArray = require_setToArray();
    var INFINITY = 1 / 0;
    var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop4 : function(values) {
      return new Set2(values);
    };
    module.exports = createSet;
  }
});

// node_modules/lodash/_baseUniq.js
var require_baseUniq = __commonJS({
  "node_modules/lodash/_baseUniq.js"(exports, module) {
    var SetCache = require_SetCache();
    var arrayIncludes = require_arrayIncludes();
    var arrayIncludesWith = require_arrayIncludesWith();
    var cacheHas = require_cacheHas();
    var createSet = require_createSet();
    var setToArray = require_setToArray();
    var LARGE_ARRAY_SIZE = 200;
    function baseUniq(array3, iteratee, comparator) {
      var index = -1, includes = arrayIncludes, length = array3.length, isCommon = true, result = [], seen = result;
      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set2 = iteratee ? null : createSet(array3);
        if (set2) {
          return setToArray(set2);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }
      outer:
        while (++index < length) {
          var value = array3[index], computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
      return result;
    }
    module.exports = baseUniq;
  }
});

// node_modules/lodash/isArrayLikeObject.js
var require_isArrayLikeObject = __commonJS({
  "node_modules/lodash/isArrayLikeObject.js"(exports, module) {
    var isArrayLike = require_isArrayLike();
    var isObjectLike = require_isObjectLike();
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    module.exports = isArrayLikeObject;
  }
});

// node_modules/lodash/union.js
var require_union = __commonJS({
  "node_modules/lodash/union.js"(exports, module) {
    var baseFlatten = require_baseFlatten();
    var baseRest = require_baseRest();
    var baseUniq = require_baseUniq();
    var isArrayLikeObject = require_isArrayLikeObject();
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });
    module.exports = union;
  }
});

// node_modules/lodash/_baseValues.js
var require_baseValues = __commonJS({
  "node_modules/lodash/_baseValues.js"(exports, module) {
    var arrayMap = require_arrayMap2();
    function baseValues(object3, props) {
      return arrayMap(props, function(key) {
        return object3[key];
      });
    }
    module.exports = baseValues;
  }
});

// node_modules/lodash/values.js
var require_values = __commonJS({
  "node_modules/lodash/values.js"(exports, module) {
    var baseValues = require_baseValues();
    var keys2 = require_keys();
    function values(object3) {
      return object3 == null ? [] : baseValues(object3, keys2(object3));
    }
    module.exports = values;
  }
});

// node_modules/graphlib/lib/lodash.js
var require_lodash = __commonJS({
  "node_modules/graphlib/lib/lodash.js"(exports, module) {
    var lodash;
    if (typeof __require === "function") {
      try {
        lodash = {
          clone: require_clone(),
          constant: require_constant(),
          each: require_each(),
          filter: require_filter(),
          has: require_has(),
          isArray: require_isArray(),
          isEmpty: require_isEmpty(),
          isFunction: require_isFunction(),
          isUndefined: require_isUndefined(),
          keys: require_keys(),
          map: require_map(),
          reduce: require_reduce(),
          size: require_size(),
          transform: require_transform(),
          union: require_union(),
          values: require_values()
        };
      } catch (e) {
      }
    }
    if (!lodash) {
      lodash = window._;
    }
    module.exports = lodash;
  }
});

// node_modules/graphlib/lib/graph.js
var require_graph = __commonJS({
  "node_modules/graphlib/lib/graph.js"(exports, module) {
    "use strict";
    var _2 = require_lodash();
    module.exports = Graph;
    var DEFAULT_EDGE_NAME = "\0";
    var GRAPH_NODE = "\0";
    var EDGE_KEY_DELIM = "";
    function Graph(opts) {
      this._isDirected = _2.has(opts, "directed") ? opts.directed : true;
      this._isMultigraph = _2.has(opts, "multigraph") ? opts.multigraph : false;
      this._isCompound = _2.has(opts, "compound") ? opts.compound : false;
      this._label = void 0;
      this._defaultNodeLabelFn = _2.constant(void 0);
      this._defaultEdgeLabelFn = _2.constant(void 0);
      this._nodes = {};
      if (this._isCompound) {
        this._parent = {};
        this._children = {};
        this._children[GRAPH_NODE] = {};
      }
      this._in = {};
      this._preds = {};
      this._out = {};
      this._sucs = {};
      this._edgeObjs = {};
      this._edgeLabels = {};
    }
    Graph.prototype._nodeCount = 0;
    Graph.prototype._edgeCount = 0;
    Graph.prototype.isDirected = function() {
      return this._isDirected;
    };
    Graph.prototype.isMultigraph = function() {
      return this._isMultigraph;
    };
    Graph.prototype.isCompound = function() {
      return this._isCompound;
    };
    Graph.prototype.setGraph = function(label) {
      this._label = label;
      return this;
    };
    Graph.prototype.graph = function() {
      return this._label;
    };
    Graph.prototype.setDefaultNodeLabel = function(newDefault) {
      if (!_2.isFunction(newDefault)) {
        newDefault = _2.constant(newDefault);
      }
      this._defaultNodeLabelFn = newDefault;
      return this;
    };
    Graph.prototype.nodeCount = function() {
      return this._nodeCount;
    };
    Graph.prototype.nodes = function() {
      return _2.keys(this._nodes);
    };
    Graph.prototype.sources = function() {
      var self2 = this;
      return _2.filter(this.nodes(), function(v3) {
        return _2.isEmpty(self2._in[v3]);
      });
    };
    Graph.prototype.sinks = function() {
      var self2 = this;
      return _2.filter(this.nodes(), function(v3) {
        return _2.isEmpty(self2._out[v3]);
      });
    };
    Graph.prototype.setNodes = function(vs2, value) {
      var args = arguments;
      var self2 = this;
      _2.each(vs2, function(v3) {
        if (args.length > 1) {
          self2.setNode(v3, value);
        } else {
          self2.setNode(v3);
        }
      });
      return this;
    };
    Graph.prototype.setNode = function(v3, value) {
      if (_2.has(this._nodes, v3)) {
        if (arguments.length > 1) {
          this._nodes[v3] = value;
        }
        return this;
      }
      this._nodes[v3] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v3);
      if (this._isCompound) {
        this._parent[v3] = GRAPH_NODE;
        this._children[v3] = {};
        this._children[GRAPH_NODE][v3] = true;
      }
      this._in[v3] = {};
      this._preds[v3] = {};
      this._out[v3] = {};
      this._sucs[v3] = {};
      ++this._nodeCount;
      return this;
    };
    Graph.prototype.node = function(v3) {
      return this._nodes[v3];
    };
    Graph.prototype.hasNode = function(v3) {
      return _2.has(this._nodes, v3);
    };
    Graph.prototype.removeNode = function(v3) {
      var self2 = this;
      if (_2.has(this._nodes, v3)) {
        var removeEdge = function(e) {
          self2.removeEdge(self2._edgeObjs[e]);
        };
        delete this._nodes[v3];
        if (this._isCompound) {
          this._removeFromParentsChildList(v3);
          delete this._parent[v3];
          _2.each(this.children(v3), function(child) {
            self2.setParent(child);
          });
          delete this._children[v3];
        }
        _2.each(_2.keys(this._in[v3]), removeEdge);
        delete this._in[v3];
        delete this._preds[v3];
        _2.each(_2.keys(this._out[v3]), removeEdge);
        delete this._out[v3];
        delete this._sucs[v3];
        --this._nodeCount;
      }
      return this;
    };
    Graph.prototype.setParent = function(v3, parent4) {
      if (!this._isCompound) {
        throw new Error("Cannot set parent in a non-compound graph");
      }
      if (_2.isUndefined(parent4)) {
        parent4 = GRAPH_NODE;
      } else {
        parent4 += "";
        for (var ancestor = parent4; !_2.isUndefined(ancestor); ancestor = this.parent(ancestor)) {
          if (ancestor === v3) {
            throw new Error("Setting " + parent4 + " as parent of " + v3 + " would create a cycle");
          }
        }
        this.setNode(parent4);
      }
      this.setNode(v3);
      this._removeFromParentsChildList(v3);
      this._parent[v3] = parent4;
      this._children[parent4][v3] = true;
      return this;
    };
    Graph.prototype._removeFromParentsChildList = function(v3) {
      delete this._children[this._parent[v3]][v3];
    };
    Graph.prototype.parent = function(v3) {
      if (this._isCompound) {
        var parent4 = this._parent[v3];
        if (parent4 !== GRAPH_NODE) {
          return parent4;
        }
      }
    };
    Graph.prototype.children = function(v3) {
      if (_2.isUndefined(v3)) {
        v3 = GRAPH_NODE;
      }
      if (this._isCompound) {
        var children = this._children[v3];
        if (children) {
          return _2.keys(children);
        }
      } else if (v3 === GRAPH_NODE) {
        return this.nodes();
      } else if (this.hasNode(v3)) {
        return [];
      }
    };
    Graph.prototype.predecessors = function(v3) {
      var predsV = this._preds[v3];
      if (predsV) {
        return _2.keys(predsV);
      }
    };
    Graph.prototype.successors = function(v3) {
      var sucsV = this._sucs[v3];
      if (sucsV) {
        return _2.keys(sucsV);
      }
    };
    Graph.prototype.neighbors = function(v3) {
      var preds = this.predecessors(v3);
      if (preds) {
        return _2.union(preds, this.successors(v3));
      }
    };
    Graph.prototype.isLeaf = function(v3) {
      var neighbors;
      if (this.isDirected()) {
        neighbors = this.successors(v3);
      } else {
        neighbors = this.neighbors(v3);
      }
      return neighbors.length === 0;
    };
    Graph.prototype.filterNodes = function(filter4) {
      var copy3 = new this.constructor({
        directed: this._isDirected,
        multigraph: this._isMultigraph,
        compound: this._isCompound
      });
      copy3.setGraph(this.graph());
      var self2 = this;
      _2.each(this._nodes, function(value, v3) {
        if (filter4(v3)) {
          copy3.setNode(v3, value);
        }
      });
      _2.each(this._edgeObjs, function(e) {
        if (copy3.hasNode(e.v) && copy3.hasNode(e.w)) {
          copy3.setEdge(e, self2.edge(e));
        }
      });
      var parents2 = {};
      function findParent2(v3) {
        var parent4 = self2.parent(v3);
        if (parent4 === void 0 || copy3.hasNode(parent4)) {
          parents2[v3] = parent4;
          return parent4;
        } else if (parent4 in parents2) {
          return parents2[parent4];
        } else {
          return findParent2(parent4);
        }
      }
      if (this._isCompound) {
        _2.each(copy3.nodes(), function(v3) {
          copy3.setParent(v3, findParent2(v3));
        });
      }
      return copy3;
    };
    Graph.prototype.setDefaultEdgeLabel = function(newDefault) {
      if (!_2.isFunction(newDefault)) {
        newDefault = _2.constant(newDefault);
      }
      this._defaultEdgeLabelFn = newDefault;
      return this;
    };
    Graph.prototype.edgeCount = function() {
      return this._edgeCount;
    };
    Graph.prototype.edges = function() {
      return _2.values(this._edgeObjs);
    };
    Graph.prototype.setPath = function(vs2, value) {
      var self2 = this;
      var args = arguments;
      _2.reduce(vs2, function(v3, w2) {
        if (args.length > 1) {
          self2.setEdge(v3, w2, value);
        } else {
          self2.setEdge(v3, w2);
        }
        return w2;
      });
      return this;
    };
    Graph.prototype.setEdge = function() {
      var v3, w2, name, value;
      var valueSpecified = false;
      var arg0 = arguments[0];
      if (typeof arg0 === "object" && arg0 !== null && "v" in arg0) {
        v3 = arg0.v;
        w2 = arg0.w;
        name = arg0.name;
        if (arguments.length === 2) {
          value = arguments[1];
          valueSpecified = true;
        }
      } else {
        v3 = arg0;
        w2 = arguments[1];
        name = arguments[3];
        if (arguments.length > 2) {
          value = arguments[2];
          valueSpecified = true;
        }
      }
      v3 = "" + v3;
      w2 = "" + w2;
      if (!_2.isUndefined(name)) {
        name = "" + name;
      }
      var e = edgeArgsToId(this._isDirected, v3, w2, name);
      if (_2.has(this._edgeLabels, e)) {
        if (valueSpecified) {
          this._edgeLabels[e] = value;
        }
        return this;
      }
      if (!_2.isUndefined(name) && !this._isMultigraph) {
        throw new Error("Cannot set a named edge when isMultigraph = false");
      }
      this.setNode(v3);
      this.setNode(w2);
      this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v3, w2, name);
      var edgeObj = edgeArgsToObj(this._isDirected, v3, w2, name);
      v3 = edgeObj.v;
      w2 = edgeObj.w;
      Object.freeze(edgeObj);
      this._edgeObjs[e] = edgeObj;
      incrementOrInitEntry(this._preds[w2], v3);
      incrementOrInitEntry(this._sucs[v3], w2);
      this._in[w2][e] = edgeObj;
      this._out[v3][e] = edgeObj;
      this._edgeCount++;
      return this;
    };
    Graph.prototype.edge = function(v3, w2, name) {
      var e = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v3, w2, name);
      return this._edgeLabels[e];
    };
    Graph.prototype.hasEdge = function(v3, w2, name) {
      var e = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v3, w2, name);
      return _2.has(this._edgeLabels, e);
    };
    Graph.prototype.removeEdge = function(v3, w2, name) {
      var e = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v3, w2, name);
      var edge = this._edgeObjs[e];
      if (edge) {
        v3 = edge.v;
        w2 = edge.w;
        delete this._edgeLabels[e];
        delete this._edgeObjs[e];
        decrementOrRemoveEntry(this._preds[w2], v3);
        decrementOrRemoveEntry(this._sucs[v3], w2);
        delete this._in[w2][e];
        delete this._out[v3][e];
        this._edgeCount--;
      }
      return this;
    };
    Graph.prototype.inEdges = function(v3, u2) {
      var inV = this._in[v3];
      if (inV) {
        var edges3 = _2.values(inV);
        if (!u2) {
          return edges3;
        }
        return _2.filter(edges3, function(edge) {
          return edge.v === u2;
        });
      }
    };
    Graph.prototype.outEdges = function(v3, w2) {
      var outV = this._out[v3];
      if (outV) {
        var edges3 = _2.values(outV);
        if (!w2) {
          return edges3;
        }
        return _2.filter(edges3, function(edge) {
          return edge.w === w2;
        });
      }
    };
    Graph.prototype.nodeEdges = function(v3, w2) {
      var inEdges = this.inEdges(v3, w2);
      if (inEdges) {
        return inEdges.concat(this.outEdges(v3, w2));
      }
    };
    function incrementOrInitEntry(map2, k2) {
      if (map2[k2]) {
        map2[k2]++;
      } else {
        map2[k2] = 1;
      }
    }
    function decrementOrRemoveEntry(map2, k2) {
      if (!--map2[k2]) {
        delete map2[k2];
      }
    }
    function edgeArgsToId(isDirected, v_, w_, name) {
      var v3 = "" + v_;
      var w2 = "" + w_;
      if (!isDirected && v3 > w2) {
        var tmp = v3;
        v3 = w2;
        w2 = tmp;
      }
      return v3 + EDGE_KEY_DELIM + w2 + EDGE_KEY_DELIM + (_2.isUndefined(name) ? DEFAULT_EDGE_NAME : name);
    }
    function edgeArgsToObj(isDirected, v_, w_, name) {
      var v3 = "" + v_;
      var w2 = "" + w_;
      if (!isDirected && v3 > w2) {
        var tmp = v3;
        v3 = w2;
        w2 = tmp;
      }
      var edgeObj = { v: v3, w: w2 };
      if (name) {
        edgeObj.name = name;
      }
      return edgeObj;
    }
    function edgeObjToId(isDirected, edgeObj) {
      return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);
    }
  }
});

// node_modules/graphlib/lib/version.js
var require_version = __commonJS({
  "node_modules/graphlib/lib/version.js"(exports, module) {
    module.exports = "2.1.8";
  }
});

// node_modules/graphlib/lib/index.js
var require_lib = __commonJS({
  "node_modules/graphlib/lib/index.js"(exports, module) {
    module.exports = {
      Graph: require_graph(),
      version: require_version()
    };
  }
});

// node_modules/graphlib/lib/json.js
var require_json = __commonJS({
  "node_modules/graphlib/lib/json.js"(exports, module) {
    var _2 = require_lodash();
    var Graph = require_graph();
    module.exports = {
      write,
      read
    };
    function write(g2) {
      var json2 = {
        options: {
          directed: g2.isDirected(),
          multigraph: g2.isMultigraph(),
          compound: g2.isCompound()
        },
        nodes: writeNodes(g2),
        edges: writeEdges(g2)
      };
      if (!_2.isUndefined(g2.graph())) {
        json2.value = _2.clone(g2.graph());
      }
      return json2;
    }
    function writeNodes(g2) {
      return _2.map(g2.nodes(), function(v3) {
        var nodeValue = g2.node(v3);
        var parent4 = g2.parent(v3);
        var node = { v: v3 };
        if (!_2.isUndefined(nodeValue)) {
          node.value = nodeValue;
        }
        if (!_2.isUndefined(parent4)) {
          node.parent = parent4;
        }
        return node;
      });
    }
    function writeEdges(g2) {
      return _2.map(g2.edges(), function(e) {
        var edgeValue = g2.edge(e);
        var edge = { v: e.v, w: e.w };
        if (!_2.isUndefined(e.name)) {
          edge.name = e.name;
        }
        if (!_2.isUndefined(edgeValue)) {
          edge.value = edgeValue;
        }
        return edge;
      });
    }
    function read(json2) {
      var g2 = new Graph(json2.options).setGraph(json2.value);
      _2.each(json2.nodes, function(entry) {
        g2.setNode(entry.v, entry.value);
        if (entry.parent) {
          g2.setParent(entry.v, entry.parent);
        }
      });
      _2.each(json2.edges, function(entry) {
        g2.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);
      });
      return g2;
    }
  }
});

// node_modules/graphlib/lib/alg/components.js
var require_components = __commonJS({
  "node_modules/graphlib/lib/alg/components.js"(exports, module) {
    var _2 = require_lodash();
    module.exports = components2;
    function components2(g2) {
      var visited = {};
      var cmpts = [];
      var cmpt;
      function dfs(v3) {
        if (_2.has(visited, v3)) return;
        visited[v3] = true;
        cmpt.push(v3);
        _2.each(g2.successors(v3), dfs);
        _2.each(g2.predecessors(v3), dfs);
      }
      _2.each(g2.nodes(), function(v3) {
        cmpt = [];
        dfs(v3);
        if (cmpt.length) {
          cmpts.push(cmpt);
        }
      });
      return cmpts;
    }
  }
});

// node_modules/graphlib/lib/data/priority-queue.js
var require_priority_queue = __commonJS({
  "node_modules/graphlib/lib/data/priority-queue.js"(exports, module) {
    var _2 = require_lodash();
    module.exports = PriorityQueue2;
    function PriorityQueue2() {
      this._arr = [];
      this._keyIndices = {};
    }
    PriorityQueue2.prototype.size = function() {
      return this._arr.length;
    };
    PriorityQueue2.prototype.keys = function() {
      return this._arr.map(function(x3) {
        return x3.key;
      });
    };
    PriorityQueue2.prototype.has = function(key) {
      return _2.has(this._keyIndices, key);
    };
    PriorityQueue2.prototype.priority = function(key) {
      var index = this._keyIndices[key];
      if (index !== void 0) {
        return this._arr[index].priority;
      }
    };
    PriorityQueue2.prototype.min = function() {
      if (this.size() === 0) {
        throw new Error("Queue underflow");
      }
      return this._arr[0].key;
    };
    PriorityQueue2.prototype.add = function(key, priority3) {
      var keyIndices = this._keyIndices;
      key = String(key);
      if (!_2.has(keyIndices, key)) {
        var arr = this._arr;
        var index = arr.length;
        keyIndices[key] = index;
        arr.push({ key, priority: priority3 });
        this._decrease(index);
        return true;
      }
      return false;
    };
    PriorityQueue2.prototype.removeMin = function() {
      this._swap(0, this._arr.length - 1);
      var min4 = this._arr.pop();
      delete this._keyIndices[min4.key];
      this._heapify(0);
      return min4.key;
    };
    PriorityQueue2.prototype.decrease = function(key, priority3) {
      var index = this._keyIndices[key];
      if (priority3 > this._arr[index].priority) {
        throw new Error("New priority is greater than current priority. Key: " + key + " Old: " + this._arr[index].priority + " New: " + priority3);
      }
      this._arr[index].priority = priority3;
      this._decrease(index);
    };
    PriorityQueue2.prototype._heapify = function(i2) {
      var arr = this._arr;
      var l2 = 2 * i2;
      var r2 = l2 + 1;
      var largest = i2;
      if (l2 < arr.length) {
        largest = arr[l2].priority < arr[largest].priority ? l2 : largest;
        if (r2 < arr.length) {
          largest = arr[r2].priority < arr[largest].priority ? r2 : largest;
        }
        if (largest !== i2) {
          this._swap(i2, largest);
          this._heapify(largest);
        }
      }
    };
    PriorityQueue2.prototype._decrease = function(index) {
      var arr = this._arr;
      var priority3 = arr[index].priority;
      var parent4;
      while (index !== 0) {
        parent4 = index >> 1;
        if (arr[parent4].priority < priority3) {
          break;
        }
        this._swap(index, parent4);
        index = parent4;
      }
    };
    PriorityQueue2.prototype._swap = function(i2, j2) {
      var arr = this._arr;
      var keyIndices = this._keyIndices;
      var origArrI = arr[i2];
      var origArrJ = arr[j2];
      arr[i2] = origArrJ;
      arr[j2] = origArrI;
      keyIndices[origArrJ.key] = i2;
      keyIndices[origArrI.key] = j2;
    };
  }
});

// node_modules/graphlib/lib/alg/dijkstra.js
var require_dijkstra = __commonJS({
  "node_modules/graphlib/lib/alg/dijkstra.js"(exports, module) {
    var _2 = require_lodash();
    var PriorityQueue2 = require_priority_queue();
    module.exports = dijkstra2;
    var DEFAULT_WEIGHT_FUNC = _2.constant(1);
    function dijkstra2(g2, source, weightFn, edgeFn) {
      return runDijkstra(
        g2,
        String(source),
        weightFn || DEFAULT_WEIGHT_FUNC,
        edgeFn || function(v3) {
          return g2.outEdges(v3);
        }
      );
    }
    function runDijkstra(g2, source, weightFn, edgeFn) {
      var results = {};
      var pq = new PriorityQueue2();
      var v3, vEntry;
      var updateNeighbors = function(edge) {
        var w2 = edge.v !== v3 ? edge.v : edge.w;
        var wEntry = results[w2];
        var weight8 = weightFn(edge);
        var distance = vEntry.distance + weight8;
        if (weight8 < 0) {
          throw new Error("dijkstra does not allow negative edge weights. Bad edge: " + edge + " Weight: " + weight8);
        }
        if (distance < wEntry.distance) {
          wEntry.distance = distance;
          wEntry.predecessor = v3;
          pq.decrease(w2, distance);
        }
      };
      g2.nodes().forEach(function(v5) {
        var distance = v5 === source ? 0 : Number.POSITIVE_INFINITY;
        results[v5] = { distance };
        pq.add(v5, distance);
      });
      while (pq.size() > 0) {
        v3 = pq.removeMin();
        vEntry = results[v3];
        if (vEntry.distance === Number.POSITIVE_INFINITY) {
          break;
        }
        edgeFn(v3).forEach(updateNeighbors);
      }
      return results;
    }
  }
});

// node_modules/graphlib/lib/alg/dijkstra-all.js
var require_dijkstra_all = __commonJS({
  "node_modules/graphlib/lib/alg/dijkstra-all.js"(exports, module) {
    var dijkstra2 = require_dijkstra();
    var _2 = require_lodash();
    module.exports = dijkstraAll;
    function dijkstraAll(g2, weightFunc, edgeFunc) {
      return _2.transform(g2.nodes(), function(acc, v3) {
        acc[v3] = dijkstra2(g2, v3, weightFunc, edgeFunc);
      }, {});
    }
  }
});

// node_modules/graphlib/lib/alg/tarjan.js
var require_tarjan = __commonJS({
  "node_modules/graphlib/lib/alg/tarjan.js"(exports, module) {
    var _2 = require_lodash();
    module.exports = tarjan;
    function tarjan(g2) {
      var index = 0;
      var stack = [];
      var visited = {};
      var results = [];
      function dfs(v3) {
        var entry = visited[v3] = {
          onStack: true,
          lowlink: index,
          index: index++
        };
        stack.push(v3);
        g2.successors(v3).forEach(function(w3) {
          if (!_2.has(visited, w3)) {
            dfs(w3);
            entry.lowlink = Math.min(entry.lowlink, visited[w3].lowlink);
          } else if (visited[w3].onStack) {
            entry.lowlink = Math.min(entry.lowlink, visited[w3].index);
          }
        });
        if (entry.lowlink === entry.index) {
          var cmpt = [];
          var w2;
          do {
            w2 = stack.pop();
            visited[w2].onStack = false;
            cmpt.push(w2);
          } while (v3 !== w2);
          results.push(cmpt);
        }
      }
      g2.nodes().forEach(function(v3) {
        if (!_2.has(visited, v3)) {
          dfs(v3);
        }
      });
      return results;
    }
  }
});

// node_modules/graphlib/lib/alg/find-cycles.js
var require_find_cycles = __commonJS({
  "node_modules/graphlib/lib/alg/find-cycles.js"(exports, module) {
    var _2 = require_lodash();
    var tarjan = require_tarjan();
    module.exports = findCycles;
    function findCycles(g2) {
      return _2.filter(tarjan(g2), function(cmpt) {
        return cmpt.length > 1 || cmpt.length === 1 && g2.hasEdge(cmpt[0], cmpt[0]);
      });
    }
  }
});

// node_modules/graphlib/lib/alg/floyd-warshall.js
var require_floyd_warshall = __commonJS({
  "node_modules/graphlib/lib/alg/floyd-warshall.js"(exports, module) {
    var _2 = require_lodash();
    module.exports = floydWarshall2;
    var DEFAULT_WEIGHT_FUNC = _2.constant(1);
    function floydWarshall2(g2, weightFn, edgeFn) {
      return runFloydWarshall(
        g2,
        weightFn || DEFAULT_WEIGHT_FUNC,
        edgeFn || function(v3) {
          return g2.outEdges(v3);
        }
      );
    }
    function runFloydWarshall(g2, weightFn, edgeFn) {
      var results = {};
      var nodes3 = g2.nodes();
      nodes3.forEach(function(v3) {
        results[v3] = {};
        results[v3][v3] = { distance: 0 };
        nodes3.forEach(function(w2) {
          if (v3 !== w2) {
            results[v3][w2] = { distance: Number.POSITIVE_INFINITY };
          }
        });
        edgeFn(v3).forEach(function(edge) {
          var w2 = edge.v === v3 ? edge.w : edge.v;
          var d2 = weightFn(edge);
          results[v3][w2] = { distance: d2, predecessor: v3 };
        });
      });
      nodes3.forEach(function(k2) {
        var rowK = results[k2];
        nodes3.forEach(function(i2) {
          var rowI = results[i2];
          nodes3.forEach(function(j2) {
            var ik = rowI[k2];
            var kj = rowK[j2];
            var ij = rowI[j2];
            var altDistance = ik.distance + kj.distance;
            if (altDistance < ij.distance) {
              ij.distance = altDistance;
              ij.predecessor = kj.predecessor;
            }
          });
        });
      });
      return results;
    }
  }
});

// node_modules/graphlib/lib/alg/topsort.js
var require_topsort = __commonJS({
  "node_modules/graphlib/lib/alg/topsort.js"(exports, module) {
    var _2 = require_lodash();
    module.exports = topsort;
    topsort.CycleException = CycleException;
    function topsort(g2) {
      var visited = {};
      var stack = {};
      var results = [];
      function visit(node) {
        if (_2.has(stack, node)) {
          throw new CycleException();
        }
        if (!_2.has(visited, node)) {
          stack[node] = true;
          visited[node] = true;
          _2.each(g2.predecessors(node), visit);
          delete stack[node];
          results.push(node);
        }
      }
      _2.each(g2.sinks(), visit);
      if (_2.size(visited) !== g2.nodeCount()) {
        throw new CycleException();
      }
      return results;
    }
    function CycleException() {
    }
    CycleException.prototype = new Error();
  }
});

// node_modules/graphlib/lib/alg/is-acyclic.js
var require_is_acyclic = __commonJS({
  "node_modules/graphlib/lib/alg/is-acyclic.js"(exports, module) {
    var topsort = require_topsort();
    module.exports = isAcyclic;
    function isAcyclic(g2) {
      try {
        topsort(g2);
      } catch (e) {
        if (e instanceof topsort.CycleException) {
          return false;
        }
        throw e;
      }
      return true;
    }
  }
});

// node_modules/graphlib/lib/alg/dfs.js
var require_dfs = __commonJS({
  "node_modules/graphlib/lib/alg/dfs.js"(exports, module) {
    var _2 = require_lodash();
    module.exports = dfs;
    function dfs(g2, vs2, order) {
      if (!_2.isArray(vs2)) {
        vs2 = [vs2];
      }
      var navigation = (g2.isDirected() ? g2.successors : g2.neighbors).bind(g2);
      var acc = [];
      var visited = {};
      _2.each(vs2, function(v3) {
        if (!g2.hasNode(v3)) {
          throw new Error("Graph does not have node: " + v3);
        }
        doDfs(g2, v3, order === "post", visited, navigation, acc);
      });
      return acc;
    }
    function doDfs(g2, v3, postorder, visited, navigation, acc) {
      if (!_2.has(visited, v3)) {
        visited[v3] = true;
        if (!postorder) {
          acc.push(v3);
        }
        _2.each(navigation(v3), function(w2) {
          doDfs(g2, w2, postorder, visited, navigation, acc);
        });
        if (postorder) {
          acc.push(v3);
        }
      }
    }
  }
});

// node_modules/graphlib/lib/alg/postorder.js
var require_postorder = __commonJS({
  "node_modules/graphlib/lib/alg/postorder.js"(exports, module) {
    var dfs = require_dfs();
    module.exports = postorder;
    function postorder(g2, vs2) {
      return dfs(g2, vs2, "post");
    }
  }
});

// node_modules/graphlib/lib/alg/preorder.js
var require_preorder = __commonJS({
  "node_modules/graphlib/lib/alg/preorder.js"(exports, module) {
    var dfs = require_dfs();
    module.exports = preorder;
    function preorder(g2, vs2) {
      return dfs(g2, vs2, "pre");
    }
  }
});

// node_modules/graphlib/lib/alg/prim.js
var require_prim = __commonJS({
  "node_modules/graphlib/lib/alg/prim.js"(exports, module) {
    var _2 = require_lodash();
    var Graph = require_graph();
    var PriorityQueue2 = require_priority_queue();
    module.exports = prim;
    function prim(g2, weightFunc) {
      var result = new Graph();
      var parents2 = {};
      var pq = new PriorityQueue2();
      var v3;
      function updateNeighbors(edge) {
        var w2 = edge.v === v3 ? edge.w : edge.v;
        var pri = pq.priority(w2);
        if (pri !== void 0) {
          var edgeWeight = weightFunc(edge);
          if (edgeWeight < pri) {
            parents2[w2] = v3;
            pq.decrease(w2, edgeWeight);
          }
        }
      }
      if (g2.nodeCount() === 0) {
        return result;
      }
      _2.each(g2.nodes(), function(v5) {
        pq.add(v5, Number.POSITIVE_INFINITY);
        result.setNode(v5);
      });
      pq.decrease(g2.nodes()[0], 0);
      var init2 = false;
      while (pq.size() > 0) {
        v3 = pq.removeMin();
        if (_2.has(parents2, v3)) {
          result.setEdge(v3, parents2[v3]);
        } else if (init2) {
          throw new Error("Input graph is not connected: " + g2);
        } else {
          init2 = true;
        }
        g2.nodeEdges(v3).forEach(updateNeighbors);
      }
      return result;
    }
  }
});

// node_modules/graphlib/lib/alg/index.js
var require_alg = __commonJS({
  "node_modules/graphlib/lib/alg/index.js"(exports, module) {
    module.exports = {
      components: require_components(),
      dijkstra: require_dijkstra(),
      dijkstraAll: require_dijkstra_all(),
      findCycles: require_find_cycles(),
      floydWarshall: require_floyd_warshall(),
      isAcyclic: require_is_acyclic(),
      postorder: require_postorder(),
      preorder: require_preorder(),
      prim: require_prim(),
      tarjan: require_tarjan(),
      topsort: require_topsort()
    };
  }
});

// node_modules/graphlib/index.js
var require_graphlib = __commonJS({
  "node_modules/graphlib/index.js"(exports, module) {
    var lib = require_lib();
    module.exports = {
      Graph: lib.Graph,
      json: require_json(),
      alg: require_alg(),
      version: lib.version
    };
  }
});

// node_modules/lodash/lodash.js
var require_lodash2 = __commonJS({
  "node_modules/lodash/lodash.js"(exports, module) {
    (function() {
      var undefined2;
      var VERSION = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['’]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        // Latin-1 Supplement block.
        "À": "A",
        "Á": "A",
        "Â": "A",
        "Ã": "A",
        "Ä": "A",
        "Å": "A",
        "à": "a",
        "á": "a",
        "â": "a",
        "ã": "a",
        "ä": "a",
        "å": "a",
        "Ç": "C",
        "ç": "c",
        "Ð": "D",
        "ð": "d",
        "È": "E",
        "É": "E",
        "Ê": "E",
        "Ë": "E",
        "è": "e",
        "é": "e",
        "ê": "e",
        "ë": "e",
        "Ì": "I",
        "Í": "I",
        "Î": "I",
        "Ï": "I",
        "ì": "i",
        "í": "i",
        "î": "i",
        "ï": "i",
        "Ñ": "N",
        "ñ": "n",
        "Ò": "O",
        "Ó": "O",
        "Ô": "O",
        "Õ": "O",
        "Ö": "O",
        "Ø": "O",
        "ò": "o",
        "ó": "o",
        "ô": "o",
        "õ": "o",
        "ö": "o",
        "ø": "o",
        "Ù": "U",
        "Ú": "U",
        "Û": "U",
        "Ü": "U",
        "ù": "u",
        "ú": "u",
        "û": "u",
        "ü": "u",
        "Ý": "Y",
        "ý": "y",
        "ÿ": "y",
        "Æ": "Ae",
        "æ": "ae",
        "Þ": "Th",
        "þ": "th",
        "ß": "ss",
        // Latin Extended-A block.
        "Ā": "A",
        "Ă": "A",
        "Ą": "A",
        "ā": "a",
        "ă": "a",
        "ą": "a",
        "Ć": "C",
        "Ĉ": "C",
        "Ċ": "C",
        "Č": "C",
        "ć": "c",
        "ĉ": "c",
        "ċ": "c",
        "č": "c",
        "Ď": "D",
        "Đ": "D",
        "ď": "d",
        "đ": "d",
        "Ē": "E",
        "Ĕ": "E",
        "Ė": "E",
        "Ę": "E",
        "Ě": "E",
        "ē": "e",
        "ĕ": "e",
        "ė": "e",
        "ę": "e",
        "ě": "e",
        "Ĝ": "G",
        "Ğ": "G",
        "Ġ": "G",
        "Ģ": "G",
        "ĝ": "g",
        "ğ": "g",
        "ġ": "g",
        "ģ": "g",
        "Ĥ": "H",
        "Ħ": "H",
        "ĥ": "h",
        "ħ": "h",
        "Ĩ": "I",
        "Ī": "I",
        "Ĭ": "I",
        "Į": "I",
        "İ": "I",
        "ĩ": "i",
        "ī": "i",
        "ĭ": "i",
        "į": "i",
        "ı": "i",
        "Ĵ": "J",
        "ĵ": "j",
        "Ķ": "K",
        "ķ": "k",
        "ĸ": "k",
        "Ĺ": "L",
        "Ļ": "L",
        "Ľ": "L",
        "Ŀ": "L",
        "Ł": "L",
        "ĺ": "l",
        "ļ": "l",
        "ľ": "l",
        "ŀ": "l",
        "ł": "l",
        "Ń": "N",
        "Ņ": "N",
        "Ň": "N",
        "Ŋ": "N",
        "ń": "n",
        "ņ": "n",
        "ň": "n",
        "ŋ": "n",
        "Ō": "O",
        "Ŏ": "O",
        "Ő": "O",
        "ō": "o",
        "ŏ": "o",
        "ő": "o",
        "Ŕ": "R",
        "Ŗ": "R",
        "Ř": "R",
        "ŕ": "r",
        "ŗ": "r",
        "ř": "r",
        "Ś": "S",
        "Ŝ": "S",
        "Ş": "S",
        "Š": "S",
        "ś": "s",
        "ŝ": "s",
        "ş": "s",
        "š": "s",
        "Ţ": "T",
        "Ť": "T",
        "Ŧ": "T",
        "ţ": "t",
        "ť": "t",
        "ŧ": "t",
        "Ũ": "U",
        "Ū": "U",
        "Ŭ": "U",
        "Ů": "U",
        "Ű": "U",
        "Ų": "U",
        "ũ": "u",
        "ū": "u",
        "ŭ": "u",
        "ů": "u",
        "ű": "u",
        "ų": "u",
        "Ŵ": "W",
        "ŵ": "w",
        "Ŷ": "Y",
        "ŷ": "y",
        "Ÿ": "Y",
        "Ź": "Z",
        "Ż": "Z",
        "Ž": "Z",
        "ź": "z",
        "ż": "z",
        "ž": "z",
        "Ĳ": "IJ",
        "ĳ": "ij",
        "Œ": "Oe",
        "œ": "oe",
        "ŉ": "'n",
        "ſ": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply2(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array3, setter, iteratee, accumulator) {
        var index = -1, length = array3 == null ? 0 : array3.length;
        while (++index < length) {
          var value = array3[index];
          setter(accumulator, value, iteratee(value), array3);
        }
        return accumulator;
      }
      function arrayEach(array3, iteratee) {
        var index = -1, length = array3 == null ? 0 : array3.length;
        while (++index < length) {
          if (iteratee(array3[index], index, array3) === false) {
            break;
          }
        }
        return array3;
      }
      function arrayEachRight(array3, iteratee) {
        var length = array3 == null ? 0 : array3.length;
        while (length--) {
          if (iteratee(array3[length], length, array3) === false) {
            break;
          }
        }
        return array3;
      }
      function arrayEvery(array3, predicate) {
        var index = -1, length = array3 == null ? 0 : array3.length;
        while (++index < length) {
          if (!predicate(array3[index], index, array3)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array3, predicate) {
        var index = -1, length = array3 == null ? 0 : array3.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array3[index];
          if (predicate(value, index, array3)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array3, value) {
        var length = array3 == null ? 0 : array3.length;
        return !!length && baseIndexOf(array3, value, 0) > -1;
      }
      function arrayIncludesWith(array3, value, comparator) {
        var index = -1, length = array3 == null ? 0 : array3.length;
        while (++index < length) {
          if (comparator(value, array3[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array3, iteratee) {
        var index = -1, length = array3 == null ? 0 : array3.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array3[index], index, array3);
        }
        return result;
      }
      function arrayPush(array3, values) {
        var index = -1, length = values.length, offset = array3.length;
        while (++index < length) {
          array3[offset + index] = values[index];
        }
        return array3;
      }
      function arrayReduce(array3, iteratee, accumulator, initAccum) {
        var index = -1, length = array3 == null ? 0 : array3.length;
        if (initAccum && length) {
          accumulator = array3[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array3[index], index, array3);
        }
        return accumulator;
      }
      function arrayReduceRight(array3, iteratee, accumulator, initAccum) {
        var length = array3 == null ? 0 : array3.length;
        if (initAccum && length) {
          accumulator = array3[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array3[length], length, array3);
        }
        return accumulator;
      }
      function arraySome(array3, predicate) {
        var index = -1, length = array3 == null ? 0 : array3.length;
        while (++index < length) {
          if (predicate(array3[index], index, array3)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string3) {
        return string3.split("");
      }
      function asciiWords(string3) {
        return string3.match(reAsciiWord) || [];
      }
      function baseFindKey(collection4, predicate, eachFunc) {
        var result;
        eachFunc(collection4, function(value, key, collection5) {
          if (predicate(value, key, collection5)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array3, predicate, fromIndex, fromRight) {
        var length = array3.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array3[index], index, array3)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array3, value, fromIndex) {
        return value === value ? strictIndexOf(array3, value, fromIndex) : baseFindIndex(array3, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array3, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array3.length;
        while (++index < length) {
          if (comparator(array3[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array3, iteratee) {
        var length = array3 == null ? 0 : array3.length;
        return length ? baseSum(array3, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function(object3) {
          return object3 == null ? undefined2 : object3[key];
        };
      }
      function basePropertyOf(object3) {
        return function(key) {
          return object3 == null ? undefined2 : object3[key];
        };
      }
      function baseReduce(collection4, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection4, function(value, index, collection5) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection5);
        });
        return accumulator;
      }
      function baseSortBy(array3, comparer) {
        var length = array3.length;
        array3.sort(comparer);
        while (length--) {
          array3[length] = array3[length].value;
        }
        return array3;
      }
      function baseSum(array3, iteratee) {
        var result, index = -1, length = array3.length;
        while (++index < length) {
          var current = iteratee(array3[index]);
          if (current !== undefined2) {
            result = result === undefined2 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n2, iteratee) {
        var index = -1, result = Array(n2);
        while (++index < n2) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object3, props) {
        return arrayMap(props, function(key) {
          return [key, object3[key]];
        });
      }
      function baseTrim(string3) {
        return string3 ? string3.slice(0, trimmedEndIndex(string3) + 1).replace(reTrimStart, "") : string3;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object3, props) {
        return arrayMap(props, function(key) {
          return object3[key];
        });
      }
      function cacheHas(cache3, key) {
        return cache3.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function countHolders(array3, placeholder) {
        var length = array3.length, result = 0;
        while (length--) {
          if (array3[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue2(object3, key) {
        return object3 == null ? undefined2 : object3[key];
      }
      function hasUnicode(string3) {
        return reHasUnicode.test(string3);
      }
      function hasUnicodeWord(string3) {
        return reHasUnicodeWord.test(string3);
      }
      function iteratorToArray(iterator) {
        var data4, result = [];
        while (!(data4 = iterator.next()).done) {
          result.push(data4.value);
        }
        return result;
      }
      function mapToArray(map2) {
        var index = -1, result = Array(map2.size);
        map2.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg(func, transform8) {
        return function(arg) {
          return func(transform8(arg));
        };
      }
      function replaceHolders(array3, placeholder) {
        var index = -1, length = array3.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array3[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array3[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set2) {
        var index = -1, result = Array(set2.size);
        set2.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set2) {
        var index = -1, result = Array(set2.size);
        set2.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array3, value, fromIndex) {
        var index = fromIndex - 1, length = array3.length;
        while (++index < length) {
          if (array3[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array3, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array3[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string3) {
        return hasUnicode(string3) ? unicodeSize(string3) : asciiSize(string3);
      }
      function stringToArray(string3) {
        return hasUnicode(string3) ? unicodeToArray(string3) : asciiToArray(string3);
      }
      function trimmedEndIndex(string3) {
        var index = string3.length;
        while (index-- && reWhitespace.test(string3.charAt(index))) {
        }
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string3) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string3)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string3) {
        return string3.match(reUnicode) || [];
      }
      function unicodeWords(string3) {
        return string3.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root : _2.defaults(root.Object(), context, _2.pick(root, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2(
          "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
        );
        var Buffer = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
        var defineProperty = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = /* @__PURE__ */ function() {
          function object3() {
          }
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object3.prototype = proto;
            var result2 = new object3();
            object3.prototype = undefined2;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "escape": reEscape,
          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "evaluate": reEvaluate,
          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "interpolate": reInterpolate,
          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          "variable": "",
          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          "imports": {
            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            "_": lodash
          }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray3(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray3(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray3(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array3 = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array3), isRight = dir < 0, arrLength = isArr ? array3.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array3, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index += dir;
              var iterIndex = -1, value = array3[index];
              while (++iterIndex < iterLength) {
                var data4 = iteratees[iterIndex], iteratee2 = data4.iteratee, type2 = data4.type, computed = iteratee2(value);
                if (type2 == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type2 == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data4 = this.__data__;
          if (nativeCreate) {
            var result2 = data4[key];
            return result2 === HASH_UNDEFINED ? undefined2 : result2;
          }
          return hasOwnProperty.call(data4, key) ? data4[key] : undefined2;
        }
        function hashHas(key) {
          var data4 = this.__data__;
          return nativeCreate ? data4[key] !== undefined2 : hasOwnProperty.call(data4, key);
        }
        function hashSet(key, value) {
          var data4 = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data4[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data4 = this.__data__, index = assocIndexOf(data4, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data4.length - 1;
          if (index == lastIndex) {
            data4.pop();
          } else {
            splice.call(data4, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data4 = this.__data__, index = assocIndexOf(data4, key);
          return index < 0 ? undefined2 : data4[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data4 = this.__data__, index = assocIndexOf(data4, key);
          if (index < 0) {
            ++this.size;
            data4.push([key, value]);
          } else {
            data4[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data4 = getMapData(this, key), size4 = data4.size;
          data4.set(key, value);
          this.size += data4.size == size4 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data4 = this.__data__ = new ListCache(entries);
          this.size = data4.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data4 = this.__data__, result2 = data4["delete"](key);
          this.size = data4.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data4 = this.__data__;
          if (data4 instanceof ListCache) {
            var pairs = data4.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data4.size;
              return this;
            }
            data4 = this.__data__ = new MapCache(pairs);
          }
          data4.set(key, value);
          this.size = data4.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
            isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array3) {
          var length = array3.length;
          return length ? array3[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array3, n2) {
          return shuffleSelf(copyArray3(array3), baseClamp(n2, 0, array3.length));
        }
        function arrayShuffle(array3) {
          return shuffleSelf(copyArray3(array3));
        }
        function assignMergeValue(object3, key, value) {
          if (value !== undefined2 && !eq2(object3[key], value) || value === undefined2 && !(key in object3)) {
            baseAssignValue(object3, key, value);
          }
        }
        function assignValue(object3, key, value) {
          var objValue = object3[key];
          if (!(hasOwnProperty.call(object3, key) && eq2(objValue, value)) || value === undefined2 && !(key in object3)) {
            baseAssignValue(object3, key, value);
          }
        }
        function assocIndexOf(array3, key) {
          var length = array3.length;
          while (length--) {
            if (eq2(array3[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection4, setter, iteratee2, accumulator) {
          baseEach(collection4, function(value, key, collection5) {
            setter(accumulator, value, iteratee2(value), collection5);
          });
          return accumulator;
        }
        function baseAssign(object3, source) {
          return object3 && copyObject(source, keys2(source), object3);
        }
        function baseAssignIn(object3, source) {
          return object3 && copyObject(source, keysIn(source), object3);
        }
        function baseAssignValue(object3, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object3, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object3[key] = value;
          }
        }
        function baseAt(object3, paths) {
          var index = -1, length = paths.length, result2 = Array2(length), skip = object3 == null;
          while (++index < length) {
            result2[index] = skip ? undefined2 : get2(object3, paths[index]);
          }
          return result2;
        }
        function baseClamp(number3, lower, upper) {
          if (number3 === number3) {
            if (upper !== undefined2) {
              number3 = number3 <= upper ? number3 : upper;
            }
            if (lower !== undefined2) {
              number3 = number3 >= lower ? number3 : lower;
            }
          }
          return number3;
        }
        function baseClone(value, bitmask, customizer, key, object3, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object3 ? customizer(value, key, object3, stack) : customizer(value);
          }
          if (result2 !== undefined2) {
            return result2;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray3(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object3) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object3 ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys2;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys2(source);
          return function(object3) {
            return baseConformsTo(object3, source, props);
          };
        }
        function baseConformsTo(object3, source, props) {
          var length = props.length;
          if (object3 == null) {
            return !length;
          }
          object3 = Object2(object3);
          while (length--) {
            var key = props[length], predicate = source[key], value = object3[key];
            if (value === undefined2 && !(key in object3) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function() {
            func.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array3, values2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, isCommon = true, length = array3.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index < length) {
              var value = array3[index], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection4, predicate) {
          var result2 = true;
          baseEach(collection4, function(value, index, collection5) {
            result2 = !!predicate(value, index, collection5);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array3, iteratee2, comparator) {
          var index = -1, length = array3.length;
          while (++index < length) {
            var value = array3[index], current = iteratee2(value);
            if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array3, value, start, end) {
          var length = array3.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined2 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array3[start++] = value;
          }
          return array3;
        }
        function baseFilter(collection4, predicate) {
          var result2 = [];
          baseEach(collection4, function(value, index, collection5) {
            if (predicate(value, index, collection5)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array3, depth, predicate, isStrict, result2) {
          var index = -1, length = array3.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array3[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object3, iteratee2) {
          return object3 && baseFor(object3, iteratee2, keys2);
        }
        function baseForOwnRight(object3, iteratee2) {
          return object3 && baseForRight(object3, iteratee2, keys2);
        }
        function baseFunctions(object3, props) {
          return arrayFilter(props, function(key) {
            return isFunction2(object3[key]);
          });
        }
        function baseGet(object3, path) {
          path = castPath(path, object3);
          var index = 0, length = path.length;
          while (object3 != null && index < length) {
            object3 = object3[toKey(path[index++])];
          }
          return index && index == length ? object3 : undefined2;
        }
        function baseGetAllKeys(object3, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object3);
          return isArray(object3) ? result2 : arrayPush(result2, symbolsFunc(object3));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object3, key) {
          return object3 != null && hasOwnProperty.call(object3, key);
        }
        function baseHasIn(object3, key) {
          return object3 != null && key in Object2(object3);
        }
        function baseInRange(number3, start, end) {
          return number3 >= nativeMin(start, end) && number3 < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array3 = arrays[othIndex];
            if (othIndex && iteratee2) {
              array3 = arrayMap(array3, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array3.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array3.length >= 120) ? new SetCache(othIndex && array3) : undefined2;
          }
          array3 = arrays[0];
          var index = -1, seen = caches[0];
          outer:
            while (++index < length && result2.length < maxLength) {
              var value = array3[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache3 = caches[othIndex];
                  if (!(cache3 ? cacheHas(cache3, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object3, setter, iteratee2, accumulator) {
          baseForOwn(object3, function(value, key, object4) {
            setter(accumulator, iteratee2(value), key, object4);
          });
          return accumulator;
        }
        function baseInvoke(object3, path, args) {
          path = castPath(path, object3);
          object3 = parent4(object3, path);
          var func = object3 == null ? object3 : object3[toKey(last2(path))];
          return func == null ? undefined2 : apply2(func, object3, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object3, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object3), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object3), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object3)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object3) ? equalArrays(object3, other, bitmask, customizer, equalFunc, stack) : equalByTag(object3, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object3, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object3.value() : object3, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(object3, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object3, source, matchData, customizer) {
          var index = matchData.length, length = index, noCustomizer = !customizer;
          if (object3 == null) {
            return !length;
          }
          object3 = Object2(object3);
          while (index--) {
            var data4 = matchData[index];
            if (noCustomizer && data4[2] ? data4[1] !== object3[data4[0]] : !(data4[0] in object3)) {
              return false;
            }
          }
          while (++index < length) {
            data4 = matchData[index];
            var key = data4[0], objValue = object3[key], srcValue = data4[1];
            if (noCustomizer && data4[2]) {
              if (objValue === undefined2 && !(key in object3)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object3, source, stack);
              }
              if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity3;
          }
          if (typeof value == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object3) {
          if (!isPrototype(object3)) {
            return nativeKeys(object3);
          }
          var result2 = [];
          for (var key in Object2(object3)) {
            if (hasOwnProperty.call(object3, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object3) {
          if (!isObject(object3)) {
            return nativeKeysIn(object3);
          }
          var isProto = isPrototype(object3), result2 = [];
          for (var key in object3) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object3, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection4, iteratee2) {
          var index = -1, result2 = isArrayLike(collection4) ? Array2(collection4.length) : [];
          baseEach(collection4, function(value, key, collection5) {
            result2[++index] = iteratee2(value, key, collection5);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object3) {
            return object3 === source || baseIsMatch(object3, source, matchData);
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object3) {
            var objValue = get2(object3, path);
            return objValue === undefined2 && objValue === srcValue ? hasIn(object3, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object3, source, srcIndex, customizer, stack) {
          if (object3 === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack());
            if (isObject(srcValue)) {
              baseMergeDeep(object3, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object3, key), srcValue, key + "", object3, source, stack) : undefined2;
              if (newValue === undefined2) {
                newValue = srcValue;
              }
              assignMergeValue(object3, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object3, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object3, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object3, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object3, source, stack) : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray3(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject3(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject(objValue) || isFunction2(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object3, key, newValue);
        }
        function baseNth(array3, n2) {
          var length = array3.length;
          if (!length) {
            return;
          }
          n2 += n2 < 0 ? length : 0;
          return isIndex(n2, length) ? array3[n2] : undefined2;
        }
        function baseOrderBy(collection4, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity3];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection4, function(value, key, collection5) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index, "value": value };
          });
          return baseSortBy(result2, function(object3, other) {
            return compareMultiple(object3, other, orders);
          });
        }
        function basePick(object3, paths) {
          return basePickBy(object3, paths, function(value, path) {
            return hasIn(object3, path);
          });
        }
        function basePickBy(object3, paths, predicate) {
          var index = -1, length = paths.length, result2 = {};
          while (++index < length) {
            var path = paths[index], value = baseGet(object3, path);
            if (predicate(value, path)) {
              baseSet(result2, castPath(path, object3), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path) {
          return function(object3) {
            return baseGet(object3, path);
          };
        }
        function basePullAll(array3, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array3;
          if (array3 === values2) {
            values2 = copyArray3(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array3, baseUnary(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array3) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array3, fromIndex, 1);
            }
          }
          return array3;
        }
        function basePullAt(array3, indexes) {
          var length = array3 ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array3, index, 1);
              } else {
                baseUnset(array3, index);
              }
            }
          }
          return array3;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step3, fromRight) {
          var index = -1, length = nativeMax(nativeCeil((end - start) / (step3 || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start;
            start += step3;
          }
          return result2;
        }
        function baseRepeat(string3, n2) {
          var result2 = "";
          if (!string3 || n2 < 1 || n2 > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n2 % 2) {
              result2 += string3;
            }
            n2 = nativeFloor(n2 / 2);
            if (n2) {
              string3 += string3;
            }
          } while (n2);
          return result2;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity3), func + "");
        }
        function baseSample(collection4) {
          return arraySample(values(collection4));
        }
        function baseSampleSize(collection4, n2) {
          var array3 = values(collection4);
          return shuffleSelf(array3, baseClamp(n2, 0, array3.length));
        }
        function baseSet(object3, path, value, customizer) {
          if (!isObject(object3)) {
            return object3;
          }
          path = castPath(path, object3);
          var index = -1, length = path.length, lastIndex = length - 1, nested = object3;
          while (nested != null && ++index < length) {
            var key = toKey(path[index]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object3;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined2;
              if (newValue === undefined2) {
                newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object3;
        }
        var baseSetData = !metaMap ? identity3 : function(func, data4) {
          metaMap.set(func, data4);
          return func;
        };
        var baseSetToString = !defineProperty ? identity3 : function(func, string3) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string3),
            "writable": true
          });
        };
        function baseShuffle(collection4) {
          return shuffleSelf(values(collection4));
        }
        function baseSlice(array3, start, end) {
          var index = -1, length = array3.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array3[index + start];
          }
          return result2;
        }
        function baseSome(collection4, predicate) {
          var result2;
          baseEach(collection4, function(value, index, collection5) {
            result2 = predicate(value, index, collection5);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array3, value, retHighest) {
          var low = 0, high = array3 == null ? low : array3.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array3[mid];
              if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array3, value, identity3, retHighest);
        }
        function baseSortedIndexBy(array3, value, iteratee2, retHighest) {
          var low = 0, high = array3 == null ? 0 : array3.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array3[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array3, iteratee2) {
          var index = -1, length = array3.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array3[index], computed = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq2(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array3, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, length = array3.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set3 = iteratee2 ? null : createSet(array3);
            if (set3) {
              return setToArray(set3);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index < length) {
              var value = array3[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object3, path) {
          path = castPath(path, object3);
          object3 = parent4(object3, path);
          return object3 == null || delete object3[toKey(last2(path))];
        }
        function baseUpdate(object3, path, updater, customizer) {
          return baseSet(object3, path, updater(baseGet(object3, path)), customizer);
        }
        function baseWhile(array3, predicate, isDrop, fromRight) {
          var length = array3.length, index = fromRight ? length : -1;
          while ((fromRight ? index-- : ++index < length) && predicate(array3[index], index, array3)) {
          }
          return isDrop ? baseSlice(array3, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array3, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1, result2 = Array2(length);
          while (++index < length) {
            var array3 = arrays[index], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(result2[index] || array3, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined2;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity3;
        }
        function castPath(value, object3) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object3) ? [value] : stringToPath(toString3(value));
        }
        var castRest = baseRest;
        function castSlice(array3, start, end) {
          var length = array3.length;
          end = end === undefined2 ? length : end;
          return !start && end >= length ? array3 : baseSlice(array3, start, end);
        }
        var clearTimeout2 = ctxClearTimeout || function(id2) {
          return root.clearTimeout(id2);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object3, other, orders) {
          var index = -1, objCriteria = object3.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(objCriteria[index], othCriteria[index]);
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object3.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray3(source, array3) {
          var index = -1, length = source.length;
          array3 || (array3 = Array2(length));
          while (++index < length) {
            array3[index] = source[index];
          }
          return array3;
        }
        function copyObject(source, props, object3, customizer) {
          var isNew = !object3;
          object3 || (object3 = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object3[key], source[key], key, object3, source) : undefined2;
            if (newValue === undefined2) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object3, key, newValue);
            } else {
              assignValue(object3, key, newValue);
            }
          }
          return object3;
        }
        function copySymbols(source, object3) {
          return copyObject(source, getSymbols(source), object3);
        }
        function copySymbolsIn(source, object3) {
          return copyObject(source, getSymbolsIn(source), object3);
        }
        function createAggregator(setter, initializer) {
          return function(collection4, iteratee2) {
            var func = isArray(collection4) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection4, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object3, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object3 = Object2(object3);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object3, source, index, customizer);
              }
            }
            return object3;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection4, iteratee2) {
            if (collection4 == null) {
              return collection4;
            }
            if (!isArrayLike(collection4)) {
              return eachFunc(collection4, iteratee2);
            }
            var length = collection4.length, index = fromRight ? length : -1, iterable = Object2(collection4);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection4;
          };
        }
        function createBaseFor(fromRight) {
          return function(object3, iteratee2, keysFunc) {
            var index = -1, iterable = Object2(object3), props = keysFunc(object3), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object3;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn4 = this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn4.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string3) {
            string3 = toString3(string3);
            var strSymbols = hasUnicode(string3) ? stringToArray(string3) : undefined2;
            var chr = strSymbols ? strSymbols[0] : string3.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string3.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string3) {
            return arrayReduce(words(deburr(string3).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                undefined2,
                args,
                holders,
                undefined2,
                undefined2,
                arity - length
              );
            }
            var fn4 = this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply2(fn4, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection4, predicate, fromIndex) {
            var iterable = Object2(collection4);
            if (!isArrayLike(collection4)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection4 = keys2(collection4);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection4, predicate, fromIndex);
            return index > -1 ? iterable[iteratee2 ? collection4[index] : index] : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func), data4 = funcName == "wrapper" ? getData(func) : undefined2;
              if (data4 && isLaziable(data4[0]) && data4[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data4[4].length && data4[9] == 1) {
                wrapper = wrapper[getFuncName(data4[0])].apply(wrapper, data4[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                thisArg,
                args,
                newHolders,
                argPos,
                ary2,
                arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this, fn4 = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn4 = Ctor || createCtor(fn4);
            }
            return fn4.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object3, iteratee2) {
            return baseInverter(object3, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result2 = value;
            }
            if (other !== undefined2) {
              if (result2 === undefined2) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply2(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined2 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn4 = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply2(fn4, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end, step3) {
            if (step3 && typeof step3 != "number" && isIterateeCall(start, end, step3)) {
              end = step3 = undefined2;
            }
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step3 = step3 === undefined2 ? start < end ? 1 : -1 : toFinite(step3);
            return baseRange(start, end, step3, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number3, precision) {
            number3 = toNumber(number3);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number3)) {
              var pair = (toString3(number3) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString3(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number3);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop4 : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object3) {
            var tag = getTag(object3);
            if (tag == mapTag) {
              return mapToArray(object3);
            }
            if (tag == setTag) {
              return setToPairs(object3);
            }
            return baseToPairs(object3, keysFunc(object3));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined2;
          }
          var data4 = isBindKey ? undefined2 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data4) {
            mergeData(newData, data4);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined2, newData);
          }
          var setter = data4 ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object3) {
          if (objValue === undefined2 || eq2(objValue, objectProto[key]) && !hasOwnProperty.call(object3, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object3, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject3(value) ? undefined2 : value;
        }
        function equalArrays(array3, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array3.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array3);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array3;
          }
          var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array3, other);
          stack.set(other, array3);
          while (++index < arrLength) {
            var arrValue = array3[index], othValue = other[index];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index, other, array3, stack) : customizer(arrValue, othValue, index, array3, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array3);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object3, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object3.byteLength != other.byteLength || object3.byteOffset != other.byteOffset) {
                return false;
              }
              object3 = object3.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object3.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object3), new Uint8Array2(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq2(+object3, +other);
            case errorTag:
              return object3.name == other.name && object3.message == other.message;
            case regexpTag:
            case stringTag:
              return object3 == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object3.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object3);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object3, other);
              var result2 = equalArrays(convert(object3), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object3);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object3) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object3, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object3), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object3);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object3;
          }
          var result2 = true;
          stack.set(object3, other);
          stack.set(other, object3);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object3[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object3, stack) : customizer(objValue, othValue, key, object3, other, stack);
            }
            if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object3.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object3 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object3);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined2, flatten), func + "");
        }
        function getAllKeys(object3) {
          return baseGetAllKeys(object3, keys2, getSymbols);
        }
        function getAllKeysIn(object3) {
          return baseGetAllKeys(object3, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop4 : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array3 = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array3.length : 0;
          while (length--) {
            var data4 = array3[length], otherFunc = data4.func;
            if (otherFunc == null || otherFunc == func) {
              return data4.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object3 = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
          return object3.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map3, key) {
          var data4 = map3.__data__;
          return isKeyable(key) ? data4[typeof key == "string" ? "string" : "hash"] : data4.map;
        }
        function getMatchData(object3) {
          var result2 = keys2(object3), length = result2.length;
          while (length--) {
            var key = result2[length], value = object3[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object3, key) {
          var value = getValue2(object3, key);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined2;
            var unmasked = true;
          } catch (e) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object3) {
          if (object3 == null) {
            return [];
          }
          object3 = Object2(object3);
          return arrayFilter(nativeGetSymbols(object3), function(symbol) {
            return propertyIsEnumerable.call(object3, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object3) {
          var result2 = [];
          while (object3) {
            arrayPush(result2, getSymbols(object3));
            object3 = getPrototype(object3);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index = -1, length = transforms.length;
          while (++index < length) {
            var data4 = transforms[index], size4 = data4.size;
            switch (data4.type) {
              case "drop":
                start += size4;
                break;
              case "dropRight":
                end -= size4;
                break;
              case "take":
                end = nativeMin(end, start + size4);
                break;
              case "takeRight":
                start = nativeMax(start, end - size4);
                break;
            }
          }
          return { "start": start, "end": end };
        }
        function getWrapDetails(source) {
          var match2 = source.match(reWrapDetails);
          return match2 ? match2[1].split(reSplitDetails) : [];
        }
        function hasPath(object3, path, hasFunc) {
          path = castPath(path, object3);
          var index = -1, length = path.length, result2 = false;
          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result2 = object3 != null && hasFunc(object3, key))) {
              break;
            }
            object3 = object3[key];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object3 == null ? 0 : object3.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray(object3) || isArguments(object3));
        }
        function initCloneArray(array3) {
          var length = array3.length, result2 = new array3.constructor(length);
          if (length && typeof array3[0] == "string" && hasOwnProperty.call(array3, "index")) {
            result2.index = array3.index;
            result2.input = array3.input;
          }
          return result2;
        }
        function initCloneObject(object3) {
          return typeof object3.constructor == "function" && !isPrototype(object3) ? baseCreate(getPrototype(object3)) : {};
        }
        function initCloneByTag(object3, tag, isDeep) {
          var Ctor = object3.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object3);
            case boolTag:
            case dateTag:
              return new Ctor(+object3);
            case dataViewTag:
              return cloneDataView(object3, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object3, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object3);
            case regexpTag:
              return cloneRegExp(object3);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object3);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type2 = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type2 == "number" || type2 != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index, object3) {
          if (!isObject(object3)) {
            return false;
          }
          var type2 = typeof index;
          if (type2 == "number" ? isArrayLike(object3) && isIndex(index, object3.length) : type2 == "string" && index in object3) {
            return eq2(object3[index], value);
          }
          return false;
        }
        function isKey(value, object3) {
          if (isArray(value)) {
            return false;
          }
          var type2 = typeof value;
          if (type2 == "number" || type2 == "symbol" || type2 == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object3 != null && value in Object2(object3);
        }
        function isKeyable(value) {
          var type2 = typeof value;
          return type2 == "string" || type2 == "number" || type2 == "symbol" || type2 == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data4 = getData(other);
          return !!data4 && func === data4[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction2 : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object3) {
            if (object3 == null) {
              return false;
            }
            return object3[key] === srcValue && (srcValue !== undefined2 || key in Object2(object3));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize3(func, function(key) {
            if (cache3.size === MAX_MEMOIZE_SIZE) {
              cache3.clear();
            }
            return key;
          });
          var cache3 = result2.cache;
          return result2;
        }
        function mergeData(data4, source) {
          var bitmask = data4[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data4[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data4;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data4[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data4[3];
            data4[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data4[4] = partials ? replaceHolders(data4[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data4[5];
            data4[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data4[6] = partials ? replaceHolders(data4[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data4[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data4[8] = data4[8] == null ? source[8] : nativeMin(data4[8], source[8]);
          }
          if (data4[9] == null) {
            data4[9] = source[9];
          }
          data4[0] = source[0];
          data4[1] = newBitmask;
          return data4;
        }
        function nativeKeysIn(object3) {
          var result2 = [];
          if (object3 != null) {
            for (var key in Object2(object3)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform9) {
          start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array3 = Array2(length);
            while (++index < length) {
              array3[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform9(array3);
            return apply2(func, this, otherArgs);
          };
        }
        function parent4(object3, path) {
          return path.length < 2 ? object3 : baseGet(object3, baseSlice(path, 0, -1));
        }
        function reorder(array3, indexes) {
          var arrLength = array3.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray3(array3);
          while (length--) {
            var index = indexes[length];
            array3[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
          }
          return array3;
        }
        function safeGet(object3, key) {
          if (key === "constructor" && typeof object3[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object3[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array3, size4) {
          var index = -1, length = array3.length, lastIndex = length - 1;
          size4 = size4 === undefined2 ? length : size4;
          while (++index < size4) {
            var rand = baseRandom(index, lastIndex), value = array3[rand];
            array3[rand] = array3[index];
            array3[index] = value;
          }
          array3.length = size4;
          return array3;
        }
        var stringToPath = memoizeCapped(function(string3) {
          var result2 = [];
          if (string3.charCodeAt(0) === 46) {
            result2.push("");
          }
          string3.replace(rePropName, function(match2, number3, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number3 || match2);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray3(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array3, size4, guard) {
          if (guard ? isIterateeCall(array3, size4, guard) : size4 === undefined2) {
            size4 = 1;
          } else {
            size4 = nativeMax(toInteger(size4), 0);
          }
          var length = array3 == null ? 0 : array3.length;
          if (!length || size4 < 1) {
            return [];
          }
          var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size4));
          while (index < length) {
            result2[resIndex++] = baseSlice(array3, index, index += size4);
          }
          return result2;
        }
        function compact(array3) {
          var index = -1, length = array3 == null ? 0 : array3.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array3[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array3 = arguments[0], index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array3) ? copyArray3(array3) : [array3], baseFlatten(args, 1));
        }
        var difference2 = baseRest(function(array3, values2) {
          return isArrayLikeObject(array3) ? baseDifference(array3, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array3, values2) {
          var iteratee2 = last2(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return isArrayLikeObject(array3) ? baseDifference(array3, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array3, values2) {
          var comparator = last2(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array3) ? baseDifference(array3, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
        });
        function drop(array3, n2, guard) {
          var length = array3 == null ? 0 : array3.length;
          if (!length) {
            return [];
          }
          n2 = guard || n2 === undefined2 ? 1 : toInteger(n2);
          return baseSlice(array3, n2 < 0 ? 0 : n2, length);
        }
        function dropRight(array3, n2, guard) {
          var length = array3 == null ? 0 : array3.length;
          if (!length) {
            return [];
          }
          n2 = guard || n2 === undefined2 ? 1 : toInteger(n2);
          n2 = length - n2;
          return baseSlice(array3, 0, n2 < 0 ? 0 : n2);
        }
        function dropRightWhile(array3, predicate) {
          return array3 && array3.length ? baseWhile(array3, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array3, predicate) {
          return array3 && array3.length ? baseWhile(array3, getIteratee(predicate, 3), true) : [];
        }
        function fill(array3, value, start, end) {
          var length = array3 == null ? 0 : array3.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != "number" && isIterateeCall(array3, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array3, value, start, end);
        }
        function findIndex(array3, predicate, fromIndex) {
          var length = array3 == null ? 0 : array3.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array3, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array3, predicate, fromIndex) {
          var length = array3 == null ? 0 : array3.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return baseFindIndex(array3, getIteratee(predicate, 3), index, true);
        }
        function flatten(array3) {
          var length = array3 == null ? 0 : array3.length;
          return length ? baseFlatten(array3, 1) : [];
        }
        function flattenDeep(array3) {
          var length = array3 == null ? 0 : array3.length;
          return length ? baseFlatten(array3, INFINITY) : [];
        }
        function flattenDepth(array3, depth) {
          var length = array3 == null ? 0 : array3.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array3, depth);
        }
        function fromPairs(pairs) {
          var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array3) {
          return array3 && array3.length ? array3[0] : undefined2;
        }
        function indexOf(array3, value, fromIndex) {
          var length = array3 == null ? 0 : array3.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array3, value, index);
        }
        function initial(array3) {
          var length = array3 == null ? 0 : array3.length;
          return length ? baseSlice(array3, 0, -1) : [];
        }
        var intersection2 = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last2(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last2(mapped)) {
            iteratee2 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last2(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
        });
        function join(array3, separator) {
          return array3 == null ? "" : nativeJoin.call(array3, separator);
        }
        function last2(array3) {
          var length = array3 == null ? 0 : array3.length;
          return length ? array3[length - 1] : undefined2;
        }
        function lastIndexOf(array3, value, fromIndex) {
          var length = array3 == null ? 0 : array3.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value ? strictLastIndexOf(array3, value, index) : baseFindIndex(array3, baseIsNaN, index, true);
        }
        function nth(array3, n2) {
          return array3 && array3.length ? baseNth(array3, toInteger(n2)) : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array3, values2) {
          return array3 && array3.length && values2 && values2.length ? basePullAll(array3, values2) : array3;
        }
        function pullAllBy(array3, values2, iteratee2) {
          return array3 && array3.length && values2 && values2.length ? basePullAll(array3, values2, getIteratee(iteratee2, 2)) : array3;
        }
        function pullAllWith(array3, values2, comparator) {
          return array3 && array3.length && values2 && values2.length ? basePullAll(array3, values2, undefined2, comparator) : array3;
        }
        var pullAt = flatRest(function(array3, indexes) {
          var length = array3 == null ? 0 : array3.length, result2 = baseAt(array3, indexes);
          basePullAt(array3, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));
          return result2;
        });
        function remove2(array3, predicate) {
          var result2 = [];
          if (!(array3 && array3.length)) {
            return result2;
          }
          var index = -1, indexes = [], length = array3.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array3[index];
            if (predicate(value, index, array3)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array3, indexes);
          return result2;
        }
        function reverse2(array3) {
          return array3 == null ? array3 : nativeReverse.call(array3);
        }
        function slice2(array3, start, end) {
          var length = array3 == null ? 0 : array3.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array3, start, end)) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined2 ? length : toInteger(end);
          }
          return baseSlice(array3, start, end);
        }
        function sortedIndex(array3, value) {
          return baseSortedIndex(array3, value);
        }
        function sortedIndexBy(array3, value, iteratee2) {
          return baseSortedIndexBy(array3, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array3, value) {
          var length = array3 == null ? 0 : array3.length;
          if (length) {
            var index = baseSortedIndex(array3, value);
            if (index < length && eq2(array3[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array3, value) {
          return baseSortedIndex(array3, value, true);
        }
        function sortedLastIndexBy(array3, value, iteratee2) {
          return baseSortedIndexBy(array3, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array3, value) {
          var length = array3 == null ? 0 : array3.length;
          if (length) {
            var index = baseSortedIndex(array3, value, true) - 1;
            if (eq2(array3[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array3) {
          return array3 && array3.length ? baseSortedUniq(array3) : [];
        }
        function sortedUniqBy(array3, iteratee2) {
          return array3 && array3.length ? baseSortedUniq(array3, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array3) {
          var length = array3 == null ? 0 : array3.length;
          return length ? baseSlice(array3, 1, length) : [];
        }
        function take(array3, n2, guard) {
          if (!(array3 && array3.length)) {
            return [];
          }
          n2 = guard || n2 === undefined2 ? 1 : toInteger(n2);
          return baseSlice(array3, 0, n2 < 0 ? 0 : n2);
        }
        function takeRight(array3, n2, guard) {
          var length = array3 == null ? 0 : array3.length;
          if (!length) {
            return [];
          }
          n2 = guard || n2 === undefined2 ? 1 : toInteger(n2);
          n2 = length - n2;
          return baseSlice(array3, n2 < 0 ? 0 : n2, length);
        }
        function takeRightWhile(array3, predicate) {
          return array3 && array3.length ? baseWhile(array3, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array3, predicate) {
          return array3 && array3.length ? baseWhile(array3, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last2(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last2(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
        });
        function uniq(array3) {
          return array3 && array3.length ? baseUniq(array3) : [];
        }
        function uniqBy(array3, iteratee2) {
          return array3 && array3.length ? baseUniq(array3, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array3, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return array3 && array3.length ? baseUniq(array3, undefined2, comparator) : [];
        }
        function unzip(array3) {
          if (!(array3 && array3.length)) {
            return [];
          }
          var length = 0;
          array3 = arrayFilter(array3, function(group2) {
            if (isArrayLikeObject(group2)) {
              length = nativeMax(group2.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array3, baseProperty(index));
          });
        }
        function unzipWith(array3, iteratee2) {
          if (!(array3 && array3.length)) {
            return [];
          }
          var result2 = unzip(array3);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group2) {
            return apply2(iteratee2, undefined2, group2);
          });
        }
        var without = baseRest(function(array3, values2) {
          return isArrayLikeObject(array3) ? baseDifference(array3, values2) : [];
        });
        var xor2 = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last2(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last2(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object3) {
            return baseAt(object3, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined2
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array3) {
            if (length && !array3.length) {
              array3.push(undefined2);
            }
            return array3;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray2(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent5 = this;
          while (parent5 instanceof baseLodash) {
            var clone4 = wrapperClone(parent5);
            clone4.__index__ = 0;
            clone4.__values__ = undefined2;
            if (result2) {
              previous.__wrapped__ = clone4;
            } else {
              result2 = clone4;
            }
            var previous = clone4;
            parent5 = parent5.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse2],
              "thisArg": undefined2
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse2);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every2(collection4, predicate, guard) {
          var func = isArray(collection4) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection4, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection4, getIteratee(predicate, 3));
        }
        function filter4(collection4, predicate) {
          var func = isArray(collection4) ? arrayFilter : baseFilter;
          return func(collection4, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection4, iteratee2) {
          return baseFlatten(map2(collection4, iteratee2), 1);
        }
        function flatMapDeep(collection4, iteratee2) {
          return baseFlatten(map2(collection4, iteratee2), INFINITY);
        }
        function flatMapDepth(collection4, iteratee2, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map2(collection4, iteratee2), depth);
        }
        function forEach2(collection4, iteratee2) {
          var func = isArray(collection4) ? arrayEach : baseEach;
          return func(collection4, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection4, iteratee2) {
          var func = isArray(collection4) ? arrayEachRight : baseEachRight;
          return func(collection4, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection4, value, fromIndex, guard) {
          collection4 = isArrayLike(collection4) ? collection4 : values(collection4);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection4.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString2(collection4) ? fromIndex <= length && collection4.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection4, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection4, path, args) {
          var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection4) ? Array2(collection4.length) : [];
          baseEach(collection4, function(value) {
            result2[++index] = isFunc ? apply2(path, value, args) : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy2 = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map2(collection4, iteratee2) {
          var func = isArray(collection4) ? arrayMap : baseMap;
          return func(collection4, getIteratee(iteratee2, 3));
        }
        function orderBy(collection4, iteratees, orders, guard) {
          if (collection4 == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection4, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce2(collection4, iteratee2, accumulator) {
          var func = isArray(collection4) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection4, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection4, iteratee2, accumulator) {
          var func = isArray(collection4) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection4, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject2(collection4, predicate) {
          var func = isArray(collection4) ? arrayFilter : baseFilter;
          return func(collection4, negate(getIteratee(predicate, 3)));
        }
        function sample(collection4) {
          var func = isArray(collection4) ? arraySample : baseSample;
          return func(collection4);
        }
        function sampleSize(collection4, n2, guard) {
          if (guard ? isIterateeCall(collection4, n2, guard) : n2 === undefined2) {
            n2 = 1;
          } else {
            n2 = toInteger(n2);
          }
          var func = isArray(collection4) ? arraySampleSize : baseSampleSize;
          return func(collection4, n2);
        }
        function shuffle(collection4) {
          var func = isArray(collection4) ? arrayShuffle : baseShuffle;
          return func(collection4);
        }
        function size3(collection4) {
          if (collection4 == null) {
            return 0;
          }
          if (isArrayLike(collection4)) {
            return isString2(collection4) ? stringSize(collection4) : collection4.length;
          }
          var tag = getTag(collection4);
          if (tag == mapTag || tag == setTag) {
            return collection4.size;
          }
          return baseKeys(collection4).length;
        }
        function some2(collection4, predicate, guard) {
          var func = isArray(collection4) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection4, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection4, getIteratee(predicate, 3));
        }
        var sortBy2 = baseRest(function(collection4, iteratees) {
          if (collection4 == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection4, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection4, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function() {
          return root.Date.now();
        };
        function after(n2, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n2 = toInteger(n2);
          return function() {
            if (--n2 < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n2, guard) {
          n2 = guard ? undefined2 : n2;
          n2 = func && n2 == null ? func.length : n2;
          return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n2);
        }
        function before(n2, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n2 = toInteger(n2);
          return function() {
            if (--n2 > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n2 <= 1) {
              func = undefined2;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object3, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object3, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce2(func, wait, options3) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options3)) {
            leading = !!options3.leading;
            maxing = "maxWait" in options3;
            maxWait = maxing ? nativeMax(toNumber(options3.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options3 ? !!options3.trailing : trailing;
          }
          function invokeFunc(time2) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time2;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time2) {
            lastInvokeTime = time2;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time2) : result2;
          }
          function remainingWait(time2) {
            var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time2) {
            var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
            return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time2 = now();
            if (shouldInvoke(time2)) {
              return trailingEdge(time2);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time2));
          }
          function trailingEdge(time2) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time2);
            }
            lastArgs = lastThis = undefined2;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush() {
            return timerId === undefined2 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time2 = now(), isInvoking = shouldInvoke(time2);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time2;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay2 = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize3(func, resolver3) {
          if (typeof func != "function" || resolver3 != null && typeof resolver3 != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver3 ? resolver3.apply(this, args) : args[0], cache3 = memoized.cache;
            if (cache3.has(key)) {
              return cache3.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache3.set(key, result2) || cache3;
            return result2;
          };
          memoized.cache = new (memoize3.Cache || MapCache)();
          return memoized;
        }
        memoize3.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once3(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1, length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply2(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
        });
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
        });
        function rest(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined2 ? start : toInteger(start);
          return baseRest(func, start);
        }
        function spread(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array3 = args[start], otherArgs = castSlice(args, 0, start);
            if (array3) {
              arrayPush(otherArgs, array3);
            }
            return apply2(func, this, otherArgs);
          });
        }
        function throttle2(func, wait, options3) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject(options3)) {
            leading = "leading" in options3 ? !!options3.leading : leading;
            trailing = "trailing" in options3 ? !!options3.trailing : trailing;
          }
          return debounce2(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone3(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object3, source) {
          return source == null || baseConformsTo(object3, source, keys2(source));
        }
        function eq2(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt2 = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(/* @__PURE__ */ function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction2(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject3(value);
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual3(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          var result2 = customizer ? customizer(value, other) : undefined2;
          return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject3(value);
        }
        function isFinite2(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction2(value) {
          if (!isObject(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject(value) {
          var type2 = typeof value;
          return value != null && (type2 == "object" || type2 == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object3, source) {
          return object3 === source || baseIsMatch(object3, source, getMatchData(source));
        }
        function isMatchWith(object3, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseIsMatch(object3, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber2(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil3(value) {
          return value == null;
        }
        function isNumber2(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject3(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString2(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt2 = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray2(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString2(value) ? stringToArray(value) : copyArray3(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString3(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign6 = createAssigner(function(object3, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys2(source), object3);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object3, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object3, source) {
          copyObject(source, keysIn(source), object3);
        });
        var assignInWith = createAssigner(function(object3, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object3, customizer);
        });
        var assignWith = createAssigner(function(object3, source, srcIndex, customizer) {
          copyObject(source, keys2(source), object3, customizer);
        });
        var at2 = flatRest(baseAt);
        function create2(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults4 = baseRest(function(object3, sources) {
          object3 = Object2(object3);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object3[key];
              if (value === undefined2 || eq2(value, objectProto[key]) && !hasOwnProperty.call(object3, key)) {
                object3[key] = source[key];
              }
            }
          }
          return object3;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined2, customDefaultsMerge);
          return apply2(mergeWith, undefined2, args);
        });
        function findKey(object3, predicate) {
          return baseFindKey(object3, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object3, predicate) {
          return baseFindKey(object3, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object3, iteratee2) {
          return object3 == null ? object3 : baseFor(object3, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object3, iteratee2) {
          return object3 == null ? object3 : baseForRight(object3, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object3, iteratee2) {
          return object3 && baseForOwn(object3, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object3, iteratee2) {
          return object3 && baseForOwnRight(object3, getIteratee(iteratee2, 3));
        }
        function functions(object3) {
          return object3 == null ? [] : baseFunctions(object3, keys2(object3));
        }
        function functionsIn(object3) {
          return object3 == null ? [] : baseFunctions(object3, keysIn(object3));
        }
        function get2(object3, path, defaultValue) {
          var result2 = object3 == null ? undefined2 : baseGet(object3, path);
          return result2 === undefined2 ? defaultValue : result2;
        }
        function has(object3, path) {
          return object3 != null && hasPath(object3, path, baseHas);
        }
        function hasIn(object3, path) {
          return object3 != null && hasPath(object3, path, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity3));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys2(object3) {
          return isArrayLike(object3) ? arrayLikeKeys(object3) : baseKeys(object3);
        }
        function keysIn(object3) {
          return isArrayLike(object3) ? arrayLikeKeys(object3, true) : baseKeysIn(object3);
        }
        function mapKeys(object3, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object3, function(value, key, object4) {
            baseAssignValue(result2, iteratee2(value, key, object4), value);
          });
          return result2;
        }
        function mapValues(object3, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object3, function(value, key, object4) {
            baseAssignValue(result2, key, iteratee2(value, key, object4));
          });
          return result2;
        }
        var merge2 = createAssigner(function(object3, source, srcIndex) {
          baseMerge(object3, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object3, source, srcIndex, customizer) {
          baseMerge(object3, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object3, paths) {
          var result2 = {};
          if (object3 == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object3);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object3, getAllKeysIn(object3), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object3, predicate) {
          return pickBy(object3, negate(getIteratee(predicate)));
        }
        var pick2 = flatRest(function(object3, paths) {
          return object3 == null ? {} : basePick(object3, paths);
        });
        function pickBy(object3, predicate) {
          if (object3 == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object3), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object3, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object3, path, defaultValue) {
          path = castPath(path, object3);
          var index = -1, length = path.length;
          if (!length) {
            length = 1;
            object3 = undefined2;
          }
          while (++index < length) {
            var value = object3 == null ? undefined2 : object3[toKey(path[index])];
            if (value === undefined2) {
              index = length;
              value = defaultValue;
            }
            object3 = isFunction2(value) ? value.call(object3) : value;
          }
          return object3;
        }
        function set2(object3, path, value) {
          return object3 == null ? object3 : baseSet(object3, path, value);
        }
        function setWith(object3, path, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object3 == null ? object3 : baseSet(object3, path, value, customizer);
        }
        var toPairs = createToPairs(keys2);
        var toPairsIn = createToPairs(keysIn);
        function transform8(object3, iteratee2, accumulator) {
          var isArr = isArray(object3), isArrLike = isArr || isBuffer(object3) || isTypedArray(object3);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object3 && object3.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject(object3)) {
              accumulator = isFunction2(Ctor) ? baseCreate(getPrototype(object3)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object3, function(value, index, object4) {
            return iteratee2(accumulator, value, index, object4);
          });
          return accumulator;
        }
        function unset(object3, path) {
          return object3 == null ? true : baseUnset(object3, path);
        }
        function update2(object3, path, updater) {
          return object3 == null ? object3 : baseUpdate(object3, path, castFunction(updater));
        }
        function updateWith(object3, path, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object3 == null ? object3 : baseUpdate(object3, path, castFunction(updater), customizer);
        }
        function values(object3) {
          return object3 == null ? [] : baseValues(object3, keys2(object3));
        }
        function valuesIn(object3) {
          return object3 == null ? [] : baseValues(object3, keysIn(object3));
        }
        function clamp(number3, lower, upper) {
          if (upper === undefined2) {
            upper = lower;
            lower = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined2) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number3), lower, upper);
        }
        function inRange(number3, start, end) {
          start = toFinite(start);
          if (end === undefined2) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number3 = toNumber(number3);
          return baseInRange(number3, start, end);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined2;
            }
          }
          if (lower === undefined2 && upper === undefined2) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined2) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize3(word) : word);
        });
        function capitalize3(string3) {
          return upperFirst(toString3(string3).toLowerCase());
        }
        function deburr(string3) {
          string3 = toString3(string3);
          return string3 && string3.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith3(string3, target, position3) {
          string3 = toString3(string3);
          target = baseToString(target);
          var length = string3.length;
          position3 = position3 === undefined2 ? length : baseClamp(toInteger(position3), 0, length);
          var end = position3;
          position3 -= target.length;
          return position3 >= 0 && string3.slice(position3, end) == target;
        }
        function escape2(string3) {
          string3 = toString3(string3);
          return string3 && reHasUnescapedHtml.test(string3) ? string3.replace(reUnescapedHtml, escapeHtmlChar) : string3;
        }
        function escapeRegExp(string3) {
          string3 = toString3(string3);
          return string3 && reHasRegExpChar.test(string3) ? string3.replace(reRegExpChar, "\\$&") : string3;
        }
        var kebabCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string3, length, chars) {
          string3 = toString3(string3);
          length = toInteger(length);
          var strLength = length ? stringSize(string3) : 0;
          if (!length || strLength >= length) {
            return string3;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string3 + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string3, length, chars) {
          string3 = toString3(string3);
          length = toInteger(length);
          var strLength = length ? stringSize(string3) : 0;
          return length && strLength < length ? string3 + createPadding(length - strLength, chars) : string3;
        }
        function padStart(string3, length, chars) {
          string3 = toString3(string3);
          length = toInteger(length);
          var strLength = length ? stringSize(string3) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string3 : string3;
        }
        function parseInt2(string3, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString3(string3).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string3, n2, guard) {
          if (guard ? isIterateeCall(string3, n2, guard) : n2 === undefined2) {
            n2 = 1;
          } else {
            n2 = toInteger(n2);
          }
          return baseRepeat(toString3(string3), n2);
        }
        function replace() {
          var args = arguments, string3 = toString3(args[0]);
          return args.length < 3 ? string3 : string3.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "_" : "") + word.toLowerCase();
        });
        function split(string3, separator, limit2) {
          if (limit2 && typeof limit2 != "number" && isIterateeCall(string3, separator, limit2)) {
            separator = limit2 = undefined2;
          }
          limit2 = limit2 === undefined2 ? MAX_ARRAY_LENGTH : limit2 >>> 0;
          if (!limit2) {
            return [];
          }
          string3 = toString3(string3);
          if (string3 && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string3)) {
              return castSlice(stringToArray(string3), 0, limit2);
            }
          }
          return string3.split(separator, limit2);
        }
        var startCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + upperFirst(word);
        });
        function startsWith(string3, target, position3) {
          string3 = toString3(string3);
          position3 = position3 == null ? 0 : baseClamp(toInteger(position3), 0, string3.length);
          target = baseToString(target);
          return string3.slice(position3, position3 + target.length) == target;
        }
        function template(string3, options3, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string3, options3, guard)) {
            options3 = undefined2;
          }
          string3 = toString3(string3);
          options3 = assignInWith({}, options3, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options3.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys2(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index = 0, interpolate = options3.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2(
            (options3.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options3.evaluate || reNoMatch).source + "|$",
            "g"
          );
          var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options3, "sourceURL") ? (options3.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string3.replace(reDelimiters, function(match2, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string3.slice(index, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match2.length;
            return match2;
          });
          source += "';\n";
          var variable = hasOwnProperty.call(options3, "variable") && options3.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt2(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString3(value).toLowerCase();
        }
        function toUpper(value) {
          return toString3(value).toUpperCase();
        }
        function trim(string3, chars, guard) {
          string3 = toString3(string3);
          if (string3 && (guard || chars === undefined2)) {
            return baseTrim(string3);
          }
          if (!string3 || !(chars = baseToString(chars))) {
            return string3;
          }
          var strSymbols = stringToArray(string3), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        function trimEnd(string3, chars, guard) {
          string3 = toString3(string3);
          if (string3 && (guard || chars === undefined2)) {
            return string3.slice(0, trimmedEndIndex(string3) + 1);
          }
          if (!string3 || !(chars = baseToString(chars))) {
            return string3;
          }
          var strSymbols = stringToArray(string3), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string3, chars, guard) {
          string3 = toString3(string3);
          if (string3 && (guard || chars === undefined2)) {
            return string3.replace(reTrimStart, "");
          }
          if (!string3 || !(chars = baseToString(chars))) {
            return string3;
          }
          var strSymbols = stringToArray(string3), start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string3, options3) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject(options3)) {
            var separator = "separator" in options3 ? options3.separator : separator;
            length = "length" in options3 ? toInteger(options3.length) : length;
            omission = "omission" in options3 ? baseToString(options3.omission) : omission;
          }
          string3 = toString3(string3);
          var strLength = string3.length;
          if (hasUnicode(string3)) {
            var strSymbols = stringToArray(string3);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string3;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string3.slice(0, end);
          if (separator === undefined2) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string3.slice(end).search(separator)) {
              var match2, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString3(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match2 = separator.exec(substring)) {
                var newEnd = match2.index;
              }
              result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
            }
          } else if (string3.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape(string3) {
          string3 = toString3(string3);
          return string3 && reHasEscapedHtml.test(string3) ? string3.replace(reEscapedHtml, unescapeHtmlChar) : string3;
        }
        var upperCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string3, pattern, guard) {
          string3 = toString3(string3);
          pattern = guard ? undefined2 : pattern;
          if (pattern === undefined2) {
            return hasUnicodeWord(string3) ? unicodeWords(string3) : asciiWords(string3);
          }
          return string3.match(pattern) || [];
        }
        var attempt2 = baseRest(function(func, args) {
          try {
            return apply2(func, undefined2, args);
          } catch (e) {
            return isError(e) ? e : new Error2(e);
          }
        });
        var bindAll2 = flatRest(function(object3, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object3, key, bind(object3[key], object3));
          });
          return object3;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply2(pair[0], this, args)) {
                return apply2(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity3(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches33(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path, args) {
          return function(object3) {
            return baseInvoke(object3, path, args);
          };
        });
        var methodOf = baseRest(function(object3, args) {
          return function(path) {
            return baseInvoke(object3, path, args);
          };
        });
        function mixin(object3, source, options3) {
          var props = keys2(source), methodNames = baseFunctions(source, props);
          if (options3 == null && !(isObject(source) && (methodNames.length || !props.length))) {
            options3 = source;
            source = object3;
            object3 = this;
            methodNames = baseFunctions(source, keys2(source));
          }
          var chain2 = !(isObject(options3) && "chain" in options3) || !!options3.chain, isFunc = isFunction2(object3);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object3[methodName] = func;
            if (isFunc) {
              object3.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object3(this.__wrapped__), actions = result2.__actions__ = copyArray3(this.__actions__);
                  actions.push({ "func": func, "args": arguments, "thisArg": object3 });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object3, arrayPush([this.value()], arguments));
              };
            }
          });
          return object3;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop4() {
        }
        function nthArg(n2) {
          n2 = toInteger(n2);
          return baseRest(function(args) {
            return baseNth(args, n2);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        function propertyOf(object3) {
          return function(path) {
            return object3 == null ? undefined2 : baseGet(object3, path);
          };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n2, iteratee2) {
          n2 = toInteger(n2);
          if (n2 < 1 || n2 > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH, length = nativeMin(n2, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n2 -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index < n2) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath2(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray3(stringToPath(toString3(value)));
        }
        function uniqueId(prefix) {
          var id2 = ++idCounter;
          return toString3(prefix) + id2;
        }
        var add3 = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max5(array3) {
          return array3 && array3.length ? baseExtremum(array3, identity3, baseGt) : undefined2;
        }
        function maxBy(array3, iteratee2) {
          return array3 && array3.length ? baseExtremum(array3, getIteratee(iteratee2, 2), baseGt) : undefined2;
        }
        function mean3(array3) {
          return baseMean(array3, identity3);
        }
        function meanBy(array3, iteratee2) {
          return baseMean(array3, getIteratee(iteratee2, 2));
        }
        function min4(array3) {
          return array3 && array3.length ? baseExtremum(array3, identity3, baseLt) : undefined2;
        }
        function minBy(array3, iteratee2) {
          return array3 && array3.length ? baseExtremum(array3, getIteratee(iteratee2, 2), baseLt) : undefined2;
        }
        var multiply2 = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array3) {
          return array3 && array3.length ? baseSum(array3, identity3) : 0;
        }
        function sumBy(array3, iteratee2) {
          return array3 && array3.length ? baseSum(array3, getIteratee(iteratee2, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign6;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at2;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll2;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create2;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce2;
        lodash.defaults = defaults4;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay2;
        lodash.difference = difference2;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter4;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection2;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy2;
        lodash.keys = keys2;
        lodash.keysIn = keysIn;
        lodash.map = map2;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches33;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize3;
        lodash.merge = merge2;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once3;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick2;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject2;
        lodash.remove = remove2;
        lodash.rest = rest;
        lodash.reverse = reverse2;
        lodash.sampleSize = sampleSize;
        lodash.set = set2;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice2;
        lodash.sortBy = sortBy2;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle2;
        lodash.thru = thru;
        lodash.toArray = toArray2;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath2;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform8;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update2;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor2;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add3;
        lodash.attempt = attempt2;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize3;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone3;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith3;
        lodash.eq = eq2;
        lodash.escape = escape2;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every2;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach2;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get2;
        lodash.gt = gt2;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity3;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual3;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite2;
        lodash.isFunction = isFunction2;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN2;
        lodash.isNative = isNative;
        lodash.isNil = isNil3;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber2;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject3;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString2;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last2;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt2;
        lodash.lte = lte;
        lodash.max = max5;
        lodash.maxBy = maxBy;
        lodash.mean = mean3;
        lodash.meanBy = meanBy;
        lodash.min = min4;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply2;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop4;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random;
        lodash.reduce = reduce2;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size3;
        lodash.snakeCase = snakeCase;
        lodash.some = some2;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString3;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach2;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), { "chain": false });
        lodash.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
        arrayEach(["drop", "take"], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n2) {
            n2 = n2 === undefined2 ? 1 : nativeMax(toInteger(n2), 0);
            var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n2, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n2, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n2) {
            return this.reverse()[methodName](n2).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
          var type2 = index + 1, isFilter = type2 == LAZY_FILTER_FLAG || type2 == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type2
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index) {
          var takeName = "take" + (index ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index) {
          var dropName = "drop" + (index ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity3);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined2) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined2
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _2 = runInContext();
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root._ = _2;
        define(function() {
          return _2;
        });
      } else if (freeModule) {
        (freeModule.exports = _2)._ = _2;
        freeExports._ = _2;
      } else {
        root._ = _2;
      }
    }).call(exports);
  }
});

// node_modules/@neo4j-bloom/dagre/lib/data/list.js
var require_list = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/data/list.js"(exports, module) {
    module.exports = List;
    function List() {
      var sentinel = {};
      sentinel._next = sentinel._prev = sentinel;
      this._sentinel = sentinel;
    }
    List.prototype.dequeue = function() {
      var sentinel = this._sentinel;
      var entry = sentinel._prev;
      if (entry !== sentinel) {
        unlink(entry);
        return entry;
      }
    };
    List.prototype.enqueue = function(entry) {
      var sentinel = this._sentinel;
      if (entry._prev && entry._next) {
        unlink(entry);
      }
      entry._next = sentinel._next;
      sentinel._next._prev = entry;
      sentinel._next = entry;
      entry._prev = sentinel;
    };
    List.prototype.toString = function() {
      var strs = [];
      var sentinel = this._sentinel;
      var curr = sentinel._prev;
      while (curr !== sentinel) {
        strs.push(JSON.stringify(curr, filterOutLinks));
        curr = curr._prev;
      }
      return "[" + strs.join(", ") + "]";
    };
    function unlink(entry) {
      entry._prev._next = entry._next;
      entry._next._prev = entry._prev;
      delete entry._next;
      delete entry._prev;
    }
    function filterOutLinks(k2, v3) {
      if (k2 !== "_next" && k2 !== "_prev") {
        return v3;
      }
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/greedy-fas.js
var require_greedy_fas = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/greedy-fas.js"(exports, module) {
    var _2 = require_lodash2();
    var Graph = require_graphlib().Graph;
    var List = require_list();
    module.exports = greedyFAS;
    var DEFAULT_WEIGHT_FN = _2.constant(1);
    function greedyFAS(g2, weightFn) {
      if (g2.nodeCount() <= 1) {
        return [];
      }
      var state = buildState(g2, weightFn || DEFAULT_WEIGHT_FN);
      var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);
      return _2.flatten(_2.map(results, function(e) {
        return g2.outEdges(e.v, e.w);
      }), true);
    }
    function doGreedyFAS(g2, buckets, zeroIdx) {
      var results = [];
      var sources = buckets[buckets.length - 1];
      var sinks = buckets[0];
      var entry;
      while (g2.nodeCount()) {
        while (entry = sinks.dequeue()) {
          removeNode(g2, buckets, zeroIdx, entry);
        }
        while (entry = sources.dequeue()) {
          removeNode(g2, buckets, zeroIdx, entry);
        }
        if (g2.nodeCount()) {
          for (var i2 = buckets.length - 2; i2 > 0; --i2) {
            entry = buckets[i2].dequeue();
            if (entry) {
              results = results.concat(removeNode(g2, buckets, zeroIdx, entry, true));
              break;
            }
          }
        }
      }
      return results;
    }
    function removeNode(g2, buckets, zeroIdx, entry, collectPredecessors) {
      var results = collectPredecessors ? [] : void 0;
      _2.forEach(g2.inEdges(entry.v), function(edge) {
        var weight8 = g2.edge(edge);
        var uEntry = g2.node(edge.v);
        if (collectPredecessors) {
          results.push({ v: edge.v, w: edge.w });
        }
        uEntry.out -= weight8;
        assignBucket(buckets, zeroIdx, uEntry);
      });
      _2.forEach(g2.outEdges(entry.v), function(edge) {
        var weight8 = g2.edge(edge);
        var w2 = edge.w;
        var wEntry = g2.node(w2);
        wEntry["in"] -= weight8;
        assignBucket(buckets, zeroIdx, wEntry);
      });
      g2.removeNode(entry.v);
      return results;
    }
    function buildState(g2, weightFn) {
      var fasGraph = new Graph();
      var maxIn = 0;
      var maxOut = 0;
      _2.forEach(g2.nodes(), function(v3) {
        fasGraph.setNode(v3, { v: v3, "in": 0, out: 0 });
      });
      _2.forEach(g2.edges(), function(e) {
        var prevWeight = fasGraph.edge(e.v, e.w) || 0;
        var weight8 = weightFn(e);
        var edgeWeight = prevWeight + weight8;
        fasGraph.setEdge(e.v, e.w, edgeWeight);
        maxOut = Math.max(maxOut, fasGraph.node(e.v).out += weight8);
        maxIn = Math.max(maxIn, fasGraph.node(e.w)["in"] += weight8);
      });
      var buckets = _2.range(maxOut + maxIn + 3).map(function() {
        return new List();
      });
      var zeroIdx = maxIn + 1;
      _2.forEach(fasGraph.nodes(), function(v3) {
        assignBucket(buckets, zeroIdx, fasGraph.node(v3));
      });
      return { graph: fasGraph, buckets, zeroIdx };
    }
    function assignBucket(buckets, zeroIdx, entry) {
      if (!entry.out) {
        buckets[0].enqueue(entry);
      } else if (!entry["in"]) {
        buckets[buckets.length - 1].enqueue(entry);
      } else {
        buckets[entry.out - entry["in"] + zeroIdx].enqueue(entry);
      }
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/acyclic.js
var require_acyclic = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/acyclic.js"(exports, module) {
    "use strict";
    var _2 = require_lodash2();
    var greedyFAS = require_greedy_fas();
    module.exports = {
      run,
      undo
    };
    function run(g2) {
      var fas = g2.graph().acyclicer === "greedy" ? greedyFAS(g2, weightFn(g2)) : dfsFAS(g2);
      _2.forEach(fas, function(e) {
        var label = g2.edge(e);
        g2.removeEdge(e);
        label.forwardName = e.name;
        label.reversed = true;
        g2.setEdge(e.w, e.v, label, _2.uniqueId("rev"));
      });
      function weightFn(g3) {
        return function(e) {
          return g3.edge(e).weight;
        };
      }
    }
    function dfsFAS(g2) {
      var fas = [];
      var stack = {};
      var visited = {};
      function dfs(v3) {
        if (_2.has(visited, v3)) {
          return;
        }
        visited[v3] = true;
        stack[v3] = true;
        _2.forEach(g2.outEdges(v3), function(e) {
          if (_2.has(stack, e.w)) {
            fas.push(e);
          } else {
            dfs(e.w);
          }
        });
        delete stack[v3];
      }
      _2.forEach(g2.nodes(), dfs);
      return fas;
    }
    function undo(g2) {
      _2.forEach(g2.edges(), function(e) {
        var label = g2.edge(e);
        if (label.reversed) {
          g2.removeEdge(e);
          var forwardName = label.forwardName;
          delete label.reversed;
          delete label.forwardName;
          g2.setEdge(e.w, e.v, label, forwardName);
        }
      });
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/util.js
var require_util = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/util.js"(exports, module) {
    "use strict";
    var _2 = require_lodash2();
    var Graph = require_graphlib().Graph;
    module.exports = {
      addDummyNode,
      simplify,
      asNonCompoundGraph,
      successorWeights,
      predecessorWeights,
      intersectRect,
      buildLayerMatrix,
      normalizeRanks,
      removeEmptyRanks,
      addBorderNode,
      maxRank,
      partition,
      time: time2,
      notime
    };
    function addDummyNode(g2, type2, attrs, name) {
      var v3;
      do {
        v3 = _2.uniqueId(name);
      } while (g2.hasNode(v3));
      attrs.dummy = type2;
      g2.setNode(v3, attrs);
      return v3;
    }
    function simplify(g2) {
      var simplified = new Graph().setGraph(g2.graph());
      _2.forEach(g2.nodes(), function(v3) {
        simplified.setNode(v3, g2.node(v3));
      });
      _2.forEach(g2.edges(), function(e) {
        var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };
        var label = g2.edge(e);
        simplified.setEdge(e.v, e.w, {
          weight: simpleLabel.weight + label.weight,
          minlen: Math.max(simpleLabel.minlen, label.minlen)
        });
      });
      return simplified;
    }
    function asNonCompoundGraph(g2) {
      var simplified = new Graph({ multigraph: g2.isMultigraph() }).setGraph(g2.graph());
      _2.forEach(g2.nodes(), function(v3) {
        if (!g2.children(v3).length) {
          simplified.setNode(v3, g2.node(v3));
        }
      });
      _2.forEach(g2.edges(), function(e) {
        simplified.setEdge(e, g2.edge(e));
      });
      return simplified;
    }
    function successorWeights(g2) {
      var weightMap = _2.map(g2.nodes(), function(v3) {
        var sucs = {};
        _2.forEach(g2.outEdges(v3), function(e) {
          sucs[e.w] = (sucs[e.w] || 0) + g2.edge(e).weight;
        });
        return sucs;
      });
      return _2.zipObject(g2.nodes(), weightMap);
    }
    function predecessorWeights(g2) {
      var weightMap = _2.map(g2.nodes(), function(v3) {
        var preds = {};
        _2.forEach(g2.inEdges(v3), function(e) {
          preds[e.v] = (preds[e.v] || 0) + g2.edge(e).weight;
        });
        return preds;
      });
      return _2.zipObject(g2.nodes(), weightMap);
    }
    function intersectRect(rect, point) {
      var x3 = rect.x;
      var y3 = rect.y;
      var dx = point.x - x3;
      var dy = point.y - y3;
      var w2 = rect.width / 2;
      var h2 = rect.height / 2;
      if (!dx && !dy) {
        throw new Error("Not possible to find intersection inside of the rectangle");
      }
      var sx, sy;
      if (Math.abs(dy) * w2 > Math.abs(dx) * h2) {
        if (dy < 0) {
          h2 = -h2;
        }
        sx = h2 * dx / dy;
        sy = h2;
      } else {
        if (dx < 0) {
          w2 = -w2;
        }
        sx = w2;
        sy = w2 * dy / dx;
      }
      return { x: x3 + sx, y: y3 + sy };
    }
    function buildLayerMatrix(g2) {
      var layering = _2.map(_2.range(maxRank(g2) + 1), function() {
        return [];
      });
      _2.forEach(g2.nodes(), function(v3) {
        var node = g2.node(v3);
        var rank = node.rank;
        if (!_2.isUndefined(rank)) {
          layering[rank][node.order] = v3;
        }
      });
      return layering;
    }
    function normalizeRanks(g2) {
      var min4 = _2.min(_2.map(g2.nodes(), function(v3) {
        return g2.node(v3).rank;
      }));
      _2.forEach(g2.nodes(), function(v3) {
        var node = g2.node(v3);
        if (_2.has(node, "rank")) {
          node.rank -= min4;
        }
      });
    }
    function removeEmptyRanks(g2) {
      var offset = _2.min(_2.map(g2.nodes(), function(v3) {
        return g2.node(v3).rank;
      }));
      var layers = [];
      _2.forEach(g2.nodes(), function(v3) {
        var rank = g2.node(v3).rank - offset;
        if (!layers[rank]) {
          layers[rank] = [];
        }
        layers[rank].push(v3);
      });
      var delta = 0;
      var nodeRankFactor = g2.graph().nodeRankFactor;
      _2.forEach(layers, function(vs2, i2) {
        if (_2.isUndefined(vs2) && i2 % nodeRankFactor !== 0) {
          --delta;
        } else if (delta) {
          _2.forEach(vs2, function(v3) {
            g2.node(v3).rank += delta;
          });
        }
      });
    }
    function addBorderNode(g2, prefix, rank, order) {
      var node = {
        width: 0,
        height: 0
      };
      if (arguments.length >= 4) {
        node.rank = rank;
        node.order = order;
      }
      return addDummyNode(g2, "border", node, prefix);
    }
    function maxRank(g2) {
      return _2.max(_2.map(g2.nodes(), function(v3) {
        var rank = g2.node(v3).rank;
        if (!_2.isUndefined(rank)) {
          return rank;
        }
      }));
    }
    function partition(collection4, fn4) {
      var result = { lhs: [], rhs: [] };
      _2.forEach(collection4, function(value) {
        if (fn4(value)) {
          result.lhs.push(value);
        } else {
          result.rhs.push(value);
        }
      });
      return result;
    }
    function time2(name, fn4) {
      var start = _2.now();
      try {
        return fn4();
      } finally {
        console.log(name + " time: " + (_2.now() - start) + "ms");
      }
    }
    function notime(name, fn4) {
      return fn4();
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/normalize.js
var require_normalize = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/normalize.js"(exports, module) {
    "use strict";
    var _2 = require_lodash2();
    var util = require_util();
    module.exports = {
      run,
      undo
    };
    function run(g2) {
      g2.graph().dummyChains = [];
      _2.forEach(g2.edges(), function(edge) {
        normalizeEdge(g2, edge);
      });
    }
    function normalizeEdge(g2, e) {
      var v3 = e.v;
      var vRank = g2.node(v3).rank;
      var w2 = e.w;
      var wRank = g2.node(w2).rank;
      var name = e.name;
      var edgeLabel = g2.edge(e);
      var labelRank = edgeLabel.labelRank;
      if (wRank === vRank + 1) return;
      g2.removeEdge(e);
      var dummy, attrs, i2;
      for (i2 = 0, ++vRank; vRank < wRank; ++i2, ++vRank) {
        edgeLabel.points = [];
        attrs = {
          width: 0,
          height: 0,
          edgeLabel,
          edgeObj: e,
          rank: vRank
        };
        dummy = util.addDummyNode(g2, "edge", attrs, "_d");
        if (vRank === labelRank) {
          attrs.width = edgeLabel.width;
          attrs.height = edgeLabel.height;
          attrs.dummy = "edge-label";
          attrs.labelpos = edgeLabel.labelpos;
        }
        g2.setEdge(v3, dummy, { weight: edgeLabel.weight }, name);
        if (i2 === 0) {
          g2.graph().dummyChains.push(dummy);
        }
        v3 = dummy;
      }
      g2.setEdge(v3, w2, { weight: edgeLabel.weight }, name);
    }
    function undo(g2) {
      _2.forEach(g2.graph().dummyChains, function(v3) {
        var node = g2.node(v3);
        var origLabel = node.edgeLabel;
        var w2;
        g2.setEdge(node.edgeObj, origLabel);
        while (node.dummy) {
          w2 = g2.successors(v3)[0];
          g2.removeNode(v3);
          origLabel.points.push({ x: node.x, y: node.y });
          if (node.dummy === "edge-label") {
            origLabel.x = node.x;
            origLabel.y = node.y;
            origLabel.width = node.width;
            origLabel.height = node.height;
          }
          v3 = w2;
          node = g2.node(v3);
        }
      });
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/rank/util.js
var require_util2 = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/rank/util.js"(exports, module) {
    "use strict";
    var _2 = require_lodash2();
    module.exports = {
      longestPath,
      slack
    };
    function longestPath(g2) {
      var visited = {};
      function dfs(v3) {
        var label = g2.node(v3);
        if (_2.has(visited, v3)) {
          return label.rank;
        }
        visited[v3] = true;
        var rank = _2.min(_2.map(g2.outEdges(v3), function(e) {
          return dfs(e.w) - g2.edge(e).minlen;
        }));
        if (rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3
        rank === void 0 || // return value of _.map([]) for Lodash 4
        rank === null) {
          rank = 0;
        }
        return label.rank = rank;
      }
      _2.forEach(g2.sources(), dfs);
    }
    function slack(g2, e) {
      return g2.node(e.w).rank - g2.node(e.v).rank - g2.edge(e).minlen;
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/rank/feasible-tree.js
var require_feasible_tree = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/rank/feasible-tree.js"(exports, module) {
    "use strict";
    var _2 = require_lodash2();
    var Graph = require_graphlib().Graph;
    var slack = require_util2().slack;
    module.exports = feasibleTree;
    function feasibleTree(g2) {
      var t = new Graph({ directed: false });
      var start = g2.nodes()[0];
      var size3 = g2.nodeCount();
      t.setNode(start, {});
      var edge, delta;
      while (tightTree(t, g2) < size3) {
        edge = findMinSlackEdge(t, g2);
        delta = t.hasNode(edge.v) ? slack(g2, edge) : -slack(g2, edge);
        shiftRanks(t, g2, delta);
      }
      return t;
    }
    function tightTree(t, g2) {
      function dfs(v3) {
        _2.forEach(g2.nodeEdges(v3), function(e) {
          var edgeV = e.v, w2 = v3 === edgeV ? e.w : edgeV;
          if (!t.hasNode(w2) && !slack(g2, e)) {
            t.setNode(w2, {});
            t.setEdge(v3, w2, {});
            dfs(w2);
          }
        });
      }
      _2.forEach(t.nodes(), dfs);
      return t.nodeCount();
    }
    function findMinSlackEdge(t, g2) {
      return _2.minBy(g2.edges(), function(e) {
        if (t.hasNode(e.v) !== t.hasNode(e.w)) {
          return slack(g2, e);
        }
      });
    }
    function shiftRanks(t, g2, delta) {
      _2.forEach(t.nodes(), function(v3) {
        g2.node(v3).rank += delta;
      });
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/rank/network-simplex.js
var require_network_simplex = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/rank/network-simplex.js"(exports, module) {
    "use strict";
    var _2 = require_lodash2();
    var feasibleTree = require_feasible_tree();
    var slack = require_util2().slack;
    var initRank = require_util2().longestPath;
    var preorder = require_graphlib().alg.preorder;
    var postorder = require_graphlib().alg.postorder;
    var simplify = require_util().simplify;
    module.exports = networkSimplex;
    networkSimplex.initLowLimValues = initLowLimValues;
    networkSimplex.initCutValues = initCutValues;
    networkSimplex.calcCutValue = calcCutValue;
    networkSimplex.leaveEdge = leaveEdge;
    networkSimplex.enterEdge = enterEdge;
    networkSimplex.exchangeEdges = exchangeEdges;
    function networkSimplex(g2) {
      g2 = simplify(g2);
      initRank(g2);
      var t = feasibleTree(g2);
      initLowLimValues(t);
      initCutValues(t, g2);
      var e, f2;
      while (e = leaveEdge(t)) {
        f2 = enterEdge(t, g2, e);
        exchangeEdges(t, g2, e, f2);
      }
    }
    function initCutValues(t, g2) {
      var vs2 = postorder(t, t.nodes());
      vs2 = vs2.slice(0, vs2.length - 1);
      _2.forEach(vs2, function(v3) {
        assignCutValue(t, g2, v3);
      });
    }
    function assignCutValue(t, g2, child) {
      var childLab = t.node(child);
      var parent4 = childLab.parent;
      t.edge(child, parent4).cutvalue = calcCutValue(t, g2, child);
    }
    function calcCutValue(t, g2, child) {
      var childLab = t.node(child);
      var parent4 = childLab.parent;
      var childIsTail = true;
      var graphEdge = g2.edge(child, parent4);
      var cutValue = 0;
      if (!graphEdge) {
        childIsTail = false;
        graphEdge = g2.edge(parent4, child);
      }
      cutValue = graphEdge.weight;
      _2.forEach(g2.nodeEdges(child), function(e) {
        var isOutEdge = e.v === child, other = isOutEdge ? e.w : e.v;
        if (other !== parent4) {
          var pointsToHead = isOutEdge === childIsTail, otherWeight = g2.edge(e).weight;
          cutValue += pointsToHead ? otherWeight : -otherWeight;
          if (isTreeEdge(t, child, other)) {
            var otherCutValue = t.edge(child, other).cutvalue;
            cutValue += pointsToHead ? -otherCutValue : otherCutValue;
          }
        }
      });
      return cutValue;
    }
    function initLowLimValues(tree, root) {
      if (arguments.length < 2) {
        root = tree.nodes()[0];
      }
      dfsAssignLowLim(tree, {}, 1, root);
    }
    function dfsAssignLowLim(tree, visited, nextLim, v3, parent4) {
      var low = nextLim;
      var label = tree.node(v3);
      visited[v3] = true;
      _2.forEach(tree.neighbors(v3), function(w2) {
        if (!_2.has(visited, w2)) {
          nextLim = dfsAssignLowLim(tree, visited, nextLim, w2, v3);
        }
      });
      label.low = low;
      label.lim = nextLim++;
      if (parent4) {
        label.parent = parent4;
      } else {
        delete label.parent;
      }
      return nextLim;
    }
    function leaveEdge(tree) {
      return _2.find(tree.edges(), function(e) {
        return tree.edge(e).cutvalue < 0;
      });
    }
    function enterEdge(t, g2, edge) {
      var v3 = edge.v;
      var w2 = edge.w;
      if (!g2.hasEdge(v3, w2)) {
        v3 = edge.w;
        w2 = edge.v;
      }
      var vLabel = t.node(v3);
      var wLabel = t.node(w2);
      var tailLabel = vLabel;
      var flip = false;
      if (vLabel.lim > wLabel.lim) {
        tailLabel = wLabel;
        flip = true;
      }
      var candidates = _2.filter(g2.edges(), function(edge2) {
        return flip === isDescendant(t, t.node(edge2.v), tailLabel) && flip !== isDescendant(t, t.node(edge2.w), tailLabel);
      });
      return _2.minBy(candidates, function(edge2) {
        return slack(g2, edge2);
      });
    }
    function exchangeEdges(t, g2, e, f2) {
      var v3 = e.v;
      var w2 = e.w;
      t.removeEdge(v3, w2);
      t.setEdge(f2.v, f2.w, {});
      initLowLimValues(t);
      initCutValues(t, g2);
      updateRanks(t, g2);
    }
    function updateRanks(t, g2) {
      var root = _2.find(t.nodes(), function(v3) {
        return !g2.node(v3).parent;
      });
      var vs2 = preorder(t, root);
      vs2 = vs2.slice(1);
      _2.forEach(vs2, function(v3) {
        var parent4 = t.node(v3).parent, edge = g2.edge(v3, parent4), flipped = false;
        if (!edge) {
          edge = g2.edge(parent4, v3);
          flipped = true;
        }
        g2.node(v3).rank = g2.node(parent4).rank + (flipped ? edge.minlen : -edge.minlen);
      });
    }
    function isTreeEdge(tree, u2, v3) {
      return tree.hasEdge(u2, v3);
    }
    function isDescendant(tree, vLabel, rootLabel) {
      return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/rank/index.js
var require_rank = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/rank/index.js"(exports, module) {
    "use strict";
    var rankUtil = require_util2();
    var longestPath = rankUtil.longestPath;
    var feasibleTree = require_feasible_tree();
    var networkSimplex = require_network_simplex();
    module.exports = rank;
    function rank(g2) {
      switch (g2.graph().ranker) {
        case "network-simplex":
          networkSimplexRanker(g2);
          break;
        case "tight-tree":
          tightTreeRanker(g2);
          break;
        case "longest-path":
          longestPathRanker(g2);
          break;
        default:
          networkSimplexRanker(g2);
      }
    }
    var longestPathRanker = longestPath;
    function tightTreeRanker(g2) {
      longestPath(g2);
      feasibleTree(g2);
    }
    function networkSimplexRanker(g2) {
      networkSimplex(g2);
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/parent-dummy-chains.js
var require_parent_dummy_chains = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/parent-dummy-chains.js"(exports, module) {
    var _2 = require_lodash2();
    module.exports = parentDummyChains;
    function parentDummyChains(g2) {
      var postorderNums = postorder(g2);
      _2.forEach(g2.graph().dummyChains, function(v3) {
        var node = g2.node(v3);
        var edgeObj = node.edgeObj;
        var pathData = findPath(g2, postorderNums, edgeObj.v, edgeObj.w);
        var path = pathData.path;
        var lca = pathData.lca;
        var pathIdx = 0;
        var pathV = path[pathIdx];
        var ascending3 = true;
        while (v3 !== edgeObj.w) {
          node = g2.node(v3);
          if (ascending3) {
            while ((pathV = path[pathIdx]) !== lca && g2.node(pathV).maxRank < node.rank) {
              pathIdx++;
            }
            if (pathV === lca) {
              ascending3 = false;
            }
          }
          if (!ascending3) {
            while (pathIdx < path.length - 1 && g2.node(pathV = path[pathIdx + 1]).minRank <= node.rank) {
              pathIdx++;
            }
            pathV = path[pathIdx];
          }
          g2.setParent(v3, pathV);
          v3 = g2.successors(v3)[0];
        }
      });
    }
    function findPath(g2, postorderNums, v3, w2) {
      var vPath = [];
      var wPath = [];
      var low = Math.min(postorderNums[v3].low, postorderNums[w2].low);
      var lim = Math.max(postorderNums[v3].lim, postorderNums[w2].lim);
      var parent4;
      var lca;
      parent4 = v3;
      do {
        parent4 = g2.parent(parent4);
        vPath.push(parent4);
      } while (parent4 && (postorderNums[parent4].low > low || lim > postorderNums[parent4].lim));
      lca = parent4;
      parent4 = w2;
      while ((parent4 = g2.parent(parent4)) !== lca) {
        wPath.push(parent4);
      }
      return { path: vPath.concat(wPath.reverse()), lca };
    }
    function postorder(g2) {
      var result = {};
      var lim = 0;
      function dfs(v3) {
        var low = lim;
        _2.forEach(g2.children(v3), dfs);
        result[v3] = { low, lim: lim++ };
      }
      _2.forEach(g2.children(), dfs);
      return result;
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/nesting-graph.js
var require_nesting_graph = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/nesting-graph.js"(exports, module) {
    var _2 = require_lodash2();
    var util = require_util();
    module.exports = {
      run,
      cleanup
    };
    function run(g2) {
      var root = util.addDummyNode(g2, "root", {}, "_root");
      var depths = treeDepths(g2);
      var height2 = _2.max(_2.values(depths)) - 1;
      var nodeSep = 2 * height2 + 1;
      g2.graph().nestingRoot = root;
      _2.forEach(g2.edges(), function(e) {
        g2.edge(e).minlen *= nodeSep;
      });
      var weight8 = sumWeights(g2) + 1;
      _2.forEach(g2.children(), function(child) {
        dfs(g2, root, nodeSep, weight8, height2, depths, child);
      });
      g2.graph().nodeRankFactor = nodeSep;
    }
    function dfs(g2, root, nodeSep, weight8, height2, depths, v3) {
      var children = g2.children(v3);
      if (!children.length) {
        if (v3 !== root) {
          g2.setEdge(root, v3, { weight: 0, minlen: nodeSep });
        }
        return;
      }
      var top = util.addBorderNode(g2, "_bt");
      var bottom = util.addBorderNode(g2, "_bb");
      var label = g2.node(v3);
      g2.setParent(top, v3);
      label.borderTop = top;
      g2.setParent(bottom, v3);
      label.borderBottom = bottom;
      _2.forEach(children, function(child) {
        dfs(g2, root, nodeSep, weight8, height2, depths, child);
        var childNode = g2.node(child);
        var childTop = childNode.borderTop ? childNode.borderTop : child;
        var childBottom = childNode.borderBottom ? childNode.borderBottom : child;
        var thisWeight = childNode.borderTop ? weight8 : 2 * weight8;
        var minlen = childTop !== childBottom ? 1 : height2 - depths[v3] + 1;
        g2.setEdge(top, childTop, {
          weight: thisWeight,
          minlen,
          nestingEdge: true
        });
        g2.setEdge(childBottom, bottom, {
          weight: thisWeight,
          minlen,
          nestingEdge: true
        });
      });
      if (!g2.parent(v3)) {
        g2.setEdge(root, top, { weight: 0, minlen: height2 + depths[v3] });
      }
    }
    function treeDepths(g2) {
      var depths = {};
      function dfs2(v3, depth) {
        var children = g2.children(v3);
        if (children && children.length) {
          _2.forEach(children, function(child) {
            dfs2(child, depth + 1);
          });
        }
        depths[v3] = depth;
      }
      _2.forEach(g2.children(), function(v3) {
        dfs2(v3, 1);
      });
      return depths;
    }
    function sumWeights(g2) {
      return _2.reduce(g2.edges(), function(acc, e) {
        return acc + g2.edge(e).weight;
      }, 0);
    }
    function cleanup(g2) {
      var graphLabel = g2.graph();
      g2.removeNode(graphLabel.nestingRoot);
      delete graphLabel.nestingRoot;
      _2.forEach(g2.edges(), function(e) {
        var edge = g2.edge(e);
        if (edge.nestingEdge) {
          g2.removeEdge(e);
        }
      });
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/add-border-segments.js
var require_add_border_segments = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/add-border-segments.js"(exports, module) {
    var _2 = require_lodash2();
    var util = require_util();
    module.exports = addBorderSegments;
    function addBorderSegments(g2) {
      function dfs(v3) {
        var children = g2.children(v3);
        var node = g2.node(v3);
        if (children.length) {
          _2.forEach(children, dfs);
        }
        if (_2.has(node, "minRank")) {
          node.borderLeft = [];
          node.borderRight = [];
          for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {
            addBorderNode(g2, "borderLeft", "_bl", v3, node, rank);
            addBorderNode(g2, "borderRight", "_br", v3, node, rank);
          }
        }
      }
      _2.forEach(g2.children(), dfs);
    }
    function addBorderNode(g2, prop, prefix, sg, sgNode, rank) {
      var label = { width: 0, height: 0, rank, borderType: prop };
      var prev = sgNode[prop][rank - 1];
      var curr = util.addDummyNode(g2, "border", label, prefix);
      sgNode[prop][rank] = curr;
      g2.setParent(curr, sg);
      if (prev) {
        g2.setEdge(prev, curr, { weight: 1 });
      }
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/coordinate-system.js
var require_coordinate_system = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/coordinate-system.js"(exports, module) {
    "use strict";
    var _2 = require_lodash2();
    module.exports = {
      adjust,
      undo
    };
    function adjust(g2) {
      var rankDir = g2.graph().rankdir.toLowerCase();
      if (rankDir === "lr" || rankDir === "rl") {
        swapWidthHeight(g2);
      }
    }
    function undo(g2) {
      var rankDir = g2.graph().rankdir.toLowerCase();
      if (rankDir === "bt" || rankDir === "rl") {
        reverseY(g2);
      }
      if (rankDir === "lr" || rankDir === "rl") {
        swapXY(g2);
        swapWidthHeight(g2);
      }
    }
    function swapWidthHeight(g2) {
      _2.forEach(g2.nodes(), function(v3) {
        swapWidthHeightOne(g2.node(v3));
      });
      _2.forEach(g2.edges(), function(e) {
        swapWidthHeightOne(g2.edge(e));
      });
    }
    function swapWidthHeightOne(attrs) {
      var w2 = attrs.width;
      attrs.width = attrs.height;
      attrs.height = w2;
    }
    function reverseY(g2) {
      _2.forEach(g2.nodes(), function(v3) {
        reverseYOne(g2.node(v3));
      });
      _2.forEach(g2.edges(), function(e) {
        var edge = g2.edge(e);
        _2.forEach(edge.points, reverseYOne);
        if (_2.has(edge, "y")) {
          reverseYOne(edge);
        }
      });
    }
    function reverseYOne(attrs) {
      attrs.y = -attrs.y;
    }
    function swapXY(g2) {
      _2.forEach(g2.nodes(), function(v3) {
        swapXYOne(g2.node(v3));
      });
      _2.forEach(g2.edges(), function(e) {
        var edge = g2.edge(e);
        _2.forEach(edge.points, swapXYOne);
        if (_2.has(edge, "x")) {
          swapXYOne(edge);
        }
      });
    }
    function swapXYOne(attrs) {
      var x3 = attrs.x;
      attrs.x = attrs.y;
      attrs.y = x3;
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/order/init-order.js
var require_init_order = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/order/init-order.js"(exports, module) {
    "use strict";
    var _2 = require_lodash2();
    module.exports = initOrder;
    function initOrder(g2) {
      var visited = {};
      var simpleNodes = _2.filter(g2.nodes(), function(v3) {
        return !g2.children(v3).length;
      });
      var maxRank = _2.max(_2.map(simpleNodes, function(v3) {
        return g2.node(v3).rank;
      }));
      var layers = _2.map(_2.range(maxRank + 1), function() {
        return [];
      });
      function dfs(v3) {
        if (_2.has(visited, v3)) return;
        visited[v3] = true;
        var node = g2.node(v3);
        layers[node.rank].push(v3);
        _2.forEach(g2.successors(v3), dfs);
      }
      var orderedVs = _2.sortBy(simpleNodes, function(v3) {
        return g2.node(v3).rank;
      });
      _2.forEach(orderedVs, dfs);
      return layers;
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/order/cross-count.js
var require_cross_count = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/order/cross-count.js"(exports, module) {
    "use strict";
    var _2 = require_lodash2();
    module.exports = crossCount;
    function crossCount(g2, layering) {
      var cc2 = 0;
      for (var i2 = 1; i2 < layering.length; ++i2) {
        cc2 += twoLayerCrossCount(g2, layering[i2 - 1], layering[i2]);
      }
      return cc2;
    }
    function twoLayerCrossCount(g2, northLayer, southLayer) {
      var southPos = _2.zipObject(
        southLayer,
        _2.map(southLayer, function(v3, i2) {
          return i2;
        })
      );
      var southEntries = _2.flatten(_2.map(northLayer, function(v3) {
        return _2.sortBy(_2.map(g2.outEdges(v3), function(e) {
          return { pos: southPos[e.w], weight: g2.edge(e).weight };
        }), "pos");
      }), true);
      var firstIndex = 1;
      while (firstIndex < southLayer.length) firstIndex <<= 1;
      var treeSize = 2 * firstIndex - 1;
      firstIndex -= 1;
      var tree = _2.map(new Array(treeSize), function() {
        return 0;
      });
      var cc2 = 0;
      _2.forEach(southEntries.forEach(function(entry) {
        var index = entry.pos + firstIndex;
        tree[index] += entry.weight;
        var weightSum = 0;
        while (index > 0) {
          if (index % 2) {
            weightSum += tree[index + 1];
          }
          index = index - 1 >> 1;
          tree[index] += entry.weight;
        }
        cc2 += entry.weight * weightSum;
      }));
      return cc2;
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/order/barycenter.js
var require_barycenter = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/order/barycenter.js"(exports, module) {
    var _2 = require_lodash2();
    module.exports = barycenter;
    function barycenter(g2, movable) {
      return _2.map(movable, function(v3) {
        var inV = g2.inEdges(v3);
        if (!inV.length) {
          return { v: v3 };
        } else {
          var result = _2.reduce(inV, function(acc, e) {
            var edge = g2.edge(e), nodeU = g2.node(e.v);
            return {
              sum: acc.sum + edge.weight * nodeU.order,
              weight: acc.weight + edge.weight
            };
          }, { sum: 0, weight: 0 });
          return {
            v: v3,
            barycenter: result.sum / result.weight,
            weight: result.weight
          };
        }
      });
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/order/resolve-conflicts.js
var require_resolve_conflicts = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/order/resolve-conflicts.js"(exports, module) {
    "use strict";
    var _2 = require_lodash2();
    module.exports = resolveConflicts;
    function resolveConflicts(entries, cg) {
      var mappedEntries = {};
      _2.forEach(entries, function(entry, i2) {
        var tmp = mappedEntries[entry.v] = {
          indegree: 0,
          "in": [],
          out: [],
          vs: [entry.v],
          i: i2
        };
        if (!_2.isUndefined(entry.barycenter)) {
          tmp.barycenter = entry.barycenter;
          tmp.weight = entry.weight;
        }
      });
      _2.forEach(cg.edges(), function(e) {
        var entryV = mappedEntries[e.v];
        var entryW = mappedEntries[e.w];
        if (!_2.isUndefined(entryV) && !_2.isUndefined(entryW)) {
          entryW.indegree++;
          entryV.out.push(mappedEntries[e.w]);
        }
      });
      var sourceSet = _2.filter(mappedEntries, function(entry) {
        return !entry.indegree;
      });
      return doResolveConflicts(sourceSet);
    }
    function doResolveConflicts(sourceSet) {
      var entries = [];
      function handleIn(vEntry) {
        return function(uEntry) {
          if (uEntry.merged) {
            return;
          }
          if (_2.isUndefined(uEntry.barycenter) || _2.isUndefined(vEntry.barycenter) || uEntry.barycenter >= vEntry.barycenter) {
            mergeEntries(vEntry, uEntry);
          }
        };
      }
      function handleOut(vEntry) {
        return function(wEntry) {
          wEntry["in"].push(vEntry);
          if (--wEntry.indegree === 0) {
            sourceSet.push(wEntry);
          }
        };
      }
      while (sourceSet.length) {
        var entry = sourceSet.pop();
        entries.push(entry);
        _2.forEach(entry["in"].reverse(), handleIn(entry));
        _2.forEach(entry.out, handleOut(entry));
      }
      return _2.map(
        _2.filter(entries, function(entry2) {
          return !entry2.merged;
        }),
        function(entry2) {
          return _2.pick(entry2, ["vs", "i", "barycenter", "weight"]);
        }
      );
    }
    function mergeEntries(target, source) {
      var sum = 0;
      var weight8 = 0;
      if (target.weight) {
        sum += target.barycenter * target.weight;
        weight8 += target.weight;
      }
      if (source.weight) {
        sum += source.barycenter * source.weight;
        weight8 += source.weight;
      }
      target.vs = source.vs.concat(target.vs);
      target.barycenter = sum / weight8;
      target.weight = weight8;
      target.i = Math.min(source.i, target.i);
      source.merged = true;
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/order/sort.js
var require_sort = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/order/sort.js"(exports, module) {
    var _2 = require_lodash2();
    var util = require_util();
    module.exports = sort2;
    function sort2(entries, biasRight) {
      var parts = util.partition(entries, function(entry) {
        return _2.has(entry, "barycenter");
      });
      var sortable = parts.lhs, unsortable = _2.sortBy(parts.rhs, function(entry) {
        return -entry.i;
      }), vs2 = [], sum = 0, weight8 = 0, vsIndex = 0;
      sortable.sort(compareWithBias(!!biasRight));
      vsIndex = consumeUnsortable(vs2, unsortable, vsIndex);
      _2.forEach(sortable, function(entry) {
        vsIndex += entry.vs.length;
        vs2.push(entry.vs);
        sum += entry.barycenter * entry.weight;
        weight8 += entry.weight;
        vsIndex = consumeUnsortable(vs2, unsortable, vsIndex);
      });
      var result = { vs: _2.flatten(vs2, true) };
      if (weight8) {
        result.barycenter = sum / weight8;
        result.weight = weight8;
      }
      return result;
    }
    function consumeUnsortable(vs2, unsortable, index) {
      var last2;
      while (unsortable.length && (last2 = _2.last(unsortable)).i <= index) {
        unsortable.pop();
        vs2.push(last2.vs);
        index++;
      }
      return index;
    }
    function compareWithBias(bias) {
      return function(entryV, entryW) {
        if (entryV.barycenter < entryW.barycenter) {
          return -1;
        } else if (entryV.barycenter > entryW.barycenter) {
          return 1;
        }
        return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;
      };
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/order/sort-subgraph.js
var require_sort_subgraph = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/order/sort-subgraph.js"(exports, module) {
    var _2 = require_lodash2();
    var barycenter = require_barycenter();
    var resolveConflicts = require_resolve_conflicts();
    var sort2 = require_sort();
    module.exports = sortSubgraph;
    function sortSubgraph(g2, v3, cg, biasRight) {
      var movable = g2.children(v3);
      var node = g2.node(v3);
      var bl2 = node ? node.borderLeft : void 0;
      var br2 = node ? node.borderRight : void 0;
      var subgraphs = {};
      if (bl2) {
        movable = _2.filter(movable, function(w2) {
          return w2 !== bl2 && w2 !== br2;
        });
      }
      var barycenters = barycenter(g2, movable);
      _2.forEach(barycenters, function(entry) {
        if (g2.children(entry.v).length) {
          var subgraphResult = sortSubgraph(g2, entry.v, cg, biasRight);
          subgraphs[entry.v] = subgraphResult;
          if (_2.has(subgraphResult, "barycenter")) {
            mergeBarycenters(entry, subgraphResult);
          }
        }
      });
      var entries = resolveConflicts(barycenters, cg);
      expandSubgraphs(entries, subgraphs);
      var result = sort2(entries, biasRight);
      if (bl2) {
        result.vs = _2.flatten([bl2, result.vs, br2], true);
        if (g2.predecessors(bl2).length) {
          var blPred = g2.node(g2.predecessors(bl2)[0]), brPred = g2.node(g2.predecessors(br2)[0]);
          if (!_2.has(result, "barycenter")) {
            result.barycenter = 0;
            result.weight = 0;
          }
          result.barycenter = (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);
          result.weight += 2;
        }
      }
      return result;
    }
    function expandSubgraphs(entries, subgraphs) {
      _2.forEach(entries, function(entry) {
        entry.vs = _2.flatten(entry.vs.map(function(v3) {
          if (subgraphs[v3]) {
            return subgraphs[v3].vs;
          }
          return v3;
        }), true);
      });
    }
    function mergeBarycenters(target, other) {
      if (!_2.isUndefined(target.barycenter)) {
        target.barycenter = (target.barycenter * target.weight + other.barycenter * other.weight) / (target.weight + other.weight);
        target.weight += other.weight;
      } else {
        target.barycenter = other.barycenter;
        target.weight = other.weight;
      }
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/order/build-layer-graph.js
var require_build_layer_graph = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/order/build-layer-graph.js"(exports, module) {
    var _2 = require_lodash2();
    var Graph = require_graphlib().Graph;
    module.exports = buildLayerGraph;
    function buildLayerGraph(g2, rank, relationship) {
      var root = createRootNode(g2), result = new Graph({ compound: true }).setGraph({ root }).setDefaultNodeLabel(function(v3) {
        return g2.node(v3);
      });
      _2.forEach(g2.nodes(), function(v3) {
        var node = g2.node(v3), parent4 = g2.parent(v3);
        if (node.rank === rank || node.minRank <= rank && rank <= node.maxRank) {
          result.setNode(v3);
          result.setParent(v3, parent4 || root);
          _2.forEach(g2[relationship](v3), function(e) {
            var u2 = e.v === v3 ? e.w : e.v, edge = result.edge(u2, v3), weight8 = !_2.isUndefined(edge) ? edge.weight : 0;
            result.setEdge(u2, v3, { weight: g2.edge(e).weight + weight8 });
          });
          if (_2.has(node, "minRank")) {
            result.setNode(v3, {
              borderLeft: node.borderLeft[rank],
              borderRight: node.borderRight[rank]
            });
          }
        }
      });
      return result;
    }
    function createRootNode(g2) {
      var v3;
      while (g2.hasNode(v3 = _2.uniqueId("_root"))) ;
      return v3;
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/order/add-subgraph-constraints.js
var require_add_subgraph_constraints = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/order/add-subgraph-constraints.js"(exports, module) {
    var _2 = require_lodash2();
    module.exports = addSubgraphConstraints;
    function addSubgraphConstraints(g2, cg, vs2) {
      var prev = {}, rootPrev;
      _2.forEach(vs2, function(v3) {
        var child = g2.parent(v3), parent4, prevChild;
        while (child) {
          parent4 = g2.parent(child);
          if (parent4) {
            prevChild = prev[parent4];
            prev[parent4] = child;
          } else {
            prevChild = rootPrev;
            rootPrev = child;
          }
          if (prevChild && prevChild !== child) {
            cg.setEdge(prevChild, child);
            return;
          }
          child = parent4;
        }
      });
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/order/index.js
var require_order = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/order/index.js"(exports, module) {
    "use strict";
    var _2 = require_lodash2();
    var initOrder = require_init_order();
    var crossCount = require_cross_count();
    var sortSubgraph = require_sort_subgraph();
    var buildLayerGraph = require_build_layer_graph();
    var addSubgraphConstraints = require_add_subgraph_constraints();
    var Graph = require_graphlib().Graph;
    var util = require_util();
    module.exports = order;
    function order(g2) {
      var maxRank = util.maxRank(g2), downLayerGraphs = buildLayerGraphs(g2, _2.range(1, maxRank + 1), "inEdges"), upLayerGraphs = buildLayerGraphs(g2, _2.range(maxRank - 1, -1, -1), "outEdges");
      var layering = initOrder(g2);
      assignOrder(g2, layering);
      var bestCC = Number.POSITIVE_INFINITY, best;
      for (var i2 = 0, lastBest = 0; lastBest < 4; ++i2, ++lastBest) {
        sweepLayerGraphs(i2 % 2 ? downLayerGraphs : upLayerGraphs, i2 % 4 >= 2);
        layering = util.buildLayerMatrix(g2);
        var cc2 = crossCount(g2, layering);
        if (cc2 < bestCC) {
          lastBest = 0;
          best = _2.cloneDeep(layering);
          bestCC = cc2;
        }
      }
      assignOrder(g2, best);
    }
    function buildLayerGraphs(g2, ranks, relationship) {
      return _2.map(ranks, function(rank) {
        return buildLayerGraph(g2, rank, relationship);
      });
    }
    function sweepLayerGraphs(layerGraphs, biasRight) {
      var cg = new Graph();
      _2.forEach(layerGraphs, function(lg) {
        var root = lg.graph().root;
        var sorted = sortSubgraph(lg, root, cg, biasRight);
        _2.forEach(sorted.vs, function(v3, i2) {
          lg.node(v3).order = i2;
        });
        addSubgraphConstraints(lg, cg, sorted.vs);
      });
    }
    function assignOrder(g2, layering) {
      _2.forEach(layering, function(layer) {
        _2.forEach(layer, function(v3, i2) {
          g2.node(v3).order = i2;
        });
      });
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/position/bk.js
var require_bk = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/position/bk.js"(exports, module) {
    "use strict";
    var _2 = require_lodash2();
    var Graph = require_graphlib().Graph;
    var util = require_util();
    module.exports = {
      positionX,
      findType1Conflicts,
      findType2Conflicts,
      addConflict,
      hasConflict,
      verticalAlignment,
      horizontalCompaction,
      alignCoordinates,
      findSmallestWidthAlignment,
      balance
    };
    function findType1Conflicts(g2, layering) {
      var conflicts = {};
      function visitLayer(prevLayer, layer) {
        var k0 = 0, scanPos = 0, prevLayerLength = prevLayer.length, lastNode = _2.last(layer);
        _2.forEach(layer, function(v3, i2) {
          var w2 = findOtherInnerSegmentNode(g2, v3), k1 = w2 ? g2.node(w2).order : prevLayerLength;
          if (w2 || v3 === lastNode) {
            _2.forEach(layer.slice(scanPos, i2 + 1), function(scanNode) {
              _2.forEach(g2.predecessors(scanNode), function(u2) {
                var uLabel = g2.node(u2), uPos = uLabel.order;
                if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g2.node(scanNode).dummy)) {
                  addConflict(conflicts, u2, scanNode);
                }
              });
            });
            scanPos = i2 + 1;
            k0 = k1;
          }
        });
        return layer;
      }
      _2.reduce(layering, visitLayer);
      return conflicts;
    }
    function findType2Conflicts(g2, layering) {
      var conflicts = {};
      if (g2.nodeCount() > 1e3) {
        return conflicts;
      }
      function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {
        var v3;
        _2.forEach(_2.range(southPos, southEnd), function(i2) {
          v3 = south[i2];
          if (g2.node(v3).dummy) {
            _2.forEach(g2.predecessors(v3), function(u2) {
              var uNode = g2.node(u2);
              if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {
                addConflict(conflicts, u2, v3);
              }
            });
          }
        });
      }
      function visitLayer(north, south) {
        var prevNorthPos = -1, nextNorthPos, southPos = 0;
        _2.forEach(south, function(v3, southLookahead) {
          if (g2.node(v3).dummy === "border") {
            var predecessors = g2.predecessors(v3);
            if (predecessors.length) {
              nextNorthPos = g2.node(predecessors[0]).order;
              scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);
              southPos = southLookahead;
              prevNorthPos = nextNorthPos;
            }
          }
          scan(south, southPos, south.length, nextNorthPos, north.length);
        });
        return south;
      }
      _2.reduce(layering, visitLayer);
      return conflicts;
    }
    function findOtherInnerSegmentNode(g2, v3) {
      if (g2.node(v3).dummy) {
        return _2.find(g2.predecessors(v3), function(u2) {
          return g2.node(u2).dummy;
        });
      }
    }
    function addConflict(conflicts, v3, w2) {
      if (v3 > w2) {
        var tmp = v3;
        v3 = w2;
        w2 = tmp;
      }
      var conflictsV = conflicts[v3];
      if (!conflictsV) {
        conflicts[v3] = conflictsV = {};
      }
      conflictsV[w2] = true;
    }
    function hasConflict(conflicts, v3, w2) {
      if (v3 > w2) {
        var tmp = v3;
        v3 = w2;
        w2 = tmp;
      }
      return _2.has(conflicts[v3], w2);
    }
    function verticalAlignment(g2, layering, conflicts, neighborFn) {
      var root = {}, align = {}, pos = {};
      _2.forEach(layering, function(layer) {
        _2.forEach(layer, function(v3, order) {
          root[v3] = v3;
          align[v3] = v3;
          pos[v3] = order;
        });
      });
      _2.forEach(layering, function(layer) {
        var prevIdx = -1;
        _2.forEach(layer, function(v3) {
          var ws2 = neighborFn(v3);
          if (ws2.length) {
            ws2 = _2.sortBy(ws2, function(w3) {
              return pos[w3];
            });
            var mp = (ws2.length - 1) / 2;
            for (var i2 = Math.floor(mp), il2 = Math.ceil(mp); i2 <= il2; ++i2) {
              var w2 = ws2[i2];
              if (align[v3] === v3 && prevIdx < pos[w2] && !hasConflict(conflicts, v3, w2)) {
                align[w2] = v3;
                align[v3] = root[v3] = root[w2];
                prevIdx = pos[w2];
              }
            }
          }
        });
      });
      return { root, align };
    }
    function horizontalCompaction(g2, layering, root, align, reverseSep) {
      var xs2 = {}, blockG = buildBlockGraph(g2, layering, root, reverseSep), borderType = reverseSep ? "borderLeft" : "borderRight";
      function iterate(setXsFunc, nextNodesFunc) {
        var stack = blockG.nodes();
        var elem = stack.pop();
        var visited = {};
        while (elem) {
          if (visited[elem]) {
            setXsFunc(elem);
          } else {
            visited[elem] = true;
            stack.push(elem);
            stack = stack.concat(nextNodesFunc(elem));
          }
          elem = stack.pop();
        }
      }
      function pass1(elem) {
        xs2[elem] = blockG.inEdges(elem).reduce(function(acc, e) {
          return Math.max(acc, xs2[e.v] + blockG.edge(e));
        }, 0);
      }
      function pass2(elem) {
        var min4 = blockG.outEdges(elem).reduce(function(acc, e) {
          return Math.min(acc, xs2[e.w] - blockG.edge(e));
        }, Number.POSITIVE_INFINITY);
        var node = g2.node(elem);
        if (min4 !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {
          xs2[elem] = Math.max(xs2[elem], min4);
        }
      }
      iterate(pass1, blockG.predecessors.bind(blockG));
      iterate(pass2, blockG.successors.bind(blockG));
      _2.forEach(align, function(v3) {
        xs2[v3] = xs2[root[v3]];
      });
      return xs2;
    }
    function buildBlockGraph(g2, layering, root, reverseSep) {
      var blockGraph = new Graph(), graphLabel = g2.graph(), sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);
      _2.forEach(layering, function(layer) {
        var u2;
        _2.forEach(layer, function(v3) {
          var vRoot = root[v3];
          blockGraph.setNode(vRoot);
          if (u2) {
            var uRoot = root[u2], prevMax = blockGraph.edge(uRoot, vRoot);
            blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g2, v3, u2), prevMax || 0));
          }
          u2 = v3;
        });
      });
      return blockGraph;
    }
    function findSmallestWidthAlignment(g2, xss) {
      return _2.minBy(_2.values(xss), function(xs2) {
        var max5 = Number.NEGATIVE_INFINITY;
        var min4 = Number.POSITIVE_INFINITY;
        _2.forIn(xs2, function(x3, v3) {
          var halfWidth = width2(g2, v3) / 2;
          max5 = Math.max(x3 + halfWidth, max5);
          min4 = Math.min(x3 - halfWidth, min4);
        });
        return max5 - min4;
      });
    }
    function alignCoordinates(xss, alignTo) {
      var alignToVals = _2.values(alignTo), alignToMin = _2.min(alignToVals), alignToMax = _2.max(alignToVals);
      _2.forEach(["u", "d"], function(vert) {
        _2.forEach(["l", "r"], function(horiz) {
          var alignment = vert + horiz, xs2 = xss[alignment], delta;
          if (xs2 === alignTo) return;
          var xsVals = _2.values(xs2);
          delta = horiz === "l" ? alignToMin - _2.min(xsVals) : alignToMax - _2.max(xsVals);
          if (delta) {
            xss[alignment] = _2.mapValues(xs2, function(x3) {
              return x3 + delta;
            });
          }
        });
      });
    }
    function balance(xss, align) {
      return _2.mapValues(xss.ul, function(ignore, v3) {
        if (align) {
          return xss[align.toLowerCase()][v3];
        } else {
          var xs2 = _2.sortBy(_2.map(xss, v3));
          return (xs2[1] + xs2[2]) / 2;
        }
      });
    }
    function positionX(g2) {
      var layering = util.buildLayerMatrix(g2);
      var conflicts = _2.merge(
        findType1Conflicts(g2, layering),
        findType2Conflicts(g2, layering)
      );
      var xss = {};
      var adjustedLayering;
      _2.forEach(["u", "d"], function(vert) {
        adjustedLayering = vert === "u" ? layering : _2.values(layering).reverse();
        _2.forEach(["l", "r"], function(horiz) {
          if (horiz === "r") {
            adjustedLayering = _2.map(adjustedLayering, function(inner) {
              return _2.values(inner).reverse();
            });
          }
          var neighborFn = (vert === "u" ? g2.predecessors : g2.successors).bind(g2);
          var align = verticalAlignment(g2, adjustedLayering, conflicts, neighborFn);
          var xs2 = horizontalCompaction(
            g2,
            adjustedLayering,
            align.root,
            align.align,
            horiz === "r"
          );
          if (horiz === "r") {
            xs2 = _2.mapValues(xs2, function(x3) {
              return -x3;
            });
          }
          xss[vert + horiz] = xs2;
        });
      });
      var smallestWidth = findSmallestWidthAlignment(g2, xss);
      alignCoordinates(xss, smallestWidth);
      return balance(xss, g2.graph().align);
    }
    function sep(nodeSep, edgeSep, reverseSep) {
      return function(g2, v3, w2) {
        var vLabel = g2.node(v3);
        var wLabel = g2.node(w2);
        var sum = 0;
        var delta;
        sum += vLabel.width / 2;
        if (_2.has(vLabel, "labelpos")) {
          switch (vLabel.labelpos.toLowerCase()) {
            case "l":
              delta = -vLabel.width / 2;
              break;
            case "r":
              delta = vLabel.width / 2;
              break;
          }
        }
        if (delta) {
          sum += reverseSep ? delta : -delta;
        }
        delta = 0;
        sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;
        sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;
        sum += wLabel.width / 2;
        if (_2.has(wLabel, "labelpos")) {
          switch (wLabel.labelpos.toLowerCase()) {
            case "l":
              delta = wLabel.width / 2;
              break;
            case "r":
              delta = -wLabel.width / 2;
              break;
          }
        }
        if (delta) {
          sum += reverseSep ? delta : -delta;
        }
        delta = 0;
        return sum;
      };
    }
    function width2(g2, v3) {
      return g2.node(v3).width;
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/position/index.js
var require_position = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/position/index.js"(exports, module) {
    "use strict";
    var _2 = require_lodash2();
    var util = require_util();
    var positionX = require_bk().positionX;
    module.exports = position3;
    function position3(g2) {
      g2 = util.asNonCompoundGraph(g2);
      positionY(g2);
      _2.forEach(positionX(g2), function(x3, v3) {
        g2.node(v3).x = x3;
      });
    }
    function positionY(g2) {
      var layering = util.buildLayerMatrix(g2);
      var rankSep = g2.graph().ranksep;
      var prevY = 0;
      _2.forEach(layering, function(layer) {
        var maxHeight = _2.max(_2.map(layer, function(v3) {
          return g2.node(v3).height;
        }));
        _2.forEach(layer, function(v3) {
          g2.node(v3).y = prevY + maxHeight / 2;
        });
        prevY += maxHeight + rankSep;
      });
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/layout.js
var require_layout = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/layout.js"(exports, module) {
    "use strict";
    var _2 = require_lodash2();
    var acyclic = require_acyclic();
    var normalize4 = require_normalize();
    var rank = require_rank();
    var normalizeRanks = require_util().normalizeRanks;
    var parentDummyChains = require_parent_dummy_chains();
    var removeEmptyRanks = require_util().removeEmptyRanks;
    var nestingGraph = require_nesting_graph();
    var addBorderSegments = require_add_border_segments();
    var coordinateSystem = require_coordinate_system();
    var order = require_order();
    var position3 = require_position();
    var util = require_util();
    var Graph = require_graphlib().Graph;
    module.exports = layout6;
    function layout6(g2, opts) {
      var time2 = opts && opts.debugTiming ? util.time : util.notime;
      var layoutGraph2 = time2("layout", function() {
        layoutGraph2 = time2("  buildLayoutGraph", function() {
          return buildLayoutGraph(g2);
        });
        time2("  runLayout", function() {
          runLayout(layoutGraph2, time2);
        });
        time2("  updateInputGraph", function() {
          updateInputGraph(g2, layoutGraph2);
        });
        return layoutGraph2;
      });
      return layoutGraph2;
    }
    function runLayout(g2, time2) {
      time2("    makeSpaceForEdgeLabels", function() {
        makeSpaceForEdgeLabels(g2);
      });
      time2("    removeSelfEdges", function() {
        removeSelfEdges(g2);
      });
      time2("    acyclic", function() {
        acyclic.run(g2);
      });
      time2("    nestingGraph.run", function() {
        nestingGraph.run(g2);
      });
      time2("    rank", function() {
        rank(util.asNonCompoundGraph(g2));
      });
      time2("    injectEdgeLabelProxies", function() {
        injectEdgeLabelProxies(g2);
      });
      time2("    removeEmptyRanks", function() {
        removeEmptyRanks(g2);
      });
      time2("    nestingGraph.cleanup", function() {
        nestingGraph.cleanup(g2);
      });
      time2("    normalizeRanks", function() {
        normalizeRanks(g2);
      });
      time2("    assignRankMinMax", function() {
        assignRankMinMax(g2);
      });
      time2("    removeEdgeLabelProxies", function() {
        removeEdgeLabelProxies(g2);
      });
      time2("    normalize.run", function() {
        normalize4.run(g2);
      });
      time2("    parentDummyChains", function() {
        parentDummyChains(g2);
      });
      time2("    addBorderSegments", function() {
        addBorderSegments(g2);
      });
      time2("    order", function() {
        order(g2);
      });
      time2("    insertSelfEdges", function() {
        insertSelfEdges(g2);
      });
      time2("    adjustCoordinateSystem", function() {
        coordinateSystem.adjust(g2);
      });
      time2("    position", function() {
        position3(g2);
      });
      time2("    positionSelfEdges", function() {
        positionSelfEdges(g2);
      });
      time2("    removeBorderNodes", function() {
        removeBorderNodes(g2);
      });
      time2("    normalize.undo", function() {
        normalize4.undo(g2);
      });
      time2("    fixupEdgeLabelCoords", function() {
        fixupEdgeLabelCoords(g2);
      });
      time2("    undoCoordinateSystem", function() {
        coordinateSystem.undo(g2);
      });
      time2("    translateGraph", function() {
        translateGraph(g2);
      });
      time2("    assignNodeIntersects", function() {
        assignNodeIntersects(g2);
      });
      time2("    reversePoints", function() {
        reversePointsForReversedEdges(g2);
      });
      time2("    acyclic.undo", function() {
        acyclic.undo(g2);
      });
    }
    function updateInputGraph(inputGraph, layoutGraph2) {
      _2.forEach(inputGraph.nodes(), function(v3) {
        var inputLabel = inputGraph.node(v3);
        var layoutLabel = layoutGraph2.node(v3);
        if (inputLabel) {
          inputLabel.x = layoutLabel.x;
          inputLabel.y = layoutLabel.y;
          if (layoutGraph2.children(v3).length) {
            inputLabel.width = layoutLabel.width;
            inputLabel.height = layoutLabel.height;
          }
        }
      });
      _2.forEach(inputGraph.edges(), function(e) {
        var inputLabel = inputGraph.edge(e);
        var layoutLabel = layoutGraph2.edge(e);
        inputLabel.points = layoutLabel.points;
        if (_2.has(layoutLabel, "x")) {
          inputLabel.x = layoutLabel.x;
          inputLabel.y = layoutLabel.y;
        }
      });
      inputGraph.graph().width = layoutGraph2.graph().width;
      inputGraph.graph().height = layoutGraph2.graph().height;
    }
    var graphNumAttrs = ["nodesep", "edgesep", "ranksep", "marginx", "marginy"];
    var graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: "tb" };
    var graphAttrs = ["acyclicer", "ranker", "rankdir", "align"];
    var nodeNumAttrs = ["width", "height"];
    var nodeDefaults = { width: 0, height: 0 };
    var edgeNumAttrs = ["minlen", "weight", "width", "height", "labeloffset"];
    var edgeDefaults = {
      minlen: 1,
      weight: 1,
      width: 0,
      height: 0,
      labeloffset: 10,
      labelpos: "r"
    };
    var edgeAttrs = ["labelpos"];
    function buildLayoutGraph(inputGraph) {
      var g2 = new Graph({ multigraph: true, compound: true });
      var graph = canonicalize(inputGraph.graph());
      g2.setGraph(_2.merge(
        {},
        graphDefaults,
        selectNumberAttrs(graph, graphNumAttrs),
        _2.pick(graph, graphAttrs)
      ));
      _2.forEach(inputGraph.nodes(), function(v3) {
        var node = canonicalize(inputGraph.node(v3));
        g2.setNode(v3, _2.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));
        g2.setParent(v3, inputGraph.parent(v3));
      });
      _2.forEach(inputGraph.edges(), function(e) {
        var edge = canonicalize(inputGraph.edge(e));
        g2.setEdge(e, _2.merge(
          {},
          edgeDefaults,
          selectNumberAttrs(edge, edgeNumAttrs),
          _2.pick(edge, edgeAttrs)
        ));
      });
      return g2;
    }
    function makeSpaceForEdgeLabels(g2) {
      var graph = g2.graph();
      graph.ranksep /= 2;
      _2.forEach(g2.edges(), function(e) {
        var edge = g2.edge(e);
        edge.minlen *= 2;
        if (edge.labelpos.toLowerCase() !== "c") {
          if (graph.rankdir === "TB" || graph.rankdir === "BT") {
            edge.width += edge.labeloffset;
          } else {
            edge.height += edge.labeloffset;
          }
        }
      });
    }
    function injectEdgeLabelProxies(g2) {
      _2.forEach(g2.edges(), function(e) {
        var edge = g2.edge(e);
        if (edge.width && edge.height) {
          var v3 = g2.node(e.v);
          var w2 = g2.node(e.w);
          var label = { rank: (w2.rank - v3.rank) / 2 + v3.rank, e };
          util.addDummyNode(g2, "edge-proxy", label, "_ep");
        }
      });
    }
    function assignRankMinMax(g2) {
      var maxRank = 0;
      _2.forEach(g2.nodes(), function(v3) {
        var node = g2.node(v3);
        if (node.borderTop) {
          node.minRank = g2.node(node.borderTop).rank;
          node.maxRank = g2.node(node.borderBottom).rank;
          maxRank = _2.max(maxRank, node.maxRank);
        }
      });
      g2.graph().maxRank = maxRank;
    }
    function removeEdgeLabelProxies(g2) {
      _2.forEach(g2.nodes(), function(v3) {
        var node = g2.node(v3);
        if (node.dummy === "edge-proxy") {
          g2.edge(node.e).labelRank = node.rank;
          g2.removeNode(v3);
        }
      });
    }
    function translateGraph(g2) {
      var minX = Number.POSITIVE_INFINITY;
      var maxX = 0;
      var minY = Number.POSITIVE_INFINITY;
      var maxY = 0;
      var graphLabel = g2.graph();
      var marginX = graphLabel.marginx || 0;
      var marginY = graphLabel.marginy || 0;
      function getExtremes(attrs) {
        var x3 = attrs.x;
        var y3 = attrs.y;
        var w2 = attrs.width;
        var h2 = attrs.height;
        minX = Math.min(minX, x3 - w2 / 2);
        maxX = Math.max(maxX, x3 + w2 / 2);
        minY = Math.min(minY, y3 - h2 / 2);
        maxY = Math.max(maxY, y3 + h2 / 2);
      }
      _2.forEach(g2.nodes(), function(v3) {
        getExtremes(g2.node(v3));
      });
      _2.forEach(g2.edges(), function(e) {
        var edge = g2.edge(e);
        if (_2.has(edge, "x")) {
          getExtremes(edge);
        }
      });
      minX -= marginX;
      minY -= marginY;
      _2.forEach(g2.nodes(), function(v3) {
        var node = g2.node(v3);
        node.x -= minX;
        node.y -= minY;
      });
      _2.forEach(g2.edges(), function(e) {
        var edge = g2.edge(e);
        _2.forEach(edge.points, function(p3) {
          p3.x -= minX;
          p3.y -= minY;
        });
        if (_2.has(edge, "x")) {
          edge.x -= minX;
        }
        if (_2.has(edge, "y")) {
          edge.y -= minY;
        }
      });
      graphLabel.width = maxX - minX + marginX;
      graphLabel.height = maxY - minY + marginY;
    }
    function assignNodeIntersects(g2) {
      _2.forEach(g2.edges(), function(e) {
        var edge = g2.edge(e);
        var nodeV = g2.node(e.v);
        var nodeW = g2.node(e.w);
        var p1, p22;
        if (!edge.points) {
          edge.points = [];
          p1 = nodeW;
          p22 = nodeV;
        } else {
          p1 = edge.points[0];
          p22 = edge.points[edge.points.length - 1];
        }
        edge.points.unshift(util.intersectRect(nodeV, p1));
        edge.points.push(util.intersectRect(nodeW, p22));
      });
    }
    function fixupEdgeLabelCoords(g2) {
      _2.forEach(g2.edges(), function(e) {
        var edge = g2.edge(e);
        if (_2.has(edge, "x")) {
          if (edge.labelpos === "l" || edge.labelpos === "r") {
            edge.width -= edge.labeloffset;
          }
          switch (edge.labelpos) {
            case "l":
              edge.x -= edge.width / 2 + edge.labeloffset;
              break;
            case "r":
              edge.x += edge.width / 2 + edge.labeloffset;
              break;
          }
        }
      });
    }
    function reversePointsForReversedEdges(g2) {
      _2.forEach(g2.edges(), function(e) {
        var edge = g2.edge(e);
        if (edge.reversed) {
          edge.points.reverse();
        }
      });
    }
    function removeBorderNodes(g2) {
      _2.forEach(g2.nodes(), function(v3) {
        if (g2.children(v3).length) {
          var node = g2.node(v3);
          var t = g2.node(node.borderTop);
          var b2 = g2.node(node.borderBottom);
          var l2 = g2.node(_2.last(node.borderLeft));
          var r2 = g2.node(_2.last(node.borderRight));
          node.width = Math.abs(r2.x - l2.x);
          node.height = Math.abs(b2.y - t.y);
          node.x = l2.x + node.width / 2;
          node.y = t.y + node.height / 2;
        }
      });
      _2.forEach(g2.nodes(), function(v3) {
        if (g2.node(v3).dummy === "border") {
          g2.removeNode(v3);
        }
      });
    }
    function removeSelfEdges(g2) {
      _2.forEach(g2.edges(), function(e) {
        if (e.v === e.w) {
          var node = g2.node(e.v);
          if (!node.selfEdges) {
            node.selfEdges = [];
          }
          node.selfEdges.push({ e, label: g2.edge(e) });
          g2.removeEdge(e);
        }
      });
    }
    function insertSelfEdges(g2) {
      var layers = util.buildLayerMatrix(g2);
      _2.forEach(layers, function(layer) {
        var orderShift = 0;
        _2.forEach(layer, function(v3, i2) {
          var node = g2.node(v3);
          node.order = i2 + orderShift;
          _2.forEach(node.selfEdges, function(selfEdge) {
            util.addDummyNode(g2, "selfedge", {
              width: selfEdge.label.width,
              height: selfEdge.label.height,
              rank: node.rank,
              order: i2 + ++orderShift,
              e: selfEdge.e,
              label: selfEdge.label
            }, "_se");
          });
          delete node.selfEdges;
        });
      });
    }
    function positionSelfEdges(g2) {
      _2.forEach(g2.nodes(), function(v3) {
        var node = g2.node(v3);
        if (node.dummy === "selfedge") {
          var selfNode = g2.node(node.e.v);
          var x3 = selfNode.x + selfNode.width / 2;
          var y3 = selfNode.y;
          var dx = node.x - x3;
          var dy = selfNode.height / 2;
          g2.setEdge(node.e, node.label);
          g2.removeNode(v3);
          node.label.points = [
            { x: x3 + 2 * dx / 3, y: y3 - dy },
            { x: x3 + 5 * dx / 6, y: y3 - dy },
            { x: x3 + dx, y: y3 },
            { x: x3 + 5 * dx / 6, y: y3 + dy },
            { x: x3 + 2 * dx / 3, y: y3 + dy }
          ];
          node.label.x = node.x;
          node.label.y = node.y;
        }
      });
    }
    function selectNumberAttrs(obj, attrs) {
      return _2.mapValues(_2.pick(obj, attrs), Number);
    }
    function canonicalize(attrs) {
      var newAttrs = {};
      _2.forEach(attrs, function(v3, k2) {
        newAttrs[k2.toLowerCase()] = v3;
      });
      return newAttrs;
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/debug.js
var require_debug = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/debug.js"(exports, module) {
    var _2 = require_lodash2();
    var util = require_util();
    var Graph = require_graphlib().Graph;
    module.exports = {
      debugOrdering
    };
    function debugOrdering(g2) {
      var layerMatrix = util.buildLayerMatrix(g2);
      var h2 = new Graph({ compound: true, multigraph: true }).setGraph({});
      _2.forEach(g2.nodes(), function(v3) {
        h2.setNode(v3, { label: v3 });
        h2.setParent(v3, "layer" + g2.node(v3).rank);
      });
      _2.forEach(g2.edges(), function(e) {
        h2.setEdge(e.v, e.w, {}, e.name);
      });
      _2.forEach(layerMatrix, function(layer, i2) {
        var layerV = "layer" + i2;
        h2.setNode(layerV, { rank: "same" });
        _2.reduce(layer, function(u2, v3) {
          h2.setEdge(u2, v3, { style: "invis" });
          return v3;
        });
      });
      return h2;
    }
  }
});

// node_modules/@neo4j-bloom/dagre/lib/version.js
var require_version2 = __commonJS({
  "node_modules/@neo4j-bloom/dagre/lib/version.js"(exports, module) {
    module.exports = "0.8.14";
  }
});

// node_modules/@neo4j-bloom/dagre/index.js
var require_dagre = __commonJS({
  "node_modules/@neo4j-bloom/dagre/index.js"(exports, module) {
    module.exports = {
      graphlib: require_graphlib(),
      layout: require_layout(),
      debug: require_debug(),
      util: {
        time: require_util().time,
        notime: require_util().notime
      },
      version: require_version2()
    };
  }
});

// node_modules/bin-pack/packer.growing.js
var require_packer_growing = __commonJS({
  "node_modules/bin-pack/packer.growing.js"(exports, module) {
    var GrowingPacker = function() {
    };
    GrowingPacker.prototype = {
      fit: function(blocks) {
        var n2, node, block, len = blocks.length, fit2;
        var width2 = len > 0 ? blocks[0].width : 0;
        var height2 = len > 0 ? blocks[0].height : 0;
        this.root = { x: 0, y: 0, width: width2, height: height2 };
        for (n2 = 0; n2 < len; n2++) {
          block = blocks[n2];
          if (node = this.findNode(this.root, block.width, block.height)) {
            fit2 = this.splitNode(node, block.width, block.height);
            block.x = fit2.x;
            block.y = fit2.y;
          } else {
            fit2 = this.growNode(block.width, block.height);
            block.x = fit2.x;
            block.y = fit2.y;
          }
        }
      },
      findNode: function(root, width2, height2) {
        if (root.used)
          return this.findNode(root.right, width2, height2) || this.findNode(root.down, width2, height2);
        else if (width2 <= root.width && height2 <= root.height)
          return root;
        else
          return null;
      },
      splitNode: function(node, width2, height2) {
        node.used = true;
        node.down = { x: node.x, y: node.y + height2, width: node.width, height: node.height - height2 };
        node.right = { x: node.x + width2, y: node.y, width: node.width - width2, height: height2 };
        return node;
      },
      growNode: function(width2, height2) {
        var canGrowDown = width2 <= this.root.width;
        var canGrowRight = height2 <= this.root.height;
        var shouldGrowRight = canGrowRight && this.root.height >= this.root.width + width2;
        var shouldGrowDown = canGrowDown && this.root.width >= this.root.height + height2;
        if (shouldGrowRight)
          return this.growRight(width2, height2);
        else if (shouldGrowDown)
          return this.growDown(width2, height2);
        else if (canGrowRight)
          return this.growRight(width2, height2);
        else if (canGrowDown)
          return this.growDown(width2, height2);
        else
          return null;
      },
      growRight: function(width2, height2) {
        this.root = {
          used: true,
          x: 0,
          y: 0,
          width: this.root.width + width2,
          height: this.root.height,
          down: this.root,
          right: { x: this.root.width, y: 0, width: width2, height: this.root.height }
        };
        var node;
        if (node = this.findNode(this.root, width2, height2))
          return this.splitNode(node, width2, height2);
        else
          return null;
      },
      growDown: function(width2, height2) {
        this.root = {
          used: true,
          x: 0,
          y: 0,
          width: this.root.width,
          height: this.root.height + height2,
          down: { x: 0, y: this.root.height, width: this.root.width, height: height2 },
          right: this.root
        };
        var node;
        if (node = this.findNode(this.root, width2, height2))
          return this.splitNode(node, width2, height2);
        else
          return null;
      }
    };
    module.exports = GrowingPacker;
  }
});

// node_modules/bin-pack/index.js
var require_bin_pack = __commonJS({
  "node_modules/bin-pack/index.js"(exports, module) {
    "use strict";
    var GrowingPacker = require_packer_growing();
    module.exports = function(items, options3) {
      options3 = options3 || {};
      var packer = new GrowingPacker();
      var inPlace = options3.inPlace || false;
      var newItems = items.map(function(item) {
        return inPlace ? item : { width: item.width, height: item.height, item };
      });
      newItems = newItems.sort(function(a2, b2) {
        return b2.width * b2.height - a2.width * a2.height;
      });
      packer.fit(newItems);
      var w2 = newItems.reduce(function(curr, item) {
        return Math.max(curr, item.x + item.width);
      }, 0);
      var h2 = newItems.reduce(function(curr, item) {
        return Math.max(curr, item.y + item.height);
      }, 0);
      var ret = {
        width: w2,
        height: h2
      };
      if (!inPlace) {
        ret.items = newItems;
      }
      return ret;
    };
  }
});

// node_modules/rbush/rbush.min.js
var require_rbush_min = __commonJS({
  "node_modules/rbush/rbush.min.js"(exports, module) {
    !function(t, i2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = i2() : "function" == typeof define && define.amd ? define(i2) : (t = t || self).RBush = i2();
    }(exports, function() {
      "use strict";
      function t(t2, r3, e2, a3, h3) {
        !function t3(n3, r4, e3, a4, h4) {
          for (; a4 > e3; ) {
            if (a4 - e3 > 600) {
              var o3 = a4 - e3 + 1, s3 = r4 - e3 + 1, l3 = Math.log(o3), f3 = 0.5 * Math.exp(2 * l3 / 3), u3 = 0.5 * Math.sqrt(l3 * f3 * (o3 - f3) / o3) * (s3 - o3 / 2 < 0 ? -1 : 1), m3 = Math.max(e3, Math.floor(r4 - s3 * f3 / o3 + u3)), c3 = Math.min(a4, Math.floor(r4 + (o3 - s3) * f3 / o3 + u3));
              t3(n3, r4, m3, c3, h4);
            }
            var p4 = n3[r4], d3 = e3, x3 = a4;
            for (i2(n3, e3, r4), h4(n3[a4], p4) > 0 && i2(n3, e3, a4); d3 < x3; ) {
              for (i2(n3, d3, x3), d3++, x3--; h4(n3[d3], p4) < 0; ) d3++;
              for (; h4(n3[x3], p4) > 0; ) x3--;
            }
            0 === h4(n3[e3], p4) ? i2(n3, e3, x3) : i2(n3, ++x3, a4), x3 <= r4 && (e3 = x3 + 1), r4 <= x3 && (a4 = x3 - 1);
          }
        }(t2, r3, e2 || 0, a3 || t2.length - 1, h3 || n2);
      }
      function i2(t2, i3, n3) {
        var r3 = t2[i3];
        t2[i3] = t2[n3], t2[n3] = r3;
      }
      function n2(t2, i3) {
        return t2 < i3 ? -1 : t2 > i3 ? 1 : 0;
      }
      var r2 = function(t2) {
        void 0 === t2 && (t2 = 9), this._maxEntries = Math.max(4, t2), this._minEntries = Math.max(2, Math.ceil(0.4 * this._maxEntries)), this.clear();
      };
      function e(t2, i3, n3) {
        if (!n3) return i3.indexOf(t2);
        for (var r3 = 0; r3 < i3.length; r3++) if (n3(t2, i3[r3])) return r3;
        return -1;
      }
      function a2(t2, i3) {
        h2(t2, 0, t2.children.length, i3, t2);
      }
      function h2(t2, i3, n3, r3, e2) {
        e2 || (e2 = p3(null)), e2.minX = 1 / 0, e2.minY = 1 / 0, e2.maxX = -1 / 0, e2.maxY = -1 / 0;
        for (var a3 = i3; a3 < n3; a3++) {
          var h3 = t2.children[a3];
          o2(e2, t2.leaf ? r3(h3) : h3);
        }
        return e2;
      }
      function o2(t2, i3) {
        return t2.minX = Math.min(t2.minX, i3.minX), t2.minY = Math.min(t2.minY, i3.minY), t2.maxX = Math.max(t2.maxX, i3.maxX), t2.maxY = Math.max(t2.maxY, i3.maxY), t2;
      }
      function s2(t2, i3) {
        return t2.minX - i3.minX;
      }
      function l2(t2, i3) {
        return t2.minY - i3.minY;
      }
      function f2(t2) {
        return (t2.maxX - t2.minX) * (t2.maxY - t2.minY);
      }
      function u2(t2) {
        return t2.maxX - t2.minX + (t2.maxY - t2.minY);
      }
      function m2(t2, i3) {
        return t2.minX <= i3.minX && t2.minY <= i3.minY && i3.maxX <= t2.maxX && i3.maxY <= t2.maxY;
      }
      function c2(t2, i3) {
        return i3.minX <= t2.maxX && i3.minY <= t2.maxY && i3.maxX >= t2.minX && i3.maxY >= t2.minY;
      }
      function p3(t2) {
        return { children: t2, height: 1, leaf: true, minX: 1 / 0, minY: 1 / 0, maxX: -1 / 0, maxY: -1 / 0 };
      }
      function d2(i3, n3, r3, e2, a3) {
        for (var h3 = [n3, r3]; h3.length; ) if (!((r3 = h3.pop()) - (n3 = h3.pop()) <= e2)) {
          var o3 = n3 + Math.ceil((r3 - n3) / e2 / 2) * e2;
          t(i3, o3, n3, r3, a3), h3.push(n3, o3, o3, r3);
        }
      }
      return r2.prototype.all = function() {
        return this._all(this.data, []);
      }, r2.prototype.search = function(t2) {
        var i3 = this.data, n3 = [];
        if (!c2(t2, i3)) return n3;
        for (var r3 = this.toBBox, e2 = []; i3; ) {
          for (var a3 = 0; a3 < i3.children.length; a3++) {
            var h3 = i3.children[a3], o3 = i3.leaf ? r3(h3) : h3;
            c2(t2, o3) && (i3.leaf ? n3.push(h3) : m2(t2, o3) ? this._all(h3, n3) : e2.push(h3));
          }
          i3 = e2.pop();
        }
        return n3;
      }, r2.prototype.collides = function(t2) {
        var i3 = this.data;
        if (!c2(t2, i3)) return false;
        for (var n3 = []; i3; ) {
          for (var r3 = 0; r3 < i3.children.length; r3++) {
            var e2 = i3.children[r3], a3 = i3.leaf ? this.toBBox(e2) : e2;
            if (c2(t2, a3)) {
              if (i3.leaf || m2(t2, a3)) return true;
              n3.push(e2);
            }
          }
          i3 = n3.pop();
        }
        return false;
      }, r2.prototype.load = function(t2) {
        if (!t2 || !t2.length) return this;
        if (t2.length < this._minEntries) {
          for (var i3 = 0; i3 < t2.length; i3++) this.insert(t2[i3]);
          return this;
        }
        var n3 = this._build(t2.slice(), 0, t2.length - 1, 0);
        if (this.data.children.length) if (this.data.height === n3.height) this._splitRoot(this.data, n3);
        else {
          if (this.data.height < n3.height) {
            var r3 = this.data;
            this.data = n3, n3 = r3;
          }
          this._insert(n3, this.data.height - n3.height - 1, true);
        }
        else this.data = n3;
        return this;
      }, r2.prototype.insert = function(t2) {
        return t2 && this._insert(t2, this.data.height - 1), this;
      }, r2.prototype.clear = function() {
        return this.data = p3([]), this;
      }, r2.prototype.remove = function(t2, i3) {
        if (!t2) return this;
        for (var n3, r3, a3, h3 = this.data, o3 = this.toBBox(t2), s3 = [], l3 = []; h3 || s3.length; ) {
          if (h3 || (h3 = s3.pop(), r3 = s3[s3.length - 1], n3 = l3.pop(), a3 = true), h3.leaf) {
            var f3 = e(t2, h3.children, i3);
            if (-1 !== f3) return h3.children.splice(f3, 1), s3.push(h3), this._condense(s3), this;
          }
          a3 || h3.leaf || !m2(h3, o3) ? r3 ? (n3++, h3 = r3.children[n3], a3 = false) : h3 = null : (s3.push(h3), l3.push(n3), n3 = 0, r3 = h3, h3 = h3.children[0]);
        }
        return this;
      }, r2.prototype.toBBox = function(t2) {
        return t2;
      }, r2.prototype.compareMinX = function(t2, i3) {
        return t2.minX - i3.minX;
      }, r2.prototype.compareMinY = function(t2, i3) {
        return t2.minY - i3.minY;
      }, r2.prototype.toJSON = function() {
        return this.data;
      }, r2.prototype.fromJSON = function(t2) {
        return this.data = t2, this;
      }, r2.prototype._all = function(t2, i3) {
        for (var n3 = []; t2; ) t2.leaf ? i3.push.apply(i3, t2.children) : n3.push.apply(n3, t2.children), t2 = n3.pop();
        return i3;
      }, r2.prototype._build = function(t2, i3, n3, r3) {
        var e2, h3 = n3 - i3 + 1, o3 = this._maxEntries;
        if (h3 <= o3) return a2(e2 = p3(t2.slice(i3, n3 + 1)), this.toBBox), e2;
        r3 || (r3 = Math.ceil(Math.log(h3) / Math.log(o3)), o3 = Math.ceil(h3 / Math.pow(o3, r3 - 1))), (e2 = p3([])).leaf = false, e2.height = r3;
        var s3 = Math.ceil(h3 / o3), l3 = s3 * Math.ceil(Math.sqrt(o3));
        d2(t2, i3, n3, l3, this.compareMinX);
        for (var f3 = i3; f3 <= n3; f3 += l3) {
          var u3 = Math.min(f3 + l3 - 1, n3);
          d2(t2, f3, u3, s3, this.compareMinY);
          for (var m3 = f3; m3 <= u3; m3 += s3) {
            var c3 = Math.min(m3 + s3 - 1, u3);
            e2.children.push(this._build(t2, m3, c3, r3 - 1));
          }
        }
        return a2(e2, this.toBBox), e2;
      }, r2.prototype._chooseSubtree = function(t2, i3, n3, r3) {
        for (; r3.push(i3), !i3.leaf && r3.length - 1 !== n3; ) {
          for (var e2 = 1 / 0, a3 = 1 / 0, h3 = void 0, o3 = 0; o3 < i3.children.length; o3++) {
            var s3 = i3.children[o3], l3 = f2(s3), u3 = (m3 = t2, c3 = s3, (Math.max(c3.maxX, m3.maxX) - Math.min(c3.minX, m3.minX)) * (Math.max(c3.maxY, m3.maxY) - Math.min(c3.minY, m3.minY)) - l3);
            u3 < a3 ? (a3 = u3, e2 = l3 < e2 ? l3 : e2, h3 = s3) : u3 === a3 && l3 < e2 && (e2 = l3, h3 = s3);
          }
          i3 = h3 || i3.children[0];
        }
        var m3, c3;
        return i3;
      }, r2.prototype._insert = function(t2, i3, n3) {
        var r3 = n3 ? t2 : this.toBBox(t2), e2 = [], a3 = this._chooseSubtree(r3, this.data, i3, e2);
        for (a3.children.push(t2), o2(a3, r3); i3 >= 0 && e2[i3].children.length > this._maxEntries; ) this._split(e2, i3), i3--;
        this._adjustParentBBoxes(r3, e2, i3);
      }, r2.prototype._split = function(t2, i3) {
        var n3 = t2[i3], r3 = n3.children.length, e2 = this._minEntries;
        this._chooseSplitAxis(n3, e2, r3);
        var h3 = this._chooseSplitIndex(n3, e2, r3), o3 = p3(n3.children.splice(h3, n3.children.length - h3));
        o3.height = n3.height, o3.leaf = n3.leaf, a2(n3, this.toBBox), a2(o3, this.toBBox), i3 ? t2[i3 - 1].children.push(o3) : this._splitRoot(n3, o3);
      }, r2.prototype._splitRoot = function(t2, i3) {
        this.data = p3([t2, i3]), this.data.height = t2.height + 1, this.data.leaf = false, a2(this.data, this.toBBox);
      }, r2.prototype._chooseSplitIndex = function(t2, i3, n3) {
        for (var r3, e2, a3, o3, s3, l3, u3, m3 = 1 / 0, c3 = 1 / 0, p4 = i3; p4 <= n3 - i3; p4++) {
          var d3 = h2(t2, 0, p4, this.toBBox), x3 = h2(t2, p4, n3, this.toBBox), v3 = (e2 = d3, a3 = x3, o3 = void 0, s3 = void 0, l3 = void 0, u3 = void 0, o3 = Math.max(e2.minX, a3.minX), s3 = Math.max(e2.minY, a3.minY), l3 = Math.min(e2.maxX, a3.maxX), u3 = Math.min(e2.maxY, a3.maxY), Math.max(0, l3 - o3) * Math.max(0, u3 - s3)), M2 = f2(d3) + f2(x3);
          v3 < m3 ? (m3 = v3, r3 = p4, c3 = M2 < c3 ? M2 : c3) : v3 === m3 && M2 < c3 && (c3 = M2, r3 = p4);
        }
        return r3 || n3 - i3;
      }, r2.prototype._chooseSplitAxis = function(t2, i3, n3) {
        var r3 = t2.leaf ? this.compareMinX : s2, e2 = t2.leaf ? this.compareMinY : l2;
        this._allDistMargin(t2, i3, n3, r3) < this._allDistMargin(t2, i3, n3, e2) && t2.children.sort(r3);
      }, r2.prototype._allDistMargin = function(t2, i3, n3, r3) {
        t2.children.sort(r3);
        for (var e2 = this.toBBox, a3 = h2(t2, 0, i3, e2), s3 = h2(t2, n3 - i3, n3, e2), l3 = u2(a3) + u2(s3), f3 = i3; f3 < n3 - i3; f3++) {
          var m3 = t2.children[f3];
          o2(a3, t2.leaf ? e2(m3) : m3), l3 += u2(a3);
        }
        for (var c3 = n3 - i3 - 1; c3 >= i3; c3--) {
          var p4 = t2.children[c3];
          o2(s3, t2.leaf ? e2(p4) : p4), l3 += u2(s3);
        }
        return l3;
      }, r2.prototype._adjustParentBBoxes = function(t2, i3, n3) {
        for (var r3 = n3; r3 >= 0; r3--) o2(i3[r3], t2);
      }, r2.prototype._condense = function(t2) {
        for (var i3 = t2.length - 1, n3 = void 0; i3 >= 0; i3--) 0 === t2[i3].children.length ? i3 > 0 ? (n3 = t2[i3 - 1].children).splice(n3.indexOf(t2[i3]), 1) : this.clear() : a2(t2[i3], this.toBBox);
      }, r2;
    });
  }
});

// node_modules/tinyqueue/index.js
var tinyqueue_exports = {};
__export(tinyqueue_exports, {
  default: () => TinyQueue
});
function defaultCompare(a2, b2) {
  return a2 < b2 ? -1 : a2 > b2 ? 1 : 0;
}
var TinyQueue;
var init_tinyqueue = __esm({
  "node_modules/tinyqueue/index.js"() {
    TinyQueue = class {
      constructor(data4 = [], compare = defaultCompare) {
        this.data = data4;
        this.length = this.data.length;
        this.compare = compare;
        if (this.length > 0) {
          for (let i2 = (this.length >> 1) - 1; i2 >= 0; i2--) this._down(i2);
        }
      }
      push(item) {
        this.data.push(item);
        this.length++;
        this._up(this.length - 1);
      }
      pop() {
        if (this.length === 0) return void 0;
        const top = this.data[0];
        const bottom = this.data.pop();
        this.length--;
        if (this.length > 0) {
          this.data[0] = bottom;
          this._down(0);
        }
        return top;
      }
      peek() {
        return this.data[0];
      }
      _up(pos) {
        const { data: data4, compare } = this;
        const item = data4[pos];
        while (pos > 0) {
          const parent4 = pos - 1 >> 1;
          const current = data4[parent4];
          if (compare(item, current) >= 0) break;
          data4[pos] = current;
          pos = parent4;
        }
        data4[pos] = item;
      }
      _down(pos) {
        const { data: data4, compare } = this;
        const halfLength = this.length >> 1;
        const item = data4[pos];
        while (pos < halfLength) {
          let left = (pos << 1) + 1;
          let best = data4[left];
          const right = left + 1;
          if (right < this.length && compare(data4[right], best) < 0) {
            left = right;
            best = data4[right];
          }
          if (compare(best, item) >= 0) break;
          data4[pos] = best;
          pos = left;
        }
        data4[pos] = item;
      }
    };
  }
});

// node_modules/point-in-polygon/flat.js
var require_flat = __commonJS({
  "node_modules/point-in-polygon/flat.js"(exports, module) {
    module.exports = function pointInPolygonFlat(point, vs2, start, end) {
      var x3 = point[0], y3 = point[1];
      var inside = false;
      if (start === void 0) start = 0;
      if (end === void 0) end = vs2.length;
      var len = (end - start) / 2;
      for (var i2 = 0, j2 = len - 1; i2 < len; j2 = i2++) {
        var xi2 = vs2[start + i2 * 2 + 0], yi2 = vs2[start + i2 * 2 + 1];
        var xj = vs2[start + j2 * 2 + 0], yj = vs2[start + j2 * 2 + 1];
        var intersect2 = yi2 > y3 !== yj > y3 && x3 < (xj - xi2) * (y3 - yi2) / (yj - yi2) + xi2;
        if (intersect2) inside = !inside;
      }
      return inside;
    };
  }
});

// node_modules/point-in-polygon/nested.js
var require_nested = __commonJS({
  "node_modules/point-in-polygon/nested.js"(exports, module) {
    module.exports = function pointInPolygonNested(point, vs2, start, end) {
      var x3 = point[0], y3 = point[1];
      var inside = false;
      if (start === void 0) start = 0;
      if (end === void 0) end = vs2.length;
      var len = end - start;
      for (var i2 = 0, j2 = len - 1; i2 < len; j2 = i2++) {
        var xi2 = vs2[i2 + start][0], yi2 = vs2[i2 + start][1];
        var xj = vs2[j2 + start][0], yj = vs2[j2 + start][1];
        var intersect2 = yi2 > y3 !== yj > y3 && x3 < (xj - xi2) * (y3 - yi2) / (yj - yi2) + xi2;
        if (intersect2) inside = !inside;
      }
      return inside;
    };
  }
});

// node_modules/point-in-polygon/index.js
var require_point_in_polygon = __commonJS({
  "node_modules/point-in-polygon/index.js"(exports, module) {
    var pointInPolygonFlat = require_flat();
    var pointInPolygonNested = require_nested();
    module.exports = function pointInPolygon(point, vs2, start, end) {
      if (vs2.length > 0 && Array.isArray(vs2[0])) {
        return pointInPolygonNested(point, vs2, start, end);
      } else {
        return pointInPolygonFlat(point, vs2, start, end);
      }
    };
    module.exports.nested = pointInPolygonNested;
    module.exports.flat = pointInPolygonFlat;
  }
});

// node_modules/robust-predicates/umd/orient2d.min.js
var require_orient2d_min = __commonJS({
  "node_modules/robust-predicates/umd/orient2d.min.js"(exports, module) {
    !function(t, e) {
      "object" == typeof exports && "undefined" != typeof module ? e(exports) : "function" == typeof define && define.amd ? define(["exports"], e) : e((t = t || self).predicates = {});
    }(exports, function(t) {
      "use strict";
      const e = 134217729, n2 = 33306690738754706e-32;
      function r2(t2, e2, n3, r3, o3) {
        let f3, i3, u3, c3, s3 = e2[0], a3 = r3[0], d3 = 0, l3 = 0;
        a3 > s3 == a3 > -s3 ? (f3 = s3, s3 = e2[++d3]) : (f3 = a3, a3 = r3[++l3]);
        let p3 = 0;
        if (d3 < t2 && l3 < n3) for (a3 > s3 == a3 > -s3 ? (u3 = f3 - ((i3 = s3 + f3) - s3), s3 = e2[++d3]) : (u3 = f3 - ((i3 = a3 + f3) - a3), a3 = r3[++l3]), f3 = i3, 0 !== u3 && (o3[p3++] = u3); d3 < t2 && l3 < n3; ) a3 > s3 == a3 > -s3 ? (u3 = f3 - ((i3 = f3 + s3) - (c3 = i3 - f3)) + (s3 - c3), s3 = e2[++d3]) : (u3 = f3 - ((i3 = f3 + a3) - (c3 = i3 - f3)) + (a3 - c3), a3 = r3[++l3]), f3 = i3, 0 !== u3 && (o3[p3++] = u3);
        for (; d3 < t2; ) u3 = f3 - ((i3 = f3 + s3) - (c3 = i3 - f3)) + (s3 - c3), s3 = e2[++d3], f3 = i3, 0 !== u3 && (o3[p3++] = u3);
        for (; l3 < n3; ) u3 = f3 - ((i3 = f3 + a3) - (c3 = i3 - f3)) + (a3 - c3), a3 = r3[++l3], f3 = i3, 0 !== u3 && (o3[p3++] = u3);
        return 0 === f3 && 0 !== p3 || (o3[p3++] = f3), p3;
      }
      function o2(t2) {
        return new Float64Array(t2);
      }
      const f2 = 33306690738754716e-32, i2 = 22204460492503146e-32, u2 = 11093356479670487e-47, c2 = o2(4), s2 = o2(8), a2 = o2(12), d2 = o2(16), l2 = o2(4);
      t.orient2d = function(t2, o3, p3, b2, y3, h2) {
        const M2 = (o3 - h2) * (p3 - y3), x3 = (t2 - y3) * (b2 - h2), j2 = M2 - x3;
        if (0 === M2 || 0 === x3 || M2 > 0 != x3 > 0) return j2;
        const m2 = Math.abs(M2 + x3);
        return Math.abs(j2) >= f2 * m2 ? j2 : -function(t3, o4, f3, p4, b3, y4, h3) {
          let M3, x4, j3, m3, _2, v3, w2, A2, F2, O2, P2, g2, k2, q2, z2, B2, C2, D2;
          const E2 = t3 - b3, G2 = f3 - b3, H2 = o4 - y4, I2 = p4 - y4;
          _2 = (z2 = (A2 = E2 - (w2 = (v3 = e * E2) - (v3 - E2))) * (O2 = I2 - (F2 = (v3 = e * I2) - (v3 - I2))) - ((q2 = E2 * I2) - w2 * F2 - A2 * F2 - w2 * O2)) - (P2 = z2 - (C2 = (A2 = H2 - (w2 = (v3 = e * H2) - (v3 - H2))) * (O2 = G2 - (F2 = (v3 = e * G2) - (v3 - G2))) - ((B2 = H2 * G2) - w2 * F2 - A2 * F2 - w2 * O2))), c2[0] = z2 - (P2 + _2) + (_2 - C2), _2 = (k2 = q2 - ((g2 = q2 + P2) - (_2 = g2 - q2)) + (P2 - _2)) - (P2 = k2 - B2), c2[1] = k2 - (P2 + _2) + (_2 - B2), _2 = (D2 = g2 + P2) - g2, c2[2] = g2 - (D2 - _2) + (P2 - _2), c2[3] = D2;
          let J2 = function(t4, e2) {
            let n3 = e2[0];
            for (let r3 = 1; r3 < t4; r3++) n3 += e2[r3];
            return n3;
          }(4, c2), K3 = i2 * h3;
          if (J2 >= K3 || -J2 >= K3) return J2;
          if (M3 = t3 - (E2 + (_2 = t3 - E2)) + (_2 - b3), j3 = f3 - (G2 + (_2 = f3 - G2)) + (_2 - b3), x4 = o4 - (H2 + (_2 = o4 - H2)) + (_2 - y4), m3 = p4 - (I2 + (_2 = p4 - I2)) + (_2 - y4), 0 === M3 && 0 === x4 && 0 === j3 && 0 === m3) return J2;
          if (K3 = u2 * h3 + n2 * Math.abs(J2), (J2 += E2 * m3 + I2 * M3 - (H2 * j3 + G2 * x4)) >= K3 || -J2 >= K3) return J2;
          _2 = (z2 = (A2 = M3 - (w2 = (v3 = e * M3) - (v3 - M3))) * (O2 = I2 - (F2 = (v3 = e * I2) - (v3 - I2))) - ((q2 = M3 * I2) - w2 * F2 - A2 * F2 - w2 * O2)) - (P2 = z2 - (C2 = (A2 = x4 - (w2 = (v3 = e * x4) - (v3 - x4))) * (O2 = G2 - (F2 = (v3 = e * G2) - (v3 - G2))) - ((B2 = x4 * G2) - w2 * F2 - A2 * F2 - w2 * O2))), l2[0] = z2 - (P2 + _2) + (_2 - C2), _2 = (k2 = q2 - ((g2 = q2 + P2) - (_2 = g2 - q2)) + (P2 - _2)) - (P2 = k2 - B2), l2[1] = k2 - (P2 + _2) + (_2 - B2), _2 = (D2 = g2 + P2) - g2, l2[2] = g2 - (D2 - _2) + (P2 - _2), l2[3] = D2;
          const L2 = r2(4, c2, 4, l2, s2);
          _2 = (z2 = (A2 = E2 - (w2 = (v3 = e * E2) - (v3 - E2))) * (O2 = m3 - (F2 = (v3 = e * m3) - (v3 - m3))) - ((q2 = E2 * m3) - w2 * F2 - A2 * F2 - w2 * O2)) - (P2 = z2 - (C2 = (A2 = H2 - (w2 = (v3 = e * H2) - (v3 - H2))) * (O2 = j3 - (F2 = (v3 = e * j3) - (v3 - j3))) - ((B2 = H2 * j3) - w2 * F2 - A2 * F2 - w2 * O2))), l2[0] = z2 - (P2 + _2) + (_2 - C2), _2 = (k2 = q2 - ((g2 = q2 + P2) - (_2 = g2 - q2)) + (P2 - _2)) - (P2 = k2 - B2), l2[1] = k2 - (P2 + _2) + (_2 - B2), _2 = (D2 = g2 + P2) - g2, l2[2] = g2 - (D2 - _2) + (P2 - _2), l2[3] = D2;
          const N2 = r2(L2, s2, 4, l2, a2);
          _2 = (z2 = (A2 = M3 - (w2 = (v3 = e * M3) - (v3 - M3))) * (O2 = m3 - (F2 = (v3 = e * m3) - (v3 - m3))) - ((q2 = M3 * m3) - w2 * F2 - A2 * F2 - w2 * O2)) - (P2 = z2 - (C2 = (A2 = x4 - (w2 = (v3 = e * x4) - (v3 - x4))) * (O2 = j3 - (F2 = (v3 = e * j3) - (v3 - j3))) - ((B2 = x4 * j3) - w2 * F2 - A2 * F2 - w2 * O2))), l2[0] = z2 - (P2 + _2) + (_2 - C2), _2 = (k2 = q2 - ((g2 = q2 + P2) - (_2 = g2 - q2)) + (P2 - _2)) - (P2 = k2 - B2), l2[1] = k2 - (P2 + _2) + (_2 - B2), _2 = (D2 = g2 + P2) - g2, l2[2] = g2 - (D2 - _2) + (P2 - _2), l2[3] = D2;
          const Q2 = r2(N2, a2, 4, l2, d2);
          return d2[Q2 - 1];
        }(t2, o3, p3, b2, y3, h2, m2);
      }, t.orient2dfast = function(t2, e2, n3, r3, o3, f3) {
        return (e2 - f3) * (n3 - o3) - (t2 - o3) * (r3 - f3);
      }, Object.defineProperty(t, "__esModule", { value: true });
    });
  }
});

// node_modules/concaveman/index.js
var require_concaveman = __commonJS({
  "node_modules/concaveman/index.js"(exports, module) {
    "use strict";
    var RBush = require_rbush_min();
    var Queue = (init_tinyqueue(), __toCommonJS(tinyqueue_exports));
    var pointInPolygon = require_point_in_polygon();
    var orient = require_orient2d_min().orient2d;
    if (Queue.default) {
      Queue = Queue.default;
    }
    module.exports = concaveman2;
    module.exports.default = concaveman2;
    function concaveman2(points, concavity, lengthThreshold) {
      concavity = Math.max(0, concavity === void 0 ? 2 : concavity);
      lengthThreshold = lengthThreshold || 0;
      var hull = fastConvexHull(points);
      var tree = new RBush(16);
      tree.toBBox = function(a3) {
        return {
          minX: a3[0],
          minY: a3[1],
          maxX: a3[0],
          maxY: a3[1]
        };
      };
      tree.compareMinX = function(a3, b3) {
        return a3[0] - b3[0];
      };
      tree.compareMinY = function(a3, b3) {
        return a3[1] - b3[1];
      };
      tree.load(points);
      var queue = [];
      for (var i2 = 0, last2; i2 < hull.length; i2++) {
        var p3 = hull[i2];
        tree.remove(p3);
        last2 = insertNode(p3, last2);
        queue.push(last2);
      }
      var segTree = new RBush(16);
      for (i2 = 0; i2 < queue.length; i2++) segTree.insert(updateBBox(queue[i2]));
      var sqConcavity = concavity * concavity;
      var sqLenThreshold = lengthThreshold * lengthThreshold;
      while (queue.length) {
        var node = queue.shift();
        var a2 = node.p;
        var b2 = node.next.p;
        var sqLen = getSqDist(a2, b2);
        if (sqLen < sqLenThreshold) continue;
        var maxSqLen = sqLen / sqConcavity;
        p3 = findCandidate(tree, node.prev.p, a2, b2, node.next.next.p, maxSqLen, segTree);
        if (p3 && Math.min(getSqDist(p3, a2), getSqDist(p3, b2)) <= maxSqLen) {
          queue.push(node);
          queue.push(insertNode(p3, node));
          tree.remove(p3);
          segTree.remove(node);
          segTree.insert(updateBBox(node));
          segTree.insert(updateBBox(node.next));
        }
      }
      node = last2;
      var concave = [];
      do {
        concave.push(node.p);
        node = node.next;
      } while (node !== last2);
      concave.push(node.p);
      return concave;
    }
    function findCandidate(tree, a2, b2, c2, d2, maxDist, segTree) {
      var queue = new Queue([], compareDist);
      var node = tree.data;
      while (node) {
        for (var i2 = 0; i2 < node.children.length; i2++) {
          var child = node.children[i2];
          var dist3 = node.leaf ? sqSegDist(child, b2, c2) : sqSegBoxDist(b2, c2, child);
          if (dist3 > maxDist) continue;
          queue.push({
            node: child,
            dist: dist3
          });
        }
        while (queue.length && !queue.peek().node.children) {
          var item = queue.pop();
          var p3 = item.node;
          var d0 = sqSegDist(p3, a2, b2);
          var d1 = sqSegDist(p3, c2, d2);
          if (item.dist < d0 && item.dist < d1 && noIntersections(b2, p3, segTree) && noIntersections(c2, p3, segTree)) return p3;
        }
        node = queue.pop();
        if (node) node = node.node;
      }
      return null;
    }
    function compareDist(a2, b2) {
      return a2.dist - b2.dist;
    }
    function sqSegBoxDist(a2, b2, bbox) {
      if (inside(a2, bbox) || inside(b2, bbox)) return 0;
      var d1 = sqSegSegDist(a2[0], a2[1], b2[0], b2[1], bbox.minX, bbox.minY, bbox.maxX, bbox.minY);
      if (d1 === 0) return 0;
      var d2 = sqSegSegDist(a2[0], a2[1], b2[0], b2[1], bbox.minX, bbox.minY, bbox.minX, bbox.maxY);
      if (d2 === 0) return 0;
      var d3 = sqSegSegDist(a2[0], a2[1], b2[0], b2[1], bbox.maxX, bbox.minY, bbox.maxX, bbox.maxY);
      if (d3 === 0) return 0;
      var d4 = sqSegSegDist(a2[0], a2[1], b2[0], b2[1], bbox.minX, bbox.maxY, bbox.maxX, bbox.maxY);
      if (d4 === 0) return 0;
      return Math.min(d1, d2, d3, d4);
    }
    function inside(a2, bbox) {
      return a2[0] >= bbox.minX && a2[0] <= bbox.maxX && a2[1] >= bbox.minY && a2[1] <= bbox.maxY;
    }
    function noIntersections(a2, b2, segTree) {
      var minX = Math.min(a2[0], b2[0]);
      var minY = Math.min(a2[1], b2[1]);
      var maxX = Math.max(a2[0], b2[0]);
      var maxY = Math.max(a2[1], b2[1]);
      var edges3 = segTree.search({ minX, minY, maxX, maxY });
      for (var i2 = 0; i2 < edges3.length; i2++) {
        if (intersects(edges3[i2].p, edges3[i2].next.p, a2, b2)) return false;
      }
      return true;
    }
    function cross(p1, p22, p3) {
      return orient(p1[0], p1[1], p22[0], p22[1], p3[0], p3[1]);
    }
    function intersects(p1, q1, p22, q2) {
      return p1 !== q2 && q1 !== p22 && cross(p1, q1, p22) > 0 !== cross(p1, q1, q2) > 0 && cross(p22, q2, p1) > 0 !== cross(p22, q2, q1) > 0;
    }
    function updateBBox(node) {
      var p1 = node.p;
      var p22 = node.next.p;
      node.minX = Math.min(p1[0], p22[0]);
      node.minY = Math.min(p1[1], p22[1]);
      node.maxX = Math.max(p1[0], p22[0]);
      node.maxY = Math.max(p1[1], p22[1]);
      return node;
    }
    function fastConvexHull(points) {
      var left = points[0];
      var top = points[0];
      var right = points[0];
      var bottom = points[0];
      for (var i2 = 0; i2 < points.length; i2++) {
        var p3 = points[i2];
        if (p3[0] < left[0]) left = p3;
        if (p3[0] > right[0]) right = p3;
        if (p3[1] < top[1]) top = p3;
        if (p3[1] > bottom[1]) bottom = p3;
      }
      var cull = [left, top, right, bottom];
      var filtered = cull.slice();
      for (i2 = 0; i2 < points.length; i2++) {
        if (!pointInPolygon(points[i2], cull)) filtered.push(points[i2]);
      }
      return convexHull(filtered);
    }
    function insertNode(p3, prev) {
      var node = {
        p: p3,
        prev: null,
        next: null,
        minX: 0,
        minY: 0,
        maxX: 0,
        maxY: 0
      };
      if (!prev) {
        node.prev = node;
        node.next = node;
      } else {
        node.next = prev.next;
        node.prev = prev;
        prev.next.prev = node;
        prev.next = node;
      }
      return node;
    }
    function getSqDist(p1, p22) {
      var dx = p1[0] - p22[0], dy = p1[1] - p22[1];
      return dx * dx + dy * dy;
    }
    function sqSegDist(p3, p1, p22) {
      var x3 = p1[0], y3 = p1[1], dx = p22[0] - x3, dy = p22[1] - y3;
      if (dx !== 0 || dy !== 0) {
        var t = ((p3[0] - x3) * dx + (p3[1] - y3) * dy) / (dx * dx + dy * dy);
        if (t > 1) {
          x3 = p22[0];
          y3 = p22[1];
        } else if (t > 0) {
          x3 += dx * t;
          y3 += dy * t;
        }
      }
      dx = p3[0] - x3;
      dy = p3[1] - y3;
      return dx * dx + dy * dy;
    }
    function sqSegSegDist(x0, y0, x1, y1, x22, y22, x3, y3) {
      var ux = x1 - x0;
      var uy = y1 - y0;
      var vx = x3 - x22;
      var vy = y3 - y22;
      var wx = x0 - x22;
      var wy = y0 - y22;
      var a2 = ux * ux + uy * uy;
      var b2 = ux * vx + uy * vy;
      var c2 = vx * vx + vy * vy;
      var d2 = ux * wx + uy * wy;
      var e = vx * wx + vy * wy;
      var D2 = a2 * c2 - b2 * b2;
      var sc2, sN, tc2, tN;
      var sD = D2;
      var tD = D2;
      if (D2 === 0) {
        sN = 0;
        sD = 1;
        tN = e;
        tD = c2;
      } else {
        sN = b2 * e - c2 * d2;
        tN = a2 * e - b2 * d2;
        if (sN < 0) {
          sN = 0;
          tN = e;
          tD = c2;
        } else if (sN > sD) {
          sN = sD;
          tN = e + b2;
          tD = c2;
        }
      }
      if (tN < 0) {
        tN = 0;
        if (-d2 < 0) sN = 0;
        else if (-d2 > a2) sN = sD;
        else {
          sN = -d2;
          sD = a2;
        }
      } else if (tN > tD) {
        tN = tD;
        if (-d2 + b2 < 0) sN = 0;
        else if (-d2 + b2 > a2) sN = sD;
        else {
          sN = -d2 + b2;
          sD = a2;
        }
      }
      sc2 = sN === 0 ? 0 : sN / sD;
      tc2 = tN === 0 ? 0 : tN / tD;
      var cx = (1 - sc2) * x0 + sc2 * x1;
      var cy = (1 - sc2) * y0 + sc2 * y1;
      var cx2 = (1 - tc2) * x22 + tc2 * x3;
      var cy2 = (1 - tc2) * y22 + tc2 * y3;
      var dx = cx2 - cx;
      var dy = cy2 - cy;
      return dx * dx + dy * dy;
    }
    function compareByX(a2, b2) {
      return a2[0] === b2[0] ? a2[1] - b2[1] : a2[0] - b2[0];
    }
    function convexHull(points) {
      points.sort(compareByX);
      var lower = [];
      for (var i2 = 0; i2 < points.length; i2++) {
        while (lower.length >= 2 && cross(lower[lower.length - 2], lower[lower.length - 1], points[i2]) <= 0) {
          lower.pop();
        }
        lower.push(points[i2]);
      }
      var upper = [];
      for (var ii2 = points.length - 1; ii2 >= 0; ii2--) {
        while (upper.length >= 2 && cross(upper[upper.length - 2], upper[upper.length - 1], points[ii2]) <= 0) {
          upper.pop();
        }
        upper.push(points[ii2]);
      }
      upper.pop();
      lower.pop();
      return lower.concat(upper);
    }
  }
});

// node_modules/@neo4j-nvl/react/lib/basic-wrapper/BasicNvlWrapper.js
var import_jsx_runtime = __toESM(require_jsx_runtime());

// node_modules/@neo4j-nvl/layout-workers/lib/index.js
var lib_exports = {};
__export(lib_exports, {
  coseBilkentLayoutFallbackWorker: () => coseBilkentLayoutFallbackWorker,
  createCoseBilkentLayoutWorker: () => createCoseBilkentLayoutWorker,
  createHierarchicalLayoutWorker: () => createHierarchicalLayoutWorker,
  hierarchicalLayoutFallbackWorker: () => hierarchicalLayoutFallbackWorker
});

// node_modules/cytoscape/dist/cytoscape.esm.mjs
function _arrayLikeToArray(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e = 0, n2 = Array(a2); e < a2; e++) n2[e] = r2[e];
  return n2;
}
function _arrayWithHoles(r2) {
  if (Array.isArray(r2)) return r2;
}
function _arrayWithoutHoles(r2) {
  if (Array.isArray(r2)) return _arrayLikeToArray(r2);
}
function _classCallCheck(a2, n2) {
  if (!(a2 instanceof n2)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(e, r2) {
  for (var t = 0; t < r2.length; t++) {
    var o2 = r2[t];
    o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e, _toPropertyKey(o2.key), o2);
  }
}
function _createClass(e, r2, t) {
  return r2 && _defineProperties(e.prototype, r2), Object.defineProperty(e, "prototype", {
    writable: false
  }), e;
}
function _createForOfIteratorHelper(r2, e) {
  var t = "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (!t) {
    if (Array.isArray(r2) || (t = _unsupportedIterableToArray(r2)) || e) {
      t && (r2 = t);
      var n2 = 0, F2 = function() {
      };
      return {
        s: F2,
        n: function() {
          return n2 >= r2.length ? {
            done: true
          } : {
            done: false,
            value: r2[n2++]
          };
        },
        e: function(r3) {
          throw r3;
        },
        f: F2
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o2, a2 = true, u2 = false;
  return {
    s: function() {
      t = t.call(r2);
    },
    n: function() {
      var r3 = t.next();
      return a2 = r3.done, r3;
    },
    e: function(r3) {
      u2 = true, o2 = r3;
    },
    f: function() {
      try {
        a2 || null == t.return || t.return();
      } finally {
        if (u2) throw o2;
      }
    }
  };
}
function _defineProperty$1(e, r2, t) {
  return (r2 = _toPropertyKey(r2)) in e ? Object.defineProperty(e, r2, {
    value: t,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e[r2] = t, e;
}
function _iterableToArray(r2) {
  if ("undefined" != typeof Symbol && null != r2[Symbol.iterator] || null != r2["@@iterator"]) return Array.from(r2);
}
function _iterableToArrayLimit(r2, l2) {
  var t = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t) {
    var e, n2, i2, u2, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t = t.call(r2)).next, 0 === l2) {
        if (Object(t) !== t) return;
        f2 = false;
      } else for (; !(f2 = (e = i2.call(t)).done) && (a2.push(e.value), a2.length !== l2); f2 = true) ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t.return && (u2 = t.return(), Object(u2) !== u2)) return;
      } finally {
        if (o2) throw n2;
      }
    }
    return a2;
  }
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(r2, e) {
  return _arrayWithHoles(r2) || _iterableToArrayLimit(r2, e) || _unsupportedIterableToArray(r2, e) || _nonIterableRest();
}
function _toConsumableArray(r2) {
  return _arrayWithoutHoles(r2) || _iterableToArray(r2) || _unsupportedIterableToArray(r2) || _nonIterableSpread();
}
function _toPrimitive(t, r2) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i2 = e.call(t, r2);
    if ("object" != typeof i2) return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return String(t);
}
function _toPropertyKey(t) {
  var i2 = _toPrimitive(t, "string");
  return "symbol" == typeof i2 ? i2 : i2 + "";
}
function _typeof(o2) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
    return typeof o3;
  } : function(o3) {
    return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
  }, _typeof(o2);
}
function _unsupportedIterableToArray(r2, a2) {
  if (r2) {
    if ("string" == typeof r2) return _arrayLikeToArray(r2, a2);
    var t = {}.toString.call(r2).slice(8, -1);
    return "Object" === t && r2.constructor && (t = r2.constructor.name), "Map" === t || "Set" === t ? Array.from(r2) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r2, a2) : void 0;
  }
}
var _window = typeof window === "undefined" ? null : window;
var navigator2 = _window ? _window.navigator : null;
_window ? _window.document : null;
var typeofstr = _typeof("");
var typeofobj = _typeof({});
var typeoffn = _typeof(function() {
});
var typeofhtmlele = typeof HTMLElement === "undefined" ? "undefined" : _typeof(HTMLElement);
var instanceStr = function instanceStr2(obj) {
  return obj && obj.instanceString && fn$6(obj.instanceString) ? obj.instanceString() : null;
};
var string = function string2(obj) {
  return obj != null && _typeof(obj) == typeofstr;
};
var fn$6 = function fn(obj) {
  return obj != null && _typeof(obj) === typeoffn;
};
var array = function array2(obj) {
  return !elementOrCollection(obj) && (Array.isArray ? Array.isArray(obj) : obj != null && obj instanceof Array);
};
var plainObject = function plainObject2(obj) {
  return obj != null && _typeof(obj) === typeofobj && !array(obj) && obj.constructor === Object;
};
var object = function object2(obj) {
  return obj != null && _typeof(obj) === typeofobj;
};
var number$1 = function number(obj) {
  return obj != null && _typeof(obj) === _typeof(1) && !isNaN(obj);
};
var integer = function integer2(obj) {
  return number$1(obj) && Math.floor(obj) === obj;
};
var htmlElement = function htmlElement2(obj) {
  if ("undefined" === typeofhtmlele) {
    return void 0;
  } else {
    return null != obj && obj instanceof HTMLElement;
  }
};
var elementOrCollection = function elementOrCollection2(obj) {
  return element(obj) || collection(obj);
};
var element = function element2(obj) {
  return instanceStr(obj) === "collection" && obj._private.single;
};
var collection = function collection2(obj) {
  return instanceStr(obj) === "collection" && !obj._private.single;
};
var core = function core2(obj) {
  return instanceStr(obj) === "core";
};
var stylesheet = function stylesheet2(obj) {
  return instanceStr(obj) === "stylesheet";
};
var event = function event2(obj) {
  return instanceStr(obj) === "event";
};
var emptyString = function emptyString2(obj) {
  if (obj === void 0 || obj === null) {
    return true;
  } else if (obj === "" || obj.match(/^\s+$/)) {
    return true;
  }
  return false;
};
var domElement = function domElement2(obj) {
  if (typeof HTMLElement === "undefined") {
    return false;
  } else {
    return obj instanceof HTMLElement;
  }
};
var boundingBox = function boundingBox2(obj) {
  return plainObject(obj) && number$1(obj.x1) && number$1(obj.x2) && number$1(obj.y1) && number$1(obj.y2);
};
var promise = function promise2(obj) {
  return object(obj) && fn$6(obj.then);
};
var ms = function ms2() {
  return navigator2 && navigator2.userAgent.match(/msie|trident|edge/i);
};
var memoize = function memoize2(fn4, keyFn) {
  if (!keyFn) {
    keyFn = function keyFn2() {
      if (arguments.length === 1) {
        return arguments[0];
      } else if (arguments.length === 0) {
        return "undefined";
      }
      var args = [];
      for (var i2 = 0; i2 < arguments.length; i2++) {
        args.push(arguments[i2]);
      }
      return args.join("$");
    };
  }
  var _memoizedFn = function memoizedFn() {
    var self2 = this;
    var args = arguments;
    var ret;
    var k2 = keyFn.apply(self2, args);
    var cache3 = _memoizedFn.cache;
    if (!(ret = cache3[k2])) {
      ret = cache3[k2] = fn4.apply(self2, args);
    }
    return ret;
  };
  _memoizedFn.cache = {};
  return _memoizedFn;
};
var camel2dash = memoize(function(str) {
  return str.replace(/([A-Z])/g, function(v3) {
    return "-" + v3.toLowerCase();
  });
});
var dash2camel = memoize(function(str) {
  return str.replace(/(-\w)/g, function(v3) {
    return v3[1].toUpperCase();
  });
});
var prependCamel = memoize(function(prefix, str) {
  return prefix + str[0].toUpperCase() + str.substring(1);
}, function(prefix, str) {
  return prefix + "$" + str;
});
var capitalize = function capitalize2(str) {
  if (emptyString(str)) {
    return str;
  }
  return str.charAt(0).toUpperCase() + str.substring(1);
};
var endsWith = function endsWith2(string3, suffix) {
  return string3.slice(-1 * suffix.length) === suffix;
};
var number2 = "(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))";
var rgba = "rgb[a]?\\((" + number2 + "[%]?)\\s*,\\s*(" + number2 + "[%]?)\\s*,\\s*(" + number2 + "[%]?)(?:\\s*,\\s*(" + number2 + "))?\\)";
var rgbaNoBackRefs = "rgb[a]?\\((?:" + number2 + "[%]?)\\s*,\\s*(?:" + number2 + "[%]?)\\s*,\\s*(?:" + number2 + "[%]?)(?:\\s*,\\s*(?:" + number2 + "))?\\)";
var hsla = "hsl[a]?\\((" + number2 + ")\\s*,\\s*(" + number2 + "[%])\\s*,\\s*(" + number2 + "[%])(?:\\s*,\\s*(" + number2 + "))?\\)";
var hslaNoBackRefs = "hsl[a]?\\((?:" + number2 + ")\\s*,\\s*(?:" + number2 + "[%])\\s*,\\s*(?:" + number2 + "[%])(?:\\s*,\\s*(?:" + number2 + "))?\\)";
var hex3 = "\\#[0-9a-fA-F]{3}";
var hex6 = "\\#[0-9a-fA-F]{6}";
var ascending = function ascending2(a2, b2) {
  if (a2 < b2) {
    return -1;
  } else if (a2 > b2) {
    return 1;
  } else {
    return 0;
  }
};
var descending = function descending2(a2, b2) {
  return -1 * ascending(a2, b2);
};
var extend = Object.assign != null ? Object.assign.bind(Object) : function(tgt) {
  var args = arguments;
  for (var i2 = 1; i2 < args.length; i2++) {
    var obj = args[i2];
    if (obj == null) {
      continue;
    }
    var keys2 = Object.keys(obj);
    for (var j2 = 0; j2 < keys2.length; j2++) {
      var k2 = keys2[j2];
      tgt[k2] = obj[k2];
    }
  }
  return tgt;
};
var hex2tuple = function hex2tuple2(hex) {
  if (!(hex.length === 4 || hex.length === 7) || hex[0] !== "#") {
    return;
  }
  var shortHex = hex.length === 4;
  var r2, g2, b2;
  var base = 16;
  if (shortHex) {
    r2 = parseInt(hex[1] + hex[1], base);
    g2 = parseInt(hex[2] + hex[2], base);
    b2 = parseInt(hex[3] + hex[3], base);
  } else {
    r2 = parseInt(hex[1] + hex[2], base);
    g2 = parseInt(hex[3] + hex[4], base);
    b2 = parseInt(hex[5] + hex[6], base);
  }
  return [r2, g2, b2];
};
var hsl2tuple = function hsl2tuple2(hsl) {
  var ret;
  var h2, s2, l2, a2, r2, g2, b2;
  function hue2rgb(p4, q3, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p4 + (q3 - p4) * 6 * t;
    if (t < 1 / 2) return q3;
    if (t < 2 / 3) return p4 + (q3 - p4) * (2 / 3 - t) * 6;
    return p4;
  }
  var m2 = new RegExp("^" + hsla + "$").exec(hsl);
  if (m2) {
    h2 = parseInt(m2[1]);
    if (h2 < 0) {
      h2 = (360 - -1 * h2 % 360) % 360;
    } else if (h2 > 360) {
      h2 = h2 % 360;
    }
    h2 /= 360;
    s2 = parseFloat(m2[2]);
    if (s2 < 0 || s2 > 100) {
      return;
    }
    s2 = s2 / 100;
    l2 = parseFloat(m2[3]);
    if (l2 < 0 || l2 > 100) {
      return;
    }
    l2 = l2 / 100;
    a2 = m2[4];
    if (a2 !== void 0) {
      a2 = parseFloat(a2);
      if (a2 < 0 || a2 > 1) {
        return;
      }
    }
    if (s2 === 0) {
      r2 = g2 = b2 = Math.round(l2 * 255);
    } else {
      var q2 = l2 < 0.5 ? l2 * (1 + s2) : l2 + s2 - l2 * s2;
      var p3 = 2 * l2 - q2;
      r2 = Math.round(255 * hue2rgb(p3, q2, h2 + 1 / 3));
      g2 = Math.round(255 * hue2rgb(p3, q2, h2));
      b2 = Math.round(255 * hue2rgb(p3, q2, h2 - 1 / 3));
    }
    ret = [r2, g2, b2, a2];
  }
  return ret;
};
var rgb2tuple = function rgb2tuple2(rgb) {
  var ret;
  var m2 = new RegExp("^" + rgba + "$").exec(rgb);
  if (m2) {
    ret = [];
    var isPct = [];
    for (var i2 = 1; i2 <= 3; i2++) {
      var channel = m2[i2];
      if (channel[channel.length - 1] === "%") {
        isPct[i2] = true;
      }
      channel = parseFloat(channel);
      if (isPct[i2]) {
        channel = channel / 100 * 255;
      }
      if (channel < 0 || channel > 255) {
        return;
      }
      ret.push(Math.floor(channel));
    }
    var atLeastOneIsPct = isPct[1] || isPct[2] || isPct[3];
    var allArePct = isPct[1] && isPct[2] && isPct[3];
    if (atLeastOneIsPct && !allArePct) {
      return;
    }
    var alpha = m2[4];
    if (alpha !== void 0) {
      alpha = parseFloat(alpha);
      if (alpha < 0 || alpha > 1) {
        return;
      }
      ret.push(alpha);
    }
  }
  return ret;
};
var colorname2tuple = function colorname2tuple2(color) {
  return colors[color.toLowerCase()];
};
var color2tuple = function color2tuple2(color) {
  return (array(color) ? color : null) || colorname2tuple(color) || hex2tuple(color) || rgb2tuple(color) || hsl2tuple(color);
};
var colors = {
  // special colour names
  transparent: [0, 0, 0, 0],
  // NB alpha === 0
  // regular colours
  aliceblue: [240, 248, 255],
  antiquewhite: [250, 235, 215],
  aqua: [0, 255, 255],
  aquamarine: [127, 255, 212],
  azure: [240, 255, 255],
  beige: [245, 245, 220],
  bisque: [255, 228, 196],
  black: [0, 0, 0],
  blanchedalmond: [255, 235, 205],
  blue: [0, 0, 255],
  blueviolet: [138, 43, 226],
  brown: [165, 42, 42],
  burlywood: [222, 184, 135],
  cadetblue: [95, 158, 160],
  chartreuse: [127, 255, 0],
  chocolate: [210, 105, 30],
  coral: [255, 127, 80],
  cornflowerblue: [100, 149, 237],
  cornsilk: [255, 248, 220],
  crimson: [220, 20, 60],
  cyan: [0, 255, 255],
  darkblue: [0, 0, 139],
  darkcyan: [0, 139, 139],
  darkgoldenrod: [184, 134, 11],
  darkgray: [169, 169, 169],
  darkgreen: [0, 100, 0],
  darkgrey: [169, 169, 169],
  darkkhaki: [189, 183, 107],
  darkmagenta: [139, 0, 139],
  darkolivegreen: [85, 107, 47],
  darkorange: [255, 140, 0],
  darkorchid: [153, 50, 204],
  darkred: [139, 0, 0],
  darksalmon: [233, 150, 122],
  darkseagreen: [143, 188, 143],
  darkslateblue: [72, 61, 139],
  darkslategray: [47, 79, 79],
  darkslategrey: [47, 79, 79],
  darkturquoise: [0, 206, 209],
  darkviolet: [148, 0, 211],
  deeppink: [255, 20, 147],
  deepskyblue: [0, 191, 255],
  dimgray: [105, 105, 105],
  dimgrey: [105, 105, 105],
  dodgerblue: [30, 144, 255],
  firebrick: [178, 34, 34],
  floralwhite: [255, 250, 240],
  forestgreen: [34, 139, 34],
  fuchsia: [255, 0, 255],
  gainsboro: [220, 220, 220],
  ghostwhite: [248, 248, 255],
  gold: [255, 215, 0],
  goldenrod: [218, 165, 32],
  gray: [128, 128, 128],
  grey: [128, 128, 128],
  green: [0, 128, 0],
  greenyellow: [173, 255, 47],
  honeydew: [240, 255, 240],
  hotpink: [255, 105, 180],
  indianred: [205, 92, 92],
  indigo: [75, 0, 130],
  ivory: [255, 255, 240],
  khaki: [240, 230, 140],
  lavender: [230, 230, 250],
  lavenderblush: [255, 240, 245],
  lawngreen: [124, 252, 0],
  lemonchiffon: [255, 250, 205],
  lightblue: [173, 216, 230],
  lightcoral: [240, 128, 128],
  lightcyan: [224, 255, 255],
  lightgoldenrodyellow: [250, 250, 210],
  lightgray: [211, 211, 211],
  lightgreen: [144, 238, 144],
  lightgrey: [211, 211, 211],
  lightpink: [255, 182, 193],
  lightsalmon: [255, 160, 122],
  lightseagreen: [32, 178, 170],
  lightskyblue: [135, 206, 250],
  lightslategray: [119, 136, 153],
  lightslategrey: [119, 136, 153],
  lightsteelblue: [176, 196, 222],
  lightyellow: [255, 255, 224],
  lime: [0, 255, 0],
  limegreen: [50, 205, 50],
  linen: [250, 240, 230],
  magenta: [255, 0, 255],
  maroon: [128, 0, 0],
  mediumaquamarine: [102, 205, 170],
  mediumblue: [0, 0, 205],
  mediumorchid: [186, 85, 211],
  mediumpurple: [147, 112, 219],
  mediumseagreen: [60, 179, 113],
  mediumslateblue: [123, 104, 238],
  mediumspringgreen: [0, 250, 154],
  mediumturquoise: [72, 209, 204],
  mediumvioletred: [199, 21, 133],
  midnightblue: [25, 25, 112],
  mintcream: [245, 255, 250],
  mistyrose: [255, 228, 225],
  moccasin: [255, 228, 181],
  navajowhite: [255, 222, 173],
  navy: [0, 0, 128],
  oldlace: [253, 245, 230],
  olive: [128, 128, 0],
  olivedrab: [107, 142, 35],
  orange: [255, 165, 0],
  orangered: [255, 69, 0],
  orchid: [218, 112, 214],
  palegoldenrod: [238, 232, 170],
  palegreen: [152, 251, 152],
  paleturquoise: [175, 238, 238],
  palevioletred: [219, 112, 147],
  papayawhip: [255, 239, 213],
  peachpuff: [255, 218, 185],
  peru: [205, 133, 63],
  pink: [255, 192, 203],
  plum: [221, 160, 221],
  powderblue: [176, 224, 230],
  purple: [128, 0, 128],
  red: [255, 0, 0],
  rosybrown: [188, 143, 143],
  royalblue: [65, 105, 225],
  saddlebrown: [139, 69, 19],
  salmon: [250, 128, 114],
  sandybrown: [244, 164, 96],
  seagreen: [46, 139, 87],
  seashell: [255, 245, 238],
  sienna: [160, 82, 45],
  silver: [192, 192, 192],
  skyblue: [135, 206, 235],
  slateblue: [106, 90, 205],
  slategray: [112, 128, 144],
  slategrey: [112, 128, 144],
  snow: [255, 250, 250],
  springgreen: [0, 255, 127],
  steelblue: [70, 130, 180],
  tan: [210, 180, 140],
  teal: [0, 128, 128],
  thistle: [216, 191, 216],
  tomato: [255, 99, 71],
  turquoise: [64, 224, 208],
  violet: [238, 130, 238],
  wheat: [245, 222, 179],
  white: [255, 255, 255],
  whitesmoke: [245, 245, 245],
  yellow: [255, 255, 0],
  yellowgreen: [154, 205, 50]
};
var setMap = function setMap2(options3) {
  var obj = options3.map;
  var keys2 = options3.keys;
  var l2 = keys2.length;
  for (var i2 = 0; i2 < l2; i2++) {
    var key = keys2[i2];
    if (plainObject(key)) {
      throw Error("Tried to set map with object key");
    }
    if (i2 < keys2.length - 1) {
      if (obj[key] == null) {
        obj[key] = {};
      }
      obj = obj[key];
    } else {
      obj[key] = options3.value;
    }
  }
};
var getMap = function getMap2(options3) {
  var obj = options3.map;
  var keys2 = options3.keys;
  var l2 = keys2.length;
  for (var i2 = 0; i2 < l2; i2++) {
    var key = keys2[i2];
    if (plainObject(key)) {
      throw Error("Tried to get map with object key");
    }
    obj = obj[key];
    if (obj == null) {
      return obj;
    }
  }
  return obj;
};
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x3) {
  return x3 && x3.__esModule && Object.prototype.hasOwnProperty.call(x3, "default") ? x3["default"] : x3;
}
var isObject_1;
var hasRequiredIsObject;
function requireIsObject() {
  if (hasRequiredIsObject) return isObject_1;
  hasRequiredIsObject = 1;
  function isObject(value) {
    var type2 = typeof value;
    return value != null && (type2 == "object" || type2 == "function");
  }
  isObject_1 = isObject;
  return isObject_1;
}
var _freeGlobal;
var hasRequired_freeGlobal;
function require_freeGlobal() {
  if (hasRequired_freeGlobal) return _freeGlobal;
  hasRequired_freeGlobal = 1;
  var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  _freeGlobal = freeGlobal;
  return _freeGlobal;
}
var _root;
var hasRequired_root;
function require_root() {
  if (hasRequired_root) return _root;
  hasRequired_root = 1;
  var freeGlobal = require_freeGlobal();
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  _root = root;
  return _root;
}
var now_1;
var hasRequiredNow;
function requireNow() {
  if (hasRequiredNow) return now_1;
  hasRequiredNow = 1;
  var root = require_root();
  var now = function() {
    return root.Date.now();
  };
  now_1 = now;
  return now_1;
}
var _trimmedEndIndex;
var hasRequired_trimmedEndIndex;
function require_trimmedEndIndex() {
  if (hasRequired_trimmedEndIndex) return _trimmedEndIndex;
  hasRequired_trimmedEndIndex = 1;
  var reWhitespace = /\s/;
  function trimmedEndIndex(string3) {
    var index = string3.length;
    while (index-- && reWhitespace.test(string3.charAt(index))) {
    }
    return index;
  }
  _trimmedEndIndex = trimmedEndIndex;
  return _trimmedEndIndex;
}
var _baseTrim;
var hasRequired_baseTrim;
function require_baseTrim() {
  if (hasRequired_baseTrim) return _baseTrim;
  hasRequired_baseTrim = 1;
  var trimmedEndIndex = require_trimmedEndIndex();
  var reTrimStart = /^\s+/;
  function baseTrim(string3) {
    return string3 ? string3.slice(0, trimmedEndIndex(string3) + 1).replace(reTrimStart, "") : string3;
  }
  _baseTrim = baseTrim;
  return _baseTrim;
}
var _Symbol;
var hasRequired_Symbol;
function require_Symbol() {
  if (hasRequired_Symbol) return _Symbol;
  hasRequired_Symbol = 1;
  var root = require_root();
  var Symbol2 = root.Symbol;
  _Symbol = Symbol2;
  return _Symbol;
}
var _getRawTag;
var hasRequired_getRawTag;
function require_getRawTag() {
  if (hasRequired_getRawTag) return _getRawTag;
  hasRequired_getRawTag = 1;
  var Symbol2 = require_Symbol();
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var nativeObjectToString = objectProto.toString;
  var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
      value[symToStringTag] = void 0;
      var unmasked = true;
    } catch (e) {
    }
    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }
  _getRawTag = getRawTag;
  return _getRawTag;
}
var _objectToString;
var hasRequired_objectToString;
function require_objectToString() {
  if (hasRequired_objectToString) return _objectToString;
  hasRequired_objectToString = 1;
  var objectProto = Object.prototype;
  var nativeObjectToString = objectProto.toString;
  function objectToString(value) {
    return nativeObjectToString.call(value);
  }
  _objectToString = objectToString;
  return _objectToString;
}
var _baseGetTag;
var hasRequired_baseGetTag;
function require_baseGetTag() {
  if (hasRequired_baseGetTag) return _baseGetTag;
  hasRequired_baseGetTag = 1;
  var Symbol2 = require_Symbol(), getRawTag = require_getRawTag(), objectToString = require_objectToString();
  var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
  var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
  function baseGetTag(value) {
    if (value == null) {
      return value === void 0 ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  }
  _baseGetTag = baseGetTag;
  return _baseGetTag;
}
var isObjectLike_1;
var hasRequiredIsObjectLike;
function requireIsObjectLike() {
  if (hasRequiredIsObjectLike) return isObjectLike_1;
  hasRequiredIsObjectLike = 1;
  function isObjectLike(value) {
    return value != null && typeof value == "object";
  }
  isObjectLike_1 = isObjectLike;
  return isObjectLike_1;
}
var isSymbol_1;
var hasRequiredIsSymbol;
function requireIsSymbol() {
  if (hasRequiredIsSymbol) return isSymbol_1;
  hasRequiredIsSymbol = 1;
  var baseGetTag = require_baseGetTag(), isObjectLike = requireIsObjectLike();
  var symbolTag = "[object Symbol]";
  function isSymbol(value) {
    return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
  }
  isSymbol_1 = isSymbol;
  return isSymbol_1;
}
var toNumber_1;
var hasRequiredToNumber;
function requireToNumber() {
  if (hasRequiredToNumber) return toNumber_1;
  hasRequiredToNumber = 1;
  var baseTrim = require_baseTrim(), isObject = requireIsObject(), isSymbol = requireIsSymbol();
  var NAN = 0 / 0;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsOctal = /^0o[0-7]+$/i;
  var freeParseInt = parseInt;
  function toNumber(value) {
    if (typeof value == "number") {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    if (isObject(value)) {
      var other = typeof value.valueOf == "function" ? value.valueOf() : value;
      value = isObject(other) ? other + "" : other;
    }
    if (typeof value != "string") {
      return value === 0 ? value : +value;
    }
    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }
  toNumber_1 = toNumber;
  return toNumber_1;
}
var debounce_1;
var hasRequiredDebounce;
function requireDebounce() {
  if (hasRequiredDebounce) return debounce_1;
  hasRequiredDebounce = 1;
  var isObject = requireIsObject(), now = requireNow(), toNumber = requireToNumber();
  var FUNC_ERROR_TEXT = "Expected a function";
  var nativeMax = Math.max, nativeMin = Math.min;
  function debounce2(func, wait, options3) {
    var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
    if (typeof func != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    wait = toNumber(wait) || 0;
    if (isObject(options3)) {
      leading = !!options3.leading;
      maxing = "maxWait" in options3;
      maxWait = maxing ? nativeMax(toNumber(options3.maxWait) || 0, wait) : maxWait;
      trailing = "trailing" in options3 ? !!options3.trailing : trailing;
    }
    function invokeFunc(time2) {
      var args = lastArgs, thisArg = lastThis;
      lastArgs = lastThis = void 0;
      lastInvokeTime = time2;
      result = func.apply(thisArg, args);
      return result;
    }
    function leadingEdge(time2) {
      lastInvokeTime = time2;
      timerId = setTimeout(timerExpired, wait);
      return leading ? invokeFunc(time2) : result;
    }
    function remainingWait(time2) {
      var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
      return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }
    function shouldInvoke(time2) {
      var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
      return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
      var time2 = now();
      if (shouldInvoke(time2)) {
        return trailingEdge(time2);
      }
      timerId = setTimeout(timerExpired, remainingWait(time2));
    }
    function trailingEdge(time2) {
      timerId = void 0;
      if (trailing && lastArgs) {
        return invokeFunc(time2);
      }
      lastArgs = lastThis = void 0;
      return result;
    }
    function cancel() {
      if (timerId !== void 0) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = void 0;
    }
    function flush() {
      return timerId === void 0 ? result : trailingEdge(now());
    }
    function debounced() {
      var time2 = now(), isInvoking = shouldInvoke(time2);
      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time2;
      if (isInvoking) {
        if (timerId === void 0) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          clearTimeout(timerId);
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === void 0) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }
  debounce_1 = debounce2;
  return debounce_1;
}
var debounceExports = requireDebounce();
var debounce = getDefaultExportFromCjs(debounceExports);
var performance$1 = _window ? _window.performance : null;
var pnow = performance$1 && performance$1.now ? function() {
  return performance$1.now();
} : function() {
  return Date.now();
};
var raf = function() {
  if (_window) {
    if (_window.requestAnimationFrame) {
      return function(fn4) {
        _window.requestAnimationFrame(fn4);
      };
    } else if (_window.mozRequestAnimationFrame) {
      return function(fn4) {
        _window.mozRequestAnimationFrame(fn4);
      };
    } else if (_window.webkitRequestAnimationFrame) {
      return function(fn4) {
        _window.webkitRequestAnimationFrame(fn4);
      };
    } else if (_window.msRequestAnimationFrame) {
      return function(fn4) {
        _window.msRequestAnimationFrame(fn4);
      };
    }
  }
  return function(fn4) {
    if (fn4) {
      setTimeout(function() {
        fn4(pnow());
      }, 1e3 / 60);
    }
  };
}();
var requestAnimationFrame2 = function requestAnimationFrame3(fn4) {
  return raf(fn4);
};
var performanceNow = pnow;
var DEFAULT_HASH_SEED = 9261;
var K = 65599;
var DEFAULT_HASH_SEED_ALT = 5381;
var hashIterableInts = function hashIterableInts2(iterator) {
  var seed = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_HASH_SEED;
  var hash = seed;
  var entry;
  for (; ; ) {
    entry = iterator.next();
    if (entry.done) {
      break;
    }
    hash = hash * K + entry.value | 0;
  }
  return hash;
};
var hashInt = function hashInt2(num) {
  var seed = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_HASH_SEED;
  return seed * K + num | 0;
};
var hashIntAlt = function hashIntAlt2(num) {
  var seed = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_HASH_SEED_ALT;
  return (seed << 5) + seed + num | 0;
};
var combineHashes = function combineHashes2(hash1, hash2) {
  return hash1 * 2097152 + hash2;
};
var combineHashesArray = function combineHashesArray2(hashes) {
  return hashes[0] * 2097152 + hashes[1];
};
var hashArrays = function hashArrays2(hashes1, hashes2) {
  return [hashInt(hashes1[0], hashes2[0]), hashIntAlt(hashes1[1], hashes2[1])];
};
var hashIntsArray = function hashIntsArray2(ints, seed) {
  var entry = {
    value: 0,
    done: false
  };
  var i2 = 0;
  var length = ints.length;
  var iterator = {
    next: function next2() {
      if (i2 < length) {
        entry.value = ints[i2++];
      } else {
        entry.done = true;
      }
      return entry;
    }
  };
  return hashIterableInts(iterator, seed);
};
var hashString = function hashString2(str, seed) {
  var entry = {
    value: 0,
    done: false
  };
  var i2 = 0;
  var length = str.length;
  var iterator = {
    next: function next2() {
      if (i2 < length) {
        entry.value = str.charCodeAt(i2++);
      } else {
        entry.done = true;
      }
      return entry;
    }
  };
  return hashIterableInts(iterator, seed);
};
var hashStrings = function hashStrings2() {
  return hashStringsArray(arguments);
};
var hashStringsArray = function hashStringsArray2(strs) {
  var hash;
  for (var i2 = 0; i2 < strs.length; i2++) {
    var str = strs[i2];
    if (i2 === 0) {
      hash = hashString(str);
    } else {
      hash = hashString(str, hash);
    }
  }
  return hash;
};
function rotatePoint(x3, y3, centerX, centerY, angleDegrees) {
  var angleRadians = angleDegrees * Math.PI / 180;
  var rotatedX = Math.cos(angleRadians) * (x3 - centerX) - Math.sin(angleRadians) * (y3 - centerY) + centerX;
  var rotatedY = Math.sin(angleRadians) * (x3 - centerX) + Math.cos(angleRadians) * (y3 - centerY) + centerY;
  return {
    x: rotatedX,
    y: rotatedY
  };
}
var movePointByBoxAspect = function movePointByBoxAspect2(x3, y3, boxX, boxY, skewX, skewY) {
  return {
    x: (x3 - boxX) * skewX + boxX,
    y: (y3 - boxY) * skewY + boxY
  };
};
function rotatePosAndSkewByBox(pos, box, angleDegrees) {
  if (angleDegrees === 0) return pos;
  var centerX = (box.x1 + box.x2) / 2;
  var centerY = (box.y1 + box.y2) / 2;
  var skewX = box.w / box.h;
  var skewY = 1 / skewX;
  var rotated = rotatePoint(pos.x, pos.y, centerX, centerY, angleDegrees);
  var skewed = movePointByBoxAspect(rotated.x, rotated.y, centerX, centerY, skewX, skewY);
  return {
    x: skewed.x,
    y: skewed.y
  };
}
var warningsEnabled = true;
var warnSupported = console.warn != null;
var traceSupported = console.trace != null;
var MAX_INT$1 = Number.MAX_SAFE_INTEGER || 9007199254740991;
var trueify = function trueify2() {
  return true;
};
var falsify = function falsify2() {
  return false;
};
var zeroify = function zeroify2() {
  return 0;
};
var noop$1 = function noop() {
};
var error = function error2(msg) {
  throw new Error(msg);
};
var warnings = function warnings2(enabled) {
  if (enabled !== void 0) {
    warningsEnabled = !!enabled;
  } else {
    return warningsEnabled;
  }
};
var warn = function warn2(msg) {
  if (!warnings()) {
    return;
  }
  if (warnSupported) {
    console.warn(msg);
  } else {
    console.log(msg);
    if (traceSupported) {
      console.trace();
    }
  }
};
var clone = function clone2(obj) {
  return extend({}, obj);
};
var copy = function copy2(obj) {
  if (obj == null) {
    return obj;
  }
  if (array(obj)) {
    return obj.slice();
  } else if (plainObject(obj)) {
    return clone(obj);
  } else {
    return obj;
  }
};
var copyArray = function copyArray2(arr) {
  return arr.slice();
};
var uuid = function uuid2(a2, b2) {
  for (
    // loop :)
    b2 = a2 = "";
    // b - result , a - numeric letiable
    a2++ < 36;
    //
    b2 += a2 * 51 & 52 ? (
      //  return a random number or 4
      (a2 ^ 15 ? (
        // generate a random number from 0 to 15
        8 ^ Math.random() * (a2 ^ 20 ? 16 : 4)
      ) : 4).toString(16)
    ) : "-"
  ) ;
  return b2;
};
var _staticEmptyObject = {};
var staticEmptyObject = function staticEmptyObject2() {
  return _staticEmptyObject;
};
var defaults$g = function defaults(_defaults) {
  var keys2 = Object.keys(_defaults);
  return function(opts) {
    var filledOpts = {};
    for (var i2 = 0; i2 < keys2.length; i2++) {
      var key = keys2[i2];
      var optVal = opts == null ? void 0 : opts[key];
      filledOpts[key] = optVal === void 0 ? _defaults[key] : optVal;
    }
    return filledOpts;
  };
};
var removeFromArray = function removeFromArray2(arr, ele, oneCopy) {
  for (var i2 = arr.length - 1; i2 >= 0; i2--) {
    if (arr[i2] === ele) {
      arr.splice(i2, 1);
    }
  }
};
var clearArray = function clearArray2(arr) {
  arr.splice(0, arr.length);
};
var push = function push2(arr, otherArr) {
  for (var i2 = 0; i2 < otherArr.length; i2++) {
    var el2 = otherArr[i2];
    arr.push(el2);
  }
};
var getPrefixedProperty = function getPrefixedProperty2(obj, propName, prefix) {
  if (prefix) {
    propName = prependCamel(prefix, propName);
  }
  return obj[propName];
};
var setPrefixedProperty = function setPrefixedProperty2(obj, propName, prefix, value) {
  if (prefix) {
    propName = prependCamel(prefix, propName);
  }
  obj[propName] = value;
};
var ObjectMap = function() {
  function ObjectMap2() {
    _classCallCheck(this, ObjectMap2);
    this._obj = {};
  }
  return _createClass(ObjectMap2, [{
    key: "set",
    value: function set2(key, val) {
      this._obj[key] = val;
      return this;
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      this._obj[key] = void 0;
      return this;
    }
  }, {
    key: "clear",
    value: function clear() {
      this._obj = {};
    }
  }, {
    key: "has",
    value: function has(key) {
      return this._obj[key] !== void 0;
    }
  }, {
    key: "get",
    value: function get2(key) {
      return this._obj[key];
    }
  }]);
}();
var Map$1 = typeof Map !== "undefined" ? Map : ObjectMap;
var undef = "undefined";
var ObjectSet = function() {
  function ObjectSet2(arrayOrObjectSet) {
    _classCallCheck(this, ObjectSet2);
    this._obj = /* @__PURE__ */ Object.create(null);
    this.size = 0;
    if (arrayOrObjectSet != null) {
      var arr;
      if (arrayOrObjectSet.instanceString != null && arrayOrObjectSet.instanceString() === this.instanceString()) {
        arr = arrayOrObjectSet.toArray();
      } else {
        arr = arrayOrObjectSet;
      }
      for (var i2 = 0; i2 < arr.length; i2++) {
        this.add(arr[i2]);
      }
    }
  }
  return _createClass(ObjectSet2, [{
    key: "instanceString",
    value: function instanceString4() {
      return "set";
    }
  }, {
    key: "add",
    value: function add3(val) {
      var o2 = this._obj;
      if (o2[val] !== 1) {
        o2[val] = 1;
        this.size++;
      }
    }
  }, {
    key: "delete",
    value: function _delete(val) {
      var o2 = this._obj;
      if (o2[val] === 1) {
        o2[val] = 0;
        this.size--;
      }
    }
  }, {
    key: "clear",
    value: function clear() {
      this._obj = /* @__PURE__ */ Object.create(null);
    }
  }, {
    key: "has",
    value: function has(val) {
      return this._obj[val] === 1;
    }
  }, {
    key: "toArray",
    value: function toArray2() {
      var _this = this;
      return Object.keys(this._obj).filter(function(key) {
        return _this.has(key);
      });
    }
  }, {
    key: "forEach",
    value: function forEach2(callback, thisArg) {
      return this.toArray().forEach(callback, thisArg);
    }
  }]);
}();
var Set$1 = (typeof Set === "undefined" ? "undefined" : _typeof(Set)) !== undef ? Set : ObjectSet;
var Element = function Element2(cy, params) {
  var restore = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
  if (cy === void 0 || params === void 0 || !core(cy)) {
    error("An element must have a core reference and parameters set");
    return;
  }
  var group2 = params.group;
  if (group2 == null) {
    if (params.data && params.data.source != null && params.data.target != null) {
      group2 = "edges";
    } else {
      group2 = "nodes";
    }
  }
  if (group2 !== "nodes" && group2 !== "edges") {
    error("An element must be of type `nodes` or `edges`; you specified `" + group2 + "`");
    return;
  }
  this.length = 1;
  this[0] = this;
  var _p = this._private = {
    cy,
    single: true,
    // indicates this is an element
    data: params.data || {},
    // data object
    position: params.position || {
      x: 0,
      y: 0
    },
    // (x, y) position pair
    autoWidth: void 0,
    // width and height of nodes calculated by the renderer when set to special 'auto' value
    autoHeight: void 0,
    autoPadding: void 0,
    compoundBoundsClean: false,
    // whether the compound dimensions need to be recalculated the next time dimensions are read
    listeners: [],
    // array of bound listeners
    group: group2,
    // string; 'nodes' or 'edges'
    style: {},
    // properties as set by the style
    rstyle: {},
    // properties for style sent from the renderer to the core
    styleCxts: [],
    // applied style contexts from the styler
    styleKeys: {},
    // per-group keys of style property values
    removed: true,
    // whether it's inside the vis; true if removed (set true here since we call restore)
    selected: params.selected ? true : false,
    // whether it's selected
    selectable: params.selectable === void 0 ? true : params.selectable ? true : false,
    // whether it's selectable
    locked: params.locked ? true : false,
    // whether the element is locked (cannot be moved)
    grabbed: false,
    // whether the element is grabbed by the mouse; renderer sets this privately
    grabbable: params.grabbable === void 0 ? true : params.grabbable ? true : false,
    // whether the element can be grabbed
    pannable: params.pannable === void 0 ? group2 === "edges" ? true : false : params.pannable ? true : false,
    // whether the element has passthrough panning enabled
    active: false,
    // whether the element is active from user interaction
    classes: new Set$1(),
    // map ( className => true )
    animation: {
      // object for currently-running animations
      current: [],
      queue: []
    },
    rscratch: {},
    // object in which the renderer can store information
    scratch: params.scratch || {},
    // scratch objects
    edges: [],
    // array of connected edges
    children: [],
    // array of children
    parent: params.parent && params.parent.isNode() ? params.parent : null,
    // parent ref
    traversalCache: {},
    // cache of output of traversal functions
    backgrounding: false,
    // whether background images are loading
    bbCache: null,
    // cache of the current bounding box
    bbCacheShift: {
      x: 0,
      y: 0
    },
    // shift applied to cached bb to be applied on next get
    bodyBounds: null,
    // bounds cache of element body, w/o overlay
    overlayBounds: null,
    // bounds cache of element body, including overlay
    labelBounds: {
      // bounds cache of labels
      all: null,
      source: null,
      target: null,
      main: null
    },
    arrowBounds: {
      // bounds cache of edge arrows
      source: null,
      target: null,
      "mid-source": null,
      "mid-target": null
    }
  };
  if (_p.position.x == null) {
    _p.position.x = 0;
  }
  if (_p.position.y == null) {
    _p.position.y = 0;
  }
  if (params.renderedPosition) {
    var rpos = params.renderedPosition;
    var pan2 = cy.pan();
    var zoom2 = cy.zoom();
    _p.position = {
      x: (rpos.x - pan2.x) / zoom2,
      y: (rpos.y - pan2.y) / zoom2
    };
  }
  var classes2 = [];
  if (array(params.classes)) {
    classes2 = params.classes;
  } else if (string(params.classes)) {
    classes2 = params.classes.split(/\s+/);
  }
  for (var i2 = 0, l2 = classes2.length; i2 < l2; i2++) {
    var cls = classes2[i2];
    if (!cls || cls === "") {
      continue;
    }
    _p.classes.add(cls);
  }
  this.createEmitter();
  if (restore === void 0 || restore) {
    this.restore();
  }
  var bypass = params.style || params.css;
  if (bypass) {
    warn("Setting a `style` bypass at element creation should be done only when absolutely necessary.  Try to use the stylesheet instead.");
    this.style(bypass);
  }
};
var defineSearch = function defineSearch2(params) {
  params = {
    bfs: params.bfs || !params.dfs,
    dfs: params.dfs || !params.bfs
  };
  return function searchFn(roots, fn4, directed) {
    var options3;
    if (plainObject(roots) && !elementOrCollection(roots)) {
      options3 = roots;
      roots = options3.roots || options3.root;
      fn4 = options3.visit;
      directed = options3.directed;
    }
    directed = arguments.length === 2 && !fn$6(fn4) ? fn4 : directed;
    fn4 = fn$6(fn4) ? fn4 : function() {
    };
    var cy = this._private.cy;
    var v3 = roots = string(roots) ? this.filter(roots) : roots;
    var Q2 = [];
    var connectedNodes = [];
    var connectedBy = {};
    var id2depth = {};
    var V2 = {};
    var j2 = 0;
    var found;
    var _this$byGroup = this.byGroup(), nodes3 = _this$byGroup.nodes, edges3 = _this$byGroup.edges;
    for (var i2 = 0; i2 < v3.length; i2++) {
      var vi2 = v3[i2];
      var viId = vi2.id();
      if (vi2.isNode()) {
        Q2.unshift(vi2);
        if (params.bfs) {
          V2[viId] = true;
          connectedNodes.push(vi2);
        }
        id2depth[viId] = 0;
      }
    }
    var _loop = function _loop2() {
      var v5 = params.bfs ? Q2.shift() : Q2.pop();
      var vId = v5.id();
      if (params.dfs) {
        if (V2[vId]) {
          return 0;
        }
        V2[vId] = true;
        connectedNodes.push(v5);
      }
      var depth = id2depth[vId];
      var prevEdge = connectedBy[vId];
      var src = prevEdge != null ? prevEdge.source() : null;
      var tgt = prevEdge != null ? prevEdge.target() : null;
      var prevNode = prevEdge == null ? void 0 : v5.same(src) ? tgt[0] : src[0];
      var ret;
      ret = fn4(v5, prevEdge, prevNode, j2++, depth);
      if (ret === true) {
        found = v5;
        return 1;
      }
      if (ret === false) {
        return 1;
      }
      var vwEdges = v5.connectedEdges().filter(function(e2) {
        return (!directed || e2.source().same(v5)) && edges3.has(e2);
      });
      for (var _i22 = 0; _i22 < vwEdges.length; _i22++) {
        var e = vwEdges[_i22];
        var w2 = e.connectedNodes().filter(function(n2) {
          return !n2.same(v5) && nodes3.has(n2);
        });
        var wId = w2.id();
        if (w2.length !== 0 && !V2[wId]) {
          w2 = w2[0];
          Q2.push(w2);
          if (params.bfs) {
            V2[wId] = true;
            connectedNodes.push(w2);
          }
          connectedBy[wId] = e;
          id2depth[wId] = id2depth[vId] + 1;
        }
      }
    }, _ret;
    while (Q2.length !== 0) {
      _ret = _loop();
      if (_ret === 0) continue;
      if (_ret === 1) break;
    }
    var connectedEles = cy.collection();
    for (var _i2 = 0; _i2 < connectedNodes.length; _i2++) {
      var node = connectedNodes[_i2];
      var edge = connectedBy[node.id()];
      if (edge != null) {
        connectedEles.push(edge);
      }
      connectedEles.push(node);
    }
    return {
      path: cy.collection(connectedEles),
      found: cy.collection(found)
    };
  };
};
var elesfn$v = {
  breadthFirstSearch: defineSearch({
    bfs: true
  }),
  depthFirstSearch: defineSearch({
    dfs: true
  })
};
elesfn$v.bfs = elesfn$v.breadthFirstSearch;
elesfn$v.dfs = elesfn$v.depthFirstSearch;
var heap$2 = { exports: {} };
var heap$1 = heap$2.exports;
var hasRequiredHeap$1;
function requireHeap$1() {
  if (hasRequiredHeap$1) return heap$2.exports;
  hasRequiredHeap$1 = 1;
  (function(module, exports) {
    (function() {
      var Heap2, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min4, nlargest, nsmallest, updateItem, _siftdown, _siftup;
      floor = Math.floor, min4 = Math.min;
      defaultCmp = function(x3, y3) {
        if (x3 < y3) {
          return -1;
        }
        if (x3 > y3) {
          return 1;
        }
        return 0;
      };
      insort = function(a2, x3, lo2, hi2, cmp) {
        var mid;
        if (lo2 == null) {
          lo2 = 0;
        }
        if (cmp == null) {
          cmp = defaultCmp;
        }
        if (lo2 < 0) {
          throw new Error("lo must be non-negative");
        }
        if (hi2 == null) {
          hi2 = a2.length;
        }
        while (lo2 < hi2) {
          mid = floor((lo2 + hi2) / 2);
          if (cmp(x3, a2[mid]) < 0) {
            hi2 = mid;
          } else {
            lo2 = mid + 1;
          }
        }
        return [].splice.apply(a2, [lo2, lo2 - lo2].concat(x3)), x3;
      };
      heappush = function(array3, item, cmp) {
        if (cmp == null) {
          cmp = defaultCmp;
        }
        array3.push(item);
        return _siftdown(array3, 0, array3.length - 1, cmp);
      };
      heappop = function(array3, cmp) {
        var lastelt, returnitem;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        lastelt = array3.pop();
        if (array3.length) {
          returnitem = array3[0];
          array3[0] = lastelt;
          _siftup(array3, 0, cmp);
        } else {
          returnitem = lastelt;
        }
        return returnitem;
      };
      heapreplace = function(array3, item, cmp) {
        var returnitem;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        returnitem = array3[0];
        array3[0] = item;
        _siftup(array3, 0, cmp);
        return returnitem;
      };
      heappushpop = function(array3, item, cmp) {
        var _ref;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        if (array3.length && cmp(array3[0], item) < 0) {
          _ref = [array3[0], item], item = _ref[0], array3[0] = _ref[1];
          _siftup(array3, 0, cmp);
        }
        return item;
      };
      heapify = function(array3, cmp) {
        var i2, _i2, _len, _ref1, _results, _results1;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        _ref1 = (function() {
          _results1 = [];
          for (var _j = 0, _ref = floor(array3.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--) {
            _results1.push(_j);
          }
          return _results1;
        }).apply(this).reverse();
        _results = [];
        for (_i2 = 0, _len = _ref1.length; _i2 < _len; _i2++) {
          i2 = _ref1[_i2];
          _results.push(_siftup(array3, i2, cmp));
        }
        return _results;
      };
      updateItem = function(array3, item, cmp) {
        var pos;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        pos = array3.indexOf(item);
        if (pos === -1) {
          return;
        }
        _siftdown(array3, 0, pos, cmp);
        return _siftup(array3, pos, cmp);
      };
      nlargest = function(array3, n2, cmp) {
        var elem, result, _i2, _len, _ref;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        result = array3.slice(0, n2);
        if (!result.length) {
          return result;
        }
        heapify(result, cmp);
        _ref = array3.slice(n2);
        for (_i2 = 0, _len = _ref.length; _i2 < _len; _i2++) {
          elem = _ref[_i2];
          heappushpop(result, elem, cmp);
        }
        return result.sort(cmp).reverse();
      };
      nsmallest = function(array3, n2, cmp) {
        var elem, los, result, _i2, _j, _len, _ref, _ref1, _results;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        if (n2 * 10 <= array3.length) {
          result = array3.slice(0, n2).sort(cmp);
          if (!result.length) {
            return result;
          }
          los = result[result.length - 1];
          _ref = array3.slice(n2);
          for (_i2 = 0, _len = _ref.length; _i2 < _len; _i2++) {
            elem = _ref[_i2];
            if (cmp(elem, los) < 0) {
              insort(result, elem, 0, null, cmp);
              result.pop();
              los = result[result.length - 1];
            }
          }
          return result;
        }
        heapify(array3, cmp);
        _results = [];
        for (_j = 0, _ref1 = min4(n2, array3.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; 0 <= _ref1 ? ++_j : --_j) {
          _results.push(heappop(array3, cmp));
        }
        return _results;
      };
      _siftdown = function(array3, startpos, pos, cmp) {
        var newitem, parent4, parentpos;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        newitem = array3[pos];
        while (pos > startpos) {
          parentpos = pos - 1 >> 1;
          parent4 = array3[parentpos];
          if (cmp(newitem, parent4) < 0) {
            array3[pos] = parent4;
            pos = parentpos;
            continue;
          }
          break;
        }
        return array3[pos] = newitem;
      };
      _siftup = function(array3, pos, cmp) {
        var childpos, endpos, newitem, rightpos, startpos;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        endpos = array3.length;
        startpos = pos;
        newitem = array3[pos];
        childpos = 2 * pos + 1;
        while (childpos < endpos) {
          rightpos = childpos + 1;
          if (rightpos < endpos && !(cmp(array3[childpos], array3[rightpos]) < 0)) {
            childpos = rightpos;
          }
          array3[pos] = array3[childpos];
          pos = childpos;
          childpos = 2 * pos + 1;
        }
        array3[pos] = newitem;
        return _siftdown(array3, startpos, pos, cmp);
      };
      Heap2 = function() {
        Heap3.push = heappush;
        Heap3.pop = heappop;
        Heap3.replace = heapreplace;
        Heap3.pushpop = heappushpop;
        Heap3.heapify = heapify;
        Heap3.updateItem = updateItem;
        Heap3.nlargest = nlargest;
        Heap3.nsmallest = nsmallest;
        function Heap3(cmp) {
          this.cmp = cmp != null ? cmp : defaultCmp;
          this.nodes = [];
        }
        Heap3.prototype.push = function(x3) {
          return heappush(this.nodes, x3, this.cmp);
        };
        Heap3.prototype.pop = function() {
          return heappop(this.nodes, this.cmp);
        };
        Heap3.prototype.peek = function() {
          return this.nodes[0];
        };
        Heap3.prototype.contains = function(x3) {
          return this.nodes.indexOf(x3) !== -1;
        };
        Heap3.prototype.replace = function(x3) {
          return heapreplace(this.nodes, x3, this.cmp);
        };
        Heap3.prototype.pushpop = function(x3) {
          return heappushpop(this.nodes, x3, this.cmp);
        };
        Heap3.prototype.heapify = function() {
          return heapify(this.nodes, this.cmp);
        };
        Heap3.prototype.updateItem = function(x3) {
          return updateItem(this.nodes, x3, this.cmp);
        };
        Heap3.prototype.clear = function() {
          return this.nodes = [];
        };
        Heap3.prototype.empty = function() {
          return this.nodes.length === 0;
        };
        Heap3.prototype.size = function() {
          return this.nodes.length;
        };
        Heap3.prototype.clone = function() {
          var heap2;
          heap2 = new Heap3();
          heap2.nodes = this.nodes.slice(0);
          return heap2;
        };
        Heap3.prototype.toArray = function() {
          return this.nodes.slice(0);
        };
        Heap3.prototype.insert = Heap3.prototype.push;
        Heap3.prototype.top = Heap3.prototype.peek;
        Heap3.prototype.front = Heap3.prototype.peek;
        Heap3.prototype.has = Heap3.prototype.contains;
        Heap3.prototype.copy = Heap3.prototype.clone;
        return Heap3;
      }();
      (function(root, factory) {
        {
          return module.exports = factory();
        }
      })(this, function() {
        return Heap2;
      });
    }).call(heap$1);
  })(heap$2);
  return heap$2.exports;
}
var heap;
var hasRequiredHeap;
function requireHeap() {
  if (hasRequiredHeap) return heap;
  hasRequiredHeap = 1;
  heap = requireHeap$1();
  return heap;
}
var heapExports = requireHeap();
var Heap = getDefaultExportFromCjs(heapExports);
var dijkstraDefaults = defaults$g({
  root: null,
  weight: function weight(edge) {
    return 1;
  },
  directed: false
});
var elesfn$u = {
  dijkstra: function dijkstra(options3) {
    if (!plainObject(options3)) {
      var args = arguments;
      options3 = {
        root: args[0],
        weight: args[1],
        directed: args[2]
      };
    }
    var _dijkstraDefaults = dijkstraDefaults(options3), root = _dijkstraDefaults.root, weight8 = _dijkstraDefaults.weight, directed = _dijkstraDefaults.directed;
    var eles = this;
    var weightFn = weight8;
    var source = string(root) ? this.filter(root)[0] : root[0];
    var dist3 = {};
    var prev = {};
    var knownDist = {};
    var _this$byGroup = this.byGroup(), nodes3 = _this$byGroup.nodes, edges3 = _this$byGroup.edges;
    edges3.unmergeBy(function(ele) {
      return ele.isLoop();
    });
    var getDist3 = function getDist4(node2) {
      return dist3[node2.id()];
    };
    var setDist = function setDist2(node2, d2) {
      dist3[node2.id()] = d2;
      Q2.updateItem(node2);
    };
    var Q2 = new Heap(function(a2, b2) {
      return getDist3(a2) - getDist3(b2);
    });
    for (var i2 = 0; i2 < nodes3.length; i2++) {
      var node = nodes3[i2];
      dist3[node.id()] = node.same(source) ? 0 : Infinity;
      Q2.push(node);
    }
    var distBetween = function distBetween2(u3, v5) {
      var uvs = (directed ? u3.edgesTo(v5) : u3.edgesWith(v5)).intersect(edges3);
      var smallestDistance = Infinity;
      var smallestEdge;
      for (var _i3 = 0; _i3 < uvs.length; _i3++) {
        var edge = uvs[_i3];
        var _weight = weightFn(edge);
        if (_weight < smallestDistance || !smallestEdge) {
          smallestDistance = _weight;
          smallestEdge = edge;
        }
      }
      return {
        edge: smallestEdge,
        dist: smallestDistance
      };
    };
    while (Q2.size() > 0) {
      var u2 = Q2.pop();
      var smalletsDist = getDist3(u2);
      var uid = u2.id();
      knownDist[uid] = smalletsDist;
      if (smalletsDist === Infinity) {
        continue;
      }
      var neighbors = u2.neighborhood().intersect(nodes3);
      for (var _i2 = 0; _i2 < neighbors.length; _i2++) {
        var v3 = neighbors[_i2];
        var vid = v3.id();
        var vDist = distBetween(u2, v3);
        var alt = smalletsDist + vDist.dist;
        if (alt < getDist3(v3)) {
          setDist(v3, alt);
          prev[vid] = {
            node: u2,
            edge: vDist.edge
          };
        }
      }
    }
    return {
      distanceTo: function distanceTo(node2) {
        var target = string(node2) ? nodes3.filter(node2)[0] : node2[0];
        return knownDist[target.id()];
      },
      pathTo: function pathTo(node2) {
        var target = string(node2) ? nodes3.filter(node2)[0] : node2[0];
        var S2 = [];
        var u3 = target;
        var uid2 = u3.id();
        if (target.length > 0) {
          S2.unshift(target);
          while (prev[uid2]) {
            var p3 = prev[uid2];
            S2.unshift(p3.edge);
            S2.unshift(p3.node);
            u3 = p3.node;
            uid2 = u3.id();
          }
        }
        return eles.spawn(S2);
      }
    };
  }
};
var elesfn$t = {
  // kruskal's algorithm (finds min spanning tree, assuming undirected graph)
  // implemented from pseudocode from wikipedia
  kruskal: function kruskal(weightFn) {
    weightFn = weightFn || function(edge2) {
      return 1;
    };
    var _this$byGroup = this.byGroup(), nodes3 = _this$byGroup.nodes, edges3 = _this$byGroup.edges;
    var numNodes = nodes3.length;
    var forest = new Array(numNodes);
    var A2 = nodes3;
    var findSetIndex = function findSetIndex2(ele) {
      for (var i3 = 0; i3 < forest.length; i3++) {
        var eles = forest[i3];
        if (eles.has(ele)) {
          return i3;
        }
      }
    };
    for (var i2 = 0; i2 < numNodes; i2++) {
      forest[i2] = this.spawn(nodes3[i2]);
    }
    var S2 = edges3.sort(function(a2, b2) {
      return weightFn(a2) - weightFn(b2);
    });
    for (var _i2 = 0; _i2 < S2.length; _i2++) {
      var edge = S2[_i2];
      var u2 = edge.source()[0];
      var v3 = edge.target()[0];
      var setUIndex = findSetIndex(u2);
      var setVIndex = findSetIndex(v3);
      var setU = forest[setUIndex];
      var setV = forest[setVIndex];
      if (setUIndex !== setVIndex) {
        A2.merge(edge);
        setU.merge(setV);
        forest.splice(setVIndex, 1);
      }
    }
    return A2;
  }
};
var aStarDefaults = defaults$g({
  root: null,
  goal: null,
  weight: function weight2(edge) {
    return 1;
  },
  heuristic: function heuristic(edge) {
    return 0;
  },
  directed: false
});
var elesfn$s = {
  // Implemented from pseudocode from wikipedia
  aStar: function aStar(options3) {
    var cy = this.cy();
    var _aStarDefaults = aStarDefaults(options3), root = _aStarDefaults.root, goal = _aStarDefaults.goal, heuristic2 = _aStarDefaults.heuristic, directed = _aStarDefaults.directed, weight8 = _aStarDefaults.weight;
    root = cy.collection(root)[0];
    goal = cy.collection(goal)[0];
    var sid = root.id();
    var tid = goal.id();
    var gScore = {};
    var fScore = {};
    var closedSetIds = {};
    var openSet = new Heap(function(a2, b2) {
      return fScore[a2.id()] - fScore[b2.id()];
    });
    var openSetIds = new Set$1();
    var cameFrom = {};
    var cameFromEdge = {};
    var addToOpenSet = function addToOpenSet2(ele, id2) {
      openSet.push(ele);
      openSetIds.add(id2);
    };
    var cMin, cMinId;
    var popFromOpenSet = function popFromOpenSet2() {
      cMin = openSet.pop();
      cMinId = cMin.id();
      openSetIds["delete"](cMinId);
    };
    var isInOpenSet = function isInOpenSet2(id2) {
      return openSetIds.has(id2);
    };
    addToOpenSet(root, sid);
    gScore[sid] = 0;
    fScore[sid] = heuristic2(root);
    var steps = 0;
    while (openSet.size() > 0) {
      popFromOpenSet();
      steps++;
      if (cMinId === tid) {
        var path = [];
        var pathNode = goal;
        var pathNodeId = tid;
        var pathEdge = cameFromEdge[pathNodeId];
        for (; ; ) {
          path.unshift(pathNode);
          if (pathEdge != null) {
            path.unshift(pathEdge);
          }
          pathNode = cameFrom[pathNodeId];
          if (pathNode == null) {
            break;
          }
          pathNodeId = pathNode.id();
          pathEdge = cameFromEdge[pathNodeId];
        }
        return {
          found: true,
          distance: gScore[cMinId],
          path: this.spawn(path),
          steps
        };
      }
      closedSetIds[cMinId] = true;
      var vwEdges = cMin._private.edges;
      for (var i2 = 0; i2 < vwEdges.length; i2++) {
        var e = vwEdges[i2];
        if (!this.hasElementWithId(e.id())) {
          continue;
        }
        if (directed && e.data("source") !== cMinId) {
          continue;
        }
        var wSrc = e.source();
        var wTgt = e.target();
        var w2 = wSrc.id() !== cMinId ? wSrc : wTgt;
        var wid = w2.id();
        if (!this.hasElementWithId(wid)) {
          continue;
        }
        if (closedSetIds[wid]) {
          continue;
        }
        var tempScore = gScore[cMinId] + weight8(e);
        if (!isInOpenSet(wid)) {
          gScore[wid] = tempScore;
          fScore[wid] = tempScore + heuristic2(w2);
          addToOpenSet(w2, wid);
          cameFrom[wid] = cMin;
          cameFromEdge[wid] = e;
          continue;
        }
        if (tempScore < gScore[wid]) {
          gScore[wid] = tempScore;
          fScore[wid] = tempScore + heuristic2(w2);
          cameFrom[wid] = cMin;
          cameFromEdge[wid] = e;
        }
      }
    }
    return {
      found: false,
      distance: void 0,
      path: void 0,
      steps
    };
  }
};
var floydWarshallDefaults = defaults$g({
  weight: function weight3(edge) {
    return 1;
  },
  directed: false
});
var elesfn$r = {
  // Implemented from pseudocode from wikipedia
  floydWarshall: function floydWarshall(options3) {
    var cy = this.cy();
    var _floydWarshallDefault = floydWarshallDefaults(options3), weight8 = _floydWarshallDefault.weight, directed = _floydWarshallDefault.directed;
    var weightFn = weight8;
    var _this$byGroup = this.byGroup(), nodes3 = _this$byGroup.nodes, edges3 = _this$byGroup.edges;
    var N2 = nodes3.length;
    var Nsq = N2 * N2;
    var indexOf = function indexOf2(node) {
      return nodes3.indexOf(node);
    };
    var atIndex = function atIndex2(i3) {
      return nodes3[i3];
    };
    var dist3 = new Array(Nsq);
    for (var n2 = 0; n2 < Nsq; n2++) {
      var j2 = n2 % N2;
      var i2 = (n2 - j2) / N2;
      if (i2 === j2) {
        dist3[n2] = 0;
      } else {
        dist3[n2] = Infinity;
      }
    }
    var next2 = new Array(Nsq);
    var edgeNext = new Array(Nsq);
    for (var _i2 = 0; _i2 < edges3.length; _i2++) {
      var edge = edges3[_i2];
      var src = edge.source()[0];
      var tgt = edge.target()[0];
      if (src === tgt) {
        continue;
      }
      var s2 = indexOf(src);
      var t = indexOf(tgt);
      var st2 = s2 * N2 + t;
      var _weight = weightFn(edge);
      if (dist3[st2] > _weight) {
        dist3[st2] = _weight;
        next2[st2] = t;
        edgeNext[st2] = edge;
      }
      if (!directed) {
        var ts2 = t * N2 + s2;
        if (!directed && dist3[ts2] > _weight) {
          dist3[ts2] = _weight;
          next2[ts2] = s2;
          edgeNext[ts2] = edge;
        }
      }
    }
    for (var k2 = 0; k2 < N2; k2++) {
      for (var _i22 = 0; _i22 < N2; _i22++) {
        var ik = _i22 * N2 + k2;
        for (var _j = 0; _j < N2; _j++) {
          var ij = _i22 * N2 + _j;
          var kj = k2 * N2 + _j;
          if (dist3[ik] + dist3[kj] < dist3[ij]) {
            dist3[ij] = dist3[ik] + dist3[kj];
            next2[ij] = next2[ik];
          }
        }
      }
    }
    var getArgEle = function getArgEle2(ele) {
      return (string(ele) ? cy.filter(ele) : ele)[0];
    };
    var indexOfArgEle = function indexOfArgEle2(ele) {
      return indexOf(getArgEle(ele));
    };
    var res = {
      distance: function distance(from, to2) {
        var i3 = indexOfArgEle(from);
        var j3 = indexOfArgEle(to2);
        return dist3[i3 * N2 + j3];
      },
      path: function path(from, to2) {
        var i3 = indexOfArgEle(from);
        var j3 = indexOfArgEle(to2);
        var fromNode = atIndex(i3);
        if (i3 === j3) {
          return fromNode.collection();
        }
        if (next2[i3 * N2 + j3] == null) {
          return cy.collection();
        }
        var path2 = cy.collection();
        var prev = i3;
        var edge2;
        path2.merge(fromNode);
        while (i3 !== j3) {
          prev = i3;
          i3 = next2[i3 * N2 + j3];
          edge2 = edgeNext[prev * N2 + i3];
          path2.merge(edge2);
          path2.merge(atIndex(i3));
        }
        return path2;
      }
    };
    return res;
  }
  // floydWarshall
};
var bellmanFordDefaults = defaults$g({
  weight: function weight4(edge) {
    return 1;
  },
  directed: false,
  root: null
});
var elesfn$q = {
  // Implemented from pseudocode from wikipedia
  bellmanFord: function bellmanFord(options3) {
    var _this = this;
    var _bellmanFordDefaults = bellmanFordDefaults(options3), weight8 = _bellmanFordDefaults.weight, directed = _bellmanFordDefaults.directed, root = _bellmanFordDefaults.root;
    var weightFn = weight8;
    var eles = this;
    var cy = this.cy();
    var _this$byGroup = this.byGroup(), edges3 = _this$byGroup.edges, nodes3 = _this$byGroup.nodes;
    var numNodes = nodes3.length;
    var infoMap = new Map$1();
    var hasNegativeWeightCycle = false;
    var negativeWeightCycles = [];
    root = cy.collection(root)[0];
    edges3.unmergeBy(function(edge2) {
      return edge2.isLoop();
    });
    var numEdges = edges3.length;
    var getInfo3 = function getInfo4(node2) {
      var obj = infoMap.get(node2.id());
      if (!obj) {
        obj = {};
        infoMap.set(node2.id(), obj);
      }
      return obj;
    };
    var getNodeFromTo = function getNodeFromTo2(to2) {
      return (string(to2) ? cy.$(to2) : to2)[0];
    };
    var distanceTo = function distanceTo2(to2) {
      return getInfo3(getNodeFromTo(to2)).dist;
    };
    var pathTo = function pathTo2(to2) {
      var thisStart = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : root;
      var end = getNodeFromTo(to2);
      var path = [];
      var node2 = end;
      for (; ; ) {
        if (node2 == null) {
          return _this.spawn();
        }
        var _getInfo = getInfo3(node2), edge2 = _getInfo.edge, pred = _getInfo.pred;
        path.unshift(node2[0]);
        if (node2.same(thisStart) && path.length > 0) {
          break;
        }
        if (edge2 != null) {
          path.unshift(edge2);
        }
        node2 = pred;
      }
      return eles.spawn(path);
    };
    for (var i2 = 0; i2 < numNodes; i2++) {
      var node = nodes3[i2];
      var info = getInfo3(node);
      if (node.same(root)) {
        info.dist = 0;
      } else {
        info.dist = Infinity;
      }
      info.pred = null;
      info.edge = null;
    }
    var replacedEdge = false;
    var checkForEdgeReplacement = function checkForEdgeReplacement2(node1, node2, edge2, info1, info2, weight9) {
      var dist3 = info1.dist + weight9;
      if (dist3 < info2.dist && !edge2.same(info1.edge)) {
        info2.dist = dist3;
        info2.pred = node1;
        info2.edge = edge2;
        replacedEdge = true;
      }
    };
    for (var _i2 = 1; _i2 < numNodes; _i2++) {
      replacedEdge = false;
      for (var e = 0; e < numEdges; e++) {
        var edge = edges3[e];
        var src = edge.source();
        var tgt = edge.target();
        var _weight = weightFn(edge);
        var srcInfo = getInfo3(src);
        var tgtInfo = getInfo3(tgt);
        checkForEdgeReplacement(src, tgt, edge, srcInfo, tgtInfo, _weight);
        if (!directed) {
          checkForEdgeReplacement(tgt, src, edge, tgtInfo, srcInfo, _weight);
        }
      }
      if (!replacedEdge) {
        break;
      }
    }
    if (replacedEdge) {
      var negativeWeightCycleIds = [];
      for (var _e2 = 0; _e2 < numEdges; _e2++) {
        var _edge = edges3[_e2];
        var _src = _edge.source();
        var _tgt = _edge.target();
        var _weight2 = weightFn(_edge);
        var srcDist = getInfo3(_src).dist;
        var tgtDist = getInfo3(_tgt).dist;
        if (srcDist + _weight2 < tgtDist || !directed && tgtDist + _weight2 < srcDist) {
          if (!hasNegativeWeightCycle) {
            warn("Graph contains a negative weight cycle for Bellman-Ford");
            hasNegativeWeightCycle = true;
          }
          if (options3.findNegativeWeightCycles !== false) {
            var negativeNodes = [];
            if (srcDist + _weight2 < tgtDist) {
              negativeNodes.push(_src);
            }
            if (!directed && tgtDist + _weight2 < srcDist) {
              negativeNodes.push(_tgt);
            }
            var numNegativeNodes = negativeNodes.length;
            for (var n2 = 0; n2 < numNegativeNodes; n2++) {
              var start = negativeNodes[n2];
              var cycle = [start];
              cycle.push(getInfo3(start).edge);
              var _node = getInfo3(start).pred;
              while (cycle.indexOf(_node) === -1) {
                cycle.push(_node);
                cycle.push(getInfo3(_node).edge);
                _node = getInfo3(_node).pred;
              }
              cycle = cycle.slice(cycle.indexOf(_node));
              var smallestId = cycle[0].id();
              var smallestIndex = 0;
              for (var c2 = 2; c2 < cycle.length; c2 += 2) {
                if (cycle[c2].id() < smallestId) {
                  smallestId = cycle[c2].id();
                  smallestIndex = c2;
                }
              }
              cycle = cycle.slice(smallestIndex).concat(cycle.slice(0, smallestIndex));
              cycle.push(cycle[0]);
              var cycleId = cycle.map(function(el2) {
                return el2.id();
              }).join(",");
              if (negativeWeightCycleIds.indexOf(cycleId) === -1) {
                negativeWeightCycles.push(eles.spawn(cycle));
                negativeWeightCycleIds.push(cycleId);
              }
            }
          } else {
            break;
          }
        }
      }
    }
    return {
      distanceTo,
      pathTo,
      hasNegativeWeightCycle,
      negativeWeightCycles
    };
  }
  // bellmanFord
};
var sqrt2 = Math.sqrt(2);
var collapse = function collapse2(edgeIndex, nodeMap, remainingEdges) {
  if (remainingEdges.length === 0) {
    error("Karger-Stein must be run on a connected (sub)graph");
  }
  var edgeInfo = remainingEdges[edgeIndex];
  var sourceIn = edgeInfo[1];
  var targetIn = edgeInfo[2];
  var partition1 = nodeMap[sourceIn];
  var partition2 = nodeMap[targetIn];
  var newEdges = remainingEdges;
  for (var i2 = newEdges.length - 1; i2 >= 0; i2--) {
    var edge = newEdges[i2];
    var src = edge[1];
    var tgt = edge[2];
    if (nodeMap[src] === partition1 && nodeMap[tgt] === partition2 || nodeMap[src] === partition2 && nodeMap[tgt] === partition1) {
      newEdges.splice(i2, 1);
    }
  }
  for (var _i2 = 0; _i2 < newEdges.length; _i2++) {
    var _edge = newEdges[_i2];
    if (_edge[1] === partition2) {
      newEdges[_i2] = _edge.slice();
      newEdges[_i2][1] = partition1;
    } else if (_edge[2] === partition2) {
      newEdges[_i2] = _edge.slice();
      newEdges[_i2][2] = partition1;
    }
  }
  for (var _i22 = 0; _i22 < nodeMap.length; _i22++) {
    if (nodeMap[_i22] === partition2) {
      nodeMap[_i22] = partition1;
    }
  }
  return newEdges;
};
var contractUntil = function contractUntil2(metaNodeMap, remainingEdges, size3, sizeLimit) {
  while (size3 > sizeLimit) {
    var edgeIndex = Math.floor(Math.random() * remainingEdges.length);
    remainingEdges = collapse(edgeIndex, metaNodeMap, remainingEdges);
    size3--;
  }
  return remainingEdges;
};
var elesfn$p = {
  // Computes the minimum cut of an undirected graph
  // Returns the correct answer with high probability
  kargerStein: function kargerStein() {
    var _this = this;
    var _this$byGroup = this.byGroup(), nodes3 = _this$byGroup.nodes, edges3 = _this$byGroup.edges;
    edges3.unmergeBy(function(edge) {
      return edge.isLoop();
    });
    var numNodes = nodes3.length;
    var numEdges = edges3.length;
    var numIter = Math.ceil(Math.pow(Math.log(numNodes) / Math.LN2, 2));
    var stopSize = Math.floor(numNodes / sqrt2);
    if (numNodes < 2) {
      error("At least 2 nodes are required for Karger-Stein algorithm");
      return void 0;
    }
    var edgeIndexes = [];
    for (var i2 = 0; i2 < numEdges; i2++) {
      var e = edges3[i2];
      edgeIndexes.push([i2, nodes3.indexOf(e.source()), nodes3.indexOf(e.target())]);
    }
    var minCutSize = Infinity;
    var minCutEdgeIndexes = [];
    var minCutNodeMap = new Array(numNodes);
    var metaNodeMap = new Array(numNodes);
    var metaNodeMap2 = new Array(numNodes);
    var copyNodesMap = function copyNodesMap2(from, to2) {
      for (var _i3 = 0; _i3 < numNodes; _i3++) {
        to2[_i3] = from[_i3];
      }
    };
    for (var iter = 0; iter <= numIter; iter++) {
      for (var _i4 = 0; _i4 < numNodes; _i4++) {
        metaNodeMap[_i4] = _i4;
      }
      var edgesState = contractUntil(metaNodeMap, edgeIndexes.slice(), numNodes, stopSize);
      var edgesState2 = edgesState.slice();
      copyNodesMap(metaNodeMap, metaNodeMap2);
      var res1 = contractUntil(metaNodeMap, edgesState, stopSize, 2);
      var res2 = contractUntil(metaNodeMap2, edgesState2, stopSize, 2);
      if (res1.length <= res2.length && res1.length < minCutSize) {
        minCutSize = res1.length;
        minCutEdgeIndexes = res1;
        copyNodesMap(metaNodeMap, minCutNodeMap);
      } else if (res2.length <= res1.length && res2.length < minCutSize) {
        minCutSize = res2.length;
        minCutEdgeIndexes = res2;
        copyNodesMap(metaNodeMap2, minCutNodeMap);
      }
    }
    var cut = this.spawn(minCutEdgeIndexes.map(function(e2) {
      return edges3[e2[0]];
    }));
    var partition1 = this.spawn();
    var partition2 = this.spawn();
    var witnessNodePartition = minCutNodeMap[0];
    for (var _i5 = 0; _i5 < minCutNodeMap.length; _i5++) {
      var partitionId = minCutNodeMap[_i5];
      var node = nodes3[_i5];
      if (partitionId === witnessNodePartition) {
        partition1.merge(node);
      } else {
        partition2.merge(node);
      }
    }
    var constructComponent = function constructComponent2(subset) {
      var component2 = _this.spawn();
      subset.forEach(function(node2) {
        component2.merge(node2);
        node2.connectedEdges().forEach(function(edge) {
          if (_this.contains(edge) && !cut.contains(edge)) {
            component2.merge(edge);
          }
        });
      });
      return component2;
    };
    var components2 = [constructComponent(partition1), constructComponent(partition2)];
    var ret = {
      cut,
      components: components2,
      // n.b. partitions are included to be compatible with the old api spec
      // (could be removed in a future major version)
      partition1,
      partition2
    };
    return ret;
  }
};
var _Math$hypot;
var copyPosition = function copyPosition2(p3) {
  return {
    x: p3.x,
    y: p3.y
  };
};
var modelToRenderedPosition$1 = function modelToRenderedPosition(p3, zoom2, pan2) {
  return {
    x: p3.x * zoom2 + pan2.x,
    y: p3.y * zoom2 + pan2.y
  };
};
var renderedToModelPosition = function renderedToModelPosition2(p3, zoom2, pan2) {
  return {
    x: (p3.x - pan2.x) / zoom2,
    y: (p3.y - pan2.y) / zoom2
  };
};
var array2point = function array2point2(arr) {
  return {
    x: arr[0],
    y: arr[1]
  };
};
var min = function min2(arr) {
  var begin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : arr.length;
  var min4 = Infinity;
  for (var i2 = begin; i2 < end; i2++) {
    var val = arr[i2];
    if (isFinite(val)) {
      min4 = Math.min(val, min4);
    }
  }
  return min4;
};
var max = function max2(arr) {
  var begin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : arr.length;
  var max5 = -Infinity;
  for (var i2 = begin; i2 < end; i2++) {
    var val = arr[i2];
    if (isFinite(val)) {
      max5 = Math.max(val, max5);
    }
  }
  return max5;
};
var mean = function mean2(arr) {
  var begin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : arr.length;
  var total = 0;
  var n2 = 0;
  for (var i2 = begin; i2 < end; i2++) {
    var val = arr[i2];
    if (isFinite(val)) {
      total += val;
      n2++;
    }
  }
  return total / n2;
};
var median = function median2(arr) {
  var begin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : arr.length;
  var copy3 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
  var sort2 = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
  var includeHoles = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
  if (copy3) {
    arr = arr.slice(begin, end);
  } else {
    if (end < arr.length) {
      arr.splice(end, arr.length - end);
    }
    if (begin > 0) {
      arr.splice(0, begin);
    }
  }
  var off = 0;
  for (var i2 = arr.length - 1; i2 >= 0; i2--) {
    var v3 = arr[i2];
    if (includeHoles) {
      if (!isFinite(v3)) {
        arr[i2] = -Infinity;
        off++;
      }
    } else {
      arr.splice(i2, 1);
    }
  }
  if (sort2) {
    arr.sort(function(a2, b2) {
      return a2 - b2;
    });
  }
  var len = arr.length;
  var mid = Math.floor(len / 2);
  if (len % 2 !== 0) {
    return arr[mid + 1 + off];
  } else {
    return (arr[mid - 1 + off] + arr[mid + off]) / 2;
  }
};
var deg2rad = function deg2rad2(deg) {
  return Math.PI * deg / 180;
};
var getAngleFromDisp = function getAngleFromDisp2(dispX, dispY) {
  return Math.atan2(dispY, dispX) - Math.PI / 2;
};
var log2 = Math.log2 || function(n2) {
  return Math.log(n2) / Math.log(2);
};
var signum = function signum2(x3) {
  if (x3 > 0) {
    return 1;
  } else if (x3 < 0) {
    return -1;
  } else {
    return 0;
  }
};
var dist = function dist2(p1, p22) {
  return Math.sqrt(sqdist(p1, p22));
};
var sqdist = function sqdist2(p1, p22) {
  var dx = p22.x - p1.x;
  var dy = p22.y - p1.y;
  return dx * dx + dy * dy;
};
var inPlaceSumNormalize = function inPlaceSumNormalize2(v3) {
  var length = v3.length;
  var total = 0;
  for (var i2 = 0; i2 < length; i2++) {
    total += v3[i2];
  }
  for (var _i2 = 0; _i2 < length; _i2++) {
    v3[_i2] = v3[_i2] / total;
  }
  return v3;
};
var qbezierAt = function qbezierAt2(p0, p1, p22, t) {
  return (1 - t) * (1 - t) * p0 + 2 * (1 - t) * t * p1 + t * t * p22;
};
var qbezierPtAt = function qbezierPtAt2(p0, p1, p22, t) {
  return {
    x: qbezierAt(p0.x, p1.x, p22.x, t),
    y: qbezierAt(p0.y, p1.y, p22.y, t)
  };
};
var lineAt = function lineAt2(p0, p1, t, d2) {
  var vec = {
    x: p1.x - p0.x,
    y: p1.y - p0.y
  };
  var vecDist = dist(p0, p1);
  var normVec = {
    x: vec.x / vecDist,
    y: vec.y / vecDist
  };
  t = t == null ? 0 : t;
  d2 = d2 != null ? d2 : t * vecDist;
  return {
    x: p0.x + normVec.x * d2,
    y: p0.y + normVec.y * d2
  };
};
var bound = function bound2(min4, val, max5) {
  return Math.max(min4, Math.min(max5, val));
};
var makeBoundingBox = function makeBoundingBox2(bb) {
  if (bb == null) {
    return {
      x1: Infinity,
      y1: Infinity,
      x2: -Infinity,
      y2: -Infinity,
      w: 0,
      h: 0
    };
  } else if (bb.x1 != null && bb.y1 != null) {
    if (bb.x2 != null && bb.y2 != null && bb.x2 >= bb.x1 && bb.y2 >= bb.y1) {
      return {
        x1: bb.x1,
        y1: bb.y1,
        x2: bb.x2,
        y2: bb.y2,
        w: bb.x2 - bb.x1,
        h: bb.y2 - bb.y1
      };
    } else if (bb.w != null && bb.h != null && bb.w >= 0 && bb.h >= 0) {
      return {
        x1: bb.x1,
        y1: bb.y1,
        x2: bb.x1 + bb.w,
        y2: bb.y1 + bb.h,
        w: bb.w,
        h: bb.h
      };
    }
  }
};
var copyBoundingBox = function copyBoundingBox2(bb) {
  return {
    x1: bb.x1,
    x2: bb.x2,
    w: bb.w,
    y1: bb.y1,
    y2: bb.y2,
    h: bb.h
  };
};
var clearBoundingBox = function clearBoundingBox2(bb) {
  bb.x1 = Infinity;
  bb.y1 = Infinity;
  bb.x2 = -Infinity;
  bb.y2 = -Infinity;
  bb.w = 0;
  bb.h = 0;
};
var updateBoundingBox = function updateBoundingBox2(bb1, bb2) {
  bb1.x1 = Math.min(bb1.x1, bb2.x1);
  bb1.x2 = Math.max(bb1.x2, bb2.x2);
  bb1.w = bb1.x2 - bb1.x1;
  bb1.y1 = Math.min(bb1.y1, bb2.y1);
  bb1.y2 = Math.max(bb1.y2, bb2.y2);
  bb1.h = bb1.y2 - bb1.y1;
};
var expandBoundingBoxByPoint = function expandBoundingBoxByPoint2(bb, x3, y3) {
  bb.x1 = Math.min(bb.x1, x3);
  bb.x2 = Math.max(bb.x2, x3);
  bb.w = bb.x2 - bb.x1;
  bb.y1 = Math.min(bb.y1, y3);
  bb.y2 = Math.max(bb.y2, y3);
  bb.h = bb.y2 - bb.y1;
};
var expandBoundingBox = function expandBoundingBox2(bb) {
  var padding = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  bb.x1 -= padding;
  bb.x2 += padding;
  bb.y1 -= padding;
  bb.y2 += padding;
  bb.w = bb.x2 - bb.x1;
  bb.h = bb.y2 - bb.y1;
  return bb;
};
var expandBoundingBoxSides = function expandBoundingBoxSides2(bb) {
  var padding = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [0];
  var top, right, bottom, left;
  if (padding.length === 1) {
    top = right = bottom = left = padding[0];
  } else if (padding.length === 2) {
    top = bottom = padding[0];
    left = right = padding[1];
  } else if (padding.length === 4) {
    var _padding = _slicedToArray(padding, 4);
    top = _padding[0];
    right = _padding[1];
    bottom = _padding[2];
    left = _padding[3];
  }
  bb.x1 -= left;
  bb.x2 += right;
  bb.y1 -= top;
  bb.y2 += bottom;
  bb.w = bb.x2 - bb.x1;
  bb.h = bb.y2 - bb.y1;
  return bb;
};
var assignBoundingBox = function assignBoundingBox2(bb1, bb2) {
  bb1.x1 = bb2.x1;
  bb1.y1 = bb2.y1;
  bb1.x2 = bb2.x2;
  bb1.y2 = bb2.y2;
  bb1.w = bb1.x2 - bb1.x1;
  bb1.h = bb1.y2 - bb1.y1;
};
var boundingBoxesIntersect = function boundingBoxesIntersect2(bb1, bb2) {
  if (bb1.x1 > bb2.x2) {
    return false;
  }
  if (bb2.x1 > bb1.x2) {
    return false;
  }
  if (bb1.x2 < bb2.x1) {
    return false;
  }
  if (bb2.x2 < bb1.x1) {
    return false;
  }
  if (bb1.y2 < bb2.y1) {
    return false;
  }
  if (bb2.y2 < bb1.y1) {
    return false;
  }
  if (bb1.y1 > bb2.y2) {
    return false;
  }
  if (bb2.y1 > bb1.y2) {
    return false;
  }
  return true;
};
var inBoundingBox = function inBoundingBox2(bb, x3, y3) {
  return bb.x1 <= x3 && x3 <= bb.x2 && bb.y1 <= y3 && y3 <= bb.y2;
};
var pointInBoundingBox = function pointInBoundingBox2(bb, pt2) {
  return inBoundingBox(bb, pt2.x, pt2.y);
};
var boundingBoxInBoundingBox = function boundingBoxInBoundingBox2(bb1, bb2) {
  return inBoundingBox(bb1, bb2.x1, bb2.y1) && inBoundingBox(bb1, bb2.x2, bb2.y2);
};
var hypot = (_Math$hypot = Math.hypot) !== null && _Math$hypot !== void 0 ? _Math$hypot : function(x3, y3) {
  return Math.sqrt(x3 * x3 + y3 * y3);
};
function inflatePolygon(polygon2, d2) {
  if (polygon2.length < 3) {
    throw new Error("Need at least 3 vertices");
  }
  var add3 = function add4(a2, b2) {
    return {
      x: a2.x + b2.x,
      y: a2.y + b2.y
    };
  };
  var sub = function sub2(a2, b2) {
    return {
      x: a2.x - b2.x,
      y: a2.y - b2.y
    };
  };
  var scale2 = function scale3(v3, s2) {
    return {
      x: v3.x * s2,
      y: v3.y * s2
    };
  };
  var cross = function cross2(u2, v3) {
    return u2.x * v3.y - u2.y * v3.x;
  };
  var normalize4 = function normalize5(v3) {
    var len = hypot(v3.x, v3.y);
    return len === 0 ? {
      x: 0,
      y: 0
    } : {
      x: v3.x / len,
      y: v3.y / len
    };
  };
  var signedArea = function signedArea2(pts3) {
    var A2 = 0;
    for (var i3 = 0; i3 < pts3.length; i3++) {
      var p4 = pts3[i3], q3 = pts3[(i3 + 1) % pts3.length];
      A2 += p4.x * q3.y - q3.x * p4.y;
    }
    return A2 / 2;
  };
  var intersectLines = function intersectLines2(p1, p22, p32, p4) {
    var r2 = sub(p22, p1);
    var s2 = sub(p4, p32);
    var denom = cross(r2, s2);
    if (Math.abs(denom) < 1e-9) {
      return add3(p1, scale2(r2, 0.5));
    }
    var t = cross(sub(p32, p1), s2) / denom;
    return add3(p1, scale2(r2, t));
  };
  var pts2 = polygon2.map(function(p4) {
    return {
      x: p4.x,
      y: p4.y
    };
  });
  if (signedArea(pts2) < 0) pts2.reverse();
  var n2 = pts2.length;
  var normals = [];
  for (var i2 = 0; i2 < n2; i2++) {
    var p3 = pts2[i2], q2 = pts2[(i2 + 1) % n2];
    var edge = sub(q2, p3);
    var out = normalize4({
      x: edge.y,
      y: -edge.x
    });
    normals.push(out);
  }
  var offsetEdges = normals.map(function(nrm, i3) {
    var p1 = add3(pts2[i3], scale2(nrm, d2));
    var p22 = add3(pts2[(i3 + 1) % n2], scale2(nrm, d2));
    return {
      p1,
      p2: p22
    };
  });
  var inflated = [];
  for (var _i2 = 0; _i2 < n2; _i2++) {
    var prevEdge = offsetEdges[(_i2 - 1 + n2) % n2];
    var currEdge = offsetEdges[_i2];
    var ip = intersectLines(prevEdge.p1, prevEdge.p2, currEdge.p1, currEdge.p2);
    inflated.push(ip);
  }
  return inflated;
}
function miterBox(pts2, centerX, centerY, width2, height2, strokeWidth) {
  var tpts = transformPoints(pts2, centerX, centerY, width2, height2);
  var offsetPoints = inflatePolygon(tpts, strokeWidth);
  var bb = makeBoundingBox();
  offsetPoints.forEach(function(pt2) {
    return expandBoundingBoxByPoint(bb, pt2.x, pt2.y);
  });
  return bb;
}
var roundRectangleIntersectLine = function roundRectangleIntersectLine2(x3, y3, nodeX, nodeY, width2, height2, padding) {
  var radius2 = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : "auto";
  var cornerRadius = radius2 === "auto" ? getRoundRectangleRadius(width2, height2) : radius2;
  var halfWidth = width2 / 2;
  var halfHeight = height2 / 2;
  cornerRadius = Math.min(cornerRadius, halfWidth, halfHeight);
  var doWidth = cornerRadius !== halfWidth, doHeight = cornerRadius !== halfHeight;
  var straightLineIntersections;
  if (doWidth) {
    var topStartX = nodeX - halfWidth + cornerRadius - padding;
    var topStartY = nodeY - halfHeight - padding;
    var topEndX = nodeX + halfWidth - cornerRadius + padding;
    var topEndY = topStartY;
    straightLineIntersections = finiteLinesIntersect(x3, y3, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);
    if (straightLineIntersections.length > 0) {
      return straightLineIntersections;
    }
  }
  if (doHeight) {
    var rightStartX = nodeX + halfWidth + padding;
    var rightStartY = nodeY - halfHeight + cornerRadius - padding;
    var rightEndX = rightStartX;
    var rightEndY = nodeY + halfHeight - cornerRadius + padding;
    straightLineIntersections = finiteLinesIntersect(x3, y3, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);
    if (straightLineIntersections.length > 0) {
      return straightLineIntersections;
    }
  }
  if (doWidth) {
    var bottomStartX = nodeX - halfWidth + cornerRadius - padding;
    var bottomStartY = nodeY + halfHeight + padding;
    var bottomEndX = nodeX + halfWidth - cornerRadius + padding;
    var bottomEndY = bottomStartY;
    straightLineIntersections = finiteLinesIntersect(x3, y3, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);
    if (straightLineIntersections.length > 0) {
      return straightLineIntersections;
    }
  }
  if (doHeight) {
    var leftStartX = nodeX - halfWidth - padding;
    var leftStartY = nodeY - halfHeight + cornerRadius - padding;
    var leftEndX = leftStartX;
    var leftEndY = nodeY + halfHeight - cornerRadius + padding;
    straightLineIntersections = finiteLinesIntersect(x3, y3, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);
    if (straightLineIntersections.length > 0) {
      return straightLineIntersections;
    }
  }
  var arcIntersections;
  {
    var topLeftCenterX = nodeX - halfWidth + cornerRadius;
    var topLeftCenterY = nodeY - halfHeight + cornerRadius;
    arcIntersections = intersectLineCircle(x3, y3, nodeX, nodeY, topLeftCenterX, topLeftCenterY, cornerRadius + padding);
    if (arcIntersections.length > 0 && arcIntersections[0] <= topLeftCenterX && arcIntersections[1] <= topLeftCenterY) {
      return [arcIntersections[0], arcIntersections[1]];
    }
  }
  {
    var topRightCenterX = nodeX + halfWidth - cornerRadius;
    var topRightCenterY = nodeY - halfHeight + cornerRadius;
    arcIntersections = intersectLineCircle(x3, y3, nodeX, nodeY, topRightCenterX, topRightCenterY, cornerRadius + padding);
    if (arcIntersections.length > 0 && arcIntersections[0] >= topRightCenterX && arcIntersections[1] <= topRightCenterY) {
      return [arcIntersections[0], arcIntersections[1]];
    }
  }
  {
    var bottomRightCenterX = nodeX + halfWidth - cornerRadius;
    var bottomRightCenterY = nodeY + halfHeight - cornerRadius;
    arcIntersections = intersectLineCircle(x3, y3, nodeX, nodeY, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding);
    if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {
      return [arcIntersections[0], arcIntersections[1]];
    }
  }
  {
    var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;
    var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;
    arcIntersections = intersectLineCircle(x3, y3, nodeX, nodeY, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding);
    if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {
      return [arcIntersections[0], arcIntersections[1]];
    }
  }
  return [];
};
var inLineVicinity = function inLineVicinity2(x3, y3, lx1, ly1, lx2, ly2, tolerance) {
  var t = tolerance;
  var x1 = Math.min(lx1, lx2);
  var x22 = Math.max(lx1, lx2);
  var y1 = Math.min(ly1, ly2);
  var y22 = Math.max(ly1, ly2);
  return x1 - t <= x3 && x3 <= x22 + t && y1 - t <= y3 && y3 <= y22 + t;
};
var inBezierVicinity = function inBezierVicinity2(x3, y3, x1, y1, x22, y22, x32, y32, tolerance) {
  var bb = {
    x1: Math.min(x1, x32, x22) - tolerance,
    x2: Math.max(x1, x32, x22) + tolerance,
    y1: Math.min(y1, y32, y22) - tolerance,
    y2: Math.max(y1, y32, y22) + tolerance
  };
  if (x3 < bb.x1 || x3 > bb.x2 || y3 < bb.y1 || y3 > bb.y2) {
    return false;
  } else {
    return true;
  }
};
var solveQuadratic = function solveQuadratic2(a2, b2, c2, val) {
  c2 -= val;
  var r2 = b2 * b2 - 4 * a2 * c2;
  if (r2 < 0) {
    return [];
  }
  var sqrtR = Math.sqrt(r2);
  var denom = 2 * a2;
  var root1 = (-b2 + sqrtR) / denom;
  var root2 = (-b2 - sqrtR) / denom;
  return [root1, root2];
};
var solveCubic = function solveCubic2(a2, b2, c2, d2, result) {
  var epsilon = 1e-5;
  if (a2 === 0) {
    a2 = epsilon;
  }
  b2 /= a2;
  c2 /= a2;
  d2 /= a2;
  var discriminant, q2, r2, dum1, s2, t, term1, r13;
  q2 = (3 * c2 - b2 * b2) / 9;
  r2 = -(27 * d2) + b2 * (9 * c2 - 2 * (b2 * b2));
  r2 /= 54;
  discriminant = q2 * q2 * q2 + r2 * r2;
  result[1] = 0;
  term1 = b2 / 3;
  if (discriminant > 0) {
    s2 = r2 + Math.sqrt(discriminant);
    s2 = s2 < 0 ? -Math.pow(-s2, 1 / 3) : Math.pow(s2, 1 / 3);
    t = r2 - Math.sqrt(discriminant);
    t = t < 0 ? -Math.pow(-t, 1 / 3) : Math.pow(t, 1 / 3);
    result[0] = -term1 + s2 + t;
    term1 += (s2 + t) / 2;
    result[4] = result[2] = -term1;
    term1 = Math.sqrt(3) * (-t + s2) / 2;
    result[3] = term1;
    result[5] = -term1;
    return;
  }
  result[5] = result[3] = 0;
  if (discriminant === 0) {
    r13 = r2 < 0 ? -Math.pow(-r2, 1 / 3) : Math.pow(r2, 1 / 3);
    result[0] = -term1 + 2 * r13;
    result[4] = result[2] = -(r13 + term1);
    return;
  }
  q2 = -q2;
  dum1 = q2 * q2 * q2;
  dum1 = Math.acos(r2 / Math.sqrt(dum1));
  r13 = 2 * Math.sqrt(q2);
  result[0] = -term1 + r13 * Math.cos(dum1 / 3);
  result[2] = -term1 + r13 * Math.cos((dum1 + 2 * Math.PI) / 3);
  result[4] = -term1 + r13 * Math.cos((dum1 + 4 * Math.PI) / 3);
  return;
};
var sqdistToQuadraticBezier = function sqdistToQuadraticBezier2(x3, y3, x1, y1, x22, y22, x32, y32) {
  var a2 = 1 * x1 * x1 - 4 * x1 * x22 + 2 * x1 * x32 + 4 * x22 * x22 - 4 * x22 * x32 + x32 * x32 + y1 * y1 - 4 * y1 * y22 + 2 * y1 * y32 + 4 * y22 * y22 - 4 * y22 * y32 + y32 * y32;
  var b2 = 1 * 9 * x1 * x22 - 3 * x1 * x1 - 3 * x1 * x32 - 6 * x22 * x22 + 3 * x22 * x32 + 9 * y1 * y22 - 3 * y1 * y1 - 3 * y1 * y32 - 6 * y22 * y22 + 3 * y22 * y32;
  var c2 = 1 * 3 * x1 * x1 - 6 * x1 * x22 + x1 * x32 - x1 * x3 + 2 * x22 * x22 + 2 * x22 * x3 - x32 * x3 + 3 * y1 * y1 - 6 * y1 * y22 + y1 * y32 - y1 * y3 + 2 * y22 * y22 + 2 * y22 * y3 - y32 * y3;
  var d2 = 1 * x1 * x22 - x1 * x1 + x1 * x3 - x22 * x3 + y1 * y22 - y1 * y1 + y1 * y3 - y22 * y3;
  var roots = [];
  solveCubic(a2, b2, c2, d2, roots);
  var zeroThreshold = 1e-7;
  var params = [];
  for (var index = 0; index < 6; index += 2) {
    if (Math.abs(roots[index + 1]) < zeroThreshold && roots[index] >= 0 && roots[index] <= 1) {
      params.push(roots[index]);
    }
  }
  params.push(1);
  params.push(0);
  var minDistanceSquared = -1;
  var curX, curY, distSquared;
  for (var i2 = 0; i2 < params.length; i2++) {
    curX = Math.pow(1 - params[i2], 2) * x1 + 2 * (1 - params[i2]) * params[i2] * x22 + params[i2] * params[i2] * x32;
    curY = Math.pow(1 - params[i2], 2) * y1 + 2 * (1 - params[i2]) * params[i2] * y22 + params[i2] * params[i2] * y32;
    distSquared = Math.pow(curX - x3, 2) + Math.pow(curY - y3, 2);
    if (minDistanceSquared >= 0) {
      if (distSquared < minDistanceSquared) {
        minDistanceSquared = distSquared;
      }
    } else {
      minDistanceSquared = distSquared;
    }
  }
  return minDistanceSquared;
};
var sqdistToFiniteLine = function sqdistToFiniteLine2(x3, y3, x1, y1, x22, y22) {
  var offset = [x3 - x1, y3 - y1];
  var line = [x22 - x1, y22 - y1];
  var lineSq = line[0] * line[0] + line[1] * line[1];
  var hypSq = offset[0] * offset[0] + offset[1] * offset[1];
  var dotProduct = offset[0] * line[0] + offset[1] * line[1];
  var adjSq = dotProduct * dotProduct / lineSq;
  if (dotProduct < 0) {
    return hypSq;
  }
  if (adjSq > lineSq) {
    return (x3 - x22) * (x3 - x22) + (y3 - y22) * (y3 - y22);
  }
  return hypSq - adjSq;
};
var pointInsidePolygonPoints = function pointInsidePolygonPoints2(x3, y3, points) {
  var x1, y1, x22, y22;
  var y32;
  var up = 0;
  for (var i2 = 0; i2 < points.length / 2; i2++) {
    x1 = points[i2 * 2];
    y1 = points[i2 * 2 + 1];
    if (i2 + 1 < points.length / 2) {
      x22 = points[(i2 + 1) * 2];
      y22 = points[(i2 + 1) * 2 + 1];
    } else {
      x22 = points[(i2 + 1 - points.length / 2) * 2];
      y22 = points[(i2 + 1 - points.length / 2) * 2 + 1];
    }
    if (x1 == x3 && x22 == x3) ;
    else if (x1 >= x3 && x3 >= x22 || x1 <= x3 && x3 <= x22) {
      y32 = (x3 - x1) / (x22 - x1) * (y22 - y1) + y1;
      if (y32 > y3) {
        up++;
      }
    } else {
      continue;
    }
  }
  if (up % 2 === 0) {
    return false;
  } else {
    return true;
  }
};
var pointInsidePolygon = function pointInsidePolygon2(x3, y3, basePoints, centerX, centerY, width2, height2, direction, padding) {
  var transformedPoints = new Array(basePoints.length);
  var angle2;
  if (direction[0] != null) {
    angle2 = Math.atan(direction[1] / direction[0]);
    if (direction[0] < 0) {
      angle2 = angle2 + Math.PI / 2;
    } else {
      angle2 = -angle2 - Math.PI / 2;
    }
  } else {
    angle2 = direction;
  }
  var cos2 = Math.cos(-angle2);
  var sin2 = Math.sin(-angle2);
  for (var i2 = 0; i2 < transformedPoints.length / 2; i2++) {
    transformedPoints[i2 * 2] = width2 / 2 * (basePoints[i2 * 2] * cos2 - basePoints[i2 * 2 + 1] * sin2);
    transformedPoints[i2 * 2 + 1] = height2 / 2 * (basePoints[i2 * 2 + 1] * cos2 + basePoints[i2 * 2] * sin2);
    transformedPoints[i2 * 2] += centerX;
    transformedPoints[i2 * 2 + 1] += centerY;
  }
  var points;
  if (padding > 0) {
    var expandedLineSet = expandPolygon(transformedPoints, -padding);
    points = joinLines(expandedLineSet);
  } else {
    points = transformedPoints;
  }
  return pointInsidePolygonPoints(x3, y3, points);
};
var pointInsideRoundPolygon = function pointInsideRoundPolygon2(x3, y3, basePoints, centerX, centerY, width2, height2, corners) {
  var cutPolygonPoints = new Array(basePoints.length * 2);
  for (var i2 = 0; i2 < corners.length; i2++) {
    var corner = corners[i2];
    cutPolygonPoints[i2 * 4 + 0] = corner.startX;
    cutPolygonPoints[i2 * 4 + 1] = corner.startY;
    cutPolygonPoints[i2 * 4 + 2] = corner.stopX;
    cutPolygonPoints[i2 * 4 + 3] = corner.stopY;
    var squaredDistance = Math.pow(corner.cx - x3, 2) + Math.pow(corner.cy - y3, 2);
    if (squaredDistance <= Math.pow(corner.radius, 2)) {
      return true;
    }
  }
  return pointInsidePolygonPoints(x3, y3, cutPolygonPoints);
};
var joinLines = function joinLines2(lineSet) {
  var vertices = new Array(lineSet.length / 2);
  var currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY;
  var nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY;
  for (var i2 = 0; i2 < lineSet.length / 4; i2++) {
    currentLineStartX = lineSet[i2 * 4];
    currentLineStartY = lineSet[i2 * 4 + 1];
    currentLineEndX = lineSet[i2 * 4 + 2];
    currentLineEndY = lineSet[i2 * 4 + 3];
    if (i2 < lineSet.length / 4 - 1) {
      nextLineStartX = lineSet[(i2 + 1) * 4];
      nextLineStartY = lineSet[(i2 + 1) * 4 + 1];
      nextLineEndX = lineSet[(i2 + 1) * 4 + 2];
      nextLineEndY = lineSet[(i2 + 1) * 4 + 3];
    } else {
      nextLineStartX = lineSet[0];
      nextLineStartY = lineSet[1];
      nextLineEndX = lineSet[2];
      nextLineEndY = lineSet[3];
    }
    var intersection2 = finiteLinesIntersect(currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY, nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY, true);
    vertices[i2 * 2] = intersection2[0];
    vertices[i2 * 2 + 1] = intersection2[1];
  }
  return vertices;
};
var expandPolygon = function expandPolygon2(points, pad) {
  var expandedLineSet = new Array(points.length * 2);
  var currentPointX, currentPointY, nextPointX, nextPointY;
  for (var i2 = 0; i2 < points.length / 2; i2++) {
    currentPointX = points[i2 * 2];
    currentPointY = points[i2 * 2 + 1];
    if (i2 < points.length / 2 - 1) {
      nextPointX = points[(i2 + 1) * 2];
      nextPointY = points[(i2 + 1) * 2 + 1];
    } else {
      nextPointX = points[0];
      nextPointY = points[1];
    }
    var offsetX = nextPointY - currentPointY;
    var offsetY = -(nextPointX - currentPointX);
    var offsetLength = Math.sqrt(offsetX * offsetX + offsetY * offsetY);
    var normalizedOffsetX = offsetX / offsetLength;
    var normalizedOffsetY = offsetY / offsetLength;
    expandedLineSet[i2 * 4] = currentPointX + normalizedOffsetX * pad;
    expandedLineSet[i2 * 4 + 1] = currentPointY + normalizedOffsetY * pad;
    expandedLineSet[i2 * 4 + 2] = nextPointX + normalizedOffsetX * pad;
    expandedLineSet[i2 * 4 + 3] = nextPointY + normalizedOffsetY * pad;
  }
  return expandedLineSet;
};
var intersectLineEllipse = function intersectLineEllipse2(x3, y3, centerX, centerY, ellipseWradius, ellipseHradius) {
  var dispX = centerX - x3;
  var dispY = centerY - y3;
  dispX /= ellipseWradius;
  dispY /= ellipseHradius;
  var len = Math.sqrt(dispX * dispX + dispY * dispY);
  var newLength = len - 1;
  if (newLength < 0) {
    return [];
  }
  var lenProportion = newLength / len;
  return [(centerX - x3) * lenProportion + x3, (centerY - y3) * lenProportion + y3];
};
var checkInEllipse = function checkInEllipse2(x3, y3, width2, height2, centerX, centerY, padding) {
  x3 -= centerX;
  y3 -= centerY;
  x3 /= width2 / 2 + padding;
  y3 /= height2 / 2 + padding;
  return x3 * x3 + y3 * y3 <= 1;
};
var intersectLineCircle = function intersectLineCircle2(x1, y1, x22, y22, centerX, centerY, radius2) {
  var d2 = [x22 - x1, y22 - y1];
  var f2 = [x1 - centerX, y1 - centerY];
  var a2 = d2[0] * d2[0] + d2[1] * d2[1];
  var b2 = 2 * (f2[0] * d2[0] + f2[1] * d2[1]);
  var c2 = f2[0] * f2[0] + f2[1] * f2[1] - radius2 * radius2;
  var discriminant = b2 * b2 - 4 * a2 * c2;
  if (discriminant < 0) {
    return [];
  }
  var t1 = (-b2 + Math.sqrt(discriminant)) / (2 * a2);
  var t2 = (-b2 - Math.sqrt(discriminant)) / (2 * a2);
  var tMin = Math.min(t1, t2);
  var tMax = Math.max(t1, t2);
  var inRangeParams = [];
  if (tMin >= 0 && tMin <= 1) {
    inRangeParams.push(tMin);
  }
  if (tMax >= 0 && tMax <= 1) {
    inRangeParams.push(tMax);
  }
  if (inRangeParams.length === 0) {
    return [];
  }
  var nearIntersectionX = inRangeParams[0] * d2[0] + x1;
  var nearIntersectionY = inRangeParams[0] * d2[1] + y1;
  if (inRangeParams.length > 1) {
    if (inRangeParams[0] == inRangeParams[1]) {
      return [nearIntersectionX, nearIntersectionY];
    } else {
      var farIntersectionX = inRangeParams[1] * d2[0] + x1;
      var farIntersectionY = inRangeParams[1] * d2[1] + y1;
      return [nearIntersectionX, nearIntersectionY, farIntersectionX, farIntersectionY];
    }
  } else {
    return [nearIntersectionX, nearIntersectionY];
  }
};
var midOfThree = function midOfThree2(a2, b2, c2) {
  if (b2 <= a2 && a2 <= c2 || c2 <= a2 && a2 <= b2) {
    return a2;
  } else if (a2 <= b2 && b2 <= c2 || c2 <= b2 && b2 <= a2) {
    return b2;
  } else {
    return c2;
  }
};
var finiteLinesIntersect = function finiteLinesIntersect2(x1, y1, x22, y22, x3, y3, x4, y4, infiniteLines) {
  var dx13 = x1 - x3;
  var dx21 = x22 - x1;
  var dx43 = x4 - x3;
  var dy13 = y1 - y3;
  var dy21 = y22 - y1;
  var dy43 = y4 - y3;
  var ua_t = dx43 * dy13 - dy43 * dx13;
  var ub_t = dx21 * dy13 - dy21 * dx13;
  var u_b = dy43 * dx21 - dx43 * dy21;
  if (u_b !== 0) {
    var ua2 = ua_t / u_b;
    var ub = ub_t / u_b;
    var flptThreshold = 1e-3;
    var _min = 0 - flptThreshold;
    var _max = 1 + flptThreshold;
    if (_min <= ua2 && ua2 <= _max && _min <= ub && ub <= _max) {
      return [x1 + ua2 * dx21, y1 + ua2 * dy21];
    } else {
      if (!infiniteLines) {
        return [];
      } else {
        return [x1 + ua2 * dx21, y1 + ua2 * dy21];
      }
    }
  } else {
    if (ua_t === 0 || ub_t === 0) {
      if (midOfThree(x1, x22, x4) === x4) {
        return [x4, y4];
      }
      if (midOfThree(x1, x22, x3) === x3) {
        return [x3, y3];
      }
      if (midOfThree(x3, x4, x22) === x22) {
        return [x22, y22];
      }
      return [];
    } else {
      return [];
    }
  }
};
var transformPoints = function transformPoints2(points, centerX, centerY, width2, height2) {
  var ret = [];
  var halfW = width2 / 2;
  var halfH = height2 / 2;
  var x3 = centerX;
  var y3 = centerY;
  ret.push({
    x: x3 + halfW * points[0],
    y: y3 + halfH * points[1]
  });
  for (var i2 = 1; i2 < points.length / 2; i2++) {
    ret.push({
      x: x3 + halfW * points[i2 * 2],
      y: y3 + halfH * points[i2 * 2 + 1]
    });
  }
  return ret;
};
var polygonIntersectLine = function polygonIntersectLine2(x3, y3, basePoints, centerX, centerY, width2, height2, padding) {
  var intersections = [];
  var intersection2;
  var transformedPoints = new Array(basePoints.length);
  var doTransform = true;
  if (width2 == null) {
    doTransform = false;
  }
  var points;
  if (doTransform) {
    for (var i2 = 0; i2 < transformedPoints.length / 2; i2++) {
      transformedPoints[i2 * 2] = basePoints[i2 * 2] * width2 + centerX;
      transformedPoints[i2 * 2 + 1] = basePoints[i2 * 2 + 1] * height2 + centerY;
    }
    if (padding > 0) {
      var expandedLineSet = expandPolygon(transformedPoints, -padding);
      points = joinLines(expandedLineSet);
    } else {
      points = transformedPoints;
    }
  } else {
    points = basePoints;
  }
  var currentX, currentY, nextX, nextY;
  for (var _i3 = 0; _i3 < points.length / 2; _i3++) {
    currentX = points[_i3 * 2];
    currentY = points[_i3 * 2 + 1];
    if (_i3 < points.length / 2 - 1) {
      nextX = points[(_i3 + 1) * 2];
      nextY = points[(_i3 + 1) * 2 + 1];
    } else {
      nextX = points[0];
      nextY = points[1];
    }
    intersection2 = finiteLinesIntersect(x3, y3, centerX, centerY, currentX, currentY, nextX, nextY);
    if (intersection2.length !== 0) {
      intersections.push(intersection2[0], intersection2[1]);
    }
  }
  return intersections;
};
var roundPolygonIntersectLine = function roundPolygonIntersectLine2(x3, y3, basePoints, centerX, centerY, width2, height2, padding, corners) {
  var intersections = [];
  var intersection2;
  var lines = new Array(basePoints.length * 2);
  corners.forEach(function(corner, i3) {
    if (i3 === 0) {
      lines[lines.length - 2] = corner.startX;
      lines[lines.length - 1] = corner.startY;
    } else {
      lines[i3 * 4 - 2] = corner.startX;
      lines[i3 * 4 - 1] = corner.startY;
    }
    lines[i3 * 4] = corner.stopX;
    lines[i3 * 4 + 1] = corner.stopY;
    intersection2 = intersectLineCircle(x3, y3, centerX, centerY, corner.cx, corner.cy, corner.radius);
    if (intersection2.length !== 0) {
      intersections.push(intersection2[0], intersection2[1]);
    }
  });
  for (var i2 = 0; i2 < lines.length / 4; i2++) {
    intersection2 = finiteLinesIntersect(x3, y3, centerX, centerY, lines[i2 * 4], lines[i2 * 4 + 1], lines[i2 * 4 + 2], lines[i2 * 4 + 3], false);
    if (intersection2.length !== 0) {
      intersections.push(intersection2[0], intersection2[1]);
    }
  }
  if (intersections.length > 2) {
    var lowestIntersection = [intersections[0], intersections[1]];
    var lowestSquaredDistance = Math.pow(lowestIntersection[0] - x3, 2) + Math.pow(lowestIntersection[1] - y3, 2);
    for (var _i4 = 1; _i4 < intersections.length / 2; _i4++) {
      var squaredDistance = Math.pow(intersections[_i4 * 2] - x3, 2) + Math.pow(intersections[_i4 * 2 + 1] - y3, 2);
      if (squaredDistance <= lowestSquaredDistance) {
        lowestIntersection[0] = intersections[_i4 * 2];
        lowestIntersection[1] = intersections[_i4 * 2 + 1];
        lowestSquaredDistance = squaredDistance;
      }
    }
    return lowestIntersection;
  }
  return intersections;
};
var shortenIntersection = function shortenIntersection2(intersection2, offset, amount) {
  var disp = [intersection2[0] - offset[0], intersection2[1] - offset[1]];
  var length = Math.sqrt(disp[0] * disp[0] + disp[1] * disp[1]);
  var lenRatio = (length - amount) / length;
  if (lenRatio < 0) {
    lenRatio = 1e-5;
  }
  return [offset[0] + lenRatio * disp[0], offset[1] + lenRatio * disp[1]];
};
var generateUnitNgonPointsFitToSquare = function generateUnitNgonPointsFitToSquare2(sides, rotationRadians) {
  var points = generateUnitNgonPoints(sides, rotationRadians);
  points = fitPolygonToSquare(points);
  return points;
};
var fitPolygonToSquare = function fitPolygonToSquare2(points) {
  var x3, y3;
  var sides = points.length / 2;
  var minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;
  for (var i2 = 0; i2 < sides; i2++) {
    x3 = points[2 * i2];
    y3 = points[2 * i2 + 1];
    minX = Math.min(minX, x3);
    maxX = Math.max(maxX, x3);
    minY = Math.min(minY, y3);
    maxY = Math.max(maxY, y3);
  }
  var sx = 2 / (maxX - minX);
  var sy = 2 / (maxY - minY);
  for (var _i5 = 0; _i5 < sides; _i5++) {
    x3 = points[2 * _i5] = points[2 * _i5] * sx;
    y3 = points[2 * _i5 + 1] = points[2 * _i5 + 1] * sy;
    minX = Math.min(minX, x3);
    maxX = Math.max(maxX, x3);
    minY = Math.min(minY, y3);
    maxY = Math.max(maxY, y3);
  }
  if (minY < -1) {
    for (var _i6 = 0; _i6 < sides; _i6++) {
      y3 = points[2 * _i6 + 1] = points[2 * _i6 + 1] + (-1 - minY);
    }
  }
  return points;
};
var generateUnitNgonPoints = function generateUnitNgonPoints2(sides, rotationRadians) {
  var increment = 1 / sides * 2 * Math.PI;
  var startAngle = sides % 2 === 0 ? Math.PI / 2 + increment / 2 : Math.PI / 2;
  startAngle += rotationRadians;
  var points = new Array(sides * 2);
  var currentAngle;
  for (var i2 = 0; i2 < sides; i2++) {
    currentAngle = i2 * increment + startAngle;
    points[2 * i2] = Math.cos(currentAngle);
    points[2 * i2 + 1] = Math.sin(-currentAngle);
  }
  return points;
};
var getRoundRectangleRadius = function getRoundRectangleRadius2(width2, height2) {
  return Math.min(width2 / 4, height2 / 4, 8);
};
var getRoundPolygonRadius = function getRoundPolygonRadius2(width2, height2) {
  return Math.min(width2 / 10, height2 / 10, 8);
};
var getCutRectangleCornerLength = function getCutRectangleCornerLength2() {
  return 8;
};
var bezierPtsToQuadCoeff = function bezierPtsToQuadCoeff2(p0, p1, p22) {
  return [p0 - 2 * p1 + p22, 2 * (p1 - p0), p0];
};
var getBarrelCurveConstants = function getBarrelCurveConstants2(width2, height2) {
  return {
    heightOffset: Math.min(15, 0.05 * height2),
    widthOffset: Math.min(100, 0.25 * width2),
    ctrlPtOffsetPct: 0.05
  };
};
function satPolygonIntersection(poly1, poly2) {
  function getAxes(polygon2) {
    var axes2 = [];
    for (var i2 = 0; i2 < polygon2.length; i2++) {
      var p1 = polygon2[i2];
      var p22 = polygon2[(i2 + 1) % polygon2.length];
      var edge = {
        x: p22.x - p1.x,
        y: p22.y - p1.y
      };
      var normal = {
        x: -edge.y,
        y: edge.x
      };
      var length = Math.sqrt(normal.x * normal.x + normal.y * normal.y);
      axes2.push({
        x: normal.x / length,
        y: normal.y / length
      });
    }
    return axes2;
  }
  function project(polygon2, axis2) {
    var min4 = Infinity;
    var max5 = -Infinity;
    var _iterator = _createForOfIteratorHelper(polygon2), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var point = _step.value;
        var projection2 = point.x * axis2.x + point.y * axis2.y;
        min4 = Math.min(min4, projection2);
        max5 = Math.max(max5, projection2);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return {
      min: min4,
      max: max5
    };
  }
  function overlaps(proj12, proj22) {
    return !(proj12.max < proj22.min || proj22.max < proj12.min);
  }
  var axes = [].concat(_toConsumableArray(getAxes(poly1)), _toConsumableArray(getAxes(poly2)));
  var _iterator2 = _createForOfIteratorHelper(axes), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var axis = _step2.value;
      var proj1 = project(poly1, axis);
      var proj2 = project(poly2, axis);
      if (!overlaps(proj1, proj2)) {
        return false;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return true;
}
var pageRankDefaults = defaults$g({
  dampingFactor: 0.8,
  precision: 1e-6,
  iterations: 200,
  weight: function weight5(edge) {
    return 1;
  }
});
var elesfn$o = {
  pageRank: function pageRank(options3) {
    var _pageRankDefaults = pageRankDefaults(options3), dampingFactor = _pageRankDefaults.dampingFactor, precision = _pageRankDefaults.precision, iterations = _pageRankDefaults.iterations, weight8 = _pageRankDefaults.weight;
    var cy = this._private.cy;
    var _this$byGroup = this.byGroup(), nodes3 = _this$byGroup.nodes, edges3 = _this$byGroup.edges;
    var numNodes = nodes3.length;
    var numNodesSqd = numNodes * numNodes;
    var numEdges = edges3.length;
    var matrix = new Array(numNodesSqd);
    var columnSum = new Array(numNodes);
    var additionalProb = (1 - dampingFactor) / numNodes;
    for (var i2 = 0; i2 < numNodes; i2++) {
      for (var j2 = 0; j2 < numNodes; j2++) {
        var n2 = i2 * numNodes + j2;
        matrix[n2] = 0;
      }
      columnSum[i2] = 0;
    }
    for (var _i2 = 0; _i2 < numEdges; _i2++) {
      var edge = edges3[_i2];
      var srcId = edge.data("source");
      var tgtId = edge.data("target");
      if (srcId === tgtId) {
        continue;
      }
      var s2 = nodes3.indexOfId(srcId);
      var t = nodes3.indexOfId(tgtId);
      var w2 = weight8(edge);
      var _n2 = t * numNodes + s2;
      matrix[_n2] += w2;
      columnSum[s2] += w2;
    }
    var p3 = 1 / numNodes + additionalProb;
    for (var _j = 0; _j < numNodes; _j++) {
      if (columnSum[_j] === 0) {
        for (var _i22 = 0; _i22 < numNodes; _i22++) {
          var _n22 = _i22 * numNodes + _j;
          matrix[_n22] = p3;
        }
      } else {
        for (var _i3 = 0; _i3 < numNodes; _i3++) {
          var _n3 = _i3 * numNodes + _j;
          matrix[_n3] = matrix[_n3] / columnSum[_j] + additionalProb;
        }
      }
    }
    var eigenvector = new Array(numNodes);
    var temp = new Array(numNodes);
    var previous;
    for (var _i4 = 0; _i4 < numNodes; _i4++) {
      eigenvector[_i4] = 1;
    }
    for (var iter = 0; iter < iterations; iter++) {
      for (var _i5 = 0; _i5 < numNodes; _i5++) {
        temp[_i5] = 0;
      }
      for (var _i6 = 0; _i6 < numNodes; _i6++) {
        for (var _j2 = 0; _j2 < numNodes; _j2++) {
          var _n4 = _i6 * numNodes + _j2;
          temp[_i6] += matrix[_n4] * eigenvector[_j2];
        }
      }
      inPlaceSumNormalize(temp);
      previous = eigenvector;
      eigenvector = temp;
      temp = previous;
      var diff2 = 0;
      for (var _i7 = 0; _i7 < numNodes; _i7++) {
        var delta = previous[_i7] - eigenvector[_i7];
        diff2 += delta * delta;
      }
      if (diff2 < precision) {
        break;
      }
    }
    var res = {
      rank: function rank(node) {
        node = cy.collection(node)[0];
        return eigenvector[nodes3.indexOf(node)];
      }
    };
    return res;
  }
  // pageRank
};
var defaults$f = defaults$g({
  root: null,
  weight: function weight6(edge) {
    return 1;
  },
  directed: false,
  alpha: 0
});
var elesfn$n = {
  degreeCentralityNormalized: function degreeCentralityNormalized(options3) {
    options3 = defaults$f(options3);
    var cy = this.cy();
    var nodes3 = this.nodes();
    var numNodes = nodes3.length;
    if (!options3.directed) {
      var degrees = {};
      var maxDegree = 0;
      for (var i2 = 0; i2 < numNodes; i2++) {
        var node = nodes3[i2];
        options3.root = node;
        var currDegree = this.degreeCentrality(options3);
        if (maxDegree < currDegree.degree) {
          maxDegree = currDegree.degree;
        }
        degrees[node.id()] = currDegree.degree;
      }
      return {
        degree: function degree(node2) {
          if (maxDegree === 0) {
            return 0;
          }
          if (string(node2)) {
            node2 = cy.filter(node2);
          }
          return degrees[node2.id()] / maxDegree;
        }
      };
    } else {
      var indegrees = {};
      var outdegrees = {};
      var maxIndegree = 0;
      var maxOutdegree = 0;
      for (var _i2 = 0; _i2 < numNodes; _i2++) {
        var _node = nodes3[_i2];
        var id2 = _node.id();
        options3.root = _node;
        var _currDegree = this.degreeCentrality(options3);
        if (maxIndegree < _currDegree.indegree) maxIndegree = _currDegree.indegree;
        if (maxOutdegree < _currDegree.outdegree) maxOutdegree = _currDegree.outdegree;
        indegrees[id2] = _currDegree.indegree;
        outdegrees[id2] = _currDegree.outdegree;
      }
      return {
        indegree: function indegree(node2) {
          if (maxIndegree == 0) {
            return 0;
          }
          if (string(node2)) {
            node2 = cy.filter(node2);
          }
          return indegrees[node2.id()] / maxIndegree;
        },
        outdegree: function outdegree(node2) {
          if (maxOutdegree === 0) {
            return 0;
          }
          if (string(node2)) {
            node2 = cy.filter(node2);
          }
          return outdegrees[node2.id()] / maxOutdegree;
        }
      };
    }
  },
  // degreeCentralityNormalized
  // Implemented from the algorithm in Opsahl's paper
  // "Node centrality in weighted networks: Generalizing degree and shortest paths"
  // check the heading 2 "Degree"
  degreeCentrality: function degreeCentrality(options3) {
    options3 = defaults$f(options3);
    var cy = this.cy();
    var callingEles = this;
    var _options = options3, root = _options.root, weight8 = _options.weight, directed = _options.directed, alpha = _options.alpha;
    root = cy.collection(root)[0];
    if (!directed) {
      var connEdges = root.connectedEdges().intersection(callingEles);
      var k2 = connEdges.length;
      var s2 = 0;
      for (var i2 = 0; i2 < connEdges.length; i2++) {
        s2 += weight8(connEdges[i2]);
      }
      return {
        degree: Math.pow(k2, 1 - alpha) * Math.pow(s2, alpha)
      };
    } else {
      var edges3 = root.connectedEdges();
      var incoming = edges3.filter(function(edge) {
        return edge.target().same(root) && callingEles.has(edge);
      });
      var outgoing = edges3.filter(function(edge) {
        return edge.source().same(root) && callingEles.has(edge);
      });
      var k_in = incoming.length;
      var k_out = outgoing.length;
      var s_in = 0;
      var s_out = 0;
      for (var _i2 = 0; _i2 < incoming.length; _i2++) {
        s_in += weight8(incoming[_i2]);
      }
      for (var _i3 = 0; _i3 < outgoing.length; _i3++) {
        s_out += weight8(outgoing[_i3]);
      }
      return {
        indegree: Math.pow(k_in, 1 - alpha) * Math.pow(s_in, alpha),
        outdegree: Math.pow(k_out, 1 - alpha) * Math.pow(s_out, alpha)
      };
    }
  }
  // degreeCentrality
};
elesfn$n.dc = elesfn$n.degreeCentrality;
elesfn$n.dcn = elesfn$n.degreeCentralityNormalised = elesfn$n.degreeCentralityNormalized;
var defaults$e = defaults$g({
  harmonic: true,
  weight: function weight7() {
    return 1;
  },
  directed: false,
  root: null
});
var elesfn$m = {
  closenessCentralityNormalized: function closenessCentralityNormalized(options3) {
    var _defaults = defaults$e(options3), harmonic = _defaults.harmonic, weight8 = _defaults.weight, directed = _defaults.directed;
    var cy = this.cy();
    var closenesses = {};
    var maxCloseness = 0;
    var nodes3 = this.nodes();
    var fw = this.floydWarshall({
      weight: weight8,
      directed
    });
    for (var i2 = 0; i2 < nodes3.length; i2++) {
      var currCloseness = 0;
      var node_i = nodes3[i2];
      for (var j2 = 0; j2 < nodes3.length; j2++) {
        if (i2 !== j2) {
          var d2 = fw.distance(node_i, nodes3[j2]);
          if (harmonic) {
            currCloseness += 1 / d2;
          } else {
            currCloseness += d2;
          }
        }
      }
      if (!harmonic) {
        currCloseness = 1 / currCloseness;
      }
      if (maxCloseness < currCloseness) {
        maxCloseness = currCloseness;
      }
      closenesses[node_i.id()] = currCloseness;
    }
    return {
      closeness: function closeness(node) {
        if (maxCloseness == 0) {
          return 0;
        }
        if (string(node)) {
          node = cy.filter(node)[0].id();
        } else {
          node = node.id();
        }
        return closenesses[node] / maxCloseness;
      }
    };
  },
  // Implemented from pseudocode from wikipedia
  closenessCentrality: function closenessCentrality(options3) {
    var _defaults2 = defaults$e(options3), root = _defaults2.root, weight8 = _defaults2.weight, directed = _defaults2.directed, harmonic = _defaults2.harmonic;
    root = this.filter(root)[0];
    var dijkstra2 = this.dijkstra({
      root,
      weight: weight8,
      directed
    });
    var totalDistance = 0;
    var nodes3 = this.nodes();
    for (var i2 = 0; i2 < nodes3.length; i2++) {
      var n2 = nodes3[i2];
      if (!n2.same(root)) {
        var d2 = dijkstra2.distanceTo(n2);
        if (harmonic) {
          totalDistance += 1 / d2;
        } else {
          totalDistance += d2;
        }
      }
    }
    return harmonic ? totalDistance : 1 / totalDistance;
  }
  // closenessCentrality
};
elesfn$m.cc = elesfn$m.closenessCentrality;
elesfn$m.ccn = elesfn$m.closenessCentralityNormalised = elesfn$m.closenessCentralityNormalized;
var defaults$d = defaults$g({
  weight: null,
  directed: false
});
var elesfn$l = {
  // Implemented from the algorithm in the paper "On Variants of Shortest-Path Betweenness Centrality and their Generic Computation" by Ulrik Brandes
  betweennessCentrality: function betweennessCentrality(options3) {
    var _defaults = defaults$d(options3), directed = _defaults.directed, weight8 = _defaults.weight;
    var weighted = weight8 != null;
    var cy = this.cy();
    var V2 = this.nodes();
    var A2 = {};
    var _C = {};
    var max5 = 0;
    var C2 = {
      set: function set2(key, val) {
        _C[key] = val;
        if (val > max5) {
          max5 = val;
        }
      },
      get: function get2(key) {
        return _C[key];
      }
    };
    for (var i2 = 0; i2 < V2.length; i2++) {
      var v3 = V2[i2];
      var vid = v3.id();
      if (directed) {
        A2[vid] = v3.outgoers().nodes();
      } else {
        A2[vid] = v3.openNeighborhood().nodes();
      }
      C2.set(vid, 0);
    }
    var _loop = function _loop2() {
      var sid = V2[s2].id();
      var S2 = [];
      var P2 = {};
      var g2 = {};
      var d2 = {};
      var Q2 = new Heap(function(a2, b2) {
        return d2[a2] - d2[b2];
      });
      for (var _i2 = 0; _i2 < V2.length; _i2++) {
        var _vid = V2[_i2].id();
        P2[_vid] = [];
        g2[_vid] = 0;
        d2[_vid] = Infinity;
      }
      g2[sid] = 1;
      d2[sid] = 0;
      Q2.push(sid);
      while (!Q2.empty()) {
        var _v = Q2.pop();
        S2.push(_v);
        if (weighted) {
          for (var j2 = 0; j2 < A2[_v].length; j2++) {
            var w2 = A2[_v][j2];
            var vEle = cy.getElementById(_v);
            var edge = void 0;
            if (vEle.edgesTo(w2).length > 0) {
              edge = vEle.edgesTo(w2)[0];
            } else {
              edge = w2.edgesTo(vEle)[0];
            }
            var edgeWeight = weight8(edge);
            w2 = w2.id();
            if (d2[w2] > d2[_v] + edgeWeight) {
              d2[w2] = d2[_v] + edgeWeight;
              if (Q2.nodes.indexOf(w2) < 0) {
                Q2.push(w2);
              } else {
                Q2.updateItem(w2);
              }
              g2[w2] = 0;
              P2[w2] = [];
            }
            if (d2[w2] == d2[_v] + edgeWeight) {
              g2[w2] = g2[w2] + g2[_v];
              P2[w2].push(_v);
            }
          }
        } else {
          for (var _j = 0; _j < A2[_v].length; _j++) {
            var _w = A2[_v][_j].id();
            if (d2[_w] == Infinity) {
              Q2.push(_w);
              d2[_w] = d2[_v] + 1;
            }
            if (d2[_w] == d2[_v] + 1) {
              g2[_w] = g2[_w] + g2[_v];
              P2[_w].push(_v);
            }
          }
        }
      }
      var e = {};
      for (var _i22 = 0; _i22 < V2.length; _i22++) {
        e[V2[_i22].id()] = 0;
      }
      while (S2.length > 0) {
        var _w2 = S2.pop();
        for (var _j2 = 0; _j2 < P2[_w2].length; _j2++) {
          var _v2 = P2[_w2][_j2];
          e[_v2] = e[_v2] + g2[_v2] / g2[_w2] * (1 + e[_w2]);
        }
        if (_w2 != V2[s2].id()) {
          C2.set(_w2, C2.get(_w2) + e[_w2]);
        }
      }
    };
    for (var s2 = 0; s2 < V2.length; s2++) {
      _loop();
    }
    var ret = {
      betweenness: function betweenness(node) {
        var id2 = cy.collection(node).id();
        return C2.get(id2);
      },
      betweennessNormalized: function betweennessNormalized(node) {
        if (max5 == 0) {
          return 0;
        }
        var id2 = cy.collection(node).id();
        return C2.get(id2) / max5;
      }
    };
    ret.betweennessNormalised = ret.betweennessNormalized;
    return ret;
  }
  // betweennessCentrality
};
elesfn$l.bc = elesfn$l.betweennessCentrality;
var defaults$c = defaults$g({
  expandFactor: 2,
  // affects time of computation and cluster granularity to some extent: M * M
  inflateFactor: 2,
  // affects cluster granularity (the greater the value, the more clusters): M(i,j) / E(j)
  multFactor: 1,
  // optional self loops for each node. Use a neutral value to improve cluster computations.
  maxIterations: 20,
  // maximum number of iterations of the MCL algorithm in a single run
  attributes: [
    // attributes/features used to group nodes, ie. similarity values between nodes
    function(edge) {
      return 1;
    }
  ]
});
var setOptions$3 = function setOptions(options3) {
  return defaults$c(options3);
};
var getSimilarity$1 = function getSimilarity(edge, attributes) {
  var total = 0;
  for (var i2 = 0; i2 < attributes.length; i2++) {
    total += attributes[i2](edge);
  }
  return total;
};
var addLoops = function addLoops2(M2, n2, val) {
  for (var i2 = 0; i2 < n2; i2++) {
    M2[i2 * n2 + i2] = val;
  }
};
var normalize = function normalize2(M2, n2) {
  var sum;
  for (var col = 0; col < n2; col++) {
    sum = 0;
    for (var row = 0; row < n2; row++) {
      sum += M2[row * n2 + col];
    }
    for (var _row = 0; _row < n2; _row++) {
      M2[_row * n2 + col] = M2[_row * n2 + col] / sum;
    }
  }
};
var mmult = function mmult2(A2, B2, n2) {
  var C2 = new Array(n2 * n2);
  for (var i2 = 0; i2 < n2; i2++) {
    for (var j2 = 0; j2 < n2; j2++) {
      C2[i2 * n2 + j2] = 0;
    }
    for (var k2 = 0; k2 < n2; k2++) {
      for (var _j = 0; _j < n2; _j++) {
        C2[i2 * n2 + _j] += A2[i2 * n2 + k2] * B2[k2 * n2 + _j];
      }
    }
  }
  return C2;
};
var expand = function expand2(M2, n2, expandFactor) {
  var _M = M2.slice(0);
  for (var p3 = 1; p3 < expandFactor; p3++) {
    M2 = mmult(M2, _M, n2);
  }
  return M2;
};
var inflate = function inflate2(M2, n2, inflateFactor) {
  var _M = new Array(n2 * n2);
  for (var i2 = 0; i2 < n2 * n2; i2++) {
    _M[i2] = Math.pow(M2[i2], inflateFactor);
  }
  normalize(_M, n2);
  return _M;
};
var hasConverged = function hasConverged2(M2, _M, n2, roundFactor) {
  for (var i2 = 0; i2 < n2; i2++) {
    var v12 = Math.round(M2[i2] * Math.pow(10, roundFactor)) / Math.pow(10, roundFactor);
    var v22 = Math.round(_M[i2] * Math.pow(10, roundFactor)) / Math.pow(10, roundFactor);
    if (v12 !== v22) {
      return false;
    }
  }
  return true;
};
var assign$2 = function assign(M2, n2, nodes3, cy) {
  var clusters = [];
  for (var i2 = 0; i2 < n2; i2++) {
    var cluster = [];
    for (var j2 = 0; j2 < n2; j2++) {
      if (Math.round(M2[i2 * n2 + j2] * 1e3) / 1e3 > 0) {
        cluster.push(nodes3[j2]);
      }
    }
    if (cluster.length !== 0) {
      clusters.push(cy.collection(cluster));
    }
  }
  return clusters;
};
var isDuplicate = function isDuplicate2(c1, c2) {
  for (var i2 = 0; i2 < c1.length; i2++) {
    if (!c2[i2] || c1[i2].id() !== c2[i2].id()) {
      return false;
    }
  }
  return true;
};
var removeDuplicates = function removeDuplicates2(clusters) {
  for (var i2 = 0; i2 < clusters.length; i2++) {
    for (var j2 = 0; j2 < clusters.length; j2++) {
      if (i2 != j2 && isDuplicate(clusters[i2], clusters[j2])) {
        clusters.splice(j2, 1);
      }
    }
  }
  return clusters;
};
var markovClustering = function markovClustering2(options3) {
  var nodes3 = this.nodes();
  var edges3 = this.edges();
  var cy = this.cy();
  var opts = setOptions$3(options3);
  var id2position = {};
  for (var i2 = 0; i2 < nodes3.length; i2++) {
    id2position[nodes3[i2].id()] = i2;
  }
  var n2 = nodes3.length, n22 = n2 * n2;
  var M2 = new Array(n22), _M;
  for (var _i2 = 0; _i2 < n22; _i2++) {
    M2[_i2] = 0;
  }
  for (var e = 0; e < edges3.length; e++) {
    var edge = edges3[e];
    var _i22 = id2position[edge.source().id()];
    var j2 = id2position[edge.target().id()];
    var sim = getSimilarity$1(edge, opts.attributes);
    M2[_i22 * n2 + j2] += sim;
    M2[j2 * n2 + _i22] += sim;
  }
  addLoops(M2, n2, opts.multFactor);
  normalize(M2, n2);
  var isStillMoving = true;
  var iterations = 0;
  while (isStillMoving && iterations < opts.maxIterations) {
    isStillMoving = false;
    _M = expand(M2, n2, opts.expandFactor);
    M2 = inflate(_M, n2, opts.inflateFactor);
    if (!hasConverged(M2, _M, n22, 4)) {
      isStillMoving = true;
    }
    iterations++;
  }
  var clusters = assign$2(M2, n2, nodes3, cy);
  clusters = removeDuplicates(clusters);
  return clusters;
};
var markovClustering$1 = {
  markovClustering,
  mcl: markovClustering
};
var identity$1 = function identity(x3) {
  return x3;
};
var absDiff = function absDiff2(p3, q2) {
  return Math.abs(q2 - p3);
};
var addAbsDiff = function addAbsDiff2(total, p3, q2) {
  return total + absDiff(p3, q2);
};
var addSquaredDiff = function addSquaredDiff2(total, p3, q2) {
  return total + Math.pow(q2 - p3, 2);
};
var sqrt = function sqrt3(x3) {
  return Math.sqrt(x3);
};
var maxAbsDiff = function maxAbsDiff2(currentMax, p3, q2) {
  return Math.max(currentMax, absDiff(p3, q2));
};
var getDistance = function getDistance2(length, getP, getQ, init2, visit) {
  var post = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : identity$1;
  var ret = init2;
  var p3, q2;
  for (var dim = 0; dim < length; dim++) {
    p3 = getP(dim);
    q2 = getQ(dim);
    ret = visit(ret, p3, q2);
  }
  return post(ret);
};
var distances = {
  euclidean: function euclidean(length, getP, getQ) {
    if (length >= 2) {
      return getDistance(length, getP, getQ, 0, addSquaredDiff, sqrt);
    } else {
      return getDistance(length, getP, getQ, 0, addAbsDiff);
    }
  },
  squaredEuclidean: function squaredEuclidean(length, getP, getQ) {
    return getDistance(length, getP, getQ, 0, addSquaredDiff);
  },
  manhattan: function manhattan(length, getP, getQ) {
    return getDistance(length, getP, getQ, 0, addAbsDiff);
  },
  max: function max3(length, getP, getQ) {
    return getDistance(length, getP, getQ, -Infinity, maxAbsDiff);
  }
};
distances["squared-euclidean"] = distances["squaredEuclidean"];
distances["squaredeuclidean"] = distances["squaredEuclidean"];
function clusteringDistance(method, length, getP, getQ, nodeP, nodeQ) {
  var impl2;
  if (fn$6(method)) {
    impl2 = method;
  } else {
    impl2 = distances[method] || distances.euclidean;
  }
  if (length === 0 && fn$6(method)) {
    return impl2(nodeP, nodeQ);
  } else {
    return impl2(length, getP, getQ, nodeP, nodeQ);
  }
}
var defaults$b = defaults$g({
  k: 2,
  m: 2,
  sensitivityThreshold: 1e-4,
  distance: "euclidean",
  maxIterations: 10,
  attributes: [],
  testMode: false,
  testCentroids: null
});
var setOptions$2 = function setOptions2(options3) {
  return defaults$b(options3);
};
var getDist = function getDist2(type2, node, centroid, attributes, mode) {
  var noNodeP = mode !== "kMedoids";
  var getP = noNodeP ? function(i2) {
    return centroid[i2];
  } : function(i2) {
    return attributes[i2](centroid);
  };
  var getQ = function getQ2(i2) {
    return attributes[i2](node);
  };
  var nodeP = centroid;
  var nodeQ = node;
  return clusteringDistance(type2, attributes.length, getP, getQ, nodeP, nodeQ);
};
var randomCentroids = function randomCentroids2(nodes3, k2, attributes) {
  var ndim = attributes.length;
  var min4 = new Array(ndim);
  var max5 = new Array(ndim);
  var centroids = new Array(k2);
  var centroid = null;
  for (var i2 = 0; i2 < ndim; i2++) {
    min4[i2] = nodes3.min(attributes[i2]).value;
    max5[i2] = nodes3.max(attributes[i2]).value;
  }
  for (var c2 = 0; c2 < k2; c2++) {
    centroid = [];
    for (var _i2 = 0; _i2 < ndim; _i2++) {
      centroid[_i2] = Math.random() * (max5[_i2] - min4[_i2]) + min4[_i2];
    }
    centroids[c2] = centroid;
  }
  return centroids;
};
var classify = function classify2(node, centroids, distance, attributes, type2) {
  var min4 = Infinity;
  var index = 0;
  for (var i2 = 0; i2 < centroids.length; i2++) {
    var dist3 = getDist(distance, node, centroids[i2], attributes, type2);
    if (dist3 < min4) {
      min4 = dist3;
      index = i2;
    }
  }
  return index;
};
var buildCluster = function buildCluster2(centroid, nodes3, assignment) {
  var cluster = [];
  var node = null;
  for (var n2 = 0; n2 < nodes3.length; n2++) {
    node = nodes3[n2];
    if (assignment[node.id()] === centroid) {
      cluster.push(node);
    }
  }
  return cluster;
};
var haveValuesConverged = function haveValuesConverged2(v12, v22, sensitivityThreshold) {
  return Math.abs(v22 - v12) <= sensitivityThreshold;
};
var haveMatricesConverged = function haveMatricesConverged2(v12, v22, sensitivityThreshold) {
  for (var i2 = 0; i2 < v12.length; i2++) {
    for (var j2 = 0; j2 < v12[i2].length; j2++) {
      var diff2 = Math.abs(v12[i2][j2] - v22[i2][j2]);
      if (diff2 > sensitivityThreshold) {
        return false;
      }
    }
  }
  return true;
};
var seenBefore = function seenBefore2(node, medoids, n2) {
  for (var i2 = 0; i2 < n2; i2++) {
    if (node === medoids[i2]) return true;
  }
  return false;
};
var randomMedoids = function randomMedoids2(nodes3, k2) {
  var medoids = new Array(k2);
  if (nodes3.length < 50) {
    for (var i2 = 0; i2 < k2; i2++) {
      var node = nodes3[Math.floor(Math.random() * nodes3.length)];
      while (seenBefore(node, medoids, i2)) {
        node = nodes3[Math.floor(Math.random() * nodes3.length)];
      }
      medoids[i2] = node;
    }
  } else {
    for (var _i2 = 0; _i2 < k2; _i2++) {
      medoids[_i2] = nodes3[Math.floor(Math.random() * nodes3.length)];
    }
  }
  return medoids;
};
var findCost = function findCost2(potentialNewMedoid, cluster, attributes) {
  var cost = 0;
  for (var n2 = 0; n2 < cluster.length; n2++) {
    cost += getDist("manhattan", cluster[n2], potentialNewMedoid, attributes, "kMedoids");
  }
  return cost;
};
var kMeans = function kMeans2(options3) {
  var cy = this.cy();
  var nodes3 = this.nodes();
  var node = null;
  var opts = setOptions$2(options3);
  var clusters = new Array(opts.k);
  var assignment = {};
  var centroids;
  if (opts.testMode) {
    if (typeof opts.testCentroids === "number") {
      opts.testCentroids;
      centroids = randomCentroids(nodes3, opts.k, opts.attributes);
    } else if (_typeof(opts.testCentroids) === "object") {
      centroids = opts.testCentroids;
    } else {
      centroids = randomCentroids(nodes3, opts.k, opts.attributes);
    }
  } else {
    centroids = randomCentroids(nodes3, opts.k, opts.attributes);
  }
  var isStillMoving = true;
  var iterations = 0;
  while (isStillMoving && iterations < opts.maxIterations) {
    for (var n2 = 0; n2 < nodes3.length; n2++) {
      node = nodes3[n2];
      assignment[node.id()] = classify(node, centroids, opts.distance, opts.attributes, "kMeans");
    }
    isStillMoving = false;
    for (var c2 = 0; c2 < opts.k; c2++) {
      var cluster = buildCluster(c2, nodes3, assignment);
      if (cluster.length === 0) {
        continue;
      }
      var ndim = opts.attributes.length;
      var centroid = centroids[c2];
      var newCentroid = new Array(ndim);
      var sum = new Array(ndim);
      for (var d2 = 0; d2 < ndim; d2++) {
        sum[d2] = 0;
        for (var i2 = 0; i2 < cluster.length; i2++) {
          node = cluster[i2];
          sum[d2] += opts.attributes[d2](node);
        }
        newCentroid[d2] = sum[d2] / cluster.length;
        if (!haveValuesConverged(newCentroid[d2], centroid[d2], opts.sensitivityThreshold)) {
          isStillMoving = true;
        }
      }
      centroids[c2] = newCentroid;
      clusters[c2] = cy.collection(cluster);
    }
    iterations++;
  }
  return clusters;
};
var kMedoids = function kMedoids2(options3) {
  var cy = this.cy();
  var nodes3 = this.nodes();
  var node = null;
  var opts = setOptions$2(options3);
  var clusters = new Array(opts.k);
  var medoids;
  var assignment = {};
  var curCost;
  var minCosts = new Array(opts.k);
  if (opts.testMode) {
    if (typeof opts.testCentroids === "number") ;
    else if (_typeof(opts.testCentroids) === "object") {
      medoids = opts.testCentroids;
    } else {
      medoids = randomMedoids(nodes3, opts.k);
    }
  } else {
    medoids = randomMedoids(nodes3, opts.k);
  }
  var isStillMoving = true;
  var iterations = 0;
  while (isStillMoving && iterations < opts.maxIterations) {
    for (var n2 = 0; n2 < nodes3.length; n2++) {
      node = nodes3[n2];
      assignment[node.id()] = classify(node, medoids, opts.distance, opts.attributes, "kMedoids");
    }
    isStillMoving = false;
    for (var m2 = 0; m2 < medoids.length; m2++) {
      var cluster = buildCluster(m2, nodes3, assignment);
      if (cluster.length === 0) {
        continue;
      }
      minCosts[m2] = findCost(medoids[m2], cluster, opts.attributes);
      for (var _n2 = 0; _n2 < cluster.length; _n2++) {
        curCost = findCost(cluster[_n2], cluster, opts.attributes);
        if (curCost < minCosts[m2]) {
          minCosts[m2] = curCost;
          medoids[m2] = cluster[_n2];
          isStillMoving = true;
        }
      }
      clusters[m2] = cy.collection(cluster);
    }
    iterations++;
  }
  return clusters;
};
var updateCentroids = function updateCentroids2(centroids, nodes3, U2, weight8, opts) {
  var numerator, denominator;
  for (var n2 = 0; n2 < nodes3.length; n2++) {
    for (var c2 = 0; c2 < centroids.length; c2++) {
      weight8[n2][c2] = Math.pow(U2[n2][c2], opts.m);
    }
  }
  for (var _c2 = 0; _c2 < centroids.length; _c2++) {
    for (var dim = 0; dim < opts.attributes.length; dim++) {
      numerator = 0;
      denominator = 0;
      for (var _n2 = 0; _n2 < nodes3.length; _n2++) {
        numerator += weight8[_n2][_c2] * opts.attributes[dim](nodes3[_n2]);
        denominator += weight8[_n2][_c2];
      }
      centroids[_c2][dim] = numerator / denominator;
    }
  }
};
var updateMembership = function updateMembership2(U2, _U, centroids, nodes3, opts) {
  for (var i2 = 0; i2 < U2.length; i2++) {
    _U[i2] = U2[i2].slice();
  }
  var sum, numerator, denominator;
  var pow = 2 / (opts.m - 1);
  for (var c2 = 0; c2 < centroids.length; c2++) {
    for (var n2 = 0; n2 < nodes3.length; n2++) {
      sum = 0;
      for (var k2 = 0; k2 < centroids.length; k2++) {
        numerator = getDist(opts.distance, nodes3[n2], centroids[c2], opts.attributes, "cmeans");
        denominator = getDist(opts.distance, nodes3[n2], centroids[k2], opts.attributes, "cmeans");
        sum += Math.pow(numerator / denominator, pow);
      }
      U2[n2][c2] = 1 / sum;
    }
  }
};
var assign$1 = function assign2(nodes3, U2, opts, cy) {
  var clusters = new Array(opts.k);
  for (var c2 = 0; c2 < clusters.length; c2++) {
    clusters[c2] = [];
  }
  var max5;
  var index;
  for (var n2 = 0; n2 < U2.length; n2++) {
    max5 = -Infinity;
    index = -1;
    for (var _c2 = 0; _c2 < U2[0].length; _c2++) {
      if (U2[n2][_c2] > max5) {
        max5 = U2[n2][_c2];
        index = _c2;
      }
    }
    clusters[index].push(nodes3[n2]);
  }
  for (var _c3 = 0; _c3 < clusters.length; _c3++) {
    clusters[_c3] = cy.collection(clusters[_c3]);
  }
  return clusters;
};
var fuzzyCMeans = function fuzzyCMeans2(options3) {
  var cy = this.cy();
  var nodes3 = this.nodes();
  var opts = setOptions$2(options3);
  var clusters;
  var centroids;
  var U2;
  var _U;
  var weight8;
  _U = new Array(nodes3.length);
  for (var i2 = 0; i2 < nodes3.length; i2++) {
    _U[i2] = new Array(opts.k);
  }
  U2 = new Array(nodes3.length);
  for (var _i3 = 0; _i3 < nodes3.length; _i3++) {
    U2[_i3] = new Array(opts.k);
  }
  for (var _i4 = 0; _i4 < nodes3.length; _i4++) {
    var total = 0;
    for (var j2 = 0; j2 < opts.k; j2++) {
      U2[_i4][j2] = Math.random();
      total += U2[_i4][j2];
    }
    for (var _j = 0; _j < opts.k; _j++) {
      U2[_i4][_j] = U2[_i4][_j] / total;
    }
  }
  centroids = new Array(opts.k);
  for (var _i5 = 0; _i5 < opts.k; _i5++) {
    centroids[_i5] = new Array(opts.attributes.length);
  }
  weight8 = new Array(nodes3.length);
  for (var _i6 = 0; _i6 < nodes3.length; _i6++) {
    weight8[_i6] = new Array(opts.k);
  }
  var isStillMoving = true;
  var iterations = 0;
  while (isStillMoving && iterations < opts.maxIterations) {
    isStillMoving = false;
    updateCentroids(centroids, nodes3, U2, weight8, opts);
    updateMembership(U2, _U, centroids, nodes3, opts);
    if (!haveMatricesConverged(U2, _U, opts.sensitivityThreshold)) {
      isStillMoving = true;
    }
    iterations++;
  }
  clusters = assign$1(nodes3, U2, opts, cy);
  return {
    clusters,
    degreeOfMembership: U2
  };
};
var kClustering = {
  kMeans,
  kMedoids,
  fuzzyCMeans,
  fcm: fuzzyCMeans
};
var defaults$a = defaults$g({
  distance: "euclidean",
  // distance metric to compare nodes
  linkage: "min",
  // linkage criterion : how to determine the distance between clusters of nodes
  mode: "threshold",
  // mode:'threshold' => clusters must be threshold distance apart
  threshold: Infinity,
  // the distance threshold
  // mode:'dendrogram' => the nodes are organised as leaves in a tree (siblings are close), merging makes clusters
  addDendrogram: false,
  // whether to add the dendrogram to the graph for viz
  dendrogramDepth: 0,
  // depth at which dendrogram branches are merged into the returned clusters
  attributes: []
  // array of attr functions
});
var linkageAliases = {
  "single": "min",
  "complete": "max"
};
var setOptions$1 = function setOptions3(options3) {
  var opts = defaults$a(options3);
  var preferredAlias = linkageAliases[opts.linkage];
  if (preferredAlias != null) {
    opts.linkage = preferredAlias;
  }
  return opts;
};
var mergeClosest = function mergeClosest2(clusters, index, dists, mins, opts) {
  var minKey = 0;
  var min4 = Infinity;
  var dist3;
  var attrs = opts.attributes;
  var getDist3 = function getDist4(n1, n2) {
    return clusteringDistance(opts.distance, attrs.length, function(i3) {
      return attrs[i3](n1);
    }, function(i3) {
      return attrs[i3](n2);
    }, n1, n2);
  };
  for (var i2 = 0; i2 < clusters.length; i2++) {
    var key = clusters[i2].key;
    var _dist = dists[key][mins[key]];
    if (_dist < min4) {
      minKey = key;
      min4 = _dist;
    }
  }
  if (opts.mode === "threshold" && min4 >= opts.threshold || opts.mode === "dendrogram" && clusters.length === 1) {
    return false;
  }
  var c1 = index[minKey];
  var c2 = index[mins[minKey]];
  var merged;
  if (opts.mode === "dendrogram") {
    merged = {
      left: c1,
      right: c2,
      key: c1.key
    };
  } else {
    merged = {
      value: c1.value.concat(c2.value),
      key: c1.key
    };
  }
  clusters[c1.index] = merged;
  clusters.splice(c2.index, 1);
  index[c1.key] = merged;
  for (var _i2 = 0; _i2 < clusters.length; _i2++) {
    var cur = clusters[_i2];
    if (c1.key === cur.key) {
      dist3 = Infinity;
    } else if (opts.linkage === "min") {
      dist3 = dists[c1.key][cur.key];
      if (dists[c1.key][cur.key] > dists[c2.key][cur.key]) {
        dist3 = dists[c2.key][cur.key];
      }
    } else if (opts.linkage === "max") {
      dist3 = dists[c1.key][cur.key];
      if (dists[c1.key][cur.key] < dists[c2.key][cur.key]) {
        dist3 = dists[c2.key][cur.key];
      }
    } else if (opts.linkage === "mean") {
      dist3 = (dists[c1.key][cur.key] * c1.size + dists[c2.key][cur.key] * c2.size) / (c1.size + c2.size);
    } else {
      if (opts.mode === "dendrogram") dist3 = getDist3(cur.value, c1.value);
      else dist3 = getDist3(cur.value[0], c1.value[0]);
    }
    dists[c1.key][cur.key] = dists[cur.key][c1.key] = dist3;
  }
  for (var _i22 = 0; _i22 < clusters.length; _i22++) {
    var key1 = clusters[_i22].key;
    if (mins[key1] === c1.key || mins[key1] === c2.key) {
      var _min = key1;
      for (var j2 = 0; j2 < clusters.length; j2++) {
        var key2 = clusters[j2].key;
        if (dists[key1][key2] < dists[key1][_min]) {
          _min = key2;
        }
      }
      mins[key1] = _min;
    }
    clusters[_i22].index = _i22;
  }
  c1.key = c2.key = c1.index = c2.index = null;
  return true;
};
var _getAllChildren = function getAllChildren(root, arr, cy) {
  if (!root) return;
  if (root.value) {
    arr.push(root.value);
  } else {
    if (root.left) _getAllChildren(root.left, arr);
    if (root.right) _getAllChildren(root.right, arr);
  }
};
var _buildDendrogram = function buildDendrogram(root, cy) {
  if (!root) return "";
  if (root.left && root.right) {
    var leftStr = _buildDendrogram(root.left, cy);
    var rightStr = _buildDendrogram(root.right, cy);
    var node = cy.add({
      group: "nodes",
      data: {
        id: leftStr + "," + rightStr
      }
    });
    cy.add({
      group: "edges",
      data: {
        source: leftStr,
        target: node.id()
      }
    });
    cy.add({
      group: "edges",
      data: {
        source: rightStr,
        target: node.id()
      }
    });
    return node.id();
  } else if (root.value) {
    return root.value.id();
  }
};
var _buildClustersFromTree = function buildClustersFromTree(root, k2, cy) {
  if (!root) return [];
  var left = [], right = [], leaves = [];
  if (k2 === 0) {
    if (root.left) _getAllChildren(root.left, left);
    if (root.right) _getAllChildren(root.right, right);
    leaves = left.concat(right);
    return [cy.collection(leaves)];
  } else if (k2 === 1) {
    if (root.value) {
      return [cy.collection(root.value)];
    } else {
      if (root.left) _getAllChildren(root.left, left);
      if (root.right) _getAllChildren(root.right, right);
      return [cy.collection(left), cy.collection(right)];
    }
  } else {
    if (root.value) {
      return [cy.collection(root.value)];
    } else {
      if (root.left) left = _buildClustersFromTree(root.left, k2 - 1, cy);
      if (root.right) right = _buildClustersFromTree(root.right, k2 - 1, cy);
      return left.concat(right);
    }
  }
};
var hierarchicalClustering = function hierarchicalClustering2(options3) {
  var cy = this.cy();
  var nodes3 = this.nodes();
  var opts = setOptions$1(options3);
  var attrs = opts.attributes;
  var getDist3 = function getDist4(n1, n22) {
    return clusteringDistance(opts.distance, attrs.length, function(i3) {
      return attrs[i3](n1);
    }, function(i3) {
      return attrs[i3](n22);
    }, n1, n22);
  };
  var clusters = [];
  var dists = [];
  var mins = [];
  var index = [];
  for (var n2 = 0; n2 < nodes3.length; n2++) {
    var cluster = {
      value: opts.mode === "dendrogram" ? nodes3[n2] : [nodes3[n2]],
      key: n2,
      index: n2
    };
    clusters[n2] = cluster;
    index[n2] = cluster;
    dists[n2] = [];
    mins[n2] = 0;
  }
  for (var i2 = 0; i2 < clusters.length; i2++) {
    for (var j2 = 0; j2 <= i2; j2++) {
      var dist3 = void 0;
      if (opts.mode === "dendrogram") {
        dist3 = i2 === j2 ? Infinity : getDist3(clusters[i2].value, clusters[j2].value);
      } else {
        dist3 = i2 === j2 ? Infinity : getDist3(clusters[i2].value[0], clusters[j2].value[0]);
      }
      dists[i2][j2] = dist3;
      dists[j2][i2] = dist3;
      if (dist3 < dists[i2][mins[i2]]) {
        mins[i2] = j2;
      }
    }
  }
  var merged = mergeClosest(clusters, index, dists, mins, opts);
  while (merged) {
    merged = mergeClosest(clusters, index, dists, mins, opts);
  }
  var retClusters;
  if (opts.mode === "dendrogram") {
    retClusters = _buildClustersFromTree(clusters[0], opts.dendrogramDepth, cy);
    if (opts.addDendrogram) _buildDendrogram(clusters[0], cy);
  } else {
    retClusters = new Array(clusters.length);
    clusters.forEach(function(cluster2, i3) {
      cluster2.key = cluster2.index = null;
      retClusters[i3] = cy.collection(cluster2.value);
    });
  }
  return retClusters;
};
var hierarchicalClustering$1 = {
  hierarchicalClustering,
  hca: hierarchicalClustering
};
var defaults$9 = defaults$g({
  distance: "euclidean",
  // distance metric to compare attributes between two nodes
  preference: "median",
  // suitability of a data point to serve as an exemplar
  damping: 0.8,
  // damping factor between [0.5, 1)
  maxIterations: 1e3,
  // max number of iterations to run
  minIterations: 100,
  // min number of iterations to run in order for clustering to stop
  attributes: [
    // functions to quantify the similarity between any two points
    // e.g. node => node.data('weight')
  ]
});
var setOptions4 = function setOptions5(options3) {
  var dmp = options3.damping;
  var pref = options3.preference;
  if (!(0.5 <= dmp && dmp < 1)) {
    error("Damping must range on [0.5, 1).  Got: ".concat(dmp));
  }
  var validPrefs = ["median", "mean", "min", "max"];
  if (!(validPrefs.some(function(v3) {
    return v3 === pref;
  }) || number$1(pref))) {
    error("Preference must be one of [".concat(validPrefs.map(function(p3) {
      return "'".concat(p3, "'");
    }).join(", "), "] or a number.  Got: ").concat(pref));
  }
  return defaults$9(options3);
};
var getSimilarity2 = function getSimilarity3(type2, n1, n2, attributes) {
  var attr = function attr2(n3, i2) {
    return attributes[i2](n3);
  };
  return -clusteringDistance(type2, attributes.length, function(i2) {
    return attr(n1, i2);
  }, function(i2) {
    return attr(n2, i2);
  }, n1, n2);
};
var getPreference = function getPreference2(S2, preference) {
  var p3 = null;
  if (preference === "median") {
    p3 = median(S2);
  } else if (preference === "mean") {
    p3 = mean(S2);
  } else if (preference === "min") {
    p3 = min(S2);
  } else if (preference === "max") {
    p3 = max(S2);
  } else {
    p3 = preference;
  }
  return p3;
};
var findExemplars = function findExemplars2(n2, R2, A2) {
  var indices = [];
  for (var i2 = 0; i2 < n2; i2++) {
    if (R2[i2 * n2 + i2] + A2[i2 * n2 + i2] > 0) {
      indices.push(i2);
    }
  }
  return indices;
};
var assignClusters = function assignClusters2(n2, S2, exemplars) {
  var clusters = [];
  for (var i2 = 0; i2 < n2; i2++) {
    var index = -1;
    var max5 = -Infinity;
    for (var ei2 = 0; ei2 < exemplars.length; ei2++) {
      var e = exemplars[ei2];
      if (S2[i2 * n2 + e] > max5) {
        index = e;
        max5 = S2[i2 * n2 + e];
      }
    }
    if (index > 0) {
      clusters.push(index);
    }
  }
  for (var _ei = 0; _ei < exemplars.length; _ei++) {
    clusters[exemplars[_ei]] = exemplars[_ei];
  }
  return clusters;
};
var assign3 = function assign4(n2, S2, exemplars) {
  var clusters = assignClusters(n2, S2, exemplars);
  for (var ei2 = 0; ei2 < exemplars.length; ei2++) {
    var ii2 = [];
    for (var c2 = 0; c2 < clusters.length; c2++) {
      if (clusters[c2] === exemplars[ei2]) {
        ii2.push(c2);
      }
    }
    var maxI = -1;
    var maxSum = -Infinity;
    for (var i2 = 0; i2 < ii2.length; i2++) {
      var sum = 0;
      for (var j2 = 0; j2 < ii2.length; j2++) {
        sum += S2[ii2[j2] * n2 + ii2[i2]];
      }
      if (sum > maxSum) {
        maxI = i2;
        maxSum = sum;
      }
    }
    exemplars[ei2] = ii2[maxI];
  }
  clusters = assignClusters(n2, S2, exemplars);
  return clusters;
};
var affinityPropagation = function affinityPropagation2(options3) {
  var cy = this.cy();
  var nodes3 = this.nodes();
  var opts = setOptions4(options3);
  var id2position = {};
  for (var i2 = 0; i2 < nodes3.length; i2++) {
    id2position[nodes3[i2].id()] = i2;
  }
  var n2;
  var n22;
  var S2;
  var p3;
  var R2;
  var A2;
  n2 = nodes3.length;
  n22 = n2 * n2;
  S2 = new Array(n22);
  for (var _i2 = 0; _i2 < n22; _i2++) {
    S2[_i2] = -Infinity;
  }
  for (var _i22 = 0; _i22 < n2; _i22++) {
    for (var j2 = 0; j2 < n2; j2++) {
      if (_i22 !== j2) {
        S2[_i22 * n2 + j2] = getSimilarity2(opts.distance, nodes3[_i22], nodes3[j2], opts.attributes);
      }
    }
  }
  p3 = getPreference(S2, opts.preference);
  for (var _i3 = 0; _i3 < n2; _i3++) {
    S2[_i3 * n2 + _i3] = p3;
  }
  R2 = new Array(n22);
  for (var _i4 = 0; _i4 < n22; _i4++) {
    R2[_i4] = 0;
  }
  A2 = new Array(n22);
  for (var _i5 = 0; _i5 < n22; _i5++) {
    A2[_i5] = 0;
  }
  var old = new Array(n2);
  var Rp = new Array(n2);
  var se2 = new Array(n2);
  for (var _i6 = 0; _i6 < n2; _i6++) {
    old[_i6] = 0;
    Rp[_i6] = 0;
    se2[_i6] = 0;
  }
  var e = new Array(n2 * opts.minIterations);
  for (var _i7 = 0; _i7 < e.length; _i7++) {
    e[_i7] = 0;
  }
  var iter;
  for (iter = 0; iter < opts.maxIterations; iter++) {
    for (var _i8 = 0; _i8 < n2; _i8++) {
      var max5 = -Infinity, max22 = -Infinity, maxI = -1, AS = 0;
      for (var _j = 0; _j < n2; _j++) {
        old[_j] = R2[_i8 * n2 + _j];
        AS = A2[_i8 * n2 + _j] + S2[_i8 * n2 + _j];
        if (AS >= max5) {
          max22 = max5;
          max5 = AS;
          maxI = _j;
        } else if (AS > max22) {
          max22 = AS;
        }
      }
      for (var _j2 = 0; _j2 < n2; _j2++) {
        R2[_i8 * n2 + _j2] = (1 - opts.damping) * (S2[_i8 * n2 + _j2] - max5) + opts.damping * old[_j2];
      }
      R2[_i8 * n2 + maxI] = (1 - opts.damping) * (S2[_i8 * n2 + maxI] - max22) + opts.damping * old[maxI];
    }
    for (var _i9 = 0; _i9 < n2; _i9++) {
      var sum = 0;
      for (var _j3 = 0; _j3 < n2; _j3++) {
        old[_j3] = A2[_j3 * n2 + _i9];
        Rp[_j3] = Math.max(0, R2[_j3 * n2 + _i9]);
        sum += Rp[_j3];
      }
      sum -= Rp[_i9];
      Rp[_i9] = R2[_i9 * n2 + _i9];
      sum += Rp[_i9];
      for (var _j4 = 0; _j4 < n2; _j4++) {
        A2[_j4 * n2 + _i9] = (1 - opts.damping) * Math.min(0, sum - Rp[_j4]) + opts.damping * old[_j4];
      }
      A2[_i9 * n2 + _i9] = (1 - opts.damping) * (sum - Rp[_i9]) + opts.damping * old[_i9];
    }
    var K3 = 0;
    for (var _i10 = 0; _i10 < n2; _i10++) {
      var E2 = A2[_i10 * n2 + _i10] + R2[_i10 * n2 + _i10] > 0 ? 1 : 0;
      e[iter % opts.minIterations * n2 + _i10] = E2;
      K3 += E2;
    }
    if (K3 > 0 && (iter >= opts.minIterations - 1 || iter == opts.maxIterations - 1)) {
      var _sum = 0;
      for (var _i11 = 0; _i11 < n2; _i11++) {
        se2[_i11] = 0;
        for (var _j5 = 0; _j5 < opts.minIterations; _j5++) {
          se2[_i11] += e[_j5 * n2 + _i11];
        }
        if (se2[_i11] === 0 || se2[_i11] === opts.minIterations) {
          _sum++;
        }
      }
      if (_sum === n2) {
        break;
      }
    }
  }
  var exemplarsIndices = findExemplars(n2, R2, A2);
  var clusterIndices = assign3(n2, S2, exemplarsIndices);
  var clusters = {};
  for (var c2 = 0; c2 < exemplarsIndices.length; c2++) {
    clusters[exemplarsIndices[c2]] = [];
  }
  for (var _i12 = 0; _i12 < nodes3.length; _i12++) {
    var pos = id2position[nodes3[_i12].id()];
    var clusterIndex = clusterIndices[pos];
    if (clusterIndex != null) {
      clusters[clusterIndex].push(nodes3[_i12]);
    }
  }
  var retClusters = new Array(exemplarsIndices.length);
  for (var _c2 = 0; _c2 < exemplarsIndices.length; _c2++) {
    retClusters[_c2] = cy.collection(clusters[exemplarsIndices[_c2]]);
  }
  return retClusters;
};
var affinityPropagation$1 = {
  affinityPropagation,
  ap: affinityPropagation
};
var hierholzerDefaults = defaults$g({
  root: void 0,
  directed: false
});
var elesfn$k = {
  hierholzer: function hierholzer(options3) {
    if (!plainObject(options3)) {
      var args = arguments;
      options3 = {
        root: args[0],
        directed: args[1]
      };
    }
    var _hierholzerDefaults = hierholzerDefaults(options3), root = _hierholzerDefaults.root, directed = _hierholzerDefaults.directed;
    var eles = this;
    var dflag = false;
    var oddIn;
    var oddOut;
    var startVertex;
    if (root) startVertex = string(root) ? this.filter(root)[0].id() : root[0].id();
    var nodes3 = {};
    var edges3 = {};
    if (directed) {
      eles.forEach(function(ele) {
        var id2 = ele.id();
        if (ele.isNode()) {
          var ind = ele.indegree(true);
          var outd = ele.outdegree(true);
          var d1 = ind - outd;
          var d22 = outd - ind;
          if (d1 == 1) {
            if (oddIn) dflag = true;
            else oddIn = id2;
          } else if (d22 == 1) {
            if (oddOut) dflag = true;
            else oddOut = id2;
          } else if (d22 > 1 || d1 > 1) {
            dflag = true;
          }
          nodes3[id2] = [];
          ele.outgoers().forEach(function(e) {
            if (e.isEdge()) nodes3[id2].push(e.id());
          });
        } else {
          edges3[id2] = [void 0, ele.target().id()];
        }
      });
    } else {
      eles.forEach(function(ele) {
        var id2 = ele.id();
        if (ele.isNode()) {
          var d3 = ele.degree(true);
          if (d3 % 2) {
            if (!oddIn) oddIn = id2;
            else if (!oddOut) oddOut = id2;
            else dflag = true;
          }
          nodes3[id2] = [];
          ele.connectedEdges().forEach(function(e) {
            return nodes3[id2].push(e.id());
          });
        } else {
          edges3[id2] = [ele.source().id(), ele.target().id()];
        }
      });
    }
    var result = {
      found: false,
      trail: void 0
    };
    if (dflag) return result;
    else if (oddOut && oddIn) {
      if (directed) {
        if (startVertex && oddOut != startVertex) {
          return result;
        }
        startVertex = oddOut;
      } else {
        if (startVertex && oddOut != startVertex && oddIn != startVertex) {
          return result;
        } else if (!startVertex) {
          startVertex = oddOut;
        }
      }
    } else {
      if (!startVertex) startVertex = eles[0].id();
    }
    var walk = function walk2(v3) {
      var currentNode = v3;
      var subtour2 = [v3];
      var adj, adjTail, adjHead;
      while (nodes3[currentNode].length) {
        adj = nodes3[currentNode].shift();
        adjTail = edges3[adj][0];
        adjHead = edges3[adj][1];
        if (currentNode != adjHead) {
          nodes3[adjHead] = nodes3[adjHead].filter(function(e) {
            return e != adj;
          });
          currentNode = adjHead;
        } else if (!directed && currentNode != adjTail) {
          nodes3[adjTail] = nodes3[adjTail].filter(function(e) {
            return e != adj;
          });
          currentNode = adjTail;
        }
        subtour2.unshift(adj);
        subtour2.unshift(currentNode);
      }
      return subtour2;
    };
    var trail = [];
    var subtour = [];
    subtour = walk(startVertex);
    while (subtour.length != 1) {
      if (nodes3[subtour[0]].length == 0) {
        trail.unshift(eles.getElementById(subtour.shift()));
        trail.unshift(eles.getElementById(subtour.shift()));
      } else {
        subtour = walk(subtour.shift()).concat(subtour);
      }
    }
    trail.unshift(eles.getElementById(subtour.shift()));
    for (var d2 in nodes3) {
      if (nodes3[d2].length) {
        return result;
      }
    }
    result.found = true;
    result.trail = this.spawn(trail, true);
    return result;
  }
};
var hopcroftTarjanBiconnected = function hopcroftTarjanBiconnected2() {
  var eles = this;
  var nodes3 = {};
  var id2 = 0;
  var edgeCount = 0;
  var components2 = [];
  var stack = [];
  var visitedEdges = {};
  var buildComponent = function buildComponent2(x3, y3) {
    var i2 = stack.length - 1;
    var cutset = [];
    var component2 = eles.spawn();
    while (stack[i2].x != x3 || stack[i2].y != y3) {
      cutset.push(stack.pop().edge);
      i2--;
    }
    cutset.push(stack.pop().edge);
    cutset.forEach(function(edge) {
      var connectedNodes = edge.connectedNodes().intersection(eles);
      component2.merge(edge);
      connectedNodes.forEach(function(node) {
        var nodeId = node.id();
        var connectedEdges = node.connectedEdges().intersection(eles);
        component2.merge(node);
        if (!nodes3[nodeId].cutVertex) {
          component2.merge(connectedEdges);
        } else {
          component2.merge(connectedEdges.filter(function(edge2) {
            return edge2.isLoop();
          }));
        }
      });
    });
    components2.push(component2);
  };
  var _biconnectedSearch = function biconnectedSearch(root, currentNode, parent4) {
    if (root === parent4) edgeCount += 1;
    nodes3[currentNode] = {
      id: id2,
      low: id2++,
      cutVertex: false
    };
    var edges3 = eles.getElementById(currentNode).connectedEdges().intersection(eles);
    if (edges3.size() === 0) {
      components2.push(eles.spawn(eles.getElementById(currentNode)));
    } else {
      var sourceId, targetId, otherNodeId, edgeId;
      edges3.forEach(function(edge) {
        sourceId = edge.source().id();
        targetId = edge.target().id();
        otherNodeId = sourceId === currentNode ? targetId : sourceId;
        if (otherNodeId !== parent4) {
          edgeId = edge.id();
          if (!visitedEdges[edgeId]) {
            visitedEdges[edgeId] = true;
            stack.push({
              x: currentNode,
              y: otherNodeId,
              edge
            });
          }
          if (!(otherNodeId in nodes3)) {
            _biconnectedSearch(root, otherNodeId, currentNode);
            nodes3[currentNode].low = Math.min(nodes3[currentNode].low, nodes3[otherNodeId].low);
            if (nodes3[currentNode].id <= nodes3[otherNodeId].low) {
              nodes3[currentNode].cutVertex = true;
              buildComponent(currentNode, otherNodeId);
            }
          } else {
            nodes3[currentNode].low = Math.min(nodes3[currentNode].low, nodes3[otherNodeId].id);
          }
        }
      });
    }
  };
  eles.forEach(function(ele) {
    if (ele.isNode()) {
      var nodeId = ele.id();
      if (!(nodeId in nodes3)) {
        edgeCount = 0;
        _biconnectedSearch(nodeId, nodeId);
        nodes3[nodeId].cutVertex = edgeCount > 1;
      }
    }
  });
  var cutVertices = Object.keys(nodes3).filter(function(id3) {
    return nodes3[id3].cutVertex;
  }).map(function(id3) {
    return eles.getElementById(id3);
  });
  return {
    cut: eles.spawn(cutVertices),
    components: components2
  };
};
var hopcroftTarjanBiconnected$1 = {
  hopcroftTarjanBiconnected,
  htbc: hopcroftTarjanBiconnected,
  htb: hopcroftTarjanBiconnected,
  hopcroftTarjanBiconnectedComponents: hopcroftTarjanBiconnected
};
var tarjanStronglyConnected = function tarjanStronglyConnected2() {
  var eles = this;
  var nodes3 = {};
  var index = 0;
  var components2 = [];
  var stack = [];
  var cut = eles.spawn(eles);
  var _stronglyConnectedSearch = function stronglyConnectedSearch(sourceNodeId) {
    stack.push(sourceNodeId);
    nodes3[sourceNodeId] = {
      index,
      low: index++,
      explored: false
    };
    var connectedEdges = eles.getElementById(sourceNodeId).connectedEdges().intersection(eles);
    connectedEdges.forEach(function(edge) {
      var targetNodeId = edge.target().id();
      if (targetNodeId !== sourceNodeId) {
        if (!(targetNodeId in nodes3)) {
          _stronglyConnectedSearch(targetNodeId);
        }
        if (!nodes3[targetNodeId].explored) {
          nodes3[sourceNodeId].low = Math.min(nodes3[sourceNodeId].low, nodes3[targetNodeId].low);
        }
      }
    });
    if (nodes3[sourceNodeId].index === nodes3[sourceNodeId].low) {
      var componentNodes = eles.spawn();
      for (; ; ) {
        var nodeId = stack.pop();
        componentNodes.merge(eles.getElementById(nodeId));
        nodes3[nodeId].low = nodes3[sourceNodeId].index;
        nodes3[nodeId].explored = true;
        if (nodeId === sourceNodeId) {
          break;
        }
      }
      var componentEdges = componentNodes.edgesWith(componentNodes);
      var component2 = componentNodes.merge(componentEdges);
      components2.push(component2);
      cut = cut.difference(component2);
    }
  };
  eles.forEach(function(ele) {
    if (ele.isNode()) {
      var nodeId = ele.id();
      if (!(nodeId in nodes3)) {
        _stronglyConnectedSearch(nodeId);
      }
    }
  });
  return {
    cut,
    components: components2
  };
};
var tarjanStronglyConnected$1 = {
  tarjanStronglyConnected,
  tsc: tarjanStronglyConnected,
  tscc: tarjanStronglyConnected,
  tarjanStronglyConnectedComponents: tarjanStronglyConnected
};
var elesfn$j = {};
[elesfn$v, elesfn$u, elesfn$t, elesfn$s, elesfn$r, elesfn$q, elesfn$p, elesfn$o, elesfn$n, elesfn$m, elesfn$l, markovClustering$1, kClustering, hierarchicalClustering$1, affinityPropagation$1, elesfn$k, hopcroftTarjanBiconnected$1, tarjanStronglyConnected$1].forEach(function(props) {
  extend(elesfn$j, props);
});
var STATE_PENDING = 0;
var STATE_FULFILLED = 1;
var STATE_REJECTED = 2;
var _api = function api(executor) {
  if (!(this instanceof _api)) return new _api(executor);
  this.id = "Thenable/1.0.7";
  this.state = STATE_PENDING;
  this.fulfillValue = void 0;
  this.rejectReason = void 0;
  this.onFulfilled = [];
  this.onRejected = [];
  this.proxy = {
    then: this.then.bind(this)
  };
  if (typeof executor === "function") executor.call(this, this.fulfill.bind(this), this.reject.bind(this));
};
_api.prototype = {
  /*  promise resolving methods  */
  fulfill: function fulfill(value) {
    return deliver(this, STATE_FULFILLED, "fulfillValue", value);
  },
  reject: function reject(value) {
    return deliver(this, STATE_REJECTED, "rejectReason", value);
  },
  /*  "The then Method" [Promises/A+ 1.1, 1.2, 2.2]  */
  then: function then(onFulfilled, onRejected) {
    var curr = this;
    var next2 = new _api();
    curr.onFulfilled.push(resolver(onFulfilled, next2, "fulfill"));
    curr.onRejected.push(resolver(onRejected, next2, "reject"));
    execute(curr);
    return next2.proxy;
  }
};
var deliver = function deliver2(curr, state, name, value) {
  if (curr.state === STATE_PENDING) {
    curr.state = state;
    curr[name] = value;
    execute(curr);
  }
  return curr;
};
var execute = function execute2(curr) {
  if (curr.state === STATE_FULFILLED) execute_handlers(curr, "onFulfilled", curr.fulfillValue);
  else if (curr.state === STATE_REJECTED) execute_handlers(curr, "onRejected", curr.rejectReason);
};
var execute_handlers = function execute_handlers2(curr, name, value) {
  if (curr[name].length === 0) return;
  var handlers = curr[name];
  curr[name] = [];
  var func = function func2() {
    for (var i2 = 0; i2 < handlers.length; i2++) handlers[i2](value);
  };
  if (typeof setImmediate === "function") setImmediate(func);
  else setTimeout(func, 0);
};
var resolver = function resolver2(cb, next2, method) {
  return function(value) {
    if (typeof cb !== "function")
      next2[method].call(next2, value);
    else {
      var result;
      try {
        result = cb(value);
      } catch (e) {
        next2.reject(e);
        return;
      }
      _resolve(next2, result);
    }
  };
};
var _resolve = function resolve(promise4, x3) {
  if (promise4 === x3 || promise4.proxy === x3) {
    promise4.reject(new TypeError("cannot resolve promise with itself"));
    return;
  }
  var then2;
  if (_typeof(x3) === "object" && x3 !== null || typeof x3 === "function") {
    try {
      then2 = x3.then;
    } catch (e) {
      promise4.reject(e);
      return;
    }
  }
  if (typeof then2 === "function") {
    var resolved = false;
    try {
      then2.call(
        x3,
        /*  resolvePromise  */
        /*  [Promises/A+ 2.3.3.3.1]  */
        function(y3) {
          if (resolved) return;
          resolved = true;
          if (y3 === x3)
            promise4.reject(new TypeError("circular thenable chain"));
          else _resolve(promise4, y3);
        },
        /*  rejectPromise  */
        /*  [Promises/A+ 2.3.3.3.2]  */
        function(r2) {
          if (resolved) return;
          resolved = true;
          promise4.reject(r2);
        }
      );
    } catch (e) {
      if (!resolved)
        promise4.reject(e);
    }
    return;
  }
  promise4.fulfill(x3);
};
_api.all = function(ps2) {
  return new _api(function(resolveAll, rejectAll) {
    var vals = new Array(ps2.length);
    var doneCount = 0;
    var fulfill2 = function fulfill3(i3, val) {
      vals[i3] = val;
      doneCount++;
      if (doneCount === ps2.length) {
        resolveAll(vals);
      }
    };
    for (var i2 = 0; i2 < ps2.length; i2++) {
      (function(i3) {
        var p3 = ps2[i3];
        var isPromise = p3 != null && p3.then != null;
        if (isPromise) {
          p3.then(function(val2) {
            fulfill2(i3, val2);
          }, function(err) {
            rejectAll(err);
          });
        } else {
          var val = p3;
          fulfill2(i3, val);
        }
      })(i2);
    }
  });
};
_api.resolve = function(val) {
  return new _api(function(resolve2, reject2) {
    resolve2(val);
  });
};
_api.reject = function(val) {
  return new _api(function(resolve2, reject2) {
    reject2(val);
  });
};
var Promise$1 = typeof Promise !== "undefined" ? Promise : _api;
var Animation = function Animation2(target, opts, opts2) {
  var isCore = core(target);
  var isEle = !isCore;
  var _p = this._private = extend({
    duration: 1e3
  }, opts, opts2);
  _p.target = target;
  _p.style = _p.style || _p.css;
  _p.started = false;
  _p.playing = false;
  _p.hooked = false;
  _p.applying = false;
  _p.progress = 0;
  _p.completes = [];
  _p.frames = [];
  if (_p.complete && fn$6(_p.complete)) {
    _p.completes.push(_p.complete);
  }
  if (isEle) {
    var pos = target.position();
    _p.startPosition = _p.startPosition || {
      x: pos.x,
      y: pos.y
    };
    _p.startStyle = _p.startStyle || target.cy().style().getAnimationStartStyle(target, _p.style);
  }
  if (isCore) {
    var pan2 = target.pan();
    _p.startPan = {
      x: pan2.x,
      y: pan2.y
    };
    _p.startZoom = target.zoom();
  }
  this.length = 1;
  this[0] = this;
};
var anifn = Animation.prototype;
extend(anifn, {
  instanceString: function instanceString() {
    return "animation";
  },
  hook: function hook() {
    var _p = this._private;
    if (!_p.hooked) {
      var q2;
      var tAni = _p.target._private.animation;
      if (_p.queue) {
        q2 = tAni.queue;
      } else {
        q2 = tAni.current;
      }
      q2.push(this);
      if (elementOrCollection(_p.target)) {
        _p.target.cy().addToAnimationPool(_p.target);
      }
      _p.hooked = true;
    }
    return this;
  },
  play: function play() {
    var _p = this._private;
    if (_p.progress === 1) {
      _p.progress = 0;
    }
    _p.playing = true;
    _p.started = false;
    _p.stopped = false;
    this.hook();
    return this;
  },
  playing: function playing() {
    return this._private.playing;
  },
  apply: function apply() {
    var _p = this._private;
    _p.applying = true;
    _p.started = false;
    _p.stopped = false;
    this.hook();
    return this;
  },
  applying: function applying() {
    return this._private.applying;
  },
  pause: function pause() {
    var _p = this._private;
    _p.playing = false;
    _p.started = false;
    return this;
  },
  stop: function stop() {
    var _p = this._private;
    _p.playing = false;
    _p.started = false;
    _p.stopped = true;
    return this;
  },
  rewind: function rewind() {
    return this.progress(0);
  },
  fastforward: function fastforward() {
    return this.progress(1);
  },
  time: function time(t) {
    var _p = this._private;
    if (t === void 0) {
      return _p.progress * _p.duration;
    } else {
      return this.progress(t / _p.duration);
    }
  },
  progress: function progress(p3) {
    var _p = this._private;
    var wasPlaying = _p.playing;
    if (p3 === void 0) {
      return _p.progress;
    } else {
      if (wasPlaying) {
        this.pause();
      }
      _p.progress = p3;
      _p.started = false;
      if (wasPlaying) {
        this.play();
      }
    }
    return this;
  },
  completed: function completed() {
    return this._private.progress === 1;
  },
  reverse: function reverse() {
    var _p = this._private;
    var wasPlaying = _p.playing;
    if (wasPlaying) {
      this.pause();
    }
    _p.progress = 1 - _p.progress;
    _p.started = false;
    var swap = function swap2(a2, b2) {
      var _pa = _p[a2];
      if (_pa == null) {
        return;
      }
      _p[a2] = _p[b2];
      _p[b2] = _pa;
    };
    swap("zoom", "startZoom");
    swap("pan", "startPan");
    swap("position", "startPosition");
    if (_p.style) {
      for (var i2 = 0; i2 < _p.style.length; i2++) {
        var prop = _p.style[i2];
        var name = prop.name;
        var startStyleProp = _p.startStyle[name];
        _p.startStyle[name] = prop;
        _p.style[i2] = startStyleProp;
      }
    }
    if (wasPlaying) {
      this.play();
    }
    return this;
  },
  promise: function promise3(type2) {
    var _p = this._private;
    var arr;
    switch (type2) {
      case "frame":
        arr = _p.frames;
        break;
      default:
      case "complete":
      case "completed":
        arr = _p.completes;
    }
    return new Promise$1(function(resolve2, reject2) {
      arr.push(function() {
        resolve2();
      });
    });
  }
});
anifn.complete = anifn.completed;
anifn.run = anifn.play;
anifn.running = anifn.playing;
var define$3 = {
  animated: function animated() {
    return function animatedImpl() {
      var self2 = this;
      var selfIsArrayLike = self2.length !== void 0;
      var all = selfIsArrayLike ? self2 : [self2];
      var cy = this._private.cy || this;
      if (!cy.styleEnabled()) {
        return false;
      }
      var ele = all[0];
      if (ele) {
        return ele._private.animation.current.length > 0;
      }
    };
  },
  // animated
  clearQueue: function clearQueue() {
    return function clearQueueImpl() {
      var self2 = this;
      var selfIsArrayLike = self2.length !== void 0;
      var all = selfIsArrayLike ? self2 : [self2];
      var cy = this._private.cy || this;
      if (!cy.styleEnabled()) {
        return this;
      }
      for (var i2 = 0; i2 < all.length; i2++) {
        var ele = all[i2];
        ele._private.animation.queue = [];
      }
      return this;
    };
  },
  // clearQueue
  delay: function delay() {
    return function delayImpl(time2, complete) {
      var cy = this._private.cy || this;
      if (!cy.styleEnabled()) {
        return this;
      }
      return this.animate({
        delay: time2,
        duration: time2,
        complete
      });
    };
  },
  // delay
  delayAnimation: function delayAnimation() {
    return function delayAnimationImpl(time2, complete) {
      var cy = this._private.cy || this;
      if (!cy.styleEnabled()) {
        return this;
      }
      return this.animation({
        delay: time2,
        duration: time2,
        complete
      });
    };
  },
  // delay
  animation: function animation() {
    return function animationImpl(properties, params) {
      var self2 = this;
      var selfIsArrayLike = self2.length !== void 0;
      var all = selfIsArrayLike ? self2 : [self2];
      var cy = this._private.cy || this;
      var isCore = !selfIsArrayLike;
      var isEles = !isCore;
      if (!cy.styleEnabled()) {
        return this;
      }
      var style3 = cy.style();
      properties = extend({}, properties, params);
      var propertiesEmpty = Object.keys(properties).length === 0;
      if (propertiesEmpty) {
        return new Animation(all[0], properties);
      }
      if (properties.duration === void 0) {
        properties.duration = 400;
      }
      switch (properties.duration) {
        case "slow":
          properties.duration = 600;
          break;
        case "fast":
          properties.duration = 200;
          break;
      }
      if (isEles) {
        properties.style = style3.getPropsList(properties.style || properties.css);
        properties.css = void 0;
      }
      if (isEles && properties.renderedPosition != null) {
        var rpos = properties.renderedPosition;
        var pan2 = cy.pan();
        var zoom2 = cy.zoom();
        properties.position = renderedToModelPosition(rpos, zoom2, pan2);
      }
      if (isCore && properties.panBy != null) {
        var panBy2 = properties.panBy;
        var cyPan = cy.pan();
        properties.pan = {
          x: cyPan.x + panBy2.x,
          y: cyPan.y + panBy2.y
        };
      }
      var center2 = properties.center || properties.centre;
      if (isCore && center2 != null) {
        var centerPan = cy.getCenterPan(center2.eles, properties.zoom);
        if (centerPan != null) {
          properties.pan = centerPan;
        }
      }
      if (isCore && properties.fit != null) {
        var fit2 = properties.fit;
        var fitVp = cy.getFitViewport(fit2.eles || fit2.boundingBox, fit2.padding);
        if (fitVp != null) {
          properties.pan = fitVp.pan;
          properties.zoom = fitVp.zoom;
        }
      }
      if (isCore && plainObject(properties.zoom)) {
        var vp = cy.getZoomedViewport(properties.zoom);
        if (vp != null) {
          if (vp.zoomed) {
            properties.zoom = vp.zoom;
          }
          if (vp.panned) {
            properties.pan = vp.pan;
          }
        } else {
          properties.zoom = null;
        }
      }
      return new Animation(all[0], properties);
    };
  },
  // animate
  animate: function animate() {
    return function animateImpl(properties, params) {
      var self2 = this;
      var selfIsArrayLike = self2.length !== void 0;
      var all = selfIsArrayLike ? self2 : [self2];
      var cy = this._private.cy || this;
      if (!cy.styleEnabled()) {
        return this;
      }
      if (params) {
        properties = extend({}, properties, params);
      }
      for (var i2 = 0; i2 < all.length; i2++) {
        var ele = all[i2];
        var queue = ele.animated() && (properties.queue === void 0 || properties.queue);
        var ani = ele.animation(properties, queue ? {
          queue: true
        } : void 0);
        ani.play();
      }
      return this;
    };
  },
  // animate
  stop: function stop2() {
    return function stopImpl(clearQueue2, jumpToEnd) {
      var self2 = this;
      var selfIsArrayLike = self2.length !== void 0;
      var all = selfIsArrayLike ? self2 : [self2];
      var cy = this._private.cy || this;
      if (!cy.styleEnabled()) {
        return this;
      }
      for (var i2 = 0; i2 < all.length; i2++) {
        var ele = all[i2];
        var _p = ele._private;
        var anis = _p.animation.current;
        for (var j2 = 0; j2 < anis.length; j2++) {
          var ani = anis[j2];
          var ani_p = ani._private;
          if (jumpToEnd) {
            ani_p.duration = 0;
          }
        }
        if (clearQueue2) {
          _p.animation.queue = [];
        }
        if (!jumpToEnd) {
          _p.animation.current = [];
        }
      }
      cy.notify("draw");
      return this;
    };
  }
  // stop
};
var isArray_1;
var hasRequiredIsArray;
function requireIsArray() {
  if (hasRequiredIsArray) return isArray_1;
  hasRequiredIsArray = 1;
  var isArray = Array.isArray;
  isArray_1 = isArray;
  return isArray_1;
}
var _isKey;
var hasRequired_isKey;
function require_isKey() {
  if (hasRequired_isKey) return _isKey;
  hasRequired_isKey = 1;
  var isArray = requireIsArray(), isSymbol = requireIsSymbol();
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
  function isKey(value, object3) {
    if (isArray(value)) {
      return false;
    }
    var type2 = typeof value;
    if (type2 == "number" || type2 == "symbol" || type2 == "boolean" || value == null || isSymbol(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object3 != null && value in Object(object3);
  }
  _isKey = isKey;
  return _isKey;
}
var isFunction_1;
var hasRequiredIsFunction;
function requireIsFunction() {
  if (hasRequiredIsFunction) return isFunction_1;
  hasRequiredIsFunction = 1;
  var baseGetTag = require_baseGetTag(), isObject = requireIsObject();
  var asyncTag = "[object AsyncFunction]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
  function isFunction2(value) {
    if (!isObject(value)) {
      return false;
    }
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }
  isFunction_1 = isFunction2;
  return isFunction_1;
}
var _coreJsData;
var hasRequired_coreJsData;
function require_coreJsData() {
  if (hasRequired_coreJsData) return _coreJsData;
  hasRequired_coreJsData = 1;
  var root = require_root();
  var coreJsData = root["__core-js_shared__"];
  _coreJsData = coreJsData;
  return _coreJsData;
}
var _isMasked;
var hasRequired_isMasked;
function require_isMasked() {
  if (hasRequired_isMasked) return _isMasked;
  hasRequired_isMasked = 1;
  var coreJsData = require_coreJsData();
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  _isMasked = isMasked;
  return _isMasked;
}
var _toSource;
var hasRequired_toSource;
function require_toSource() {
  if (hasRequired_toSource) return _toSource;
  hasRequired_toSource = 1;
  var funcProto = Function.prototype;
  var funcToString = funcProto.toString;
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {
      }
      try {
        return func + "";
      } catch (e) {
      }
    }
    return "";
  }
  _toSource = toSource;
  return _toSource;
}
var _baseIsNative;
var hasRequired_baseIsNative;
function require_baseIsNative() {
  if (hasRequired_baseIsNative) return _baseIsNative;
  hasRequired_baseIsNative = 1;
  var isFunction2 = requireIsFunction(), isMasked = require_isMasked(), isObject = requireIsObject(), toSource = require_toSource();
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var funcProto = Function.prototype, objectProto = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var reIsNative = RegExp(
    "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
  );
  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }
  _baseIsNative = baseIsNative;
  return _baseIsNative;
}
var _getValue;
var hasRequired_getValue;
function require_getValue() {
  if (hasRequired_getValue) return _getValue;
  hasRequired_getValue = 1;
  function getValue2(object3, key) {
    return object3 == null ? void 0 : object3[key];
  }
  _getValue = getValue2;
  return _getValue;
}
var _getNative;
var hasRequired_getNative;
function require_getNative() {
  if (hasRequired_getNative) return _getNative;
  hasRequired_getNative = 1;
  var baseIsNative = require_baseIsNative(), getValue2 = require_getValue();
  function getNative(object3, key) {
    var value = getValue2(object3, key);
    return baseIsNative(value) ? value : void 0;
  }
  _getNative = getNative;
  return _getNative;
}
var _nativeCreate;
var hasRequired_nativeCreate;
function require_nativeCreate() {
  if (hasRequired_nativeCreate) return _nativeCreate;
  hasRequired_nativeCreate = 1;
  var getNative = require_getNative();
  var nativeCreate = getNative(Object, "create");
  _nativeCreate = nativeCreate;
  return _nativeCreate;
}
var _hashClear;
var hasRequired_hashClear;
function require_hashClear() {
  if (hasRequired_hashClear) return _hashClear;
  hasRequired_hashClear = 1;
  var nativeCreate = require_nativeCreate();
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }
  _hashClear = hashClear;
  return _hashClear;
}
var _hashDelete;
var hasRequired_hashDelete;
function require_hashDelete() {
  if (hasRequired_hashDelete) return _hashDelete;
  hasRequired_hashDelete = 1;
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }
  _hashDelete = hashDelete;
  return _hashDelete;
}
var _hashGet;
var hasRequired_hashGet;
function require_hashGet() {
  if (hasRequired_hashGet) return _hashGet;
  hasRequired_hashGet = 1;
  var nativeCreate = require_nativeCreate();
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  function hashGet(key) {
    var data4 = this.__data__;
    if (nativeCreate) {
      var result = data4[key];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty.call(data4, key) ? data4[key] : void 0;
  }
  _hashGet = hashGet;
  return _hashGet;
}
var _hashHas;
var hasRequired_hashHas;
function require_hashHas() {
  if (hasRequired_hashHas) return _hashHas;
  hasRequired_hashHas = 1;
  var nativeCreate = require_nativeCreate();
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  function hashHas(key) {
    var data4 = this.__data__;
    return nativeCreate ? data4[key] !== void 0 : hasOwnProperty.call(data4, key);
  }
  _hashHas = hashHas;
  return _hashHas;
}
var _hashSet;
var hasRequired_hashSet;
function require_hashSet() {
  if (hasRequired_hashSet) return _hashSet;
  hasRequired_hashSet = 1;
  var nativeCreate = require_nativeCreate();
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  function hashSet(key, value) {
    var data4 = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data4[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
    return this;
  }
  _hashSet = hashSet;
  return _hashSet;
}
var _Hash;
var hasRequired_Hash;
function require_Hash() {
  if (hasRequired_Hash) return _Hash;
  hasRequired_Hash = 1;
  var hashClear = require_hashClear(), hashDelete = require_hashDelete(), hashGet = require_hashGet(), hashHas = require_hashHas(), hashSet = require_hashSet();
  function Hash(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  Hash.prototype.clear = hashClear;
  Hash.prototype["delete"] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;
  _Hash = Hash;
  return _Hash;
}
var _listCacheClear;
var hasRequired_listCacheClear;
function require_listCacheClear() {
  if (hasRequired_listCacheClear) return _listCacheClear;
  hasRequired_listCacheClear = 1;
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }
  _listCacheClear = listCacheClear;
  return _listCacheClear;
}
var eq_1;
var hasRequiredEq;
function requireEq() {
  if (hasRequiredEq) return eq_1;
  hasRequiredEq = 1;
  function eq2(value, other) {
    return value === other || value !== value && other !== other;
  }
  eq_1 = eq2;
  return eq_1;
}
var _assocIndexOf;
var hasRequired_assocIndexOf;
function require_assocIndexOf() {
  if (hasRequired_assocIndexOf) return _assocIndexOf;
  hasRequired_assocIndexOf = 1;
  var eq2 = requireEq();
  function assocIndexOf(array3, key) {
    var length = array3.length;
    while (length--) {
      if (eq2(array3[length][0], key)) {
        return length;
      }
    }
    return -1;
  }
  _assocIndexOf = assocIndexOf;
  return _assocIndexOf;
}
var _listCacheDelete;
var hasRequired_listCacheDelete;
function require_listCacheDelete() {
  if (hasRequired_listCacheDelete) return _listCacheDelete;
  hasRequired_listCacheDelete = 1;
  var assocIndexOf = require_assocIndexOf();
  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;
  function listCacheDelete(key) {
    var data4 = this.__data__, index = assocIndexOf(data4, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data4.length - 1;
    if (index == lastIndex) {
      data4.pop();
    } else {
      splice.call(data4, index, 1);
    }
    --this.size;
    return true;
  }
  _listCacheDelete = listCacheDelete;
  return _listCacheDelete;
}
var _listCacheGet;
var hasRequired_listCacheGet;
function require_listCacheGet() {
  if (hasRequired_listCacheGet) return _listCacheGet;
  hasRequired_listCacheGet = 1;
  var assocIndexOf = require_assocIndexOf();
  function listCacheGet(key) {
    var data4 = this.__data__, index = assocIndexOf(data4, key);
    return index < 0 ? void 0 : data4[index][1];
  }
  _listCacheGet = listCacheGet;
  return _listCacheGet;
}
var _listCacheHas;
var hasRequired_listCacheHas;
function require_listCacheHas() {
  if (hasRequired_listCacheHas) return _listCacheHas;
  hasRequired_listCacheHas = 1;
  var assocIndexOf = require_assocIndexOf();
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }
  _listCacheHas = listCacheHas;
  return _listCacheHas;
}
var _listCacheSet;
var hasRequired_listCacheSet;
function require_listCacheSet() {
  if (hasRequired_listCacheSet) return _listCacheSet;
  hasRequired_listCacheSet = 1;
  var assocIndexOf = require_assocIndexOf();
  function listCacheSet(key, value) {
    var data4 = this.__data__, index = assocIndexOf(data4, key);
    if (index < 0) {
      ++this.size;
      data4.push([key, value]);
    } else {
      data4[index][1] = value;
    }
    return this;
  }
  _listCacheSet = listCacheSet;
  return _listCacheSet;
}
var _ListCache;
var hasRequired_ListCache;
function require_ListCache() {
  if (hasRequired_ListCache) return _ListCache;
  hasRequired_ListCache = 1;
  var listCacheClear = require_listCacheClear(), listCacheDelete = require_listCacheDelete(), listCacheGet = require_listCacheGet(), listCacheHas = require_listCacheHas(), listCacheSet = require_listCacheSet();
  function ListCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype["delete"] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  _ListCache = ListCache;
  return _ListCache;
}
var _Map;
var hasRequired_Map;
function require_Map() {
  if (hasRequired_Map) return _Map;
  hasRequired_Map = 1;
  var getNative = require_getNative(), root = require_root();
  var Map2 = getNative(root, "Map");
  _Map = Map2;
  return _Map;
}
var _mapCacheClear;
var hasRequired_mapCacheClear;
function require_mapCacheClear() {
  if (hasRequired_mapCacheClear) return _mapCacheClear;
  hasRequired_mapCacheClear = 1;
  var Hash = require_Hash(), ListCache = require_ListCache(), Map2 = require_Map();
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      "hash": new Hash(),
      "map": new (Map2 || ListCache)(),
      "string": new Hash()
    };
  }
  _mapCacheClear = mapCacheClear;
  return _mapCacheClear;
}
var _isKeyable;
var hasRequired_isKeyable;
function require_isKeyable() {
  if (hasRequired_isKeyable) return _isKeyable;
  hasRequired_isKeyable = 1;
  function isKeyable(value) {
    var type2 = typeof value;
    return type2 == "string" || type2 == "number" || type2 == "symbol" || type2 == "boolean" ? value !== "__proto__" : value === null;
  }
  _isKeyable = isKeyable;
  return _isKeyable;
}
var _getMapData;
var hasRequired_getMapData;
function require_getMapData() {
  if (hasRequired_getMapData) return _getMapData;
  hasRequired_getMapData = 1;
  var isKeyable = require_isKeyable();
  function getMapData(map2, key) {
    var data4 = map2.__data__;
    return isKeyable(key) ? data4[typeof key == "string" ? "string" : "hash"] : data4.map;
  }
  _getMapData = getMapData;
  return _getMapData;
}
var _mapCacheDelete;
var hasRequired_mapCacheDelete;
function require_mapCacheDelete() {
  if (hasRequired_mapCacheDelete) return _mapCacheDelete;
  hasRequired_mapCacheDelete = 1;
  var getMapData = require_getMapData();
  function mapCacheDelete(key) {
    var result = getMapData(this, key)["delete"](key);
    this.size -= result ? 1 : 0;
    return result;
  }
  _mapCacheDelete = mapCacheDelete;
  return _mapCacheDelete;
}
var _mapCacheGet;
var hasRequired_mapCacheGet;
function require_mapCacheGet() {
  if (hasRequired_mapCacheGet) return _mapCacheGet;
  hasRequired_mapCacheGet = 1;
  var getMapData = require_getMapData();
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }
  _mapCacheGet = mapCacheGet;
  return _mapCacheGet;
}
var _mapCacheHas;
var hasRequired_mapCacheHas;
function require_mapCacheHas() {
  if (hasRequired_mapCacheHas) return _mapCacheHas;
  hasRequired_mapCacheHas = 1;
  var getMapData = require_getMapData();
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }
  _mapCacheHas = mapCacheHas;
  return _mapCacheHas;
}
var _mapCacheSet;
var hasRequired_mapCacheSet;
function require_mapCacheSet() {
  if (hasRequired_mapCacheSet) return _mapCacheSet;
  hasRequired_mapCacheSet = 1;
  var getMapData = require_getMapData();
  function mapCacheSet(key, value) {
    var data4 = getMapData(this, key), size3 = data4.size;
    data4.set(key, value);
    this.size += data4.size == size3 ? 0 : 1;
    return this;
  }
  _mapCacheSet = mapCacheSet;
  return _mapCacheSet;
}
var _MapCache;
var hasRequired_MapCache;
function require_MapCache() {
  if (hasRequired_MapCache) return _MapCache;
  hasRequired_MapCache = 1;
  var mapCacheClear = require_mapCacheClear(), mapCacheDelete = require_mapCacheDelete(), mapCacheGet = require_mapCacheGet(), mapCacheHas = require_mapCacheHas(), mapCacheSet = require_mapCacheSet();
  function MapCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype["delete"] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  _MapCache = MapCache;
  return _MapCache;
}
var memoize_1;
var hasRequiredMemoize;
function requireMemoize() {
  if (hasRequiredMemoize) return memoize_1;
  hasRequiredMemoize = 1;
  var MapCache = require_MapCache();
  var FUNC_ERROR_TEXT = "Expected a function";
  function memoize3(func, resolver3) {
    if (typeof func != "function" || resolver3 != null && typeof resolver3 != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function() {
      var args = arguments, key = resolver3 ? resolver3.apply(this, args) : args[0], cache3 = memoized.cache;
      if (cache3.has(key)) {
        return cache3.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache3.set(key, result) || cache3;
      return result;
    };
    memoized.cache = new (memoize3.Cache || MapCache)();
    return memoized;
  }
  memoize3.Cache = MapCache;
  memoize_1 = memoize3;
  return memoize_1;
}
var _memoizeCapped;
var hasRequired_memoizeCapped;
function require_memoizeCapped() {
  if (hasRequired_memoizeCapped) return _memoizeCapped;
  hasRequired_memoizeCapped = 1;
  var memoize3 = requireMemoize();
  var MAX_MEMOIZE_SIZE = 500;
  function memoizeCapped(func) {
    var result = memoize3(func, function(key) {
      if (cache3.size === MAX_MEMOIZE_SIZE) {
        cache3.clear();
      }
      return key;
    });
    var cache3 = result.cache;
    return result;
  }
  _memoizeCapped = memoizeCapped;
  return _memoizeCapped;
}
var _stringToPath;
var hasRequired_stringToPath;
function require_stringToPath() {
  if (hasRequired_stringToPath) return _stringToPath;
  hasRequired_stringToPath = 1;
  var memoizeCapped = require_memoizeCapped();
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = memoizeCapped(function(string3) {
    var result = [];
    if (string3.charCodeAt(0) === 46) {
      result.push("");
    }
    string3.replace(rePropName, function(match2, number3, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, "$1") : number3 || match2);
    });
    return result;
  });
  _stringToPath = stringToPath;
  return _stringToPath;
}
var _arrayMap;
var hasRequired_arrayMap;
function require_arrayMap() {
  if (hasRequired_arrayMap) return _arrayMap;
  hasRequired_arrayMap = 1;
  function arrayMap(array3, iteratee) {
    var index = -1, length = array3 == null ? 0 : array3.length, result = Array(length);
    while (++index < length) {
      result[index] = iteratee(array3[index], index, array3);
    }
    return result;
  }
  _arrayMap = arrayMap;
  return _arrayMap;
}
var _baseToString;
var hasRequired_baseToString;
function require_baseToString() {
  if (hasRequired_baseToString) return _baseToString;
  hasRequired_baseToString = 1;
  var Symbol2 = require_Symbol(), arrayMap = require_arrayMap(), isArray = requireIsArray(), isSymbol = requireIsSymbol();
  var symbolProto = Symbol2 ? Symbol2.prototype : void 0, symbolToString = symbolProto ? symbolProto.toString : void 0;
  function baseToString(value) {
    if (typeof value == "string") {
      return value;
    }
    if (isArray(value)) {
      return arrayMap(value, baseToString) + "";
    }
    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : "";
    }
    var result = value + "";
    return result == "0" && 1 / value == -Infinity ? "-0" : result;
  }
  _baseToString = baseToString;
  return _baseToString;
}
var toString_1;
var hasRequiredToString;
function requireToString() {
  if (hasRequiredToString) return toString_1;
  hasRequiredToString = 1;
  var baseToString = require_baseToString();
  function toString3(value) {
    return value == null ? "" : baseToString(value);
  }
  toString_1 = toString3;
  return toString_1;
}
var _castPath;
var hasRequired_castPath;
function require_castPath() {
  if (hasRequired_castPath) return _castPath;
  hasRequired_castPath = 1;
  var isArray = requireIsArray(), isKey = require_isKey(), stringToPath = require_stringToPath(), toString3 = requireToString();
  function castPath(value, object3) {
    if (isArray(value)) {
      return value;
    }
    return isKey(value, object3) ? [value] : stringToPath(toString3(value));
  }
  _castPath = castPath;
  return _castPath;
}
var _toKey;
var hasRequired_toKey;
function require_toKey() {
  if (hasRequired_toKey) return _toKey;
  hasRequired_toKey = 1;
  var isSymbol = requireIsSymbol();
  function toKey(value) {
    if (typeof value == "string" || isSymbol(value)) {
      return value;
    }
    var result = value + "";
    return result == "0" && 1 / value == -Infinity ? "-0" : result;
  }
  _toKey = toKey;
  return _toKey;
}
var _baseGet;
var hasRequired_baseGet;
function require_baseGet() {
  if (hasRequired_baseGet) return _baseGet;
  hasRequired_baseGet = 1;
  var castPath = require_castPath(), toKey = require_toKey();
  function baseGet(object3, path) {
    path = castPath(path, object3);
    var index = 0, length = path.length;
    while (object3 != null && index < length) {
      object3 = object3[toKey(path[index++])];
    }
    return index && index == length ? object3 : void 0;
  }
  _baseGet = baseGet;
  return _baseGet;
}
var get_1;
var hasRequiredGet;
function requireGet() {
  if (hasRequiredGet) return get_1;
  hasRequiredGet = 1;
  var baseGet = require_baseGet();
  function get2(object3, path, defaultValue) {
    var result = object3 == null ? void 0 : baseGet(object3, path);
    return result === void 0 ? defaultValue : result;
  }
  get_1 = get2;
  return get_1;
}
var getExports = requireGet();
var get = getDefaultExportFromCjs(getExports);
var _defineProperty;
var hasRequired_defineProperty;
function require_defineProperty() {
  if (hasRequired_defineProperty) return _defineProperty;
  hasRequired_defineProperty = 1;
  var getNative = require_getNative();
  var defineProperty = function() {
    try {
      var func = getNative(Object, "defineProperty");
      func({}, "", {});
      return func;
    } catch (e) {
    }
  }();
  _defineProperty = defineProperty;
  return _defineProperty;
}
var _baseAssignValue;
var hasRequired_baseAssignValue;
function require_baseAssignValue() {
  if (hasRequired_baseAssignValue) return _baseAssignValue;
  hasRequired_baseAssignValue = 1;
  var defineProperty = require_defineProperty();
  function baseAssignValue(object3, key, value) {
    if (key == "__proto__" && defineProperty) {
      defineProperty(object3, key, {
        "configurable": true,
        "enumerable": true,
        "value": value,
        "writable": true
      });
    } else {
      object3[key] = value;
    }
  }
  _baseAssignValue = baseAssignValue;
  return _baseAssignValue;
}
var _assignValue;
var hasRequired_assignValue;
function require_assignValue() {
  if (hasRequired_assignValue) return _assignValue;
  hasRequired_assignValue = 1;
  var baseAssignValue = require_baseAssignValue(), eq2 = requireEq();
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  function assignValue(object3, key, value) {
    var objValue = object3[key];
    if (!(hasOwnProperty.call(object3, key) && eq2(objValue, value)) || value === void 0 && !(key in object3)) {
      baseAssignValue(object3, key, value);
    }
  }
  _assignValue = assignValue;
  return _assignValue;
}
var _isIndex;
var hasRequired_isIndex;
function require_isIndex() {
  if (hasRequired_isIndex) return _isIndex;
  hasRequired_isIndex = 1;
  var MAX_SAFE_INTEGER = 9007199254740991;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  function isIndex(value, length) {
    var type2 = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type2 == "number" || type2 != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
  }
  _isIndex = isIndex;
  return _isIndex;
}
var _baseSet;
var hasRequired_baseSet;
function require_baseSet() {
  if (hasRequired_baseSet) return _baseSet;
  hasRequired_baseSet = 1;
  var assignValue = require_assignValue(), castPath = require_castPath(), isIndex = require_isIndex(), isObject = requireIsObject(), toKey = require_toKey();
  function baseSet(object3, path, value, customizer) {
    if (!isObject(object3)) {
      return object3;
    }
    path = castPath(path, object3);
    var index = -1, length = path.length, lastIndex = length - 1, nested = object3;
    while (nested != null && ++index < length) {
      var key = toKey(path[index]), newValue = value;
      if (key === "__proto__" || key === "constructor" || key === "prototype") {
        return object3;
      }
      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : void 0;
        if (newValue === void 0) {
          newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
        }
      }
      assignValue(nested, key, newValue);
      nested = nested[key];
    }
    return object3;
  }
  _baseSet = baseSet;
  return _baseSet;
}
var set_1;
var hasRequiredSet;
function requireSet() {
  if (hasRequiredSet) return set_1;
  hasRequiredSet = 1;
  var baseSet = require_baseSet();
  function set2(object3, path, value) {
    return object3 == null ? object3 : baseSet(object3, path, value);
  }
  set_1 = set2;
  return set_1;
}
var setExports = requireSet();
var set = getDefaultExportFromCjs(setExports);
var _copyArray;
var hasRequired_copyArray;
function require_copyArray() {
  if (hasRequired_copyArray) return _copyArray;
  hasRequired_copyArray = 1;
  function copyArray3(source, array3) {
    var index = -1, length = source.length;
    array3 || (array3 = Array(length));
    while (++index < length) {
      array3[index] = source[index];
    }
    return array3;
  }
  _copyArray = copyArray3;
  return _copyArray;
}
var toPath_1;
var hasRequiredToPath;
function requireToPath() {
  if (hasRequiredToPath) return toPath_1;
  hasRequiredToPath = 1;
  var arrayMap = require_arrayMap(), copyArray3 = require_copyArray(), isArray = requireIsArray(), isSymbol = requireIsSymbol(), stringToPath = require_stringToPath(), toKey = require_toKey(), toString3 = requireToString();
  function toPath2(value) {
    if (isArray(value)) {
      return arrayMap(value, toKey);
    }
    return isSymbol(value) ? [value] : copyArray3(stringToPath(toString3(value)));
  }
  toPath_1 = toPath2;
  return toPath_1;
}
var toPathExports = requireToPath();
var toPath = getDefaultExportFromCjs(toPathExports);
var define$2 = {
  // access data field
  data: function data(params) {
    var defaults4 = {
      field: "data",
      bindingEvent: "data",
      allowBinding: false,
      allowSetting: false,
      allowGetting: false,
      settingEvent: "data",
      settingTriggersEvent: false,
      triggerFnName: "trigger",
      immutableKeys: {},
      // key => true if immutable
      updateStyle: false,
      beforeGet: function beforeGet2(self2) {
      },
      beforeSet: function beforeSet3(self2, obj) {
      },
      onSet: function onSet3(self2) {
      },
      canSet: function canSet2(self2) {
        return true;
      }
    };
    params = extend({}, defaults4, params);
    return function dataImpl(name, value) {
      var p3 = params;
      var self2 = this;
      var selfIsArrayLike = self2.length !== void 0;
      var all = selfIsArrayLike ? self2 : [self2];
      var single = selfIsArrayLike ? self2[0] : self2;
      if (string(name)) {
        var isPathLike = name.indexOf(".") !== -1;
        var path = isPathLike && toPath(name);
        if (p3.allowGetting && value === void 0) {
          var ret;
          if (single) {
            p3.beforeGet(single);
            if (path && single._private[p3.field][name] === void 0) {
              ret = get(single._private[p3.field], path);
            } else {
              ret = single._private[p3.field][name];
            }
          }
          return ret;
        } else if (p3.allowSetting && value !== void 0) {
          var valid2 = !p3.immutableKeys[name];
          if (valid2) {
            var change = _defineProperty$1({}, name, value);
            p3.beforeSet(self2, change);
            for (var i2 = 0, l2 = all.length; i2 < l2; i2++) {
              var ele = all[i2];
              if (p3.canSet(ele)) {
                if (path && single._private[p3.field][name] === void 0) {
                  set(ele._private[p3.field], path, value);
                } else {
                  ele._private[p3.field][name] = value;
                }
              }
            }
            if (p3.updateStyle) {
              self2.updateStyle();
            }
            p3.onSet(self2);
            if (p3.settingTriggersEvent) {
              self2[p3.triggerFnName](p3.settingEvent);
            }
          }
        }
      } else if (p3.allowSetting && plainObject(name)) {
        var obj = name;
        var k2, v3;
        var keys2 = Object.keys(obj);
        p3.beforeSet(self2, obj);
        for (var _i2 = 0; _i2 < keys2.length; _i2++) {
          k2 = keys2[_i2];
          v3 = obj[k2];
          var _valid = !p3.immutableKeys[k2];
          if (_valid) {
            for (var j2 = 0; j2 < all.length; j2++) {
              var _ele = all[j2];
              if (p3.canSet(_ele)) {
                _ele._private[p3.field][k2] = v3;
              }
            }
          }
        }
        if (p3.updateStyle) {
          self2.updateStyle();
        }
        p3.onSet(self2);
        if (p3.settingTriggersEvent) {
          self2[p3.triggerFnName](p3.settingEvent);
        }
      } else if (p3.allowBinding && fn$6(name)) {
        var fn4 = name;
        self2.on(p3.bindingEvent, fn4);
      } else if (p3.allowGetting && name === void 0) {
        var _ret;
        if (single) {
          p3.beforeGet(single);
          _ret = single._private[p3.field];
        }
        return _ret;
      }
      return self2;
    };
  },
  // data
  // remove data field
  removeData: function removeData(params) {
    var defaults4 = {
      field: "data",
      event: "data",
      triggerFnName: "trigger",
      triggerEvent: false,
      immutableKeys: {}
      // key => true if immutable
    };
    params = extend({}, defaults4, params);
    return function removeDataImpl(names) {
      var p3 = params;
      var self2 = this;
      var selfIsArrayLike = self2.length !== void 0;
      var all = selfIsArrayLike ? self2 : [self2];
      if (string(names)) {
        var keys2 = names.split(/\s+/);
        var l2 = keys2.length;
        for (var i2 = 0; i2 < l2; i2++) {
          var key = keys2[i2];
          if (emptyString(key)) {
            continue;
          }
          var valid2 = !p3.immutableKeys[key];
          if (valid2) {
            for (var i_a = 0, l_a = all.length; i_a < l_a; i_a++) {
              all[i_a]._private[p3.field][key] = void 0;
            }
          }
        }
        if (p3.triggerEvent) {
          self2[p3.triggerFnName](p3.event);
        }
      } else if (names === void 0) {
        for (var _i_a = 0, _l_a = all.length; _i_a < _l_a; _i_a++) {
          var _privateFields = all[_i_a]._private[p3.field];
          var _keys = Object.keys(_privateFields);
          for (var _i2 = 0; _i2 < _keys.length; _i2++) {
            var _key = _keys[_i2];
            var validKeyToDelete = !p3.immutableKeys[_key];
            if (validKeyToDelete) {
              _privateFields[_key] = void 0;
            }
          }
        }
        if (p3.triggerEvent) {
          self2[p3.triggerFnName](p3.event);
        }
      }
      return self2;
    };
  }
  // removeData
};
var define$1 = {
  eventAliasesOn: function eventAliasesOn(proto) {
    var p3 = proto;
    p3.addListener = p3.listen = p3.bind = p3.on;
    p3.unlisten = p3.unbind = p3.off = p3.removeListener;
    p3.trigger = p3.emit;
    p3.pon = p3.promiseOn = function(events, selector) {
      var self2 = this;
      var args = Array.prototype.slice.call(arguments, 0);
      return new Promise$1(function(resolve2, reject2) {
        var callback = function callback2(e) {
          self2.off.apply(self2, offArgs);
          resolve2(e);
        };
        var onArgs = args.concat([callback]);
        var offArgs = onArgs.concat([]);
        self2.on.apply(self2, onArgs);
      });
    };
  }
};
var define2 = {};
[define$3, define$2, define$1].forEach(function(m2) {
  extend(define2, m2);
});
var elesfn$i = {
  animate: define2.animate(),
  animation: define2.animation(),
  animated: define2.animated(),
  clearQueue: define2.clearQueue(),
  delay: define2.delay(),
  delayAnimation: define2.delayAnimation(),
  stop: define2.stop()
};
var elesfn$h = {
  classes: function classes(_classes) {
    var self2 = this;
    if (_classes === void 0) {
      var ret = [];
      self2[0]._private.classes.forEach(function(cls2) {
        return ret.push(cls2);
      });
      return ret;
    } else if (!array(_classes)) {
      _classes = (_classes || "").match(/\S+/g) || [];
    }
    var changed = [];
    var classesSet = new Set$1(_classes);
    for (var j2 = 0; j2 < self2.length; j2++) {
      var ele = self2[j2];
      var _p = ele._private;
      var eleClasses = _p.classes;
      var changedEle = false;
      for (var i2 = 0; i2 < _classes.length; i2++) {
        var cls = _classes[i2];
        var eleHasClass = eleClasses.has(cls);
        if (!eleHasClass) {
          changedEle = true;
          break;
        }
      }
      if (!changedEle) {
        changedEle = eleClasses.size !== _classes.length;
      }
      if (changedEle) {
        _p.classes = classesSet;
        changed.push(ele);
      }
    }
    if (changed.length > 0) {
      this.spawn(changed).updateStyle().emit("class");
    }
    return self2;
  },
  addClass: function addClass(classes2) {
    return this.toggleClass(classes2, true);
  },
  hasClass: function hasClass(className) {
    var ele = this[0];
    return ele != null && ele._private.classes.has(className);
  },
  toggleClass: function toggleClass(classes2, toggle) {
    if (!array(classes2)) {
      classes2 = classes2.match(/\S+/g) || [];
    }
    var self2 = this;
    var toggleUndefd = toggle === void 0;
    var changed = [];
    for (var i2 = 0, il2 = self2.length; i2 < il2; i2++) {
      var ele = self2[i2];
      var eleClasses = ele._private.classes;
      var changedEle = false;
      for (var j2 = 0; j2 < classes2.length; j2++) {
        var cls = classes2[j2];
        var hasClass2 = eleClasses.has(cls);
        var changedNow = false;
        if (toggle || toggleUndefd && !hasClass2) {
          eleClasses.add(cls);
          changedNow = true;
        } else if (!toggle || toggleUndefd && hasClass2) {
          eleClasses["delete"](cls);
          changedNow = true;
        }
        if (!changedEle && changedNow) {
          changed.push(ele);
          changedEle = true;
        }
      }
    }
    if (changed.length > 0) {
      this.spawn(changed).updateStyle().emit("class");
    }
    return self2;
  },
  removeClass: function removeClass(classes2) {
    return this.toggleClass(classes2, false);
  },
  flashClass: function flashClass(classes2, duration) {
    var self2 = this;
    if (duration == null) {
      duration = 250;
    } else if (duration === 0) {
      return self2;
    }
    self2.addClass(classes2);
    setTimeout(function() {
      self2.removeClass(classes2);
    }, duration);
    return self2;
  }
};
elesfn$h.className = elesfn$h.classNames = elesfn$h.classes;
var tokens = {
  metaChar: "[\\!\\\"\\#\\$\\%\\&\\'\\(\\)\\*\\+\\,\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\]\\^\\`\\{\\|\\}\\~]",
  // chars we need to escape in let names, etc
  comparatorOp: "=|\\!=|>|>=|<|<=|\\$=|\\^=|\\*=",
  // binary comparison op (used in data selectors)
  boolOp: "\\?|\\!|\\^",
  // boolean (unary) operators (used in data selectors)
  string: `"(?:\\\\"|[^"])*"|'(?:\\\\'|[^'])*'`,
  // string literals (used in data selectors) -- doublequotes | singlequotes
  number: number2,
  // number literal (used in data selectors) --- e.g. 0.1234, 1234, 12e123
  meta: "degree|indegree|outdegree",
  // allowed metadata fields (i.e. allowed functions to use from Collection)
  separator: "\\s*,\\s*",
  // queries are separated by commas, e.g. edge[foo = 'bar'], node.someClass
  descendant: "\\s+",
  child: "\\s+>\\s+",
  subject: "\\$",
  group: "node|edge|\\*",
  directedEdge: "\\s+->\\s+",
  undirectedEdge: "\\s+<->\\s+"
};
tokens.variable = "(?:[\\w-.]|(?:\\\\" + tokens.metaChar + "))+";
tokens.className = "(?:[\\w-]|(?:\\\\" + tokens.metaChar + "))+";
tokens.value = tokens.string + "|" + tokens.number;
tokens.id = tokens.variable;
(function() {
  var ops, op, i2;
  ops = tokens.comparatorOp.split("|");
  for (i2 = 0; i2 < ops.length; i2++) {
    op = ops[i2];
    tokens.comparatorOp += "|@" + op;
  }
  ops = tokens.comparatorOp.split("|");
  for (i2 = 0; i2 < ops.length; i2++) {
    op = ops[i2];
    if (op.indexOf("!") >= 0) {
      continue;
    }
    if (op === "=") {
      continue;
    }
    tokens.comparatorOp += "|\\!" + op;
  }
})();
var newQuery = function newQuery2() {
  return {
    checks: []
  };
};
var Type = {
  /** E.g. node */
  GROUP: 0,
  /** A collection of elements */
  COLLECTION: 1,
  /** A filter(ele) function */
  FILTER: 2,
  /** E.g. [foo > 1] */
  DATA_COMPARE: 3,
  /** E.g. [foo] */
  DATA_EXIST: 4,
  /** E.g. [?foo] */
  DATA_BOOL: 5,
  /** E.g. [[degree > 2]] */
  META_COMPARE: 6,
  /** E.g. :selected */
  STATE: 7,
  /** E.g. #foo */
  ID: 8,
  /** E.g. .foo */
  CLASS: 9,
  /** E.g. #foo <-> #bar */
  UNDIRECTED_EDGE: 10,
  /** E.g. #foo -> #bar */
  DIRECTED_EDGE: 11,
  /** E.g. $#foo -> #bar */
  NODE_SOURCE: 12,
  /** E.g. #foo -> $#bar */
  NODE_TARGET: 13,
  /** E.g. $#foo <-> #bar */
  NODE_NEIGHBOR: 14,
  /** E.g. #foo > #bar */
  CHILD: 15,
  /** E.g. #foo #bar */
  DESCENDANT: 16,
  /** E.g. $#foo > #bar */
  PARENT: 17,
  /** E.g. $#foo #bar */
  ANCESTOR: 18,
  /** E.g. #foo > $bar > #baz */
  COMPOUND_SPLIT: 19,
  /** Always matches, useful placeholder for subject in `COMPOUND_SPLIT` */
  TRUE: 20
};
var stateSelectors = [{
  selector: ":selected",
  matches: function matches(ele) {
    return ele.selected();
  }
}, {
  selector: ":unselected",
  matches: function matches2(ele) {
    return !ele.selected();
  }
}, {
  selector: ":selectable",
  matches: function matches3(ele) {
    return ele.selectable();
  }
}, {
  selector: ":unselectable",
  matches: function matches4(ele) {
    return !ele.selectable();
  }
}, {
  selector: ":locked",
  matches: function matches5(ele) {
    return ele.locked();
  }
}, {
  selector: ":unlocked",
  matches: function matches6(ele) {
    return !ele.locked();
  }
}, {
  selector: ":visible",
  matches: function matches7(ele) {
    return ele.visible();
  }
}, {
  selector: ":hidden",
  matches: function matches8(ele) {
    return !ele.visible();
  }
}, {
  selector: ":transparent",
  matches: function matches9(ele) {
    return ele.transparent();
  }
}, {
  selector: ":grabbed",
  matches: function matches10(ele) {
    return ele.grabbed();
  }
}, {
  selector: ":free",
  matches: function matches11(ele) {
    return !ele.grabbed();
  }
}, {
  selector: ":removed",
  matches: function matches12(ele) {
    return ele.removed();
  }
}, {
  selector: ":inside",
  matches: function matches13(ele) {
    return !ele.removed();
  }
}, {
  selector: ":grabbable",
  matches: function matches14(ele) {
    return ele.grabbable();
  }
}, {
  selector: ":ungrabbable",
  matches: function matches15(ele) {
    return !ele.grabbable();
  }
}, {
  selector: ":animated",
  matches: function matches16(ele) {
    return ele.animated();
  }
}, {
  selector: ":unanimated",
  matches: function matches17(ele) {
    return !ele.animated();
  }
}, {
  selector: ":parent",
  matches: function matches18(ele) {
    return ele.isParent();
  }
}, {
  selector: ":childless",
  matches: function matches19(ele) {
    return ele.isChildless();
  }
}, {
  selector: ":child",
  matches: function matches20(ele) {
    return ele.isChild();
  }
}, {
  selector: ":orphan",
  matches: function matches21(ele) {
    return ele.isOrphan();
  }
}, {
  selector: ":nonorphan",
  matches: function matches22(ele) {
    return ele.isChild();
  }
}, {
  selector: ":compound",
  matches: function matches23(ele) {
    if (ele.isNode()) {
      return ele.isParent();
    } else {
      return ele.source().isParent() || ele.target().isParent();
    }
  }
}, {
  selector: ":loop",
  matches: function matches24(ele) {
    return ele.isLoop();
  }
}, {
  selector: ":simple",
  matches: function matches25(ele) {
    return ele.isSimple();
  }
}, {
  selector: ":active",
  matches: function matches26(ele) {
    return ele.active();
  }
}, {
  selector: ":inactive",
  matches: function matches27(ele) {
    return !ele.active();
  }
}, {
  selector: ":backgrounding",
  matches: function matches28(ele) {
    return ele.backgrounding();
  }
}, {
  selector: ":nonbackgrounding",
  matches: function matches29(ele) {
    return !ele.backgrounding();
  }
}].sort(function(a2, b2) {
  return descending(a2.selector, b2.selector);
});
var lookup = function() {
  var selToFn = {};
  var s2;
  for (var i2 = 0; i2 < stateSelectors.length; i2++) {
    s2 = stateSelectors[i2];
    selToFn[s2.selector] = s2.matches;
  }
  return selToFn;
}();
var stateSelectorMatches = function stateSelectorMatches2(sel, ele) {
  return lookup[sel](ele);
};
var stateSelectorRegex = "(" + stateSelectors.map(function(s2) {
  return s2.selector;
}).join("|") + ")";
var cleanMetaChars = function cleanMetaChars2(str) {
  return str.replace(new RegExp("\\\\(" + tokens.metaChar + ")", "g"), function(match2, $1) {
    return $1;
  });
};
var replaceLastQuery = function replaceLastQuery2(selector, examiningQuery, replacementQuery) {
  selector[selector.length - 1] = replacementQuery;
};
var exprs = [{
  name: "group",
  // just used for identifying when debugging
  query: true,
  regex: "(" + tokens.group + ")",
  populate: function populate(selector, query, _ref) {
    var _ref2 = _slicedToArray(_ref, 1), group2 = _ref2[0];
    query.checks.push({
      type: Type.GROUP,
      value: group2 === "*" ? group2 : group2 + "s"
    });
  }
}, {
  name: "state",
  query: true,
  regex: stateSelectorRegex,
  populate: function populate2(selector, query, _ref3) {
    var _ref4 = _slicedToArray(_ref3, 1), state = _ref4[0];
    query.checks.push({
      type: Type.STATE,
      value: state
    });
  }
}, {
  name: "id",
  query: true,
  regex: "\\#(" + tokens.id + ")",
  populate: function populate3(selector, query, _ref5) {
    var _ref6 = _slicedToArray(_ref5, 1), id2 = _ref6[0];
    query.checks.push({
      type: Type.ID,
      value: cleanMetaChars(id2)
    });
  }
}, {
  name: "className",
  query: true,
  regex: "\\.(" + tokens.className + ")",
  populate: function populate4(selector, query, _ref7) {
    var _ref8 = _slicedToArray(_ref7, 1), className = _ref8[0];
    query.checks.push({
      type: Type.CLASS,
      value: cleanMetaChars(className)
    });
  }
}, {
  name: "dataExists",
  query: true,
  regex: "\\[\\s*(" + tokens.variable + ")\\s*\\]",
  populate: function populate5(selector, query, _ref9) {
    var _ref10 = _slicedToArray(_ref9, 1), variable = _ref10[0];
    query.checks.push({
      type: Type.DATA_EXIST,
      field: cleanMetaChars(variable)
    });
  }
}, {
  name: "dataCompare",
  query: true,
  regex: "\\[\\s*(" + tokens.variable + ")\\s*(" + tokens.comparatorOp + ")\\s*(" + tokens.value + ")\\s*\\]",
  populate: function populate6(selector, query, _ref11) {
    var _ref12 = _slicedToArray(_ref11, 3), variable = _ref12[0], comparatorOp = _ref12[1], value = _ref12[2];
    var valueIsString = new RegExp("^" + tokens.string + "$").exec(value) != null;
    if (valueIsString) {
      value = value.substring(1, value.length - 1);
    } else {
      value = parseFloat(value);
    }
    query.checks.push({
      type: Type.DATA_COMPARE,
      field: cleanMetaChars(variable),
      operator: comparatorOp,
      value
    });
  }
}, {
  name: "dataBool",
  query: true,
  regex: "\\[\\s*(" + tokens.boolOp + ")\\s*(" + tokens.variable + ")\\s*\\]",
  populate: function populate7(selector, query, _ref13) {
    var _ref14 = _slicedToArray(_ref13, 2), boolOp = _ref14[0], variable = _ref14[1];
    query.checks.push({
      type: Type.DATA_BOOL,
      field: cleanMetaChars(variable),
      operator: boolOp
    });
  }
}, {
  name: "metaCompare",
  query: true,
  regex: "\\[\\[\\s*(" + tokens.meta + ")\\s*(" + tokens.comparatorOp + ")\\s*(" + tokens.number + ")\\s*\\]\\]",
  populate: function populate8(selector, query, _ref15) {
    var _ref16 = _slicedToArray(_ref15, 3), meta3 = _ref16[0], comparatorOp = _ref16[1], number3 = _ref16[2];
    query.checks.push({
      type: Type.META_COMPARE,
      field: cleanMetaChars(meta3),
      operator: comparatorOp,
      value: parseFloat(number3)
    });
  }
}, {
  name: "nextQuery",
  separator: true,
  regex: tokens.separator,
  populate: function populate9(selector, query) {
    var currentSubject = selector.currentSubject;
    var edgeCount = selector.edgeCount;
    var compoundCount = selector.compoundCount;
    var lastQ = selector[selector.length - 1];
    if (currentSubject != null) {
      lastQ.subject = currentSubject;
      selector.currentSubject = null;
    }
    lastQ.edgeCount = edgeCount;
    lastQ.compoundCount = compoundCount;
    selector.edgeCount = 0;
    selector.compoundCount = 0;
    var nextQuery = selector[selector.length++] = newQuery();
    return nextQuery;
  }
}, {
  name: "directedEdge",
  separator: true,
  regex: tokens.directedEdge,
  populate: function populate10(selector, query) {
    if (selector.currentSubject == null) {
      var edgeQuery = newQuery();
      var source = query;
      var target = newQuery();
      edgeQuery.checks.push({
        type: Type.DIRECTED_EDGE,
        source,
        target
      });
      replaceLastQuery(selector, query, edgeQuery);
      selector.edgeCount++;
      return target;
    } else {
      var srcTgtQ = newQuery();
      var _source = query;
      var _target = newQuery();
      srcTgtQ.checks.push({
        type: Type.NODE_SOURCE,
        source: _source,
        target: _target
      });
      replaceLastQuery(selector, query, srcTgtQ);
      selector.edgeCount++;
      return _target;
    }
  }
}, {
  name: "undirectedEdge",
  separator: true,
  regex: tokens.undirectedEdge,
  populate: function populate11(selector, query) {
    if (selector.currentSubject == null) {
      var edgeQuery = newQuery();
      var source = query;
      var target = newQuery();
      edgeQuery.checks.push({
        type: Type.UNDIRECTED_EDGE,
        nodes: [source, target]
      });
      replaceLastQuery(selector, query, edgeQuery);
      selector.edgeCount++;
      return target;
    } else {
      var nhoodQ = newQuery();
      var node = query;
      var neighbor = newQuery();
      nhoodQ.checks.push({
        type: Type.NODE_NEIGHBOR,
        node,
        neighbor
      });
      replaceLastQuery(selector, query, nhoodQ);
      return neighbor;
    }
  }
}, {
  name: "child",
  separator: true,
  regex: tokens.child,
  populate: function populate12(selector, query) {
    if (selector.currentSubject == null) {
      var parentChildQuery = newQuery();
      var child = newQuery();
      var parent4 = selector[selector.length - 1];
      parentChildQuery.checks.push({
        type: Type.CHILD,
        parent: parent4,
        child
      });
      replaceLastQuery(selector, query, parentChildQuery);
      selector.compoundCount++;
      return child;
    } else if (selector.currentSubject === query) {
      var compound = newQuery();
      var left = selector[selector.length - 1];
      var right = newQuery();
      var subject = newQuery();
      var _child = newQuery();
      var _parent = newQuery();
      compound.checks.push({
        type: Type.COMPOUND_SPLIT,
        left,
        right,
        subject
      });
      subject.checks = query.checks;
      query.checks = [{
        type: Type.TRUE
      }];
      _parent.checks.push({
        type: Type.TRUE
      });
      right.checks.push({
        type: Type.PARENT,
        // type is swapped on right side queries
        parent: _parent,
        child: _child
        // empty for now
      });
      replaceLastQuery(selector, left, compound);
      selector.currentSubject = subject;
      selector.compoundCount++;
      return _child;
    } else {
      var _parent2 = newQuery();
      var _child2 = newQuery();
      var pcQChecks = [{
        type: Type.PARENT,
        parent: _parent2,
        child: _child2
      }];
      _parent2.checks = query.checks;
      query.checks = pcQChecks;
      selector.compoundCount++;
      return _child2;
    }
  }
}, {
  name: "descendant",
  separator: true,
  regex: tokens.descendant,
  populate: function populate13(selector, query) {
    if (selector.currentSubject == null) {
      var ancChQuery = newQuery();
      var descendant = newQuery();
      var ancestor = selector[selector.length - 1];
      ancChQuery.checks.push({
        type: Type.DESCENDANT,
        ancestor,
        descendant
      });
      replaceLastQuery(selector, query, ancChQuery);
      selector.compoundCount++;
      return descendant;
    } else if (selector.currentSubject === query) {
      var compound = newQuery();
      var left = selector[selector.length - 1];
      var right = newQuery();
      var subject = newQuery();
      var _descendant = newQuery();
      var _ancestor = newQuery();
      compound.checks.push({
        type: Type.COMPOUND_SPLIT,
        left,
        right,
        subject
      });
      subject.checks = query.checks;
      query.checks = [{
        type: Type.TRUE
      }];
      _ancestor.checks.push({
        type: Type.TRUE
      });
      right.checks.push({
        type: Type.ANCESTOR,
        // type is swapped on right side queries
        ancestor: _ancestor,
        descendant: _descendant
        // empty for now
      });
      replaceLastQuery(selector, left, compound);
      selector.currentSubject = subject;
      selector.compoundCount++;
      return _descendant;
    } else {
      var _ancestor2 = newQuery();
      var _descendant2 = newQuery();
      var adQChecks = [{
        type: Type.ANCESTOR,
        ancestor: _ancestor2,
        descendant: _descendant2
      }];
      _ancestor2.checks = query.checks;
      query.checks = adQChecks;
      selector.compoundCount++;
      return _descendant2;
    }
  }
}, {
  name: "subject",
  modifier: true,
  regex: tokens.subject,
  populate: function populate14(selector, query) {
    if (selector.currentSubject != null && selector.currentSubject !== query) {
      warn("Redefinition of subject in selector `" + selector.toString() + "`");
      return false;
    }
    selector.currentSubject = query;
    var topQ = selector[selector.length - 1];
    var topChk = topQ.checks[0];
    var topType = topChk == null ? null : topChk.type;
    if (topType === Type.DIRECTED_EDGE) {
      topChk.type = Type.NODE_TARGET;
    } else if (topType === Type.UNDIRECTED_EDGE) {
      topChk.type = Type.NODE_NEIGHBOR;
      topChk.node = topChk.nodes[1];
      topChk.neighbor = topChk.nodes[0];
      topChk.nodes = null;
    }
  }
}];
exprs.forEach(function(e) {
  return e.regexObj = new RegExp("^" + e.regex);
});
var consumeExpr = function consumeExpr2(remaining) {
  var expr;
  var match2;
  var name;
  for (var j2 = 0; j2 < exprs.length; j2++) {
    var e = exprs[j2];
    var n2 = e.name;
    var m2 = remaining.match(e.regexObj);
    if (m2 != null) {
      match2 = m2;
      expr = e;
      name = n2;
      var consumed = m2[0];
      remaining = remaining.substring(consumed.length);
      break;
    }
  }
  return {
    expr,
    match: match2,
    name,
    remaining
  };
};
var consumeWhitespace = function consumeWhitespace2(remaining) {
  var match2 = remaining.match(/^\s+/);
  if (match2) {
    var consumed = match2[0];
    remaining = remaining.substring(consumed.length);
  }
  return remaining;
};
var parse = function parse2(selector) {
  var self2 = this;
  var remaining = self2.inputText = selector;
  var currentQuery = self2[0] = newQuery();
  self2.length = 1;
  remaining = consumeWhitespace(remaining);
  for (; ; ) {
    var exprInfo = consumeExpr(remaining);
    if (exprInfo.expr == null) {
      warn("The selector `" + selector + "`is invalid");
      return false;
    } else {
      var args = exprInfo.match.slice(1);
      var ret = exprInfo.expr.populate(self2, currentQuery, args);
      if (ret === false) {
        return false;
      } else if (ret != null) {
        currentQuery = ret;
      }
    }
    remaining = exprInfo.remaining;
    if (remaining.match(/^\s*$/)) {
      break;
    }
  }
  var lastQ = self2[self2.length - 1];
  if (self2.currentSubject != null) {
    lastQ.subject = self2.currentSubject;
  }
  lastQ.edgeCount = self2.edgeCount;
  lastQ.compoundCount = self2.compoundCount;
  for (var i2 = 0; i2 < self2.length; i2++) {
    var q2 = self2[i2];
    if (q2.compoundCount > 0 && q2.edgeCount > 0) {
      warn("The selector `" + selector + "` is invalid because it uses both a compound selector and an edge selector");
      return false;
    }
    if (q2.edgeCount > 1) {
      warn("The selector `" + selector + "` is invalid because it uses multiple edge selectors");
      return false;
    } else if (q2.edgeCount === 1) {
      warn("The selector `" + selector + "` is deprecated.  Edge selectors do not take effect on changes to source and target nodes after an edge is added, for performance reasons.  Use a class or data selector on edges instead, updating the class or data of an edge when your app detects a change in source or target nodes.");
    }
  }
  return true;
};
var toString = function toString2() {
  if (this.toStringCache != null) {
    return this.toStringCache;
  }
  var clean = function clean2(obj) {
    if (obj == null) {
      return "";
    } else {
      return obj;
    }
  };
  var cleanVal = function cleanVal2(val) {
    if (string(val)) {
      return '"' + val + '"';
    } else {
      return clean(val);
    }
  };
  var space = function space2(val) {
    return " " + val + " ";
  };
  var checkToString = function checkToString2(check, subject) {
    var type2 = check.type, value = check.value;
    switch (type2) {
      case Type.GROUP: {
        var group2 = clean(value);
        return group2.substring(0, group2.length - 1);
      }
      case Type.DATA_COMPARE: {
        var field = check.field, operator = check.operator;
        return "[" + field + space(clean(operator)) + cleanVal(value) + "]";
      }
      case Type.DATA_BOOL: {
        var _operator = check.operator, _field = check.field;
        return "[" + clean(_operator) + _field + "]";
      }
      case Type.DATA_EXIST: {
        var _field2 = check.field;
        return "[" + _field2 + "]";
      }
      case Type.META_COMPARE: {
        var _operator2 = check.operator, _field3 = check.field;
        return "[[" + _field3 + space(clean(_operator2)) + cleanVal(value) + "]]";
      }
      case Type.STATE: {
        return value;
      }
      case Type.ID: {
        return "#" + value;
      }
      case Type.CLASS: {
        return "." + value;
      }
      case Type.PARENT:
      case Type.CHILD: {
        return queryToString(check.parent, subject) + space(">") + queryToString(check.child, subject);
      }
      case Type.ANCESTOR:
      case Type.DESCENDANT: {
        return queryToString(check.ancestor, subject) + " " + queryToString(check.descendant, subject);
      }
      case Type.COMPOUND_SPLIT: {
        var lhs = queryToString(check.left, subject);
        var sub = queryToString(check.subject, subject);
        var rhs = queryToString(check.right, subject);
        return lhs + (lhs.length > 0 ? " " : "") + sub + rhs;
      }
      case Type.TRUE: {
        return "";
      }
    }
  };
  var queryToString = function queryToString2(query2, subject) {
    return query2.checks.reduce(function(str2, chk, i3) {
      return str2 + (subject === query2 && i3 === 0 ? "$" : "") + checkToString(chk, subject);
    }, "");
  };
  var str = "";
  for (var i2 = 0; i2 < this.length; i2++) {
    var query = this[i2];
    str += queryToString(query, query.subject);
    if (this.length > 1 && i2 < this.length - 1) {
      str += ", ";
    }
  }
  this.toStringCache = str;
  return str;
};
var parse$1 = {
  parse,
  toString
};
var valCmp = function valCmp2(fieldVal, operator, value) {
  var matches33;
  var isFieldStr = string(fieldVal);
  var isFieldNum = number$1(fieldVal);
  var isValStr = string(value);
  var fieldStr, valStr;
  var caseInsensitive = false;
  var notExpr = false;
  var isIneqCmp = false;
  if (operator.indexOf("!") >= 0) {
    operator = operator.replace("!", "");
    notExpr = true;
  }
  if (operator.indexOf("@") >= 0) {
    operator = operator.replace("@", "");
    caseInsensitive = true;
  }
  if (isFieldStr || isValStr || caseInsensitive) {
    fieldStr = !isFieldStr && !isFieldNum ? "" : "" + fieldVal;
    valStr = "" + value;
  }
  if (caseInsensitive) {
    fieldVal = fieldStr = fieldStr.toLowerCase();
    value = valStr = valStr.toLowerCase();
  }
  switch (operator) {
    case "*=":
      matches33 = fieldStr.indexOf(valStr) >= 0;
      break;
    case "$=":
      matches33 = fieldStr.indexOf(valStr, fieldStr.length - valStr.length) >= 0;
      break;
    case "^=":
      matches33 = fieldStr.indexOf(valStr) === 0;
      break;
    case "=":
      matches33 = fieldVal === value;
      break;
    case ">":
      isIneqCmp = true;
      matches33 = fieldVal > value;
      break;
    case ">=":
      isIneqCmp = true;
      matches33 = fieldVal >= value;
      break;
    case "<":
      isIneqCmp = true;
      matches33 = fieldVal < value;
      break;
    case "<=":
      isIneqCmp = true;
      matches33 = fieldVal <= value;
      break;
    default:
      matches33 = false;
      break;
  }
  if (notExpr && (fieldVal != null || !isIneqCmp)) {
    matches33 = !matches33;
  }
  return matches33;
};
var boolCmp = function boolCmp2(fieldVal, operator) {
  switch (operator) {
    case "?":
      return fieldVal ? true : false;
    case "!":
      return fieldVal ? false : true;
    case "^":
      return fieldVal === void 0;
  }
};
var existCmp = function existCmp2(fieldVal) {
  return fieldVal !== void 0;
};
var data$1 = function data2(ele, field) {
  return ele.data(field);
};
var meta = function meta2(ele, field) {
  return ele[field]();
};
var match = [];
var matches$1 = function matches30(query, ele) {
  return query.checks.every(function(chk) {
    return match[chk.type](chk, ele);
  });
};
match[Type.GROUP] = function(check, ele) {
  var group2 = check.value;
  return group2 === "*" || group2 === ele.group();
};
match[Type.STATE] = function(check, ele) {
  var stateSelector = check.value;
  return stateSelectorMatches(stateSelector, ele);
};
match[Type.ID] = function(check, ele) {
  var id2 = check.value;
  return ele.id() === id2;
};
match[Type.CLASS] = function(check, ele) {
  var cls = check.value;
  return ele.hasClass(cls);
};
match[Type.META_COMPARE] = function(check, ele) {
  var field = check.field, operator = check.operator, value = check.value;
  return valCmp(meta(ele, field), operator, value);
};
match[Type.DATA_COMPARE] = function(check, ele) {
  var field = check.field, operator = check.operator, value = check.value;
  return valCmp(data$1(ele, field), operator, value);
};
match[Type.DATA_BOOL] = function(check, ele) {
  var field = check.field, operator = check.operator;
  return boolCmp(data$1(ele, field), operator);
};
match[Type.DATA_EXIST] = function(check, ele) {
  var field = check.field;
  check.operator;
  return existCmp(data$1(ele, field));
};
match[Type.UNDIRECTED_EDGE] = function(check, ele) {
  var qA = check.nodes[0];
  var qB = check.nodes[1];
  var src = ele.source();
  var tgt = ele.target();
  return matches$1(qA, src) && matches$1(qB, tgt) || matches$1(qB, src) && matches$1(qA, tgt);
};
match[Type.NODE_NEIGHBOR] = function(check, ele) {
  return matches$1(check.node, ele) && ele.neighborhood().some(function(n2) {
    return n2.isNode() && matches$1(check.neighbor, n2);
  });
};
match[Type.DIRECTED_EDGE] = function(check, ele) {
  return matches$1(check.source, ele.source()) && matches$1(check.target, ele.target());
};
match[Type.NODE_SOURCE] = function(check, ele) {
  return matches$1(check.source, ele) && ele.outgoers().some(function(n2) {
    return n2.isNode() && matches$1(check.target, n2);
  });
};
match[Type.NODE_TARGET] = function(check, ele) {
  return matches$1(check.target, ele) && ele.incomers().some(function(n2) {
    return n2.isNode() && matches$1(check.source, n2);
  });
};
match[Type.CHILD] = function(check, ele) {
  return matches$1(check.child, ele) && matches$1(check.parent, ele.parent());
};
match[Type.PARENT] = function(check, ele) {
  return matches$1(check.parent, ele) && ele.children().some(function(c2) {
    return matches$1(check.child, c2);
  });
};
match[Type.DESCENDANT] = function(check, ele) {
  return matches$1(check.descendant, ele) && ele.ancestors().some(function(a2) {
    return matches$1(check.ancestor, a2);
  });
};
match[Type.ANCESTOR] = function(check, ele) {
  return matches$1(check.ancestor, ele) && ele.descendants().some(function(d2) {
    return matches$1(check.descendant, d2);
  });
};
match[Type.COMPOUND_SPLIT] = function(check, ele) {
  return matches$1(check.subject, ele) && matches$1(check.left, ele) && matches$1(check.right, ele);
};
match[Type.TRUE] = function() {
  return true;
};
match[Type.COLLECTION] = function(check, ele) {
  var collection4 = check.value;
  return collection4.has(ele);
};
match[Type.FILTER] = function(check, ele) {
  var filter4 = check.value;
  return filter4(ele);
};
var filter = function filter2(collection4) {
  var self2 = this;
  if (self2.length === 1 && self2[0].checks.length === 1 && self2[0].checks[0].type === Type.ID) {
    return collection4.getElementById(self2[0].checks[0].value).collection();
  }
  var selectorFunction = function selectorFunction2(element3) {
    for (var j2 = 0; j2 < self2.length; j2++) {
      var query = self2[j2];
      if (matches$1(query, element3)) {
        return true;
      }
    }
    return false;
  };
  if (self2.text() == null) {
    selectorFunction = function selectorFunction2() {
      return true;
    };
  }
  return collection4.filter(selectorFunction);
};
var matches31 = function matches32(ele) {
  var self2 = this;
  for (var j2 = 0; j2 < self2.length; j2++) {
    var query = self2[j2];
    if (matches$1(query, ele)) {
      return true;
    }
  }
  return false;
};
var matching = {
  matches: matches31,
  filter
};
var Selector = function Selector2(selector) {
  this.inputText = selector;
  this.currentSubject = null;
  this.compoundCount = 0;
  this.edgeCount = 0;
  this.length = 0;
  if (selector == null || string(selector) && selector.match(/^\s*$/)) ;
  else if (elementOrCollection(selector)) {
    this.addQuery({
      checks: [{
        type: Type.COLLECTION,
        value: selector.collection()
      }]
    });
  } else if (fn$6(selector)) {
    this.addQuery({
      checks: [{
        type: Type.FILTER,
        value: selector
      }]
    });
  } else if (string(selector)) {
    if (!this.parse(selector)) {
      this.invalid = true;
    }
  } else {
    error("A selector must be created from a string; found ");
  }
};
var selfn = Selector.prototype;
[parse$1, matching].forEach(function(p3) {
  return extend(selfn, p3);
});
selfn.text = function() {
  return this.inputText;
};
selfn.size = function() {
  return this.length;
};
selfn.eq = function(i2) {
  return this[i2];
};
selfn.sameText = function(otherSel) {
  return !this.invalid && !otherSel.invalid && this.text() === otherSel.text();
};
selfn.addQuery = function(q2) {
  this[this.length++] = q2;
};
selfn.selector = selfn.toString;
var elesfn$g = {
  allAre: function allAre(selector) {
    var selObj = new Selector(selector);
    return this.every(function(ele) {
      return selObj.matches(ele);
    });
  },
  is: function is(selector) {
    var selObj = new Selector(selector);
    return this.some(function(ele) {
      return selObj.matches(ele);
    });
  },
  some: function some(fn4, thisArg) {
    for (var i2 = 0; i2 < this.length; i2++) {
      var ret = !thisArg ? fn4(this[i2], i2, this) : fn4.apply(thisArg, [this[i2], i2, this]);
      if (ret) {
        return true;
      }
    }
    return false;
  },
  every: function every(fn4, thisArg) {
    for (var i2 = 0; i2 < this.length; i2++) {
      var ret = !thisArg ? fn4(this[i2], i2, this) : fn4.apply(thisArg, [this[i2], i2, this]);
      if (!ret) {
        return false;
      }
    }
    return true;
  },
  same: function same(collection4) {
    if (this === collection4) {
      return true;
    }
    collection4 = this.cy().collection(collection4);
    var thisLength = this.length;
    var collectionLength = collection4.length;
    if (thisLength !== collectionLength) {
      return false;
    }
    if (thisLength === 1) {
      return this[0] === collection4[0];
    }
    return this.every(function(ele) {
      return collection4.hasElementWithId(ele.id());
    });
  },
  anySame: function anySame(collection4) {
    collection4 = this.cy().collection(collection4);
    return this.some(function(ele) {
      return collection4.hasElementWithId(ele.id());
    });
  },
  allAreNeighbors: function allAreNeighbors(collection4) {
    collection4 = this.cy().collection(collection4);
    var nhood = this.neighborhood();
    return collection4.every(function(ele) {
      return nhood.hasElementWithId(ele.id());
    });
  },
  contains: function contains(collection4) {
    collection4 = this.cy().collection(collection4);
    var self2 = this;
    return collection4.every(function(ele) {
      return self2.hasElementWithId(ele.id());
    });
  }
};
elesfn$g.allAreNeighbours = elesfn$g.allAreNeighbors;
elesfn$g.has = elesfn$g.contains;
elesfn$g.equal = elesfn$g.equals = elesfn$g.same;
var cache = function cache2(fn4, name) {
  return function traversalCache(arg1, arg2, arg3, arg4) {
    var selectorOrEles = arg1;
    var eles = this;
    var key;
    if (selectorOrEles == null) {
      key = "";
    } else if (elementOrCollection(selectorOrEles) && selectorOrEles.length === 1) {
      key = selectorOrEles.id();
    }
    if (eles.length === 1 && key) {
      var _p = eles[0]._private;
      var tch = _p.traversalCache = _p.traversalCache || {};
      var ch2 = tch[name] = tch[name] || [];
      var hash = hashString(key);
      var cacheHit = ch2[hash];
      if (cacheHit) {
        return cacheHit;
      } else {
        return ch2[hash] = fn4.call(eles, arg1, arg2, arg3, arg4);
      }
    } else {
      return fn4.call(eles, arg1, arg2, arg3, arg4);
    }
  };
};
var elesfn$f = {
  parent: function parent(selector) {
    var parents2 = [];
    if (this.length === 1) {
      var parent4 = this[0]._private.parent;
      if (parent4) {
        return parent4;
      }
    }
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      var _parent = ele._private.parent;
      if (_parent) {
        parents2.push(_parent);
      }
    }
    return this.spawn(parents2, true).filter(selector);
  },
  parents: function parents(selector) {
    var parents2 = [];
    var eles = this.parent();
    while (eles.nonempty()) {
      for (var i2 = 0; i2 < eles.length; i2++) {
        var ele = eles[i2];
        parents2.push(ele);
      }
      eles = eles.parent();
    }
    return this.spawn(parents2, true).filter(selector);
  },
  commonAncestors: function commonAncestors(selector) {
    var ancestors;
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      var parents2 = ele.parents();
      ancestors = ancestors || parents2;
      ancestors = ancestors.intersect(parents2);
    }
    return ancestors.filter(selector);
  },
  orphans: function orphans(selector) {
    return this.stdFilter(function(ele) {
      return ele.isOrphan();
    }).filter(selector);
  },
  nonorphans: function nonorphans(selector) {
    return this.stdFilter(function(ele) {
      return ele.isChild();
    }).filter(selector);
  },
  children: cache(function(selector) {
    var children = [];
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      var eleChildren = ele._private.children;
      for (var j2 = 0; j2 < eleChildren.length; j2++) {
        children.push(eleChildren[j2]);
      }
    }
    return this.spawn(children, true).filter(selector);
  }, "children"),
  siblings: function siblings(selector) {
    return this.parent().children().not(this).filter(selector);
  },
  isParent: function isParent() {
    var ele = this[0];
    if (ele) {
      return ele.isNode() && ele._private.children.length !== 0;
    }
  },
  isChildless: function isChildless() {
    var ele = this[0];
    if (ele) {
      return ele.isNode() && ele._private.children.length === 0;
    }
  },
  isChild: function isChild() {
    var ele = this[0];
    if (ele) {
      return ele.isNode() && ele._private.parent != null;
    }
  },
  isOrphan: function isOrphan() {
    var ele = this[0];
    if (ele) {
      return ele.isNode() && ele._private.parent == null;
    }
  },
  descendants: function descendants(selector) {
    var elements = [];
    function add3(eles) {
      for (var i2 = 0; i2 < eles.length; i2++) {
        var ele = eles[i2];
        elements.push(ele);
        if (ele.children().nonempty()) {
          add3(ele.children());
        }
      }
    }
    add3(this.children());
    return this.spawn(elements, true).filter(selector);
  }
};
function forEachCompound(eles, fn4, includeSelf, recursiveStep) {
  var q2 = [];
  var did = new Set$1();
  var cy = eles.cy();
  var hasCompounds = cy.hasCompoundNodes();
  for (var i2 = 0; i2 < eles.length; i2++) {
    var ele = eles[i2];
    if (includeSelf) {
      q2.push(ele);
    } else if (hasCompounds) {
      recursiveStep(q2, did, ele);
    }
  }
  while (q2.length > 0) {
    var _ele = q2.shift();
    fn4(_ele);
    did.add(_ele.id());
    if (hasCompounds) {
      recursiveStep(q2, did, _ele);
    }
  }
  return eles;
}
function addChildren(q2, did, ele) {
  if (ele.isParent()) {
    var children = ele._private.children;
    for (var i2 = 0; i2 < children.length; i2++) {
      var child = children[i2];
      if (!did.has(child.id())) {
        q2.push(child);
      }
    }
  }
}
elesfn$f.forEachDown = function(fn4) {
  var includeSelf = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  return forEachCompound(this, fn4, includeSelf, addChildren);
};
function addParent(q2, did, ele) {
  if (ele.isChild()) {
    var parent4 = ele._private.parent;
    if (!did.has(parent4.id())) {
      q2.push(parent4);
    }
  }
}
elesfn$f.forEachUp = function(fn4) {
  var includeSelf = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  return forEachCompound(this, fn4, includeSelf, addParent);
};
function addParentAndChildren(q2, did, ele) {
  addParent(q2, did, ele);
  addChildren(q2, did, ele);
}
elesfn$f.forEachUpAndDown = function(fn4) {
  var includeSelf = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  return forEachCompound(this, fn4, includeSelf, addParentAndChildren);
};
elesfn$f.ancestors = elesfn$f.parents;
var fn$5;
var elesfn$e;
fn$5 = elesfn$e = {
  data: define2.data({
    field: "data",
    bindingEvent: "data",
    allowBinding: true,
    allowSetting: true,
    settingEvent: "data",
    settingTriggersEvent: true,
    triggerFnName: "trigger",
    allowGetting: true,
    immutableKeys: {
      "id": true,
      "source": true,
      "target": true,
      "parent": true
    },
    updateStyle: true
  }),
  removeData: define2.removeData({
    field: "data",
    event: "data",
    triggerFnName: "trigger",
    triggerEvent: true,
    immutableKeys: {
      "id": true,
      "source": true,
      "target": true,
      "parent": true
    },
    updateStyle: true
  }),
  scratch: define2.data({
    field: "scratch",
    bindingEvent: "scratch",
    allowBinding: true,
    allowSetting: true,
    settingEvent: "scratch",
    settingTriggersEvent: true,
    triggerFnName: "trigger",
    allowGetting: true,
    updateStyle: true
  }),
  removeScratch: define2.removeData({
    field: "scratch",
    event: "scratch",
    triggerFnName: "trigger",
    triggerEvent: true,
    updateStyle: true
  }),
  rscratch: define2.data({
    field: "rscratch",
    allowBinding: false,
    allowSetting: true,
    settingTriggersEvent: false,
    allowGetting: true
  }),
  removeRscratch: define2.removeData({
    field: "rscratch",
    triggerEvent: false
  }),
  id: function id() {
    var ele = this[0];
    if (ele) {
      return ele._private.data.id;
    }
  }
};
fn$5.attr = fn$5.data;
fn$5.removeAttr = fn$5.removeData;
var data3 = elesfn$e;
var elesfn$d = {};
function defineDegreeFunction(callback) {
  return function(includeLoops) {
    var self2 = this;
    if (includeLoops === void 0) {
      includeLoops = true;
    }
    if (self2.length === 0) {
      return;
    }
    if (self2.isNode() && !self2.removed()) {
      var degree = 0;
      var node = self2[0];
      var connectedEdges = node._private.edges;
      for (var i2 = 0; i2 < connectedEdges.length; i2++) {
        var edge = connectedEdges[i2];
        if (!includeLoops && edge.isLoop()) {
          continue;
        }
        degree += callback(node, edge);
      }
      return degree;
    } else {
      return;
    }
  };
}
extend(elesfn$d, {
  degree: defineDegreeFunction(function(node, edge) {
    if (edge.source().same(edge.target())) {
      return 2;
    } else {
      return 1;
    }
  }),
  indegree: defineDegreeFunction(function(node, edge) {
    if (edge.target().same(node)) {
      return 1;
    } else {
      return 0;
    }
  }),
  outdegree: defineDegreeFunction(function(node, edge) {
    if (edge.source().same(node)) {
      return 1;
    } else {
      return 0;
    }
  })
});
function defineDegreeBoundsFunction(degreeFn, callback) {
  return function(includeLoops) {
    var ret;
    var nodes3 = this.nodes();
    for (var i2 = 0; i2 < nodes3.length; i2++) {
      var ele = nodes3[i2];
      var degree = ele[degreeFn](includeLoops);
      if (degree !== void 0 && (ret === void 0 || callback(degree, ret))) {
        ret = degree;
      }
    }
    return ret;
  };
}
extend(elesfn$d, {
  minDegree: defineDegreeBoundsFunction("degree", function(degree, min4) {
    return degree < min4;
  }),
  maxDegree: defineDegreeBoundsFunction("degree", function(degree, max5) {
    return degree > max5;
  }),
  minIndegree: defineDegreeBoundsFunction("indegree", function(degree, min4) {
    return degree < min4;
  }),
  maxIndegree: defineDegreeBoundsFunction("indegree", function(degree, max5) {
    return degree > max5;
  }),
  minOutdegree: defineDegreeBoundsFunction("outdegree", function(degree, min4) {
    return degree < min4;
  }),
  maxOutdegree: defineDegreeBoundsFunction("outdegree", function(degree, max5) {
    return degree > max5;
  })
});
extend(elesfn$d, {
  totalDegree: function totalDegree(includeLoops) {
    var total = 0;
    var nodes3 = this.nodes();
    for (var i2 = 0; i2 < nodes3.length; i2++) {
      total += nodes3[i2].degree(includeLoops);
    }
    return total;
  }
});
var fn$4;
var elesfn$c;
var beforePositionSet = function beforePositionSet2(eles, newPos, silent) {
  for (var i2 = 0; i2 < eles.length; i2++) {
    var ele = eles[i2];
    if (!ele.locked()) {
      var oldPos = ele._private.position;
      var delta = {
        x: newPos.x != null ? newPos.x - oldPos.x : 0,
        y: newPos.y != null ? newPos.y - oldPos.y : 0
      };
      if (ele.isParent() && !(delta.x === 0 && delta.y === 0)) {
        ele.children().shift(delta, silent);
      }
      ele.dirtyBoundingBoxCache();
    }
  }
};
var positionDef = {
  field: "position",
  bindingEvent: "position",
  allowBinding: true,
  allowSetting: true,
  settingEvent: "position",
  settingTriggersEvent: true,
  triggerFnName: "emitAndNotify",
  allowGetting: true,
  validKeys: ["x", "y"],
  beforeGet: function beforeGet(ele) {
    ele.updateCompoundBounds();
  },
  beforeSet: function beforeSet(eles, newPos) {
    beforePositionSet(eles, newPos, false);
  },
  onSet: function onSet(eles) {
    eles.dirtyCompoundBoundsCache();
  },
  canSet: function canSet(ele) {
    return !ele.locked();
  }
};
fn$4 = elesfn$c = {
  position: define2.data(positionDef),
  // position but no notification to renderer
  silentPosition: define2.data(extend({}, positionDef, {
    allowBinding: false,
    allowSetting: true,
    settingTriggersEvent: false,
    allowGetting: false,
    beforeSet: function beforeSet2(eles, newPos) {
      beforePositionSet(eles, newPos, true);
    },
    onSet: function onSet2(eles) {
      eles.dirtyCompoundBoundsCache();
    }
  })),
  positions: function positions(pos, silent) {
    if (plainObject(pos)) {
      if (silent) {
        this.silentPosition(pos);
      } else {
        this.position(pos);
      }
    } else if (fn$6(pos)) {
      var _fn = pos;
      var cy = this.cy();
      cy.startBatch();
      for (var i2 = 0; i2 < this.length; i2++) {
        var ele = this[i2];
        var _pos = void 0;
        if (_pos = _fn(ele, i2)) {
          if (silent) {
            ele.silentPosition(_pos);
          } else {
            ele.position(_pos);
          }
        }
      }
      cy.endBatch();
    }
    return this;
  },
  silentPositions: function silentPositions(pos) {
    return this.positions(pos, true);
  },
  shift: function shift(dim, val, silent) {
    var delta;
    if (plainObject(dim)) {
      delta = {
        x: number$1(dim.x) ? dim.x : 0,
        y: number$1(dim.y) ? dim.y : 0
      };
      silent = val;
    } else if (string(dim) && number$1(val)) {
      delta = {
        x: 0,
        y: 0
      };
      delta[dim] = val;
    }
    if (delta != null) {
      var cy = this.cy();
      cy.startBatch();
      for (var i2 = 0; i2 < this.length; i2++) {
        var ele = this[i2];
        if (cy.hasCompoundNodes() && ele.isChild() && ele.ancestors().anySame(this)) {
          continue;
        }
        var pos = ele.position();
        var newPos = {
          x: pos.x + delta.x,
          y: pos.y + delta.y
        };
        if (silent) {
          ele.silentPosition(newPos);
        } else {
          ele.position(newPos);
        }
      }
      cy.endBatch();
    }
    return this;
  },
  silentShift: function silentShift(dim, val) {
    if (plainObject(dim)) {
      this.shift(dim, true);
    } else if (string(dim) && number$1(val)) {
      this.shift(dim, val, true);
    }
    return this;
  },
  // get/set the rendered (i.e. on screen) positon of the element
  renderedPosition: function renderedPosition(dim, val) {
    var ele = this[0];
    var cy = this.cy();
    var zoom2 = cy.zoom();
    var pan2 = cy.pan();
    var rpos = plainObject(dim) ? dim : void 0;
    var setting = rpos !== void 0 || val !== void 0 && string(dim);
    if (ele && ele.isNode()) {
      if (setting) {
        for (var i2 = 0; i2 < this.length; i2++) {
          var _ele = this[i2];
          if (val !== void 0) {
            _ele.position(dim, (val - pan2[dim]) / zoom2);
          } else if (rpos !== void 0) {
            _ele.position(renderedToModelPosition(rpos, zoom2, pan2));
          }
        }
      } else {
        var pos = ele.position();
        rpos = modelToRenderedPosition$1(pos, zoom2, pan2);
        if (dim === void 0) {
          return rpos;
        } else {
          return rpos[dim];
        }
      }
    } else if (!setting) {
      return void 0;
    }
    return this;
  },
  // get/set the position relative to the parent
  relativePosition: function relativePosition(dim, val) {
    var ele = this[0];
    var cy = this.cy();
    var ppos = plainObject(dim) ? dim : void 0;
    var setting = ppos !== void 0 || val !== void 0 && string(dim);
    var hasCompoundNodes2 = cy.hasCompoundNodes();
    if (ele && ele.isNode()) {
      if (setting) {
        for (var i2 = 0; i2 < this.length; i2++) {
          var _ele2 = this[i2];
          var parent4 = hasCompoundNodes2 ? _ele2.parent() : null;
          var hasParent = parent4 && parent4.length > 0;
          var relativeToParent = hasParent;
          if (hasParent) {
            parent4 = parent4[0];
          }
          var origin = relativeToParent ? parent4.position() : {
            x: 0,
            y: 0
          };
          if (val !== void 0) {
            _ele2.position(dim, val + origin[dim]);
          } else if (ppos !== void 0) {
            _ele2.position({
              x: ppos.x + origin.x,
              y: ppos.y + origin.y
            });
          }
        }
      } else {
        var pos = ele.position();
        var _parent = hasCompoundNodes2 ? ele.parent() : null;
        var _hasParent = _parent && _parent.length > 0;
        var _relativeToParent = _hasParent;
        if (_hasParent) {
          _parent = _parent[0];
        }
        var _origin = _relativeToParent ? _parent.position() : {
          x: 0,
          y: 0
        };
        ppos = {
          x: pos.x - _origin.x,
          y: pos.y - _origin.y
        };
        if (dim === void 0) {
          return ppos;
        } else {
          return ppos[dim];
        }
      }
    } else if (!setting) {
      return void 0;
    }
    return this;
  }
};
fn$4.modelPosition = fn$4.point = fn$4.position;
fn$4.modelPositions = fn$4.points = fn$4.positions;
fn$4.renderedPoint = fn$4.renderedPosition;
fn$4.relativePoint = fn$4.relativePosition;
var position = elesfn$c;
var fn$3;
var elesfn$b;
fn$3 = elesfn$b = {};
elesfn$b.renderedBoundingBox = function(options3) {
  var bb = this.boundingBox(options3);
  var cy = this.cy();
  var zoom2 = cy.zoom();
  var pan2 = cy.pan();
  var x1 = bb.x1 * zoom2 + pan2.x;
  var x22 = bb.x2 * zoom2 + pan2.x;
  var y1 = bb.y1 * zoom2 + pan2.y;
  var y22 = bb.y2 * zoom2 + pan2.y;
  return {
    x1,
    x2: x22,
    y1,
    y2: y22,
    w: x22 - x1,
    h: y22 - y1
  };
};
elesfn$b.dirtyCompoundBoundsCache = function() {
  var silent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
  var cy = this.cy();
  if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {
    return this;
  }
  this.forEachUp(function(ele) {
    if (ele.isParent()) {
      var _p = ele._private;
      _p.compoundBoundsClean = false;
      _p.bbCache = null;
      if (!silent) {
        ele.emitAndNotify("bounds");
      }
    }
  });
  return this;
};
elesfn$b.updateCompoundBounds = function() {
  var force = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
  var cy = this.cy();
  if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {
    return this;
  }
  if (!force && cy.batching()) {
    return this;
  }
  function update2(parent4) {
    if (!parent4.isParent()) {
      return;
    }
    var _p2 = parent4._private;
    var children = parent4.children();
    var includeLabels = parent4.pstyle("compound-sizing-wrt-labels").value === "include";
    var min4 = {
      width: {
        val: parent4.pstyle("min-width").pfValue,
        left: parent4.pstyle("min-width-bias-left"),
        right: parent4.pstyle("min-width-bias-right")
      },
      height: {
        val: parent4.pstyle("min-height").pfValue,
        top: parent4.pstyle("min-height-bias-top"),
        bottom: parent4.pstyle("min-height-bias-bottom")
      }
    };
    var bb = children.boundingBox({
      includeLabels,
      includeOverlays: false,
      // updating the compound bounds happens outside of the regular
      // cache cycle (i.e. before fired events)
      useCache: false
    });
    var pos = _p2.position;
    if (bb.w === 0 || bb.h === 0) {
      bb = {
        w: parent4.pstyle("width").pfValue,
        h: parent4.pstyle("height").pfValue
      };
      bb.x1 = pos.x - bb.w / 2;
      bb.x2 = pos.x + bb.w / 2;
      bb.y1 = pos.y - bb.h / 2;
      bb.y2 = pos.y + bb.h / 2;
    }
    function computeBiasValues(propDiff, propBias, propBiasComplement) {
      var biasDiff = 0;
      var biasComplementDiff = 0;
      var biasTotal = propBias + propBiasComplement;
      if (propDiff > 0 && biasTotal > 0) {
        biasDiff = propBias / biasTotal * propDiff;
        biasComplementDiff = propBiasComplement / biasTotal * propDiff;
      }
      return {
        biasDiff,
        biasComplementDiff
      };
    }
    function computePaddingValues(width2, height2, paddingObject, relativeTo) {
      if (paddingObject.units === "%") {
        switch (relativeTo) {
          case "width":
            return width2 > 0 ? paddingObject.pfValue * width2 : 0;
          case "height":
            return height2 > 0 ? paddingObject.pfValue * height2 : 0;
          case "average":
            return width2 > 0 && height2 > 0 ? paddingObject.pfValue * (width2 + height2) / 2 : 0;
          case "min":
            return width2 > 0 && height2 > 0 ? width2 > height2 ? paddingObject.pfValue * height2 : paddingObject.pfValue * width2 : 0;
          case "max":
            return width2 > 0 && height2 > 0 ? width2 > height2 ? paddingObject.pfValue * width2 : paddingObject.pfValue * height2 : 0;
          default:
            return 0;
        }
      } else if (paddingObject.units === "px") {
        return paddingObject.pfValue;
      } else {
        return 0;
      }
    }
    var leftVal = min4.width.left.value;
    if (min4.width.left.units === "px" && min4.width.val > 0) {
      leftVal = leftVal * 100 / min4.width.val;
    }
    var rightVal = min4.width.right.value;
    if (min4.width.right.units === "px" && min4.width.val > 0) {
      rightVal = rightVal * 100 / min4.width.val;
    }
    var topVal = min4.height.top.value;
    if (min4.height.top.units === "px" && min4.height.val > 0) {
      topVal = topVal * 100 / min4.height.val;
    }
    var bottomVal = min4.height.bottom.value;
    if (min4.height.bottom.units === "px" && min4.height.val > 0) {
      bottomVal = bottomVal * 100 / min4.height.val;
    }
    var widthBiasDiffs = computeBiasValues(min4.width.val - bb.w, leftVal, rightVal);
    var diffLeft = widthBiasDiffs.biasDiff;
    var diffRight = widthBiasDiffs.biasComplementDiff;
    var heightBiasDiffs = computeBiasValues(min4.height.val - bb.h, topVal, bottomVal);
    var diffTop = heightBiasDiffs.biasDiff;
    var diffBottom = heightBiasDiffs.biasComplementDiff;
    _p2.autoPadding = computePaddingValues(bb.w, bb.h, parent4.pstyle("padding"), parent4.pstyle("padding-relative-to").value);
    _p2.autoWidth = Math.max(bb.w, min4.width.val);
    pos.x = (-diffLeft + bb.x1 + bb.x2 + diffRight) / 2;
    _p2.autoHeight = Math.max(bb.h, min4.height.val);
    pos.y = (-diffTop + bb.y1 + bb.y2 + diffBottom) / 2;
  }
  for (var i2 = 0; i2 < this.length; i2++) {
    var ele = this[i2];
    var _p = ele._private;
    if (!_p.compoundBoundsClean || force) {
      update2(ele);
      if (!cy.batching()) {
        _p.compoundBoundsClean = true;
      }
    }
  }
  return this;
};
var noninf = function noninf2(x3) {
  if (x3 === Infinity || x3 === -Infinity) {
    return 0;
  }
  return x3;
};
var updateBounds = function updateBounds2(b2, x1, y1, x22, y22) {
  if (x22 - x1 === 0 || y22 - y1 === 0) {
    return;
  }
  if (x1 == null || y1 == null || x22 == null || y22 == null) {
    return;
  }
  b2.x1 = x1 < b2.x1 ? x1 : b2.x1;
  b2.x2 = x22 > b2.x2 ? x22 : b2.x2;
  b2.y1 = y1 < b2.y1 ? y1 : b2.y1;
  b2.y2 = y22 > b2.y2 ? y22 : b2.y2;
  b2.w = b2.x2 - b2.x1;
  b2.h = b2.y2 - b2.y1;
};
var updateBoundsFromBox = function updateBoundsFromBox2(b2, b22) {
  if (b22 == null) {
    return b2;
  }
  return updateBounds(b2, b22.x1, b22.y1, b22.x2, b22.y2);
};
var prefixedProperty = function prefixedProperty2(obj, field, prefix) {
  return getPrefixedProperty(obj, field, prefix);
};
var updateBoundsFromArrow = function updateBoundsFromArrow2(bounds2, ele, prefix) {
  if (ele.cy().headless()) {
    return;
  }
  var _p = ele._private;
  var rstyle = _p.rstyle;
  var halfArW = rstyle.arrowWidth / 2;
  var arrowType = ele.pstyle(prefix + "-arrow-shape").value;
  var x3;
  var y3;
  if (arrowType !== "none") {
    if (prefix === "source") {
      x3 = rstyle.srcX;
      y3 = rstyle.srcY;
    } else if (prefix === "target") {
      x3 = rstyle.tgtX;
      y3 = rstyle.tgtY;
    } else {
      x3 = rstyle.midX;
      y3 = rstyle.midY;
    }
    var bbs = _p.arrowBounds = _p.arrowBounds || {};
    var bb = bbs[prefix] = bbs[prefix] || {};
    bb.x1 = x3 - halfArW;
    bb.y1 = y3 - halfArW;
    bb.x2 = x3 + halfArW;
    bb.y2 = y3 + halfArW;
    bb.w = bb.x2 - bb.x1;
    bb.h = bb.y2 - bb.y1;
    expandBoundingBox(bb, 1);
    updateBounds(bounds2, bb.x1, bb.y1, bb.x2, bb.y2);
  }
};
var updateBoundsFromLabel = function updateBoundsFromLabel2(bounds2, ele, prefix) {
  if (ele.cy().headless()) {
    return;
  }
  var prefixDash;
  if (prefix) {
    prefixDash = prefix + "-";
  } else {
    prefixDash = "";
  }
  var _p = ele._private;
  var rstyle = _p.rstyle;
  var label = ele.pstyle(prefixDash + "label").strValue;
  if (label) {
    var halign = ele.pstyle("text-halign");
    var valign = ele.pstyle("text-valign");
    var labelWidth = prefixedProperty(rstyle, "labelWidth", prefix);
    var labelHeight = prefixedProperty(rstyle, "labelHeight", prefix);
    var labelX = prefixedProperty(rstyle, "labelX", prefix);
    var labelY = prefixedProperty(rstyle, "labelY", prefix);
    var marginX = ele.pstyle(prefixDash + "text-margin-x").pfValue;
    var marginY = ele.pstyle(prefixDash + "text-margin-y").pfValue;
    var isEdge2 = ele.isEdge();
    var rotation = ele.pstyle(prefixDash + "text-rotation");
    var outlineWidth = ele.pstyle("text-outline-width").pfValue;
    var borderWidth = ele.pstyle("text-border-width").pfValue;
    var halfBorderWidth = borderWidth / 2;
    var padding = ele.pstyle("text-background-padding").pfValue;
    var marginOfError = 2;
    var lh2 = labelHeight;
    var lw = labelWidth;
    var lw_2 = lw / 2;
    var lh_2 = lh2 / 2;
    var lx1, lx2, ly1, ly2;
    if (isEdge2) {
      lx1 = labelX - lw_2;
      lx2 = labelX + lw_2;
      ly1 = labelY - lh_2;
      ly2 = labelY + lh_2;
    } else {
      switch (halign.value) {
        case "left":
          lx1 = labelX - lw;
          lx2 = labelX;
          break;
        case "center":
          lx1 = labelX - lw_2;
          lx2 = labelX + lw_2;
          break;
        case "right":
          lx1 = labelX;
          lx2 = labelX + lw;
          break;
      }
      switch (valign.value) {
        case "top":
          ly1 = labelY - lh2;
          ly2 = labelY;
          break;
        case "center":
          ly1 = labelY - lh_2;
          ly2 = labelY + lh_2;
          break;
        case "bottom":
          ly1 = labelY;
          ly2 = labelY + lh2;
          break;
      }
    }
    var leftPad = marginX - Math.max(outlineWidth, halfBorderWidth) - padding - marginOfError;
    var rightPad = marginX + Math.max(outlineWidth, halfBorderWidth) + padding + marginOfError;
    var topPad = marginY - Math.max(outlineWidth, halfBorderWidth) - padding - marginOfError;
    var botPad = marginY + Math.max(outlineWidth, halfBorderWidth) + padding + marginOfError;
    lx1 += leftPad;
    lx2 += rightPad;
    ly1 += topPad;
    ly2 += botPad;
    var bbPrefix = prefix || "main";
    var bbs = _p.labelBounds;
    var bb = bbs[bbPrefix] = bbs[bbPrefix] || {};
    bb.x1 = lx1;
    bb.y1 = ly1;
    bb.x2 = lx2;
    bb.y2 = ly2;
    bb.w = lx2 - lx1;
    bb.h = ly2 - ly1;
    bb.leftPad = leftPad;
    bb.rightPad = rightPad;
    bb.topPad = topPad;
    bb.botPad = botPad;
    var isAutorotate = isEdge2 && rotation.strValue === "autorotate";
    var isPfValue = rotation.pfValue != null && rotation.pfValue !== 0;
    if (isAutorotate || isPfValue) {
      var theta = isAutorotate ? prefixedProperty(_p.rstyle, "labelAngle", prefix) : rotation.pfValue;
      var cos2 = Math.cos(theta);
      var sin2 = Math.sin(theta);
      var xo2 = (lx1 + lx2) / 2;
      var yo2 = (ly1 + ly2) / 2;
      if (!isEdge2) {
        switch (halign.value) {
          case "left":
            xo2 = lx2;
            break;
          case "right":
            xo2 = lx1;
            break;
        }
        switch (valign.value) {
          case "top":
            yo2 = ly2;
            break;
          case "bottom":
            yo2 = ly1;
            break;
        }
      }
      var rotate2 = function rotate3(x3, y3) {
        x3 = x3 - xo2;
        y3 = y3 - yo2;
        return {
          x: x3 * cos2 - y3 * sin2 + xo2,
          y: x3 * sin2 + y3 * cos2 + yo2
        };
      };
      var px1y1 = rotate2(lx1, ly1);
      var px1y2 = rotate2(lx1, ly2);
      var px2y1 = rotate2(lx2, ly1);
      var px2y2 = rotate2(lx2, ly2);
      lx1 = Math.min(px1y1.x, px1y2.x, px2y1.x, px2y2.x);
      lx2 = Math.max(px1y1.x, px1y2.x, px2y1.x, px2y2.x);
      ly1 = Math.min(px1y1.y, px1y2.y, px2y1.y, px2y2.y);
      ly2 = Math.max(px1y1.y, px1y2.y, px2y1.y, px2y2.y);
    }
    var bbPrefixRot = bbPrefix + "Rot";
    var bbRot = bbs[bbPrefixRot] = bbs[bbPrefixRot] || {};
    bbRot.x1 = lx1;
    bbRot.y1 = ly1;
    bbRot.x2 = lx2;
    bbRot.y2 = ly2;
    bbRot.w = lx2 - lx1;
    bbRot.h = ly2 - ly1;
    updateBounds(bounds2, lx1, ly1, lx2, ly2);
    updateBounds(_p.labelBounds.all, lx1, ly1, lx2, ly2);
  }
  return bounds2;
};
var updateBoundsFromOutline = function updateBoundsFromOutline2(bounds2, ele) {
  if (ele.cy().headless()) {
    return;
  }
  var outlineOpacity = ele.pstyle("outline-opacity").value;
  var outlineWidth = ele.pstyle("outline-width").value;
  var outlineOffset = ele.pstyle("outline-offset").value;
  var expansion = outlineWidth + outlineOffset;
  updateBoundsFromMiter(bounds2, ele, outlineOpacity, expansion, "outside", expansion / 2);
};
var updateBoundsFromMiter = function updateBoundsFromMiter2(bounds2, ele, opacity, expansionSize, expansionPosition, useFallbackValue) {
  if (opacity === 0 || expansionSize <= 0 || expansionPosition === "inside") {
    return;
  }
  var cy = ele.cy();
  var shape = ele.pstyle("shape").value;
  var rshape = cy.renderer().nodeShapes[shape];
  var _ele$position = ele.position(), x3 = _ele$position.x, y3 = _ele$position.y;
  var w2 = ele.width();
  var h2 = ele.height();
  if (rshape.hasMiterBounds) {
    if (expansionPosition === "center") {
      expansionSize /= 2;
    }
    var mbb = rshape.miterBounds(x3, y3, w2, h2, expansionSize);
    updateBoundsFromBox(bounds2, mbb);
  } else if (useFallbackValue != null && useFallbackValue > 0) {
    expandBoundingBoxSides(bounds2, [useFallbackValue, useFallbackValue, useFallbackValue, useFallbackValue]);
  }
};
var updateBoundsFromMiterBorder = function updateBoundsFromMiterBorder2(bounds2, ele) {
  if (ele.cy().headless()) {
    return;
  }
  var borderOpacity = ele.pstyle("border-opacity").value;
  var borderWidth = ele.pstyle("border-width").pfValue;
  var borderPosition = ele.pstyle("border-position").value;
  updateBoundsFromMiter(bounds2, ele, borderOpacity, borderWidth, borderPosition);
};
var boundingBoxImpl = function boundingBoxImpl2(ele, options3) {
  var cy = ele._private.cy;
  var styleEnabled2 = cy.styleEnabled();
  var headless2 = cy.headless();
  var bounds2 = makeBoundingBox();
  var _p = ele._private;
  var isNode2 = ele.isNode();
  var isEdge2 = ele.isEdge();
  var ex1, ex2, ey1, ey2;
  var x3, y3;
  var rstyle = _p.rstyle;
  var manualExpansion = isNode2 && styleEnabled2 ? ele.pstyle("bounds-expansion").pfValue : [0];
  var isDisplayed = function isDisplayed2(ele2) {
    return ele2.pstyle("display").value !== "none";
  };
  var displayed = !styleEnabled2 || isDisplayed(ele) && (!isEdge2 || isDisplayed(ele.source()) && isDisplayed(ele.target()));
  if (displayed) {
    var overlayOpacity = 0;
    var overlayPadding = 0;
    if (styleEnabled2 && options3.includeOverlays) {
      overlayOpacity = ele.pstyle("overlay-opacity").value;
      if (overlayOpacity !== 0) {
        overlayPadding = ele.pstyle("overlay-padding").value;
      }
    }
    var underlayOpacity = 0;
    var underlayPadding = 0;
    if (styleEnabled2 && options3.includeUnderlays) {
      underlayOpacity = ele.pstyle("underlay-opacity").value;
      if (underlayOpacity !== 0) {
        underlayPadding = ele.pstyle("underlay-padding").value;
      }
    }
    var padding = Math.max(overlayPadding, underlayPadding);
    var w2 = 0;
    var wHalf = 0;
    if (styleEnabled2) {
      w2 = ele.pstyle("width").pfValue;
      wHalf = w2 / 2;
    }
    if (isNode2 && options3.includeNodes) {
      var pos = ele.position();
      x3 = pos.x;
      y3 = pos.y;
      var _w = ele.outerWidth();
      var halfW = _w / 2;
      var h2 = ele.outerHeight();
      var halfH = h2 / 2;
      ex1 = x3 - halfW;
      ex2 = x3 + halfW;
      ey1 = y3 - halfH;
      ey2 = y3 + halfH;
      updateBounds(bounds2, ex1, ey1, ex2, ey2);
      if (styleEnabled2) {
        updateBoundsFromOutline(bounds2, ele);
      }
      if (styleEnabled2 && options3.includeOutlines && !headless2) {
        updateBoundsFromOutline(bounds2, ele);
      }
      if (styleEnabled2) {
        updateBoundsFromMiterBorder(bounds2, ele);
      }
    } else if (isEdge2 && options3.includeEdges) {
      if (styleEnabled2 && !headless2) {
        var curveStyle = ele.pstyle("curve-style").strValue;
        ex1 = Math.min(rstyle.srcX, rstyle.midX, rstyle.tgtX);
        ex2 = Math.max(rstyle.srcX, rstyle.midX, rstyle.tgtX);
        ey1 = Math.min(rstyle.srcY, rstyle.midY, rstyle.tgtY);
        ey2 = Math.max(rstyle.srcY, rstyle.midY, rstyle.tgtY);
        ex1 -= wHalf;
        ex2 += wHalf;
        ey1 -= wHalf;
        ey2 += wHalf;
        updateBounds(bounds2, ex1, ey1, ex2, ey2);
        if (curveStyle === "haystack") {
          var hpts = rstyle.haystackPts;
          if (hpts && hpts.length === 2) {
            ex1 = hpts[0].x;
            ey1 = hpts[0].y;
            ex2 = hpts[1].x;
            ey2 = hpts[1].y;
            if (ex1 > ex2) {
              var temp = ex1;
              ex1 = ex2;
              ex2 = temp;
            }
            if (ey1 > ey2) {
              var _temp = ey1;
              ey1 = ey2;
              ey2 = _temp;
            }
            updateBounds(bounds2, ex1 - wHalf, ey1 - wHalf, ex2 + wHalf, ey2 + wHalf);
          }
        } else if (curveStyle === "bezier" || curveStyle === "unbundled-bezier" || endsWith(curveStyle, "segments") || endsWith(curveStyle, "taxi")) {
          var pts2;
          switch (curveStyle) {
            case "bezier":
            case "unbundled-bezier":
              pts2 = rstyle.bezierPts;
              break;
            case "segments":
            case "taxi":
            case "round-segments":
            case "round-taxi":
              pts2 = rstyle.linePts;
              break;
          }
          if (pts2 != null) {
            for (var j2 = 0; j2 < pts2.length; j2++) {
              var pt2 = pts2[j2];
              ex1 = pt2.x - wHalf;
              ex2 = pt2.x + wHalf;
              ey1 = pt2.y - wHalf;
              ey2 = pt2.y + wHalf;
              updateBounds(bounds2, ex1, ey1, ex2, ey2);
            }
          }
        }
      } else {
        var n1 = ele.source();
        var n1pos = n1.position();
        var n2 = ele.target();
        var n2pos = n2.position();
        ex1 = n1pos.x;
        ex2 = n2pos.x;
        ey1 = n1pos.y;
        ey2 = n2pos.y;
        if (ex1 > ex2) {
          var _temp2 = ex1;
          ex1 = ex2;
          ex2 = _temp2;
        }
        if (ey1 > ey2) {
          var _temp3 = ey1;
          ey1 = ey2;
          ey2 = _temp3;
        }
        ex1 -= wHalf;
        ex2 += wHalf;
        ey1 -= wHalf;
        ey2 += wHalf;
        updateBounds(bounds2, ex1, ey1, ex2, ey2);
      }
    }
    if (styleEnabled2 && options3.includeEdges && isEdge2) {
      updateBoundsFromArrow(bounds2, ele, "mid-source");
      updateBoundsFromArrow(bounds2, ele, "mid-target");
      updateBoundsFromArrow(bounds2, ele, "source");
      updateBoundsFromArrow(bounds2, ele, "target");
    }
    if (styleEnabled2) {
      var ghost = ele.pstyle("ghost").value === "yes";
      if (ghost) {
        var gx = ele.pstyle("ghost-offset-x").pfValue;
        var gy = ele.pstyle("ghost-offset-y").pfValue;
        updateBounds(bounds2, bounds2.x1 + gx, bounds2.y1 + gy, bounds2.x2 + gx, bounds2.y2 + gy);
      }
    }
    var bbBody = _p.bodyBounds = _p.bodyBounds || {};
    assignBoundingBox(bbBody, bounds2);
    expandBoundingBoxSides(bbBody, manualExpansion);
    expandBoundingBox(bbBody, 1);
    if (styleEnabled2) {
      ex1 = bounds2.x1;
      ex2 = bounds2.x2;
      ey1 = bounds2.y1;
      ey2 = bounds2.y2;
      updateBounds(bounds2, ex1 - padding, ey1 - padding, ex2 + padding, ey2 + padding);
    }
    var bbOverlay = _p.overlayBounds = _p.overlayBounds || {};
    assignBoundingBox(bbOverlay, bounds2);
    expandBoundingBoxSides(bbOverlay, manualExpansion);
    expandBoundingBox(bbOverlay, 1);
    var bbLabels = _p.labelBounds = _p.labelBounds || {};
    if (bbLabels.all != null) {
      clearBoundingBox(bbLabels.all);
    } else {
      bbLabels.all = makeBoundingBox();
    }
    if (styleEnabled2 && options3.includeLabels) {
      if (options3.includeMainLabels) {
        updateBoundsFromLabel(bounds2, ele, null);
      }
      if (isEdge2) {
        if (options3.includeSourceLabels) {
          updateBoundsFromLabel(bounds2, ele, "source");
        }
        if (options3.includeTargetLabels) {
          updateBoundsFromLabel(bounds2, ele, "target");
        }
      }
    }
  }
  bounds2.x1 = noninf(bounds2.x1);
  bounds2.y1 = noninf(bounds2.y1);
  bounds2.x2 = noninf(bounds2.x2);
  bounds2.y2 = noninf(bounds2.y2);
  bounds2.w = noninf(bounds2.x2 - bounds2.x1);
  bounds2.h = noninf(bounds2.y2 - bounds2.y1);
  if (bounds2.w > 0 && bounds2.h > 0 && displayed) {
    expandBoundingBoxSides(bounds2, manualExpansion);
    expandBoundingBox(bounds2, 1);
  }
  return bounds2;
};
var getKey = function getKey2(opts) {
  var i2 = 0;
  var tf2 = function tf3(val) {
    return (val ? 1 : 0) << i2++;
  };
  var key = 0;
  key += tf2(opts.incudeNodes);
  key += tf2(opts.includeEdges);
  key += tf2(opts.includeLabels);
  key += tf2(opts.includeMainLabels);
  key += tf2(opts.includeSourceLabels);
  key += tf2(opts.includeTargetLabels);
  key += tf2(opts.includeOverlays);
  key += tf2(opts.includeOutlines);
  return key;
};
var getBoundingBoxPosKey = function getBoundingBoxPosKey2(ele) {
  var r2 = function r3(x3) {
    return Math.round(x3);
  };
  if (ele.isEdge()) {
    var p1 = ele.source().position();
    var p22 = ele.target().position();
    return hashIntsArray([r2(p1.x), r2(p1.y), r2(p22.x), r2(p22.y)]);
  } else {
    var p3 = ele.position();
    return hashIntsArray([r2(p3.x), r2(p3.y)]);
  }
};
var cachedBoundingBoxImpl = function cachedBoundingBoxImpl2(ele, opts) {
  var _p = ele._private;
  var bb;
  var isEdge2 = ele.isEdge();
  var key = opts == null ? defBbOptsKey : getKey(opts);
  var usingDefOpts = key === defBbOptsKey;
  if (_p.bbCache == null) {
    bb = boundingBoxImpl(ele, defBbOpts);
    _p.bbCache = bb;
    _p.bbCachePosKey = getBoundingBoxPosKey(ele);
  } else {
    bb = _p.bbCache;
  }
  if (!usingDefOpts) {
    var isNode2 = ele.isNode();
    bb = makeBoundingBox();
    if (opts.includeNodes && isNode2 || opts.includeEdges && !isNode2) {
      if (opts.includeOverlays) {
        updateBoundsFromBox(bb, _p.overlayBounds);
      } else {
        updateBoundsFromBox(bb, _p.bodyBounds);
      }
    }
    if (opts.includeLabels) {
      if (opts.includeMainLabels && (!isEdge2 || opts.includeSourceLabels && opts.includeTargetLabels)) {
        updateBoundsFromBox(bb, _p.labelBounds.all);
      } else {
        if (opts.includeMainLabels) {
          updateBoundsFromBox(bb, _p.labelBounds.mainRot);
        }
        if (opts.includeSourceLabels) {
          updateBoundsFromBox(bb, _p.labelBounds.sourceRot);
        }
        if (opts.includeTargetLabels) {
          updateBoundsFromBox(bb, _p.labelBounds.targetRot);
        }
      }
    }
    bb.w = bb.x2 - bb.x1;
    bb.h = bb.y2 - bb.y1;
  }
  return bb;
};
var defBbOpts = {
  includeNodes: true,
  includeEdges: true,
  includeLabels: true,
  includeMainLabels: true,
  includeSourceLabels: true,
  includeTargetLabels: true,
  includeOverlays: true,
  includeUnderlays: true,
  includeOutlines: true,
  useCache: true
};
var defBbOptsKey = getKey(defBbOpts);
var filledBbOpts = defaults$g(defBbOpts);
elesfn$b.boundingBox = function(options3) {
  var bounds2;
  var useCache = options3 === void 0 || options3.useCache === void 0 || options3.useCache === true;
  var isDirty = memoize(function(ele2) {
    var _p = ele2._private;
    return _p.bbCache == null || _p.styleDirty || _p.bbCachePosKey !== getBoundingBoxPosKey(ele2);
  }, function(ele2) {
    return ele2.id();
  });
  if (useCache && this.length === 1 && !isDirty(this[0])) {
    if (options3 === void 0) {
      options3 = defBbOpts;
    } else {
      options3 = filledBbOpts(options3);
    }
    bounds2 = cachedBoundingBoxImpl(this[0], options3);
  } else {
    bounds2 = makeBoundingBox();
    options3 = options3 || defBbOpts;
    var opts = filledBbOpts(options3);
    var eles = this;
    var cy = eles.cy();
    var styleEnabled2 = cy.styleEnabled();
    this.edges().forEach(isDirty);
    this.nodes().forEach(isDirty);
    if (styleEnabled2) {
      this.recalculateRenderedStyle(useCache);
    }
    this.updateCompoundBounds(!useCache);
    for (var i2 = 0; i2 < eles.length; i2++) {
      var ele = eles[i2];
      if (isDirty(ele)) {
        ele.dirtyBoundingBoxCache();
      }
      updateBoundsFromBox(bounds2, cachedBoundingBoxImpl(ele, opts));
    }
  }
  bounds2.x1 = noninf(bounds2.x1);
  bounds2.y1 = noninf(bounds2.y1);
  bounds2.x2 = noninf(bounds2.x2);
  bounds2.y2 = noninf(bounds2.y2);
  bounds2.w = noninf(bounds2.x2 - bounds2.x1);
  bounds2.h = noninf(bounds2.y2 - bounds2.y1);
  return bounds2;
};
elesfn$b.dirtyBoundingBoxCache = function() {
  for (var i2 = 0; i2 < this.length; i2++) {
    var _p = this[i2]._private;
    _p.bbCache = null;
    _p.bbCachePosKey = null;
    _p.bodyBounds = null;
    _p.overlayBounds = null;
    _p.labelBounds.all = null;
    _p.labelBounds.source = null;
    _p.labelBounds.target = null;
    _p.labelBounds.main = null;
    _p.labelBounds.sourceRot = null;
    _p.labelBounds.targetRot = null;
    _p.labelBounds.mainRot = null;
    _p.arrowBounds.source = null;
    _p.arrowBounds.target = null;
    _p.arrowBounds["mid-source"] = null;
    _p.arrowBounds["mid-target"] = null;
  }
  this.emitAndNotify("bounds");
  return this;
};
elesfn$b.boundingBoxAt = function(fn4) {
  var nodes3 = this.nodes();
  var cy = this.cy();
  var hasCompoundNodes2 = cy.hasCompoundNodes();
  var parents2 = cy.collection();
  if (hasCompoundNodes2) {
    parents2 = nodes3.filter(function(node) {
      return node.isParent();
    });
    nodes3 = nodes3.not(parents2);
  }
  if (plainObject(fn4)) {
    var obj = fn4;
    fn4 = function fn5() {
      return obj;
    };
  }
  var storeOldPos = function storeOldPos2(node, i2) {
    return node._private.bbAtOldPos = fn4(node, i2);
  };
  var getOldPos = function getOldPos2(node) {
    return node._private.bbAtOldPos;
  };
  cy.startBatch();
  nodes3.forEach(storeOldPos).silentPositions(fn4);
  if (hasCompoundNodes2) {
    parents2.dirtyCompoundBoundsCache();
    parents2.dirtyBoundingBoxCache();
    parents2.updateCompoundBounds(true);
  }
  var bb = copyBoundingBox(this.boundingBox({
    useCache: false
  }));
  nodes3.silentPositions(getOldPos);
  if (hasCompoundNodes2) {
    parents2.dirtyCompoundBoundsCache();
    parents2.dirtyBoundingBoxCache();
    parents2.updateCompoundBounds(true);
  }
  cy.endBatch();
  return bb;
};
fn$3.boundingbox = fn$3.bb = fn$3.boundingBox;
fn$3.renderedBoundingbox = fn$3.renderedBoundingBox;
var bounds = elesfn$b;
var fn$2;
var elesfn$a;
fn$2 = elesfn$a = {};
var defineDimFns = function defineDimFns2(opts) {
  opts.uppercaseName = capitalize(opts.name);
  opts.autoName = "auto" + opts.uppercaseName;
  opts.labelName = "label" + opts.uppercaseName;
  opts.outerName = "outer" + opts.uppercaseName;
  opts.uppercaseOuterName = capitalize(opts.outerName);
  fn$2[opts.name] = function dimImpl() {
    var ele = this[0];
    var _p = ele._private;
    var cy = _p.cy;
    var styleEnabled2 = cy._private.styleEnabled;
    if (ele) {
      if (styleEnabled2) {
        if (ele.isParent()) {
          ele.updateCompoundBounds();
          return _p[opts.autoName] || 0;
        }
        var d2 = ele.pstyle(opts.name);
        switch (d2.strValue) {
          case "label":
            ele.recalculateRenderedStyle();
            return _p.rstyle[opts.labelName] || 0;
          default:
            return d2.pfValue;
        }
      } else {
        return 1;
      }
    }
  };
  fn$2["outer" + opts.uppercaseName] = function outerDimImpl() {
    var ele = this[0];
    var _p = ele._private;
    var cy = _p.cy;
    var styleEnabled2 = cy._private.styleEnabled;
    if (ele) {
      if (styleEnabled2) {
        var dim = ele[opts.name]();
        var borderPos = ele.pstyle("border-position").value;
        var border;
        if (borderPos === "center") {
          border = ele.pstyle("border-width").pfValue;
        } else if (borderPos === "outside") {
          border = 2 * ele.pstyle("border-width").pfValue;
        } else {
          border = 0;
        }
        var padding = 2 * ele.padding();
        return dim + border + padding;
      } else {
        return 1;
      }
    }
  };
  fn$2["rendered" + opts.uppercaseName] = function renderedDimImpl() {
    var ele = this[0];
    if (ele) {
      var d2 = ele[opts.name]();
      return d2 * this.cy().zoom();
    }
  };
  fn$2["rendered" + opts.uppercaseOuterName] = function renderedOuterDimImpl() {
    var ele = this[0];
    if (ele) {
      var od = ele[opts.outerName]();
      return od * this.cy().zoom();
    }
  };
};
defineDimFns({
  name: "width"
});
defineDimFns({
  name: "height"
});
elesfn$a.padding = function() {
  var ele = this[0];
  var _p = ele._private;
  if (ele.isParent()) {
    ele.updateCompoundBounds();
    if (_p.autoPadding !== void 0) {
      return _p.autoPadding;
    } else {
      return ele.pstyle("padding").pfValue;
    }
  } else {
    return ele.pstyle("padding").pfValue;
  }
};
elesfn$a.paddedHeight = function() {
  var ele = this[0];
  return ele.height() + 2 * ele.padding();
};
elesfn$a.paddedWidth = function() {
  var ele = this[0];
  return ele.width() + 2 * ele.padding();
};
var widthHeight = elesfn$a;
var ifEdge = function ifEdge2(ele, getValue2) {
  if (ele.isEdge() && ele.takesUpSpace()) {
    return getValue2(ele);
  }
};
var ifEdgeRenderedPosition = function ifEdgeRenderedPosition2(ele, getPoint) {
  if (ele.isEdge() && ele.takesUpSpace()) {
    var cy = ele.cy();
    return modelToRenderedPosition$1(getPoint(ele), cy.zoom(), cy.pan());
  }
};
var ifEdgeRenderedPositions = function ifEdgeRenderedPositions2(ele, getPoints) {
  if (ele.isEdge() && ele.takesUpSpace()) {
    var cy = ele.cy();
    var pan2 = cy.pan();
    var zoom2 = cy.zoom();
    return getPoints(ele).map(function(p3) {
      return modelToRenderedPosition$1(p3, zoom2, pan2);
    });
  }
};
var controlPoints = function controlPoints2(ele) {
  return ele.renderer().getControlPoints(ele);
};
var segmentPoints = function segmentPoints2(ele) {
  return ele.renderer().getSegmentPoints(ele);
};
var sourceEndpoint = function sourceEndpoint2(ele) {
  return ele.renderer().getSourceEndpoint(ele);
};
var targetEndpoint = function targetEndpoint2(ele) {
  return ele.renderer().getTargetEndpoint(ele);
};
var midpoint = function midpoint2(ele) {
  return ele.renderer().getEdgeMidpoint(ele);
};
var pts = {
  controlPoints: {
    get: controlPoints,
    mult: true
  },
  segmentPoints: {
    get: segmentPoints,
    mult: true
  },
  sourceEndpoint: {
    get: sourceEndpoint
  },
  targetEndpoint: {
    get: targetEndpoint
  },
  midpoint: {
    get: midpoint
  }
};
var renderedName = function renderedName2(name) {
  return "rendered" + name[0].toUpperCase() + name.substr(1);
};
var edgePoints = Object.keys(pts).reduce(function(obj, name) {
  var spec = pts[name];
  var rName = renderedName(name);
  obj[name] = function() {
    return ifEdge(this, spec.get);
  };
  if (spec.mult) {
    obj[rName] = function() {
      return ifEdgeRenderedPositions(this, spec.get);
    };
  } else {
    obj[rName] = function() {
      return ifEdgeRenderedPosition(this, spec.get);
    };
  }
  return obj;
}, {});
var dimensions = extend({}, position, bounds, widthHeight, edgePoints);
var Event = function Event2(src, props) {
  this.recycle(src, props);
};
function returnFalse() {
  return false;
}
function returnTrue() {
  return true;
}
Event.prototype = {
  instanceString: function instanceString2() {
    return "event";
  },
  recycle: function recycle(src, props) {
    this.isImmediatePropagationStopped = this.isPropagationStopped = this.isDefaultPrevented = returnFalse;
    if (src != null && src.preventDefault) {
      this.type = src.type;
      this.isDefaultPrevented = src.defaultPrevented ? returnTrue : returnFalse;
    } else if (src != null && src.type) {
      props = src;
    } else {
      this.type = src;
    }
    if (props != null) {
      this.originalEvent = props.originalEvent;
      this.type = props.type != null ? props.type : this.type;
      this.cy = props.cy;
      this.target = props.target;
      this.position = props.position;
      this.renderedPosition = props.renderedPosition;
      this.namespace = props.namespace;
      this.layout = props.layout;
    }
    if (this.cy != null && this.position != null && this.renderedPosition == null) {
      var pos = this.position;
      var zoom2 = this.cy.zoom();
      var pan2 = this.cy.pan();
      this.renderedPosition = {
        x: pos.x * zoom2 + pan2.x,
        y: pos.y * zoom2 + pan2.y
      };
    }
    this.timeStamp = src && src.timeStamp || Date.now();
  },
  preventDefault: function preventDefault() {
    this.isDefaultPrevented = returnTrue;
    var e = this.originalEvent;
    if (!e) {
      return;
    }
    if (e.preventDefault) {
      e.preventDefault();
    }
  },
  stopPropagation: function stopPropagation() {
    this.isPropagationStopped = returnTrue;
    var e = this.originalEvent;
    if (!e) {
      return;
    }
    if (e.stopPropagation) {
      e.stopPropagation();
    }
  },
  stopImmediatePropagation: function stopImmediatePropagation() {
    this.isImmediatePropagationStopped = returnTrue;
    this.stopPropagation();
  },
  isDefaultPrevented: returnFalse,
  isPropagationStopped: returnFalse,
  isImmediatePropagationStopped: returnFalse
};
var eventRegex = /^([^.]+)(\.(?:[^.]+))?$/;
var universalNamespace = ".*";
var defaults$8 = {
  qualifierCompare: function qualifierCompare(q1, q2) {
    return q1 === q2;
  },
  eventMatches: function eventMatches() {
    return true;
  },
  addEventFields: function addEventFields() {
  },
  callbackContext: function callbackContext(context) {
    return context;
  },
  beforeEmit: function beforeEmit() {
  },
  afterEmit: function afterEmit() {
  },
  bubble: function bubble() {
    return false;
  },
  parent: function parent2() {
    return null;
  },
  context: null
};
var defaultsKeys = Object.keys(defaults$8);
var emptyOpts = {};
function Emitter2() {
  var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : emptyOpts;
  var context = arguments.length > 1 ? arguments[1] : void 0;
  for (var i2 = 0; i2 < defaultsKeys.length; i2++) {
    var key = defaultsKeys[i2];
    this[key] = opts[key] || defaults$8[key];
  }
  this.context = context || this.context;
  this.listeners = [];
  this.emitting = 0;
}
var p = Emitter2.prototype;
var forEachEvent = function forEachEvent2(self2, handler, events, qualifier, callback, conf, confOverrides) {
  if (fn$6(qualifier)) {
    callback = qualifier;
    qualifier = null;
  }
  if (confOverrides) {
    if (conf == null) {
      conf = confOverrides;
    } else {
      conf = extend({}, conf, confOverrides);
    }
  }
  var eventList = array(events) ? events : events.split(/\s+/);
  for (var i2 = 0; i2 < eventList.length; i2++) {
    var evt = eventList[i2];
    if (emptyString(evt)) {
      continue;
    }
    var match2 = evt.match(eventRegex);
    if (match2) {
      var type2 = match2[1];
      var namespace = match2[2] ? match2[2] : null;
      var ret = handler(self2, evt, type2, namespace, qualifier, callback, conf);
      if (ret === false) {
        break;
      }
    }
  }
};
var makeEventObj = function makeEventObj2(self2, obj) {
  self2.addEventFields(self2.context, obj);
  return new Event(obj.type, obj);
};
var forEachEventObj = function forEachEventObj2(self2, handler, events) {
  if (event(events)) {
    handler(self2, events);
    return;
  } else if (plainObject(events)) {
    handler(self2, makeEventObj(self2, events));
    return;
  }
  var eventList = array(events) ? events : events.split(/\s+/);
  for (var i2 = 0; i2 < eventList.length; i2++) {
    var evt = eventList[i2];
    if (emptyString(evt)) {
      continue;
    }
    var match2 = evt.match(eventRegex);
    if (match2) {
      var type2 = match2[1];
      var namespace = match2[2] ? match2[2] : null;
      var eventObj = makeEventObj(self2, {
        type: type2,
        namespace,
        target: self2.context
      });
      handler(self2, eventObj);
    }
  }
};
p.on = p.addListener = function(events, qualifier, callback, conf, confOverrides) {
  forEachEvent(this, function(self2, event3, type2, namespace, qualifier2, callback2, conf2) {
    if (fn$6(callback2)) {
      self2.listeners.push({
        event: event3,
        // full event string
        callback: callback2,
        // callback to run
        type: type2,
        // the event type (e.g. 'click')
        namespace,
        // the event namespace (e.g. ".foo")
        qualifier: qualifier2,
        // a restriction on whether to match this emitter
        conf: conf2
        // additional configuration
      });
    }
  }, events, qualifier, callback, conf, confOverrides);
  return this;
};
p.one = function(events, qualifier, callback, conf) {
  return this.on(events, qualifier, callback, conf, {
    one: true
  });
};
p.removeListener = p.off = function(events, qualifier, callback, conf) {
  var _this = this;
  if (this.emitting !== 0) {
    this.listeners = copyArray(this.listeners);
  }
  var listeners = this.listeners;
  var _loop = function _loop2(i3) {
    var listener = listeners[i3];
    forEachEvent(_this, function(self2, event3, type2, namespace, qualifier2, callback2) {
      if ((listener.type === type2 || events === "*") && (!namespace && listener.namespace !== ".*" || listener.namespace === namespace) && (!qualifier2 || self2.qualifierCompare(listener.qualifier, qualifier2)) && (!callback2 || listener.callback === callback2)) {
        listeners.splice(i3, 1);
        return false;
      }
    }, events, qualifier, callback, conf);
  };
  for (var i2 = listeners.length - 1; i2 >= 0; i2--) {
    _loop(i2);
  }
  return this;
};
p.removeAllListeners = function() {
  return this.removeListener("*");
};
p.emit = p.trigger = function(events, extraParams, manualCallback) {
  var listeners = this.listeners;
  var numListenersBeforeEmit = listeners.length;
  this.emitting++;
  if (!array(extraParams)) {
    extraParams = [extraParams];
  }
  forEachEventObj(this, function(self2, eventObj) {
    if (manualCallback != null) {
      listeners = [{
        event: eventObj.event,
        type: eventObj.type,
        namespace: eventObj.namespace,
        callback: manualCallback
      }];
      numListenersBeforeEmit = listeners.length;
    }
    var _loop2 = function _loop22() {
      var listener = listeners[i2];
      if (listener.type === eventObj.type && (!listener.namespace || listener.namespace === eventObj.namespace || listener.namespace === universalNamespace) && self2.eventMatches(self2.context, listener, eventObj)) {
        var args = [eventObj];
        if (extraParams != null) {
          push(args, extraParams);
        }
        self2.beforeEmit(self2.context, listener, eventObj);
        if (listener.conf && listener.conf.one) {
          self2.listeners = self2.listeners.filter(function(l2) {
            return l2 !== listener;
          });
        }
        var context = self2.callbackContext(self2.context, listener, eventObj);
        var ret = listener.callback.apply(context, args);
        self2.afterEmit(self2.context, listener, eventObj);
        if (ret === false) {
          eventObj.stopPropagation();
          eventObj.preventDefault();
        }
      }
    };
    for (var i2 = 0; i2 < numListenersBeforeEmit; i2++) {
      _loop2();
    }
    if (self2.bubble(self2.context) && !eventObj.isPropagationStopped()) {
      self2.parent(self2.context).emit(eventObj, extraParams);
    }
  }, events);
  this.emitting--;
  return this;
};
var emitterOptions$1 = {
  qualifierCompare: function qualifierCompare2(selector1, selector2) {
    if (selector1 == null || selector2 == null) {
      return selector1 == null && selector2 == null;
    } else {
      return selector1.sameText(selector2);
    }
  },
  eventMatches: function eventMatches2(ele, listener, eventObj) {
    var selector = listener.qualifier;
    if (selector != null) {
      return ele !== eventObj.target && element(eventObj.target) && selector.matches(eventObj.target);
    }
    return true;
  },
  addEventFields: function addEventFields2(ele, evt) {
    evt.cy = ele.cy();
    evt.target = ele;
  },
  callbackContext: function callbackContext2(ele, listener, eventObj) {
    return listener.qualifier != null ? eventObj.target : ele;
  },
  beforeEmit: function beforeEmit2(context, listener) {
    if (listener.conf && listener.conf.once) {
      listener.conf.onceCollection.removeListener(listener.event, listener.qualifier, listener.callback);
    }
  },
  bubble: function bubble2() {
    return true;
  },
  parent: function parent3(ele) {
    return ele.isChild() ? ele.parent() : ele.cy();
  }
};
var argSelector$1 = function argSelector(arg) {
  if (string(arg)) {
    return new Selector(arg);
  } else {
    return arg;
  }
};
var elesfn$9 = {
  createEmitter: function createEmitter() {
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      var _p = ele._private;
      if (!_p.emitter) {
        _p.emitter = new Emitter2(emitterOptions$1, ele);
      }
    }
    return this;
  },
  emitter: function emitter() {
    return this._private.emitter;
  },
  on: function on(events, selector, callback) {
    var argSel = argSelector$1(selector);
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      ele.emitter().on(events, argSel, callback);
    }
    return this;
  },
  removeListener: function removeListener(events, selector, callback) {
    var argSel = argSelector$1(selector);
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      ele.emitter().removeListener(events, argSel, callback);
    }
    return this;
  },
  removeAllListeners: function removeAllListeners() {
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      ele.emitter().removeAllListeners();
    }
    return this;
  },
  one: function one(events, selector, callback) {
    var argSel = argSelector$1(selector);
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      ele.emitter().one(events, argSel, callback);
    }
    return this;
  },
  once: function once(events, selector, callback) {
    var argSel = argSelector$1(selector);
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      ele.emitter().on(events, argSel, callback, {
        once: true,
        onceCollection: this
      });
    }
  },
  emit: function emit(events, extraParams) {
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      ele.emitter().emit(events, extraParams);
    }
    return this;
  },
  emitAndNotify: function emitAndNotify(event3, extraParams) {
    if (this.length === 0) {
      return;
    }
    this.cy().notify(event3, this);
    this.emit(event3, extraParams);
    return this;
  }
};
define2.eventAliasesOn(elesfn$9);
var elesfn$8 = {
  nodes: function nodes(selector) {
    return this.filter(function(ele) {
      return ele.isNode();
    }).filter(selector);
  },
  edges: function edges(selector) {
    return this.filter(function(ele) {
      return ele.isEdge();
    }).filter(selector);
  },
  // internal helper to get nodes and edges as separate collections with single iteration over elements
  byGroup: function byGroup() {
    var nodes3 = this.spawn();
    var edges3 = this.spawn();
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      if (ele.isNode()) {
        nodes3.push(ele);
      } else {
        edges3.push(ele);
      }
    }
    return {
      nodes: nodes3,
      edges: edges3
    };
  },
  filter: function filter3(_filter, thisArg) {
    if (_filter === void 0) {
      return this;
    } else if (string(_filter) || elementOrCollection(_filter)) {
      return new Selector(_filter).filter(this);
    } else if (fn$6(_filter)) {
      var filterEles = this.spawn();
      var eles = this;
      for (var i2 = 0; i2 < eles.length; i2++) {
        var ele = eles[i2];
        var include = thisArg ? _filter.apply(thisArg, [ele, i2, eles]) : _filter(ele, i2, eles);
        if (include) {
          filterEles.push(ele);
        }
      }
      return filterEles;
    }
    return this.spawn();
  },
  not: function not(toRemove) {
    if (!toRemove) {
      return this;
    } else {
      if (string(toRemove)) {
        toRemove = this.filter(toRemove);
      }
      var elements = this.spawn();
      for (var i2 = 0; i2 < this.length; i2++) {
        var element3 = this[i2];
        var remove2 = toRemove.has(element3);
        if (!remove2) {
          elements.push(element3);
        }
      }
      return elements;
    }
  },
  absoluteComplement: function absoluteComplement() {
    var cy = this.cy();
    return cy.mutableElements().not(this);
  },
  intersect: function intersect(other) {
    if (string(other)) {
      var selector = other;
      return this.filter(selector);
    }
    var elements = this.spawn();
    var col1 = this;
    var col2 = other;
    var col1Smaller = this.length < other.length;
    var colS = col1Smaller ? col1 : col2;
    var colL = col1Smaller ? col2 : col1;
    for (var i2 = 0; i2 < colS.length; i2++) {
      var ele = colS[i2];
      if (colL.has(ele)) {
        elements.push(ele);
      }
    }
    return elements;
  },
  xor: function xor(other) {
    var cy = this._private.cy;
    if (string(other)) {
      other = cy.$(other);
    }
    var elements = this.spawn();
    var col1 = this;
    var col2 = other;
    var add3 = function add4(col, other2) {
      for (var i2 = 0; i2 < col.length; i2++) {
        var ele = col[i2];
        var id2 = ele._private.data.id;
        var inOther = other2.hasElementWithId(id2);
        if (!inOther) {
          elements.push(ele);
        }
      }
    };
    add3(col1, col2);
    add3(col2, col1);
    return elements;
  },
  diff: function diff(other) {
    var cy = this._private.cy;
    if (string(other)) {
      other = cy.$(other);
    }
    var left = this.spawn();
    var right = this.spawn();
    var both = this.spawn();
    var col1 = this;
    var col2 = other;
    var add3 = function add4(col, other2, retEles) {
      for (var i2 = 0; i2 < col.length; i2++) {
        var ele = col[i2];
        var id2 = ele._private.data.id;
        var inOther = other2.hasElementWithId(id2);
        if (inOther) {
          both.merge(ele);
        } else {
          retEles.push(ele);
        }
      }
    };
    add3(col1, col2, left);
    add3(col2, col1, right);
    return {
      left,
      right,
      both
    };
  },
  add: function add(toAdd) {
    var cy = this._private.cy;
    if (!toAdd) {
      return this;
    }
    if (string(toAdd)) {
      var selector = toAdd;
      toAdd = cy.mutableElements().filter(selector);
    }
    var elements = this.spawnSelf();
    for (var i2 = 0; i2 < toAdd.length; i2++) {
      var ele = toAdd[i2];
      var add3 = !this.has(ele);
      if (add3) {
        elements.push(ele);
      }
    }
    return elements;
  },
  // in place merge on calling collection
  merge: function merge(toAdd) {
    var _p = this._private;
    var cy = _p.cy;
    if (!toAdd) {
      return this;
    }
    if (toAdd && string(toAdd)) {
      var selector = toAdd;
      toAdd = cy.mutableElements().filter(selector);
    }
    var map2 = _p.map;
    for (var i2 = 0; i2 < toAdd.length; i2++) {
      var toAddEle = toAdd[i2];
      var id2 = toAddEle._private.data.id;
      var add3 = !map2.has(id2);
      if (add3) {
        var index = this.length++;
        this[index] = toAddEle;
        map2.set(id2, {
          ele: toAddEle,
          index
        });
      }
    }
    return this;
  },
  unmergeAt: function unmergeAt(i2) {
    var ele = this[i2];
    var id2 = ele.id();
    var _p = this._private;
    var map2 = _p.map;
    this[i2] = void 0;
    map2["delete"](id2);
    var unmergedLastEle = i2 === this.length - 1;
    if (this.length > 1 && !unmergedLastEle) {
      var lastEleI = this.length - 1;
      var lastEle = this[lastEleI];
      var lastEleId = lastEle._private.data.id;
      this[lastEleI] = void 0;
      this[i2] = lastEle;
      map2.set(lastEleId, {
        ele: lastEle,
        index: i2
      });
    }
    this.length--;
    return this;
  },
  // remove single ele in place in calling collection
  unmergeOne: function unmergeOne(ele) {
    ele = ele[0];
    var _p = this._private;
    var id2 = ele._private.data.id;
    var map2 = _p.map;
    var entry = map2.get(id2);
    if (!entry) {
      return this;
    }
    var i2 = entry.index;
    this.unmergeAt(i2);
    return this;
  },
  // remove eles in place on calling collection
  unmerge: function unmerge(toRemove) {
    var cy = this._private.cy;
    if (!toRemove) {
      return this;
    }
    if (toRemove && string(toRemove)) {
      var selector = toRemove;
      toRemove = cy.mutableElements().filter(selector);
    }
    for (var i2 = 0; i2 < toRemove.length; i2++) {
      this.unmergeOne(toRemove[i2]);
    }
    return this;
  },
  unmergeBy: function unmergeBy(toRmFn) {
    for (var i2 = this.length - 1; i2 >= 0; i2--) {
      var ele = this[i2];
      if (toRmFn(ele)) {
        this.unmergeAt(i2);
      }
    }
    return this;
  },
  map: function map(mapFn, thisArg) {
    var arr = [];
    var eles = this;
    for (var i2 = 0; i2 < eles.length; i2++) {
      var ele = eles[i2];
      var ret = thisArg ? mapFn.apply(thisArg, [ele, i2, eles]) : mapFn(ele, i2, eles);
      arr.push(ret);
    }
    return arr;
  },
  reduce: function reduce(fn4, initialValue) {
    var val = initialValue;
    var eles = this;
    for (var i2 = 0; i2 < eles.length; i2++) {
      val = fn4(val, eles[i2], i2, eles);
    }
    return val;
  },
  max: function max4(valFn, thisArg) {
    var max5 = -Infinity;
    var maxEle;
    var eles = this;
    for (var i2 = 0; i2 < eles.length; i2++) {
      var ele = eles[i2];
      var val = thisArg ? valFn.apply(thisArg, [ele, i2, eles]) : valFn(ele, i2, eles);
      if (val > max5) {
        max5 = val;
        maxEle = ele;
      }
    }
    return {
      value: max5,
      ele: maxEle
    };
  },
  min: function min3(valFn, thisArg) {
    var min4 = Infinity;
    var minEle;
    var eles = this;
    for (var i2 = 0; i2 < eles.length; i2++) {
      var ele = eles[i2];
      var val = thisArg ? valFn.apply(thisArg, [ele, i2, eles]) : valFn(ele, i2, eles);
      if (val < min4) {
        min4 = val;
        minEle = ele;
      }
    }
    return {
      value: min4,
      ele: minEle
    };
  }
};
var fn$1 = elesfn$8;
fn$1["u"] = fn$1["|"] = fn$1["+"] = fn$1.union = fn$1.or = fn$1.add;
fn$1["\\"] = fn$1["!"] = fn$1["-"] = fn$1.difference = fn$1.relativeComplement = fn$1.subtract = fn$1.not;
fn$1["n"] = fn$1["&"] = fn$1["."] = fn$1.and = fn$1.intersection = fn$1.intersect;
fn$1["^"] = fn$1["(+)"] = fn$1["(-)"] = fn$1.symmetricDifference = fn$1.symdiff = fn$1.xor;
fn$1.fnFilter = fn$1.filterFn = fn$1.stdFilter = fn$1.filter;
fn$1.complement = fn$1.abscomp = fn$1.absoluteComplement;
var elesfn$7 = {
  isNode: function isNode() {
    return this.group() === "nodes";
  },
  isEdge: function isEdge() {
    return this.group() === "edges";
  },
  isLoop: function isLoop() {
    return this.isEdge() && this.source()[0] === this.target()[0];
  },
  isSimple: function isSimple() {
    return this.isEdge() && this.source()[0] !== this.target()[0];
  },
  group: function group() {
    var ele = this[0];
    if (ele) {
      return ele._private.group;
    }
  }
};
var zIndexSort = function zIndexSort2(a2, b2) {
  var cy = a2.cy();
  var hasCompoundNodes2 = cy.hasCompoundNodes();
  function getDepth(ele) {
    var style3 = ele.pstyle("z-compound-depth");
    if (style3.value === "auto") {
      return hasCompoundNodes2 ? ele.zDepth() : 0;
    } else if (style3.value === "bottom") {
      return -1;
    } else if (style3.value === "top") {
      return MAX_INT$1;
    }
    return 0;
  }
  var depthDiff = getDepth(a2) - getDepth(b2);
  if (depthDiff !== 0) {
    return depthDiff;
  }
  function getEleDepth(ele) {
    var style3 = ele.pstyle("z-index-compare");
    if (style3.value === "auto") {
      return ele.isNode() ? 1 : 0;
    }
    return 0;
  }
  var eleDiff = getEleDepth(a2) - getEleDepth(b2);
  if (eleDiff !== 0) {
    return eleDiff;
  }
  var zDiff = a2.pstyle("z-index").value - b2.pstyle("z-index").value;
  if (zDiff !== 0) {
    return zDiff;
  }
  return a2.poolIndex() - b2.poolIndex();
};
var elesfn$6 = {
  forEach: function forEach(fn4, thisArg) {
    if (fn$6(fn4)) {
      var N2 = this.length;
      for (var i2 = 0; i2 < N2; i2++) {
        var ele = this[i2];
        var ret = thisArg ? fn4.apply(thisArg, [ele, i2, this]) : fn4(ele, i2, this);
        if (ret === false) {
          break;
        }
      }
    }
    return this;
  },
  toArray: function toArray() {
    var array3 = [];
    for (var i2 = 0; i2 < this.length; i2++) {
      array3.push(this[i2]);
    }
    return array3;
  },
  slice: function slice(start, end) {
    var array3 = [];
    var thisSize = this.length;
    if (end == null) {
      end = thisSize;
    }
    if (start == null) {
      start = 0;
    }
    if (start < 0) {
      start = thisSize + start;
    }
    if (end < 0) {
      end = thisSize + end;
    }
    for (var i2 = start; i2 >= 0 && i2 < end && i2 < thisSize; i2++) {
      array3.push(this[i2]);
    }
    return this.spawn(array3);
  },
  size: function size() {
    return this.length;
  },
  eq: function eq(i2) {
    return this[i2] || this.spawn();
  },
  first: function first() {
    return this[0] || this.spawn();
  },
  last: function last() {
    return this[this.length - 1] || this.spawn();
  },
  empty: function empty() {
    return this.length === 0;
  },
  nonempty: function nonempty() {
    return !this.empty();
  },
  sort: function sort(sortFn) {
    if (!fn$6(sortFn)) {
      return this;
    }
    var sorted = this.toArray().sort(sortFn);
    return this.spawn(sorted);
  },
  sortByZIndex: function sortByZIndex() {
    return this.sort(zIndexSort);
  },
  zDepth: function zDepth() {
    var ele = this[0];
    if (!ele) {
      return void 0;
    }
    var _p = ele._private;
    var group2 = _p.group;
    if (group2 === "nodes") {
      var depth = _p.data.parent ? ele.parents().size() : 0;
      if (!ele.isParent()) {
        return MAX_INT$1 - 1;
      }
      return depth;
    } else {
      var src = _p.source;
      var tgt = _p.target;
      var srcDepth = src.zDepth();
      var tgtDepth = tgt.zDepth();
      return Math.max(srcDepth, tgtDepth, 0);
    }
  }
};
elesfn$6.each = elesfn$6.forEach;
var defineSymbolIterator = function defineSymbolIterator2() {
  var typeofUndef = "undefined";
  var isIteratorSupported = (typeof Symbol === "undefined" ? "undefined" : _typeof(Symbol)) != typeofUndef && _typeof(Symbol.iterator) != typeofUndef;
  if (isIteratorSupported) {
    elesfn$6[Symbol.iterator] = function() {
      var _this = this;
      var entry = {
        value: void 0,
        done: false
      };
      var i2 = 0;
      var length = this.length;
      return _defineProperty$1({
        next: function next2() {
          if (i2 < length) {
            entry.value = _this[i2++];
          } else {
            entry.value = void 0;
            entry.done = true;
          }
          return entry;
        }
      }, Symbol.iterator, function() {
        return this;
      });
    };
  }
};
defineSymbolIterator();
var getLayoutDimensionOptions = defaults$g({
  nodeDimensionsIncludeLabels: false
});
var elesfn$5 = {
  // Calculates and returns node dimensions { x, y } based on options given
  layoutDimensions: function layoutDimensions(options3) {
    options3 = getLayoutDimensionOptions(options3);
    var dims;
    if (!this.takesUpSpace()) {
      dims = {
        w: 0,
        h: 0
      };
    } else if (options3.nodeDimensionsIncludeLabels) {
      var bbDim = this.boundingBox();
      dims = {
        w: bbDim.w,
        h: bbDim.h
      };
    } else {
      dims = {
        w: this.outerWidth(),
        h: this.outerHeight()
      };
    }
    if (dims.w === 0 || dims.h === 0) {
      dims.w = dims.h = 1;
    }
    return dims;
  },
  // using standard layout options, apply position function (w/ or w/o animation)
  layoutPositions: function layoutPositions(layout6, options3, fn4) {
    var nodes3 = this.nodes().filter(function(n2) {
      return !n2.isParent();
    });
    var cy = this.cy();
    var layoutEles = options3.eles;
    var getMemoizeKey = function getMemoizeKey2(node2) {
      return node2.id();
    };
    var fnMem = memoize(fn4, getMemoizeKey);
    layout6.emit({
      type: "layoutstart",
      layout: layout6
    });
    layout6.animations = [];
    var calculateSpacing = function calculateSpacing2(spacing, nodesBb, pos) {
      var center2 = {
        x: nodesBb.x1 + nodesBb.w / 2,
        y: nodesBb.y1 + nodesBb.h / 2
      };
      var spacingVector = {
        // scale from center of bounding box (not necessarily 0,0)
        x: (pos.x - center2.x) * spacing,
        y: (pos.y - center2.y) * spacing
      };
      return {
        x: center2.x + spacingVector.x,
        y: center2.y + spacingVector.y
      };
    };
    var useSpacingFactor = options3.spacingFactor && options3.spacingFactor !== 1;
    var spacingBb = function spacingBb2() {
      if (!useSpacingFactor) {
        return null;
      }
      var bb2 = makeBoundingBox();
      for (var i3 = 0; i3 < nodes3.length; i3++) {
        var node2 = nodes3[i3];
        var pos = fnMem(node2, i3);
        expandBoundingBoxByPoint(bb2, pos.x, pos.y);
      }
      return bb2;
    };
    var bb = spacingBb();
    var getFinalPos = memoize(function(node2, i3) {
      var newPos2 = fnMem(node2, i3);
      if (useSpacingFactor) {
        var spacing = Math.abs(options3.spacingFactor);
        newPos2 = calculateSpacing(spacing, bb, newPos2);
      }
      if (options3.transform != null) {
        newPos2 = options3.transform(node2, newPos2);
      }
      return newPos2;
    }, getMemoizeKey);
    if (options3.animate) {
      for (var i2 = 0; i2 < nodes3.length; i2++) {
        var node = nodes3[i2];
        var newPos = getFinalPos(node, i2);
        var animateNode = options3.animateFilter == null || options3.animateFilter(node, i2);
        if (animateNode) {
          var ani = node.animation({
            position: newPos,
            duration: options3.animationDuration,
            easing: options3.animationEasing
          });
          layout6.animations.push(ani);
        } else {
          node.position(newPos);
        }
      }
      if (options3.fit) {
        var fitAni = cy.animation({
          fit: {
            boundingBox: layoutEles.boundingBoxAt(getFinalPos),
            padding: options3.padding
          },
          duration: options3.animationDuration,
          easing: options3.animationEasing
        });
        layout6.animations.push(fitAni);
      } else if (options3.zoom !== void 0 && options3.pan !== void 0) {
        var zoomPanAni = cy.animation({
          zoom: options3.zoom,
          pan: options3.pan,
          duration: options3.animationDuration,
          easing: options3.animationEasing
        });
        layout6.animations.push(zoomPanAni);
      }
      layout6.animations.forEach(function(ani2) {
        return ani2.play();
      });
      layout6.one("layoutready", options3.ready);
      layout6.emit({
        type: "layoutready",
        layout: layout6
      });
      Promise$1.all(layout6.animations.map(function(ani2) {
        return ani2.promise();
      })).then(function() {
        layout6.one("layoutstop", options3.stop);
        layout6.emit({
          type: "layoutstop",
          layout: layout6
        });
      });
    } else {
      nodes3.positions(getFinalPos);
      if (options3.fit) {
        cy.fit(options3.eles, options3.padding);
      }
      if (options3.zoom != null) {
        cy.zoom(options3.zoom);
      }
      if (options3.pan) {
        cy.pan(options3.pan);
      }
      layout6.one("layoutready", options3.ready);
      layout6.emit({
        type: "layoutready",
        layout: layout6
      });
      layout6.one("layoutstop", options3.stop);
      layout6.emit({
        type: "layoutstop",
        layout: layout6
      });
    }
    return this;
  },
  layout: function layout(options3) {
    var cy = this.cy();
    return cy.makeLayout(extend({}, options3, {
      eles: this
    }));
  }
};
elesfn$5.createLayout = elesfn$5.makeLayout = elesfn$5.layout;
function styleCache(key, fn4, ele) {
  var _p = ele._private;
  var cache3 = _p.styleCache = _p.styleCache || [];
  var val;
  if ((val = cache3[key]) != null) {
    return val;
  } else {
    val = cache3[key] = fn4(ele);
    return val;
  }
}
function cacheStyleFunction(key, fn4) {
  key = hashString(key);
  return function cachedStyleFunction(ele) {
    return styleCache(key, fn4, ele);
  };
}
function cachePrototypeStyleFunction(key, fn4) {
  key = hashString(key);
  var selfFn = function selfFn2(ele) {
    return fn4.call(ele);
  };
  return function cachedPrototypeStyleFunction() {
    var ele = this[0];
    if (ele) {
      return styleCache(key, selfFn, ele);
    }
  };
}
var elesfn$4 = {
  recalculateRenderedStyle: function recalculateRenderedStyle(useCache) {
    var cy = this.cy();
    var renderer3 = cy.renderer();
    var styleEnabled2 = cy.styleEnabled();
    if (renderer3 && styleEnabled2) {
      renderer3.recalculateRenderedStyle(this, useCache);
    }
    return this;
  },
  dirtyStyleCache: function dirtyStyleCache() {
    var cy = this.cy();
    var dirty = function dirty2(ele) {
      return ele._private.styleCache = null;
    };
    if (cy.hasCompoundNodes()) {
      var eles;
      eles = this.spawnSelf().merge(this.descendants()).merge(this.parents());
      eles.merge(eles.connectedEdges());
      eles.forEach(dirty);
    } else {
      this.forEach(function(ele) {
        dirty(ele);
        ele.connectedEdges().forEach(dirty);
      });
    }
    return this;
  },
  // fully updates (recalculates) the style for the elements
  updateStyle: function updateStyle(notifyRenderer) {
    var cy = this._private.cy;
    if (!cy.styleEnabled()) {
      return this;
    }
    if (cy.batching()) {
      var bEles = cy._private.batchStyleEles;
      bEles.merge(this);
      return this;
    }
    var hasCompounds = cy.hasCompoundNodes();
    var updatedEles = this;
    notifyRenderer = notifyRenderer || notifyRenderer === void 0 ? true : false;
    if (hasCompounds) {
      updatedEles = this.spawnSelf().merge(this.descendants()).merge(this.parents());
    }
    var changedEles = updatedEles;
    if (notifyRenderer) {
      changedEles.emitAndNotify("style");
    } else {
      changedEles.emit("style");
    }
    updatedEles.forEach(function(ele) {
      return ele._private.styleDirty = true;
    });
    return this;
  },
  // private: clears dirty flag and recalculates style
  cleanStyle: function cleanStyle() {
    var cy = this.cy();
    if (!cy.styleEnabled()) {
      return;
    }
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      if (ele._private.styleDirty) {
        ele._private.styleDirty = false;
        cy.style().apply(ele);
      }
    }
  },
  // get the internal parsed style object for the specified property
  parsedStyle: function parsedStyle(property) {
    var includeNonDefault = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    var ele = this[0];
    var cy = ele.cy();
    if (!cy.styleEnabled()) {
      return;
    }
    if (ele) {
      if (ele._private.styleDirty) {
        ele._private.styleDirty = false;
        cy.style().apply(ele);
      }
      var overriddenStyle = ele._private.style[property];
      if (overriddenStyle != null) {
        return overriddenStyle;
      } else if (includeNonDefault) {
        return cy.style().getDefaultProperty(property);
      } else {
        return null;
      }
    }
  },
  numericStyle: function numericStyle(property) {
    var ele = this[0];
    if (!ele.cy().styleEnabled()) {
      return;
    }
    if (ele) {
      var pstyle = ele.pstyle(property);
      return pstyle.pfValue !== void 0 ? pstyle.pfValue : pstyle.value;
    }
  },
  numericStyleUnits: function numericStyleUnits(property) {
    var ele = this[0];
    if (!ele.cy().styleEnabled()) {
      return;
    }
    if (ele) {
      return ele.pstyle(property).units;
    }
  },
  // get the specified css property as a rendered value (i.e. on-screen value)
  // or get the whole rendered style if no property specified (NB doesn't allow setting)
  renderedStyle: function renderedStyle(property) {
    var cy = this.cy();
    if (!cy.styleEnabled()) {
      return this;
    }
    var ele = this[0];
    if (ele) {
      return cy.style().getRenderedStyle(ele, property);
    }
  },
  // read the calculated css style of the element or override the style (via a bypass)
  style: function style(name, value) {
    var cy = this.cy();
    if (!cy.styleEnabled()) {
      return this;
    }
    var updateTransitions = false;
    var style3 = cy.style();
    if (plainObject(name)) {
      var props = name;
      style3.applyBypass(this, props, updateTransitions);
      this.emitAndNotify("style");
    } else if (string(name)) {
      if (value === void 0) {
        var ele = this[0];
        if (ele) {
          return style3.getStylePropertyValue(ele, name);
        } else {
          return;
        }
      } else {
        style3.applyBypass(this, name, value, updateTransitions);
        this.emitAndNotify("style");
      }
    } else if (name === void 0) {
      var _ele = this[0];
      if (_ele) {
        return style3.getRawStyle(_ele);
      } else {
        return;
      }
    }
    return this;
  },
  removeStyle: function removeStyle(names) {
    var cy = this.cy();
    if (!cy.styleEnabled()) {
      return this;
    }
    var updateTransitions = false;
    var style3 = cy.style();
    var eles = this;
    if (names === void 0) {
      for (var i2 = 0; i2 < eles.length; i2++) {
        var ele = eles[i2];
        style3.removeAllBypasses(ele, updateTransitions);
      }
    } else {
      names = names.split(/\s+/);
      for (var _i2 = 0; _i2 < eles.length; _i2++) {
        var _ele2 = eles[_i2];
        style3.removeBypasses(_ele2, names, updateTransitions);
      }
    }
    this.emitAndNotify("style");
    return this;
  },
  show: function show() {
    this.css("display", "element");
    return this;
  },
  hide: function hide() {
    this.css("display", "none");
    return this;
  },
  effectiveOpacity: function effectiveOpacity() {
    var cy = this.cy();
    if (!cy.styleEnabled()) {
      return 1;
    }
    var hasCompoundNodes2 = cy.hasCompoundNodes();
    var ele = this[0];
    if (ele) {
      var _p = ele._private;
      var parentOpacity = ele.pstyle("opacity").value;
      if (!hasCompoundNodes2) {
        return parentOpacity;
      }
      var parents2 = !_p.data.parent ? null : ele.parents();
      if (parents2) {
        for (var i2 = 0; i2 < parents2.length; i2++) {
          var parent4 = parents2[i2];
          var opacity = parent4.pstyle("opacity").value;
          parentOpacity = opacity * parentOpacity;
        }
      }
      return parentOpacity;
    }
  },
  transparent: function transparent() {
    var cy = this.cy();
    if (!cy.styleEnabled()) {
      return false;
    }
    var ele = this[0];
    var hasCompoundNodes2 = ele.cy().hasCompoundNodes();
    if (ele) {
      if (!hasCompoundNodes2) {
        return ele.pstyle("opacity").value === 0;
      } else {
        return ele.effectiveOpacity() === 0;
      }
    }
  },
  backgrounding: function backgrounding() {
    var cy = this.cy();
    if (!cy.styleEnabled()) {
      return false;
    }
    var ele = this[0];
    return ele._private.backgrounding ? true : false;
  }
};
function checkCompound(ele, parentOk) {
  var _p = ele._private;
  var parents2 = _p.data.parent ? ele.parents() : null;
  if (parents2) {
    for (var i2 = 0; i2 < parents2.length; i2++) {
      var parent4 = parents2[i2];
      if (!parentOk(parent4)) {
        return false;
      }
    }
  }
  return true;
}
function defineDerivedStateFunction(specs) {
  var ok = specs.ok;
  var edgeOkViaNode = specs.edgeOkViaNode || specs.ok;
  var parentOk = specs.parentOk || specs.ok;
  return function() {
    var cy = this.cy();
    if (!cy.styleEnabled()) {
      return true;
    }
    var ele = this[0];
    var hasCompoundNodes2 = cy.hasCompoundNodes();
    if (ele) {
      var _p = ele._private;
      if (!ok(ele)) {
        return false;
      }
      if (ele.isNode()) {
        return !hasCompoundNodes2 || checkCompound(ele, parentOk);
      } else {
        var src = _p.source;
        var tgt = _p.target;
        return edgeOkViaNode(src) && (!hasCompoundNodes2 || checkCompound(src, edgeOkViaNode)) && (src === tgt || edgeOkViaNode(tgt) && (!hasCompoundNodes2 || checkCompound(tgt, edgeOkViaNode)));
      }
    }
  };
}
var eleTakesUpSpace = cacheStyleFunction("eleTakesUpSpace", function(ele) {
  return ele.pstyle("display").value === "element" && ele.width() !== 0 && (ele.isNode() ? ele.height() !== 0 : true);
});
elesfn$4.takesUpSpace = cachePrototypeStyleFunction("takesUpSpace", defineDerivedStateFunction({
  ok: eleTakesUpSpace
}));
var eleInteractive = cacheStyleFunction("eleInteractive", function(ele) {
  return ele.pstyle("events").value === "yes" && ele.pstyle("visibility").value === "visible" && eleTakesUpSpace(ele);
});
var parentInteractive = cacheStyleFunction("parentInteractive", function(parent4) {
  return parent4.pstyle("visibility").value === "visible" && eleTakesUpSpace(parent4);
});
elesfn$4.interactive = cachePrototypeStyleFunction("interactive", defineDerivedStateFunction({
  ok: eleInteractive,
  parentOk: parentInteractive,
  edgeOkViaNode: eleTakesUpSpace
}));
elesfn$4.noninteractive = function() {
  var ele = this[0];
  if (ele) {
    return !ele.interactive();
  }
};
var eleVisible = cacheStyleFunction("eleVisible", function(ele) {
  return ele.pstyle("visibility").value === "visible" && ele.pstyle("opacity").pfValue !== 0 && eleTakesUpSpace(ele);
});
var edgeVisibleViaNode = eleTakesUpSpace;
elesfn$4.visible = cachePrototypeStyleFunction("visible", defineDerivedStateFunction({
  ok: eleVisible,
  edgeOkViaNode: edgeVisibleViaNode
}));
elesfn$4.hidden = function() {
  var ele = this[0];
  if (ele) {
    return !ele.visible();
  }
};
elesfn$4.isBundledBezier = cachePrototypeStyleFunction("isBundledBezier", function() {
  if (!this.cy().styleEnabled()) {
    return false;
  }
  return !this.removed() && this.pstyle("curve-style").value === "bezier" && this.takesUpSpace();
});
elesfn$4.bypass = elesfn$4.css = elesfn$4.style;
elesfn$4.renderedCss = elesfn$4.renderedStyle;
elesfn$4.removeBypass = elesfn$4.removeCss = elesfn$4.removeStyle;
elesfn$4.pstyle = elesfn$4.parsedStyle;
var elesfn$3 = {};
function defineSwitchFunction(params) {
  return function() {
    var args = arguments;
    var changedEles = [];
    if (args.length === 2) {
      var data4 = args[0];
      var handler = args[1];
      this.on(params.event, data4, handler);
    } else if (args.length === 1 && fn$6(args[0])) {
      var _handler = args[0];
      this.on(params.event, _handler);
    } else if (args.length === 0 || args.length === 1 && array(args[0])) {
      var addlEvents = args.length === 1 ? args[0] : null;
      for (var i2 = 0; i2 < this.length; i2++) {
        var ele = this[i2];
        var able = !params.ableField || ele._private[params.ableField];
        var changed = ele._private[params.field] != params.value;
        if (params.overrideAble) {
          var overrideAble2 = params.overrideAble(ele);
          if (overrideAble2 !== void 0) {
            able = overrideAble2;
            if (!overrideAble2) {
              return this;
            }
          }
        }
        if (able) {
          ele._private[params.field] = params.value;
          if (changed) {
            changedEles.push(ele);
          }
        }
      }
      var changedColl = this.spawn(changedEles);
      changedColl.updateStyle();
      changedColl.emit(params.event);
      if (addlEvents) {
        changedColl.emit(addlEvents);
      }
    }
    return this;
  };
}
function defineSwitchSet(params) {
  elesfn$3[params.field] = function() {
    var ele = this[0];
    if (ele) {
      if (params.overrideField) {
        var val = params.overrideField(ele);
        if (val !== void 0) {
          return val;
        }
      }
      return ele._private[params.field];
    }
  };
  elesfn$3[params.on] = defineSwitchFunction({
    event: params.on,
    field: params.field,
    ableField: params.ableField,
    overrideAble: params.overrideAble,
    value: true
  });
  elesfn$3[params.off] = defineSwitchFunction({
    event: params.off,
    field: params.field,
    ableField: params.ableField,
    overrideAble: params.overrideAble,
    value: false
  });
}
defineSwitchSet({
  field: "locked",
  overrideField: function overrideField(ele) {
    return ele.cy().autolock() ? true : void 0;
  },
  on: "lock",
  off: "unlock"
});
defineSwitchSet({
  field: "grabbable",
  overrideField: function overrideField2(ele) {
    return ele.cy().autoungrabify() || ele.pannable() ? false : void 0;
  },
  on: "grabify",
  off: "ungrabify"
});
defineSwitchSet({
  field: "selected",
  ableField: "selectable",
  overrideAble: function overrideAble(ele) {
    return ele.cy().autounselectify() ? false : void 0;
  },
  on: "select",
  off: "unselect"
});
defineSwitchSet({
  field: "selectable",
  overrideField: function overrideField3(ele) {
    return ele.cy().autounselectify() ? false : void 0;
  },
  on: "selectify",
  off: "unselectify"
});
elesfn$3.deselect = elesfn$3.unselect;
elesfn$3.grabbed = function() {
  var ele = this[0];
  if (ele) {
    return ele._private.grabbed;
  }
};
defineSwitchSet({
  field: "active",
  on: "activate",
  off: "unactivate"
});
defineSwitchSet({
  field: "pannable",
  on: "panify",
  off: "unpanify"
});
elesfn$3.inactive = function() {
  var ele = this[0];
  if (ele) {
    return !ele._private.active;
  }
};
var elesfn$2 = {};
var defineDagExtremity = function defineDagExtremity2(params) {
  return function dagExtremityImpl(selector) {
    var eles = this;
    var ret = [];
    for (var i2 = 0; i2 < eles.length; i2++) {
      var ele = eles[i2];
      if (!ele.isNode()) {
        continue;
      }
      var disqualified = false;
      var edges3 = ele.connectedEdges();
      for (var j2 = 0; j2 < edges3.length; j2++) {
        var edge = edges3[j2];
        var src = edge.source();
        var tgt = edge.target();
        if (params.noIncomingEdges && tgt === ele && src !== ele || params.noOutgoingEdges && src === ele && tgt !== ele) {
          disqualified = true;
          break;
        }
      }
      if (!disqualified) {
        ret.push(ele);
      }
    }
    return this.spawn(ret, true).filter(selector);
  };
};
var defineDagOneHop = function defineDagOneHop2(params) {
  return function(selector) {
    var eles = this;
    var oEles = [];
    for (var i2 = 0; i2 < eles.length; i2++) {
      var ele = eles[i2];
      if (!ele.isNode()) {
        continue;
      }
      var edges3 = ele.connectedEdges();
      for (var j2 = 0; j2 < edges3.length; j2++) {
        var edge = edges3[j2];
        var src = edge.source();
        var tgt = edge.target();
        if (params.outgoing && src === ele) {
          oEles.push(edge);
          oEles.push(tgt);
        } else if (params.incoming && tgt === ele) {
          oEles.push(edge);
          oEles.push(src);
        }
      }
    }
    return this.spawn(oEles, true).filter(selector);
  };
};
var defineDagAllHops = function defineDagAllHops2(params) {
  return function(selector) {
    var eles = this;
    var sEles = [];
    var sElesIds = {};
    for (; ; ) {
      var next2 = params.outgoing ? eles.outgoers() : eles.incomers();
      if (next2.length === 0) {
        break;
      }
      var newNext = false;
      for (var i2 = 0; i2 < next2.length; i2++) {
        var n2 = next2[i2];
        var nid = n2.id();
        if (!sElesIds[nid]) {
          sElesIds[nid] = true;
          sEles.push(n2);
          newNext = true;
        }
      }
      if (!newNext) {
        break;
      }
      eles = next2;
    }
    return this.spawn(sEles, true).filter(selector);
  };
};
elesfn$2.clearTraversalCache = function() {
  for (var i2 = 0; i2 < this.length; i2++) {
    this[i2]._private.traversalCache = null;
  }
};
extend(elesfn$2, {
  // get the root nodes in the DAG
  roots: defineDagExtremity({
    noIncomingEdges: true
  }),
  // get the leaf nodes in the DAG
  leaves: defineDagExtremity({
    noOutgoingEdges: true
  }),
  // normally called children in graph theory
  // these nodes =edges=> outgoing nodes
  outgoers: cache(defineDagOneHop({
    outgoing: true
  }), "outgoers"),
  // aka DAG descendants
  successors: defineDagAllHops({
    outgoing: true
  }),
  // normally called parents in graph theory
  // these nodes <=edges= incoming nodes
  incomers: cache(defineDagOneHop({
    incoming: true
  }), "incomers"),
  // aka DAG ancestors
  predecessors: defineDagAllHops({})
});
extend(elesfn$2, {
  neighborhood: cache(function(selector) {
    var elements = [];
    var nodes3 = this.nodes();
    for (var i2 = 0; i2 < nodes3.length; i2++) {
      var node = nodes3[i2];
      var connectedEdges = node.connectedEdges();
      for (var j2 = 0; j2 < connectedEdges.length; j2++) {
        var edge = connectedEdges[j2];
        var src = edge.source();
        var tgt = edge.target();
        var otherNode = node === src ? tgt : src;
        if (otherNode.length > 0) {
          elements.push(otherNode[0]);
        }
        elements.push(edge[0]);
      }
    }
    return this.spawn(elements, true).filter(selector);
  }, "neighborhood"),
  closedNeighborhood: function closedNeighborhood(selector) {
    return this.neighborhood().add(this).filter(selector);
  },
  openNeighborhood: function openNeighborhood(selector) {
    return this.neighborhood(selector);
  }
});
elesfn$2.neighbourhood = elesfn$2.neighborhood;
elesfn$2.closedNeighbourhood = elesfn$2.closedNeighborhood;
elesfn$2.openNeighbourhood = elesfn$2.openNeighborhood;
extend(elesfn$2, {
  source: cache(function sourceImpl(selector) {
    var ele = this[0];
    var src;
    if (ele) {
      src = ele._private.source || ele.cy().collection();
    }
    return src && selector ? src.filter(selector) : src;
  }, "source"),
  target: cache(function targetImpl(selector) {
    var ele = this[0];
    var tgt;
    if (ele) {
      tgt = ele._private.target || ele.cy().collection();
    }
    return tgt && selector ? tgt.filter(selector) : tgt;
  }, "target"),
  sources: defineSourceFunction({
    attr: "source"
  }),
  targets: defineSourceFunction({
    attr: "target"
  })
});
function defineSourceFunction(params) {
  return function sourceImpl2(selector) {
    var sources = [];
    for (var i2 = 0; i2 < this.length; i2++) {
      var ele = this[i2];
      var src = ele._private[params.attr];
      if (src) {
        sources.push(src);
      }
    }
    return this.spawn(sources, true).filter(selector);
  };
}
extend(elesfn$2, {
  edgesWith: cache(defineEdgesWithFunction(), "edgesWith"),
  edgesTo: cache(defineEdgesWithFunction({
    thisIsSrc: true
  }), "edgesTo")
});
function defineEdgesWithFunction(params) {
  return function edgesWithImpl(otherNodes) {
    var elements = [];
    var cy = this._private.cy;
    var p3 = params || {};
    if (string(otherNodes)) {
      otherNodes = cy.$(otherNodes);
    }
    for (var h2 = 0; h2 < otherNodes.length; h2++) {
      var edges3 = otherNodes[h2]._private.edges;
      for (var i2 = 0; i2 < edges3.length; i2++) {
        var edge = edges3[i2];
        var edgeData = edge._private.data;
        var thisToOther = this.hasElementWithId(edgeData.source) && otherNodes.hasElementWithId(edgeData.target);
        var otherToThis = otherNodes.hasElementWithId(edgeData.source) && this.hasElementWithId(edgeData.target);
        var edgeConnectsThisAndOther = thisToOther || otherToThis;
        if (!edgeConnectsThisAndOther) {
          continue;
        }
        if (p3.thisIsSrc || p3.thisIsTgt) {
          if (p3.thisIsSrc && !thisToOther) {
            continue;
          }
          if (p3.thisIsTgt && !otherToThis) {
            continue;
          }
        }
        elements.push(edge);
      }
    }
    return this.spawn(elements, true);
  };
}
extend(elesfn$2, {
  connectedEdges: cache(function(selector) {
    var retEles = [];
    var eles = this;
    for (var i2 = 0; i2 < eles.length; i2++) {
      var node = eles[i2];
      if (!node.isNode()) {
        continue;
      }
      var edges3 = node._private.edges;
      for (var j2 = 0; j2 < edges3.length; j2++) {
        var edge = edges3[j2];
        retEles.push(edge);
      }
    }
    return this.spawn(retEles, true).filter(selector);
  }, "connectedEdges"),
  connectedNodes: cache(function(selector) {
    var retEles = [];
    var eles = this;
    for (var i2 = 0; i2 < eles.length; i2++) {
      var edge = eles[i2];
      if (!edge.isEdge()) {
        continue;
      }
      retEles.push(edge.source()[0]);
      retEles.push(edge.target()[0]);
    }
    return this.spawn(retEles, true).filter(selector);
  }, "connectedNodes"),
  parallelEdges: cache(defineParallelEdgesFunction(), "parallelEdges"),
  codirectedEdges: cache(defineParallelEdgesFunction({
    codirected: true
  }), "codirectedEdges")
});
function defineParallelEdgesFunction(params) {
  var defaults4 = {
    codirected: false
  };
  params = extend({}, defaults4, params);
  return function parallelEdgesImpl(selector) {
    var elements = [];
    var edges3 = this.edges();
    var p3 = params;
    for (var i2 = 0; i2 < edges3.length; i2++) {
      var edge1 = edges3[i2];
      var edge1_p = edge1._private;
      var src1 = edge1_p.source;
      var srcid1 = src1._private.data.id;
      var tgtid1 = edge1_p.data.target;
      var srcEdges1 = src1._private.edges;
      for (var j2 = 0; j2 < srcEdges1.length; j2++) {
        var edge2 = srcEdges1[j2];
        var edge2data = edge2._private.data;
        var tgtid2 = edge2data.target;
        var srcid2 = edge2data.source;
        var codirected = tgtid2 === tgtid1 && srcid2 === srcid1;
        var oppdirected = srcid1 === tgtid2 && tgtid1 === srcid2;
        if (p3.codirected && codirected || !p3.codirected && (codirected || oppdirected)) {
          elements.push(edge2);
        }
      }
    }
    return this.spawn(elements, true).filter(selector);
  };
}
extend(elesfn$2, {
  components: function components(root) {
    var self2 = this;
    var cy = self2.cy();
    var visited = cy.collection();
    var unvisited = root == null ? self2.nodes() : root.nodes();
    var components2 = [];
    if (root != null && unvisited.empty()) {
      unvisited = root.sources();
    }
    var visitInComponent = function visitInComponent2(node, component2) {
      visited.merge(node);
      unvisited.unmerge(node);
      component2.merge(node);
    };
    if (unvisited.empty()) {
      return self2.spawn();
    }
    var _loop = function _loop2() {
      var cmpt = cy.collection();
      components2.push(cmpt);
      var root2 = unvisited[0];
      visitInComponent(root2, cmpt);
      self2.bfs({
        directed: false,
        roots: root2,
        visit: function visit(v3) {
          return visitInComponent(v3, cmpt);
        }
      });
      cmpt.forEach(function(node) {
        node.connectedEdges().forEach(function(e) {
          if (self2.has(e) && cmpt.has(e.source()) && cmpt.has(e.target())) {
            cmpt.merge(e);
          }
        });
      });
    };
    do {
      _loop();
    } while (unvisited.length > 0);
    return components2;
  },
  component: function component() {
    var ele = this[0];
    return ele.cy().mutableElements().components(ele)[0];
  }
});
elesfn$2.componentsOf = elesfn$2.components;
var Collection = function Collection2(cy, elements) {
  var unique = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  var removed = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  if (cy === void 0) {
    error("A collection must have a reference to the core");
    return;
  }
  var map2 = new Map$1();
  var createdElements = false;
  if (!elements) {
    elements = [];
  } else if (elements.length > 0 && plainObject(elements[0]) && !element(elements[0])) {
    createdElements = true;
    var eles = [];
    var elesIds = new Set$1();
    for (var i2 = 0, l2 = elements.length; i2 < l2; i2++) {
      var json2 = elements[i2];
      if (json2.data == null) {
        json2.data = {};
      }
      var _data = json2.data;
      if (_data.id == null) {
        _data.id = uuid();
      } else if (cy.hasElementWithId(_data.id) || elesIds.has(_data.id)) {
        continue;
      }
      var ele = new Element(cy, json2, false);
      eles.push(ele);
      elesIds.add(_data.id);
    }
    elements = eles;
  }
  this.length = 0;
  for (var _i2 = 0, _l2 = elements.length; _i2 < _l2; _i2++) {
    var element$1 = elements[_i2][0];
    if (element$1 == null) {
      continue;
    }
    var id2 = element$1._private.data.id;
    if (!unique || !map2.has(id2)) {
      if (unique) {
        map2.set(id2, {
          index: this.length,
          ele: element$1
        });
      }
      this[this.length] = element$1;
      this.length++;
    }
  }
  this._private = {
    eles: this,
    cy,
    get map() {
      if (this.lazyMap == null) {
        this.rebuildMap();
      }
      return this.lazyMap;
    },
    set map(m2) {
      this.lazyMap = m2;
    },
    rebuildMap: function rebuildMap() {
      var m2 = this.lazyMap = new Map$1();
      var eles2 = this.eles;
      for (var _i22 = 0; _i22 < eles2.length; _i22++) {
        var _ele = eles2[_i22];
        m2.set(_ele.id(), {
          index: _i22,
          ele: _ele
        });
      }
    }
  };
  if (unique) {
    this._private.map = map2;
  }
  if (createdElements && !removed) {
    this.restore();
  }
};
var elesfn$1 = Element.prototype = Collection.prototype = Object.create(Array.prototype);
elesfn$1.instanceString = function() {
  return "collection";
};
elesfn$1.spawn = function(eles, unique) {
  return new Collection(this.cy(), eles, unique);
};
elesfn$1.spawnSelf = function() {
  return this.spawn(this);
};
elesfn$1.cy = function() {
  return this._private.cy;
};
elesfn$1.renderer = function() {
  return this._private.cy.renderer();
};
elesfn$1.element = function() {
  return this[0];
};
elesfn$1.collection = function() {
  if (collection(this)) {
    return this;
  } else {
    return new Collection(this._private.cy, [this]);
  }
};
elesfn$1.unique = function() {
  return new Collection(this._private.cy, this, true);
};
elesfn$1.hasElementWithId = function(id2) {
  id2 = "" + id2;
  return this._private.map.has(id2);
};
elesfn$1.getElementById = function(id2) {
  id2 = "" + id2;
  var cy = this._private.cy;
  var entry = this._private.map.get(id2);
  return entry ? entry.ele : new Collection(cy);
};
elesfn$1.$id = elesfn$1.getElementById;
elesfn$1.poolIndex = function() {
  var cy = this._private.cy;
  var eles = cy._private.elements;
  var id2 = this[0]._private.data.id;
  return eles._private.map.get(id2).index;
};
elesfn$1.indexOf = function(ele) {
  var id2 = ele[0]._private.data.id;
  return this._private.map.get(id2).index;
};
elesfn$1.indexOfId = function(id2) {
  id2 = "" + id2;
  return this._private.map.get(id2).index;
};
elesfn$1.json = function(obj) {
  var ele = this.element();
  var cy = this.cy();
  if (ele == null && obj) {
    return this;
  }
  if (ele == null) {
    return void 0;
  }
  var p3 = ele._private;
  if (plainObject(obj)) {
    cy.startBatch();
    if (obj.data) {
      ele.data(obj.data);
      var _data2 = p3.data;
      if (ele.isEdge()) {
        var move = false;
        var spec = {};
        var src = obj.data.source;
        var tgt = obj.data.target;
        if (src != null && src != _data2.source) {
          spec.source = "" + src;
          move = true;
        }
        if (tgt != null && tgt != _data2.target) {
          spec.target = "" + tgt;
          move = true;
        }
        if (move) {
          ele = ele.move(spec);
        }
      } else {
        var newParentValSpecd = "parent" in obj.data;
        var parent4 = obj.data.parent;
        if (newParentValSpecd && (parent4 != null || _data2.parent != null) && parent4 != _data2.parent) {
          if (parent4 === void 0) {
            parent4 = null;
          }
          if (parent4 != null) {
            parent4 = "" + parent4;
          }
          ele = ele.move({
            parent: parent4
          });
        }
      }
    }
    if (obj.position) {
      ele.position(obj.position);
    }
    var checkSwitch = function checkSwitch2(k2, trueFnName, falseFnName) {
      var obj_k = obj[k2];
      if (obj_k != null && obj_k !== p3[k2]) {
        if (obj_k) {
          ele[trueFnName]();
        } else {
          ele[falseFnName]();
        }
      }
    };
    checkSwitch("removed", "remove", "restore");
    checkSwitch("selected", "select", "unselect");
    checkSwitch("selectable", "selectify", "unselectify");
    checkSwitch("locked", "lock", "unlock");
    checkSwitch("grabbable", "grabify", "ungrabify");
    checkSwitch("pannable", "panify", "unpanify");
    if (obj.classes != null) {
      ele.classes(obj.classes);
    }
    cy.endBatch();
    return this;
  } else if (obj === void 0) {
    var json2 = {
      data: copy(p3.data),
      position: copy(p3.position),
      group: p3.group,
      removed: p3.removed,
      selected: p3.selected,
      selectable: p3.selectable,
      locked: p3.locked,
      grabbable: p3.grabbable,
      pannable: p3.pannable,
      classes: null
    };
    json2.classes = "";
    var i2 = 0;
    p3.classes.forEach(function(cls) {
      return json2.classes += i2++ === 0 ? cls : " " + cls;
    });
    return json2;
  }
};
elesfn$1.jsons = function() {
  var jsons = [];
  for (var i2 = 0; i2 < this.length; i2++) {
    var ele = this[i2];
    var json2 = ele.json();
    jsons.push(json2);
  }
  return jsons;
};
elesfn$1.clone = function() {
  var cy = this.cy();
  var elesArr = [];
  for (var i2 = 0; i2 < this.length; i2++) {
    var ele = this[i2];
    var json2 = ele.json();
    var clone3 = new Element(cy, json2, false);
    elesArr.push(clone3);
  }
  return new Collection(cy, elesArr);
};
elesfn$1.copy = elesfn$1.clone;
elesfn$1.restore = function() {
  var notifyRenderer = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
  var addToPool2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  var self2 = this;
  var cy = self2.cy();
  var cy_p = cy._private;
  var nodes3 = [];
  var edges3 = [];
  var elements;
  for (var _i3 = 0, l2 = self2.length; _i3 < l2; _i3++) {
    var ele = self2[_i3];
    if (addToPool2 && !ele.removed()) {
      continue;
    }
    if (ele.isNode()) {
      nodes3.push(ele);
    } else {
      edges3.push(ele);
    }
  }
  elements = nodes3.concat(edges3);
  var i2;
  var removeFromElements = function removeFromElements2() {
    elements.splice(i2, 1);
    i2--;
  };
  for (i2 = 0; i2 < elements.length; i2++) {
    var _ele2 = elements[i2];
    var _private = _ele2._private;
    var _data3 = _private.data;
    _ele2.clearTraversalCache();
    if (!addToPool2 && !_private.removed) ;
    else if (_data3.id === void 0) {
      _data3.id = uuid();
    } else if (number$1(_data3.id)) {
      _data3.id = "" + _data3.id;
    } else if (emptyString(_data3.id) || !string(_data3.id)) {
      error("Can not create element with invalid string ID `" + _data3.id + "`");
      removeFromElements();
      continue;
    } else if (cy.hasElementWithId(_data3.id)) {
      error("Can not create second element with ID `" + _data3.id + "`");
      removeFromElements();
      continue;
    }
    var id2 = _data3.id;
    if (_ele2.isNode()) {
      var pos = _private.position;
      if (pos.x == null) {
        pos.x = 0;
      }
      if (pos.y == null) {
        pos.y = 0;
      }
    }
    if (_ele2.isEdge()) {
      var edge = _ele2;
      var fields = ["source", "target"];
      var fieldsLength = fields.length;
      var badSourceOrTarget = false;
      for (var j2 = 0; j2 < fieldsLength; j2++) {
        var field = fields[j2];
        var val = _data3[field];
        if (number$1(val)) {
          val = _data3[field] = "" + _data3[field];
        }
        if (val == null || val === "") {
          error("Can not create edge `" + id2 + "` with unspecified " + field);
          badSourceOrTarget = true;
        } else if (!cy.hasElementWithId(val)) {
          error("Can not create edge `" + id2 + "` with nonexistant " + field + " `" + val + "`");
          badSourceOrTarget = true;
        }
      }
      if (badSourceOrTarget) {
        removeFromElements();
        continue;
      }
      var src = cy.getElementById(_data3.source);
      var tgt = cy.getElementById(_data3.target);
      if (src.same(tgt)) {
        src._private.edges.push(edge);
      } else {
        src._private.edges.push(edge);
        tgt._private.edges.push(edge);
      }
      edge._private.source = src;
      edge._private.target = tgt;
    }
    _private.map = new Map$1();
    _private.map.set(id2, {
      ele: _ele2,
      index: 0
    });
    _private.removed = false;
    if (addToPool2) {
      cy.addToPool(_ele2);
    }
  }
  for (var _i4 = 0; _i4 < nodes3.length; _i4++) {
    var node = nodes3[_i4];
    var _data4 = node._private.data;
    if (number$1(_data4.parent)) {
      _data4.parent = "" + _data4.parent;
    }
    var parentId = _data4.parent;
    var specifiedParent = parentId != null;
    if (specifiedParent || node._private.parent) {
      var parent4 = node._private.parent ? cy.collection().merge(node._private.parent) : cy.getElementById(parentId);
      if (parent4.empty()) {
        _data4.parent = void 0;
      } else if (parent4[0].removed()) {
        warn("Node added with missing parent, reference to parent removed");
        _data4.parent = void 0;
        node._private.parent = null;
      } else {
        var selfAsParent = false;
        var ancestor = parent4;
        while (!ancestor.empty()) {
          if (node.same(ancestor)) {
            selfAsParent = true;
            _data4.parent = void 0;
            break;
          }
          ancestor = ancestor.parent();
        }
        if (!selfAsParent) {
          parent4[0]._private.children.push(node);
          node._private.parent = parent4[0];
          cy_p.hasCompoundNodes = true;
        }
      }
    }
  }
  if (elements.length > 0) {
    var restored = elements.length === self2.length ? self2 : new Collection(cy, elements);
    for (var _i5 = 0; _i5 < restored.length; _i5++) {
      var _ele3 = restored[_i5];
      if (_ele3.isNode()) {
        continue;
      }
      _ele3.parallelEdges().clearTraversalCache();
      _ele3.source().clearTraversalCache();
      _ele3.target().clearTraversalCache();
    }
    var toUpdateStyle;
    if (cy_p.hasCompoundNodes) {
      toUpdateStyle = cy.collection().merge(restored).merge(restored.connectedNodes()).merge(restored.parent());
    } else {
      toUpdateStyle = restored;
    }
    toUpdateStyle.dirtyCompoundBoundsCache().dirtyBoundingBoxCache().updateStyle(notifyRenderer);
    if (notifyRenderer) {
      restored.emitAndNotify("add");
    } else if (addToPool2) {
      restored.emit("add");
    }
  }
  return self2;
};
elesfn$1.removed = function() {
  var ele = this[0];
  return ele && ele._private.removed;
};
elesfn$1.inside = function() {
  var ele = this[0];
  return ele && !ele._private.removed;
};
elesfn$1.remove = function() {
  var notifyRenderer = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
  var removeFromPool2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  var self2 = this;
  var elesToRemove = [];
  var elesToRemoveIds = {};
  var cy = self2._private.cy;
  function addConnectedEdges(node) {
    var edges3 = node._private.edges;
    for (var i3 = 0; i3 < edges3.length; i3++) {
      add3(edges3[i3]);
    }
  }
  function addChildren2(node) {
    var children = node._private.children;
    for (var i3 = 0; i3 < children.length; i3++) {
      add3(children[i3]);
    }
  }
  function add3(ele2) {
    var alreadyAdded = elesToRemoveIds[ele2.id()];
    if (removeFromPool2 && ele2.removed() || alreadyAdded) {
      return;
    } else {
      elesToRemoveIds[ele2.id()] = true;
    }
    if (ele2.isNode()) {
      elesToRemove.push(ele2);
      addConnectedEdges(ele2);
      addChildren2(ele2);
    } else {
      elesToRemove.unshift(ele2);
    }
  }
  for (var i2 = 0, l2 = self2.length; i2 < l2; i2++) {
    var ele = self2[i2];
    add3(ele);
  }
  function removeEdgeRef(node, edge) {
    var connectedEdges = node._private.edges;
    removeFromArray(connectedEdges, edge);
    node.clearTraversalCache();
  }
  function removeParallelRef(pllEdge2) {
    pllEdge2.clearTraversalCache();
  }
  var alteredParents = [];
  alteredParents.ids = {};
  function removeChildRef(parent5, ele2) {
    ele2 = ele2[0];
    parent5 = parent5[0];
    var children = parent5._private.children;
    var pid = parent5.id();
    removeFromArray(children, ele2);
    ele2._private.parent = null;
    if (!alteredParents.ids[pid]) {
      alteredParents.ids[pid] = true;
      alteredParents.push(parent5);
    }
  }
  self2.dirtyCompoundBoundsCache();
  if (removeFromPool2) {
    cy.removeFromPool(elesToRemove);
  }
  for (var _i6 = 0; _i6 < elesToRemove.length; _i6++) {
    var _ele4 = elesToRemove[_i6];
    if (_ele4.isEdge()) {
      var src = _ele4.source()[0];
      var tgt = _ele4.target()[0];
      removeEdgeRef(src, _ele4);
      removeEdgeRef(tgt, _ele4);
      var pllEdges = _ele4.parallelEdges();
      for (var j2 = 0; j2 < pllEdges.length; j2++) {
        var pllEdge = pllEdges[j2];
        removeParallelRef(pllEdge);
        if (pllEdge.isBundledBezier()) {
          pllEdge.dirtyBoundingBoxCache();
        }
      }
    } else {
      var parent4 = _ele4.parent();
      if (parent4.length !== 0) {
        removeChildRef(parent4, _ele4);
      }
    }
    if (removeFromPool2) {
      _ele4._private.removed = true;
    }
  }
  var elesStillInside = cy._private.elements;
  cy._private.hasCompoundNodes = false;
  for (var _i7 = 0; _i7 < elesStillInside.length; _i7++) {
    var _ele5 = elesStillInside[_i7];
    if (_ele5.isParent()) {
      cy._private.hasCompoundNodes = true;
      break;
    }
  }
  var removedElements = new Collection(this.cy(), elesToRemove);
  if (removedElements.size() > 0) {
    if (notifyRenderer) {
      removedElements.emitAndNotify("remove");
    } else if (removeFromPool2) {
      removedElements.emit("remove");
    }
  }
  for (var _i8 = 0; _i8 < alteredParents.length; _i8++) {
    var _ele6 = alteredParents[_i8];
    if (!removeFromPool2 || !_ele6.removed()) {
      _ele6.updateStyle();
    }
  }
  return removedElements;
};
elesfn$1.move = function(struct) {
  var cy = this._private.cy;
  var eles = this;
  var notifyRenderer = false;
  var modifyPool = false;
  var toString3 = function toString4(id2) {
    return id2 == null ? id2 : "" + id2;
  };
  if (struct.source !== void 0 || struct.target !== void 0) {
    var srcId = toString3(struct.source);
    var tgtId = toString3(struct.target);
    var srcExists = srcId != null && cy.hasElementWithId(srcId);
    var tgtExists = tgtId != null && cy.hasElementWithId(tgtId);
    if (srcExists || tgtExists) {
      cy.batch(function() {
        eles.remove(notifyRenderer, modifyPool);
        eles.emitAndNotify("moveout");
        for (var i2 = 0; i2 < eles.length; i2++) {
          var ele = eles[i2];
          var _data5 = ele._private.data;
          if (ele.isEdge()) {
            if (srcExists) {
              _data5.source = srcId;
            }
            if (tgtExists) {
              _data5.target = tgtId;
            }
          }
        }
        eles.restore(notifyRenderer, modifyPool);
      });
      eles.emitAndNotify("move");
    }
  } else if (struct.parent !== void 0) {
    var parentId = toString3(struct.parent);
    var parentExists = parentId === null || cy.hasElementWithId(parentId);
    if (parentExists) {
      var pidToAssign = parentId === null ? void 0 : parentId;
      cy.batch(function() {
        var updated = eles.remove(notifyRenderer, modifyPool);
        updated.emitAndNotify("moveout");
        for (var i2 = 0; i2 < eles.length; i2++) {
          var ele = eles[i2];
          var _data6 = ele._private.data;
          if (ele.isNode()) {
            _data6.parent = pidToAssign;
          }
        }
        updated.restore(notifyRenderer, modifyPool);
      });
      eles.emitAndNotify("move");
    }
  }
  return this;
};
[elesfn$j, elesfn$i, elesfn$h, elesfn$g, elesfn$f, data3, elesfn$d, dimensions, elesfn$9, elesfn$8, elesfn$7, elesfn$6, elesfn$5, elesfn$4, elesfn$3, elesfn$2].forEach(function(props) {
  extend(elesfn$1, props);
});
var corefn$9 = {
  add: function add2(opts) {
    var elements;
    var cy = this;
    if (elementOrCollection(opts)) {
      var eles = opts;
      if (eles._private.cy === cy) {
        elements = eles.restore();
      } else {
        var jsons = [];
        for (var i2 = 0; i2 < eles.length; i2++) {
          var ele = eles[i2];
          jsons.push(ele.json());
        }
        elements = new Collection(cy, jsons);
      }
    } else if (array(opts)) {
      var _jsons = opts;
      elements = new Collection(cy, _jsons);
    } else if (plainObject(opts) && (array(opts.nodes) || array(opts.edges))) {
      var elesByGroup = opts;
      var _jsons2 = [];
      var grs = ["nodes", "edges"];
      for (var _i2 = 0, il2 = grs.length; _i2 < il2; _i2++) {
        var group2 = grs[_i2];
        var elesArray = elesByGroup[group2];
        if (array(elesArray)) {
          for (var j2 = 0, jl2 = elesArray.length; j2 < jl2; j2++) {
            var json2 = extend({
              group: group2
            }, elesArray[j2]);
            _jsons2.push(json2);
          }
        }
      }
      elements = new Collection(cy, _jsons2);
    } else {
      var _json = opts;
      elements = new Element(cy, _json).collection();
    }
    return elements;
  },
  remove: function remove(collection4) {
    if (elementOrCollection(collection4)) ;
    else if (string(collection4)) {
      var selector = collection4;
      collection4 = this.$(selector);
    }
    return collection4.remove();
  }
};
function generateCubicBezier(mX1, mY1, mX2, mY2) {
  var NEWTON_ITERATIONS = 4, NEWTON_MIN_SLOPE = 1e-3, SUBDIVISION_PRECISION = 1e-7, SUBDIVISION_MAX_ITERATIONS = 10, kSplineTableSize = 11, kSampleStepSize = 1 / (kSplineTableSize - 1), float32ArraySupported = typeof Float32Array !== "undefined";
  if (arguments.length !== 4) {
    return false;
  }
  for (var i2 = 0; i2 < 4; ++i2) {
    if (typeof arguments[i2] !== "number" || isNaN(arguments[i2]) || !isFinite(arguments[i2])) {
      return false;
    }
  }
  mX1 = Math.min(mX1, 1);
  mX2 = Math.min(mX2, 1);
  mX1 = Math.max(mX1, 0);
  mX2 = Math.max(mX2, 0);
  var mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
  function A2(aA1, aA2) {
    return 1 - 3 * aA2 + 3 * aA1;
  }
  function B2(aA1, aA2) {
    return 3 * aA2 - 6 * aA1;
  }
  function C2(aA1) {
    return 3 * aA1;
  }
  function calcBezier(aT, aA1, aA2) {
    return ((A2(aA1, aA2) * aT + B2(aA1, aA2)) * aT + C2(aA1)) * aT;
  }
  function getSlope(aT, aA1, aA2) {
    return 3 * A2(aA1, aA2) * aT * aT + 2 * B2(aA1, aA2) * aT + C2(aA1);
  }
  function newtonRaphsonIterate(aX, aGuessT) {
    for (var _i2 = 0; _i2 < NEWTON_ITERATIONS; ++_i2) {
      var currentSlope = getSlope(aGuessT, mX1, mX2);
      if (currentSlope === 0) {
        return aGuessT;
      }
      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }
    return aGuessT;
  }
  function calcSampleValues() {
    for (var _i2 = 0; _i2 < kSplineTableSize; ++_i2) {
      mSampleValues[_i2] = calcBezier(_i2 * kSampleStepSize, mX1, mX2);
    }
  }
  function binarySubdivide(aX, aA, aB) {
    var currentX, currentT, i3 = 0;
    do {
      currentT = aA + (aB - aA) / 2;
      currentX = calcBezier(currentT, mX1, mX2) - aX;
      if (currentX > 0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i3 < SUBDIVISION_MAX_ITERATIONS);
    return currentT;
  }
  function getTForX(aX) {
    var intervalStart = 0, currentSample = 1, lastSample = kSplineTableSize - 1;
    for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;
    var dist3 = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]), guessForT = intervalStart + dist3 * kSampleStepSize, initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT);
    } else if (initialSlope === 0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize);
    }
  }
  var _precomputed = false;
  function precompute() {
    _precomputed = true;
    if (mX1 !== mY1 || mX2 !== mY2) {
      calcSampleValues();
    }
  }
  var f2 = function f3(aX) {
    if (!_precomputed) {
      precompute();
    }
    if (mX1 === mY1 && mX2 === mY2) {
      return aX;
    }
    if (aX === 0) {
      return 0;
    }
    if (aX === 1) {
      return 1;
    }
    return calcBezier(getTForX(aX), mY1, mY2);
  };
  f2.getControlPoints = function() {
    return [{
      x: mX1,
      y: mY1
    }, {
      x: mX2,
      y: mY2
    }];
  };
  var str = "generateBezier(" + [mX1, mY1, mX2, mY2] + ")";
  f2.toString = function() {
    return str;
  };
  return f2;
}
var generateSpringRK4 = /* @__PURE__ */ function() {
  function springAccelerationForState(state) {
    return -state.tension * state.x - state.friction * state.v;
  }
  function springEvaluateStateWithDerivative(initialState, dt2, derivative) {
    var state = {
      x: initialState.x + derivative.dx * dt2,
      v: initialState.v + derivative.dv * dt2,
      tension: initialState.tension,
      friction: initialState.friction
    };
    return {
      dx: state.v,
      dv: springAccelerationForState(state)
    };
  }
  function springIntegrateState(state, dt2) {
    var a2 = {
      dx: state.v,
      dv: springAccelerationForState(state)
    }, b2 = springEvaluateStateWithDerivative(state, dt2 * 0.5, a2), c2 = springEvaluateStateWithDerivative(state, dt2 * 0.5, b2), d2 = springEvaluateStateWithDerivative(state, dt2, c2), dxdt = 1 / 6 * (a2.dx + 2 * (b2.dx + c2.dx) + d2.dx), dvdt = 1 / 6 * (a2.dv + 2 * (b2.dv + c2.dv) + d2.dv);
    state.x = state.x + dxdt * dt2;
    state.v = state.v + dvdt * dt2;
    return state;
  }
  return function springRK4Factory(tension, friction, duration) {
    var initState = {
      x: -1,
      v: 0,
      tension: null,
      friction: null
    }, path = [0], time_lapsed = 0, tolerance = 1 / 1e4, DT = 16 / 1e3, have_duration, dt2, last_state;
    tension = parseFloat(tension) || 500;
    friction = parseFloat(friction) || 20;
    duration = duration || null;
    initState.tension = tension;
    initState.friction = friction;
    have_duration = duration !== null;
    if (have_duration) {
      time_lapsed = springRK4Factory(tension, friction);
      dt2 = time_lapsed / duration * DT;
    } else {
      dt2 = DT;
    }
    for (; ; ) {
      last_state = springIntegrateState(last_state || initState, dt2);
      path.push(1 + last_state.x);
      time_lapsed += 16;
      if (!(Math.abs(last_state.x) > tolerance && Math.abs(last_state.v) > tolerance)) {
        break;
      }
    }
    return !have_duration ? time_lapsed : function(percentComplete) {
      return path[percentComplete * (path.length - 1) | 0];
    };
  };
}();
var cubicBezier = function cubicBezier2(t1, p1, t2, p22) {
  var bezier = generateCubicBezier(t1, p1, t2, p22);
  return function(start, end, percent) {
    return start + (end - start) * bezier(percent);
  };
};
var easings = {
  "linear": function linear(start, end, percent) {
    return start + (end - start) * percent;
  },
  // default easings
  "ease": cubicBezier(0.25, 0.1, 0.25, 1),
  "ease-in": cubicBezier(0.42, 0, 1, 1),
  "ease-out": cubicBezier(0, 0, 0.58, 1),
  "ease-in-out": cubicBezier(0.42, 0, 0.58, 1),
  // sine
  "ease-in-sine": cubicBezier(0.47, 0, 0.745, 0.715),
  "ease-out-sine": cubicBezier(0.39, 0.575, 0.565, 1),
  "ease-in-out-sine": cubicBezier(0.445, 0.05, 0.55, 0.95),
  // quad
  "ease-in-quad": cubicBezier(0.55, 0.085, 0.68, 0.53),
  "ease-out-quad": cubicBezier(0.25, 0.46, 0.45, 0.94),
  "ease-in-out-quad": cubicBezier(0.455, 0.03, 0.515, 0.955),
  // cubic
  "ease-in-cubic": cubicBezier(0.55, 0.055, 0.675, 0.19),
  "ease-out-cubic": cubicBezier(0.215, 0.61, 0.355, 1),
  "ease-in-out-cubic": cubicBezier(0.645, 0.045, 0.355, 1),
  // quart
  "ease-in-quart": cubicBezier(0.895, 0.03, 0.685, 0.22),
  "ease-out-quart": cubicBezier(0.165, 0.84, 0.44, 1),
  "ease-in-out-quart": cubicBezier(0.77, 0, 0.175, 1),
  // quint
  "ease-in-quint": cubicBezier(0.755, 0.05, 0.855, 0.06),
  "ease-out-quint": cubicBezier(0.23, 1, 0.32, 1),
  "ease-in-out-quint": cubicBezier(0.86, 0, 0.07, 1),
  // expo
  "ease-in-expo": cubicBezier(0.95, 0.05, 0.795, 0.035),
  "ease-out-expo": cubicBezier(0.19, 1, 0.22, 1),
  "ease-in-out-expo": cubicBezier(1, 0, 0, 1),
  // circ
  "ease-in-circ": cubicBezier(0.6, 0.04, 0.98, 0.335),
  "ease-out-circ": cubicBezier(0.075, 0.82, 0.165, 1),
  "ease-in-out-circ": cubicBezier(0.785, 0.135, 0.15, 0.86),
  // user param easings...
  "spring": function spring(tension, friction, duration) {
    if (duration === 0) {
      return easings.linear;
    }
    var spring2 = generateSpringRK4(tension, friction, duration);
    return function(start, end, percent) {
      return start + (end - start) * spring2(percent);
    };
  },
  "cubic-bezier": cubicBezier
};
function getEasedValue(type2, start, end, percent, easingFn) {
  if (percent === 1) {
    return end;
  }
  if (start === end) {
    return end;
  }
  var val = easingFn(start, end, percent);
  if (type2 == null) {
    return val;
  }
  if (type2.roundValue || type2.color) {
    val = Math.round(val);
  }
  if (type2.min !== void 0) {
    val = Math.max(val, type2.min);
  }
  if (type2.max !== void 0) {
    val = Math.min(val, type2.max);
  }
  return val;
}
function getValue(prop, spec) {
  if (prop.pfValue != null || prop.value != null) {
    if (prop.pfValue != null && (spec == null || spec.type.units !== "%")) {
      return prop.pfValue;
    } else {
      return prop.value;
    }
  } else {
    return prop;
  }
}
function ease(startProp, endProp, percent, easingFn, propSpec) {
  var type2 = propSpec != null ? propSpec.type : null;
  if (percent < 0) {
    percent = 0;
  } else if (percent > 1) {
    percent = 1;
  }
  var start = getValue(startProp, propSpec);
  var end = getValue(endProp, propSpec);
  if (number$1(start) && number$1(end)) {
    return getEasedValue(type2, start, end, percent, easingFn);
  } else if (array(start) && array(end)) {
    var easedArr = [];
    for (var i2 = 0; i2 < end.length; i2++) {
      var si2 = start[i2];
      var ei2 = end[i2];
      if (si2 != null && ei2 != null) {
        var val = getEasedValue(type2, si2, ei2, percent, easingFn);
        easedArr.push(val);
      } else {
        easedArr.push(ei2);
      }
    }
    return easedArr;
  }
  return void 0;
}
function step$1(self2, ani, now, isCore) {
  var isEles = !isCore;
  var _p = self2._private;
  var ani_p = ani._private;
  var pEasing = ani_p.easing;
  var startTime = ani_p.startTime;
  var cy = isCore ? self2 : self2.cy();
  var style3 = cy.style();
  if (!ani_p.easingImpl) {
    if (pEasing == null) {
      ani_p.easingImpl = easings["linear"];
    } else {
      var easingVals;
      if (string(pEasing)) {
        var easingProp = style3.parse("transition-timing-function", pEasing);
        easingVals = easingProp.value;
      } else {
        easingVals = pEasing;
      }
      var name, args;
      if (string(easingVals)) {
        name = easingVals;
        args = [];
      } else {
        name = easingVals[1];
        args = easingVals.slice(2).map(function(n2) {
          return +n2;
        });
      }
      if (args.length > 0) {
        if (name === "spring") {
          args.push(ani_p.duration);
        }
        ani_p.easingImpl = easings[name].apply(null, args);
      } else {
        ani_p.easingImpl = easings[name];
      }
    }
  }
  var easing = ani_p.easingImpl;
  var percent;
  if (ani_p.duration === 0) {
    percent = 1;
  } else {
    percent = (now - startTime) / ani_p.duration;
  }
  if (ani_p.applying) {
    percent = ani_p.progress;
  }
  if (percent < 0) {
    percent = 0;
  } else if (percent > 1) {
    percent = 1;
  }
  if (ani_p.delay == null) {
    var startPos = ani_p.startPosition;
    var endPos = ani_p.position;
    if (endPos && isEles && !self2.locked()) {
      var newPos = {};
      if (valid(startPos.x, endPos.x)) {
        newPos.x = ease(startPos.x, endPos.x, percent, easing);
      }
      if (valid(startPos.y, endPos.y)) {
        newPos.y = ease(startPos.y, endPos.y, percent, easing);
      }
      self2.position(newPos);
    }
    var startPan = ani_p.startPan;
    var endPan = ani_p.pan;
    var pan2 = _p.pan;
    var animatingPan = endPan != null && isCore;
    if (animatingPan) {
      if (valid(startPan.x, endPan.x)) {
        pan2.x = ease(startPan.x, endPan.x, percent, easing);
      }
      if (valid(startPan.y, endPan.y)) {
        pan2.y = ease(startPan.y, endPan.y, percent, easing);
      }
      self2.emit("pan");
    }
    var startZoom = ani_p.startZoom;
    var endZoom = ani_p.zoom;
    var animatingZoom = endZoom != null && isCore;
    if (animatingZoom) {
      if (valid(startZoom, endZoom)) {
        _p.zoom = bound(_p.minZoom, ease(startZoom, endZoom, percent, easing), _p.maxZoom);
      }
      self2.emit("zoom");
    }
    if (animatingPan || animatingZoom) {
      self2.emit("viewport");
    }
    var props = ani_p.style;
    if (props && props.length > 0 && isEles) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var prop = props[i2];
        var _name = prop.name;
        var end = prop;
        var start = ani_p.startStyle[_name];
        var propSpec = style3.properties[start.name];
        var easedVal = ease(start, end, percent, easing, propSpec);
        style3.overrideBypass(self2, _name, easedVal);
      }
      self2.emit("style");
    }
  }
  ani_p.progress = percent;
  return percent;
}
function valid(start, end) {
  if (start == null || end == null) {
    return false;
  }
  if (number$1(start) && number$1(end)) {
    return true;
  } else if (start && end) {
    return true;
  }
  return false;
}
function startAnimation(self2, ani, now, isCore) {
  var ani_p = ani._private;
  ani_p.started = true;
  ani_p.startTime = now - ani_p.progress * ani_p.duration;
}
function stepAll(now, cy) {
  var eles = cy._private.aniEles;
  var doneEles = [];
  function stepOne(ele2, isCore) {
    var _p = ele2._private;
    var current = _p.animation.current;
    var queue = _p.animation.queue;
    var ranAnis = false;
    if (current.length === 0) {
      var next2 = queue.shift();
      if (next2) {
        current.push(next2);
      }
    }
    var callbacks = function callbacks2(_callbacks) {
      for (var j2 = _callbacks.length - 1; j2 >= 0; j2--) {
        var cb = _callbacks[j2];
        cb();
      }
      _callbacks.splice(0, _callbacks.length);
    };
    for (var i2 = current.length - 1; i2 >= 0; i2--) {
      var ani = current[i2];
      var ani_p = ani._private;
      if (ani_p.stopped) {
        current.splice(i2, 1);
        ani_p.hooked = false;
        ani_p.playing = false;
        ani_p.started = false;
        callbacks(ani_p.frames);
        continue;
      }
      if (!ani_p.playing && !ani_p.applying) {
        continue;
      }
      if (ani_p.playing && ani_p.applying) {
        ani_p.applying = false;
      }
      if (!ani_p.started) {
        startAnimation(ele2, ani, now);
      }
      step$1(ele2, ani, now, isCore);
      if (ani_p.applying) {
        ani_p.applying = false;
      }
      callbacks(ani_p.frames);
      if (ani_p.step != null) {
        ani_p.step(now);
      }
      if (ani.completed()) {
        current.splice(i2, 1);
        ani_p.hooked = false;
        ani_p.playing = false;
        ani_p.started = false;
        callbacks(ani_p.completes);
      }
      ranAnis = true;
    }
    if (!isCore && current.length === 0 && queue.length === 0) {
      doneEles.push(ele2);
    }
    return ranAnis;
  }
  var ranEleAni = false;
  for (var e = 0; e < eles.length; e++) {
    var ele = eles[e];
    var handledThisEle = stepOne(ele);
    ranEleAni = ranEleAni || handledThisEle;
  }
  var ranCoreAni = stepOne(cy, true);
  if (ranEleAni || ranCoreAni) {
    if (eles.length > 0) {
      cy.notify("draw", eles);
    } else {
      cy.notify("draw");
    }
  }
  eles.unmerge(doneEles);
  cy.emit("step");
}
var corefn$8 = {
  // pull in animation functions
  animate: define2.animate(),
  animation: define2.animation(),
  animated: define2.animated(),
  clearQueue: define2.clearQueue(),
  delay: define2.delay(),
  delayAnimation: define2.delayAnimation(),
  stop: define2.stop(),
  addToAnimationPool: function addToAnimationPool(eles) {
    var cy = this;
    if (!cy.styleEnabled()) {
      return;
    }
    cy._private.aniEles.merge(eles);
  },
  stopAnimationLoop: function stopAnimationLoop() {
    this._private.animationsRunning = false;
  },
  startAnimationLoop: function startAnimationLoop() {
    var cy = this;
    cy._private.animationsRunning = true;
    if (!cy.styleEnabled()) {
      return;
    }
    function headlessStep() {
      if (!cy._private.animationsRunning) {
        return;
      }
      requestAnimationFrame2(function animationStep(now) {
        stepAll(now, cy);
        headlessStep();
      });
    }
    var renderer3 = cy.renderer();
    if (renderer3 && renderer3.beforeRender) {
      renderer3.beforeRender(function rendererAnimationStep(willDraw, now) {
        stepAll(now, cy);
      }, renderer3.beforeRenderPriorities.animations);
    } else {
      headlessStep();
    }
  }
};
var emitterOptions = {
  qualifierCompare: function qualifierCompare3(selector1, selector2) {
    if (selector1 == null || selector2 == null) {
      return selector1 == null && selector2 == null;
    } else {
      return selector1.sameText(selector2);
    }
  },
  eventMatches: function eventMatches3(cy, listener, eventObj) {
    var selector = listener.qualifier;
    if (selector != null) {
      return cy !== eventObj.target && element(eventObj.target) && selector.matches(eventObj.target);
    }
    return true;
  },
  addEventFields: function addEventFields3(cy, evt) {
    evt.cy = cy;
    evt.target = cy;
  },
  callbackContext: function callbackContext3(cy, listener, eventObj) {
    return listener.qualifier != null ? eventObj.target : cy;
  }
};
var argSelector2 = function argSelector3(arg) {
  if (string(arg)) {
    return new Selector(arg);
  } else {
    return arg;
  }
};
var elesfn = {
  createEmitter: function createEmitter2() {
    var _p = this._private;
    if (!_p.emitter) {
      _p.emitter = new Emitter2(emitterOptions, this);
    }
    return this;
  },
  emitter: function emitter2() {
    return this._private.emitter;
  },
  on: function on2(events, selector, callback) {
    this.emitter().on(events, argSelector2(selector), callback);
    return this;
  },
  removeListener: function removeListener2(events, selector, callback) {
    this.emitter().removeListener(events, argSelector2(selector), callback);
    return this;
  },
  removeAllListeners: function removeAllListeners2() {
    this.emitter().removeAllListeners();
    return this;
  },
  one: function one2(events, selector, callback) {
    this.emitter().one(events, argSelector2(selector), callback);
    return this;
  },
  once: function once2(events, selector, callback) {
    this.emitter().one(events, argSelector2(selector), callback);
    return this;
  },
  emit: function emit2(events, extraParams) {
    this.emitter().emit(events, extraParams);
    return this;
  },
  emitAndNotify: function emitAndNotify2(event3, eles) {
    this.emit(event3);
    this.notify(event3, eles);
    return this;
  }
};
define2.eventAliasesOn(elesfn);
var corefn$7 = {
  png: function png(options3) {
    var renderer3 = this._private.renderer;
    options3 = options3 || {};
    return renderer3.png(options3);
  },
  jpg: function jpg(options3) {
    var renderer3 = this._private.renderer;
    options3 = options3 || {};
    options3.bg = options3.bg || "#fff";
    return renderer3.jpg(options3);
  }
};
corefn$7.jpeg = corefn$7.jpg;
var corefn$6 = {
  layout: function layout2(options3) {
    var cy = this;
    if (options3 == null) {
      error("Layout options must be specified to make a layout");
      return;
    }
    if (options3.name == null) {
      error("A `name` must be specified to make a layout");
      return;
    }
    var name = options3.name;
    var Layout2 = cy.extension("layout", name);
    if (Layout2 == null) {
      error("No such layout `" + name + "` found.  Did you forget to import it and `cytoscape.use()` it?");
      return;
    }
    var eles;
    if (string(options3.eles)) {
      eles = cy.$(options3.eles);
    } else {
      eles = options3.eles != null ? options3.eles : cy.$();
    }
    var layout6 = new Layout2(extend({}, options3, {
      cy,
      eles
    }));
    return layout6;
  }
};
corefn$6.createLayout = corefn$6.makeLayout = corefn$6.layout;
var corefn$5 = {
  notify: function notify(eventName, eventEles) {
    var _p = this._private;
    if (this.batching()) {
      _p.batchNotifications = _p.batchNotifications || {};
      var eles = _p.batchNotifications[eventName] = _p.batchNotifications[eventName] || this.collection();
      if (eventEles != null) {
        eles.merge(eventEles);
      }
      return;
    }
    if (!_p.notificationsEnabled) {
      return;
    }
    var renderer3 = this.renderer();
    if (this.destroyed() || !renderer3) {
      return;
    }
    renderer3.notify(eventName, eventEles);
  },
  notifications: function notifications(bool) {
    var p3 = this._private;
    if (bool === void 0) {
      return p3.notificationsEnabled;
    } else {
      p3.notificationsEnabled = bool ? true : false;
    }
    return this;
  },
  noNotifications: function noNotifications(callback) {
    this.notifications(false);
    callback();
    this.notifications(true);
  },
  batching: function batching() {
    return this._private.batchCount > 0;
  },
  startBatch: function startBatch() {
    var _p = this._private;
    if (_p.batchCount == null) {
      _p.batchCount = 0;
    }
    if (_p.batchCount === 0) {
      _p.batchStyleEles = this.collection();
      _p.batchNotifications = {};
    }
    _p.batchCount++;
    return this;
  },
  endBatch: function endBatch() {
    var _p = this._private;
    if (_p.batchCount === 0) {
      return this;
    }
    _p.batchCount--;
    if (_p.batchCount === 0) {
      _p.batchStyleEles.updateStyle();
      var renderer3 = this.renderer();
      Object.keys(_p.batchNotifications).forEach(function(eventName) {
        var eles = _p.batchNotifications[eventName];
        if (eles.empty()) {
          renderer3.notify(eventName);
        } else {
          renderer3.notify(eventName, eles);
        }
      });
    }
    return this;
  },
  batch: function batch(callback) {
    this.startBatch();
    callback();
    this.endBatch();
    return this;
  },
  // for backwards compatibility
  batchData: function batchData(map2) {
    var cy = this;
    return this.batch(function() {
      var ids = Object.keys(map2);
      for (var i2 = 0; i2 < ids.length; i2++) {
        var id2 = ids[i2];
        var data4 = map2[id2];
        var ele = cy.getElementById(id2);
        ele.data(data4);
      }
    });
  }
};
var rendererDefaults = defaults$g({
  hideEdgesOnViewport: false,
  textureOnViewport: false,
  motionBlur: false,
  motionBlurOpacity: 0.05,
  pixelRatio: void 0,
  desktopTapThreshold: 4,
  touchTapThreshold: 8,
  wheelSensitivity: 1,
  debug: false,
  showFps: false,
  // webgl options
  webgl: false,
  webglDebug: false,
  webglDebugShowAtlases: false,
  // defaults good for mobile
  webglTexSize: 2048,
  webglTexRows: 36,
  webglTexRowsNodes: 18,
  webglBatchSize: 2048,
  webglTexPerBatch: 14,
  webglBgColor: [255, 255, 255]
});
var corefn$4 = {
  renderTo: function renderTo(context, zoom2, pan2, pxRatio) {
    var r2 = this._private.renderer;
    r2.renderTo(context, zoom2, pan2, pxRatio);
    return this;
  },
  renderer: function renderer() {
    return this._private.renderer;
  },
  forceRender: function forceRender() {
    this.notify("draw");
    return this;
  },
  resize: function resize() {
    this.invalidateSize();
    this.emitAndNotify("resize");
    return this;
  },
  initRenderer: function initRenderer(options3) {
    var cy = this;
    var RendererProto = cy.extension("renderer", options3.name);
    if (RendererProto == null) {
      error("Can not initialise: No such renderer `".concat(options3.name, "` found. Did you forget to import it and `cytoscape.use()` it?"));
      return;
    }
    if (options3.wheelSensitivity !== void 0) {
      warn("You have set a custom wheel sensitivity.  This will make your app zoom unnaturally when using mainstream mice.  You should change this value from the default only if you can guarantee that all your users will use the same hardware and OS configuration as your current machine.");
    }
    var rOpts = rendererDefaults(options3);
    rOpts.cy = cy;
    cy._private.renderer = new RendererProto(rOpts);
    this.notify("init");
  },
  destroyRenderer: function destroyRenderer() {
    var cy = this;
    cy.notify("destroy");
    var domEle = cy.container();
    if (domEle) {
      domEle._cyreg = null;
      while (domEle.childNodes.length > 0) {
        domEle.removeChild(domEle.childNodes[0]);
      }
    }
    cy._private.renderer = null;
    cy.mutableElements().forEach(function(ele) {
      var _p = ele._private;
      _p.rscratch = {};
      _p.rstyle = {};
      _p.animation.current = [];
      _p.animation.queue = [];
    });
  },
  onRender: function onRender(fn4) {
    return this.on("render", fn4);
  },
  offRender: function offRender(fn4) {
    return this.off("render", fn4);
  }
};
corefn$4.invalidateDimensions = corefn$4.resize;
var corefn$3 = {
  // get a collection
  // - empty collection on no args
  // - collection of elements in the graph on selector arg
  // - guarantee a returned collection when elements or collection specified
  collection: function collection3(eles, opts) {
    if (string(eles)) {
      return this.$(eles);
    } else if (elementOrCollection(eles)) {
      return eles.collection();
    } else if (array(eles)) {
      if (!opts) {
        opts = {};
      }
      return new Collection(this, eles, opts.unique, opts.removed);
    }
    return new Collection(this);
  },
  nodes: function nodes2(selector) {
    var nodes3 = this.$(function(ele) {
      return ele.isNode();
    });
    if (selector) {
      return nodes3.filter(selector);
    }
    return nodes3;
  },
  edges: function edges2(selector) {
    var edges3 = this.$(function(ele) {
      return ele.isEdge();
    });
    if (selector) {
      return edges3.filter(selector);
    }
    return edges3;
  },
  // search the graph like jQuery
  $: function $(selector) {
    var eles = this._private.elements;
    if (selector) {
      return eles.filter(selector);
    } else {
      return eles.spawnSelf();
    }
  },
  mutableElements: function mutableElements() {
    return this._private.elements;
  }
};
corefn$3.elements = corefn$3.filter = corefn$3.$;
var styfn$8 = {};
var TRUE = "t";
var FALSE = "f";
styfn$8.apply = function(eles) {
  var self2 = this;
  var _p = self2._private;
  var cy = _p.cy;
  var updatedEles = cy.collection();
  for (var ie2 = 0; ie2 < eles.length; ie2++) {
    var ele = eles[ie2];
    var cxtMeta = self2.getContextMeta(ele);
    if (cxtMeta.empty) {
      continue;
    }
    var cxtStyle = self2.getContextStyle(cxtMeta);
    var app = self2.applyContextStyle(cxtMeta, cxtStyle, ele);
    if (ele._private.appliedInitStyle) {
      self2.updateTransitions(ele, app.diffProps);
    } else {
      ele._private.appliedInitStyle = true;
    }
    var hintsDiff = self2.updateStyleHints(ele);
    if (hintsDiff) {
      updatedEles.push(ele);
    }
  }
  return updatedEles;
};
styfn$8.getPropertiesDiff = function(oldCxtKey, newCxtKey) {
  var self2 = this;
  var cache3 = self2._private.propDiffs = self2._private.propDiffs || {};
  var dualCxtKey = oldCxtKey + "-" + newCxtKey;
  var cachedVal = cache3[dualCxtKey];
  if (cachedVal) {
    return cachedVal;
  }
  var diffProps = [];
  var addedProp = {};
  for (var i2 = 0; i2 < self2.length; i2++) {
    var cxt = self2[i2];
    var oldHasCxt = oldCxtKey[i2] === TRUE;
    var newHasCxt = newCxtKey[i2] === TRUE;
    var cxtHasDiffed = oldHasCxt !== newHasCxt;
    var cxtHasMappedProps = cxt.mappedProperties.length > 0;
    if (cxtHasDiffed || newHasCxt && cxtHasMappedProps) {
      var props = void 0;
      if (cxtHasDiffed && cxtHasMappedProps) {
        props = cxt.properties;
      } else if (cxtHasDiffed) {
        props = cxt.properties;
      } else if (cxtHasMappedProps) {
        props = cxt.mappedProperties;
      }
      for (var j2 = 0; j2 < props.length; j2++) {
        var prop = props[j2];
        var name = prop.name;
        var laterCxtOverrides = false;
        for (var k2 = i2 + 1; k2 < self2.length; k2++) {
          var laterCxt = self2[k2];
          var hasLaterCxt = newCxtKey[k2] === TRUE;
          if (!hasLaterCxt) {
            continue;
          }
          laterCxtOverrides = laterCxt.properties[prop.name] != null;
          if (laterCxtOverrides) {
            break;
          }
        }
        if (!addedProp[name] && !laterCxtOverrides) {
          addedProp[name] = true;
          diffProps.push(name);
        }
      }
    }
  }
  cache3[dualCxtKey] = diffProps;
  return diffProps;
};
styfn$8.getContextMeta = function(ele) {
  var self2 = this;
  var cxtKey = "";
  var diffProps;
  var prevKey = ele._private.styleCxtKey || "";
  for (var i2 = 0; i2 < self2.length; i2++) {
    var context = self2[i2];
    var contextSelectorMatches = context.selector && context.selector.matches(ele);
    if (contextSelectorMatches) {
      cxtKey += TRUE;
    } else {
      cxtKey += FALSE;
    }
  }
  diffProps = self2.getPropertiesDiff(prevKey, cxtKey);
  ele._private.styleCxtKey = cxtKey;
  return {
    key: cxtKey,
    diffPropNames: diffProps,
    empty: diffProps.length === 0
  };
};
styfn$8.getContextStyle = function(cxtMeta) {
  var cxtKey = cxtMeta.key;
  var self2 = this;
  var cxtStyles = this._private.contextStyles = this._private.contextStyles || {};
  if (cxtStyles[cxtKey]) {
    return cxtStyles[cxtKey];
  }
  var style3 = {
    _private: {
      key: cxtKey
    }
  };
  for (var i2 = 0; i2 < self2.length; i2++) {
    var cxt = self2[i2];
    var hasCxt = cxtKey[i2] === TRUE;
    if (!hasCxt) {
      continue;
    }
    for (var j2 = 0; j2 < cxt.properties.length; j2++) {
      var prop = cxt.properties[j2];
      style3[prop.name] = prop;
    }
  }
  cxtStyles[cxtKey] = style3;
  return style3;
};
styfn$8.applyContextStyle = function(cxtMeta, cxtStyle, ele) {
  var self2 = this;
  var diffProps = cxtMeta.diffPropNames;
  var retDiffProps = {};
  var types = self2.types;
  for (var i2 = 0; i2 < diffProps.length; i2++) {
    var diffPropName = diffProps[i2];
    var cxtProp = cxtStyle[diffPropName];
    var eleProp = ele.pstyle(diffPropName);
    if (!cxtProp) {
      if (!eleProp) {
        continue;
      } else if (eleProp.bypass) {
        cxtProp = {
          name: diffPropName,
          deleteBypassed: true
        };
      } else {
        cxtProp = {
          name: diffPropName,
          "delete": true
        };
      }
    }
    if (eleProp === cxtProp) {
      continue;
    }
    if (cxtProp.mapped === types.fn && eleProp != null && eleProp.mapping != null && eleProp.mapping.value === cxtProp.value) {
      var mapping = eleProp.mapping;
      var fnValue = mapping.fnValue = cxtProp.value(ele);
      if (fnValue === mapping.prevFnValue) {
        continue;
      }
    }
    var retDiffProp = retDiffProps[diffPropName] = {
      prev: eleProp
    };
    self2.applyParsedProperty(ele, cxtProp);
    retDiffProp.next = ele.pstyle(diffPropName);
    if (retDiffProp.next && retDiffProp.next.bypass) {
      retDiffProp.next = retDiffProp.next.bypassed;
    }
  }
  return {
    diffProps: retDiffProps
  };
};
styfn$8.updateStyleHints = function(ele) {
  var _p = ele._private;
  var self2 = this;
  var propNames = self2.propertyGroupNames;
  var propGrKeys = self2.propertyGroupKeys;
  var propHash = function propHash2(ele2, propNames2, seedKey) {
    return self2.getPropertiesHash(ele2, propNames2, seedKey);
  };
  var oldStyleKey = _p.styleKey;
  if (ele.removed()) {
    return false;
  }
  var isNode2 = _p.group === "nodes";
  var overriddenStyles = ele._private.style;
  propNames = Object.keys(overriddenStyles);
  for (var i2 = 0; i2 < propGrKeys.length; i2++) {
    var grKey = propGrKeys[i2];
    _p.styleKeys[grKey] = [DEFAULT_HASH_SEED, DEFAULT_HASH_SEED_ALT];
  }
  var updateGrKey1 = function updateGrKey12(val, grKey2) {
    return _p.styleKeys[grKey2][0] = hashInt(val, _p.styleKeys[grKey2][0]);
  };
  var updateGrKey2 = function updateGrKey22(val, grKey2) {
    return _p.styleKeys[grKey2][1] = hashIntAlt(val, _p.styleKeys[grKey2][1]);
  };
  var updateGrKey = function updateGrKey3(val, grKey2) {
    updateGrKey1(val, grKey2);
    updateGrKey2(val, grKey2);
  };
  var updateGrKeyWStr = function updateGrKeyWStr2(strVal, grKey2) {
    for (var j2 = 0; j2 < strVal.length; j2++) {
      var ch2 = strVal.charCodeAt(j2);
      updateGrKey1(ch2, grKey2);
      updateGrKey2(ch2, grKey2);
    }
  };
  var N2 = 2e9;
  var cleanNum = function cleanNum2(val) {
    return -128 < val && val < 128 && Math.floor(val) !== val ? N2 - (val * 1024 | 0) : val;
  };
  for (var _i2 = 0; _i2 < propNames.length; _i2++) {
    var name = propNames[_i2];
    var parsedProp = overriddenStyles[name];
    if (parsedProp == null) {
      continue;
    }
    var propInfo = this.properties[name];
    var type2 = propInfo.type;
    var _grKey = propInfo.groupKey;
    var normalizedNumberVal = void 0;
    if (propInfo.hashOverride != null) {
      normalizedNumberVal = propInfo.hashOverride(ele, parsedProp);
    } else if (parsedProp.pfValue != null) {
      normalizedNumberVal = parsedProp.pfValue;
    }
    var numberVal = propInfo.enums == null ? parsedProp.value : null;
    var haveNormNum = normalizedNumberVal != null;
    var haveUnitedNum = numberVal != null;
    var haveNum = haveNormNum || haveUnitedNum;
    var units = parsedProp.units;
    if (type2.number && haveNum && !type2.multiple) {
      var v3 = haveNormNum ? normalizedNumberVal : numberVal;
      updateGrKey(cleanNum(v3), _grKey);
      if (!haveNormNum && units != null) {
        updateGrKeyWStr(units, _grKey);
      }
    } else {
      updateGrKeyWStr(parsedProp.strValue, _grKey);
    }
  }
  var hash = [DEFAULT_HASH_SEED, DEFAULT_HASH_SEED_ALT];
  for (var _i22 = 0; _i22 < propGrKeys.length; _i22++) {
    var _grKey2 = propGrKeys[_i22];
    var grHash = _p.styleKeys[_grKey2];
    hash[0] = hashInt(grHash[0], hash[0]);
    hash[1] = hashIntAlt(grHash[1], hash[1]);
  }
  _p.styleKey = combineHashes(hash[0], hash[1]);
  var sk = _p.styleKeys;
  _p.labelDimsKey = combineHashesArray(sk.labelDimensions);
  var labelKeys = propHash(ele, ["label"], sk.labelDimensions);
  _p.labelKey = combineHashesArray(labelKeys);
  _p.labelStyleKey = combineHashesArray(hashArrays(sk.commonLabel, labelKeys));
  if (!isNode2) {
    var sourceLabelKeys = propHash(ele, ["source-label"], sk.labelDimensions);
    _p.sourceLabelKey = combineHashesArray(sourceLabelKeys);
    _p.sourceLabelStyleKey = combineHashesArray(hashArrays(sk.commonLabel, sourceLabelKeys));
    var targetLabelKeys = propHash(ele, ["target-label"], sk.labelDimensions);
    _p.targetLabelKey = combineHashesArray(targetLabelKeys);
    _p.targetLabelStyleKey = combineHashesArray(hashArrays(sk.commonLabel, targetLabelKeys));
  }
  if (isNode2) {
    var _p$styleKeys = _p.styleKeys, nodeBody = _p$styleKeys.nodeBody, nodeBorder = _p$styleKeys.nodeBorder, nodeOutline = _p$styleKeys.nodeOutline, backgroundImage = _p$styleKeys.backgroundImage, compound = _p$styleKeys.compound, pie = _p$styleKeys.pie, stripe = _p$styleKeys.stripe;
    var nodeKeys = [nodeBody, nodeBorder, nodeOutline, backgroundImage, compound, pie, stripe].filter(function(k2) {
      return k2 != null;
    }).reduce(hashArrays, [DEFAULT_HASH_SEED, DEFAULT_HASH_SEED_ALT]);
    _p.nodeKey = combineHashesArray(nodeKeys);
    _p.hasPie = pie != null && pie[0] !== DEFAULT_HASH_SEED && pie[1] !== DEFAULT_HASH_SEED_ALT;
    _p.hasStripe = stripe != null && stripe[0] !== DEFAULT_HASH_SEED && stripe[1] !== DEFAULT_HASH_SEED_ALT;
  }
  return oldStyleKey !== _p.styleKey;
};
styfn$8.clearStyleHints = function(ele) {
  var _p = ele._private;
  _p.styleCxtKey = "";
  _p.styleKeys = {};
  _p.styleKey = null;
  _p.labelKey = null;
  _p.labelStyleKey = null;
  _p.sourceLabelKey = null;
  _p.sourceLabelStyleKey = null;
  _p.targetLabelKey = null;
  _p.targetLabelStyleKey = null;
  _p.nodeKey = null;
  _p.hasPie = null;
  _p.hasStripe = null;
};
styfn$8.applyParsedProperty = function(ele, parsedProp) {
  var self2 = this;
  var prop = parsedProp;
  var style3 = ele._private.style;
  var flatProp;
  var types = self2.types;
  var type2 = self2.properties[prop.name].type;
  var propIsBypass = prop.bypass;
  var origProp = style3[prop.name];
  var origPropIsBypass = origProp && origProp.bypass;
  var _p = ele._private;
  var flatPropMapping = "mapping";
  var getVal = function getVal2(p3) {
    if (p3 == null) {
      return null;
    } else if (p3.pfValue != null) {
      return p3.pfValue;
    } else {
      return p3.value;
    }
  };
  var checkTriggers = function checkTriggers2() {
    var fromVal = getVal(origProp);
    var toVal = getVal(prop);
    self2.checkTriggers(ele, prop.name, fromVal, toVal);
  };
  if (parsedProp.name === "curve-style" && ele.isEdge() && // loops must be bundled beziers
  (parsedProp.value !== "bezier" && ele.isLoop() || // edges connected to compound nodes can not be haystacks
  parsedProp.value === "haystack" && (ele.source().isParent() || ele.target().isParent()))) {
    prop = parsedProp = this.parse(parsedProp.name, "bezier", propIsBypass);
  }
  if (prop["delete"]) {
    style3[prop.name] = void 0;
    checkTriggers();
    return true;
  }
  if (prop.deleteBypassed) {
    if (!origProp) {
      checkTriggers();
      return true;
    } else if (origProp.bypass) {
      origProp.bypassed = void 0;
      checkTriggers();
      return true;
    } else {
      return false;
    }
  }
  if (prop.deleteBypass) {
    if (!origProp) {
      checkTriggers();
      return true;
    } else if (origProp.bypass) {
      style3[prop.name] = origProp.bypassed;
      checkTriggers();
      return true;
    } else {
      return false;
    }
  }
  var printMappingErr = function printMappingErr2() {
    warn("Do not assign mappings to elements without corresponding data (i.e. ele `" + ele.id() + "` has no mapping for property `" + prop.name + "` with data field `" + prop.field + "`); try a `[" + prop.field + "]` selector to limit scope to elements with `" + prop.field + "` defined");
  };
  switch (prop.mapped) {
    case types.mapData: {
      var fields = prop.field.split(".");
      var fieldVal = _p.data;
      for (var i2 = 0; i2 < fields.length && fieldVal; i2++) {
        var field = fields[i2];
        fieldVal = fieldVal[field];
      }
      if (fieldVal == null) {
        printMappingErr();
        return false;
      }
      var percent;
      if (!number$1(fieldVal)) {
        warn("Do not use continuous mappers without specifying numeric data (i.e. `" + prop.field + ": " + fieldVal + "` for `" + ele.id() + "` is non-numeric)");
        return false;
      } else {
        var fieldWidth = prop.fieldMax - prop.fieldMin;
        if (fieldWidth === 0) {
          percent = 0;
        } else {
          percent = (fieldVal - prop.fieldMin) / fieldWidth;
        }
      }
      if (percent < 0) {
        percent = 0;
      } else if (percent > 1) {
        percent = 1;
      }
      if (type2.color) {
        var r1 = prop.valueMin[0];
        var r2 = prop.valueMax[0];
        var g1 = prop.valueMin[1];
        var g2 = prop.valueMax[1];
        var b1 = prop.valueMin[2];
        var b2 = prop.valueMax[2];
        var a1 = prop.valueMin[3] == null ? 1 : prop.valueMin[3];
        var a2 = prop.valueMax[3] == null ? 1 : prop.valueMax[3];
        var clr = [Math.round(r1 + (r2 - r1) * percent), Math.round(g1 + (g2 - g1) * percent), Math.round(b1 + (b2 - b1) * percent), Math.round(a1 + (a2 - a1) * percent)];
        flatProp = {
          // colours are simple, so just create the flat property instead of expensive string parsing
          bypass: prop.bypass,
          // we're a bypass if the mapping property is a bypass
          name: prop.name,
          value: clr,
          strValue: "rgb(" + clr[0] + ", " + clr[1] + ", " + clr[2] + ")"
        };
      } else if (type2.number) {
        var calcValue = prop.valueMin + (prop.valueMax - prop.valueMin) * percent;
        flatProp = this.parse(prop.name, calcValue, prop.bypass, flatPropMapping);
      } else {
        return false;
      }
      if (!flatProp) {
        printMappingErr();
        return false;
      }
      flatProp.mapping = prop;
      prop = flatProp;
      break;
    }
    case types.data: {
      var _fields = prop.field.split(".");
      var _fieldVal = _p.data;
      for (var _i3 = 0; _i3 < _fields.length && _fieldVal; _i3++) {
        var _field = _fields[_i3];
        _fieldVal = _fieldVal[_field];
      }
      if (_fieldVal != null) {
        flatProp = this.parse(prop.name, _fieldVal, prop.bypass, flatPropMapping);
      }
      if (!flatProp) {
        printMappingErr();
        return false;
      }
      flatProp.mapping = prop;
      prop = flatProp;
      break;
    }
    case types.fn: {
      var fn4 = prop.value;
      var fnRetVal = prop.fnValue != null ? prop.fnValue : fn4(ele);
      prop.prevFnValue = fnRetVal;
      if (fnRetVal == null) {
        warn("Custom function mappers may not return null (i.e. `" + prop.name + "` for ele `" + ele.id() + "` is null)");
        return false;
      }
      flatProp = this.parse(prop.name, fnRetVal, prop.bypass, flatPropMapping);
      if (!flatProp) {
        warn("Custom function mappers may not return invalid values for the property type (i.e. `" + prop.name + "` for ele `" + ele.id() + "` is invalid)");
        return false;
      }
      flatProp.mapping = copy(prop);
      prop = flatProp;
      break;
    }
    case void 0:
      break;
    default:
      return false;
  }
  if (propIsBypass) {
    if (origPropIsBypass) {
      prop.bypassed = origProp.bypassed;
    } else {
      prop.bypassed = origProp;
    }
    style3[prop.name] = prop;
  } else {
    if (origPropIsBypass) {
      origProp.bypassed = prop;
    } else {
      style3[prop.name] = prop;
    }
  }
  checkTriggers();
  return true;
};
styfn$8.cleanElements = function(eles, keepBypasses) {
  for (var i2 = 0; i2 < eles.length; i2++) {
    var ele = eles[i2];
    this.clearStyleHints(ele);
    ele.dirtyCompoundBoundsCache();
    ele.dirtyBoundingBoxCache();
    if (!keepBypasses) {
      ele._private.style = {};
    } else {
      var style3 = ele._private.style;
      var propNames = Object.keys(style3);
      for (var j2 = 0; j2 < propNames.length; j2++) {
        var propName = propNames[j2];
        var eleProp = style3[propName];
        if (eleProp != null) {
          if (eleProp.bypass) {
            eleProp.bypassed = null;
          } else {
            style3[propName] = null;
          }
        }
      }
    }
  }
};
styfn$8.update = function() {
  var cy = this._private.cy;
  var eles = cy.mutableElements();
  eles.updateStyle();
};
styfn$8.updateTransitions = function(ele, diffProps) {
  var self2 = this;
  var _p = ele._private;
  var props = ele.pstyle("transition-property").value;
  var duration = ele.pstyle("transition-duration").pfValue;
  var delay2 = ele.pstyle("transition-delay").pfValue;
  if (props.length > 0 && duration > 0) {
    var style3 = {};
    var anyPrev = false;
    for (var i2 = 0; i2 < props.length; i2++) {
      var prop = props[i2];
      var styProp = ele.pstyle(prop);
      var diffProp = diffProps[prop];
      if (!diffProp) {
        continue;
      }
      var prevProp = diffProp.prev;
      var fromProp = prevProp;
      var toProp = diffProp.next != null ? diffProp.next : styProp;
      var diff2 = false;
      var initVal = void 0;
      var initDt = 1e-6;
      if (!fromProp) {
        continue;
      }
      if (number$1(fromProp.pfValue) && number$1(toProp.pfValue)) {
        diff2 = toProp.pfValue - fromProp.pfValue;
        initVal = fromProp.pfValue + initDt * diff2;
      } else if (number$1(fromProp.value) && number$1(toProp.value)) {
        diff2 = toProp.value - fromProp.value;
        initVal = fromProp.value + initDt * diff2;
      } else if (array(fromProp.value) && array(toProp.value)) {
        diff2 = fromProp.value[0] !== toProp.value[0] || fromProp.value[1] !== toProp.value[1] || fromProp.value[2] !== toProp.value[2];
        initVal = fromProp.strValue;
      }
      if (diff2) {
        style3[prop] = toProp.strValue;
        this.applyBypass(ele, prop, initVal);
        anyPrev = true;
      }
    }
    if (!anyPrev) {
      return;
    }
    _p.transitioning = true;
    new Promise$1(function(resolve2) {
      if (delay2 > 0) {
        ele.delayAnimation(delay2).play().promise().then(resolve2);
      } else {
        resolve2();
      }
    }).then(function() {
      return ele.animation({
        style: style3,
        duration,
        easing: ele.pstyle("transition-timing-function").value,
        queue: false
      }).play().promise();
    }).then(function() {
      self2.removeBypasses(ele, props);
      ele.emitAndNotify("style");
      _p.transitioning = false;
    });
  } else if (_p.transitioning) {
    this.removeBypasses(ele, props);
    ele.emitAndNotify("style");
    _p.transitioning = false;
  }
};
styfn$8.checkTrigger = function(ele, name, fromValue, toValue, getTrigger, onTrigger) {
  var prop = this.properties[name];
  var triggerCheck = getTrigger(prop);
  if (ele.removed()) {
    return;
  }
  if (triggerCheck != null && triggerCheck(fromValue, toValue, ele)) {
    onTrigger(prop);
  }
};
styfn$8.checkZOrderTrigger = function(ele, name, fromValue, toValue) {
  var _this = this;
  this.checkTrigger(ele, name, fromValue, toValue, function(prop) {
    return prop.triggersZOrder;
  }, function() {
    _this._private.cy.notify("zorder", ele);
  });
};
styfn$8.checkBoundsTrigger = function(ele, name, fromValue, toValue) {
  this.checkTrigger(ele, name, fromValue, toValue, function(prop) {
    return prop.triggersBounds;
  }, function(prop) {
    ele.dirtyCompoundBoundsCache();
    ele.dirtyBoundingBoxCache();
  });
};
styfn$8.checkConnectedEdgesBoundsTrigger = function(ele, name, fromValue, toValue) {
  this.checkTrigger(ele, name, fromValue, toValue, function(prop) {
    return prop.triggersBoundsOfConnectedEdges;
  }, function(prop) {
    ele.connectedEdges().forEach(function(edge) {
      edge.dirtyBoundingBoxCache();
    });
  });
};
styfn$8.checkParallelEdgesBoundsTrigger = function(ele, name, fromValue, toValue) {
  this.checkTrigger(ele, name, fromValue, toValue, function(prop) {
    return prop.triggersBoundsOfParallelEdges;
  }, function(prop) {
    ele.parallelEdges().forEach(function(pllEdge) {
      pllEdge.dirtyBoundingBoxCache();
    });
  });
};
styfn$8.checkTriggers = function(ele, name, fromValue, toValue) {
  ele.dirtyStyleCache();
  this.checkZOrderTrigger(ele, name, fromValue, toValue);
  this.checkBoundsTrigger(ele, name, fromValue, toValue);
  this.checkConnectedEdgesBoundsTrigger(ele, name, fromValue, toValue);
  this.checkParallelEdgesBoundsTrigger(ele, name, fromValue, toValue);
};
var styfn$7 = {};
styfn$7.applyBypass = function(eles, name, value, updateTransitions) {
  var self2 = this;
  var props = [];
  var isBypass = true;
  if (name === "*" || name === "**") {
    if (value !== void 0) {
      for (var i2 = 0; i2 < self2.properties.length; i2++) {
        var prop = self2.properties[i2];
        var _name = prop.name;
        var parsedProp = this.parse(_name, value, true);
        if (parsedProp) {
          props.push(parsedProp);
        }
      }
    }
  } else if (string(name)) {
    var _parsedProp = this.parse(name, value, true);
    if (_parsedProp) {
      props.push(_parsedProp);
    }
  } else if (plainObject(name)) {
    var specifiedProps = name;
    updateTransitions = value;
    var names = Object.keys(specifiedProps);
    for (var _i2 = 0; _i2 < names.length; _i2++) {
      var _name2 = names[_i2];
      var _value = specifiedProps[_name2];
      if (_value === void 0) {
        _value = specifiedProps[dash2camel(_name2)];
      }
      if (_value !== void 0) {
        var _parsedProp2 = this.parse(_name2, _value, true);
        if (_parsedProp2) {
          props.push(_parsedProp2);
        }
      }
    }
  } else {
    return false;
  }
  if (props.length === 0) {
    return false;
  }
  var ret = false;
  for (var _i22 = 0; _i22 < eles.length; _i22++) {
    var ele = eles[_i22];
    var diffProps = {};
    var diffProp = void 0;
    for (var j2 = 0; j2 < props.length; j2++) {
      var _prop = props[j2];
      if (updateTransitions) {
        var prevProp = ele.pstyle(_prop.name);
        diffProp = diffProps[_prop.name] = {
          prev: prevProp
        };
      }
      ret = this.applyParsedProperty(ele, copy(_prop)) || ret;
      if (updateTransitions) {
        diffProp.next = ele.pstyle(_prop.name);
      }
    }
    if (ret) {
      this.updateStyleHints(ele);
    }
    if (updateTransitions) {
      this.updateTransitions(ele, diffProps, isBypass);
    }
  }
  return ret;
};
styfn$7.overrideBypass = function(eles, name, value) {
  name = camel2dash(name);
  for (var i2 = 0; i2 < eles.length; i2++) {
    var ele = eles[i2];
    var prop = ele._private.style[name];
    var type2 = this.properties[name].type;
    var isColor = type2.color;
    var isMulti = type2.mutiple;
    var oldValue = !prop ? null : prop.pfValue != null ? prop.pfValue : prop.value;
    if (!prop || !prop.bypass) {
      this.applyBypass(ele, name, value);
    } else {
      prop.value = value;
      if (prop.pfValue != null) {
        prop.pfValue = value;
      }
      if (isColor) {
        prop.strValue = "rgb(" + value.join(",") + ")";
      } else if (isMulti) {
        prop.strValue = value.join(" ");
      } else {
        prop.strValue = "" + value;
      }
      this.updateStyleHints(ele);
    }
    this.checkTriggers(ele, name, oldValue, value);
  }
};
styfn$7.removeAllBypasses = function(eles, updateTransitions) {
  return this.removeBypasses(eles, this.propertyNames, updateTransitions);
};
styfn$7.removeBypasses = function(eles, props, updateTransitions) {
  var isBypass = true;
  for (var j2 = 0; j2 < eles.length; j2++) {
    var ele = eles[j2];
    var diffProps = {};
    for (var i2 = 0; i2 < props.length; i2++) {
      var name = props[i2];
      var prop = this.properties[name];
      var prevProp = ele.pstyle(prop.name);
      if (!prevProp || !prevProp.bypass) {
        continue;
      }
      var value = "";
      var parsedProp = this.parse(name, value, true);
      var diffProp = diffProps[prop.name] = {
        prev: prevProp
      };
      this.applyParsedProperty(ele, parsedProp);
      diffProp.next = ele.pstyle(prop.name);
    }
    this.updateStyleHints(ele);
    if (updateTransitions) {
      this.updateTransitions(ele, diffProps, isBypass);
    }
  }
};
var styfn$6 = {};
styfn$6.getEmSizeInPixels = function() {
  var px = this.containerCss("font-size");
  if (px != null) {
    return parseFloat(px);
  } else {
    return 1;
  }
};
styfn$6.containerCss = function(propName) {
  var cy = this._private.cy;
  var domElement3 = cy.container();
  var containerWindow = cy.window();
  if (containerWindow && domElement3 && containerWindow.getComputedStyle) {
    return containerWindow.getComputedStyle(domElement3).getPropertyValue(propName);
  }
};
var styfn$5 = {};
styfn$5.getRenderedStyle = function(ele, prop) {
  if (prop) {
    return this.getStylePropertyValue(ele, prop, true);
  } else {
    return this.getRawStyle(ele, true);
  }
};
styfn$5.getRawStyle = function(ele, isRenderedVal) {
  var self2 = this;
  ele = ele[0];
  if (ele) {
    var rstyle = {};
    for (var i2 = 0; i2 < self2.properties.length; i2++) {
      var prop = self2.properties[i2];
      var val = self2.getStylePropertyValue(ele, prop.name, isRenderedVal);
      if (val != null) {
        rstyle[prop.name] = val;
        rstyle[dash2camel(prop.name)] = val;
      }
    }
    return rstyle;
  }
};
styfn$5.getIndexedStyle = function(ele, property, subproperty, index) {
  var pstyle = ele.pstyle(property)[subproperty][index];
  return pstyle != null ? pstyle : ele.cy().style().getDefaultProperty(property)[subproperty][0];
};
styfn$5.getStylePropertyValue = function(ele, propName, isRenderedVal) {
  var self2 = this;
  ele = ele[0];
  if (ele) {
    var prop = self2.properties[propName];
    if (prop.alias) {
      prop = prop.pointsTo;
    }
    var type2 = prop.type;
    var styleProp = ele.pstyle(prop.name);
    if (styleProp) {
      var value = styleProp.value, units = styleProp.units, strValue = styleProp.strValue;
      if (isRenderedVal && type2.number && value != null && number$1(value)) {
        var zoom2 = ele.cy().zoom();
        var getRenderedValue = function getRenderedValue2(val) {
          return val * zoom2;
        };
        var getValueStringWithUnits = function getValueStringWithUnits2(val, units2) {
          return getRenderedValue(val) + units2;
        };
        var isArrayValue = array(value);
        var haveUnits = isArrayValue ? units.every(function(u2) {
          return u2 != null;
        }) : units != null;
        if (haveUnits) {
          if (isArrayValue) {
            return value.map(function(v3, i2) {
              return getValueStringWithUnits(v3, units[i2]);
            }).join(" ");
          } else {
            return getValueStringWithUnits(value, units);
          }
        } else {
          if (isArrayValue) {
            return value.map(function(v3) {
              return string(v3) ? v3 : "" + getRenderedValue(v3);
            }).join(" ");
          } else {
            return "" + getRenderedValue(value);
          }
        }
      } else if (strValue != null) {
        return strValue;
      }
    }
    return null;
  }
};
styfn$5.getAnimationStartStyle = function(ele, aniProps) {
  var rstyle = {};
  for (var i2 = 0; i2 < aniProps.length; i2++) {
    var aniProp = aniProps[i2];
    var name = aniProp.name;
    var styleProp = ele.pstyle(name);
    if (styleProp !== void 0) {
      if (plainObject(styleProp)) {
        styleProp = this.parse(name, styleProp.strValue);
      } else {
        styleProp = this.parse(name, styleProp);
      }
    }
    if (styleProp) {
      rstyle[name] = styleProp;
    }
  }
  return rstyle;
};
styfn$5.getPropsList = function(propsObj) {
  var self2 = this;
  var rstyle = [];
  var style3 = propsObj;
  var props = self2.properties;
  if (style3) {
    var names = Object.keys(style3);
    for (var i2 = 0; i2 < names.length; i2++) {
      var name = names[i2];
      var val = style3[name];
      var prop = props[name] || props[camel2dash(name)];
      var styleProp = this.parse(prop.name, val);
      if (styleProp) {
        rstyle.push(styleProp);
      }
    }
  }
  return rstyle;
};
styfn$5.getNonDefaultPropertiesHash = function(ele, propNames, seed) {
  var hash = seed.slice();
  var name, val, strVal, chVal;
  var i2, j2;
  for (i2 = 0; i2 < propNames.length; i2++) {
    name = propNames[i2];
    val = ele.pstyle(name, false);
    if (val == null) {
      continue;
    } else if (val.pfValue != null) {
      hash[0] = hashInt(chVal, hash[0]);
      hash[1] = hashIntAlt(chVal, hash[1]);
    } else {
      strVal = val.strValue;
      for (j2 = 0; j2 < strVal.length; j2++) {
        chVal = strVal.charCodeAt(j2);
        hash[0] = hashInt(chVal, hash[0]);
        hash[1] = hashIntAlt(chVal, hash[1]);
      }
    }
  }
  return hash;
};
styfn$5.getPropertiesHash = styfn$5.getNonDefaultPropertiesHash;
var styfn$4 = {};
styfn$4.appendFromJson = function(json2) {
  var style3 = this;
  for (var i2 = 0; i2 < json2.length; i2++) {
    var context = json2[i2];
    var selector = context.selector;
    var props = context.style || context.css;
    var names = Object.keys(props);
    style3.selector(selector);
    for (var j2 = 0; j2 < names.length; j2++) {
      var name = names[j2];
      var value = props[name];
      style3.css(name, value);
    }
  }
  return style3;
};
styfn$4.fromJson = function(json2) {
  var style3 = this;
  style3.resetToDefault();
  style3.appendFromJson(json2);
  return style3;
};
styfn$4.json = function() {
  var json2 = [];
  for (var i2 = this.defaultLength; i2 < this.length; i2++) {
    var cxt = this[i2];
    var selector = cxt.selector;
    var props = cxt.properties;
    var css = {};
    for (var j2 = 0; j2 < props.length; j2++) {
      var prop = props[j2];
      css[prop.name] = prop.strValue;
    }
    json2.push({
      selector: !selector ? "core" : selector.toString(),
      style: css
    });
  }
  return json2;
};
var styfn$3 = {};
styfn$3.appendFromString = function(string3) {
  var self2 = this;
  var style3 = this;
  var remaining = "" + string3;
  var selAndBlockStr;
  var blockRem;
  var propAndValStr;
  remaining = remaining.replace(/[/][*](\s|.)+?[*][/]/g, "");
  function removeSelAndBlockFromRemaining() {
    if (remaining.length > selAndBlockStr.length) {
      remaining = remaining.substr(selAndBlockStr.length);
    } else {
      remaining = "";
    }
  }
  function removePropAndValFromRem() {
    if (blockRem.length > propAndValStr.length) {
      blockRem = blockRem.substr(propAndValStr.length);
    } else {
      blockRem = "";
    }
  }
  for (; ; ) {
    var nothingLeftToParse = remaining.match(/^\s*$/);
    if (nothingLeftToParse) {
      break;
    }
    var selAndBlock = remaining.match(/^\s*((?:.|\s)+?)\s*\{((?:.|\s)+?)\}/);
    if (!selAndBlock) {
      warn("Halting stylesheet parsing: String stylesheet contains more to parse but no selector and block found in: " + remaining);
      break;
    }
    selAndBlockStr = selAndBlock[0];
    var selectorStr = selAndBlock[1];
    if (selectorStr !== "core") {
      var selector = new Selector(selectorStr);
      if (selector.invalid) {
        warn("Skipping parsing of block: Invalid selector found in string stylesheet: " + selectorStr);
        removeSelAndBlockFromRemaining();
        continue;
      }
    }
    var blockStr = selAndBlock[2];
    var invalidBlock = false;
    blockRem = blockStr;
    var props = [];
    for (; ; ) {
      var _nothingLeftToParse = blockRem.match(/^\s*$/);
      if (_nothingLeftToParse) {
        break;
      }
      var propAndVal = blockRem.match(/^\s*(.+?)\s*:\s*(.+?)(?:\s*;|\s*$)/);
      if (!propAndVal) {
        warn("Skipping parsing of block: Invalid formatting of style property and value definitions found in:" + blockStr);
        invalidBlock = true;
        break;
      }
      propAndValStr = propAndVal[0];
      var propStr = propAndVal[1];
      var valStr = propAndVal[2];
      var prop = self2.properties[propStr];
      if (!prop) {
        warn("Skipping property: Invalid property name in: " + propAndValStr);
        removePropAndValFromRem();
        continue;
      }
      var parsedProp = style3.parse(propStr, valStr);
      if (!parsedProp) {
        warn("Skipping property: Invalid property definition in: " + propAndValStr);
        removePropAndValFromRem();
        continue;
      }
      props.push({
        name: propStr,
        val: valStr
      });
      removePropAndValFromRem();
    }
    if (invalidBlock) {
      removeSelAndBlockFromRemaining();
      break;
    }
    style3.selector(selectorStr);
    for (var i2 = 0; i2 < props.length; i2++) {
      var _prop = props[i2];
      style3.css(_prop.name, _prop.val);
    }
    removeSelAndBlockFromRemaining();
  }
  return style3;
};
styfn$3.fromString = function(string3) {
  var style3 = this;
  style3.resetToDefault();
  style3.appendFromString(string3);
  return style3;
};
var styfn$2 = {};
(function() {
  var number$12 = number2;
  var rgba2 = rgbaNoBackRefs;
  var hsla2 = hslaNoBackRefs;
  var hex3$1 = hex3;
  var hex6$1 = hex6;
  var data4 = function data5(prefix) {
    return "^" + prefix + "\\s*\\(\\s*([\\w\\.]+)\\s*\\)$";
  };
  var mapData = function mapData2(prefix) {
    var mapArg = number$12 + "|\\w+|" + rgba2 + "|" + hsla2 + "|" + hex3$1 + "|" + hex6$1;
    return "^" + prefix + "\\s*\\(([\\w\\.]+)\\s*\\,\\s*(" + number$12 + ")\\s*\\,\\s*(" + number$12 + ")\\s*,\\s*(" + mapArg + ")\\s*\\,\\s*(" + mapArg + ")\\)$";
  };
  var urlRegexes = [`^url\\s*\\(\\s*['"]?(.+?)['"]?\\s*\\)$`, "^(none)$", "^(.+)$"];
  styfn$2.types = {
    time: {
      number: true,
      min: 0,
      units: "s|ms",
      implicitUnits: "ms"
    },
    percent: {
      number: true,
      min: 0,
      max: 100,
      units: "%",
      implicitUnits: "%"
    },
    percentages: {
      number: true,
      min: 0,
      max: 100,
      units: "%",
      implicitUnits: "%",
      multiple: true
    },
    zeroOneNumber: {
      number: true,
      min: 0,
      max: 1,
      unitless: true
    },
    zeroOneNumbers: {
      number: true,
      min: 0,
      max: 1,
      unitless: true,
      multiple: true
    },
    nOneOneNumber: {
      number: true,
      min: -1,
      max: 1,
      unitless: true
    },
    nonNegativeInt: {
      number: true,
      min: 0,
      integer: true,
      unitless: true
    },
    nonNegativeNumber: {
      number: true,
      min: 0,
      unitless: true
    },
    position: {
      enums: ["parent", "origin"]
    },
    nodeSize: {
      number: true,
      min: 0,
      enums: ["label"]
    },
    number: {
      number: true,
      unitless: true
    },
    numbers: {
      number: true,
      unitless: true,
      multiple: true
    },
    positiveNumber: {
      number: true,
      unitless: true,
      min: 0,
      strictMin: true
    },
    size: {
      number: true,
      min: 0
    },
    bidirectionalSize: {
      number: true
    },
    // allows negative
    bidirectionalSizeMaybePercent: {
      number: true,
      allowPercent: true
    },
    // allows negative
    bidirectionalSizes: {
      number: true,
      multiple: true
    },
    // allows negative
    sizeMaybePercent: {
      number: true,
      min: 0,
      allowPercent: true
    },
    axisDirection: {
      enums: ["horizontal", "leftward", "rightward", "vertical", "upward", "downward", "auto"]
    },
    axisDirectionExplicit: {
      enums: ["leftward", "rightward", "upward", "downward"]
    },
    axisDirectionPrimary: {
      enums: ["horizontal", "vertical"]
    },
    paddingRelativeTo: {
      enums: ["width", "height", "average", "min", "max"]
    },
    bgWH: {
      number: true,
      min: 0,
      allowPercent: true,
      enums: ["auto"],
      multiple: true
    },
    bgPos: {
      number: true,
      allowPercent: true,
      multiple: true
    },
    bgRelativeTo: {
      enums: ["inner", "include-padding"],
      multiple: true
    },
    bgRepeat: {
      enums: ["repeat", "repeat-x", "repeat-y", "no-repeat"],
      multiple: true
    },
    bgFit: {
      enums: ["none", "contain", "cover"],
      multiple: true
    },
    bgCrossOrigin: {
      enums: ["anonymous", "use-credentials", "null"],
      multiple: true
    },
    bgClip: {
      enums: ["none", "node"],
      multiple: true
    },
    bgContainment: {
      enums: ["inside", "over"],
      multiple: true
    },
    boxSelection: {
      enums: ["contain", "overlap", "none"]
    },
    color: {
      color: true
    },
    colors: {
      color: true,
      multiple: true
    },
    fill: {
      enums: ["solid", "linear-gradient", "radial-gradient"]
    },
    bool: {
      enums: ["yes", "no"]
    },
    bools: {
      enums: ["yes", "no"],
      multiple: true
    },
    lineStyle: {
      enums: ["solid", "dotted", "dashed"]
    },
    lineCap: {
      enums: ["butt", "round", "square"]
    },
    linePosition: {
      enums: ["center", "inside", "outside"]
    },
    lineJoin: {
      enums: ["round", "bevel", "miter"]
    },
    borderStyle: {
      enums: ["solid", "dotted", "dashed", "double"]
    },
    curveStyle: {
      enums: ["bezier", "unbundled-bezier", "haystack", "segments", "straight", "straight-triangle", "taxi", "round-segments", "round-taxi"]
    },
    radiusType: {
      enums: ["arc-radius", "influence-radius"],
      multiple: true
    },
    fontFamily: {
      regex: '^([\\w- \\"]+(?:\\s*,\\s*[\\w- \\"]+)*)$'
    },
    fontStyle: {
      enums: ["italic", "normal", "oblique"]
    },
    fontWeight: {
      enums: ["normal", "bold", "bolder", "lighter", "100", "200", "300", "400", "500", "600", "800", "900", 100, 200, 300, 400, 500, 600, 700, 800, 900]
    },
    textDecoration: {
      enums: ["none", "underline", "overline", "line-through"]
    },
    textTransform: {
      enums: ["none", "uppercase", "lowercase"]
    },
    textWrap: {
      enums: ["none", "wrap", "ellipsis"]
    },
    textOverflowWrap: {
      enums: ["whitespace", "anywhere"]
    },
    textBackgroundShape: {
      enums: ["rectangle", "roundrectangle", "round-rectangle", "circle"]
    },
    nodeShape: {
      enums: ["rectangle", "roundrectangle", "round-rectangle", "cutrectangle", "cut-rectangle", "bottomroundrectangle", "bottom-round-rectangle", "barrel", "ellipse", "triangle", "round-triangle", "square", "pentagon", "round-pentagon", "hexagon", "round-hexagon", "concavehexagon", "concave-hexagon", "heptagon", "round-heptagon", "octagon", "round-octagon", "tag", "round-tag", "star", "diamond", "round-diamond", "vee", "rhomboid", "right-rhomboid", "polygon"]
    },
    overlayShape: {
      enums: ["roundrectangle", "round-rectangle", "ellipse"]
    },
    cornerRadius: {
      number: true,
      min: 0,
      units: "px|em",
      implicitUnits: "px",
      enums: ["auto"]
    },
    compoundIncludeLabels: {
      enums: ["include", "exclude"]
    },
    arrowShape: {
      enums: ["tee", "triangle", "triangle-tee", "circle-triangle", "triangle-cross", "triangle-backcurve", "vee", "square", "circle", "diamond", "chevron", "none"]
    },
    arrowFill: {
      enums: ["filled", "hollow"]
    },
    arrowWidth: {
      number: true,
      units: "%|px|em",
      implicitUnits: "px",
      enums: ["match-line"]
    },
    display: {
      enums: ["element", "none"]
    },
    visibility: {
      enums: ["hidden", "visible"]
    },
    zCompoundDepth: {
      enums: ["bottom", "orphan", "auto", "top"]
    },
    zIndexCompare: {
      enums: ["auto", "manual"]
    },
    valign: {
      enums: ["top", "center", "bottom"]
    },
    halign: {
      enums: ["left", "center", "right"]
    },
    justification: {
      enums: ["left", "center", "right", "auto"]
    },
    text: {
      string: true
    },
    data: {
      mapping: true,
      regex: data4("data")
    },
    layoutData: {
      mapping: true,
      regex: data4("layoutData")
    },
    scratch: {
      mapping: true,
      regex: data4("scratch")
    },
    mapData: {
      mapping: true,
      regex: mapData("mapData")
    },
    mapLayoutData: {
      mapping: true,
      regex: mapData("mapLayoutData")
    },
    mapScratch: {
      mapping: true,
      regex: mapData("mapScratch")
    },
    fn: {
      mapping: true,
      fn: true
    },
    url: {
      regexes: urlRegexes,
      singleRegexMatchValue: true
    },
    urls: {
      regexes: urlRegexes,
      singleRegexMatchValue: true,
      multiple: true
    },
    propList: {
      propList: true
    },
    angle: {
      number: true,
      units: "deg|rad",
      implicitUnits: "rad"
    },
    textRotation: {
      number: true,
      units: "deg|rad",
      implicitUnits: "rad",
      enums: ["none", "autorotate"]
    },
    polygonPointList: {
      number: true,
      multiple: true,
      evenMultiple: true,
      min: -1,
      max: 1,
      unitless: true
    },
    edgeDistances: {
      enums: ["intersection", "node-position", "endpoints"]
    },
    edgeEndpoint: {
      number: true,
      multiple: true,
      units: "%|px|em|deg|rad",
      implicitUnits: "px",
      enums: ["inside-to-node", "outside-to-node", "outside-to-node-or-label", "outside-to-line", "outside-to-line-or-label"],
      singleEnum: true,
      validate: function validate2(valArr, unitsArr) {
        switch (valArr.length) {
          case 2:
            return unitsArr[0] !== "deg" && unitsArr[0] !== "rad" && unitsArr[1] !== "deg" && unitsArr[1] !== "rad";
          case 1:
            return string(valArr[0]) || unitsArr[0] === "deg" || unitsArr[0] === "rad";
          default:
            return false;
        }
      }
    },
    easing: {
      regexes: ["^(spring)\\s*\\(\\s*(" + number$12 + ")\\s*,\\s*(" + number$12 + ")\\s*\\)$", "^(cubic-bezier)\\s*\\(\\s*(" + number$12 + ")\\s*,\\s*(" + number$12 + ")\\s*,\\s*(" + number$12 + ")\\s*,\\s*(" + number$12 + ")\\s*\\)$"],
      enums: ["linear", "ease", "ease-in", "ease-out", "ease-in-out", "ease-in-sine", "ease-out-sine", "ease-in-out-sine", "ease-in-quad", "ease-out-quad", "ease-in-out-quad", "ease-in-cubic", "ease-out-cubic", "ease-in-out-cubic", "ease-in-quart", "ease-out-quart", "ease-in-out-quart", "ease-in-quint", "ease-out-quint", "ease-in-out-quint", "ease-in-expo", "ease-out-expo", "ease-in-out-expo", "ease-in-circ", "ease-out-circ", "ease-in-out-circ"]
    },
    gradientDirection: {
      enums: [
        "to-bottom",
        "to-top",
        "to-left",
        "to-right",
        "to-bottom-right",
        "to-bottom-left",
        "to-top-right",
        "to-top-left",
        "to-right-bottom",
        "to-left-bottom",
        "to-right-top",
        "to-left-top"
        // different order
      ]
    },
    boundsExpansion: {
      number: true,
      multiple: true,
      min: 0,
      validate: function validate2(valArr) {
        var length = valArr.length;
        return length === 1 || length === 2 || length === 4;
      }
    }
  };
  var diff2 = {
    zeroNonZero: function zeroNonZero(val1, val2) {
      if ((val1 == null || val2 == null) && val1 !== val2) {
        return true;
      }
      if (val1 == 0 && val2 != 0) {
        return true;
      } else if (val1 != 0 && val2 == 0) {
        return true;
      } else {
        return false;
      }
    },
    any: function any(val1, val2) {
      return val1 != val2;
    },
    emptyNonEmpty: function emptyNonEmpty(str1, str2) {
      var empty1 = emptyString(str1);
      var empty2 = emptyString(str2);
      return empty1 && !empty2 || !empty1 && empty2;
    }
  };
  var t = styfn$2.types;
  var mainLabel = [{
    name: "label",
    type: t.text,
    triggersBounds: diff2.any,
    triggersZOrder: diff2.emptyNonEmpty
  }, {
    name: "text-rotation",
    type: t.textRotation,
    triggersBounds: diff2.any
  }, {
    name: "text-margin-x",
    type: t.bidirectionalSize,
    triggersBounds: diff2.any
  }, {
    name: "text-margin-y",
    type: t.bidirectionalSize,
    triggersBounds: diff2.any
  }];
  var sourceLabel = [{
    name: "source-label",
    type: t.text,
    triggersBounds: diff2.any
  }, {
    name: "source-text-rotation",
    type: t.textRotation,
    triggersBounds: diff2.any
  }, {
    name: "source-text-margin-x",
    type: t.bidirectionalSize,
    triggersBounds: diff2.any
  }, {
    name: "source-text-margin-y",
    type: t.bidirectionalSize,
    triggersBounds: diff2.any
  }, {
    name: "source-text-offset",
    type: t.size,
    triggersBounds: diff2.any
  }];
  var targetLabel = [{
    name: "target-label",
    type: t.text,
    triggersBounds: diff2.any
  }, {
    name: "target-text-rotation",
    type: t.textRotation,
    triggersBounds: diff2.any
  }, {
    name: "target-text-margin-x",
    type: t.bidirectionalSize,
    triggersBounds: diff2.any
  }, {
    name: "target-text-margin-y",
    type: t.bidirectionalSize,
    triggersBounds: diff2.any
  }, {
    name: "target-text-offset",
    type: t.size,
    triggersBounds: diff2.any
  }];
  var labelDimensions = [{
    name: "font-family",
    type: t.fontFamily,
    triggersBounds: diff2.any
  }, {
    name: "font-style",
    type: t.fontStyle,
    triggersBounds: diff2.any
  }, {
    name: "font-weight",
    type: t.fontWeight,
    triggersBounds: diff2.any
  }, {
    name: "font-size",
    type: t.size,
    triggersBounds: diff2.any
  }, {
    name: "text-transform",
    type: t.textTransform,
    triggersBounds: diff2.any
  }, {
    name: "text-wrap",
    type: t.textWrap,
    triggersBounds: diff2.any
  }, {
    name: "text-overflow-wrap",
    type: t.textOverflowWrap,
    triggersBounds: diff2.any
  }, {
    name: "text-max-width",
    type: t.size,
    triggersBounds: diff2.any
  }, {
    name: "text-outline-width",
    type: t.size,
    triggersBounds: diff2.any
  }, {
    name: "line-height",
    type: t.positiveNumber,
    triggersBounds: diff2.any
  }];
  var commonLabel = [{
    name: "text-valign",
    type: t.valign,
    triggersBounds: diff2.any
  }, {
    name: "text-halign",
    type: t.halign,
    triggersBounds: diff2.any
  }, {
    name: "color",
    type: t.color
  }, {
    name: "text-outline-color",
    type: t.color
  }, {
    name: "text-outline-opacity",
    type: t.zeroOneNumber
  }, {
    name: "text-background-color",
    type: t.color
  }, {
    name: "text-background-opacity",
    type: t.zeroOneNumber
  }, {
    name: "text-background-padding",
    type: t.size,
    triggersBounds: diff2.any
  }, {
    name: "text-border-opacity",
    type: t.zeroOneNumber
  }, {
    name: "text-border-color",
    type: t.color
  }, {
    name: "text-border-width",
    type: t.size,
    triggersBounds: diff2.any
  }, {
    name: "text-border-style",
    type: t.borderStyle,
    triggersBounds: diff2.any
  }, {
    name: "text-background-shape",
    type: t.textBackgroundShape,
    triggersBounds: diff2.any
  }, {
    name: "text-justification",
    type: t.justification
  }, {
    name: "box-select-labels",
    type: t.bool,
    triggersBounds: diff2.any
  }];
  var behavior = [{
    name: "events",
    type: t.bool,
    triggersZOrder: diff2.any
  }, {
    name: "text-events",
    type: t.bool,
    triggersZOrder: diff2.any
  }, {
    name: "box-selection",
    type: t.boxSelection,
    triggersZOrder: diff2.any
  }];
  var visibility = [{
    name: "display",
    type: t.display,
    triggersZOrder: diff2.any,
    triggersBounds: diff2.any,
    triggersBoundsOfConnectedEdges: diff2.any,
    triggersBoundsOfParallelEdges: function triggersBoundsOfParallelEdges(fromValue, toValue, ele) {
      if (fromValue === toValue) {
        return false;
      }
      return ele.pstyle("curve-style").value === "bezier";
    }
  }, {
    name: "visibility",
    type: t.visibility,
    triggersZOrder: diff2.any
  }, {
    name: "opacity",
    type: t.zeroOneNumber,
    triggersZOrder: diff2.zeroNonZero
  }, {
    name: "text-opacity",
    type: t.zeroOneNumber
  }, {
    name: "min-zoomed-font-size",
    type: t.size
  }, {
    name: "z-compound-depth",
    type: t.zCompoundDepth,
    triggersZOrder: diff2.any
  }, {
    name: "z-index-compare",
    type: t.zIndexCompare,
    triggersZOrder: diff2.any
  }, {
    name: "z-index",
    type: t.number,
    triggersZOrder: diff2.any
  }];
  var overlay = [{
    name: "overlay-padding",
    type: t.size,
    triggersBounds: diff2.any
  }, {
    name: "overlay-color",
    type: t.color
  }, {
    name: "overlay-opacity",
    type: t.zeroOneNumber,
    triggersBounds: diff2.zeroNonZero
  }, {
    name: "overlay-shape",
    type: t.overlayShape,
    triggersBounds: diff2.any
  }, {
    name: "overlay-corner-radius",
    type: t.cornerRadius
  }];
  var underlay = [{
    name: "underlay-padding",
    type: t.size,
    triggersBounds: diff2.any
  }, {
    name: "underlay-color",
    type: t.color
  }, {
    name: "underlay-opacity",
    type: t.zeroOneNumber,
    triggersBounds: diff2.zeroNonZero
  }, {
    name: "underlay-shape",
    type: t.overlayShape,
    triggersBounds: diff2.any
  }, {
    name: "underlay-corner-radius",
    type: t.cornerRadius
  }];
  var transition = [{
    name: "transition-property",
    type: t.propList
  }, {
    name: "transition-duration",
    type: t.time
  }, {
    name: "transition-delay",
    type: t.time
  }, {
    name: "transition-timing-function",
    type: t.easing
  }];
  var nodeSizeHashOverride = function nodeSizeHashOverride2(ele, parsedProp) {
    if (parsedProp.value === "label") {
      return -ele.poolIndex();
    } else {
      return parsedProp.pfValue;
    }
  };
  var nodeBody = [{
    name: "height",
    type: t.nodeSize,
    triggersBounds: diff2.any,
    hashOverride: nodeSizeHashOverride
  }, {
    name: "width",
    type: t.nodeSize,
    triggersBounds: diff2.any,
    hashOverride: nodeSizeHashOverride
  }, {
    name: "shape",
    type: t.nodeShape,
    triggersBounds: diff2.any
  }, {
    name: "shape-polygon-points",
    type: t.polygonPointList,
    triggersBounds: diff2.any
  }, {
    name: "corner-radius",
    type: t.cornerRadius
  }, {
    name: "background-color",
    type: t.color
  }, {
    name: "background-fill",
    type: t.fill
  }, {
    name: "background-opacity",
    type: t.zeroOneNumber
  }, {
    name: "background-blacken",
    type: t.nOneOneNumber
  }, {
    name: "background-gradient-stop-colors",
    type: t.colors
  }, {
    name: "background-gradient-stop-positions",
    type: t.percentages
  }, {
    name: "background-gradient-direction",
    type: t.gradientDirection
  }, {
    name: "padding",
    type: t.sizeMaybePercent,
    triggersBounds: diff2.any
  }, {
    name: "padding-relative-to",
    type: t.paddingRelativeTo,
    triggersBounds: diff2.any
  }, {
    name: "bounds-expansion",
    type: t.boundsExpansion,
    triggersBounds: diff2.any
  }];
  var nodeBorder = [{
    name: "border-color",
    type: t.color
  }, {
    name: "border-opacity",
    type: t.zeroOneNumber
  }, {
    name: "border-width",
    type: t.size,
    triggersBounds: diff2.any
  }, {
    name: "border-style",
    type: t.borderStyle
  }, {
    name: "border-cap",
    type: t.lineCap
  }, {
    name: "border-join",
    type: t.lineJoin
  }, {
    name: "border-dash-pattern",
    type: t.numbers
  }, {
    name: "border-dash-offset",
    type: t.number
  }, {
    name: "border-position",
    type: t.linePosition
  }];
  var nodeOutline = [{
    name: "outline-color",
    type: t.color
  }, {
    name: "outline-opacity",
    type: t.zeroOneNumber
  }, {
    name: "outline-width",
    type: t.size,
    triggersBounds: diff2.any
  }, {
    name: "outline-style",
    type: t.borderStyle
  }, {
    name: "outline-offset",
    type: t.size,
    triggersBounds: diff2.any
  }];
  var backgroundImage = [{
    name: "background-image",
    type: t.urls
  }, {
    name: "background-image-crossorigin",
    type: t.bgCrossOrigin
  }, {
    name: "background-image-opacity",
    type: t.zeroOneNumbers
  }, {
    name: "background-image-containment",
    type: t.bgContainment
  }, {
    name: "background-image-smoothing",
    type: t.bools
  }, {
    name: "background-position-x",
    type: t.bgPos
  }, {
    name: "background-position-y",
    type: t.bgPos
  }, {
    name: "background-width-relative-to",
    type: t.bgRelativeTo
  }, {
    name: "background-height-relative-to",
    type: t.bgRelativeTo
  }, {
    name: "background-repeat",
    type: t.bgRepeat
  }, {
    name: "background-fit",
    type: t.bgFit
  }, {
    name: "background-clip",
    type: t.bgClip
  }, {
    name: "background-width",
    type: t.bgWH
  }, {
    name: "background-height",
    type: t.bgWH
  }, {
    name: "background-offset-x",
    type: t.bgPos
  }, {
    name: "background-offset-y",
    type: t.bgPos
  }];
  var compound = [{
    name: "position",
    type: t.position,
    triggersBounds: diff2.any
  }, {
    name: "compound-sizing-wrt-labels",
    type: t.compoundIncludeLabels,
    triggersBounds: diff2.any
  }, {
    name: "min-width",
    type: t.size,
    triggersBounds: diff2.any
  }, {
    name: "min-width-bias-left",
    type: t.sizeMaybePercent,
    triggersBounds: diff2.any
  }, {
    name: "min-width-bias-right",
    type: t.sizeMaybePercent,
    triggersBounds: diff2.any
  }, {
    name: "min-height",
    type: t.size,
    triggersBounds: diff2.any
  }, {
    name: "min-height-bias-top",
    type: t.sizeMaybePercent,
    triggersBounds: diff2.any
  }, {
    name: "min-height-bias-bottom",
    type: t.sizeMaybePercent,
    triggersBounds: diff2.any
  }];
  var edgeLine = [{
    name: "line-style",
    type: t.lineStyle
  }, {
    name: "line-color",
    type: t.color
  }, {
    name: "line-fill",
    type: t.fill
  }, {
    name: "line-cap",
    type: t.lineCap
  }, {
    name: "line-opacity",
    type: t.zeroOneNumber
  }, {
    name: "line-dash-pattern",
    type: t.numbers
  }, {
    name: "line-dash-offset",
    type: t.number
  }, {
    name: "line-outline-width",
    type: t.size
  }, {
    name: "line-outline-color",
    type: t.color
  }, {
    name: "line-gradient-stop-colors",
    type: t.colors
  }, {
    name: "line-gradient-stop-positions",
    type: t.percentages
  }, {
    name: "curve-style",
    type: t.curveStyle,
    triggersBounds: diff2.any,
    triggersBoundsOfParallelEdges: function triggersBoundsOfParallelEdges(fromValue, toValue) {
      if (fromValue === toValue) {
        return false;
      }
      return fromValue === "bezier" || // remove from bundle
      toValue === "bezier";
    }
  }, {
    name: "haystack-radius",
    type: t.zeroOneNumber,
    triggersBounds: diff2.any
  }, {
    name: "source-endpoint",
    type: t.edgeEndpoint,
    triggersBounds: diff2.any
  }, {
    name: "target-endpoint",
    type: t.edgeEndpoint,
    triggersBounds: diff2.any
  }, {
    name: "control-point-step-size",
    type: t.size,
    triggersBounds: diff2.any
  }, {
    name: "control-point-distances",
    type: t.bidirectionalSizes,
    triggersBounds: diff2.any
  }, {
    name: "control-point-weights",
    type: t.numbers,
    triggersBounds: diff2.any
  }, {
    name: "segment-distances",
    type: t.bidirectionalSizes,
    triggersBounds: diff2.any
  }, {
    name: "segment-weights",
    type: t.numbers,
    triggersBounds: diff2.any
  }, {
    name: "segment-radii",
    type: t.numbers,
    triggersBounds: diff2.any
  }, {
    name: "radius-type",
    type: t.radiusType,
    triggersBounds: diff2.any
  }, {
    name: "taxi-turn",
    type: t.bidirectionalSizeMaybePercent,
    triggersBounds: diff2.any
  }, {
    name: "taxi-turn-min-distance",
    type: t.size,
    triggersBounds: diff2.any
  }, {
    name: "taxi-direction",
    type: t.axisDirection,
    triggersBounds: diff2.any
  }, {
    name: "taxi-radius",
    type: t.number,
    triggersBounds: diff2.any
  }, {
    name: "edge-distances",
    type: t.edgeDistances,
    triggersBounds: diff2.any
  }, {
    name: "arrow-scale",
    type: t.positiveNumber,
    triggersBounds: diff2.any
  }, {
    name: "loop-direction",
    type: t.angle,
    triggersBounds: diff2.any
  }, {
    name: "loop-sweep",
    type: t.angle,
    triggersBounds: diff2.any
  }, {
    name: "source-distance-from-node",
    type: t.size,
    triggersBounds: diff2.any
  }, {
    name: "target-distance-from-node",
    type: t.size,
    triggersBounds: diff2.any
  }];
  var ghost = [{
    name: "ghost",
    type: t.bool,
    triggersBounds: diff2.any
  }, {
    name: "ghost-offset-x",
    type: t.bidirectionalSize,
    triggersBounds: diff2.any
  }, {
    name: "ghost-offset-y",
    type: t.bidirectionalSize,
    triggersBounds: diff2.any
  }, {
    name: "ghost-opacity",
    type: t.zeroOneNumber
  }];
  var core3 = [{
    name: "selection-box-color",
    type: t.color
  }, {
    name: "selection-box-opacity",
    type: t.zeroOneNumber
  }, {
    name: "selection-box-border-color",
    type: t.color
  }, {
    name: "selection-box-border-width",
    type: t.size
  }, {
    name: "active-bg-color",
    type: t.color
  }, {
    name: "active-bg-opacity",
    type: t.zeroOneNumber
  }, {
    name: "active-bg-size",
    type: t.size
  }, {
    name: "outside-texture-bg-color",
    type: t.color
  }, {
    name: "outside-texture-bg-opacity",
    type: t.zeroOneNumber
  }];
  var pie = [];
  styfn$2.pieBackgroundN = 16;
  pie.push({
    name: "pie-size",
    type: t.sizeMaybePercent
  });
  pie.push({
    name: "pie-hole",
    type: t.sizeMaybePercent
  });
  pie.push({
    name: "pie-start-angle",
    type: t.angle
  });
  for (var i2 = 1; i2 <= styfn$2.pieBackgroundN; i2++) {
    pie.push({
      name: "pie-" + i2 + "-background-color",
      type: t.color
    });
    pie.push({
      name: "pie-" + i2 + "-background-size",
      type: t.percent
    });
    pie.push({
      name: "pie-" + i2 + "-background-opacity",
      type: t.zeroOneNumber
    });
  }
  var stripe = [];
  styfn$2.stripeBackgroundN = 16;
  stripe.push({
    name: "stripe-size",
    type: t.sizeMaybePercent
  });
  stripe.push({
    name: "stripe-direction",
    type: t.axisDirectionPrimary
  });
  for (var _i2 = 1; _i2 <= styfn$2.stripeBackgroundN; _i2++) {
    stripe.push({
      name: "stripe-" + _i2 + "-background-color",
      type: t.color
    });
    stripe.push({
      name: "stripe-" + _i2 + "-background-size",
      type: t.percent
    });
    stripe.push({
      name: "stripe-" + _i2 + "-background-opacity",
      type: t.zeroOneNumber
    });
  }
  var edgeArrow = [];
  var arrowPrefixes = styfn$2.arrowPrefixes = ["source", "mid-source", "target", "mid-target"];
  [{
    name: "arrow-shape",
    type: t.arrowShape,
    triggersBounds: diff2.any
  }, {
    name: "arrow-color",
    type: t.color
  }, {
    name: "arrow-fill",
    type: t.arrowFill
  }, {
    name: "arrow-width",
    type: t.arrowWidth
  }].forEach(function(prop2) {
    arrowPrefixes.forEach(function(prefix) {
      var name = prefix + "-" + prop2.name;
      var type2 = prop2.type, triggersBounds = prop2.triggersBounds;
      edgeArrow.push({
        name,
        type: type2,
        triggersBounds
      });
    });
  }, {});
  var props = styfn$2.properties = [].concat(behavior, transition, visibility, overlay, underlay, ghost, commonLabel, labelDimensions, mainLabel, sourceLabel, targetLabel, nodeBody, nodeBorder, nodeOutline, backgroundImage, pie, stripe, compound, edgeLine, edgeArrow, core3);
  var propGroups = styfn$2.propertyGroups = {
    // common to all eles
    behavior,
    transition,
    visibility,
    overlay,
    underlay,
    ghost,
    // labels
    commonLabel,
    labelDimensions,
    mainLabel,
    sourceLabel,
    targetLabel,
    // node props
    nodeBody,
    nodeBorder,
    nodeOutline,
    backgroundImage,
    pie,
    stripe,
    compound,
    // edge props
    edgeLine,
    edgeArrow,
    core: core3
  };
  var propGroupNames = styfn$2.propertyGroupNames = {};
  var propGroupKeys = styfn$2.propertyGroupKeys = Object.keys(propGroups);
  propGroupKeys.forEach(function(key) {
    propGroupNames[key] = propGroups[key].map(function(prop2) {
      return prop2.name;
    });
    propGroups[key].forEach(function(prop2) {
      return prop2.groupKey = key;
    });
  });
  var aliases = styfn$2.aliases = [{
    name: "content",
    pointsTo: "label"
  }, {
    name: "control-point-distance",
    pointsTo: "control-point-distances"
  }, {
    name: "control-point-weight",
    pointsTo: "control-point-weights"
  }, {
    name: "segment-distance",
    pointsTo: "segment-distances"
  }, {
    name: "segment-weight",
    pointsTo: "segment-weights"
  }, {
    name: "segment-radius",
    pointsTo: "segment-radii"
  }, {
    name: "edge-text-rotation",
    pointsTo: "text-rotation"
  }, {
    name: "padding-left",
    pointsTo: "padding"
  }, {
    name: "padding-right",
    pointsTo: "padding"
  }, {
    name: "padding-top",
    pointsTo: "padding"
  }, {
    name: "padding-bottom",
    pointsTo: "padding"
  }];
  styfn$2.propertyNames = props.map(function(p3) {
    return p3.name;
  });
  for (var _i22 = 0; _i22 < props.length; _i22++) {
    var prop = props[_i22];
    props[prop.name] = prop;
  }
  for (var _i3 = 0; _i3 < aliases.length; _i3++) {
    var alias = aliases[_i3];
    var pointsToProp = props[alias.pointsTo];
    var aliasProp = {
      name: alias.name,
      alias: true,
      pointsTo: pointsToProp
    };
    props.push(aliasProp);
    props[alias.name] = aliasProp;
  }
})();
styfn$2.getDefaultProperty = function(name) {
  return this.getDefaultProperties()[name];
};
styfn$2.getDefaultProperties = function() {
  var _p = this._private;
  if (_p.defaultProperties != null) {
    return _p.defaultProperties;
  }
  var rawProps = extend({
    // core props
    "selection-box-color": "#ddd",
    "selection-box-opacity": 0.65,
    "selection-box-border-color": "#aaa",
    "selection-box-border-width": 1,
    "active-bg-color": "black",
    "active-bg-opacity": 0.15,
    "active-bg-size": 30,
    "outside-texture-bg-color": "#000",
    "outside-texture-bg-opacity": 0.125,
    // common node/edge props
    "events": "yes",
    "text-events": "no",
    "text-valign": "top",
    "text-halign": "center",
    "text-justification": "auto",
    "line-height": 1,
    "color": "#000",
    "box-selection": "contain",
    "text-outline-color": "#000",
    "text-outline-width": 0,
    "text-outline-opacity": 1,
    "text-opacity": 1,
    "text-decoration": "none",
    "text-transform": "none",
    "text-wrap": "none",
    "text-overflow-wrap": "whitespace",
    "text-max-width": 9999,
    "text-background-color": "#000",
    "text-background-opacity": 0,
    "text-background-shape": "rectangle",
    "text-background-padding": 0,
    "text-border-opacity": 0,
    "text-border-width": 0,
    "text-border-style": "solid",
    "text-border-color": "#000",
    "font-family": "Helvetica Neue, Helvetica, sans-serif",
    "font-style": "normal",
    "font-weight": "normal",
    "font-size": 16,
    "min-zoomed-font-size": 0,
    "text-rotation": "none",
    "source-text-rotation": "none",
    "target-text-rotation": "none",
    "visibility": "visible",
    "display": "element",
    "opacity": 1,
    "z-compound-depth": "auto",
    "z-index-compare": "auto",
    "z-index": 0,
    "label": "",
    "text-margin-x": 0,
    "text-margin-y": 0,
    "source-label": "",
    "source-text-offset": 0,
    "source-text-margin-x": 0,
    "source-text-margin-y": 0,
    "target-label": "",
    "target-text-offset": 0,
    "target-text-margin-x": 0,
    "target-text-margin-y": 0,
    "overlay-opacity": 0,
    "overlay-color": "#000",
    "overlay-padding": 10,
    "overlay-shape": "round-rectangle",
    "overlay-corner-radius": "auto",
    "underlay-opacity": 0,
    "underlay-color": "#000",
    "underlay-padding": 10,
    "underlay-shape": "round-rectangle",
    "underlay-corner-radius": "auto",
    "transition-property": "none",
    "transition-duration": 0,
    "transition-delay": 0,
    "transition-timing-function": "linear",
    "box-select-labels": "no",
    // node props
    "background-blacken": 0,
    "background-color": "#999",
    "background-fill": "solid",
    "background-opacity": 1,
    "background-image": "none",
    "background-image-crossorigin": "anonymous",
    "background-image-opacity": 1,
    "background-image-containment": "inside",
    "background-image-smoothing": "yes",
    "background-position-x": "50%",
    "background-position-y": "50%",
    "background-offset-x": 0,
    "background-offset-y": 0,
    "background-width-relative-to": "include-padding",
    "background-height-relative-to": "include-padding",
    "background-repeat": "no-repeat",
    "background-fit": "none",
    "background-clip": "node",
    "background-width": "auto",
    "background-height": "auto",
    "border-color": "#000",
    "border-opacity": 1,
    "border-width": 0,
    "border-style": "solid",
    "border-dash-pattern": [4, 2],
    "border-dash-offset": 0,
    "border-cap": "butt",
    "border-join": "miter",
    "border-position": "center",
    "outline-color": "#999",
    "outline-opacity": 1,
    "outline-width": 0,
    "outline-offset": 0,
    "outline-style": "solid",
    "height": 30,
    "width": 30,
    "shape": "ellipse",
    "shape-polygon-points": "-1, -1,   1, -1,   1, 1,   -1, 1",
    "corner-radius": "auto",
    "bounds-expansion": 0,
    // node gradient
    "background-gradient-direction": "to-bottom",
    "background-gradient-stop-colors": "#999",
    "background-gradient-stop-positions": "0%",
    // ghost props
    "ghost": "no",
    "ghost-offset-y": 0,
    "ghost-offset-x": 0,
    "ghost-opacity": 0,
    // compound props
    "padding": 0,
    "padding-relative-to": "width",
    "position": "origin",
    "compound-sizing-wrt-labels": "include",
    "min-width": 0,
    "min-width-bias-left": 0,
    "min-width-bias-right": 0,
    "min-height": 0,
    "min-height-bias-top": 0,
    "min-height-bias-bottom": 0
  }, {
    // node pie bg
    "pie-size": "100%",
    "pie-hole": 0,
    "pie-start-angle": "0deg"
  }, [{
    name: "pie-{{i}}-background-color",
    value: "black"
  }, {
    name: "pie-{{i}}-background-size",
    value: "0%"
  }, {
    name: "pie-{{i}}-background-opacity",
    value: 1
  }].reduce(function(css, prop2) {
    for (var i3 = 1; i3 <= styfn$2.pieBackgroundN; i3++) {
      var name2 = prop2.name.replace("{{i}}", i3);
      var val2 = prop2.value;
      css[name2] = val2;
    }
    return css;
  }, {}), {
    // node stripes bg
    "stripe-size": "100%",
    "stripe-direction": "horizontal"
  }, [{
    name: "stripe-{{i}}-background-color",
    value: "black"
  }, {
    name: "stripe-{{i}}-background-size",
    value: "0%"
  }, {
    name: "stripe-{{i}}-background-opacity",
    value: 1
  }].reduce(function(css, prop2) {
    for (var i3 = 1; i3 <= styfn$2.stripeBackgroundN; i3++) {
      var name2 = prop2.name.replace("{{i}}", i3);
      var val2 = prop2.value;
      css[name2] = val2;
    }
    return css;
  }, {}), {
    // edge props
    "line-style": "solid",
    "line-color": "#999",
    "line-fill": "solid",
    "line-cap": "butt",
    "line-opacity": 1,
    "line-outline-width": 0,
    "line-outline-color": "#000",
    "line-gradient-stop-colors": "#999",
    "line-gradient-stop-positions": "0%",
    "control-point-step-size": 40,
    "control-point-weights": 0.5,
    "segment-weights": 0.5,
    "segment-distances": 20,
    "segment-radii": 15,
    "radius-type": "arc-radius",
    "taxi-turn": "50%",
    "taxi-radius": 15,
    "taxi-turn-min-distance": 10,
    "taxi-direction": "auto",
    "edge-distances": "intersection",
    "curve-style": "haystack",
    "haystack-radius": 0,
    "arrow-scale": 1,
    "loop-direction": "-45deg",
    "loop-sweep": "-90deg",
    "source-distance-from-node": 0,
    "target-distance-from-node": 0,
    "source-endpoint": "outside-to-node",
    "target-endpoint": "outside-to-node",
    "line-dash-pattern": [6, 3],
    "line-dash-offset": 0
  }, [{
    name: "arrow-shape",
    value: "none"
  }, {
    name: "arrow-color",
    value: "#999"
  }, {
    name: "arrow-fill",
    value: "filled"
  }, {
    name: "arrow-width",
    value: 1
  }].reduce(function(css, prop2) {
    styfn$2.arrowPrefixes.forEach(function(prefix) {
      var name2 = prefix + "-" + prop2.name;
      var val2 = prop2.value;
      css[name2] = val2;
    });
    return css;
  }, {}));
  var parsedProps = {};
  for (var i2 = 0; i2 < this.properties.length; i2++) {
    var prop = this.properties[i2];
    if (prop.pointsTo) {
      continue;
    }
    var name = prop.name;
    var val = rawProps[name];
    var parsedProp = this.parse(name, val);
    parsedProps[name] = parsedProp;
  }
  _p.defaultProperties = parsedProps;
  return _p.defaultProperties;
};
styfn$2.addDefaultStylesheet = function() {
  this.selector(":parent").css({
    "shape": "rectangle",
    "padding": 10,
    "background-color": "#eee",
    "border-color": "#ccc",
    "border-width": 1
  }).selector("edge").css({
    "width": 3
  }).selector(":loop").css({
    "curve-style": "bezier"
  }).selector("edge:compound").css({
    "curve-style": "bezier",
    "source-endpoint": "outside-to-line",
    "target-endpoint": "outside-to-line"
  }).selector(":selected").css({
    "background-color": "#0169D9",
    "line-color": "#0169D9",
    "source-arrow-color": "#0169D9",
    "target-arrow-color": "#0169D9",
    "mid-source-arrow-color": "#0169D9",
    "mid-target-arrow-color": "#0169D9"
  }).selector(":parent:selected").css({
    "background-color": "#CCE1F9",
    "border-color": "#aec8e5"
  }).selector(":active").css({
    "overlay-color": "black",
    "overlay-padding": 10,
    "overlay-opacity": 0.25
  });
  this.defaultLength = this.length;
};
var styfn$1 = {};
styfn$1.parse = function(name, value, propIsBypass, propIsFlat) {
  var self2 = this;
  if (fn$6(value)) {
    return self2.parseImplWarn(name, value, propIsBypass, propIsFlat);
  }
  var flatKey = propIsFlat === "mapping" || propIsFlat === true || propIsFlat === false || propIsFlat == null ? "dontcare" : propIsFlat;
  var bypassKey = propIsBypass ? "t" : "f";
  var valueKey = "" + value;
  var argHash = hashStrings(name, valueKey, bypassKey, flatKey);
  var propCache = self2.propCache = self2.propCache || [];
  var ret;
  if (!(ret = propCache[argHash])) {
    ret = propCache[argHash] = self2.parseImplWarn(name, value, propIsBypass, propIsFlat);
  }
  if (propIsBypass || propIsFlat === "mapping") {
    ret = copy(ret);
    if (ret) {
      ret.value = copy(ret.value);
    }
  }
  return ret;
};
styfn$1.parseImplWarn = function(name, value, propIsBypass, propIsFlat) {
  var prop = this.parseImpl(name, value, propIsBypass, propIsFlat);
  if (!prop && value != null) {
    warn("The style property `".concat(name, ": ").concat(value, "` is invalid"));
  }
  if (prop && (prop.name === "width" || prop.name === "height") && value === "label") {
    warn("The style value of `label` is deprecated for `" + prop.name + "`");
  }
  return prop;
};
styfn$1.parseImpl = function(name, value, propIsBypass, propIsFlat) {
  var self2 = this;
  name = camel2dash(name);
  var property = self2.properties[name];
  var passedValue = value;
  var types = self2.types;
  if (!property) {
    return null;
  }
  if (value === void 0) {
    return null;
  }
  if (property.alias) {
    property = property.pointsTo;
    name = property.name;
  }
  var valueIsString = string(value);
  if (valueIsString) {
    value = value.trim();
  }
  var type2 = property.type;
  if (!type2) {
    return null;
  }
  if (propIsBypass && (value === "" || value === null)) {
    return {
      name,
      value,
      bypass: true,
      deleteBypass: true
    };
  }
  if (fn$6(value)) {
    return {
      name,
      value,
      strValue: "fn",
      mapped: types.fn,
      bypass: propIsBypass
    };
  }
  var data4, mapData;
  if (!valueIsString || propIsFlat || value.length < 7 || value[1] !== "a") ;
  else if (value.length >= 7 && value[0] === "d" && (data4 = new RegExp(types.data.regex).exec(value))) {
    if (propIsBypass) {
      return false;
    }
    var mapped = types.data;
    return {
      name,
      value: data4,
      strValue: "" + value,
      mapped,
      field: data4[1],
      bypass: propIsBypass
    };
  } else if (value.length >= 10 && value[0] === "m" && (mapData = new RegExp(types.mapData.regex).exec(value))) {
    if (propIsBypass) {
      return false;
    }
    if (type2.multiple) {
      return false;
    }
    var _mapped = types.mapData;
    if (!(type2.color || type2.number)) {
      return false;
    }
    var valueMin = this.parse(name, mapData[4]);
    if (!valueMin || valueMin.mapped) {
      return false;
    }
    var valueMax = this.parse(name, mapData[5]);
    if (!valueMax || valueMax.mapped) {
      return false;
    }
    if (valueMin.pfValue === valueMax.pfValue || valueMin.strValue === valueMax.strValue) {
      warn("`" + name + ": " + value + "` is not a valid mapper because the output range is zero; converting to `" + name + ": " + valueMin.strValue + "`");
      return this.parse(name, valueMin.strValue);
    } else if (type2.color) {
      var c1 = valueMin.value;
      var c2 = valueMax.value;
      var same2 = c1[0] === c2[0] && c1[1] === c2[1] && c1[2] === c2[2] && // optional alpha
      (c1[3] === c2[3] || (c1[3] == null || c1[3] === 1) && (c2[3] == null || c2[3] === 1));
      if (same2) {
        return false;
      }
    }
    return {
      name,
      value: mapData,
      strValue: "" + value,
      mapped: _mapped,
      field: mapData[1],
      fieldMin: parseFloat(mapData[2]),
      // min & max are numeric
      fieldMax: parseFloat(mapData[3]),
      valueMin: valueMin.value,
      valueMax: valueMax.value,
      bypass: propIsBypass
    };
  }
  if (type2.multiple && propIsFlat !== "multiple") {
    var vals;
    if (valueIsString) {
      vals = value.split(/\s+/);
    } else if (array(value)) {
      vals = value;
    } else {
      vals = [value];
    }
    if (type2.evenMultiple && vals.length % 2 !== 0) {
      return null;
    }
    var valArr = [];
    var unitsArr = [];
    var pfValArr = [];
    var strVal = "";
    var hasEnum = false;
    for (var i2 = 0; i2 < vals.length; i2++) {
      var p3 = self2.parse(name, vals[i2], propIsBypass, "multiple");
      hasEnum = hasEnum || string(p3.value);
      valArr.push(p3.value);
      pfValArr.push(p3.pfValue != null ? p3.pfValue : p3.value);
      unitsArr.push(p3.units);
      strVal += (i2 > 0 ? " " : "") + p3.strValue;
    }
    if (type2.validate && !type2.validate(valArr, unitsArr)) {
      return null;
    }
    if (type2.singleEnum && hasEnum) {
      if (valArr.length === 1 && string(valArr[0])) {
        return {
          name,
          value: valArr[0],
          strValue: valArr[0],
          bypass: propIsBypass
        };
      } else {
        return null;
      }
    }
    return {
      name,
      value: valArr,
      pfValue: pfValArr,
      strValue: strVal,
      bypass: propIsBypass,
      units: unitsArr
    };
  }
  var checkEnums = function checkEnums2() {
    for (var _i4 = 0; _i4 < type2.enums.length; _i4++) {
      var en2 = type2.enums[_i4];
      if (en2 === value) {
        return {
          name,
          value,
          strValue: "" + value,
          bypass: propIsBypass
        };
      }
    }
    return null;
  };
  if (type2.number) {
    var units;
    var implicitUnits = "px";
    if (type2.units) {
      units = type2.units;
    }
    if (type2.implicitUnits) {
      implicitUnits = type2.implicitUnits;
    }
    if (!type2.unitless) {
      if (valueIsString) {
        var unitsRegex = "px|em" + (type2.allowPercent ? "|\\%" : "");
        if (units) {
          unitsRegex = units;
        }
        var match2 = value.match("^(" + number2 + ")(" + unitsRegex + ")?$");
        if (match2) {
          value = match2[1];
          units = match2[2] || implicitUnits;
        }
      } else if (!units || type2.implicitUnits) {
        units = implicitUnits;
      }
    }
    value = parseFloat(value);
    if (isNaN(value) && type2.enums === void 0) {
      return null;
    }
    if (isNaN(value) && type2.enums !== void 0) {
      value = passedValue;
      return checkEnums();
    }
    if (type2.integer && !integer(value)) {
      return null;
    }
    if (type2.min !== void 0 && (value < type2.min || type2.strictMin && value === type2.min) || type2.max !== void 0 && (value > type2.max || type2.strictMax && value === type2.max)) {
      return null;
    }
    var ret = {
      name,
      value,
      strValue: "" + value + (units ? units : ""),
      units,
      bypass: propIsBypass
    };
    if (type2.unitless || units !== "px" && units !== "em") {
      ret.pfValue = value;
    } else {
      ret.pfValue = units === "px" || !units ? value : this.getEmSizeInPixels() * value;
    }
    if (units === "ms" || units === "s") {
      ret.pfValue = units === "ms" ? value : 1e3 * value;
    }
    if (units === "deg" || units === "rad") {
      ret.pfValue = units === "rad" ? value : deg2rad(value);
    }
    if (units === "%") {
      ret.pfValue = value / 100;
    }
    return ret;
  } else if (type2.propList) {
    var props = [];
    var propsStr = "" + value;
    if (propsStr === "none") ;
    else {
      var propsSplit = propsStr.split(/\s*,\s*|\s+/);
      for (var _i2 = 0; _i2 < propsSplit.length; _i2++) {
        var propName = propsSplit[_i2].trim();
        if (self2.properties[propName]) {
          props.push(propName);
        } else {
          warn("`" + propName + "` is not a valid property name");
        }
      }
      if (props.length === 0) {
        return null;
      }
    }
    return {
      name,
      value: props,
      strValue: props.length === 0 ? "none" : props.join(" "),
      bypass: propIsBypass
    };
  } else if (type2.color) {
    var tuple = color2tuple(value);
    if (!tuple) {
      return null;
    }
    return {
      name,
      value: tuple,
      pfValue: tuple,
      strValue: "rgb(" + tuple[0] + "," + tuple[1] + "," + tuple[2] + ")",
      // n.b. no spaces b/c of multiple support
      bypass: propIsBypass
    };
  } else if (type2.regex || type2.regexes) {
    if (type2.enums) {
      var enumProp = checkEnums();
      if (enumProp) {
        return enumProp;
      }
    }
    var regexes = type2.regexes ? type2.regexes : [type2.regex];
    for (var _i3 = 0; _i3 < regexes.length; _i3++) {
      var regex = new RegExp(regexes[_i3]);
      var m2 = regex.exec(value);
      if (m2) {
        return {
          name,
          value: type2.singleRegexMatchValue ? m2[1] : m2,
          strValue: "" + value,
          bypass: propIsBypass
        };
      }
    }
    return null;
  } else if (type2.string) {
    return {
      name,
      value: "" + value,
      strValue: "" + value,
      bypass: propIsBypass
    };
  } else if (type2.enums) {
    return checkEnums();
  } else {
    return null;
  }
};
var _Style = function Style(cy) {
  if (!(this instanceof _Style)) {
    return new _Style(cy);
  }
  if (!core(cy)) {
    error("A style must have a core reference");
    return;
  }
  this._private = {
    cy,
    coreStyle: {}
  };
  this.length = 0;
  this.resetToDefault();
};
var styfn = _Style.prototype;
styfn.instanceString = function() {
  return "style";
};
styfn.clear = function() {
  var _p = this._private;
  var cy = _p.cy;
  var eles = cy.elements();
  for (var i2 = 0; i2 < this.length; i2++) {
    this[i2] = void 0;
  }
  this.length = 0;
  _p.contextStyles = {};
  _p.propDiffs = {};
  this.cleanElements(eles, true);
  eles.forEach(function(ele) {
    var ele_p = ele[0]._private;
    ele_p.styleDirty = true;
    ele_p.appliedInitStyle = false;
  });
  return this;
};
styfn.resetToDefault = function() {
  this.clear();
  this.addDefaultStylesheet();
  return this;
};
styfn.core = function(propName) {
  return this._private.coreStyle[propName] || this.getDefaultProperty(propName);
};
styfn.selector = function(selectorStr) {
  var selector = selectorStr === "core" ? null : new Selector(selectorStr);
  var i2 = this.length++;
  this[i2] = {
    selector,
    properties: [],
    mappedProperties: [],
    index: i2
  };
  return this;
};
styfn.css = function() {
  var self2 = this;
  var args = arguments;
  if (args.length === 1) {
    var map2 = args[0];
    for (var i2 = 0; i2 < self2.properties.length; i2++) {
      var prop = self2.properties[i2];
      var mapVal = map2[prop.name];
      if (mapVal === void 0) {
        mapVal = map2[dash2camel(prop.name)];
      }
      if (mapVal !== void 0) {
        this.cssRule(prop.name, mapVal);
      }
    }
  } else if (args.length === 2) {
    this.cssRule(args[0], args[1]);
  }
  return this;
};
styfn.style = styfn.css;
styfn.cssRule = function(name, value) {
  var property = this.parse(name, value);
  if (property) {
    var i2 = this.length - 1;
    this[i2].properties.push(property);
    this[i2].properties[property.name] = property;
    if (property.name.match(/pie-(\d+)-background-size/) && property.value) {
      this._private.hasPie = true;
    }
    if (property.name.match(/stripe-(\d+)-background-size/) && property.value) {
      this._private.hasStripe = true;
    }
    if (property.mapped) {
      this[i2].mappedProperties.push(property);
    }
    var currentSelectorIsCore = !this[i2].selector;
    if (currentSelectorIsCore) {
      this._private.coreStyle[property.name] = property;
    }
  }
  return this;
};
styfn.append = function(style3) {
  if (stylesheet(style3)) {
    style3.appendToStyle(this);
  } else if (array(style3)) {
    this.appendFromJson(style3);
  } else if (string(style3)) {
    this.appendFromString(style3);
  }
  return this;
};
_Style.fromJson = function(cy, json2) {
  var style3 = new _Style(cy);
  style3.fromJson(json2);
  return style3;
};
_Style.fromString = function(cy, string3) {
  return new _Style(cy).fromString(string3);
};
[styfn$8, styfn$7, styfn$6, styfn$5, styfn$4, styfn$3, styfn$2, styfn$1].forEach(function(props) {
  extend(styfn, props);
});
_Style.types = styfn.types;
_Style.properties = styfn.properties;
_Style.propertyGroups = styfn.propertyGroups;
_Style.propertyGroupNames = styfn.propertyGroupNames;
_Style.propertyGroupKeys = styfn.propertyGroupKeys;
var corefn$2 = {
  style: function style2(newStyle) {
    if (newStyle) {
      var s2 = this.setStyle(newStyle);
      s2.update();
    }
    return this._private.style;
  },
  setStyle: function setStyle(style3) {
    var _p = this._private;
    if (stylesheet(style3)) {
      _p.style = style3.generateStyle(this);
    } else if (array(style3)) {
      _p.style = _Style.fromJson(this, style3);
    } else if (string(style3)) {
      _p.style = _Style.fromString(this, style3);
    } else {
      _p.style = _Style(this);
    }
    return _p.style;
  },
  // e.g. cy.data() changed => recalc ele mappers
  updateStyle: function updateStyle2() {
    this.mutableElements().updateStyle();
  }
};
var defaultSelectionType = "single";
var corefn$1 = {
  autolock: function autolock(bool) {
    if (bool !== void 0) {
      this._private.autolock = bool ? true : false;
    } else {
      return this._private.autolock;
    }
    return this;
  },
  autoungrabify: function autoungrabify(bool) {
    if (bool !== void 0) {
      this._private.autoungrabify = bool ? true : false;
    } else {
      return this._private.autoungrabify;
    }
    return this;
  },
  autounselectify: function autounselectify(bool) {
    if (bool !== void 0) {
      this._private.autounselectify = bool ? true : false;
    } else {
      return this._private.autounselectify;
    }
    return this;
  },
  selectionType: function selectionType(selType) {
    var _p = this._private;
    if (_p.selectionType == null) {
      _p.selectionType = defaultSelectionType;
    }
    if (selType !== void 0) {
      if (selType === "additive" || selType === "single") {
        _p.selectionType = selType;
      }
    } else {
      return _p.selectionType;
    }
    return this;
  },
  panningEnabled: function panningEnabled(bool) {
    if (bool !== void 0) {
      this._private.panningEnabled = bool ? true : false;
    } else {
      return this._private.panningEnabled;
    }
    return this;
  },
  userPanningEnabled: function userPanningEnabled(bool) {
    if (bool !== void 0) {
      this._private.userPanningEnabled = bool ? true : false;
    } else {
      return this._private.userPanningEnabled;
    }
    return this;
  },
  zoomingEnabled: function zoomingEnabled(bool) {
    if (bool !== void 0) {
      this._private.zoomingEnabled = bool ? true : false;
    } else {
      return this._private.zoomingEnabled;
    }
    return this;
  },
  userZoomingEnabled: function userZoomingEnabled(bool) {
    if (bool !== void 0) {
      this._private.userZoomingEnabled = bool ? true : false;
    } else {
      return this._private.userZoomingEnabled;
    }
    return this;
  },
  boxSelectionEnabled: function boxSelectionEnabled(bool) {
    if (bool !== void 0) {
      this._private.boxSelectionEnabled = bool ? true : false;
    } else {
      return this._private.boxSelectionEnabled;
    }
    return this;
  },
  pan: function pan() {
    var args = arguments;
    var pan2 = this._private.pan;
    var dim, val, dims, x3, y3;
    switch (args.length) {
      case 0:
        return pan2;
      case 1:
        if (string(args[0])) {
          dim = args[0];
          return pan2[dim];
        } else if (plainObject(args[0])) {
          if (!this._private.panningEnabled) {
            return this;
          }
          dims = args[0];
          x3 = dims.x;
          y3 = dims.y;
          if (number$1(x3)) {
            pan2.x = x3;
          }
          if (number$1(y3)) {
            pan2.y = y3;
          }
          this.emit("pan viewport");
        }
        break;
      case 2:
        if (!this._private.panningEnabled) {
          return this;
        }
        dim = args[0];
        val = args[1];
        if ((dim === "x" || dim === "y") && number$1(val)) {
          pan2[dim] = val;
        }
        this.emit("pan viewport");
        break;
    }
    this.notify("viewport");
    return this;
  },
  panBy: function panBy(arg0, arg1) {
    var args = arguments;
    var pan2 = this._private.pan;
    var dim, val, dims, x3, y3;
    if (!this._private.panningEnabled) {
      return this;
    }
    switch (args.length) {
      case 1:
        if (plainObject(arg0)) {
          dims = args[0];
          x3 = dims.x;
          y3 = dims.y;
          if (number$1(x3)) {
            pan2.x += x3;
          }
          if (number$1(y3)) {
            pan2.y += y3;
          }
          this.emit("pan viewport");
        }
        break;
      case 2:
        dim = arg0;
        val = arg1;
        if ((dim === "x" || dim === "y") && number$1(val)) {
          pan2[dim] += val;
        }
        this.emit("pan viewport");
        break;
    }
    this.notify("viewport");
    return this;
  },
  gc: function gc() {
    this.notify("gc");
  },
  fit: function fit(elements, padding) {
    var viewportState = this.getFitViewport(elements, padding);
    if (viewportState) {
      var _p = this._private;
      _p.zoom = viewportState.zoom;
      _p.pan = viewportState.pan;
      this.emit("pan zoom viewport");
      this.notify("viewport");
    }
    return this;
  },
  getFitViewport: function getFitViewport(elements, padding) {
    if (number$1(elements) && padding === void 0) {
      padding = elements;
      elements = void 0;
    }
    if (!this._private.panningEnabled || !this._private.zoomingEnabled) {
      return;
    }
    var bb;
    if (string(elements)) {
      var sel = elements;
      elements = this.$(sel);
    } else if (boundingBox(elements)) {
      var bbe = elements;
      bb = {
        x1: bbe.x1,
        y1: bbe.y1,
        x2: bbe.x2,
        y2: bbe.y2
      };
      bb.w = bb.x2 - bb.x1;
      bb.h = bb.y2 - bb.y1;
    } else if (!elementOrCollection(elements)) {
      elements = this.mutableElements();
    }
    if (elementOrCollection(elements) && elements.empty()) {
      return;
    }
    bb = bb || elements.boundingBox();
    var w2 = this.width();
    var h2 = this.height();
    var zoom2;
    padding = number$1(padding) ? padding : 0;
    if (!isNaN(w2) && !isNaN(h2) && w2 > 0 && h2 > 0 && !isNaN(bb.w) && !isNaN(bb.h) && bb.w > 0 && bb.h > 0) {
      zoom2 = Math.min((w2 - 2 * padding) / bb.w, (h2 - 2 * padding) / bb.h);
      zoom2 = zoom2 > this._private.maxZoom ? this._private.maxZoom : zoom2;
      zoom2 = zoom2 < this._private.minZoom ? this._private.minZoom : zoom2;
      var pan2 = {
        // now pan to middle
        x: (w2 - zoom2 * (bb.x1 + bb.x2)) / 2,
        y: (h2 - zoom2 * (bb.y1 + bb.y2)) / 2
      };
      return {
        zoom: zoom2,
        pan: pan2
      };
    }
    return;
  },
  zoomRange: function zoomRange(min4, max5) {
    var _p = this._private;
    if (max5 == null) {
      var opts = min4;
      min4 = opts.min;
      max5 = opts.max;
    }
    if (number$1(min4) && number$1(max5) && min4 <= max5) {
      _p.minZoom = min4;
      _p.maxZoom = max5;
    } else if (number$1(min4) && max5 === void 0 && min4 <= _p.maxZoom) {
      _p.minZoom = min4;
    } else if (number$1(max5) && min4 === void 0 && max5 >= _p.minZoom) {
      _p.maxZoom = max5;
    }
    return this;
  },
  minZoom: function minZoom(zoom2) {
    if (zoom2 === void 0) {
      return this._private.minZoom;
    } else {
      return this.zoomRange({
        min: zoom2
      });
    }
  },
  maxZoom: function maxZoom(zoom2) {
    if (zoom2 === void 0) {
      return this._private.maxZoom;
    } else {
      return this.zoomRange({
        max: zoom2
      });
    }
  },
  getZoomedViewport: function getZoomedViewport(params) {
    var _p = this._private;
    var currentPan = _p.pan;
    var currentZoom = _p.zoom;
    var pos;
    var zoom2;
    var bail = false;
    if (!_p.zoomingEnabled) {
      bail = true;
    }
    if (number$1(params)) {
      zoom2 = params;
    } else if (plainObject(params)) {
      zoom2 = params.level;
      if (params.position != null) {
        pos = modelToRenderedPosition$1(params.position, currentZoom, currentPan);
      } else if (params.renderedPosition != null) {
        pos = params.renderedPosition;
      }
      if (pos != null && !_p.panningEnabled) {
        bail = true;
      }
    }
    zoom2 = zoom2 > _p.maxZoom ? _p.maxZoom : zoom2;
    zoom2 = zoom2 < _p.minZoom ? _p.minZoom : zoom2;
    if (bail || !number$1(zoom2) || zoom2 === currentZoom || pos != null && (!number$1(pos.x) || !number$1(pos.y))) {
      return null;
    }
    if (pos != null) {
      var pan1 = currentPan;
      var zoom1 = currentZoom;
      var zoom22 = zoom2;
      var pan2 = {
        x: -zoom22 / zoom1 * (pos.x - pan1.x) + pos.x,
        y: -zoom22 / zoom1 * (pos.y - pan1.y) + pos.y
      };
      return {
        zoomed: true,
        panned: true,
        zoom: zoom22,
        pan: pan2
      };
    } else {
      return {
        zoomed: true,
        panned: false,
        zoom: zoom2,
        pan: currentPan
      };
    }
  },
  zoom: function zoom(params) {
    if (params === void 0) {
      return this._private.zoom;
    } else {
      var vp = this.getZoomedViewport(params);
      var _p = this._private;
      if (vp == null || !vp.zoomed) {
        return this;
      }
      _p.zoom = vp.zoom;
      if (vp.panned) {
        _p.pan.x = vp.pan.x;
        _p.pan.y = vp.pan.y;
      }
      this.emit("zoom" + (vp.panned ? " pan" : "") + " viewport");
      this.notify("viewport");
      return this;
    }
  },
  viewport: function viewport(opts) {
    var _p = this._private;
    var zoomDefd = true;
    var panDefd = true;
    var events = [];
    var zoomFailed = false;
    var panFailed = false;
    if (!opts) {
      return this;
    }
    if (!number$1(opts.zoom)) {
      zoomDefd = false;
    }
    if (!plainObject(opts.pan)) {
      panDefd = false;
    }
    if (!zoomDefd && !panDefd) {
      return this;
    }
    if (zoomDefd) {
      var z2 = opts.zoom;
      if (z2 < _p.minZoom || z2 > _p.maxZoom || !_p.zoomingEnabled) {
        zoomFailed = true;
      } else {
        _p.zoom = z2;
        events.push("zoom");
      }
    }
    if (panDefd && (!zoomFailed || !opts.cancelOnFailedZoom) && _p.panningEnabled) {
      var p3 = opts.pan;
      if (number$1(p3.x)) {
        _p.pan.x = p3.x;
        panFailed = false;
      }
      if (number$1(p3.y)) {
        _p.pan.y = p3.y;
        panFailed = false;
      }
      if (!panFailed) {
        events.push("pan");
      }
    }
    if (events.length > 0) {
      events.push("viewport");
      this.emit(events.join(" "));
      this.notify("viewport");
    }
    return this;
  },
  center: function center(elements) {
    var pan2 = this.getCenterPan(elements);
    if (pan2) {
      this._private.pan = pan2;
      this.emit("pan viewport");
      this.notify("viewport");
    }
    return this;
  },
  getCenterPan: function getCenterPan(elements, zoom2) {
    if (!this._private.panningEnabled) {
      return;
    }
    if (string(elements)) {
      var selector = elements;
      elements = this.mutableElements().filter(selector);
    } else if (!elementOrCollection(elements)) {
      elements = this.mutableElements();
    }
    if (elements.length === 0) {
      return;
    }
    var bb = elements.boundingBox();
    var w2 = this.width();
    var h2 = this.height();
    zoom2 = zoom2 === void 0 ? this._private.zoom : zoom2;
    var pan2 = {
      // middle
      x: (w2 - zoom2 * (bb.x1 + bb.x2)) / 2,
      y: (h2 - zoom2 * (bb.y1 + bb.y2)) / 2
    };
    return pan2;
  },
  reset: function reset() {
    if (!this._private.panningEnabled || !this._private.zoomingEnabled) {
      return this;
    }
    this.viewport({
      pan: {
        x: 0,
        y: 0
      },
      zoom: 1
    });
    return this;
  },
  invalidateSize: function invalidateSize() {
    this._private.sizeCache = null;
  },
  size: function size2() {
    var _p = this._private;
    var container2 = _p.container;
    var cy = this;
    return _p.sizeCache = _p.sizeCache || (container2 ? function() {
      var style3 = cy.window().getComputedStyle(container2);
      var val = function val2(name) {
        return parseFloat(style3.getPropertyValue(name));
      };
      return {
        width: container2.clientWidth - val("padding-left") - val("padding-right"),
        height: container2.clientHeight - val("padding-top") - val("padding-bottom")
      };
    }() : {
      // fallback if no container (not 0 b/c can be used for dividing etc)
      width: 1,
      height: 1
    });
  },
  width: function width() {
    return this.size().width;
  },
  height: function height() {
    return this.size().height;
  },
  extent: function extent() {
    var pan2 = this._private.pan;
    var zoom2 = this._private.zoom;
    var rb = this.renderedExtent();
    var b2 = {
      x1: (rb.x1 - pan2.x) / zoom2,
      x2: (rb.x2 - pan2.x) / zoom2,
      y1: (rb.y1 - pan2.y) / zoom2,
      y2: (rb.y2 - pan2.y) / zoom2
    };
    b2.w = b2.x2 - b2.x1;
    b2.h = b2.y2 - b2.y1;
    return b2;
  },
  renderedExtent: function renderedExtent() {
    var width2 = this.width();
    var height2 = this.height();
    return {
      x1: 0,
      y1: 0,
      x2: width2,
      y2: height2,
      w: width2,
      h: height2
    };
  },
  multiClickDebounceTime: function multiClickDebounceTime(_int) {
    if (_int) this._private.multiClickDebounceTime = _int;
    else return this._private.multiClickDebounceTime;
    return this;
  }
};
corefn$1.centre = corefn$1.center;
corefn$1.autolockNodes = corefn$1.autolock;
corefn$1.autoungrabifyNodes = corefn$1.autoungrabify;
var fn2 = {
  data: define2.data({
    field: "data",
    bindingEvent: "data",
    allowBinding: true,
    allowSetting: true,
    settingEvent: "data",
    settingTriggersEvent: true,
    triggerFnName: "trigger",
    allowGetting: true,
    updateStyle: true
  }),
  removeData: define2.removeData({
    field: "data",
    event: "data",
    triggerFnName: "trigger",
    triggerEvent: true,
    updateStyle: true
  }),
  scratch: define2.data({
    field: "scratch",
    bindingEvent: "scratch",
    allowBinding: true,
    allowSetting: true,
    settingEvent: "scratch",
    settingTriggersEvent: true,
    triggerFnName: "trigger",
    allowGetting: true,
    updateStyle: true
  }),
  removeScratch: define2.removeData({
    field: "scratch",
    event: "scratch",
    triggerFnName: "trigger",
    triggerEvent: true,
    updateStyle: true
  })
};
fn2.attr = fn2.data;
fn2.removeAttr = fn2.removeData;
var Core = function Core2(opts) {
  var cy = this;
  opts = extend({}, opts);
  var container2 = opts.container;
  if (container2 && !htmlElement(container2) && htmlElement(container2[0])) {
    container2 = container2[0];
  }
  var reg = container2 ? container2._cyreg : null;
  reg = reg || {};
  if (reg && reg.cy) {
    reg.cy.destroy();
    reg = {};
  }
  var readies = reg.readies = reg.readies || [];
  if (container2) {
    container2._cyreg = reg;
  }
  reg.cy = cy;
  var head = _window !== void 0 && container2 !== void 0 && !opts.headless;
  var options3 = opts;
  options3.layout = extend({
    name: head ? "grid" : "null"
  }, options3.layout);
  options3.renderer = extend({
    name: head ? "canvas" : "null"
  }, options3.renderer);
  var defVal = function defVal2(def, val, altVal) {
    if (val !== void 0) {
      return val;
    } else if (altVal !== void 0) {
      return altVal;
    } else {
      return def;
    }
  };
  var _p = this._private = {
    container: container2,
    // html dom ele container
    ready: false,
    // whether ready has been triggered
    options: options3,
    // cached options
    elements: new Collection(this),
    // elements in the graph
    listeners: [],
    // list of listeners
    aniEles: new Collection(this),
    // elements being animated
    data: options3.data || {},
    // data for the core
    scratch: {},
    // scratch object for core
    layout: null,
    renderer: null,
    destroyed: false,
    // whether destroy was called
    notificationsEnabled: true,
    // whether notifications are sent to the renderer
    minZoom: 1e-50,
    maxZoom: 1e50,
    zoomingEnabled: defVal(true, options3.zoomingEnabled),
    userZoomingEnabled: defVal(true, options3.userZoomingEnabled),
    panningEnabled: defVal(true, options3.panningEnabled),
    userPanningEnabled: defVal(true, options3.userPanningEnabled),
    boxSelectionEnabled: defVal(true, options3.boxSelectionEnabled),
    autolock: defVal(false, options3.autolock, options3.autolockNodes),
    autoungrabify: defVal(false, options3.autoungrabify, options3.autoungrabifyNodes),
    autounselectify: defVal(false, options3.autounselectify),
    styleEnabled: options3.styleEnabled === void 0 ? head : options3.styleEnabled,
    zoom: number$1(options3.zoom) ? options3.zoom : 1,
    pan: {
      x: plainObject(options3.pan) && number$1(options3.pan.x) ? options3.pan.x : 0,
      y: plainObject(options3.pan) && number$1(options3.pan.y) ? options3.pan.y : 0
    },
    animation: {
      // object for currently-running animations
      current: [],
      queue: []
    },
    hasCompoundNodes: false,
    multiClickDebounceTime: defVal(250, options3.multiClickDebounceTime)
  };
  this.createEmitter();
  this.selectionType(options3.selectionType);
  this.zoomRange({
    min: options3.minZoom,
    max: options3.maxZoom
  });
  var loadExtData = function loadExtData2(extData, next2) {
    var anyIsPromise = extData.some(promise);
    if (anyIsPromise) {
      return Promise$1.all(extData).then(next2);
    } else {
      next2(extData);
    }
  };
  if (_p.styleEnabled) {
    cy.setStyle([]);
  }
  var rendererOptions = extend({}, options3, options3.renderer);
  cy.initRenderer(rendererOptions);
  var setElesAndLayout = function setElesAndLayout2(elements, onload, ondone) {
    cy.notifications(false);
    var oldEles = cy.mutableElements();
    if (oldEles.length > 0) {
      oldEles.remove();
    }
    if (elements != null) {
      if (plainObject(elements) || array(elements)) {
        cy.add(elements);
      }
    }
    cy.one("layoutready", function(e) {
      cy.notifications(true);
      cy.emit(e);
      cy.one("load", onload);
      cy.emitAndNotify("load");
    }).one("layoutstop", function() {
      cy.one("done", ondone);
      cy.emit("done");
    });
    var layoutOpts = extend({}, cy._private.options.layout);
    layoutOpts.eles = cy.elements();
    cy.layout(layoutOpts).run();
  };
  loadExtData([options3.style, options3.elements], function(thens) {
    var initStyle = thens[0];
    var initEles = thens[1];
    if (_p.styleEnabled) {
      cy.style().append(initStyle);
    }
    setElesAndLayout(initEles, function() {
      cy.startAnimationLoop();
      _p.ready = true;
      if (fn$6(options3.ready)) {
        cy.on("ready", options3.ready);
      }
      for (var i2 = 0; i2 < readies.length; i2++) {
        var fn4 = readies[i2];
        cy.on("ready", fn4);
      }
      if (reg) {
        reg.readies = [];
      }
      cy.emit("ready");
    }, options3.done);
  });
};
var corefn = Core.prototype;
extend(corefn, {
  instanceString: function instanceString3() {
    return "core";
  },
  isReady: function isReady() {
    return this._private.ready;
  },
  destroyed: function destroyed() {
    return this._private.destroyed;
  },
  ready: function ready(fn4) {
    if (this.isReady()) {
      this.emitter().emit("ready", [], fn4);
    } else {
      this.on("ready", fn4);
    }
    return this;
  },
  destroy: function destroy() {
    var cy = this;
    if (cy.destroyed()) return;
    cy.stopAnimationLoop();
    cy.destroyRenderer();
    this.emit("destroy");
    cy._private.destroyed = true;
    return cy;
  },
  hasElementWithId: function hasElementWithId(id2) {
    return this._private.elements.hasElementWithId(id2);
  },
  getElementById: function getElementById(id2) {
    return this._private.elements.getElementById(id2);
  },
  hasCompoundNodes: function hasCompoundNodes() {
    return this._private.hasCompoundNodes;
  },
  headless: function headless() {
    return this._private.renderer.isHeadless();
  },
  styleEnabled: function styleEnabled() {
    return this._private.styleEnabled;
  },
  addToPool: function addToPool(eles) {
    this._private.elements.merge(eles);
    return this;
  },
  removeFromPool: function removeFromPool(eles) {
    this._private.elements.unmerge(eles);
    return this;
  },
  container: function container() {
    return this._private.container || null;
  },
  window: function window2() {
    var container2 = this._private.container;
    if (container2 == null) return _window;
    var ownerDocument = this._private.container.ownerDocument;
    if (ownerDocument === void 0 || ownerDocument == null) {
      return _window;
    }
    return ownerDocument.defaultView || _window;
  },
  mount: function mount(container2) {
    if (container2 == null) {
      return;
    }
    var cy = this;
    var _p = cy._private;
    var options3 = _p.options;
    if (!htmlElement(container2) && htmlElement(container2[0])) {
      container2 = container2[0];
    }
    cy.stopAnimationLoop();
    cy.destroyRenderer();
    _p.container = container2;
    _p.styleEnabled = true;
    cy.invalidateSize();
    cy.initRenderer(extend({}, options3, options3.renderer, {
      // allow custom renderer name to be re-used, otherwise use canvas
      name: options3.renderer.name === "null" ? "canvas" : options3.renderer.name
    }));
    cy.startAnimationLoop();
    cy.style(options3.style);
    cy.emit("mount");
    return cy;
  },
  unmount: function unmount() {
    var cy = this;
    cy.stopAnimationLoop();
    cy.destroyRenderer();
    cy.initRenderer({
      name: "null"
    });
    cy.emit("unmount");
    return cy;
  },
  options: function options() {
    return copy(this._private.options);
  },
  json: function json(obj) {
    var cy = this;
    var _p = cy._private;
    var eles = cy.mutableElements();
    var getFreshRef = function getFreshRef2(ele) {
      return cy.getElementById(ele.id());
    };
    if (plainObject(obj)) {
      cy.startBatch();
      if (obj.elements) {
        var idInJson = {};
        var updateEles = function updateEles2(jsons, gr3) {
          var toAdd = [];
          var toMod = [];
          for (var i3 = 0; i3 < jsons.length; i3++) {
            var json3 = jsons[i3];
            if (!json3.data.id) {
              warn("cy.json() cannot handle elements without an ID attribute");
              continue;
            }
            var id2 = "" + json3.data.id;
            var ele = cy.getElementById(id2);
            idInJson[id2] = true;
            if (ele.length !== 0) {
              toMod.push({
                ele,
                json: json3
              });
            } else {
              if (gr3) {
                json3.group = gr3;
                toAdd.push(json3);
              } else {
                toAdd.push(json3);
              }
            }
          }
          cy.add(toAdd);
          for (var _i3 = 0; _i3 < toMod.length; _i3++) {
            var _toMod$_i = toMod[_i3], _ele = _toMod$_i.ele, _json = _toMod$_i.json;
            _ele.json(_json);
          }
        };
        if (array(obj.elements)) {
          updateEles(obj.elements);
        } else {
          var grs = ["nodes", "edges"];
          for (var i2 = 0; i2 < grs.length; i2++) {
            var gr2 = grs[i2];
            var elements = obj.elements[gr2];
            if (array(elements)) {
              updateEles(elements, gr2);
            }
          }
        }
        var parentsToRemove = cy.collection();
        eles.filter(function(ele) {
          return !idInJson[ele.id()];
        }).forEach(function(ele) {
          if (ele.isParent()) {
            parentsToRemove.merge(ele);
          } else {
            ele.remove();
          }
        });
        parentsToRemove.forEach(function(ele) {
          return ele.children().move({
            parent: null
          });
        });
        parentsToRemove.forEach(function(ele) {
          return getFreshRef(ele).remove();
        });
      }
      if (obj.style) {
        cy.style(obj.style);
      }
      if (obj.zoom != null && obj.zoom !== _p.zoom) {
        cy.zoom(obj.zoom);
      }
      if (obj.pan) {
        if (obj.pan.x !== _p.pan.x || obj.pan.y !== _p.pan.y) {
          cy.pan(obj.pan);
        }
      }
      if (obj.data) {
        cy.data(obj.data);
      }
      var fields = ["minZoom", "maxZoom", "zoomingEnabled", "userZoomingEnabled", "panningEnabled", "userPanningEnabled", "boxSelectionEnabled", "autolock", "autoungrabify", "autounselectify", "multiClickDebounceTime"];
      for (var _i2 = 0; _i2 < fields.length; _i2++) {
        var f2 = fields[_i2];
        if (obj[f2] != null) {
          cy[f2](obj[f2]);
        }
      }
      cy.endBatch();
      return this;
    } else {
      var flat = !!obj;
      var json2 = {};
      if (flat) {
        json2.elements = this.elements().map(function(ele) {
          return ele.json();
        });
      } else {
        json2.elements = {};
        eles.forEach(function(ele) {
          var group2 = ele.group();
          if (!json2.elements[group2]) {
            json2.elements[group2] = [];
          }
          json2.elements[group2].push(ele.json());
        });
      }
      if (this._private.styleEnabled) {
        json2.style = cy.style().json();
      }
      json2.data = copy(cy.data());
      var options3 = _p.options;
      json2.zoomingEnabled = _p.zoomingEnabled;
      json2.userZoomingEnabled = _p.userZoomingEnabled;
      json2.zoom = _p.zoom;
      json2.minZoom = _p.minZoom;
      json2.maxZoom = _p.maxZoom;
      json2.panningEnabled = _p.panningEnabled;
      json2.userPanningEnabled = _p.userPanningEnabled;
      json2.pan = copy(_p.pan);
      json2.boxSelectionEnabled = _p.boxSelectionEnabled;
      json2.renderer = copy(options3.renderer);
      json2.hideEdgesOnViewport = options3.hideEdgesOnViewport;
      json2.textureOnViewport = options3.textureOnViewport;
      json2.wheelSensitivity = options3.wheelSensitivity;
      json2.motionBlur = options3.motionBlur;
      json2.multiClickDebounceTime = options3.multiClickDebounceTime;
      return json2;
    }
  }
});
corefn.$id = corefn.getElementById;
[corefn$9, corefn$8, elesfn, corefn$7, corefn$6, corefn$5, corefn$4, corefn$3, corefn$2, corefn$1, fn2].forEach(function(props) {
  extend(corefn, props);
});
var defaults$7 = {
  fit: true,
  // whether to fit the viewport to the graph
  directed: false,
  // whether the tree is directed downwards (or edges can point in any direction if false)
  direction: "downward",
  // determines the direction in which the tree structure is drawn.  The possible values are 'downward', 'upward', 'rightward', or 'leftward'.
  padding: 30,
  // padding on fit
  circle: false,
  // put depths in concentric circles if true, put depths top down if false
  grid: false,
  // whether to create an even grid into which the DAG is placed (circle:false only)
  spacingFactor: 1.75,
  // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)
  boundingBox: void 0,
  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  avoidOverlap: true,
  // prevents node overlap, may overflow boundingBox if not enough space
  nodeDimensionsIncludeLabels: false,
  // Excludes the label when calculating node bounding boxes for the layout algorithm
  roots: void 0,
  // the roots of the trees
  depthSort: void 0,
  // a sorting function to order nodes at equal depth. e.g. function(a, b){ return a.data('weight') - b.data('weight') }
  animate: false,
  // whether to transition the node positions
  animationDuration: 500,
  // duration of animation in ms if enabled
  animationEasing: void 0,
  // easing of animation if enabled,
  animateFilter: function animateFilter(node, i2) {
    return true;
  },
  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
  ready: void 0,
  // callback on layoutready
  stop: void 0,
  // callback on layoutstop
  transform: function transform(node, position3) {
    return position3;
  }
  // transform a given node position. Useful for changing flow direction in discrete layouts
};
var deprecatedOptionDefaults = {
  maximal: false,
  // whether to shift nodes down their natural BFS depths in order to avoid upwards edges (DAGS only); setting acyclic to true sets maximal to true also
  acyclic: false
  // whether the tree is acyclic and thus a node could be shifted (due to the maximal option) multiple times without causing an infinite loop; setting to true sets maximal to true also; if you are uncertain whether a tree is acyclic, set to false to avoid potential infinite loops
};
var getInfo = function getInfo2(ele) {
  return ele.scratch("breadthfirst");
};
var setInfo = function setInfo2(ele, obj) {
  return ele.scratch("breadthfirst", obj);
};
function BreadthFirstLayout(options3) {
  this.options = extend({}, defaults$7, deprecatedOptionDefaults, options3);
}
BreadthFirstLayout.prototype.run = function() {
  var options3 = this.options;
  var cy = options3.cy;
  var eles = options3.eles;
  var nodes3 = eles.nodes().filter(function(n3) {
    return n3.isChildless();
  });
  var graph = eles;
  var directed = options3.directed;
  var maximal = options3.acyclic || options3.maximal || options3.maximalAdjustments > 0;
  var hasBoundingBox = !!options3.boundingBox;
  var bb = makeBoundingBox(hasBoundingBox ? options3.boundingBox : structuredClone(cy.extent()));
  var roots;
  if (elementOrCollection(options3.roots)) {
    roots = options3.roots;
  } else if (array(options3.roots)) {
    var rootsArray = [];
    for (var i2 = 0; i2 < options3.roots.length; i2++) {
      var id2 = options3.roots[i2];
      var ele = cy.getElementById(id2);
      rootsArray.push(ele);
    }
    roots = cy.collection(rootsArray);
  } else if (string(options3.roots)) {
    roots = cy.$(options3.roots);
  } else {
    if (directed) {
      roots = nodes3.roots();
    } else {
      var components2 = eles.components();
      roots = cy.collection();
      var _loop = function _loop2() {
        var comp = components2[_i2];
        var maxDegree = comp.maxDegree(false);
        var compRoots = comp.filter(function(ele2) {
          return ele2.degree(false) === maxDegree;
        });
        roots = roots.add(compRoots);
      };
      for (var _i2 = 0; _i2 < components2.length; _i2++) {
        _loop();
      }
    }
  }
  var depths = [];
  var foundByBfs = {};
  var addToDepth = function addToDepth2(ele2, d2) {
    if (depths[d2] == null) {
      depths[d2] = [];
    }
    var i3 = depths[d2].length;
    depths[d2].push(ele2);
    setInfo(ele2, {
      index: i3,
      depth: d2
    });
  };
  var changeDepth = function changeDepth2(ele2, newDepth) {
    var _getInfo = getInfo(ele2), depth = _getInfo.depth, index = _getInfo.index;
    depths[depth][index] = null;
    if (ele2.isChildless()) addToDepth(ele2, newDepth);
  };
  graph.bfs({
    roots,
    directed: options3.directed,
    visit: function visit(node, edge, pNode, i3, depth) {
      var ele2 = node[0];
      var id3 = ele2.id();
      if (ele2.isChildless()) addToDepth(ele2, depth);
      foundByBfs[id3] = true;
    }
  });
  var orphanNodes = [];
  for (var _i22 = 0; _i22 < nodes3.length; _i22++) {
    var _ele = nodes3[_i22];
    if (foundByBfs[_ele.id()]) {
      continue;
    } else {
      orphanNodes.push(_ele);
    }
  }
  var assignDepthsAt = function assignDepthsAt2(i3) {
    var eles2 = depths[i3];
    for (var j2 = 0; j2 < eles2.length; j2++) {
      var _ele2 = eles2[j2];
      if (_ele2 == null) {
        eles2.splice(j2, 1);
        j2--;
        continue;
      }
      setInfo(_ele2, {
        depth: i3,
        index: j2
      });
    }
  };
  var adjustMaximally = function adjustMaximally2(ele2, shifted2) {
    var eInfo = getInfo(ele2);
    var incomers = ele2.incomers().filter(function(el2) {
      return el2.isNode() && eles.has(el2);
    });
    var maxDepth = -1;
    var id3 = ele2.id();
    for (var k2 = 0; k2 < incomers.length; k2++) {
      var incmr = incomers[k2];
      var iInfo = getInfo(incmr);
      maxDepth = Math.max(maxDepth, iInfo.depth);
    }
    if (eInfo.depth <= maxDepth) {
      if (!options3.acyclic && shifted2[id3]) {
        return null;
      }
      var newDepth = maxDepth + 1;
      changeDepth(ele2, newDepth);
      shifted2[id3] = newDepth;
      return true;
    }
    return false;
  };
  if (directed && maximal) {
    var Q2 = [];
    var shifted = {};
    var enqueue = function enqueue2(n3) {
      return Q2.push(n3);
    };
    var dequeue = function dequeue2() {
      return Q2.shift();
    };
    nodes3.forEach(function(n3) {
      return Q2.push(n3);
    });
    while (Q2.length > 0) {
      var _ele3 = dequeue();
      var didShift = adjustMaximally(_ele3, shifted);
      if (didShift) {
        _ele3.outgoers().filter(function(el2) {
          return el2.isNode() && eles.has(el2);
        }).forEach(enqueue);
      } else if (didShift === null) {
        warn("Detected double maximal shift for node `" + _ele3.id() + "`.  Bailing maximal adjustment due to cycle.  Use `options.maximal: true` only on DAGs.");
        break;
      }
    }
  }
  var minDistance = 0;
  if (options3.avoidOverlap) {
    for (var _i3 = 0; _i3 < nodes3.length; _i3++) {
      var n2 = nodes3[_i3];
      var nbb = n2.layoutDimensions(options3);
      var w2 = nbb.w;
      var h2 = nbb.h;
      minDistance = Math.max(minDistance, w2, h2);
    }
  }
  var cachedWeightedPercent = {};
  var getWeightedPercent = function getWeightedPercent2(ele2) {
    if (cachedWeightedPercent[ele2.id()]) {
      return cachedWeightedPercent[ele2.id()];
    }
    var eleDepth = getInfo(ele2).depth;
    var neighbors = ele2.neighborhood();
    var percent = 0;
    var samples = 0;
    for (var _i4 = 0; _i4 < neighbors.length; _i4++) {
      var neighbor = neighbors[_i4];
      if (neighbor.isEdge() || neighbor.isParent() || !nodes3.has(neighbor)) {
        continue;
      }
      var bf2 = getInfo(neighbor);
      if (bf2 == null) {
        continue;
      }
      var index = bf2.index;
      var depth = bf2.depth;
      if (index == null || depth == null) {
        continue;
      }
      var nDepth = depths[depth].length;
      if (depth < eleDepth) {
        percent += index / nDepth;
        samples++;
      }
    }
    samples = Math.max(1, samples);
    percent = percent / samples;
    if (samples === 0) {
      percent = 0;
    }
    cachedWeightedPercent[ele2.id()] = percent;
    return percent;
  };
  var sortFn = function sortFn2(a2, b2) {
    var apct = getWeightedPercent(a2);
    var bpct = getWeightedPercent(b2);
    var diff2 = apct - bpct;
    if (diff2 === 0) {
      return ascending(a2.id(), b2.id());
    } else {
      return diff2;
    }
  };
  if (options3.depthSort !== void 0) {
    sortFn = options3.depthSort;
  }
  var depthsLen = depths.length;
  for (var _i5 = 0; _i5 < depthsLen; _i5++) {
    depths[_i5].sort(sortFn);
    assignDepthsAt(_i5);
  }
  var orphanDepth = [];
  for (var _i6 = 0; _i6 < orphanNodes.length; _i6++) {
    orphanDepth.push(orphanNodes[_i6]);
  }
  var assignDepths = function assignDepths2() {
    for (var _i7 = 0; _i7 < depthsLen; _i7++) {
      assignDepthsAt(_i7);
    }
  };
  if (orphanDepth.length) {
    depths.unshift(orphanDepth);
    depthsLen = depths.length;
    assignDepths();
  }
  var biggestDepthSize = 0;
  for (var _i8 = 0; _i8 < depthsLen; _i8++) {
    biggestDepthSize = Math.max(depths[_i8].length, biggestDepthSize);
  }
  var center2 = {
    x: bb.x1 + bb.w / 2,
    y: bb.y1 + bb.h / 2
  };
  var aveNodeSize = nodes3.reduce(function(acc, node) {
    return function(box) {
      return {
        w: acc.w === -1 ? box.w : (acc.w + box.w) / 2,
        h: acc.h === -1 ? box.h : (acc.h + box.h) / 2
      };
    }(node.boundingBox({
      includeLabels: options3.nodeDimensionsIncludeLabels
    }));
  }, {
    w: -1,
    h: -1
  });
  var distanceY = Math.max(
    // only one depth
    depthsLen === 1 ? 0 : (
      // inside a bounding box, no need for top & bottom padding
      hasBoundingBox ? (bb.h - options3.padding * 2 - aveNodeSize.h) / (depthsLen - 1) : (bb.h - options3.padding * 2 - aveNodeSize.h) / (depthsLen + 1)
    ),
    minDistance
  );
  var maxDepthSize = depths.reduce(function(max5, eles2) {
    return Math.max(max5, eles2.length);
  }, 0);
  var getPositionTopBottom = function getPositionTopBottom2(ele2) {
    var _getInfo2 = getInfo(ele2), depth = _getInfo2.depth, index = _getInfo2.index;
    if (options3.circle) {
      var radiusStepSize = Math.min(bb.w / 2 / depthsLen, bb.h / 2 / depthsLen);
      radiusStepSize = Math.max(radiusStepSize, minDistance);
      var radius2 = radiusStepSize * depth + radiusStepSize - (depthsLen > 0 && depths[0].length <= 3 ? radiusStepSize / 2 : 0);
      var theta = 2 * Math.PI / depths[depth].length * index;
      if (depth === 0 && depths[0].length === 1) {
        radius2 = 1;
      }
      return {
        x: center2.x + radius2 * Math.cos(theta),
        y: center2.y + radius2 * Math.sin(theta)
      };
    } else {
      var depthSize = depths[depth].length;
      var distanceX = Math.max(
        // only one depth
        depthSize === 1 ? 0 : (
          // inside a bounding box, no need for left & right padding
          hasBoundingBox ? (bb.w - options3.padding * 2 - aveNodeSize.w) / ((options3.grid ? maxDepthSize : depthSize) - 1) : (bb.w - options3.padding * 2 - aveNodeSize.w) / ((options3.grid ? maxDepthSize : depthSize) + 1)
        ),
        minDistance
      );
      var epos = {
        x: center2.x + (index + 1 - (depthSize + 1) / 2) * distanceX,
        y: center2.y + (depth + 1 - (depthsLen + 1) / 2) * distanceY
      };
      return epos;
    }
  };
  var rotateDegrees = {
    "downward": 0,
    "leftward": 90,
    "upward": 180,
    "rightward": -90
  };
  if (Object.keys(rotateDegrees).indexOf(options3.direction) === -1) {
    error("Invalid direction '".concat(options3.direction, "' specified for breadthfirst layout. Valid values are: ").concat(Object.keys(rotateDegrees).join(", ")));
  }
  var getPosition = function getPosition2(ele2) {
    return rotatePosAndSkewByBox(getPositionTopBottom(ele2), bb, rotateDegrees[options3.direction]);
  };
  eles.nodes().layoutPositions(this, options3, getPosition);
  return this;
};
var defaults$6 = {
  fit: true,
  // whether to fit the viewport to the graph
  padding: 30,
  // the padding on fit
  boundingBox: void 0,
  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  avoidOverlap: true,
  // prevents node overlap, may overflow boundingBox and radius if not enough space
  nodeDimensionsIncludeLabels: false,
  // Excludes the label when calculating node bounding boxes for the layout algorithm
  spacingFactor: void 0,
  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
  radius: void 0,
  // the radius of the circle
  startAngle: 3 / 2 * Math.PI,
  // where nodes start in radians
  sweep: void 0,
  // how many radians should be between the first and last node (defaults to full circle)
  clockwise: true,
  // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
  sort: void 0,
  // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
  animate: false,
  // whether to transition the node positions
  animationDuration: 500,
  // duration of animation in ms if enabled
  animationEasing: void 0,
  // easing of animation if enabled
  animateFilter: function animateFilter2(node, i2) {
    return true;
  },
  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
  ready: void 0,
  // callback on layoutready
  stop: void 0,
  // callback on layoutstop
  transform: function transform2(node, position3) {
    return position3;
  }
  // transform a given node position. Useful for changing flow direction in discrete layouts 
};
function CircleLayout(options3) {
  this.options = extend({}, defaults$6, options3);
}
CircleLayout.prototype.run = function() {
  var params = this.options;
  var options3 = params;
  var cy = params.cy;
  var eles = options3.eles;
  var clockwise = options3.counterclockwise !== void 0 ? !options3.counterclockwise : options3.clockwise;
  var nodes3 = eles.nodes().not(":parent");
  if (options3.sort) {
    nodes3 = nodes3.sort(options3.sort);
  }
  var bb = makeBoundingBox(options3.boundingBox ? options3.boundingBox : {
    x1: 0,
    y1: 0,
    w: cy.width(),
    h: cy.height()
  });
  var center2 = {
    x: bb.x1 + bb.w / 2,
    y: bb.y1 + bb.h / 2
  };
  var sweep = options3.sweep === void 0 ? 2 * Math.PI - 2 * Math.PI / nodes3.length : options3.sweep;
  var dTheta = sweep / Math.max(1, nodes3.length - 1);
  var r2;
  var minDistance = 0;
  for (var i2 = 0; i2 < nodes3.length; i2++) {
    var n2 = nodes3[i2];
    var nbb = n2.layoutDimensions(options3);
    var w2 = nbb.w;
    var h2 = nbb.h;
    minDistance = Math.max(minDistance, w2, h2);
  }
  if (number$1(options3.radius)) {
    r2 = options3.radius;
  } else if (nodes3.length <= 1) {
    r2 = 0;
  } else {
    r2 = Math.min(bb.h, bb.w) / 2 - minDistance;
  }
  if (nodes3.length > 1 && options3.avoidOverlap) {
    minDistance *= 1.75;
    var dcos = Math.cos(dTheta) - Math.cos(0);
    var dsin = Math.sin(dTheta) - Math.sin(0);
    var rMin = Math.sqrt(minDistance * minDistance / (dcos * dcos + dsin * dsin));
    r2 = Math.max(rMin, r2);
  }
  var getPos = function getPos2(ele, i3) {
    var theta = options3.startAngle + i3 * dTheta * (clockwise ? 1 : -1);
    var rx = r2 * Math.cos(theta);
    var ry = r2 * Math.sin(theta);
    var pos = {
      x: center2.x + rx,
      y: center2.y + ry
    };
    return pos;
  };
  eles.nodes().layoutPositions(this, options3, getPos);
  return this;
};
var defaults$5 = {
  fit: true,
  // whether to fit the viewport to the graph
  padding: 30,
  // the padding on fit
  startAngle: 3 / 2 * Math.PI,
  // where nodes start in radians
  sweep: void 0,
  // how many radians should be between the first and last node (defaults to full circle)
  clockwise: true,
  // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
  equidistant: false,
  // whether levels have an equal radial distance betwen them, may cause bounding box overflow
  minNodeSpacing: 10,
  // min spacing between outside of nodes (used for radius adjustment)
  boundingBox: void 0,
  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  avoidOverlap: true,
  // prevents node overlap, may overflow boundingBox if not enough space
  nodeDimensionsIncludeLabels: false,
  // Excludes the label when calculating node bounding boxes for the layout algorithm
  height: void 0,
  // height of layout area (overrides container height)
  width: void 0,
  // width of layout area (overrides container width)
  spacingFactor: void 0,
  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
  concentric: function concentric(node) {
    return node.degree();
  },
  levelWidth: function levelWidth(nodes3) {
    return nodes3.maxDegree() / 4;
  },
  animate: false,
  // whether to transition the node positions
  animationDuration: 500,
  // duration of animation in ms if enabled
  animationEasing: void 0,
  // easing of animation if enabled
  animateFilter: function animateFilter3(node, i2) {
    return true;
  },
  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
  ready: void 0,
  // callback on layoutready
  stop: void 0,
  // callback on layoutstop
  transform: function transform3(node, position3) {
    return position3;
  }
  // transform a given node position. Useful for changing flow direction in discrete layouts
};
function ConcentricLayout(options3) {
  this.options = extend({}, defaults$5, options3);
}
ConcentricLayout.prototype.run = function() {
  var params = this.options;
  var options3 = params;
  var clockwise = options3.counterclockwise !== void 0 ? !options3.counterclockwise : options3.clockwise;
  var cy = params.cy;
  var eles = options3.eles;
  var nodes3 = eles.nodes().not(":parent");
  var bb = makeBoundingBox(options3.boundingBox ? options3.boundingBox : {
    x1: 0,
    y1: 0,
    w: cy.width(),
    h: cy.height()
  });
  var center2 = {
    x: bb.x1 + bb.w / 2,
    y: bb.y1 + bb.h / 2
  };
  var nodeValues = [];
  var maxNodeSize = 0;
  for (var i2 = 0; i2 < nodes3.length; i2++) {
    var node = nodes3[i2];
    var value = void 0;
    value = options3.concentric(node);
    nodeValues.push({
      value,
      node
    });
    node._private.scratch.concentric = value;
  }
  nodes3.updateStyle();
  for (var _i2 = 0; _i2 < nodes3.length; _i2++) {
    var _node = nodes3[_i2];
    var nbb = _node.layoutDimensions(options3);
    maxNodeSize = Math.max(maxNodeSize, nbb.w, nbb.h);
  }
  nodeValues.sort(function(a2, b2) {
    return b2.value - a2.value;
  });
  var levelWidth2 = options3.levelWidth(nodes3);
  var levels2 = [[]];
  var currentLevel = levels2[0];
  for (var _i22 = 0; _i22 < nodeValues.length; _i22++) {
    var val = nodeValues[_i22];
    if (currentLevel.length > 0) {
      var diff2 = Math.abs(currentLevel[0].value - val.value);
      if (diff2 >= levelWidth2) {
        currentLevel = [];
        levels2.push(currentLevel);
      }
    }
    currentLevel.push(val);
  }
  var minDist = maxNodeSize + options3.minNodeSpacing;
  if (!options3.avoidOverlap) {
    var firstLvlHasMulti = levels2.length > 0 && levels2[0].length > 1;
    var maxR = Math.min(bb.w, bb.h) / 2 - minDist;
    var rStep = maxR / (levels2.length + firstLvlHasMulti ? 1 : 0);
    minDist = Math.min(minDist, rStep);
  }
  var r2 = 0;
  for (var _i3 = 0; _i3 < levels2.length; _i3++) {
    var level = levels2[_i3];
    var sweep = options3.sweep === void 0 ? 2 * Math.PI - 2 * Math.PI / level.length : options3.sweep;
    var dTheta = level.dTheta = sweep / Math.max(1, level.length - 1);
    if (level.length > 1 && options3.avoidOverlap) {
      var dcos = Math.cos(dTheta) - Math.cos(0);
      var dsin = Math.sin(dTheta) - Math.sin(0);
      var rMin = Math.sqrt(minDist * minDist / (dcos * dcos + dsin * dsin));
      r2 = Math.max(rMin, r2);
    }
    level.r = r2;
    r2 += minDist;
  }
  if (options3.equidistant) {
    var rDeltaMax = 0;
    var _r = 0;
    for (var _i4 = 0; _i4 < levels2.length; _i4++) {
      var _level = levels2[_i4];
      var rDelta = _level.r - _r;
      rDeltaMax = Math.max(rDeltaMax, rDelta);
    }
    _r = 0;
    for (var _i5 = 0; _i5 < levels2.length; _i5++) {
      var _level2 = levels2[_i5];
      if (_i5 === 0) {
        _r = _level2.r;
      }
      _level2.r = _r;
      _r += rDeltaMax;
    }
  }
  var pos = {};
  for (var _i6 = 0; _i6 < levels2.length; _i6++) {
    var _level3 = levels2[_i6];
    var _dTheta = _level3.dTheta;
    var _r2 = _level3.r;
    for (var j2 = 0; j2 < _level3.length; j2++) {
      var _val = _level3[j2];
      var theta = options3.startAngle + (clockwise ? 1 : -1) * _dTheta * j2;
      var p3 = {
        x: center2.x + _r2 * Math.cos(theta),
        y: center2.y + _r2 * Math.sin(theta)
      };
      pos[_val.node.id()] = p3;
    }
  }
  eles.nodes().layoutPositions(this, options3, function(ele) {
    var id2 = ele.id();
    return pos[id2];
  });
  return this;
};
var DEBUG;
var defaults$4 = {
  // Called on `layoutready`
  ready: function ready2() {
  },
  // Called on `layoutstop`
  stop: function stop3() {
  },
  // Whether to animate while running the layout
  // true : Animate continuously as the layout is running
  // false : Just show the end result
  // 'end' : Animate with the end result, from the initial positions to the end positions
  animate: true,
  // Easing of the animation for animate:'end'
  animationEasing: void 0,
  // The duration of the animation for animate:'end'
  animationDuration: void 0,
  // A function that determines whether the node should be animated
  // All nodes animated by default on animate enabled
  // Non-animated nodes are positioned immediately when the layout starts
  animateFilter: function animateFilter4(node, i2) {
    return true;
  },
  // The layout animates only after this many milliseconds for animate:true
  // (prevents flashing on fast runs)
  animationThreshold: 250,
  // Number of iterations between consecutive screen positions update
  refresh: 20,
  // Whether to fit the network view after when done
  fit: true,
  // Padding on fit
  padding: 30,
  // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  boundingBox: void 0,
  // Excludes the label when calculating node bounding boxes for the layout algorithm
  nodeDimensionsIncludeLabels: false,
  // Randomize the initial positions of the nodes (true) or use existing positions (false)
  randomize: false,
  // Extra spacing between components in non-compound graphs
  componentSpacing: 40,
  // Node repulsion (non overlapping) multiplier
  nodeRepulsion: function nodeRepulsion(node) {
    return 2048;
  },
  // Node repulsion (overlapping) multiplier
  nodeOverlap: 4,
  // Ideal edge (non nested) length
  idealEdgeLength: function idealEdgeLength(edge) {
    return 32;
  },
  // Divisor to compute edge forces
  edgeElasticity: function edgeElasticity(edge) {
    return 32;
  },
  // Nesting factor (multiplier) to compute ideal edge length for nested edges
  nestingFactor: 1.2,
  // Gravity force (constant)
  gravity: 1,
  // Maximum number of iterations to perform
  numIter: 1e3,
  // Initial temperature (maximum node displacement)
  initialTemp: 1e3,
  // Cooling factor (how the temperature is reduced between consecutive iterations
  coolingFactor: 0.99,
  // Lower temperature threshold (below this point the layout will end)
  minTemp: 1
};
function CoseLayout(options3) {
  this.options = extend({}, defaults$4, options3);
  this.options.layout = this;
  var nodes3 = this.options.eles.nodes();
  var edges3 = this.options.eles.edges();
  var notEdges = edges3.filter(function(e) {
    var sourceId = e.source().data("id");
    var targetId = e.target().data("id");
    var hasSource = nodes3.some(function(n2) {
      return n2.data("id") === sourceId;
    });
    var hasTarget = nodes3.some(function(n2) {
      return n2.data("id") === targetId;
    });
    return !hasSource || !hasTarget;
  });
  this.options.eles = this.options.eles.not(notEdges);
}
CoseLayout.prototype.run = function() {
  var options3 = this.options;
  var cy = options3.cy;
  var layout6 = this;
  layout6.stopped = false;
  if (options3.animate === true || options3.animate === false) {
    layout6.emit({
      type: "layoutstart",
      layout: layout6
    });
  }
  if (true === options3.debug) {
    DEBUG = true;
  } else {
    DEBUG = false;
  }
  var layoutInfo = createLayoutInfo(cy, layout6, options3);
  if (DEBUG) {
    printLayoutInfo(layoutInfo);
  }
  if (options3.randomize) {
    randomizePositions(layoutInfo);
  }
  var startTime = performanceNow();
  var refresh = function refresh2() {
    refreshPositions(layoutInfo, cy, options3);
    if (true === options3.fit) {
      cy.fit(options3.padding);
    }
  };
  var mainLoop = function mainLoop2(i3) {
    if (layout6.stopped || i3 >= options3.numIter) {
      return false;
    }
    step(layoutInfo, options3);
    layoutInfo.temperature = layoutInfo.temperature * options3.coolingFactor;
    if (layoutInfo.temperature < options3.minTemp) {
      return false;
    }
    return true;
  };
  var done = function done2() {
    if (options3.animate === true || options3.animate === false) {
      refresh();
      layout6.one("layoutstop", options3.stop);
      layout6.emit({
        type: "layoutstop",
        layout: layout6
      });
    } else {
      var nodes3 = options3.eles.nodes();
      var getScaledPos = getScaleInBoundsFn(layoutInfo, options3, nodes3);
      nodes3.layoutPositions(layout6, options3, getScaledPos);
    }
  };
  var i2 = 0;
  var loopRet = true;
  if (options3.animate === true) {
    var _frame = function frame() {
      var f2 = 0;
      while (loopRet && f2 < options3.refresh) {
        loopRet = mainLoop(i2);
        i2++;
        f2++;
      }
      if (!loopRet) {
        separateComponents(layoutInfo, options3);
        done();
      } else {
        var now = performanceNow();
        if (now - startTime >= options3.animationThreshold) {
          refresh();
        }
        requestAnimationFrame2(_frame);
      }
    };
    _frame();
  } else {
    while (loopRet) {
      loopRet = mainLoop(i2);
      i2++;
    }
    separateComponents(layoutInfo, options3);
    done();
  }
  return this;
};
CoseLayout.prototype.stop = function() {
  this.stopped = true;
  if (this.thread) {
    this.thread.stop();
  }
  this.emit("layoutstop");
  return this;
};
CoseLayout.prototype.destroy = function() {
  if (this.thread) {
    this.thread.stop();
  }
  return this;
};
var createLayoutInfo = function createLayoutInfo2(cy, layout6, options3) {
  var edges3 = options3.eles.edges();
  var nodes3 = options3.eles.nodes();
  var bb = makeBoundingBox(options3.boundingBox ? options3.boundingBox : {
    x1: 0,
    y1: 0,
    w: cy.width(),
    h: cy.height()
  });
  var layoutInfo = {
    isCompound: cy.hasCompoundNodes(),
    layoutNodes: [],
    idToIndex: {},
    nodeSize: nodes3.size(),
    graphSet: [],
    indexToGraph: [],
    layoutEdges: [],
    edgeSize: edges3.size(),
    temperature: options3.initialTemp,
    clientWidth: bb.w,
    clientHeight: bb.h,
    boundingBox: bb
  };
  var components2 = options3.eles.components();
  var id2cmptId = {};
  for (var i2 = 0; i2 < components2.length; i2++) {
    var component2 = components2[i2];
    for (var j2 = 0; j2 < component2.length; j2++) {
      var node = component2[j2];
      id2cmptId[node.id()] = i2;
    }
  }
  for (var i2 = 0; i2 < layoutInfo.nodeSize; i2++) {
    var n2 = nodes3[i2];
    var nbb = n2.layoutDimensions(options3);
    var tempNode = {};
    tempNode.isLocked = n2.locked();
    tempNode.id = n2.data("id");
    tempNode.parentId = n2.data("parent");
    tempNode.cmptId = id2cmptId[n2.id()];
    tempNode.children = [];
    tempNode.positionX = n2.position("x");
    tempNode.positionY = n2.position("y");
    tempNode.offsetX = 0;
    tempNode.offsetY = 0;
    tempNode.height = nbb.w;
    tempNode.width = nbb.h;
    tempNode.maxX = tempNode.positionX + tempNode.width / 2;
    tempNode.minX = tempNode.positionX - tempNode.width / 2;
    tempNode.maxY = tempNode.positionY + tempNode.height / 2;
    tempNode.minY = tempNode.positionY - tempNode.height / 2;
    tempNode.padLeft = parseFloat(n2.style("padding"));
    tempNode.padRight = parseFloat(n2.style("padding"));
    tempNode.padTop = parseFloat(n2.style("padding"));
    tempNode.padBottom = parseFloat(n2.style("padding"));
    tempNode.nodeRepulsion = fn$6(options3.nodeRepulsion) ? options3.nodeRepulsion(n2) : options3.nodeRepulsion;
    layoutInfo.layoutNodes.push(tempNode);
    layoutInfo.idToIndex[tempNode.id] = i2;
  }
  var queue = [];
  var start = 0;
  var end = -1;
  var tempGraph = [];
  for (var i2 = 0; i2 < layoutInfo.nodeSize; i2++) {
    var n2 = layoutInfo.layoutNodes[i2];
    var p_id = n2.parentId;
    if (null != p_id) {
      layoutInfo.layoutNodes[layoutInfo.idToIndex[p_id]].children.push(n2.id);
    } else {
      queue[++end] = n2.id;
      tempGraph.push(n2.id);
    }
  }
  layoutInfo.graphSet.push(tempGraph);
  while (start <= end) {
    var node_id = queue[start++];
    var node_ix = layoutInfo.idToIndex[node_id];
    var node = layoutInfo.layoutNodes[node_ix];
    var children = node.children;
    if (children.length > 0) {
      layoutInfo.graphSet.push(children);
      for (var i2 = 0; i2 < children.length; i2++) {
        queue[++end] = children[i2];
      }
    }
  }
  for (var i2 = 0; i2 < layoutInfo.graphSet.length; i2++) {
    var graph = layoutInfo.graphSet[i2];
    for (var j2 = 0; j2 < graph.length; j2++) {
      var index = layoutInfo.idToIndex[graph[j2]];
      layoutInfo.indexToGraph[index] = i2;
    }
  }
  for (var i2 = 0; i2 < layoutInfo.edgeSize; i2++) {
    var e = edges3[i2];
    var tempEdge = {};
    tempEdge.id = e.data("id");
    tempEdge.sourceId = e.data("source");
    tempEdge.targetId = e.data("target");
    var idealLength = fn$6(options3.idealEdgeLength) ? options3.idealEdgeLength(e) : options3.idealEdgeLength;
    var elasticity = fn$6(options3.edgeElasticity) ? options3.edgeElasticity(e) : options3.edgeElasticity;
    var sourceIx = layoutInfo.idToIndex[tempEdge.sourceId];
    var targetIx = layoutInfo.idToIndex[tempEdge.targetId];
    var sourceGraph = layoutInfo.indexToGraph[sourceIx];
    var targetGraph = layoutInfo.indexToGraph[targetIx];
    if (sourceGraph != targetGraph) {
      var lca = findLCA(tempEdge.sourceId, tempEdge.targetId, layoutInfo);
      var lcaGraph = layoutInfo.graphSet[lca];
      var depth = 0;
      var tempNode = layoutInfo.layoutNodes[sourceIx];
      while (-1 === lcaGraph.indexOf(tempNode.id)) {
        tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
        depth++;
      }
      tempNode = layoutInfo.layoutNodes[targetIx];
      while (-1 === lcaGraph.indexOf(tempNode.id)) {
        tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
        depth++;
      }
      idealLength *= depth * options3.nestingFactor;
    }
    tempEdge.idealLength = idealLength;
    tempEdge.elasticity = elasticity;
    layoutInfo.layoutEdges.push(tempEdge);
  }
  return layoutInfo;
};
var findLCA = function findLCA2(node1, node2, layoutInfo) {
  var res = _findLCA_aux(node1, node2, 0, layoutInfo);
  if (2 > res.count) {
    return 0;
  } else {
    return res.graph;
  }
};
var _findLCA_aux = function findLCA_aux(node1, node2, graphIx, layoutInfo) {
  var graph = layoutInfo.graphSet[graphIx];
  if (-1 < graph.indexOf(node1) && -1 < graph.indexOf(node2)) {
    return {
      count: 2,
      graph: graphIx
    };
  }
  var c2 = 0;
  for (var i2 = 0; i2 < graph.length; i2++) {
    var nodeId = graph[i2];
    var nodeIx = layoutInfo.idToIndex[nodeId];
    var children = layoutInfo.layoutNodes[nodeIx].children;
    if (0 === children.length) {
      continue;
    }
    var childGraphIx = layoutInfo.indexToGraph[layoutInfo.idToIndex[children[0]]];
    var result = _findLCA_aux(node1, node2, childGraphIx, layoutInfo);
    if (0 === result.count) {
      continue;
    } else if (1 === result.count) {
      c2++;
      if (2 === c2) {
        break;
      }
    } else {
      return result;
    }
  }
  return {
    count: c2,
    graph: graphIx
  };
};
var printLayoutInfo;
var randomizePositions = function randomizePositions2(layoutInfo, cy) {
  var width2 = layoutInfo.clientWidth;
  var height2 = layoutInfo.clientHeight;
  for (var i2 = 0; i2 < layoutInfo.nodeSize; i2++) {
    var n2 = layoutInfo.layoutNodes[i2];
    if (0 === n2.children.length && !n2.isLocked) {
      n2.positionX = Math.random() * width2;
      n2.positionY = Math.random() * height2;
    }
  }
};
var getScaleInBoundsFn = function getScaleInBoundsFn2(layoutInfo, options3, nodes3) {
  var bb = layoutInfo.boundingBox;
  var coseBB = {
    x1: Infinity,
    x2: -Infinity,
    y1: Infinity,
    y2: -Infinity
  };
  if (options3.boundingBox) {
    nodes3.forEach(function(node) {
      var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[node.data("id")]];
      coseBB.x1 = Math.min(coseBB.x1, lnode.positionX);
      coseBB.x2 = Math.max(coseBB.x2, lnode.positionX);
      coseBB.y1 = Math.min(coseBB.y1, lnode.positionY);
      coseBB.y2 = Math.max(coseBB.y2, lnode.positionY);
    });
    coseBB.w = coseBB.x2 - coseBB.x1;
    coseBB.h = coseBB.y2 - coseBB.y1;
  }
  return function(ele, i2) {
    var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[ele.data("id")]];
    if (options3.boundingBox) {
      var pctX = coseBB.w === 0 ? 0.5 : (lnode.positionX - coseBB.x1) / coseBB.w;
      var pctY = coseBB.h === 0 ? 0.5 : (lnode.positionY - coseBB.y1) / coseBB.h;
      return {
        x: bb.x1 + pctX * bb.w,
        y: bb.y1 + pctY * bb.h
      };
    } else {
      return {
        x: lnode.positionX,
        y: lnode.positionY
      };
    }
  };
};
var refreshPositions = function refreshPositions2(layoutInfo, cy, options3) {
  var layout6 = options3.layout;
  var nodes3 = options3.eles.nodes();
  var getScaledPos = getScaleInBoundsFn(layoutInfo, options3, nodes3);
  nodes3.positions(getScaledPos);
  if (true !== layoutInfo.ready) {
    layoutInfo.ready = true;
    layout6.one("layoutready", options3.ready);
    layout6.emit({
      type: "layoutready",
      layout: this
    });
  }
};
var step = function step2(layoutInfo, options3, _step) {
  calculateNodeForces(layoutInfo, options3);
  calculateEdgeForces(layoutInfo);
  calculateGravityForces(layoutInfo, options3);
  propagateForces(layoutInfo);
  updatePositions(layoutInfo);
};
var calculateNodeForces = function calculateNodeForces2(layoutInfo, options3) {
  for (var i2 = 0; i2 < layoutInfo.graphSet.length; i2++) {
    var graph = layoutInfo.graphSet[i2];
    var numNodes = graph.length;
    for (var j2 = 0; j2 < numNodes; j2++) {
      var node1 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j2]]];
      for (var k2 = j2 + 1; k2 < numNodes; k2++) {
        var node2 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[k2]]];
        nodeRepulsion2(node1, node2, layoutInfo, options3);
      }
    }
  }
};
var randomDistance = function randomDistance2(max5) {
  return -1 + 2 * max5 * Math.random();
};
var nodeRepulsion2 = function nodeRepulsion3(node1, node2, layoutInfo, options3) {
  var cmptId1 = node1.cmptId;
  var cmptId2 = node2.cmptId;
  if (cmptId1 !== cmptId2 && !layoutInfo.isCompound) {
    return;
  }
  var directionX = node2.positionX - node1.positionX;
  var directionY = node2.positionY - node1.positionY;
  var maxRandDist = 1;
  if (0 === directionX && 0 === directionY) {
    directionX = randomDistance(maxRandDist);
    directionY = randomDistance(maxRandDist);
  }
  var overlap = nodesOverlap(node1, node2, directionX, directionY);
  if (overlap > 0) {
    var force = options3.nodeOverlap * overlap;
    var distance = Math.sqrt(directionX * directionX + directionY * directionY);
    var forceX = force * directionX / distance;
    var forceY = force * directionY / distance;
  } else {
    var point1 = findClippingPoint(node1, directionX, directionY);
    var point2 = findClippingPoint(node2, -1 * directionX, -1 * directionY);
    var distanceX = point2.x - point1.x;
    var distanceY = point2.y - point1.y;
    var distanceSqr = distanceX * distanceX + distanceY * distanceY;
    var distance = Math.sqrt(distanceSqr);
    var force = (node1.nodeRepulsion + node2.nodeRepulsion) / distanceSqr;
    var forceX = force * distanceX / distance;
    var forceY = force * distanceY / distance;
  }
  if (!node1.isLocked) {
    node1.offsetX -= forceX;
    node1.offsetY -= forceY;
  }
  if (!node2.isLocked) {
    node2.offsetX += forceX;
    node2.offsetY += forceY;
  }
  return;
};
var nodesOverlap = function nodesOverlap2(node1, node2, dX, dY) {
  if (dX > 0) {
    var overlapX = node1.maxX - node2.minX;
  } else {
    var overlapX = node2.maxX - node1.minX;
  }
  if (dY > 0) {
    var overlapY = node1.maxY - node2.minY;
  } else {
    var overlapY = node2.maxY - node1.minY;
  }
  if (overlapX >= 0 && overlapY >= 0) {
    return Math.sqrt(overlapX * overlapX + overlapY * overlapY);
  } else {
    return 0;
  }
};
var findClippingPoint = function findClippingPoint2(node, dX, dY) {
  var X2 = node.positionX;
  var Y2 = node.positionY;
  var H2 = node.height || 1;
  var W2 = node.width || 1;
  var dirSlope = dY / dX;
  var nodeSlope = H2 / W2;
  var res = {};
  if (0 === dX && 0 < dY) {
    res.x = X2;
    res.y = Y2 + H2 / 2;
    return res;
  }
  if (0 === dX && 0 > dY) {
    res.x = X2;
    res.y = Y2 + H2 / 2;
    return res;
  }
  if (0 < dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {
    res.x = X2 + W2 / 2;
    res.y = Y2 + W2 * dY / 2 / dX;
    return res;
  }
  if (0 > dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {
    res.x = X2 - W2 / 2;
    res.y = Y2 - W2 * dY / 2 / dX;
    return res;
  }
  if (0 < dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {
    res.x = X2 + H2 * dX / 2 / dY;
    res.y = Y2 + H2 / 2;
    return res;
  }
  if (0 > dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {
    res.x = X2 - H2 * dX / 2 / dY;
    res.y = Y2 - H2 / 2;
    return res;
  }
  return res;
};
var calculateEdgeForces = function calculateEdgeForces2(layoutInfo, options3) {
  for (var i2 = 0; i2 < layoutInfo.edgeSize; i2++) {
    var edge = layoutInfo.layoutEdges[i2];
    var sourceIx = layoutInfo.idToIndex[edge.sourceId];
    var source = layoutInfo.layoutNodes[sourceIx];
    var targetIx = layoutInfo.idToIndex[edge.targetId];
    var target = layoutInfo.layoutNodes[targetIx];
    var directionX = target.positionX - source.positionX;
    var directionY = target.positionY - source.positionY;
    if (0 === directionX && 0 === directionY) {
      continue;
    }
    var point1 = findClippingPoint(source, directionX, directionY);
    var point2 = findClippingPoint(target, -1 * directionX, -1 * directionY);
    var lx = point2.x - point1.x;
    var ly = point2.y - point1.y;
    var l2 = Math.sqrt(lx * lx + ly * ly);
    var force = Math.pow(edge.idealLength - l2, 2) / edge.elasticity;
    if (0 !== l2) {
      var forceX = force * lx / l2;
      var forceY = force * ly / l2;
    } else {
      var forceX = 0;
      var forceY = 0;
    }
    if (!source.isLocked) {
      source.offsetX += forceX;
      source.offsetY += forceY;
    }
    if (!target.isLocked) {
      target.offsetX -= forceX;
      target.offsetY -= forceY;
    }
  }
};
var calculateGravityForces = function calculateGravityForces2(layoutInfo, options3) {
  if (options3.gravity === 0) {
    return;
  }
  var distThreshold = 1;
  for (var i2 = 0; i2 < layoutInfo.graphSet.length; i2++) {
    var graph = layoutInfo.graphSet[i2];
    var numNodes = graph.length;
    if (0 === i2) {
      var centerX = layoutInfo.clientHeight / 2;
      var centerY = layoutInfo.clientWidth / 2;
    } else {
      var temp = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[0]]];
      var parent4 = layoutInfo.layoutNodes[layoutInfo.idToIndex[temp.parentId]];
      var centerX = parent4.positionX;
      var centerY = parent4.positionY;
    }
    for (var j2 = 0; j2 < numNodes; j2++) {
      var node = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j2]]];
      if (node.isLocked) {
        continue;
      }
      var dx = centerX - node.positionX;
      var dy = centerY - node.positionY;
      var d2 = Math.sqrt(dx * dx + dy * dy);
      if (d2 > distThreshold) {
        var fx = options3.gravity * dx / d2;
        var fy = options3.gravity * dy / d2;
        node.offsetX += fx;
        node.offsetY += fy;
      }
    }
  }
};
var propagateForces = function propagateForces2(layoutInfo, options3) {
  var queue = [];
  var start = 0;
  var end = -1;
  queue.push.apply(queue, layoutInfo.graphSet[0]);
  end += layoutInfo.graphSet[0].length;
  while (start <= end) {
    var nodeId = queue[start++];
    var nodeIndex = layoutInfo.idToIndex[nodeId];
    var node = layoutInfo.layoutNodes[nodeIndex];
    var children = node.children;
    if (0 < children.length && !node.isLocked) {
      var offX = node.offsetX;
      var offY = node.offsetY;
      for (var i2 = 0; i2 < children.length; i2++) {
        var childNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[children[i2]]];
        childNode.offsetX += offX;
        childNode.offsetY += offY;
        queue[++end] = children[i2];
      }
      node.offsetX = 0;
      node.offsetY = 0;
    }
  }
};
var updatePositions = function updatePositions2(layoutInfo, options3) {
  for (var i2 = 0; i2 < layoutInfo.nodeSize; i2++) {
    var n2 = layoutInfo.layoutNodes[i2];
    if (0 < n2.children.length) {
      n2.maxX = void 0;
      n2.minX = void 0;
      n2.maxY = void 0;
      n2.minY = void 0;
    }
  }
  for (var i2 = 0; i2 < layoutInfo.nodeSize; i2++) {
    var n2 = layoutInfo.layoutNodes[i2];
    if (0 < n2.children.length || n2.isLocked) {
      continue;
    }
    var tempForce = limitForce(n2.offsetX, n2.offsetY, layoutInfo.temperature);
    n2.positionX += tempForce.x;
    n2.positionY += tempForce.y;
    n2.offsetX = 0;
    n2.offsetY = 0;
    n2.minX = n2.positionX - n2.width;
    n2.maxX = n2.positionX + n2.width;
    n2.minY = n2.positionY - n2.height;
    n2.maxY = n2.positionY + n2.height;
    _updateAncestryBoundaries(n2, layoutInfo);
  }
  for (var i2 = 0; i2 < layoutInfo.nodeSize; i2++) {
    var n2 = layoutInfo.layoutNodes[i2];
    if (0 < n2.children.length && !n2.isLocked) {
      n2.positionX = (n2.maxX + n2.minX) / 2;
      n2.positionY = (n2.maxY + n2.minY) / 2;
      n2.width = n2.maxX - n2.minX;
      n2.height = n2.maxY - n2.minY;
    }
  }
};
var limitForce = function limitForce2(forceX, forceY, max5) {
  var force = Math.sqrt(forceX * forceX + forceY * forceY);
  if (force > max5) {
    var res = {
      x: max5 * forceX / force,
      y: max5 * forceY / force
    };
  } else {
    var res = {
      x: forceX,
      y: forceY
    };
  }
  return res;
};
var _updateAncestryBoundaries = function updateAncestryBoundaries(node, layoutInfo) {
  var parentId = node.parentId;
  if (null == parentId) {
    return;
  }
  var p3 = layoutInfo.layoutNodes[layoutInfo.idToIndex[parentId]];
  var flag = false;
  if (null == p3.maxX || node.maxX + p3.padRight > p3.maxX) {
    p3.maxX = node.maxX + p3.padRight;
    flag = true;
  }
  if (null == p3.minX || node.minX - p3.padLeft < p3.minX) {
    p3.minX = node.minX - p3.padLeft;
    flag = true;
  }
  if (null == p3.maxY || node.maxY + p3.padBottom > p3.maxY) {
    p3.maxY = node.maxY + p3.padBottom;
    flag = true;
  }
  if (null == p3.minY || node.minY - p3.padTop < p3.minY) {
    p3.minY = node.minY - p3.padTop;
    flag = true;
  }
  if (flag) {
    return _updateAncestryBoundaries(p3, layoutInfo);
  }
  return;
};
var separateComponents = function separateComponents2(layoutInfo, options3) {
  var nodes3 = layoutInfo.layoutNodes;
  var components2 = [];
  for (var i2 = 0; i2 < nodes3.length; i2++) {
    var node = nodes3[i2];
    var cid = node.cmptId;
    var component2 = components2[cid] = components2[cid] || [];
    component2.push(node);
  }
  var totalA = 0;
  for (var i2 = 0; i2 < components2.length; i2++) {
    var c2 = components2[i2];
    if (!c2) {
      continue;
    }
    c2.x1 = Infinity;
    c2.x2 = -Infinity;
    c2.y1 = Infinity;
    c2.y2 = -Infinity;
    for (var j2 = 0; j2 < c2.length; j2++) {
      var n2 = c2[j2];
      c2.x1 = Math.min(c2.x1, n2.positionX - n2.width / 2);
      c2.x2 = Math.max(c2.x2, n2.positionX + n2.width / 2);
      c2.y1 = Math.min(c2.y1, n2.positionY - n2.height / 2);
      c2.y2 = Math.max(c2.y2, n2.positionY + n2.height / 2);
    }
    c2.w = c2.x2 - c2.x1;
    c2.h = c2.y2 - c2.y1;
    totalA += c2.w * c2.h;
  }
  components2.sort(function(c1, c22) {
    return c22.w * c22.h - c1.w * c1.h;
  });
  var x3 = 0;
  var y3 = 0;
  var usedW = 0;
  var rowH = 0;
  var maxRowW = Math.sqrt(totalA) * layoutInfo.clientWidth / layoutInfo.clientHeight;
  for (var i2 = 0; i2 < components2.length; i2++) {
    var c2 = components2[i2];
    if (!c2) {
      continue;
    }
    for (var j2 = 0; j2 < c2.length; j2++) {
      var n2 = c2[j2];
      if (!n2.isLocked) {
        n2.positionX += x3 - c2.x1;
        n2.positionY += y3 - c2.y1;
      }
    }
    x3 += c2.w + options3.componentSpacing;
    usedW += c2.w + options3.componentSpacing;
    rowH = Math.max(rowH, c2.h);
    if (usedW > maxRowW) {
      y3 += rowH + options3.componentSpacing;
      x3 = 0;
      usedW = 0;
      rowH = 0;
    }
  }
};
var defaults$3 = {
  fit: true,
  // whether to fit the viewport to the graph
  padding: 30,
  // padding used on fit
  boundingBox: void 0,
  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  avoidOverlap: true,
  // prevents node overlap, may overflow boundingBox if not enough space
  avoidOverlapPadding: 10,
  // extra spacing around nodes when avoidOverlap: true
  nodeDimensionsIncludeLabels: false,
  // Excludes the label when calculating node bounding boxes for the layout algorithm
  spacingFactor: void 0,
  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
  condense: false,
  // uses all available space on false, uses minimal space on true
  rows: void 0,
  // force num of rows in the grid
  cols: void 0,
  // force num of columns in the grid
  position: function position2(node) {
  },
  // returns { row, col } for element
  sort: void 0,
  // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
  animate: false,
  // whether to transition the node positions
  animationDuration: 500,
  // duration of animation in ms if enabled
  animationEasing: void 0,
  // easing of animation if enabled
  animateFilter: function animateFilter5(node, i2) {
    return true;
  },
  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
  ready: void 0,
  // callback on layoutready
  stop: void 0,
  // callback on layoutstop
  transform: function transform4(node, position3) {
    return position3;
  }
  // transform a given node position. Useful for changing flow direction in discrete layouts 
};
function GridLayout(options3) {
  this.options = extend({}, defaults$3, options3);
}
GridLayout.prototype.run = function() {
  var params = this.options;
  var options3 = params;
  var cy = params.cy;
  var eles = options3.eles;
  var nodes3 = eles.nodes().not(":parent");
  if (options3.sort) {
    nodes3 = nodes3.sort(options3.sort);
  }
  var bb = makeBoundingBox(options3.boundingBox ? options3.boundingBox : {
    x1: 0,
    y1: 0,
    w: cy.width(),
    h: cy.height()
  });
  if (bb.h === 0 || bb.w === 0) {
    eles.nodes().layoutPositions(this, options3, function(ele) {
      return {
        x: bb.x1,
        y: bb.y1
      };
    });
  } else {
    var cells = nodes3.size();
    var splits = Math.sqrt(cells * bb.h / bb.w);
    var rows = Math.round(splits);
    var cols = Math.round(bb.w / bb.h * splits);
    var small = function small2(val) {
      if (val == null) {
        return Math.min(rows, cols);
      } else {
        var min4 = Math.min(rows, cols);
        if (min4 == rows) {
          rows = val;
        } else {
          cols = val;
        }
      }
    };
    var large = function large2(val) {
      if (val == null) {
        return Math.max(rows, cols);
      } else {
        var max5 = Math.max(rows, cols);
        if (max5 == rows) {
          rows = val;
        } else {
          cols = val;
        }
      }
    };
    var oRows = options3.rows;
    var oCols = options3.cols != null ? options3.cols : options3.columns;
    if (oRows != null && oCols != null) {
      rows = oRows;
      cols = oCols;
    } else if (oRows != null && oCols == null) {
      rows = oRows;
      cols = Math.ceil(cells / rows);
    } else if (oRows == null && oCols != null) {
      cols = oCols;
      rows = Math.ceil(cells / cols);
    } else if (cols * rows > cells) {
      var sm = small();
      var lg = large();
      if ((sm - 1) * lg >= cells) {
        small(sm - 1);
      } else if ((lg - 1) * sm >= cells) {
        large(lg - 1);
      }
    } else {
      while (cols * rows < cells) {
        var _sm = small();
        var _lg = large();
        if ((_lg + 1) * _sm >= cells) {
          large(_lg + 1);
        } else {
          small(_sm + 1);
        }
      }
    }
    var cellWidth = bb.w / cols;
    var cellHeight = bb.h / rows;
    if (options3.condense) {
      cellWidth = 0;
      cellHeight = 0;
    }
    if (options3.avoidOverlap) {
      for (var i2 = 0; i2 < nodes3.length; i2++) {
        var node = nodes3[i2];
        var pos = node._private.position;
        if (pos.x == null || pos.y == null) {
          pos.x = 0;
          pos.y = 0;
        }
        var nbb = node.layoutDimensions(options3);
        var p3 = options3.avoidOverlapPadding;
        var w2 = nbb.w + p3;
        var h2 = nbb.h + p3;
        cellWidth = Math.max(cellWidth, w2);
        cellHeight = Math.max(cellHeight, h2);
      }
    }
    var cellUsed = {};
    var used = function used2(row2, col2) {
      return cellUsed["c-" + row2 + "-" + col2] ? true : false;
    };
    var use = function use2(row2, col2) {
      cellUsed["c-" + row2 + "-" + col2] = true;
    };
    var row = 0;
    var col = 0;
    var moveToNextCell = function moveToNextCell2() {
      col++;
      if (col >= cols) {
        col = 0;
        row++;
      }
    };
    var id2manPos = {};
    for (var _i2 = 0; _i2 < nodes3.length; _i2++) {
      var _node = nodes3[_i2];
      var rcPos = options3.position(_node);
      if (rcPos && (rcPos.row !== void 0 || rcPos.col !== void 0)) {
        var _pos = {
          row: rcPos.row,
          col: rcPos.col
        };
        if (_pos.col === void 0) {
          _pos.col = 0;
          while (used(_pos.row, _pos.col)) {
            _pos.col++;
          }
        } else if (_pos.row === void 0) {
          _pos.row = 0;
          while (used(_pos.row, _pos.col)) {
            _pos.row++;
          }
        }
        id2manPos[_node.id()] = _pos;
        use(_pos.row, _pos.col);
      }
    }
    var getPos = function getPos2(element3, i3) {
      var x3, y3;
      if (element3.locked() || element3.isParent()) {
        return false;
      }
      var rcPos2 = id2manPos[element3.id()];
      if (rcPos2) {
        x3 = rcPos2.col * cellWidth + cellWidth / 2 + bb.x1;
        y3 = rcPos2.row * cellHeight + cellHeight / 2 + bb.y1;
      } else {
        while (used(row, col)) {
          moveToNextCell();
        }
        x3 = col * cellWidth + cellWidth / 2 + bb.x1;
        y3 = row * cellHeight + cellHeight / 2 + bb.y1;
        use(row, col);
        moveToNextCell();
      }
      return {
        x: x3,
        y: y3
      };
    };
    nodes3.layoutPositions(this, options3, getPos);
  }
  return this;
};
var defaults$2 = {
  ready: function ready3() {
  },
  // on layoutready
  stop: function stop4() {
  }
  // on layoutstop
};
function NullLayout(options3) {
  this.options = extend({}, defaults$2, options3);
}
NullLayout.prototype.run = function() {
  var options3 = this.options;
  var eles = options3.eles;
  var layout6 = this;
  options3.cy;
  layout6.emit("layoutstart");
  eles.nodes().positions(function() {
    return {
      x: 0,
      y: 0
    };
  });
  layout6.one("layoutready", options3.ready);
  layout6.emit("layoutready");
  layout6.one("layoutstop", options3.stop);
  layout6.emit("layoutstop");
  return this;
};
NullLayout.prototype.stop = function() {
  return this;
};
var defaults$1 = {
  positions: void 0,
  // map of (node id) => (position obj); or function(node){ return somPos; }
  zoom: void 0,
  // the zoom level to set (prob want fit = false if set)
  pan: void 0,
  // the pan level to set (prob want fit = false if set)
  fit: true,
  // whether to fit to viewport
  padding: 30,
  // padding on fit
  spacingFactor: void 0,
  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
  animate: false,
  // whether to transition the node positions
  animationDuration: 500,
  // duration of animation in ms if enabled
  animationEasing: void 0,
  // easing of animation if enabled
  animateFilter: function animateFilter6(node, i2) {
    return true;
  },
  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
  ready: void 0,
  // callback on layoutready
  stop: void 0,
  // callback on layoutstop
  transform: function transform5(node, position3) {
    return position3;
  }
  // transform a given node position. Useful for changing flow direction in discrete layouts
};
function PresetLayout(options3) {
  this.options = extend({}, defaults$1, options3);
}
PresetLayout.prototype.run = function() {
  var options3 = this.options;
  var eles = options3.eles;
  var nodes3 = eles.nodes();
  var posIsFn = fn$6(options3.positions);
  function getPosition(node) {
    if (options3.positions == null) {
      return copyPosition(node.position());
    }
    if (posIsFn) {
      return options3.positions(node);
    }
    var pos = options3.positions[node._private.data.id];
    if (pos == null) {
      return null;
    }
    return pos;
  }
  nodes3.layoutPositions(this, options3, function(node, i2) {
    var position3 = getPosition(node);
    if (node.locked() || position3 == null) {
      return false;
    }
    return position3;
  });
  return this;
};
var defaults2 = {
  fit: true,
  // whether to fit to viewport
  padding: 30,
  // fit padding
  boundingBox: void 0,
  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  animate: false,
  // whether to transition the node positions
  animationDuration: 500,
  // duration of animation in ms if enabled
  animationEasing: void 0,
  // easing of animation if enabled
  animateFilter: function animateFilter7(node, i2) {
    return true;
  },
  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
  ready: void 0,
  // callback on layoutready
  stop: void 0,
  // callback on layoutstop
  transform: function transform6(node, position3) {
    return position3;
  }
  // transform a given node position. Useful for changing flow direction in discrete layouts 
};
function RandomLayout(options3) {
  this.options = extend({}, defaults2, options3);
}
RandomLayout.prototype.run = function() {
  var options3 = this.options;
  var cy = options3.cy;
  var eles = options3.eles;
  var bb = makeBoundingBox(options3.boundingBox ? options3.boundingBox : {
    x1: 0,
    y1: 0,
    w: cy.width(),
    h: cy.height()
  });
  var getPos = function getPos2(node, i2) {
    return {
      x: bb.x1 + Math.round(Math.random() * bb.w),
      y: bb.y1 + Math.round(Math.random() * bb.h)
    };
  };
  eles.nodes().layoutPositions(this, options3, getPos);
  return this;
};
var layout3 = [{
  name: "breadthfirst",
  impl: BreadthFirstLayout
}, {
  name: "circle",
  impl: CircleLayout
}, {
  name: "concentric",
  impl: ConcentricLayout
}, {
  name: "cose",
  impl: CoseLayout
}, {
  name: "grid",
  impl: GridLayout
}, {
  name: "null",
  impl: NullLayout
}, {
  name: "preset",
  impl: PresetLayout
}, {
  name: "random",
  impl: RandomLayout
}];
function NullRenderer(options3) {
  this.options = options3;
  this.notifications = 0;
}
var noop2 = function noop3() {
};
var throwImgErr = function throwImgErr2() {
  throw new Error("A headless instance can not render images");
};
NullRenderer.prototype = {
  recalculateRenderedStyle: noop2,
  notify: function notify2() {
    this.notifications++;
  },
  init: noop2,
  isHeadless: function isHeadless() {
    return true;
  },
  png: throwImgErr,
  jpg: throwImgErr
};
var BRp$f = {};
BRp$f.arrowShapeWidth = 0.3;
BRp$f.registerArrowShapes = function() {
  var arrowShapes = this.arrowShapes = {};
  var renderer3 = this;
  var bbCollide = function bbCollide2(x3, y3, size3, angle2, translation, edgeWidth, padding) {
    var x1 = translation.x - size3 / 2 - padding;
    var x22 = translation.x + size3 / 2 + padding;
    var y1 = translation.y - size3 / 2 - padding;
    var y22 = translation.y + size3 / 2 + padding;
    var inside = x1 <= x3 && x3 <= x22 && y1 <= y3 && y3 <= y22;
    return inside;
  };
  var transform8 = function transform9(x3, y3, size3, angle2, translation) {
    var xRotated = x3 * Math.cos(angle2) - y3 * Math.sin(angle2);
    var yRotated = x3 * Math.sin(angle2) + y3 * Math.cos(angle2);
    var xScaled = xRotated * size3;
    var yScaled = yRotated * size3;
    var xTranslated = xScaled + translation.x;
    var yTranslated = yScaled + translation.y;
    return {
      x: xTranslated,
      y: yTranslated
    };
  };
  var transformPoints3 = function transformPoints4(pts2, size3, angle2, translation) {
    var retPts = [];
    for (var i2 = 0; i2 < pts2.length; i2 += 2) {
      var x3 = pts2[i2];
      var y3 = pts2[i2 + 1];
      retPts.push(transform8(x3, y3, size3, angle2, translation));
    }
    return retPts;
  };
  var pointsToArr = function pointsToArr2(pts2) {
    var ret = [];
    for (var i2 = 0; i2 < pts2.length; i2++) {
      var p3 = pts2[i2];
      ret.push(p3.x, p3.y);
    }
    return ret;
  };
  var standardGap = function standardGap2(edge) {
    return edge.pstyle("width").pfValue * edge.pstyle("arrow-scale").pfValue * 2;
  };
  var defineArrowShape = function defineArrowShape2(name, defn) {
    if (string(defn)) {
      defn = arrowShapes[defn];
    }
    arrowShapes[name] = extend({
      name,
      points: [-0.15, -0.3, 0.15, -0.3, 0.15, 0.3, -0.15, 0.3],
      collide: function collide(x3, y3, size3, angle2, translation, padding) {
        var points = pointsToArr(transformPoints3(this.points, size3 + 2 * padding, angle2, translation));
        var inside = pointInsidePolygonPoints(x3, y3, points);
        return inside;
      },
      roughCollide: bbCollide,
      draw: function draw(context, size3, angle2, translation) {
        var points = transformPoints3(this.points, size3, angle2, translation);
        renderer3.arrowShapeImpl("polygon")(context, points);
      },
      spacing: function spacing(edge) {
        return 0;
      },
      gap: standardGap
    }, defn);
  };
  defineArrowShape("none", {
    collide: falsify,
    roughCollide: falsify,
    draw: noop$1,
    spacing: zeroify,
    gap: zeroify
  });
  defineArrowShape("triangle", {
    points: [-0.15, -0.3, 0, 0, 0.15, -0.3]
  });
  defineArrowShape("arrow", "triangle");
  defineArrowShape("triangle-backcurve", {
    points: arrowShapes["triangle"].points,
    controlPoint: [0, -0.15],
    roughCollide: bbCollide,
    draw: function draw(context, size3, angle2, translation, edgeWidth) {
      var ptsTrans = transformPoints3(this.points, size3, angle2, translation);
      var ctrlPt = this.controlPoint;
      var ctrlPtTrans = transform8(ctrlPt[0], ctrlPt[1], size3, angle2, translation);
      renderer3.arrowShapeImpl(this.name)(context, ptsTrans, ctrlPtTrans);
    },
    gap: function gap(edge) {
      return standardGap(edge) * 0.8;
    }
  });
  defineArrowShape("triangle-tee", {
    points: [0, 0, 0.15, -0.3, -0.15, -0.3, 0, 0],
    pointsTee: [-0.15, -0.4, -0.15, -0.5, 0.15, -0.5, 0.15, -0.4],
    collide: function collide(x3, y3, size3, angle2, translation, edgeWidth, padding) {
      var triPts = pointsToArr(transformPoints3(this.points, size3 + 2 * padding, angle2, translation));
      var teePts = pointsToArr(transformPoints3(this.pointsTee, size3 + 2 * padding, angle2, translation));
      var inside = pointInsidePolygonPoints(x3, y3, triPts) || pointInsidePolygonPoints(x3, y3, teePts);
      return inside;
    },
    draw: function draw(context, size3, angle2, translation, edgeWidth) {
      var triPts = transformPoints3(this.points, size3, angle2, translation);
      var teePts = transformPoints3(this.pointsTee, size3, angle2, translation);
      renderer3.arrowShapeImpl(this.name)(context, triPts, teePts);
    }
  });
  defineArrowShape("circle-triangle", {
    radius: 0.15,
    pointsTr: [0, -0.15, 0.15, -0.45, -0.15, -0.45, 0, -0.15],
    collide: function collide(x3, y3, size3, angle2, translation, edgeWidth, padding) {
      var t = translation;
      var circleInside = Math.pow(t.x - x3, 2) + Math.pow(t.y - y3, 2) <= Math.pow((size3 + 2 * padding) * this.radius, 2);
      var triPts = pointsToArr(transformPoints3(this.points, size3 + 2 * padding, angle2, translation));
      return pointInsidePolygonPoints(x3, y3, triPts) || circleInside;
    },
    draw: function draw(context, size3, angle2, translation, edgeWidth) {
      var triPts = transformPoints3(this.pointsTr, size3, angle2, translation);
      renderer3.arrowShapeImpl(this.name)(context, triPts, translation.x, translation.y, this.radius * size3);
    },
    spacing: function spacing(edge) {
      return renderer3.getArrowWidth(edge.pstyle("width").pfValue, edge.pstyle("arrow-scale").value) * this.radius;
    }
  });
  defineArrowShape("triangle-cross", {
    points: [0, 0, 0.15, -0.3, -0.15, -0.3, 0, 0],
    baseCrossLinePts: [
      -0.15,
      -0.4,
      // first half of the rectangle
      -0.15,
      -0.4,
      0.15,
      -0.4,
      // second half of the rectangle
      0.15,
      -0.4
    ],
    crossLinePts: function crossLinePts(size3, edgeWidth) {
      var p3 = this.baseCrossLinePts.slice();
      var shiftFactor = edgeWidth / size3;
      var y0 = 3;
      var y1 = 5;
      p3[y0] = p3[y0] - shiftFactor;
      p3[y1] = p3[y1] - shiftFactor;
      return p3;
    },
    collide: function collide(x3, y3, size3, angle2, translation, edgeWidth, padding) {
      var triPts = pointsToArr(transformPoints3(this.points, size3 + 2 * padding, angle2, translation));
      var teePts = pointsToArr(transformPoints3(this.crossLinePts(size3, edgeWidth), size3 + 2 * padding, angle2, translation));
      var inside = pointInsidePolygonPoints(x3, y3, triPts) || pointInsidePolygonPoints(x3, y3, teePts);
      return inside;
    },
    draw: function draw(context, size3, angle2, translation, edgeWidth) {
      var triPts = transformPoints3(this.points, size3, angle2, translation);
      var crossLinePts = transformPoints3(this.crossLinePts(size3, edgeWidth), size3, angle2, translation);
      renderer3.arrowShapeImpl(this.name)(context, triPts, crossLinePts);
    }
  });
  defineArrowShape("vee", {
    points: [-0.15, -0.3, 0, 0, 0.15, -0.3, 0, -0.15],
    gap: function gap(edge) {
      return standardGap(edge) * 0.525;
    }
  });
  defineArrowShape("circle", {
    radius: 0.15,
    collide: function collide(x3, y3, size3, angle2, translation, edgeWidth, padding) {
      var t = translation;
      var inside = Math.pow(t.x - x3, 2) + Math.pow(t.y - y3, 2) <= Math.pow((size3 + 2 * padding) * this.radius, 2);
      return inside;
    },
    draw: function draw(context, size3, angle2, translation, edgeWidth) {
      renderer3.arrowShapeImpl(this.name)(context, translation.x, translation.y, this.radius * size3);
    },
    spacing: function spacing(edge) {
      return renderer3.getArrowWidth(edge.pstyle("width").pfValue, edge.pstyle("arrow-scale").value) * this.radius;
    }
  });
  defineArrowShape("tee", {
    points: [-0.15, 0, -0.15, -0.1, 0.15, -0.1, 0.15, 0],
    spacing: function spacing(edge) {
      return 1;
    },
    gap: function gap(edge) {
      return 1;
    }
  });
  defineArrowShape("square", {
    points: [-0.15, 0, 0.15, 0, 0.15, -0.3, -0.15, -0.3]
  });
  defineArrowShape("diamond", {
    points: [-0.15, -0.15, 0, -0.3, 0.15, -0.15, 0, 0],
    gap: function gap(edge) {
      return edge.pstyle("width").pfValue * edge.pstyle("arrow-scale").value;
    }
  });
  defineArrowShape("chevron", {
    points: [0, 0, -0.15, -0.15, -0.1, -0.2, 0, -0.1, 0.1, -0.2, 0.15, -0.15],
    gap: function gap(edge) {
      return 0.95 * edge.pstyle("width").pfValue * edge.pstyle("arrow-scale").value;
    }
  });
};
var BRp$e = {};
BRp$e.projectIntoViewport = function(clientX, clientY) {
  var cy = this.cy;
  var offsets = this.findContainerClientCoords();
  var offsetLeft = offsets[0];
  var offsetTop = offsets[1];
  var scale2 = offsets[4];
  var pan2 = cy.pan();
  var zoom2 = cy.zoom();
  var x3 = ((clientX - offsetLeft) / scale2 - pan2.x) / zoom2;
  var y3 = ((clientY - offsetTop) / scale2 - pan2.y) / zoom2;
  return [x3, y3];
};
BRp$e.findContainerClientCoords = function() {
  if (this.containerBB) {
    return this.containerBB;
  }
  var container2 = this.container;
  var rect = container2.getBoundingClientRect();
  var style3 = this.cy.window().getComputedStyle(container2);
  var styleValue = function styleValue2(name) {
    return parseFloat(style3.getPropertyValue(name));
  };
  var padding = {
    left: styleValue("padding-left"),
    right: styleValue("padding-right"),
    top: styleValue("padding-top"),
    bottom: styleValue("padding-bottom")
  };
  var border = {
    left: styleValue("border-left-width"),
    right: styleValue("border-right-width"),
    top: styleValue("border-top-width"),
    bottom: styleValue("border-bottom-width")
  };
  var clientWidth = container2.clientWidth;
  var clientHeight = container2.clientHeight;
  var paddingHor = padding.left + padding.right;
  var paddingVer = padding.top + padding.bottom;
  var borderHor = border.left + border.right;
  var scale2 = rect.width / (clientWidth + borderHor);
  var unscaledW = clientWidth - paddingHor;
  var unscaledH = clientHeight - paddingVer;
  var left = rect.left + padding.left + border.left;
  var top = rect.top + padding.top + border.top;
  return this.containerBB = [left, top, unscaledW, unscaledH, scale2];
};
BRp$e.invalidateContainerClientCoordsCache = function() {
  this.containerBB = null;
};
BRp$e.findNearestElement = function(x3, y3, interactiveElementsOnly, isTouch) {
  return this.findNearestElements(x3, y3, interactiveElementsOnly, isTouch)[0];
};
BRp$e.findNearestElements = function(x3, y3, interactiveElementsOnly, isTouch) {
  var self2 = this;
  var r2 = this;
  var eles = r2.getCachedZSortedEles();
  var near = [];
  var zoom2 = r2.cy.zoom();
  var hasCompounds = r2.cy.hasCompoundNodes();
  var edgeThreshold = (isTouch ? 24 : 8) / zoom2;
  var nodeThreshold = (isTouch ? 8 : 2) / zoom2;
  var labelThreshold = (isTouch ? 8 : 2) / zoom2;
  var minSqDist = Infinity;
  var nearEdge;
  var nearNode;
  if (interactiveElementsOnly) {
    eles = eles.interactive;
  }
  function addEle(ele2, sqDist) {
    if (ele2.isNode()) {
      if (nearNode) {
        return;
      } else {
        nearNode = ele2;
        near.push(ele2);
      }
    }
    if (ele2.isEdge() && (sqDist == null || sqDist < minSqDist)) {
      if (nearEdge) {
        if (nearEdge.pstyle("z-compound-depth").value === ele2.pstyle("z-compound-depth").value && nearEdge.pstyle("z-compound-depth").value === ele2.pstyle("z-compound-depth").value) {
          for (var i3 = 0; i3 < near.length; i3++) {
            if (near[i3].isEdge()) {
              near[i3] = ele2;
              nearEdge = ele2;
              minSqDist = sqDist != null ? sqDist : minSqDist;
              break;
            }
          }
        }
      } else {
        near.push(ele2);
        nearEdge = ele2;
        minSqDist = sqDist != null ? sqDist : minSqDist;
      }
    }
  }
  function checkNode(node) {
    var width2 = node.outerWidth() + 2 * nodeThreshold;
    var height2 = node.outerHeight() + 2 * nodeThreshold;
    var hw = width2 / 2;
    var hh2 = height2 / 2;
    var pos = node.position();
    var cornerRadius = node.pstyle("corner-radius").value === "auto" ? "auto" : node.pstyle("corner-radius").pfValue;
    var rs2 = node._private.rscratch;
    if (pos.x - hw <= x3 && x3 <= pos.x + hw && pos.y - hh2 <= y3 && y3 <= pos.y + hh2) {
      var shape = r2.nodeShapes[self2.getNodeShape(node)];
      if (shape.checkPoint(x3, y3, 0, width2, height2, pos.x, pos.y, cornerRadius, rs2)) {
        addEle(node, 0);
        return true;
      }
    }
  }
  function checkEdge(edge) {
    var _p = edge._private;
    var rs2 = _p.rscratch;
    var styleWidth = edge.pstyle("width").pfValue;
    var scale2 = edge.pstyle("arrow-scale").value;
    var width2 = styleWidth / 2 + edgeThreshold;
    var widthSq = width2 * width2;
    var width22 = width2 * 2;
    var src = _p.source;
    var tgt = _p.target;
    var sqDist;
    if (rs2.edgeType === "segments" || rs2.edgeType === "straight" || rs2.edgeType === "haystack") {
      var pts2 = rs2.allpts;
      for (var i3 = 0; i3 + 3 < pts2.length; i3 += 2) {
        if (inLineVicinity(x3, y3, pts2[i3], pts2[i3 + 1], pts2[i3 + 2], pts2[i3 + 3], width22) && widthSq > (sqDist = sqdistToFiniteLine(x3, y3, pts2[i3], pts2[i3 + 1], pts2[i3 + 2], pts2[i3 + 3]))) {
          addEle(edge, sqDist);
          return true;
        }
      }
    } else if (rs2.edgeType === "bezier" || rs2.edgeType === "multibezier" || rs2.edgeType === "self" || rs2.edgeType === "compound") {
      var pts2 = rs2.allpts;
      for (var i3 = 0; i3 + 5 < rs2.allpts.length; i3 += 4) {
        if (inBezierVicinity(x3, y3, pts2[i3], pts2[i3 + 1], pts2[i3 + 2], pts2[i3 + 3], pts2[i3 + 4], pts2[i3 + 5], width22) && widthSq > (sqDist = sqdistToQuadraticBezier(x3, y3, pts2[i3], pts2[i3 + 1], pts2[i3 + 2], pts2[i3 + 3], pts2[i3 + 4], pts2[i3 + 5]))) {
          addEle(edge, sqDist);
          return true;
        }
      }
    }
    var src = src || _p.source;
    var tgt = tgt || _p.target;
    var arSize = self2.getArrowWidth(styleWidth, scale2);
    var arrows = [{
      name: "source",
      x: rs2.arrowStartX,
      y: rs2.arrowStartY,
      angle: rs2.srcArrowAngle
    }, {
      name: "target",
      x: rs2.arrowEndX,
      y: rs2.arrowEndY,
      angle: rs2.tgtArrowAngle
    }, {
      name: "mid-source",
      x: rs2.midX,
      y: rs2.midY,
      angle: rs2.midsrcArrowAngle
    }, {
      name: "mid-target",
      x: rs2.midX,
      y: rs2.midY,
      angle: rs2.midtgtArrowAngle
    }];
    for (var i3 = 0; i3 < arrows.length; i3++) {
      var ar2 = arrows[i3];
      var shape = r2.arrowShapes[edge.pstyle(ar2.name + "-arrow-shape").value];
      var edgeWidth = edge.pstyle("width").pfValue;
      if (shape.roughCollide(x3, y3, arSize, ar2.angle, {
        x: ar2.x,
        y: ar2.y
      }, edgeWidth, edgeThreshold) && shape.collide(x3, y3, arSize, ar2.angle, {
        x: ar2.x,
        y: ar2.y
      }, edgeWidth, edgeThreshold)) {
        addEle(edge);
        return true;
      }
    }
    if (hasCompounds && near.length > 0) {
      checkNode(src);
      checkNode(tgt);
    }
  }
  function preprop(obj, name, pre) {
    return getPrefixedProperty(obj, name, pre);
  }
  function checkLabel(ele2, prefix) {
    var _p = ele2._private;
    var th2 = labelThreshold;
    var prefixDash;
    if (prefix) {
      prefixDash = prefix + "-";
    } else {
      prefixDash = "";
    }
    ele2.boundingBox();
    var bb = _p.labelBounds[prefix || "main"];
    var text = ele2.pstyle(prefixDash + "label").value;
    var eventsEnabled = ele2.pstyle("text-events").strValue === "yes";
    if (!eventsEnabled || !text) {
      return;
    }
    var lx = preprop(_p.rscratch, "labelX", prefix);
    var ly = preprop(_p.rscratch, "labelY", prefix);
    var theta = preprop(_p.rscratch, "labelAngle", prefix);
    var ox = ele2.pstyle(prefixDash + "text-margin-x").pfValue;
    var oy = ele2.pstyle(prefixDash + "text-margin-y").pfValue;
    var lx1 = bb.x1 - th2 - ox;
    var lx2 = bb.x2 + th2 - ox;
    var ly1 = bb.y1 - th2 - oy;
    var ly2 = bb.y2 + th2 - oy;
    if (theta) {
      var cos2 = Math.cos(theta);
      var sin2 = Math.sin(theta);
      var rotate2 = function rotate3(x4, y4) {
        x4 = x4 - lx;
        y4 = y4 - ly;
        return {
          x: x4 * cos2 - y4 * sin2 + lx,
          y: x4 * sin2 + y4 * cos2 + ly
        };
      };
      var px1y1 = rotate2(lx1, ly1);
      var px1y2 = rotate2(lx1, ly2);
      var px2y1 = rotate2(lx2, ly1);
      var px2y2 = rotate2(lx2, ly2);
      var points = [
        // with the margin added after the rotation is applied
        px1y1.x + ox,
        px1y1.y + oy,
        px2y1.x + ox,
        px2y1.y + oy,
        px2y2.x + ox,
        px2y2.y + oy,
        px1y2.x + ox,
        px1y2.y + oy
      ];
      if (pointInsidePolygonPoints(x3, y3, points)) {
        addEle(ele2);
        return true;
      }
    } else {
      if (inBoundingBox(bb, x3, y3)) {
        addEle(ele2);
        return true;
      }
    }
  }
  for (var i2 = eles.length - 1; i2 >= 0; i2--) {
    var ele = eles[i2];
    if (ele.isNode()) {
      checkNode(ele) || checkLabel(ele);
    } else {
      checkEdge(ele) || checkLabel(ele) || checkLabel(ele, "source") || checkLabel(ele, "target");
    }
  }
  return near;
};
BRp$e.getAllInBox = function(x1, y1, x22, y22) {
  var eles = this.getCachedZSortedEles().interactive;
  var zoom2 = this.cy.zoom();
  var labelThreshold = 2 / zoom2;
  var box = [];
  var x1c = Math.min(x1, x22);
  var x2c = Math.max(x1, x22);
  var y1c = Math.min(y1, y22);
  var y2c = Math.max(y1, y22);
  x1 = x1c;
  x22 = x2c;
  y1 = y1c;
  y22 = y2c;
  var boxBb = makeBoundingBox({
    x1,
    y1,
    x2: x22,
    y2: y22
  });
  var selectionBox = [{
    x: boxBb.x1,
    y: boxBb.y1
  }, {
    x: boxBb.x2,
    y: boxBb.y1
  }, {
    x: boxBb.x2,
    y: boxBb.y2
  }, {
    x: boxBb.x1,
    y: boxBb.y2
  }];
  var boxEdges = [[selectionBox[0], selectionBox[1]], [selectionBox[1], selectionBox[2]], [selectionBox[2], selectionBox[3]], [selectionBox[3], selectionBox[0]]];
  function preprop(obj, name, pre) {
    return getPrefixedProperty(obj, name, pre);
  }
  function getRotatedLabelBox(ele2, prefix) {
    var _p2 = ele2._private;
    var th2 = labelThreshold;
    var prefixDash = "";
    ele2.boundingBox();
    var bb = _p2.labelBounds["main"];
    if (!bb) {
      return null;
    }
    var lx = preprop(_p2.rscratch, "labelX", prefix);
    var ly = preprop(_p2.rscratch, "labelY", prefix);
    var theta = preprop(_p2.rscratch, "labelAngle", prefix);
    var ox = ele2.pstyle(prefixDash + "text-margin-x").pfValue;
    var oy = ele2.pstyle(prefixDash + "text-margin-y").pfValue;
    var lx1 = bb.x1 - th2 - ox;
    var lx2 = bb.x2 + th2 - ox;
    var ly1 = bb.y1 - th2 - oy;
    var ly2 = bb.y2 + th2 - oy;
    if (theta) {
      var cos2 = Math.cos(theta);
      var sin2 = Math.sin(theta);
      var rotate2 = function rotate3(x3, y3) {
        x3 = x3 - lx;
        y3 = y3 - ly;
        return {
          x: x3 * cos2 - y3 * sin2 + lx,
          y: x3 * sin2 + y3 * cos2 + ly
        };
      };
      return [rotate2(lx1, ly1), rotate2(lx2, ly1), rotate2(lx2, ly2), rotate2(lx1, ly2)];
    } else {
      return [{
        x: lx1,
        y: ly1
      }, {
        x: lx2,
        y: ly1
      }, {
        x: lx2,
        y: ly2
      }, {
        x: lx1,
        y: ly2
      }];
    }
  }
  function doLinesIntersect(p1, p22, q1, q2) {
    function ccw(a2, b3, c2) {
      return (c2.y - a2.y) * (b3.x - a2.x) > (b3.y - a2.y) * (c2.x - a2.x);
    }
    return ccw(p1, q1, q2) !== ccw(p22, q1, q2) && ccw(p1, p22, q1) !== ccw(p1, p22, q2);
  }
  for (var e = 0; e < eles.length; e++) {
    var ele = eles[e];
    if (ele.isNode()) {
      var node = ele;
      var textEvents = node.pstyle("text-events").strValue === "yes";
      var nodeBoxSelectMode = node.pstyle("box-selection").strValue;
      var labelBoxSelectEnabled = node.pstyle("box-select-labels").strValue === "yes";
      if (nodeBoxSelectMode === "none") {
        continue;
      }
      var includeLabels = (nodeBoxSelectMode === "overlap" || labelBoxSelectEnabled) && textEvents;
      var nodeBb = node.boundingBox({
        includeNodes: true,
        includeEdges: false,
        includeLabels
      });
      if (nodeBoxSelectMode === "contain") {
        var selected = false;
        if (labelBoxSelectEnabled && textEvents) {
          var rotatedLabelBox = getRotatedLabelBox(node);
          if (rotatedLabelBox && satPolygonIntersection(rotatedLabelBox, selectionBox)) {
            box.push(node);
            selected = true;
          }
        }
        if (!selected && boundingBoxInBoundingBox(boxBb, nodeBb)) {
          box.push(node);
        }
      } else if (nodeBoxSelectMode === "overlap") {
        if (boundingBoxesIntersect(boxBb, nodeBb)) {
          var nodeBodyBb = node.boundingBox({
            includeNodes: true,
            includeEdges: true,
            includeLabels: false,
            includeMainLabels: false,
            includeSourceLabels: false,
            includeTargetLabels: false
          });
          var nodeBodyCorners = [{
            x: nodeBodyBb.x1,
            y: nodeBodyBb.y1
          }, {
            x: nodeBodyBb.x2,
            y: nodeBodyBb.y1
          }, {
            x: nodeBodyBb.x2,
            y: nodeBodyBb.y2
          }, {
            x: nodeBodyBb.x1,
            y: nodeBodyBb.y2
          }];
          if (satPolygonIntersection(nodeBodyCorners, selectionBox)) {
            box.push(node);
          } else {
            var _rotatedLabelBox = getRotatedLabelBox(node);
            if (_rotatedLabelBox && satPolygonIntersection(_rotatedLabelBox, selectionBox)) {
              box.push(node);
            }
          }
        }
      }
    } else {
      var edge = ele;
      var _p = edge._private;
      var rs2 = _p.rscratch;
      var edgeBoxSelectMode = edge.pstyle("box-selection").strValue;
      if (edgeBoxSelectMode === "none") {
        continue;
      }
      if (edgeBoxSelectMode === "contain") {
        if (rs2.startX != null && rs2.startY != null && !inBoundingBox(boxBb, rs2.startX, rs2.startY)) {
          continue;
        }
        if (rs2.endX != null && rs2.endY != null && !inBoundingBox(boxBb, rs2.endX, rs2.endY)) {
          continue;
        }
        if (rs2.edgeType === "bezier" || rs2.edgeType === "multibezier" || rs2.edgeType === "self" || rs2.edgeType === "compound" || rs2.edgeType === "segments" || rs2.edgeType === "haystack") {
          var pts2 = _p.rstyle.bezierPts || _p.rstyle.linePts || _p.rstyle.haystackPts;
          var allInside = true;
          for (var i2 = 0; i2 < pts2.length; i2++) {
            if (!pointInBoundingBox(boxBb, pts2[i2])) {
              allInside = false;
              break;
            }
          }
          if (allInside) {
            box.push(edge);
          }
        } else if (rs2.edgeType === "straight") {
          box.push(edge);
        }
      } else if (edgeBoxSelectMode === "overlap") {
        var _selected = false;
        if (rs2.startX != null && rs2.startY != null && rs2.endX != null && rs2.endY != null && (inBoundingBox(boxBb, rs2.startX, rs2.startY) || inBoundingBox(boxBb, rs2.endX, rs2.endY))) {
          box.push(edge);
          _selected = true;
        } else if (!_selected && rs2.edgeType === "haystack") {
          var haystackPts = _p.rstyle.haystackPts;
          for (var _i2 = 0; _i2 < haystackPts.length; _i2++) {
            if (pointInBoundingBox(boxBb, haystackPts[_i2])) {
              box.push(edge);
              _selected = true;
              break;
            }
          }
        }
        if (!_selected) {
          var _pts = _p.rstyle.bezierPts || _p.rstyle.linePts || _p.rstyle.haystackPts;
          if ((!_pts || _pts.length < 2) && rs2.edgeType === "straight") {
            if (rs2.startX != null && rs2.startY != null && rs2.endX != null && rs2.endY != null) {
              _pts = [{
                x: rs2.startX,
                y: rs2.startY
              }, {
                x: rs2.endX,
                y: rs2.endY
              }];
            }
          }
          if (!_pts || _pts.length < 2) continue;
          for (var _i22 = 0; _i22 < _pts.length - 1; _i22++) {
            var segStart = _pts[_i22];
            var segEnd = _pts[_i22 + 1];
            for (var b2 = 0; b2 < boxEdges.length; b2++) {
              var _boxEdges$b = _slicedToArray(boxEdges[b2], 2), boxStart = _boxEdges$b[0], boxEnd = _boxEdges$b[1];
              if (doLinesIntersect(segStart, segEnd, boxStart, boxEnd)) {
                box.push(edge);
                _selected = true;
                break;
              }
            }
            if (_selected) break;
          }
        }
      }
    }
  }
  return box;
};
var BRp$d = {};
BRp$d.calculateArrowAngles = function(edge) {
  var rs2 = edge._private.rscratch;
  var isHaystack = rs2.edgeType === "haystack";
  var isBezier = rs2.edgeType === "bezier";
  var isMultibezier = rs2.edgeType === "multibezier";
  var isSegments = rs2.edgeType === "segments";
  var isCompound = rs2.edgeType === "compound";
  var isSelf = rs2.edgeType === "self";
  var dispX, dispY;
  var startX2, startY2, endX, endY, midX, midY;
  if (isHaystack) {
    startX2 = rs2.haystackPts[0];
    startY2 = rs2.haystackPts[1];
    endX = rs2.haystackPts[2];
    endY = rs2.haystackPts[3];
  } else {
    startX2 = rs2.arrowStartX;
    startY2 = rs2.arrowStartY;
    endX = rs2.arrowEndX;
    endY = rs2.arrowEndY;
  }
  midX = rs2.midX;
  midY = rs2.midY;
  if (isSegments) {
    dispX = startX2 - rs2.segpts[0];
    dispY = startY2 - rs2.segpts[1];
  } else if (isMultibezier || isCompound || isSelf || isBezier) {
    var pts2 = rs2.allpts;
    var bX = qbezierAt(pts2[0], pts2[2], pts2[4], 0.1);
    var bY = qbezierAt(pts2[1], pts2[3], pts2[5], 0.1);
    dispX = startX2 - bX;
    dispY = startY2 - bY;
  } else {
    dispX = startX2 - midX;
    dispY = startY2 - midY;
  }
  rs2.srcArrowAngle = getAngleFromDisp(dispX, dispY);
  var midX = rs2.midX;
  var midY = rs2.midY;
  if (isHaystack) {
    midX = (startX2 + endX) / 2;
    midY = (startY2 + endY) / 2;
  }
  dispX = endX - startX2;
  dispY = endY - startY2;
  if (isSegments) {
    var pts2 = rs2.allpts;
    if (pts2.length / 2 % 2 === 0) {
      var i2 = pts2.length / 2;
      var i1 = i2 - 2;
      dispX = pts2[i2] - pts2[i1];
      dispY = pts2[i2 + 1] - pts2[i1 + 1];
    } else if (rs2.isRound) {
      dispX = rs2.midVector[1];
      dispY = -rs2.midVector[0];
    } else {
      var i2 = pts2.length / 2 - 1;
      var i1 = i2 - 2;
      dispX = pts2[i2] - pts2[i1];
      dispY = pts2[i2 + 1] - pts2[i1 + 1];
    }
  } else if (isMultibezier || isCompound || isSelf) {
    var pts2 = rs2.allpts;
    var cpts = rs2.ctrlpts;
    var bp0x, bp0y;
    var bp1x, bp1y;
    if (cpts.length / 2 % 2 === 0) {
      var p0 = pts2.length / 2 - 1;
      var ic2 = p0 + 2;
      var p1 = ic2 + 2;
      bp0x = qbezierAt(pts2[p0], pts2[ic2], pts2[p1], 0);
      bp0y = qbezierAt(pts2[p0 + 1], pts2[ic2 + 1], pts2[p1 + 1], 0);
      bp1x = qbezierAt(pts2[p0], pts2[ic2], pts2[p1], 1e-4);
      bp1y = qbezierAt(pts2[p0 + 1], pts2[ic2 + 1], pts2[p1 + 1], 1e-4);
    } else {
      var ic2 = pts2.length / 2 - 1;
      var p0 = ic2 - 2;
      var p1 = ic2 + 2;
      bp0x = qbezierAt(pts2[p0], pts2[ic2], pts2[p1], 0.4999);
      bp0y = qbezierAt(pts2[p0 + 1], pts2[ic2 + 1], pts2[p1 + 1], 0.4999);
      bp1x = qbezierAt(pts2[p0], pts2[ic2], pts2[p1], 0.5);
      bp1y = qbezierAt(pts2[p0 + 1], pts2[ic2 + 1], pts2[p1 + 1], 0.5);
    }
    dispX = bp1x - bp0x;
    dispY = bp1y - bp0y;
  }
  rs2.midtgtArrowAngle = getAngleFromDisp(dispX, dispY);
  rs2.midDispX = dispX;
  rs2.midDispY = dispY;
  dispX *= -1;
  dispY *= -1;
  if (isSegments) {
    var pts2 = rs2.allpts;
    if (pts2.length / 2 % 2 === 0) ;
    else if (!rs2.isRound) {
      var i2 = pts2.length / 2 - 1;
      var i3 = i2 + 2;
      dispX = -(pts2[i3] - pts2[i2]);
      dispY = -(pts2[i3 + 1] - pts2[i2 + 1]);
    }
  }
  rs2.midsrcArrowAngle = getAngleFromDisp(dispX, dispY);
  if (isSegments) {
    dispX = endX - rs2.segpts[rs2.segpts.length - 2];
    dispY = endY - rs2.segpts[rs2.segpts.length - 1];
  } else if (isMultibezier || isCompound || isSelf || isBezier) {
    var pts2 = rs2.allpts;
    var l2 = pts2.length;
    var bX = qbezierAt(pts2[l2 - 6], pts2[l2 - 4], pts2[l2 - 2], 0.9);
    var bY = qbezierAt(pts2[l2 - 5], pts2[l2 - 3], pts2[l2 - 1], 0.9);
    dispX = endX - bX;
    dispY = endY - bY;
  } else {
    dispX = endX - midX;
    dispY = endY - midY;
  }
  rs2.tgtArrowAngle = getAngleFromDisp(dispX, dispY);
};
BRp$d.getArrowWidth = BRp$d.getArrowHeight = function(edgeWidth, scale2) {
  var cache3 = this.arrowWidthCache = this.arrowWidthCache || {};
  var cachedVal = cache3[edgeWidth + ", " + scale2];
  if (cachedVal) {
    return cachedVal;
  }
  cachedVal = Math.max(Math.pow(edgeWidth * 13.37, 0.9), 29) * scale2;
  cache3[edgeWidth + ", " + scale2] = cachedVal;
  return cachedVal;
};
var x;
var y;
var v1 = {};
var v2 = {};
var sinA;
var sinA90;
var radDirection;
var drawDirection;
var angle;
var halfAngle;
var cRadius;
var lenOut;
var radius;
var limit;
var startX;
var startY;
var stopX;
var stopY;
var lastPoint;
var asVec = function asVec2(p3, pp, v3) {
  v3.x = pp.x - p3.x;
  v3.y = pp.y - p3.y;
  v3.len = Math.sqrt(v3.x * v3.x + v3.y * v3.y);
  v3.nx = v3.x / v3.len;
  v3.ny = v3.y / v3.len;
  v3.ang = Math.atan2(v3.ny, v3.nx);
};
var invertVec = function invertVec2(originalV, invertedV) {
  invertedV.x = originalV.x * -1;
  invertedV.y = originalV.y * -1;
  invertedV.nx = originalV.nx * -1;
  invertedV.ny = originalV.ny * -1;
  invertedV.ang = originalV.ang > 0 ? -(Math.PI - originalV.ang) : Math.PI + originalV.ang;
};
var calcCornerArc = function calcCornerArc2(previousPoint, currentPoint, nextPoint, radiusMax, isArcRadius) {
  previousPoint !== lastPoint ? asVec(currentPoint, previousPoint, v1) : invertVec(v2, v1);
  asVec(currentPoint, nextPoint, v2);
  sinA = v1.nx * v2.ny - v1.ny * v2.nx;
  sinA90 = v1.nx * v2.nx - v1.ny * -v2.ny;
  angle = Math.asin(Math.max(-1, Math.min(1, sinA)));
  if (Math.abs(angle) < 1e-6) {
    x = currentPoint.x;
    y = currentPoint.y;
    cRadius = radius = 0;
    return;
  }
  radDirection = 1;
  drawDirection = false;
  if (sinA90 < 0) {
    if (angle < 0) {
      angle = Math.PI + angle;
    } else {
      angle = Math.PI - angle;
      radDirection = -1;
      drawDirection = true;
    }
  } else {
    if (angle > 0) {
      radDirection = -1;
      drawDirection = true;
    }
  }
  if (currentPoint.radius !== void 0) {
    radius = currentPoint.radius;
  } else {
    radius = radiusMax;
  }
  halfAngle = angle / 2;
  limit = Math.min(v1.len / 2, v2.len / 2);
  if (isArcRadius) {
    lenOut = Math.abs(Math.cos(halfAngle) * radius / Math.sin(halfAngle));
    if (lenOut > limit) {
      lenOut = limit;
      cRadius = Math.abs(lenOut * Math.sin(halfAngle) / Math.cos(halfAngle));
    } else {
      cRadius = radius;
    }
  } else {
    lenOut = Math.min(limit, radius);
    cRadius = Math.abs(lenOut * Math.sin(halfAngle) / Math.cos(halfAngle));
  }
  stopX = currentPoint.x + v2.nx * lenOut;
  stopY = currentPoint.y + v2.ny * lenOut;
  x = stopX - v2.ny * cRadius * radDirection;
  y = stopY + v2.nx * cRadius * radDirection;
  startX = currentPoint.x + v1.nx * lenOut;
  startY = currentPoint.y + v1.ny * lenOut;
  lastPoint = currentPoint;
};
function drawPreparedRoundCorner(ctx, roundCorner) {
  if (roundCorner.radius === 0) ctx.lineTo(roundCorner.cx, roundCorner.cy);
  else ctx.arc(roundCorner.cx, roundCorner.cy, roundCorner.radius, roundCorner.startAngle, roundCorner.endAngle, roundCorner.counterClockwise);
}
function getRoundCorner(previousPoint, currentPoint, nextPoint, radiusMax) {
  var isArcRadius = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
  if (radiusMax === 0 || currentPoint.radius === 0) return {
    cx: currentPoint.x,
    cy: currentPoint.y,
    radius: 0,
    startX: currentPoint.x,
    startY: currentPoint.y,
    stopX: currentPoint.x,
    stopY: currentPoint.y,
    startAngle: void 0,
    endAngle: void 0,
    counterClockwise: void 0
  };
  calcCornerArc(previousPoint, currentPoint, nextPoint, radiusMax, isArcRadius);
  return {
    cx: x,
    cy: y,
    radius: cRadius,
    startX,
    startY,
    stopX,
    stopY,
    startAngle: v1.ang + Math.PI / 2 * radDirection,
    endAngle: v2.ang - Math.PI / 2 * radDirection,
    counterClockwise: drawDirection
  };
}
var AVOID_IMPOSSIBLE_BEZIER_CONSTANT = 0.01;
var AVOID_IMPOSSIBLE_BEZIER_CONSTANT_L = Math.sqrt(2 * AVOID_IMPOSSIBLE_BEZIER_CONSTANT);
var BRp$c = {};
BRp$c.findMidptPtsEtc = function(edge, pairInfo) {
  var posPts = pairInfo.posPts, intersectionPts = pairInfo.intersectionPts, vectorNormInverse = pairInfo.vectorNormInverse;
  var midptPts;
  var srcManEndpt = edge.pstyle("source-endpoint");
  var tgtManEndpt = edge.pstyle("target-endpoint");
  var haveManualEndPts = srcManEndpt.units != null && tgtManEndpt.units != null;
  var recalcVectorNormInverse = function recalcVectorNormInverse2(x12, y12, x23, y23) {
    var dy = y23 - y12;
    var dx = x23 - x12;
    var l2 = Math.sqrt(dx * dx + dy * dy);
    return {
      x: -dy / l2,
      y: dx / l2
    };
  };
  var edgeDistances = edge.pstyle("edge-distances").value;
  switch (edgeDistances) {
    case "node-position":
      midptPts = posPts;
      break;
    case "intersection":
      midptPts = intersectionPts;
      break;
    case "endpoints": {
      if (haveManualEndPts) {
        var _this$manualEndptToPx = this.manualEndptToPx(edge.source()[0], srcManEndpt), _this$manualEndptToPx2 = _slicedToArray(_this$manualEndptToPx, 2), x1 = _this$manualEndptToPx2[0], y1 = _this$manualEndptToPx2[1];
        var _this$manualEndptToPx3 = this.manualEndptToPx(edge.target()[0], tgtManEndpt), _this$manualEndptToPx4 = _slicedToArray(_this$manualEndptToPx3, 2), x22 = _this$manualEndptToPx4[0], y22 = _this$manualEndptToPx4[1];
        var endPts = {
          x1,
          y1,
          x2: x22,
          y2: y22
        };
        vectorNormInverse = recalcVectorNormInverse(x1, y1, x22, y22);
        midptPts = endPts;
      } else {
        warn("Edge ".concat(edge.id(), " has edge-distances:endpoints specified without manual endpoints specified via source-endpoint and target-endpoint.  Falling back on edge-distances:intersection (default)."));
        midptPts = intersectionPts;
      }
      break;
    }
  }
  return {
    midptPts,
    vectorNormInverse
  };
};
BRp$c.findHaystackPoints = function(edges3) {
  for (var i2 = 0; i2 < edges3.length; i2++) {
    var edge = edges3[i2];
    var _p = edge._private;
    var rs2 = _p.rscratch;
    if (!rs2.haystack) {
      var angle2 = Math.random() * 2 * Math.PI;
      rs2.source = {
        x: Math.cos(angle2),
        y: Math.sin(angle2)
      };
      angle2 = Math.random() * 2 * Math.PI;
      rs2.target = {
        x: Math.cos(angle2),
        y: Math.sin(angle2)
      };
    }
    var src = _p.source;
    var tgt = _p.target;
    var srcPos = src.position();
    var tgtPos = tgt.position();
    var srcW = src.width();
    var tgtW = tgt.width();
    var srcH = src.height();
    var tgtH = tgt.height();
    var radius2 = edge.pstyle("haystack-radius").value;
    var halfRadius = radius2 / 2;
    rs2.haystackPts = rs2.allpts = [rs2.source.x * srcW * halfRadius + srcPos.x, rs2.source.y * srcH * halfRadius + srcPos.y, rs2.target.x * tgtW * halfRadius + tgtPos.x, rs2.target.y * tgtH * halfRadius + tgtPos.y];
    rs2.midX = (rs2.allpts[0] + rs2.allpts[2]) / 2;
    rs2.midY = (rs2.allpts[1] + rs2.allpts[3]) / 2;
    rs2.edgeType = "haystack";
    rs2.haystack = true;
    this.storeEdgeProjections(edge);
    this.calculateArrowAngles(edge);
    this.recalculateEdgeLabelProjections(edge);
    this.calculateLabelAngles(edge);
  }
};
BRp$c.findSegmentsPoints = function(edge, pairInfo) {
  var rs2 = edge._private.rscratch;
  var segmentWs = edge.pstyle("segment-weights");
  var segmentDs = edge.pstyle("segment-distances");
  var segmentRs = edge.pstyle("segment-radii");
  var segmentTs = edge.pstyle("radius-type");
  var segmentsN = Math.min(segmentWs.pfValue.length, segmentDs.pfValue.length);
  var lastRadius = segmentRs.pfValue[segmentRs.pfValue.length - 1];
  var lastRadiusType = segmentTs.pfValue[segmentTs.pfValue.length - 1];
  rs2.edgeType = "segments";
  rs2.segpts = [];
  rs2.radii = [];
  rs2.isArcRadius = [];
  for (var s2 = 0; s2 < segmentsN; s2++) {
    var w2 = segmentWs.pfValue[s2];
    var d2 = segmentDs.pfValue[s2];
    var w1 = 1 - w2;
    var w22 = w2;
    var _this$findMidptPtsEtc = this.findMidptPtsEtc(edge, pairInfo), midptPts = _this$findMidptPtsEtc.midptPts, vectorNormInverse = _this$findMidptPtsEtc.vectorNormInverse;
    var adjustedMidpt = {
      x: midptPts.x1 * w1 + midptPts.x2 * w22,
      y: midptPts.y1 * w1 + midptPts.y2 * w22
    };
    rs2.segpts.push(adjustedMidpt.x + vectorNormInverse.x * d2, adjustedMidpt.y + vectorNormInverse.y * d2);
    rs2.radii.push(segmentRs.pfValue[s2] !== void 0 ? segmentRs.pfValue[s2] : lastRadius);
    rs2.isArcRadius.push((segmentTs.pfValue[s2] !== void 0 ? segmentTs.pfValue[s2] : lastRadiusType) === "arc-radius");
  }
};
BRp$c.findLoopPoints = function(edge, pairInfo, i2, edgeIsUnbundled) {
  var rs2 = edge._private.rscratch;
  var dirCounts = pairInfo.dirCounts, srcPos = pairInfo.srcPos;
  var ctrlptDists = edge.pstyle("control-point-distances");
  var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : void 0;
  var loopDir = edge.pstyle("loop-direction").pfValue;
  var loopSwp = edge.pstyle("loop-sweep").pfValue;
  var stepSize = edge.pstyle("control-point-step-size").pfValue;
  rs2.edgeType = "self";
  var j2 = i2;
  var loopDist = stepSize;
  if (edgeIsUnbundled) {
    j2 = 0;
    loopDist = ctrlptDist;
  }
  var loopAngle = loopDir - Math.PI / 2;
  var outAngle = loopAngle - loopSwp / 2;
  var inAngle = loopAngle + loopSwp / 2;
  var dc2 = String(loopDir + "_" + loopSwp);
  j2 = dirCounts[dc2] === void 0 ? dirCounts[dc2] = 0 : ++dirCounts[dc2];
  rs2.ctrlpts = [srcPos.x + Math.cos(outAngle) * 1.4 * loopDist * (j2 / 3 + 1), srcPos.y + Math.sin(outAngle) * 1.4 * loopDist * (j2 / 3 + 1), srcPos.x + Math.cos(inAngle) * 1.4 * loopDist * (j2 / 3 + 1), srcPos.y + Math.sin(inAngle) * 1.4 * loopDist * (j2 / 3 + 1)];
};
BRp$c.findCompoundLoopPoints = function(edge, pairInfo, i2, edgeIsUnbundled) {
  var rs2 = edge._private.rscratch;
  rs2.edgeType = "compound";
  var srcPos = pairInfo.srcPos, tgtPos = pairInfo.tgtPos, srcW = pairInfo.srcW, srcH = pairInfo.srcH, tgtW = pairInfo.tgtW, tgtH = pairInfo.tgtH;
  var stepSize = edge.pstyle("control-point-step-size").pfValue;
  var ctrlptDists = edge.pstyle("control-point-distances");
  var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : void 0;
  var j2 = i2;
  var loopDist = stepSize;
  if (edgeIsUnbundled) {
    j2 = 0;
    loopDist = ctrlptDist;
  }
  var loopW = 50;
  var loopaPos = {
    x: srcPos.x - srcW / 2,
    y: srcPos.y - srcH / 2
  };
  var loopbPos = {
    x: tgtPos.x - tgtW / 2,
    y: tgtPos.y - tgtH / 2
  };
  var loopPos = {
    x: Math.min(loopaPos.x, loopbPos.x),
    y: Math.min(loopaPos.y, loopbPos.y)
  };
  var minCompoundStretch = 0.5;
  var compoundStretchA = Math.max(minCompoundStretch, Math.log(srcW * AVOID_IMPOSSIBLE_BEZIER_CONSTANT));
  var compoundStretchB = Math.max(minCompoundStretch, Math.log(tgtW * AVOID_IMPOSSIBLE_BEZIER_CONSTANT));
  rs2.ctrlpts = [loopPos.x, loopPos.y - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j2 / 3 + 1) * compoundStretchA, loopPos.x - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j2 / 3 + 1) * compoundStretchB, loopPos.y];
};
BRp$c.findStraightEdgePoints = function(edge) {
  edge._private.rscratch.edgeType = "straight";
};
BRp$c.findBezierPoints = function(edge, pairInfo, i2, edgeIsUnbundled, edgeIsSwapped) {
  var rs2 = edge._private.rscratch;
  var stepSize = edge.pstyle("control-point-step-size").pfValue;
  var ctrlptDists = edge.pstyle("control-point-distances");
  var ctrlptWs = edge.pstyle("control-point-weights");
  var bezierN = ctrlptDists && ctrlptWs ? Math.min(ctrlptDists.value.length, ctrlptWs.value.length) : 1;
  var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : void 0;
  var ctrlptWeight = ctrlptWs.value[0];
  var multi = edgeIsUnbundled;
  rs2.edgeType = multi ? "multibezier" : "bezier";
  rs2.ctrlpts = [];
  for (var b2 = 0; b2 < bezierN; b2++) {
    var normctrlptDist = (0.5 - pairInfo.eles.length / 2 + i2) * stepSize * (edgeIsSwapped ? -1 : 1);
    var manctrlptDist = void 0;
    var sign = signum(normctrlptDist);
    if (multi) {
      ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[b2] : stepSize;
      ctrlptWeight = ctrlptWs.value[b2];
    }
    if (edgeIsUnbundled) {
      manctrlptDist = ctrlptDist;
    } else {
      manctrlptDist = ctrlptDist !== void 0 ? sign * ctrlptDist : void 0;
    }
    var distanceFromMidpoint = manctrlptDist !== void 0 ? manctrlptDist : normctrlptDist;
    var w1 = 1 - ctrlptWeight;
    var w2 = ctrlptWeight;
    var _this$findMidptPtsEtc2 = this.findMidptPtsEtc(edge, pairInfo), midptPts = _this$findMidptPtsEtc2.midptPts, vectorNormInverse = _this$findMidptPtsEtc2.vectorNormInverse;
    var adjustedMidpt = {
      x: midptPts.x1 * w1 + midptPts.x2 * w2,
      y: midptPts.y1 * w1 + midptPts.y2 * w2
    };
    rs2.ctrlpts.push(adjustedMidpt.x + vectorNormInverse.x * distanceFromMidpoint, adjustedMidpt.y + vectorNormInverse.y * distanceFromMidpoint);
  }
};
BRp$c.findTaxiPoints = function(edge, pairInfo) {
  var rs2 = edge._private.rscratch;
  rs2.edgeType = "segments";
  var VERTICAL = "vertical";
  var HORIZONTAL = "horizontal";
  var LEFTWARD = "leftward";
  var RIGHTWARD = "rightward";
  var DOWNWARD = "downward";
  var UPWARD = "upward";
  var AUTO = "auto";
  var posPts = pairInfo.posPts, srcW = pairInfo.srcW, srcH = pairInfo.srcH, tgtW = pairInfo.tgtW, tgtH = pairInfo.tgtH;
  var edgeDistances = edge.pstyle("edge-distances").value;
  var dIncludesNodeBody = edgeDistances !== "node-position";
  var taxiDir = edge.pstyle("taxi-direction").value;
  var rawTaxiDir = taxiDir;
  var taxiTurn = edge.pstyle("taxi-turn");
  var turnIsPercent = taxiTurn.units === "%";
  var taxiTurnPfVal = taxiTurn.pfValue;
  var turnIsNegative = taxiTurnPfVal < 0;
  var minD = edge.pstyle("taxi-turn-min-distance").pfValue;
  var dw = dIncludesNodeBody ? (srcW + tgtW) / 2 : 0;
  var dh2 = dIncludesNodeBody ? (srcH + tgtH) / 2 : 0;
  var pdx = posPts.x2 - posPts.x1;
  var pdy = posPts.y2 - posPts.y1;
  var subDWH = function subDWH2(dxy, dwh) {
    if (dxy > 0) {
      return Math.max(dxy - dwh, 0);
    } else {
      return Math.min(dxy + dwh, 0);
    }
  };
  var dx = subDWH(pdx, dw);
  var dy = subDWH(pdy, dh2);
  var isExplicitDir = false;
  if (rawTaxiDir === AUTO) {
    taxiDir = Math.abs(dx) > Math.abs(dy) ? HORIZONTAL : VERTICAL;
  } else if (rawTaxiDir === UPWARD || rawTaxiDir === DOWNWARD) {
    taxiDir = VERTICAL;
    isExplicitDir = true;
  } else if (rawTaxiDir === LEFTWARD || rawTaxiDir === RIGHTWARD) {
    taxiDir = HORIZONTAL;
    isExplicitDir = true;
  }
  var isVert = taxiDir === VERTICAL;
  var l2 = isVert ? dy : dx;
  var pl2 = isVert ? pdy : pdx;
  var sgnL = signum(pl2);
  var forcedDir = false;
  if (!(isExplicitDir && (turnIsPercent || turnIsNegative)) && (rawTaxiDir === DOWNWARD && pl2 < 0 || rawTaxiDir === UPWARD && pl2 > 0 || rawTaxiDir === LEFTWARD && pl2 > 0 || rawTaxiDir === RIGHTWARD && pl2 < 0)) {
    sgnL *= -1;
    l2 = sgnL * Math.abs(l2);
    forcedDir = true;
  }
  var d2;
  if (turnIsPercent) {
    var p3 = taxiTurnPfVal < 0 ? 1 + taxiTurnPfVal : taxiTurnPfVal;
    d2 = p3 * l2;
  } else {
    var k2 = taxiTurnPfVal < 0 ? l2 : 0;
    d2 = k2 + taxiTurnPfVal * sgnL;
  }
  var getIsTooClose = function getIsTooClose2(d3) {
    return Math.abs(d3) < minD || Math.abs(d3) >= Math.abs(l2);
  };
  var isTooCloseSrc = getIsTooClose(d2);
  var isTooCloseTgt = getIsTooClose(Math.abs(l2) - Math.abs(d2));
  var isTooClose = isTooCloseSrc || isTooCloseTgt;
  if (isTooClose && !forcedDir) {
    if (isVert) {
      var lShapeInsideSrc = Math.abs(pl2) <= srcH / 2;
      var lShapeInsideTgt = Math.abs(pdx) <= tgtW / 2;
      if (lShapeInsideSrc) {
        var x3 = (posPts.x1 + posPts.x2) / 2;
        var y1 = posPts.y1, y22 = posPts.y2;
        rs2.segpts = [x3, y1, x3, y22];
      } else if (lShapeInsideTgt) {
        var y3 = (posPts.y1 + posPts.y2) / 2;
        var x1 = posPts.x1, x22 = posPts.x2;
        rs2.segpts = [x1, y3, x22, y3];
      } else {
        rs2.segpts = [posPts.x1, posPts.y2];
      }
    } else {
      var _lShapeInsideSrc = Math.abs(pl2) <= srcW / 2;
      var _lShapeInsideTgt = Math.abs(pdy) <= tgtH / 2;
      if (_lShapeInsideSrc) {
        var _y = (posPts.y1 + posPts.y2) / 2;
        var _x = posPts.x1, _x2 = posPts.x2;
        rs2.segpts = [_x, _y, _x2, _y];
      } else if (_lShapeInsideTgt) {
        var _x3 = (posPts.x1 + posPts.x2) / 2;
        var _y2 = posPts.y1, _y3 = posPts.y2;
        rs2.segpts = [_x3, _y2, _x3, _y3];
      } else {
        rs2.segpts = [posPts.x2, posPts.y1];
      }
    }
  } else {
    if (isVert) {
      var _y4 = posPts.y1 + d2 + (dIncludesNodeBody ? srcH / 2 * sgnL : 0);
      var _x4 = posPts.x1, _x5 = posPts.x2;
      rs2.segpts = [_x4, _y4, _x5, _y4];
    } else {
      var _x6 = posPts.x1 + d2 + (dIncludesNodeBody ? srcW / 2 * sgnL : 0);
      var _y5 = posPts.y1, _y6 = posPts.y2;
      rs2.segpts = [_x6, _y5, _x6, _y6];
    }
  }
  if (rs2.isRound) {
    var radius2 = edge.pstyle("taxi-radius").value;
    var isArcRadius = edge.pstyle("radius-type").value[0] === "arc-radius";
    rs2.radii = new Array(rs2.segpts.length / 2).fill(radius2);
    rs2.isArcRadius = new Array(rs2.segpts.length / 2).fill(isArcRadius);
  }
};
BRp$c.tryToCorrectInvalidPoints = function(edge, pairInfo) {
  var rs2 = edge._private.rscratch;
  if (rs2.edgeType === "bezier") {
    var srcPos = pairInfo.srcPos, tgtPos = pairInfo.tgtPos, srcW = pairInfo.srcW, srcH = pairInfo.srcH, tgtW = pairInfo.tgtW, tgtH = pairInfo.tgtH, srcShape = pairInfo.srcShape, tgtShape = pairInfo.tgtShape, srcCornerRadius = pairInfo.srcCornerRadius, tgtCornerRadius = pairInfo.tgtCornerRadius, srcRs = pairInfo.srcRs, tgtRs = pairInfo.tgtRs;
    var badStart = !number$1(rs2.startX) || !number$1(rs2.startY);
    var badAStart = !number$1(rs2.arrowStartX) || !number$1(rs2.arrowStartY);
    var badEnd = !number$1(rs2.endX) || !number$1(rs2.endY);
    var badAEnd = !number$1(rs2.arrowEndX) || !number$1(rs2.arrowEndY);
    var minCpADistFactor = 3;
    var arrowW = this.getArrowWidth(edge.pstyle("width").pfValue, edge.pstyle("arrow-scale").value) * this.arrowShapeWidth;
    var minCpADist = minCpADistFactor * arrowW;
    var startACpDist = dist({
      x: rs2.ctrlpts[0],
      y: rs2.ctrlpts[1]
    }, {
      x: rs2.startX,
      y: rs2.startY
    });
    var closeStartACp = startACpDist < minCpADist;
    var endACpDist = dist({
      x: rs2.ctrlpts[0],
      y: rs2.ctrlpts[1]
    }, {
      x: rs2.endX,
      y: rs2.endY
    });
    var closeEndACp = endACpDist < minCpADist;
    var overlapping = false;
    if (badStart || badAStart || closeStartACp) {
      overlapping = true;
      var cpD = {
        // delta
        x: rs2.ctrlpts[0] - srcPos.x,
        y: rs2.ctrlpts[1] - srcPos.y
      };
      var cpL = Math.sqrt(cpD.x * cpD.x + cpD.y * cpD.y);
      var cpM = {
        // normalised delta
        x: cpD.x / cpL,
        y: cpD.y / cpL
      };
      var radius2 = Math.max(srcW, srcH);
      var cpProj = {
        // *2 radius guarantees outside shape
        x: rs2.ctrlpts[0] + cpM.x * 2 * radius2,
        y: rs2.ctrlpts[1] + cpM.y * 2 * radius2
      };
      var srcCtrlPtIntn = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, cpProj.x, cpProj.y, 0, srcCornerRadius, srcRs);
      if (closeStartACp) {
        rs2.ctrlpts[0] = rs2.ctrlpts[0] + cpM.x * (minCpADist - startACpDist);
        rs2.ctrlpts[1] = rs2.ctrlpts[1] + cpM.y * (minCpADist - startACpDist);
      } else {
        rs2.ctrlpts[0] = srcCtrlPtIntn[0] + cpM.x * minCpADist;
        rs2.ctrlpts[1] = srcCtrlPtIntn[1] + cpM.y * minCpADist;
      }
    }
    if (badEnd || badAEnd || closeEndACp) {
      overlapping = true;
      var _cpD = {
        // delta
        x: rs2.ctrlpts[0] - tgtPos.x,
        y: rs2.ctrlpts[1] - tgtPos.y
      };
      var _cpL = Math.sqrt(_cpD.x * _cpD.x + _cpD.y * _cpD.y);
      var _cpM = {
        // normalised delta
        x: _cpD.x / _cpL,
        y: _cpD.y / _cpL
      };
      var _radius = Math.max(srcW, srcH);
      var _cpProj = {
        // *2 radius guarantees outside shape
        x: rs2.ctrlpts[0] + _cpM.x * 2 * _radius,
        y: rs2.ctrlpts[1] + _cpM.y * 2 * _radius
      };
      var tgtCtrlPtIntn = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, _cpProj.x, _cpProj.y, 0, tgtCornerRadius, tgtRs);
      if (closeEndACp) {
        rs2.ctrlpts[0] = rs2.ctrlpts[0] + _cpM.x * (minCpADist - endACpDist);
        rs2.ctrlpts[1] = rs2.ctrlpts[1] + _cpM.y * (minCpADist - endACpDist);
      } else {
        rs2.ctrlpts[0] = tgtCtrlPtIntn[0] + _cpM.x * minCpADist;
        rs2.ctrlpts[1] = tgtCtrlPtIntn[1] + _cpM.y * minCpADist;
      }
    }
    if (overlapping) {
      this.findEndpoints(edge);
    }
  }
};
BRp$c.storeAllpts = function(edge) {
  var rs2 = edge._private.rscratch;
  if (rs2.edgeType === "multibezier" || rs2.edgeType === "bezier" || rs2.edgeType === "self" || rs2.edgeType === "compound") {
    rs2.allpts = [];
    rs2.allpts.push(rs2.startX, rs2.startY);
    for (var b2 = 0; b2 + 1 < rs2.ctrlpts.length; b2 += 2) {
      rs2.allpts.push(rs2.ctrlpts[b2], rs2.ctrlpts[b2 + 1]);
      if (b2 + 3 < rs2.ctrlpts.length) {
        rs2.allpts.push((rs2.ctrlpts[b2] + rs2.ctrlpts[b2 + 2]) / 2, (rs2.ctrlpts[b2 + 1] + rs2.ctrlpts[b2 + 3]) / 2);
      }
    }
    rs2.allpts.push(rs2.endX, rs2.endY);
    var m2, mt2;
    if (rs2.ctrlpts.length / 2 % 2 === 0) {
      m2 = rs2.allpts.length / 2 - 1;
      rs2.midX = rs2.allpts[m2];
      rs2.midY = rs2.allpts[m2 + 1];
    } else {
      m2 = rs2.allpts.length / 2 - 3;
      mt2 = 0.5;
      rs2.midX = qbezierAt(rs2.allpts[m2], rs2.allpts[m2 + 2], rs2.allpts[m2 + 4], mt2);
      rs2.midY = qbezierAt(rs2.allpts[m2 + 1], rs2.allpts[m2 + 3], rs2.allpts[m2 + 5], mt2);
    }
  } else if (rs2.edgeType === "straight") {
    rs2.allpts = [rs2.startX, rs2.startY, rs2.endX, rs2.endY];
    rs2.midX = (rs2.startX + rs2.endX + rs2.arrowStartX + rs2.arrowEndX) / 4;
    rs2.midY = (rs2.startY + rs2.endY + rs2.arrowStartY + rs2.arrowEndY) / 4;
  } else if (rs2.edgeType === "segments") {
    rs2.allpts = [];
    rs2.allpts.push(rs2.startX, rs2.startY);
    rs2.allpts.push.apply(rs2.allpts, rs2.segpts);
    rs2.allpts.push(rs2.endX, rs2.endY);
    if (rs2.isRound) {
      rs2.roundCorners = [];
      for (var i2 = 2; i2 + 3 < rs2.allpts.length; i2 += 2) {
        var radius2 = rs2.radii[i2 / 2 - 1];
        var isArcRadius = rs2.isArcRadius[i2 / 2 - 1];
        rs2.roundCorners.push(getRoundCorner({
          x: rs2.allpts[i2 - 2],
          y: rs2.allpts[i2 - 1]
        }, {
          x: rs2.allpts[i2],
          y: rs2.allpts[i2 + 1],
          radius: radius2
        }, {
          x: rs2.allpts[i2 + 2],
          y: rs2.allpts[i2 + 3]
        }, radius2, isArcRadius));
      }
    }
    if (rs2.segpts.length % 4 === 0) {
      var i22 = rs2.segpts.length / 2;
      var i1 = i22 - 2;
      rs2.midX = (rs2.segpts[i1] + rs2.segpts[i22]) / 2;
      rs2.midY = (rs2.segpts[i1 + 1] + rs2.segpts[i22 + 1]) / 2;
    } else {
      var _i2 = rs2.segpts.length / 2 - 1;
      if (!rs2.isRound) {
        rs2.midX = rs2.segpts[_i2];
        rs2.midY = rs2.segpts[_i2 + 1];
      } else {
        var point = {
          x: rs2.segpts[_i2],
          y: rs2.segpts[_i2 + 1]
        };
        var corner = rs2.roundCorners[_i2 / 2];
        if (corner.radius === 0) {
          var nextPoint = {
            x: rs2.segpts[_i2 + 2],
            y: rs2.segpts[_i2 + 3]
          };
          rs2.midX = point.x;
          rs2.midY = point.y;
          rs2.midVector = [point.y - nextPoint.y, nextPoint.x - point.x];
        } else {
          var v3 = [point.x - corner.cx, point.y - corner.cy];
          var factor = corner.radius / Math.sqrt(Math.pow(v3[0], 2) + Math.pow(v3[1], 2));
          v3 = v3.map(function(c2) {
            return c2 * factor;
          });
          rs2.midX = corner.cx + v3[0];
          rs2.midY = corner.cy + v3[1];
          rs2.midVector = v3;
        }
      }
    }
  }
};
BRp$c.checkForInvalidEdgeWarning = function(edge) {
  var rs2 = edge[0]._private.rscratch;
  if (rs2.nodesOverlap || number$1(rs2.startX) && number$1(rs2.startY) && number$1(rs2.endX) && number$1(rs2.endY)) {
    rs2.loggedErr = false;
  } else {
    if (!rs2.loggedErr) {
      rs2.loggedErr = true;
      warn("Edge `" + edge.id() + "` has invalid endpoints and so it is impossible to draw.  Adjust your edge style (e.g. control points) accordingly or use an alternative edge type.  This is expected behaviour when the source node and the target node overlap.");
    }
  }
};
BRp$c.findEdgeControlPoints = function(edges3) {
  var _this = this;
  if (!edges3 || edges3.length === 0) {
    return;
  }
  var r2 = this;
  var cy = r2.cy;
  var hasCompounds = cy.hasCompoundNodes();
  var hashTable = new Map$1();
  var getKey3 = function getKey4(pairId2, edgeIsUnbundled2) {
    return [].concat(_toConsumableArray(pairId2), [edgeIsUnbundled2 ? 1 : 0]).join("-");
  };
  var pairIds = [];
  var haystackEdges = [];
  for (var i2 = 0; i2 < edges3.length; i2++) {
    var edge = edges3[i2];
    var _p = edge._private;
    var curveStyle = edge.pstyle("curve-style").value;
    if (edge.removed() || !edge.takesUpSpace()) {
      continue;
    }
    if (curveStyle === "haystack") {
      haystackEdges.push(edge);
      continue;
    }
    var edgeIsUnbundled = curveStyle === "unbundled-bezier" || endsWith(curveStyle, "segments") || curveStyle === "straight" || curveStyle === "straight-triangle" || endsWith(curveStyle, "taxi");
    var edgeIsBezier = curveStyle === "unbundled-bezier" || curveStyle === "bezier";
    var src = _p.source;
    var tgt = _p.target;
    var srcIndex = src.poolIndex();
    var tgtIndex = tgt.poolIndex();
    var pairId = [srcIndex, tgtIndex].sort();
    var key = getKey3(pairId, edgeIsUnbundled);
    var tableEntry = hashTable.get(key);
    if (tableEntry == null) {
      tableEntry = {
        eles: []
      };
      pairIds.push({
        pairId,
        edgeIsUnbundled
      });
      hashTable.set(key, tableEntry);
    }
    tableEntry.eles.push(edge);
    if (edgeIsUnbundled) {
      tableEntry.hasUnbundled = true;
    }
    if (edgeIsBezier) {
      tableEntry.hasBezier = true;
    }
  }
  var _loop = function _loop2() {
    var _pairIds$p = pairIds[p3], pairId2 = _pairIds$p.pairId, edgeIsUnbundled2 = _pairIds$p.edgeIsUnbundled;
    var key2 = getKey3(pairId2, edgeIsUnbundled2);
    var pairInfo = hashTable.get(key2);
    var swappedpairInfo;
    if (!pairInfo.hasUnbundled) {
      var pllEdges = pairInfo.eles[0].parallelEdges().filter(function(e) {
        return e.isBundledBezier();
      });
      clearArray(pairInfo.eles);
      pllEdges.forEach(function(edge2) {
        return pairInfo.eles.push(edge2);
      });
      pairInfo.eles.sort(function(edge1, edge2) {
        return edge1.poolIndex() - edge2.poolIndex();
      });
    }
    var firstEdge = pairInfo.eles[0];
    var src2 = firstEdge.source();
    var tgt2 = firstEdge.target();
    if (src2.poolIndex() > tgt2.poolIndex()) {
      var temp = src2;
      src2 = tgt2;
      tgt2 = temp;
    }
    var srcPos = pairInfo.srcPos = src2.position();
    var tgtPos = pairInfo.tgtPos = tgt2.position();
    var srcW = pairInfo.srcW = src2.outerWidth();
    var srcH = pairInfo.srcH = src2.outerHeight();
    var tgtW = pairInfo.tgtW = tgt2.outerWidth();
    var tgtH = pairInfo.tgtH = tgt2.outerHeight();
    var srcShape = pairInfo.srcShape = r2.nodeShapes[_this.getNodeShape(src2)];
    var tgtShape = pairInfo.tgtShape = r2.nodeShapes[_this.getNodeShape(tgt2)];
    var srcCornerRadius = pairInfo.srcCornerRadius = src2.pstyle("corner-radius").value === "auto" ? "auto" : src2.pstyle("corner-radius").pfValue;
    var tgtCornerRadius = pairInfo.tgtCornerRadius = tgt2.pstyle("corner-radius").value === "auto" ? "auto" : tgt2.pstyle("corner-radius").pfValue;
    var tgtRs = pairInfo.tgtRs = tgt2._private.rscratch;
    var srcRs = pairInfo.srcRs = src2._private.rscratch;
    pairInfo.dirCounts = {
      "north": 0,
      "west": 0,
      "south": 0,
      "east": 0,
      "northwest": 0,
      "southwest": 0,
      "northeast": 0,
      "southeast": 0
    };
    for (var _i2 = 0; _i2 < pairInfo.eles.length; _i2++) {
      var _edge = pairInfo.eles[_i2];
      var rs2 = _edge[0]._private.rscratch;
      var _curveStyle = _edge.pstyle("curve-style").value;
      var _edgeIsUnbundled = _curveStyle === "unbundled-bezier" || endsWith(_curveStyle, "segments") || endsWith(_curveStyle, "taxi");
      var edgeIsSwapped = !src2.same(_edge.source());
      if (!pairInfo.calculatedIntersection && src2 !== tgt2 && (pairInfo.hasBezier || pairInfo.hasUnbundled)) {
        pairInfo.calculatedIntersection = true;
        var srcOutside = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, tgtPos.x, tgtPos.y, 0, srcCornerRadius, srcRs);
        var srcIntn = pairInfo.srcIntn = srcOutside;
        var tgtOutside = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, srcPos.x, srcPos.y, 0, tgtCornerRadius, tgtRs);
        var tgtIntn = pairInfo.tgtIntn = tgtOutside;
        var intersectionPts = pairInfo.intersectionPts = {
          x1: srcOutside[0],
          x2: tgtOutside[0],
          y1: srcOutside[1],
          y2: tgtOutside[1]
        };
        var posPts = pairInfo.posPts = {
          x1: srcPos.x,
          x2: tgtPos.x,
          y1: srcPos.y,
          y2: tgtPos.y
        };
        var dy = tgtOutside[1] - srcOutside[1];
        var dx = tgtOutside[0] - srcOutside[0];
        var l2 = Math.sqrt(dx * dx + dy * dy);
        if (number$1(l2) && l2 >= AVOID_IMPOSSIBLE_BEZIER_CONSTANT_L) ;
        else {
          l2 = Math.sqrt(Math.max(dx * dx, AVOID_IMPOSSIBLE_BEZIER_CONSTANT) + Math.max(dy * dy, AVOID_IMPOSSIBLE_BEZIER_CONSTANT));
        }
        var vector = pairInfo.vector = {
          x: dx,
          y: dy
        };
        var vectorNorm = pairInfo.vectorNorm = {
          x: vector.x / l2,
          y: vector.y / l2
        };
        var vectorNormInverse = {
          x: -vectorNorm.y,
          y: vectorNorm.x
        };
        pairInfo.nodesOverlap = !number$1(l2) || tgtShape.checkPoint(srcOutside[0], srcOutside[1], 0, tgtW, tgtH, tgtPos.x, tgtPos.y, tgtCornerRadius, tgtRs) || srcShape.checkPoint(tgtOutside[0], tgtOutside[1], 0, srcW, srcH, srcPos.x, srcPos.y, srcCornerRadius, srcRs);
        pairInfo.vectorNormInverse = vectorNormInverse;
        swappedpairInfo = {
          nodesOverlap: pairInfo.nodesOverlap,
          dirCounts: pairInfo.dirCounts,
          calculatedIntersection: true,
          hasBezier: pairInfo.hasBezier,
          hasUnbundled: pairInfo.hasUnbundled,
          eles: pairInfo.eles,
          srcPos: tgtPos,
          srcRs: tgtRs,
          tgtPos: srcPos,
          tgtRs: srcRs,
          srcW: tgtW,
          srcH: tgtH,
          tgtW: srcW,
          tgtH: srcH,
          srcIntn: tgtIntn,
          tgtIntn: srcIntn,
          srcShape: tgtShape,
          tgtShape: srcShape,
          posPts: {
            x1: posPts.x2,
            y1: posPts.y2,
            x2: posPts.x1,
            y2: posPts.y1
          },
          intersectionPts: {
            x1: intersectionPts.x2,
            y1: intersectionPts.y2,
            x2: intersectionPts.x1,
            y2: intersectionPts.y1
          },
          vector: {
            x: -vector.x,
            y: -vector.y
          },
          vectorNorm: {
            x: -vectorNorm.x,
            y: -vectorNorm.y
          },
          vectorNormInverse: {
            x: -vectorNormInverse.x,
            y: -vectorNormInverse.y
          }
        };
      }
      var passedPairInfo = edgeIsSwapped ? swappedpairInfo : pairInfo;
      rs2.nodesOverlap = passedPairInfo.nodesOverlap;
      rs2.srcIntn = passedPairInfo.srcIntn;
      rs2.tgtIntn = passedPairInfo.tgtIntn;
      rs2.isRound = _curveStyle.startsWith("round");
      if (hasCompounds && (src2.isParent() || src2.isChild() || tgt2.isParent() || tgt2.isChild()) && (src2.parents().anySame(tgt2) || tgt2.parents().anySame(src2) || src2.same(tgt2) && src2.isParent())) {
        _this.findCompoundLoopPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled);
      } else if (src2 === tgt2) {
        _this.findLoopPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled);
      } else if (_curveStyle.endsWith("segments")) {
        _this.findSegmentsPoints(_edge, passedPairInfo);
      } else if (_curveStyle.endsWith("taxi")) {
        _this.findTaxiPoints(_edge, passedPairInfo);
      } else if (_curveStyle === "straight" || !_edgeIsUnbundled && pairInfo.eles.length % 2 === 1 && _i2 === Math.floor(pairInfo.eles.length / 2)) {
        _this.findStraightEdgePoints(_edge);
      } else {
        _this.findBezierPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled, edgeIsSwapped);
      }
      _this.findEndpoints(_edge);
      _this.tryToCorrectInvalidPoints(_edge, passedPairInfo);
      _this.checkForInvalidEdgeWarning(_edge);
      _this.storeAllpts(_edge);
      _this.storeEdgeProjections(_edge);
      _this.calculateArrowAngles(_edge);
      _this.recalculateEdgeLabelProjections(_edge);
      _this.calculateLabelAngles(_edge);
    }
  };
  for (var p3 = 0; p3 < pairIds.length; p3++) {
    _loop();
  }
  this.findHaystackPoints(haystackEdges);
};
function getPts(pts2) {
  var retPts = [];
  if (pts2 == null) {
    return;
  }
  for (var i2 = 0; i2 < pts2.length; i2 += 2) {
    var x3 = pts2[i2];
    var y3 = pts2[i2 + 1];
    retPts.push({
      x: x3,
      y: y3
    });
  }
  return retPts;
}
BRp$c.getSegmentPoints = function(edge) {
  var rs2 = edge[0]._private.rscratch;
  this.recalculateRenderedStyle(edge);
  var type2 = rs2.edgeType;
  if (type2 === "segments") {
    return getPts(rs2.segpts);
  }
};
BRp$c.getControlPoints = function(edge) {
  var rs2 = edge[0]._private.rscratch;
  this.recalculateRenderedStyle(edge);
  var type2 = rs2.edgeType;
  if (type2 === "bezier" || type2 === "multibezier" || type2 === "self" || type2 === "compound") {
    return getPts(rs2.ctrlpts);
  }
};
BRp$c.getEdgeMidpoint = function(edge) {
  var rs2 = edge[0]._private.rscratch;
  this.recalculateRenderedStyle(edge);
  return {
    x: rs2.midX,
    y: rs2.midY
  };
};
var BRp$b = {};
BRp$b.manualEndptToPx = function(node, prop) {
  var r2 = this;
  var npos = node.position();
  var w2 = node.outerWidth();
  var h2 = node.outerHeight();
  var rs2 = node._private.rscratch;
  if (prop.value.length === 2) {
    var p3 = [prop.pfValue[0], prop.pfValue[1]];
    if (prop.units[0] === "%") {
      p3[0] = p3[0] * w2;
    }
    if (prop.units[1] === "%") {
      p3[1] = p3[1] * h2;
    }
    p3[0] += npos.x;
    p3[1] += npos.y;
    return p3;
  } else {
    var angle2 = prop.pfValue[0];
    angle2 = -Math.PI / 2 + angle2;
    var l2 = 2 * Math.max(w2, h2);
    var _p = [npos.x + Math.cos(angle2) * l2, npos.y + Math.sin(angle2) * l2];
    return r2.nodeShapes[this.getNodeShape(node)].intersectLine(npos.x, npos.y, w2, h2, _p[0], _p[1], 0, node.pstyle("corner-radius").value === "auto" ? "auto" : node.pstyle("corner-radius").pfValue, rs2);
  }
};
BRp$b.findEndpoints = function(edge) {
  var _ref, _tgtManEndpt$pfValue, _ref2, _srcManEndpt$pfValue;
  var r2 = this;
  var intersect2;
  var source = edge.source()[0];
  var target = edge.target()[0];
  var srcPos = source.position();
  var tgtPos = target.position();
  var tgtArShape = edge.pstyle("target-arrow-shape").value;
  var srcArShape = edge.pstyle("source-arrow-shape").value;
  var tgtDist = edge.pstyle("target-distance-from-node").pfValue;
  var srcDist = edge.pstyle("source-distance-from-node").pfValue;
  var srcRs = source._private.rscratch;
  var tgtRs = target._private.rscratch;
  var curveStyle = edge.pstyle("curve-style").value;
  var rs2 = edge._private.rscratch;
  var et2 = rs2.edgeType;
  var taxi = endsWith(curveStyle, "taxi");
  var self2 = et2 === "self" || et2 === "compound";
  var bezier = et2 === "bezier" || et2 === "multibezier" || self2;
  var multi = et2 !== "bezier";
  var lines = et2 === "straight" || et2 === "segments";
  var segments = et2 === "segments";
  var hasEndpts = bezier || multi || lines;
  var overrideEndpts = self2 || taxi;
  var srcManEndpt = edge.pstyle("source-endpoint");
  var srcManEndptVal = overrideEndpts ? "outside-to-node" : srcManEndpt.value;
  var srcCornerRadius = source.pstyle("corner-radius").value === "auto" ? "auto" : source.pstyle("corner-radius").pfValue;
  var tgtManEndpt = edge.pstyle("target-endpoint");
  var tgtManEndptVal = overrideEndpts ? "outside-to-node" : tgtManEndpt.value;
  var tgtCornerRadius = target.pstyle("corner-radius").value === "auto" ? "auto" : target.pstyle("corner-radius").pfValue;
  rs2.srcManEndpt = srcManEndpt;
  rs2.tgtManEndpt = tgtManEndpt;
  var p1;
  var p22;
  var p1_i;
  var p2_i;
  var tgtManEndptPt = (_ref = (tgtManEndpt === null || tgtManEndpt === void 0 || (_tgtManEndpt$pfValue = tgtManEndpt.pfValue) === null || _tgtManEndpt$pfValue === void 0 ? void 0 : _tgtManEndpt$pfValue.length) === 2 ? tgtManEndpt.pfValue : null) !== null && _ref !== void 0 ? _ref : [0, 0];
  var srcManEndptPt = (_ref2 = (srcManEndpt === null || srcManEndpt === void 0 || (_srcManEndpt$pfValue = srcManEndpt.pfValue) === null || _srcManEndpt$pfValue === void 0 ? void 0 : _srcManEndpt$pfValue.length) === 2 ? srcManEndpt.pfValue : null) !== null && _ref2 !== void 0 ? _ref2 : [0, 0];
  if (bezier) {
    var cpStart = [rs2.ctrlpts[0], rs2.ctrlpts[1]];
    var cpEnd = multi ? [rs2.ctrlpts[rs2.ctrlpts.length - 2], rs2.ctrlpts[rs2.ctrlpts.length - 1]] : cpStart;
    p1 = cpEnd;
    p22 = cpStart;
  } else if (lines) {
    var srcArrowFromPt = !segments ? [tgtPos.x + tgtManEndptPt[0], tgtPos.y + tgtManEndptPt[1]] : rs2.segpts.slice(0, 2);
    var tgtArrowFromPt = !segments ? [srcPos.x + srcManEndptPt[0], srcPos.y + srcManEndptPt[1]] : rs2.segpts.slice(rs2.segpts.length - 2);
    p1 = tgtArrowFromPt;
    p22 = srcArrowFromPt;
  }
  if (tgtManEndptVal === "inside-to-node") {
    intersect2 = [tgtPos.x, tgtPos.y];
  } else if (tgtManEndpt.units) {
    intersect2 = this.manualEndptToPx(target, tgtManEndpt);
  } else if (tgtManEndptVal === "outside-to-line") {
    intersect2 = rs2.tgtIntn;
  } else {
    if (tgtManEndptVal === "outside-to-node" || tgtManEndptVal === "outside-to-node-or-label") {
      p1_i = p1;
    } else if (tgtManEndptVal === "outside-to-line" || tgtManEndptVal === "outside-to-line-or-label") {
      p1_i = [srcPos.x, srcPos.y];
    }
    intersect2 = r2.nodeShapes[this.getNodeShape(target)].intersectLine(tgtPos.x, tgtPos.y, target.outerWidth(), target.outerHeight(), p1_i[0], p1_i[1], 0, tgtCornerRadius, tgtRs);
    if (tgtManEndptVal === "outside-to-node-or-label" || tgtManEndptVal === "outside-to-line-or-label") {
      var trs = target._private.rscratch;
      var lw = trs.labelWidth;
      var lh2 = trs.labelHeight;
      var lx = trs.labelX;
      var ly = trs.labelY;
      var lw2 = lw / 2;
      var lh22 = lh2 / 2;
      var va2 = target.pstyle("text-valign").value;
      if (va2 === "top") {
        ly -= lh22;
      } else if (va2 === "bottom") {
        ly += lh22;
      }
      var ha2 = target.pstyle("text-halign").value;
      if (ha2 === "left") {
        lx -= lw2;
      } else if (ha2 === "right") {
        lx += lw2;
      }
      var labelIntersect = polygonIntersectLine(p1_i[0], p1_i[1], [lx - lw2, ly - lh22, lx + lw2, ly - lh22, lx + lw2, ly + lh22, lx - lw2, ly + lh22], tgtPos.x, tgtPos.y);
      if (labelIntersect.length > 0) {
        var refPt = srcPos;
        var intSqdist = sqdist(refPt, array2point(intersect2));
        var labIntSqdist = sqdist(refPt, array2point(labelIntersect));
        var minSqDist = intSqdist;
        if (labIntSqdist < intSqdist) {
          intersect2 = labelIntersect;
          minSqDist = labIntSqdist;
        }
        if (labelIntersect.length > 2) {
          var labInt2SqDist = sqdist(refPt, {
            x: labelIntersect[2],
            y: labelIntersect[3]
          });
          if (labInt2SqDist < minSqDist) {
            intersect2 = [labelIntersect[2], labelIntersect[3]];
          }
        }
      }
    }
  }
  var arrowEnd = shortenIntersection(intersect2, p1, r2.arrowShapes[tgtArShape].spacing(edge) + tgtDist);
  var edgeEnd = shortenIntersection(intersect2, p1, r2.arrowShapes[tgtArShape].gap(edge) + tgtDist);
  rs2.endX = edgeEnd[0];
  rs2.endY = edgeEnd[1];
  rs2.arrowEndX = arrowEnd[0];
  rs2.arrowEndY = arrowEnd[1];
  if (srcManEndptVal === "inside-to-node") {
    intersect2 = [srcPos.x, srcPos.y];
  } else if (srcManEndpt.units) {
    intersect2 = this.manualEndptToPx(source, srcManEndpt);
  } else if (srcManEndptVal === "outside-to-line") {
    intersect2 = rs2.srcIntn;
  } else {
    if (srcManEndptVal === "outside-to-node" || srcManEndptVal === "outside-to-node-or-label") {
      p2_i = p22;
    } else if (srcManEndptVal === "outside-to-line" || srcManEndptVal === "outside-to-line-or-label") {
      p2_i = [tgtPos.x, tgtPos.y];
    }
    intersect2 = r2.nodeShapes[this.getNodeShape(source)].intersectLine(srcPos.x, srcPos.y, source.outerWidth(), source.outerHeight(), p2_i[0], p2_i[1], 0, srcCornerRadius, srcRs);
    if (srcManEndptVal === "outside-to-node-or-label" || srcManEndptVal === "outside-to-line-or-label") {
      var srs = source._private.rscratch;
      var _lw = srs.labelWidth;
      var _lh = srs.labelHeight;
      var _lx = srs.labelX;
      var _ly = srs.labelY;
      var _lw2 = _lw / 2;
      var _lh2 = _lh / 2;
      var _va = source.pstyle("text-valign").value;
      if (_va === "top") {
        _ly -= _lh2;
      } else if (_va === "bottom") {
        _ly += _lh2;
      }
      var _ha = source.pstyle("text-halign").value;
      if (_ha === "left") {
        _lx -= _lw2;
      } else if (_ha === "right") {
        _lx += _lw2;
      }
      var _labelIntersect = polygonIntersectLine(p2_i[0], p2_i[1], [_lx - _lw2, _ly - _lh2, _lx + _lw2, _ly - _lh2, _lx + _lw2, _ly + _lh2, _lx - _lw2, _ly + _lh2], srcPos.x, srcPos.y);
      if (_labelIntersect.length > 0) {
        var _refPt = tgtPos;
        var _intSqdist = sqdist(_refPt, array2point(intersect2));
        var _labIntSqdist = sqdist(_refPt, array2point(_labelIntersect));
        var _minSqDist = _intSqdist;
        if (_labIntSqdist < _intSqdist) {
          intersect2 = [_labelIntersect[0], _labelIntersect[1]];
          _minSqDist = _labIntSqdist;
        }
        if (_labelIntersect.length > 2) {
          var _labInt2SqDist = sqdist(_refPt, {
            x: _labelIntersect[2],
            y: _labelIntersect[3]
          });
          if (_labInt2SqDist < _minSqDist) {
            intersect2 = [_labelIntersect[2], _labelIntersect[3]];
          }
        }
      }
    }
  }
  var arrowStart = shortenIntersection(intersect2, p22, r2.arrowShapes[srcArShape].spacing(edge) + srcDist);
  var edgeStart = shortenIntersection(intersect2, p22, r2.arrowShapes[srcArShape].gap(edge) + srcDist);
  rs2.startX = edgeStart[0];
  rs2.startY = edgeStart[1];
  rs2.arrowStartX = arrowStart[0];
  rs2.arrowStartY = arrowStart[1];
  if (hasEndpts) {
    if (!number$1(rs2.startX) || !number$1(rs2.startY) || !number$1(rs2.endX) || !number$1(rs2.endY)) {
      rs2.badLine = true;
    } else {
      rs2.badLine = false;
    }
  }
};
BRp$b.getSourceEndpoint = function(edge) {
  var rs2 = edge[0]._private.rscratch;
  this.recalculateRenderedStyle(edge);
  switch (rs2.edgeType) {
    case "haystack":
      return {
        x: rs2.haystackPts[0],
        y: rs2.haystackPts[1]
      };
    default:
      return {
        x: rs2.arrowStartX,
        y: rs2.arrowStartY
      };
  }
};
BRp$b.getTargetEndpoint = function(edge) {
  var rs2 = edge[0]._private.rscratch;
  this.recalculateRenderedStyle(edge);
  switch (rs2.edgeType) {
    case "haystack":
      return {
        x: rs2.haystackPts[2],
        y: rs2.haystackPts[3]
      };
    default:
      return {
        x: rs2.arrowEndX,
        y: rs2.arrowEndY
      };
  }
};
var BRp$a = {};
function pushBezierPts(r2, edge, pts2) {
  var qbezierAt$1 = function qbezierAt$12(p1, p22, p32, t) {
    return qbezierAt(p1, p22, p32, t);
  };
  var _p = edge._private;
  var bpts = _p.rstyle.bezierPts;
  for (var i2 = 0; i2 < r2.bezierProjPcts.length; i2++) {
    var p3 = r2.bezierProjPcts[i2];
    bpts.push({
      x: qbezierAt$1(pts2[0], pts2[2], pts2[4], p3),
      y: qbezierAt$1(pts2[1], pts2[3], pts2[5], p3)
    });
  }
}
BRp$a.storeEdgeProjections = function(edge) {
  var _p = edge._private;
  var rs2 = _p.rscratch;
  var et2 = rs2.edgeType;
  _p.rstyle.bezierPts = null;
  _p.rstyle.linePts = null;
  _p.rstyle.haystackPts = null;
  if (et2 === "multibezier" || et2 === "bezier" || et2 === "self" || et2 === "compound") {
    _p.rstyle.bezierPts = [];
    for (var i2 = 0; i2 + 5 < rs2.allpts.length; i2 += 4) {
      pushBezierPts(this, edge, rs2.allpts.slice(i2, i2 + 6));
    }
  } else if (et2 === "segments") {
    var lpts = _p.rstyle.linePts = [];
    for (var i2 = 0; i2 + 1 < rs2.allpts.length; i2 += 2) {
      lpts.push({
        x: rs2.allpts[i2],
        y: rs2.allpts[i2 + 1]
      });
    }
  } else if (et2 === "haystack") {
    var hpts = rs2.haystackPts;
    _p.rstyle.haystackPts = [{
      x: hpts[0],
      y: hpts[1]
    }, {
      x: hpts[2],
      y: hpts[3]
    }];
  }
  _p.rstyle.arrowWidth = this.getArrowWidth(edge.pstyle("width").pfValue, edge.pstyle("arrow-scale").value) * this.arrowShapeWidth;
};
BRp$a.recalculateEdgeProjections = function(edges3) {
  this.findEdgeControlPoints(edges3);
};
var BRp$9 = {};
BRp$9.recalculateNodeLabelProjection = function(node) {
  var content = node.pstyle("label").strValue;
  if (emptyString(content)) {
    return;
  }
  var textX, textY;
  var _p = node._private;
  var nodeWidth = node.width();
  var nodeHeight = node.height();
  var padding = node.padding();
  var nodePos = node.position();
  var textHalign = node.pstyle("text-halign").strValue;
  var textValign = node.pstyle("text-valign").strValue;
  var rs2 = _p.rscratch;
  var rstyle = _p.rstyle;
  switch (textHalign) {
    case "left":
      textX = nodePos.x - nodeWidth / 2 - padding;
      break;
    case "right":
      textX = nodePos.x + nodeWidth / 2 + padding;
      break;
    default:
      textX = nodePos.x;
  }
  switch (textValign) {
    case "top":
      textY = nodePos.y - nodeHeight / 2 - padding;
      break;
    case "bottom":
      textY = nodePos.y + nodeHeight / 2 + padding;
      break;
    default:
      textY = nodePos.y;
  }
  rs2.labelX = textX;
  rs2.labelY = textY;
  rstyle.labelX = textX;
  rstyle.labelY = textY;
  this.calculateLabelAngles(node);
  this.applyLabelDimensions(node);
};
var lineAngleFromDelta = function lineAngleFromDelta2(dx, dy) {
  var angle2 = Math.atan(dy / dx);
  if (dx === 0 && angle2 < 0) {
    angle2 = angle2 * -1;
  }
  return angle2;
};
var lineAngle = function lineAngle2(p0, p1) {
  var dx = p1.x - p0.x;
  var dy = p1.y - p0.y;
  return lineAngleFromDelta(dx, dy);
};
var bezierAngle = function bezierAngle2(p0, p1, p22, t) {
  var t0 = bound(0, t - 1e-3, 1);
  var t1 = bound(0, t + 1e-3, 1);
  var lp0 = qbezierPtAt(p0, p1, p22, t0);
  var lp1 = qbezierPtAt(p0, p1, p22, t1);
  return lineAngle(lp0, lp1);
};
BRp$9.recalculateEdgeLabelProjections = function(edge) {
  var p3;
  var _p = edge._private;
  var rs2 = _p.rscratch;
  var r2 = this;
  var content = {
    mid: edge.pstyle("label").strValue,
    source: edge.pstyle("source-label").strValue,
    target: edge.pstyle("target-label").strValue
  };
  if (content.mid || content.source || content.target) ;
  else {
    return;
  }
  p3 = {
    x: rs2.midX,
    y: rs2.midY
  };
  var setRs = function setRs2(propName, prefix, value) {
    setPrefixedProperty(_p.rscratch, propName, prefix, value);
    setPrefixedProperty(_p.rstyle, propName, prefix, value);
  };
  setRs("labelX", null, p3.x);
  setRs("labelY", null, p3.y);
  var midAngle = lineAngleFromDelta(rs2.midDispX, rs2.midDispY);
  setRs("labelAutoAngle", null, midAngle);
  var _createControlPointInfo = function createControlPointInfo() {
    if (_createControlPointInfo.cache) {
      return _createControlPointInfo.cache;
    }
    var ctrlpts = [];
    for (var i2 = 0; i2 + 5 < rs2.allpts.length; i2 += 4) {
      var p0 = {
        x: rs2.allpts[i2],
        y: rs2.allpts[i2 + 1]
      };
      var p1 = {
        x: rs2.allpts[i2 + 2],
        y: rs2.allpts[i2 + 3]
      };
      var p22 = {
        x: rs2.allpts[i2 + 4],
        y: rs2.allpts[i2 + 5]
      };
      ctrlpts.push({
        p0,
        p1,
        p2: p22,
        startDist: 0,
        length: 0,
        segments: []
      });
    }
    var bpts = _p.rstyle.bezierPts;
    var nProjs = r2.bezierProjPcts.length;
    function addSegment(cp2, p02, p12, t0, t1) {
      var length = dist(p02, p12);
      var prevSegment = cp2.segments[cp2.segments.length - 1];
      var segment = {
        p0: p02,
        p1: p12,
        t0,
        t1,
        startDist: prevSegment ? prevSegment.startDist + prevSegment.length : 0,
        length
      };
      cp2.segments.push(segment);
      cp2.length += length;
    }
    for (var _i2 = 0; _i2 < ctrlpts.length; _i2++) {
      var cp = ctrlpts[_i2];
      var prevCp = ctrlpts[_i2 - 1];
      if (prevCp) {
        cp.startDist = prevCp.startDist + prevCp.length;
      }
      addSegment(cp, cp.p0, bpts[_i2 * nProjs], 0, r2.bezierProjPcts[0]);
      for (var j2 = 0; j2 < nProjs - 1; j2++) {
        addSegment(cp, bpts[_i2 * nProjs + j2], bpts[_i2 * nProjs + j2 + 1], r2.bezierProjPcts[j2], r2.bezierProjPcts[j2 + 1]);
      }
      addSegment(cp, bpts[_i2 * nProjs + nProjs - 1], cp.p2, r2.bezierProjPcts[nProjs - 1], 1);
    }
    return _createControlPointInfo.cache = ctrlpts;
  };
  var calculateEndProjection = function calculateEndProjection2(prefix) {
    var angle2;
    var isSrc = prefix === "source";
    if (!content[prefix]) {
      return;
    }
    var offset = edge.pstyle(prefix + "-text-offset").pfValue;
    switch (rs2.edgeType) {
      case "self":
      case "compound":
      case "bezier":
      case "multibezier": {
        var cps = _createControlPointInfo();
        var selected;
        var startDist = 0;
        var totalDist = 0;
        for (var i2 = 0; i2 < cps.length; i2++) {
          var _cp = cps[isSrc ? i2 : cps.length - 1 - i2];
          for (var j2 = 0; j2 < _cp.segments.length; j2++) {
            var _seg = _cp.segments[isSrc ? j2 : _cp.segments.length - 1 - j2];
            var lastSeg = i2 === cps.length - 1 && j2 === _cp.segments.length - 1;
            startDist = totalDist;
            totalDist += _seg.length;
            if (totalDist >= offset || lastSeg) {
              selected = {
                cp: _cp,
                segment: _seg
              };
              break;
            }
          }
          if (selected) {
            break;
          }
        }
        var cp = selected.cp;
        var seg = selected.segment;
        var tSegment = (offset - startDist) / seg.length;
        var segDt = seg.t1 - seg.t0;
        var t = isSrc ? seg.t0 + segDt * tSegment : seg.t1 - segDt * tSegment;
        t = bound(0, t, 1);
        p3 = qbezierPtAt(cp.p0, cp.p1, cp.p2, t);
        angle2 = bezierAngle(cp.p0, cp.p1, cp.p2, t);
        break;
      }
      case "straight":
      case "segments":
      case "haystack": {
        var d2 = 0, di2, d0;
        var p0, p1;
        var l2 = rs2.allpts.length;
        for (var _i2 = 0; _i2 + 3 < l2; _i2 += 2) {
          if (isSrc) {
            p0 = {
              x: rs2.allpts[_i2],
              y: rs2.allpts[_i2 + 1]
            };
            p1 = {
              x: rs2.allpts[_i2 + 2],
              y: rs2.allpts[_i2 + 3]
            };
          } else {
            p0 = {
              x: rs2.allpts[l2 - 2 - _i2],
              y: rs2.allpts[l2 - 1 - _i2]
            };
            p1 = {
              x: rs2.allpts[l2 - 4 - _i2],
              y: rs2.allpts[l2 - 3 - _i2]
            };
          }
          di2 = dist(p0, p1);
          d0 = d2;
          d2 += di2;
          if (d2 >= offset) {
            break;
          }
        }
        var pD = offset - d0;
        var _t2 = pD / di2;
        _t2 = bound(0, _t2, 1);
        p3 = lineAt(p0, p1, _t2);
        angle2 = lineAngle(p0, p1);
        break;
      }
    }
    setRs("labelX", prefix, p3.x);
    setRs("labelY", prefix, p3.y);
    setRs("labelAutoAngle", prefix, angle2);
  };
  calculateEndProjection("source");
  calculateEndProjection("target");
  this.applyLabelDimensions(edge);
};
BRp$9.applyLabelDimensions = function(ele) {
  this.applyPrefixedLabelDimensions(ele);
  if (ele.isEdge()) {
    this.applyPrefixedLabelDimensions(ele, "source");
    this.applyPrefixedLabelDimensions(ele, "target");
  }
};
BRp$9.applyPrefixedLabelDimensions = function(ele, prefix) {
  var _p = ele._private;
  var text = this.getLabelText(ele, prefix);
  var cacheKey = hashString(text, ele._private.labelDimsKey);
  if (getPrefixedProperty(_p.rscratch, "prefixedLabelDimsKey", prefix) === cacheKey) {
    return;
  }
  setPrefixedProperty(_p.rscratch, "prefixedLabelDimsKey", prefix, cacheKey);
  var labelDims = this.calculateLabelDimensions(ele, text);
  var lineHeight = ele.pstyle("line-height").pfValue;
  var textWrap = ele.pstyle("text-wrap").strValue;
  var lines = getPrefixedProperty(_p.rscratch, "labelWrapCachedLines", prefix) || [];
  var numLines = textWrap !== "wrap" ? 1 : Math.max(lines.length, 1);
  var normPerLineHeight = labelDims.height / numLines;
  var labelLineHeight = normPerLineHeight * lineHeight;
  var width2 = labelDims.width;
  var height2 = labelDims.height + (numLines - 1) * (lineHeight - 1) * normPerLineHeight;
  setPrefixedProperty(_p.rstyle, "labelWidth", prefix, width2);
  setPrefixedProperty(_p.rscratch, "labelWidth", prefix, width2);
  setPrefixedProperty(_p.rstyle, "labelHeight", prefix, height2);
  setPrefixedProperty(_p.rscratch, "labelHeight", prefix, height2);
  setPrefixedProperty(_p.rscratch, "labelLineHeight", prefix, labelLineHeight);
};
BRp$9.getLabelText = function(ele, prefix) {
  var _p = ele._private;
  var pfd = prefix ? prefix + "-" : "";
  var text = ele.pstyle(pfd + "label").strValue;
  var textTransform = ele.pstyle("text-transform").value;
  var rscratch = function rscratch2(propName, value) {
    if (value) {
      setPrefixedProperty(_p.rscratch, propName, prefix, value);
      return value;
    } else {
      return getPrefixedProperty(_p.rscratch, propName, prefix);
    }
  };
  if (!text) {
    return "";
  }
  if (textTransform == "none") ;
  else if (textTransform == "uppercase") {
    text = text.toUpperCase();
  } else if (textTransform == "lowercase") {
    text = text.toLowerCase();
  }
  var wrapStyle = ele.pstyle("text-wrap").value;
  if (wrapStyle === "wrap") {
    var labelKey = rscratch("labelKey");
    if (labelKey != null && rscratch("labelWrapKey") === labelKey) {
      return rscratch("labelWrapCachedText");
    }
    var zwsp = "​";
    var lines = text.split("\n");
    var maxW = ele.pstyle("text-max-width").pfValue;
    var overflow = ele.pstyle("text-overflow-wrap").value;
    var overflowAny = overflow === "anywhere";
    var wrappedLines = [];
    var separatorRegex = /[\s\u200b]+|$/g;
    for (var l2 = 0; l2 < lines.length; l2++) {
      var line = lines[l2];
      var lineDims = this.calculateLabelDimensions(ele, line);
      var lineW = lineDims.width;
      if (overflowAny) {
        var processedLine = line.split("").join(zwsp);
        line = processedLine;
      }
      if (lineW > maxW) {
        var separatorMatches = line.matchAll(separatorRegex);
        var subline = "";
        var previousIndex = 0;
        var _iterator = _createForOfIteratorHelper(separatorMatches), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var separatorMatch = _step.value;
            var wordSeparator = separatorMatch[0];
            var word = line.substring(previousIndex, separatorMatch.index);
            previousIndex = separatorMatch.index + wordSeparator.length;
            var testLine = subline.length === 0 ? word : subline + word + wordSeparator;
            var testDims = this.calculateLabelDimensions(ele, testLine);
            var testW = testDims.width;
            if (testW <= maxW) {
              subline += word + wordSeparator;
            } else {
              if (subline) {
                wrappedLines.push(subline);
              }
              subline = word + wordSeparator;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        if (!subline.match(/^[\s\u200b]+$/)) {
          wrappedLines.push(subline);
        }
      } else {
        wrappedLines.push(line);
      }
    }
    rscratch("labelWrapCachedLines", wrappedLines);
    text = rscratch("labelWrapCachedText", wrappedLines.join("\n"));
    rscratch("labelWrapKey", labelKey);
  } else if (wrapStyle === "ellipsis") {
    var _maxW = ele.pstyle("text-max-width").pfValue;
    var ellipsized = "";
    var ellipsis = "…";
    var incLastCh = false;
    if (this.calculateLabelDimensions(ele, text).width < _maxW) {
      return text;
    }
    for (var i2 = 0; i2 < text.length; i2++) {
      var widthWithNextCh = this.calculateLabelDimensions(ele, ellipsized + text[i2] + ellipsis).width;
      if (widthWithNextCh > _maxW) {
        break;
      }
      ellipsized += text[i2];
      if (i2 === text.length - 1) {
        incLastCh = true;
      }
    }
    if (!incLastCh) {
      ellipsized += ellipsis;
    }
    return ellipsized;
  }
  return text;
};
BRp$9.getLabelJustification = function(ele) {
  var justification = ele.pstyle("text-justification").strValue;
  var textHalign = ele.pstyle("text-halign").strValue;
  if (justification === "auto") {
    if (ele.isNode()) {
      switch (textHalign) {
        case "left":
          return "right";
        case "right":
          return "left";
        default:
          return "center";
      }
    } else {
      return "center";
    }
  } else {
    return justification;
  }
};
BRp$9.calculateLabelDimensions = function(ele, text) {
  var r2 = this;
  var containerWindow = r2.cy.window();
  var document2 = containerWindow.document;
  var padding = 0;
  var fStyle = ele.pstyle("font-style").strValue;
  var size3 = ele.pstyle("font-size").pfValue;
  var family = ele.pstyle("font-family").strValue;
  var weight8 = ele.pstyle("font-weight").strValue;
  var canvas = this.labelCalcCanvas;
  var c2d = this.labelCalcCanvasContext;
  if (!canvas) {
    canvas = this.labelCalcCanvas = document2.createElement("canvas");
    c2d = this.labelCalcCanvasContext = canvas.getContext("2d");
    var ds2 = canvas.style;
    ds2.position = "absolute";
    ds2.left = "-9999px";
    ds2.top = "-9999px";
    ds2.zIndex = "-1";
    ds2.visibility = "hidden";
    ds2.pointerEvents = "none";
  }
  c2d.font = "".concat(fStyle, " ").concat(weight8, " ").concat(size3, "px ").concat(family);
  var width2 = 0;
  var height2 = 0;
  var lines = text.split("\n");
  for (var i2 = 0; i2 < lines.length; i2++) {
    var line = lines[i2];
    var metrics = c2d.measureText(line);
    var w2 = Math.ceil(metrics.width);
    var h2 = size3;
    width2 = Math.max(w2, width2);
    height2 += h2;
  }
  width2 += padding;
  height2 += padding;
  return {
    width: width2,
    height: height2
  };
};
BRp$9.calculateLabelAngle = function(ele, prefix) {
  var _p = ele._private;
  var rs2 = _p.rscratch;
  var isEdge2 = ele.isEdge();
  var prefixDash = prefix ? prefix + "-" : "";
  var rot = ele.pstyle(prefixDash + "text-rotation");
  var rotStr = rot.strValue;
  if (rotStr === "none") {
    return 0;
  } else if (isEdge2 && rotStr === "autorotate") {
    return rs2.labelAutoAngle;
  } else if (rotStr === "autorotate") {
    return 0;
  } else {
    return rot.pfValue;
  }
};
BRp$9.calculateLabelAngles = function(ele) {
  var r2 = this;
  var isEdge2 = ele.isEdge();
  var _p = ele._private;
  var rs2 = _p.rscratch;
  rs2.labelAngle = r2.calculateLabelAngle(ele);
  if (isEdge2) {
    rs2.sourceLabelAngle = r2.calculateLabelAngle(ele, "source");
    rs2.targetLabelAngle = r2.calculateLabelAngle(ele, "target");
  }
};
var BRp$8 = {};
var TOO_SMALL_CUT_RECT = 28;
var warnedCutRect = false;
BRp$8.getNodeShape = function(node) {
  var r2 = this;
  var shape = node.pstyle("shape").value;
  if (shape === "cutrectangle" && (node.width() < TOO_SMALL_CUT_RECT || node.height() < TOO_SMALL_CUT_RECT)) {
    if (!warnedCutRect) {
      warn("The `cutrectangle` node shape can not be used at small sizes so `rectangle` is used instead");
      warnedCutRect = true;
    }
    return "rectangle";
  }
  if (node.isParent()) {
    if (shape === "rectangle" || shape === "roundrectangle" || shape === "round-rectangle" || shape === "cutrectangle" || shape === "cut-rectangle" || shape === "barrel") {
      return shape;
    } else {
      return "rectangle";
    }
  }
  if (shape === "polygon") {
    var points = node.pstyle("shape-polygon-points").value;
    return r2.nodeShapes.makePolygon(points).name;
  }
  return shape;
};
var BRp$7 = {};
BRp$7.registerCalculationListeners = function() {
  var cy = this.cy;
  var elesToUpdate = cy.collection();
  var r2 = this;
  var enqueue = function enqueue2(eles) {
    var dirtyStyleCaches = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    elesToUpdate.merge(eles);
    if (dirtyStyleCaches) {
      for (var i2 = 0; i2 < eles.length; i2++) {
        var ele = eles[i2];
        var _p = ele._private;
        var rstyle = _p.rstyle;
        rstyle.clean = false;
        rstyle.cleanConnected = false;
      }
    }
  };
  r2.binder(cy).on("bounds.* dirty.*", function onDirtyBounds(e) {
    var ele = e.target;
    enqueue(ele);
  }).on("style.* background.*", function onDirtyStyle(e) {
    var ele = e.target;
    enqueue(ele, false);
  });
  var updateEleCalcs = function updateEleCalcs2(willDraw) {
    if (willDraw) {
      var fns = r2.onUpdateEleCalcsFns;
      elesToUpdate.cleanStyle();
      for (var i2 = 0; i2 < elesToUpdate.length; i2++) {
        var ele = elesToUpdate[i2];
        var rstyle = ele._private.rstyle;
        if (ele.isNode() && !rstyle.cleanConnected) {
          enqueue(ele.connectedEdges());
          rstyle.cleanConnected = true;
        }
      }
      if (fns) {
        for (var _i2 = 0; _i2 < fns.length; _i2++) {
          var fn4 = fns[_i2];
          fn4(willDraw, elesToUpdate);
        }
      }
      r2.recalculateRenderedStyle(elesToUpdate);
      elesToUpdate = cy.collection();
    }
  };
  r2.flushRenderedStyleQueue = function() {
    updateEleCalcs(true);
  };
  r2.beforeRender(updateEleCalcs, r2.beforeRenderPriorities.eleCalcs);
};
BRp$7.onUpdateEleCalcs = function(fn4) {
  var fns = this.onUpdateEleCalcsFns = this.onUpdateEleCalcsFns || [];
  fns.push(fn4);
};
BRp$7.recalculateRenderedStyle = function(eles, useCache) {
  var isCleanConnected = function isCleanConnected2(ele2) {
    return ele2._private.rstyle.cleanConnected;
  };
  if (eles.length === 0) {
    return;
  }
  var edges3 = [];
  var nodes3 = [];
  if (this.destroyed) {
    return;
  }
  if (useCache === void 0) {
    useCache = true;
  }
  for (var i2 = 0; i2 < eles.length; i2++) {
    var ele = eles[i2];
    var _p = ele._private;
    var rstyle = _p.rstyle;
    if (ele.isEdge() && (!isCleanConnected(ele.source()) || !isCleanConnected(ele.target()))) {
      rstyle.clean = false;
    }
    if (ele.isEdge() && ele.isBundledBezier()) {
      if (ele.parallelEdges().some(function(ele2) {
        return !ele2._private.rstyle.clean && ele2.isBundledBezier();
      })) {
        rstyle.clean = false;
      }
    }
    if (useCache && rstyle.clean || ele.removed()) {
      continue;
    }
    if (ele.pstyle("display").value === "none") {
      continue;
    }
    if (_p.group === "nodes") {
      nodes3.push(ele);
    } else {
      edges3.push(ele);
    }
    rstyle.clean = true;
  }
  for (var _i2 = 0; _i2 < nodes3.length; _i2++) {
    var _ele = nodes3[_i2];
    var _p2 = _ele._private;
    var _rstyle = _p2.rstyle;
    var pos = _ele.position();
    this.recalculateNodeLabelProjection(_ele);
    _rstyle.nodeX = pos.x;
    _rstyle.nodeY = pos.y;
    _rstyle.nodeW = _ele.pstyle("width").pfValue;
    _rstyle.nodeH = _ele.pstyle("height").pfValue;
  }
  this.recalculateEdgeProjections(edges3);
  for (var _i3 = 0; _i3 < edges3.length; _i3++) {
    var _ele2 = edges3[_i3];
    var _p3 = _ele2._private;
    var _rstyle2 = _p3.rstyle;
    var rs2 = _p3.rscratch;
    _rstyle2.srcX = rs2.arrowStartX;
    _rstyle2.srcY = rs2.arrowStartY;
    _rstyle2.tgtX = rs2.arrowEndX;
    _rstyle2.tgtY = rs2.arrowEndY;
    _rstyle2.midX = rs2.midX;
    _rstyle2.midY = rs2.midY;
    _rstyle2.labelAngle = rs2.labelAngle;
    _rstyle2.sourceLabelAngle = rs2.sourceLabelAngle;
    _rstyle2.targetLabelAngle = rs2.targetLabelAngle;
  }
};
var BRp$6 = {};
BRp$6.updateCachedGrabbedEles = function() {
  var eles = this.cachedZSortedEles;
  if (!eles) {
    return;
  }
  eles.drag = [];
  eles.nondrag = [];
  var grabTargets = [];
  for (var i2 = 0; i2 < eles.length; i2++) {
    var ele = eles[i2];
    var rs2 = ele._private.rscratch;
    if (ele.grabbed() && !ele.isParent()) {
      grabTargets.push(ele);
    } else if (rs2.inDragLayer) {
      eles.drag.push(ele);
    } else {
      eles.nondrag.push(ele);
    }
  }
  for (var i2 = 0; i2 < grabTargets.length; i2++) {
    var ele = grabTargets[i2];
    eles.drag.push(ele);
  }
};
BRp$6.invalidateCachedZSortedEles = function() {
  this.cachedZSortedEles = null;
};
BRp$6.getCachedZSortedEles = function(forceRecalc) {
  if (forceRecalc || !this.cachedZSortedEles) {
    var eles = this.cy.mutableElements().toArray();
    eles.sort(zIndexSort);
    eles.interactive = eles.filter(function(ele) {
      return ele.interactive();
    });
    this.cachedZSortedEles = eles;
    this.updateCachedGrabbedEles();
  } else {
    eles = this.cachedZSortedEles;
  }
  return eles;
};
var BRp$5 = {};
[BRp$e, BRp$d, BRp$c, BRp$b, BRp$a, BRp$9, BRp$8, BRp$7, BRp$6].forEach(function(props) {
  extend(BRp$5, props);
});
var BRp$4 = {};
BRp$4.getCachedImage = function(url, crossOrigin, onLoad) {
  var r2 = this;
  var imageCache = r2.imageCache = r2.imageCache || {};
  var cache3 = imageCache[url];
  if (cache3) {
    if (!cache3.image.complete) {
      cache3.image.addEventListener("load", onLoad);
    }
    return cache3.image;
  } else {
    cache3 = imageCache[url] = imageCache[url] || {};
    var image = cache3.image = new Image();
    image.addEventListener("load", onLoad);
    image.addEventListener("error", function() {
      image.error = true;
    });
    var dataUriPrefix = "data:";
    var isDataUri = url.substring(0, dataUriPrefix.length).toLowerCase() === dataUriPrefix;
    if (!isDataUri) {
      crossOrigin = crossOrigin === "null" ? null : crossOrigin;
      image.crossOrigin = crossOrigin;
    }
    image.src = url;
    return image;
  }
};
var BRp$3 = {};
BRp$3.registerBinding = function(target, event3, handler, useCapture) {
  var args = Array.prototype.slice.apply(arguments, [1]);
  if (Array.isArray(target)) {
    var res = [];
    for (var i2 = 0; i2 < target.length; i2++) {
      var t = target[i2];
      if (t !== void 0) {
        var b2 = this.binder(t);
        res.push(b2.on.apply(b2, args));
      }
    }
    return res;
  }
  var b2 = this.binder(target);
  return b2.on.apply(b2, args);
};
BRp$3.binder = function(tgt) {
  var r2 = this;
  var containerWindow = r2.cy.window();
  var tgtIsDom = tgt === containerWindow || tgt === containerWindow.document || tgt === containerWindow.document.body || domElement(tgt);
  if (r2.supportsPassiveEvents == null) {
    var supportsPassive = false;
    try {
      var opts = Object.defineProperty({}, "passive", {
        get: function get2() {
          supportsPassive = true;
          return true;
        }
      });
      containerWindow.addEventListener("test", null, opts);
    } catch (err) {
    }
    r2.supportsPassiveEvents = supportsPassive;
  }
  var on4 = function on5(event3, handler, useCapture) {
    var args = Array.prototype.slice.call(arguments);
    if (tgtIsDom && r2.supportsPassiveEvents) {
      args[2] = {
        capture: useCapture != null ? useCapture : false,
        passive: false,
        once: false
      };
    }
    r2.bindings.push({
      target: tgt,
      args
    });
    (tgt.addEventListener || tgt.on).apply(tgt, args);
    return this;
  };
  return {
    on: on4,
    addEventListener: on4,
    addListener: on4,
    bind: on4
  };
};
BRp$3.nodeIsDraggable = function(node) {
  return node && node.isNode() && !node.locked() && node.grabbable();
};
BRp$3.nodeIsGrabbable = function(node) {
  return this.nodeIsDraggable(node) && node.interactive();
};
BRp$3.load = function() {
  var r2 = this;
  var containerWindow = r2.cy.window();
  var isSelected = function isSelected2(ele) {
    return ele.selected();
  };
  var getShadowRoot = function getShadowRoot2(element3) {
    var rootNode = element3.getRootNode();
    if (rootNode && rootNode.nodeType === 11 && rootNode.host !== void 0) {
      return rootNode;
    }
  };
  var triggerEvents = function triggerEvents2(target, names, e, position3) {
    if (target == null) {
      target = r2.cy;
    }
    for (var i2 = 0; i2 < names.length; i2++) {
      var name = names[i2];
      target.emit({
        originalEvent: e,
        type: name,
        position: position3
      });
    }
  };
  var isMultSelKeyDown = function isMultSelKeyDown2(e) {
    return e.shiftKey || e.metaKey || e.ctrlKey;
  };
  var allowPanningPassthrough = function allowPanningPassthrough2(down, downs) {
    var allowPassthrough = true;
    if (r2.cy.hasCompoundNodes() && down && down.pannable()) {
      for (var i2 = 0; downs && i2 < downs.length; i2++) {
        var down = downs[i2];
        if (down.isNode() && down.isParent() && !down.pannable()) {
          allowPassthrough = false;
          break;
        }
      }
    } else {
      allowPassthrough = true;
    }
    return allowPassthrough;
  };
  var setGrabbed = function setGrabbed2(ele) {
    ele[0]._private.grabbed = true;
  };
  var setFreed = function setFreed2(ele) {
    ele[0]._private.grabbed = false;
  };
  var setInDragLayer = function setInDragLayer2(ele) {
    ele[0]._private.rscratch.inDragLayer = true;
  };
  var setOutDragLayer = function setOutDragLayer2(ele) {
    ele[0]._private.rscratch.inDragLayer = false;
  };
  var setGrabTarget = function setGrabTarget2(ele) {
    ele[0]._private.rscratch.isGrabTarget = true;
  };
  var removeGrabTarget = function removeGrabTarget2(ele) {
    ele[0]._private.rscratch.isGrabTarget = false;
  };
  var addToDragList = function addToDragList2(ele, opts) {
    var list = opts.addToList;
    var listHasEle = list.has(ele);
    if (!listHasEle && ele.grabbable() && !ele.locked()) {
      list.merge(ele);
      setGrabbed(ele);
    }
  };
  var addDescendantsToDrag = function addDescendantsToDrag2(node, opts) {
    if (!node.cy().hasCompoundNodes()) {
      return;
    }
    if (opts.inDragLayer == null && opts.addToList == null) {
      return;
    }
    var innerNodes = node.descendants();
    if (opts.inDragLayer) {
      innerNodes.forEach(setInDragLayer);
      innerNodes.connectedEdges().forEach(setInDragLayer);
    }
    if (opts.addToList) {
      addToDragList(innerNodes, opts);
    }
  };
  var addNodesToDrag = function addNodesToDrag2(nodes3, opts) {
    opts = opts || {};
    var hasCompoundNodes2 = nodes3.cy().hasCompoundNodes();
    if (opts.inDragLayer) {
      nodes3.forEach(setInDragLayer);
      nodes3.neighborhood().stdFilter(function(ele) {
        return !hasCompoundNodes2 || ele.isEdge();
      }).forEach(setInDragLayer);
    }
    if (opts.addToList) {
      nodes3.forEach(function(ele) {
        addToDragList(ele, opts);
      });
    }
    addDescendantsToDrag(nodes3, opts);
    updateAncestorsInDragLayer(nodes3, {
      inDragLayer: opts.inDragLayer
    });
    r2.updateCachedGrabbedEles();
  };
  var addNodeToDrag = addNodesToDrag;
  var freeDraggedElements = function freeDraggedElements2(grabbedEles) {
    if (!grabbedEles) {
      return;
    }
    r2.getCachedZSortedEles().forEach(function(ele) {
      setFreed(ele);
      setOutDragLayer(ele);
      removeGrabTarget(ele);
    });
    r2.updateCachedGrabbedEles();
  };
  var updateAncestorsInDragLayer = function updateAncestorsInDragLayer2(node, opts) {
    if (opts.inDragLayer == null && opts.addToList == null) {
      return;
    }
    if (!node.cy().hasCompoundNodes()) {
      return;
    }
    var parent4 = node.ancestors().orphans();
    if (parent4.same(node)) {
      return;
    }
    var nodes3 = parent4.descendants().spawnSelf().merge(parent4).unmerge(node).unmerge(node.descendants());
    var edges3 = nodes3.connectedEdges();
    if (opts.inDragLayer) {
      edges3.forEach(setInDragLayer);
      nodes3.forEach(setInDragLayer);
    }
    if (opts.addToList) {
      nodes3.forEach(function(ele) {
        addToDragList(ele, opts);
      });
    }
  };
  var blurActiveDomElement = function blurActiveDomElement2() {
    if (document.activeElement != null && document.activeElement.blur != null) {
      document.activeElement.blur();
    }
  };
  var haveMutationsApi = typeof MutationObserver !== "undefined";
  var haveResizeObserverApi = typeof ResizeObserver !== "undefined";
  if (haveMutationsApi) {
    r2.removeObserver = new MutationObserver(function(mutns) {
      for (var i2 = 0; i2 < mutns.length; i2++) {
        var mutn = mutns[i2];
        var rNodes = mutn.removedNodes;
        if (rNodes) {
          for (var j2 = 0; j2 < rNodes.length; j2++) {
            var rNode = rNodes[j2];
            if (rNode === r2.container) {
              r2.destroy();
              break;
            }
          }
        }
      }
    });
    if (r2.container.parentNode) {
      r2.removeObserver.observe(r2.container.parentNode, {
        childList: true
      });
    }
  } else {
    r2.registerBinding(r2.container, "DOMNodeRemoved", function(e) {
      r2.destroy();
    });
  }
  var onResize = debounce(function() {
    r2.cy.resize();
  }, 100);
  if (haveMutationsApi) {
    r2.styleObserver = new MutationObserver(onResize);
    r2.styleObserver.observe(r2.container, {
      attributes: true
    });
  }
  r2.registerBinding(containerWindow, "resize", onResize);
  if (haveResizeObserverApi) {
    r2.resizeObserver = new ResizeObserver(onResize);
    r2.resizeObserver.observe(r2.container);
  }
  var forEachUp = function forEachUp2(domEle, fn4) {
    while (domEle != null) {
      fn4(domEle);
      domEle = domEle.parentNode;
    }
  };
  var invalidateCoords = function invalidateCoords2() {
    r2.invalidateContainerClientCoordsCache();
  };
  forEachUp(r2.container, function(domEle) {
    r2.registerBinding(domEle, "transitionend", invalidateCoords);
    r2.registerBinding(domEle, "animationend", invalidateCoords);
    r2.registerBinding(domEle, "scroll", invalidateCoords);
  });
  r2.registerBinding(r2.container, "contextmenu", function(e) {
    e.preventDefault();
  });
  var inBoxSelection = function inBoxSelection2() {
    return r2.selection[4] !== 0;
  };
  var eventInContainer = function eventInContainer2(e) {
    var containerPageCoords = r2.findContainerClientCoords();
    var x3 = containerPageCoords[0];
    var y3 = containerPageCoords[1];
    var width2 = containerPageCoords[2];
    var height2 = containerPageCoords[3];
    var positions2 = e.touches ? e.touches : [e];
    var atLeastOnePosInside = false;
    for (var i2 = 0; i2 < positions2.length; i2++) {
      var p3 = positions2[i2];
      if (x3 <= p3.clientX && p3.clientX <= x3 + width2 && y3 <= p3.clientY && p3.clientY <= y3 + height2) {
        atLeastOnePosInside = true;
        break;
      }
    }
    if (!atLeastOnePosInside) {
      return false;
    }
    var container2 = r2.container;
    var target = e.target;
    var tParent = target.parentNode;
    var containerIsTarget = false;
    while (tParent) {
      if (tParent === container2) {
        containerIsTarget = true;
        break;
      }
      tParent = tParent.parentNode;
    }
    if (!containerIsTarget) {
      return false;
    }
    return true;
  };
  r2.registerBinding(r2.container, "mousedown", function mousedownHandler(e) {
    if (!eventInContainer(e)) {
      return;
    }
    if (r2.hoverData.which === 1 && e.which !== 1) {
      return;
    }
    e.preventDefault();
    blurActiveDomElement();
    r2.hoverData.capture = true;
    r2.hoverData.which = e.which;
    var cy = r2.cy;
    var gpos = [e.clientX, e.clientY];
    var pos = r2.projectIntoViewport(gpos[0], gpos[1]);
    var select = r2.selection;
    var nears = r2.findNearestElements(pos[0], pos[1], true, false);
    var near = nears[0];
    var draggedElements = r2.dragData.possibleDragElements;
    r2.hoverData.mdownPos = pos;
    r2.hoverData.mdownGPos = gpos;
    var makeEvent = function makeEvent2(type2) {
      return {
        originalEvent: e,
        type: type2,
        position: {
          x: pos[0],
          y: pos[1]
        }
      };
    };
    var checkForTaphold = function checkForTaphold2() {
      r2.hoverData.tapholdCancelled = false;
      clearTimeout(r2.hoverData.tapholdTimeout);
      r2.hoverData.tapholdTimeout = setTimeout(function() {
        if (r2.hoverData.tapholdCancelled) {
          return;
        } else {
          var ele = r2.hoverData.down;
          if (ele) {
            ele.emit(makeEvent("taphold"));
          } else {
            cy.emit(makeEvent("taphold"));
          }
        }
      }, r2.tapholdDuration);
    };
    if (e.which == 3) {
      r2.hoverData.cxtStarted = true;
      var cxtEvt = {
        originalEvent: e,
        type: "cxttapstart",
        position: {
          x: pos[0],
          y: pos[1]
        }
      };
      if (near) {
        near.activate();
        near.emit(cxtEvt);
        r2.hoverData.down = near;
      } else {
        cy.emit(cxtEvt);
      }
      r2.hoverData.downTime = (/* @__PURE__ */ new Date()).getTime();
      r2.hoverData.cxtDragged = false;
    } else if (e.which == 1) {
      if (near) {
        near.activate();
      }
      {
        if (near != null) {
          if (r2.nodeIsGrabbable(near)) {
            var triggerGrab = function triggerGrab2(ele) {
              ele.emit(makeEvent("grab"));
            };
            setGrabTarget(near);
            if (!near.selected()) {
              draggedElements = r2.dragData.possibleDragElements = cy.collection();
              addNodeToDrag(near, {
                addToList: draggedElements
              });
              near.emit(makeEvent("grabon")).emit(makeEvent("grab"));
            } else {
              draggedElements = r2.dragData.possibleDragElements = cy.collection();
              var selectedNodes = cy.$(function(ele) {
                return ele.isNode() && ele.selected() && r2.nodeIsGrabbable(ele);
              });
              addNodesToDrag(selectedNodes, {
                addToList: draggedElements
              });
              near.emit(makeEvent("grabon"));
              selectedNodes.forEach(triggerGrab);
            }
            r2.redrawHint("eles", true);
            r2.redrawHint("drag", true);
          }
        }
        r2.hoverData.down = near;
        r2.hoverData.downs = nears;
        r2.hoverData.downTime = (/* @__PURE__ */ new Date()).getTime();
      }
      triggerEvents(near, ["mousedown", "tapstart", "vmousedown"], e, {
        x: pos[0],
        y: pos[1]
      });
      if (near == null) {
        select[4] = 1;
        r2.data.bgActivePosistion = {
          x: pos[0],
          y: pos[1]
        };
        r2.redrawHint("select", true);
        r2.redraw();
      } else if (near.pannable()) {
        select[4] = 1;
      }
      checkForTaphold();
    }
    select[0] = select[2] = pos[0];
    select[1] = select[3] = pos[1];
  }, false);
  var shadowRoot = getShadowRoot(r2.container);
  r2.registerBinding([containerWindow, shadowRoot], "mousemove", function mousemoveHandler(e) {
    var capture = r2.hoverData.capture;
    if (!capture && !eventInContainer(e)) {
      return;
    }
    var preventDefault2 = false;
    var cy = r2.cy;
    var zoom2 = cy.zoom();
    var gpos = [e.clientX, e.clientY];
    var pos = r2.projectIntoViewport(gpos[0], gpos[1]);
    var mdownPos = r2.hoverData.mdownPos;
    var mdownGPos = r2.hoverData.mdownGPos;
    var select = r2.selection;
    var near = null;
    if (!r2.hoverData.draggingEles && !r2.hoverData.dragging && !r2.hoverData.selecting) {
      near = r2.findNearestElement(pos[0], pos[1], true, false);
    }
    var last2 = r2.hoverData.last;
    var down = r2.hoverData.down;
    var disp = [pos[0] - select[2], pos[1] - select[3]];
    var draggedElements = r2.dragData.possibleDragElements;
    var isOverThresholdDrag;
    if (mdownGPos) {
      var dx = gpos[0] - mdownGPos[0];
      var dx2 = dx * dx;
      var dy = gpos[1] - mdownGPos[1];
      var dy2 = dy * dy;
      var dist22 = dx2 + dy2;
      r2.hoverData.isOverThresholdDrag = isOverThresholdDrag = dist22 >= r2.desktopTapThreshold2;
    }
    var multSelKeyDown = isMultSelKeyDown(e);
    if (isOverThresholdDrag) {
      r2.hoverData.tapholdCancelled = true;
    }
    var updateDragDelta = function updateDragDelta2() {
      var dragDelta2 = r2.hoverData.dragDelta = r2.hoverData.dragDelta || [];
      if (dragDelta2.length === 0) {
        dragDelta2.push(disp[0]);
        dragDelta2.push(disp[1]);
      } else {
        dragDelta2[0] += disp[0];
        dragDelta2[1] += disp[1];
      }
    };
    preventDefault2 = true;
    triggerEvents(near, ["mousemove", "vmousemove", "tapdrag"], e, {
      x: pos[0],
      y: pos[1]
    });
    var makeEvent = function makeEvent2(type2) {
      return {
        originalEvent: e,
        type: type2,
        position: {
          x: pos[0],
          y: pos[1]
        }
      };
    };
    var goIntoBoxMode = function goIntoBoxMode2() {
      r2.data.bgActivePosistion = void 0;
      if (!r2.hoverData.selecting) {
        cy.emit(makeEvent("boxstart"));
      }
      select[4] = 1;
      r2.hoverData.selecting = true;
      r2.redrawHint("select", true);
      r2.redraw();
    };
    if (r2.hoverData.which === 3) {
      if (isOverThresholdDrag) {
        var cxtEvt = makeEvent("cxtdrag");
        if (down) {
          down.emit(cxtEvt);
        } else {
          cy.emit(cxtEvt);
        }
        r2.hoverData.cxtDragged = true;
        if (!r2.hoverData.cxtOver || near !== r2.hoverData.cxtOver) {
          if (r2.hoverData.cxtOver) {
            r2.hoverData.cxtOver.emit(makeEvent("cxtdragout"));
          }
          r2.hoverData.cxtOver = near;
          if (near) {
            near.emit(makeEvent("cxtdragover"));
          }
        }
      }
    } else if (r2.hoverData.dragging) {
      preventDefault2 = true;
      if (cy.panningEnabled() && cy.userPanningEnabled()) {
        var deltaP;
        if (r2.hoverData.justStartedPan) {
          var mdPos = r2.hoverData.mdownPos;
          deltaP = {
            x: (pos[0] - mdPos[0]) * zoom2,
            y: (pos[1] - mdPos[1]) * zoom2
          };
          r2.hoverData.justStartedPan = false;
        } else {
          deltaP = {
            x: disp[0] * zoom2,
            y: disp[1] * zoom2
          };
        }
        cy.panBy(deltaP);
        cy.emit(makeEvent("dragpan"));
        r2.hoverData.dragged = true;
      }
      pos = r2.projectIntoViewport(e.clientX, e.clientY);
    } else if (select[4] == 1 && (down == null || down.pannable())) {
      if (isOverThresholdDrag) {
        if (!r2.hoverData.dragging && cy.boxSelectionEnabled() && (multSelKeyDown || !cy.panningEnabled() || !cy.userPanningEnabled())) {
          goIntoBoxMode();
        } else if (!r2.hoverData.selecting && cy.panningEnabled() && cy.userPanningEnabled()) {
          var allowPassthrough = allowPanningPassthrough(down, r2.hoverData.downs);
          if (allowPassthrough) {
            r2.hoverData.dragging = true;
            r2.hoverData.justStartedPan = true;
            select[4] = 0;
            r2.data.bgActivePosistion = array2point(mdownPos);
            r2.redrawHint("select", true);
            r2.redraw();
          }
        }
        if (down && down.pannable() && down.active()) {
          down.unactivate();
        }
      }
    } else {
      if (down && down.pannable() && down.active()) {
        down.unactivate();
      }
      if ((!down || !down.grabbed()) && near != last2) {
        if (last2) {
          triggerEvents(last2, ["mouseout", "tapdragout"], e, {
            x: pos[0],
            y: pos[1]
          });
        }
        if (near) {
          triggerEvents(near, ["mouseover", "tapdragover"], e, {
            x: pos[0],
            y: pos[1]
          });
        }
        r2.hoverData.last = near;
      }
      if (down) {
        if (isOverThresholdDrag) {
          if (cy.boxSelectionEnabled() && multSelKeyDown) {
            if (down && down.grabbed()) {
              freeDraggedElements(draggedElements);
              down.emit(makeEvent("freeon"));
              draggedElements.emit(makeEvent("free"));
              if (r2.dragData.didDrag) {
                down.emit(makeEvent("dragfreeon"));
                draggedElements.emit(makeEvent("dragfree"));
              }
            }
            goIntoBoxMode();
          } else if (down && down.grabbed() && r2.nodeIsDraggable(down)) {
            var justStartedDrag = !r2.dragData.didDrag;
            if (justStartedDrag) {
              r2.redrawHint("eles", true);
            }
            r2.dragData.didDrag = true;
            if (!r2.hoverData.draggingEles) {
              addNodesToDrag(draggedElements, {
                inDragLayer: true
              });
            }
            var totalShift = {
              x: 0,
              y: 0
            };
            if (number$1(disp[0]) && number$1(disp[1])) {
              totalShift.x += disp[0];
              totalShift.y += disp[1];
              if (justStartedDrag) {
                var dragDelta = r2.hoverData.dragDelta;
                if (dragDelta && number$1(dragDelta[0]) && number$1(dragDelta[1])) {
                  totalShift.x += dragDelta[0];
                  totalShift.y += dragDelta[1];
                }
              }
            }
            r2.hoverData.draggingEles = true;
            draggedElements.silentShift(totalShift).emit(makeEvent("position")).emit(makeEvent("drag"));
            r2.redrawHint("drag", true);
            r2.redraw();
          }
        } else {
          updateDragDelta();
        }
      }
      preventDefault2 = true;
    }
    select[2] = pos[0];
    select[3] = pos[1];
    if (preventDefault2) {
      if (e.stopPropagation) e.stopPropagation();
      if (e.preventDefault) e.preventDefault();
      return false;
    }
  }, false);
  var clickTimeout, didDoubleClick, prevClickTimeStamp;
  r2.registerBinding(containerWindow, "mouseup", function mouseupHandler(e) {
    if (r2.hoverData.which === 1 && e.which !== 1 && r2.hoverData.capture) {
      return;
    }
    var capture = r2.hoverData.capture;
    if (!capture) {
      return;
    }
    r2.hoverData.capture = false;
    var cy = r2.cy;
    var pos = r2.projectIntoViewport(e.clientX, e.clientY);
    var select = r2.selection;
    var near = r2.findNearestElement(pos[0], pos[1], true, false);
    var draggedElements = r2.dragData.possibleDragElements;
    var down = r2.hoverData.down;
    var multSelKeyDown = isMultSelKeyDown(e);
    if (r2.data.bgActivePosistion) {
      r2.redrawHint("select", true);
      r2.redraw();
    }
    r2.hoverData.tapholdCancelled = true;
    r2.data.bgActivePosistion = void 0;
    if (down) {
      down.unactivate();
    }
    var makeEvent = function makeEvent2(type2) {
      return {
        originalEvent: e,
        type: type2,
        position: {
          x: pos[0],
          y: pos[1]
        }
      };
    };
    if (r2.hoverData.which === 3) {
      var cxtEvt = makeEvent("cxttapend");
      if (down) {
        down.emit(cxtEvt);
      } else {
        cy.emit(cxtEvt);
      }
      if (!r2.hoverData.cxtDragged) {
        var cxtTap = makeEvent("cxttap");
        if (down) {
          down.emit(cxtTap);
        } else {
          cy.emit(cxtTap);
        }
      }
      r2.hoverData.cxtDragged = false;
      r2.hoverData.which = null;
    } else if (r2.hoverData.which === 1) {
      triggerEvents(near, ["mouseup", "tapend", "vmouseup"], e, {
        x: pos[0],
        y: pos[1]
      });
      if (!r2.dragData.didDrag && // didn't move a node around
      !r2.hoverData.dragged && // didn't pan
      !r2.hoverData.selecting && // not box selection
      !r2.hoverData.isOverThresholdDrag) {
        triggerEvents(down, ["click", "tap", "vclick"], e, {
          x: pos[0],
          y: pos[1]
        });
        didDoubleClick = false;
        if (e.timeStamp - prevClickTimeStamp <= cy.multiClickDebounceTime()) {
          clickTimeout && clearTimeout(clickTimeout);
          didDoubleClick = true;
          prevClickTimeStamp = null;
          triggerEvents(down, ["dblclick", "dbltap", "vdblclick"], e, {
            x: pos[0],
            y: pos[1]
          });
        } else {
          clickTimeout = setTimeout(function() {
            if (didDoubleClick) return;
            triggerEvents(down, ["oneclick", "onetap", "voneclick"], e, {
              x: pos[0],
              y: pos[1]
            });
          }, cy.multiClickDebounceTime());
          prevClickTimeStamp = e.timeStamp;
        }
      }
      if (down == null && !r2.dragData.didDrag && !r2.hoverData.selecting && !r2.hoverData.dragged && !isMultSelKeyDown(e)) {
        cy.$(isSelected).unselect(["tapunselect"]);
        if (draggedElements.length > 0) {
          r2.redrawHint("eles", true);
        }
        r2.dragData.possibleDragElements = draggedElements = cy.collection();
      }
      if (near == down && !r2.dragData.didDrag && !r2.hoverData.selecting) {
        if (near != null && near._private.selectable) {
          if (r2.hoverData.dragging) ;
          else if (cy.selectionType() === "additive" || multSelKeyDown) {
            if (near.selected()) {
              near.unselect(["tapunselect"]);
            } else {
              near.select(["tapselect"]);
            }
          } else {
            if (!multSelKeyDown) {
              cy.$(isSelected).unmerge(near).unselect(["tapunselect"]);
              near.select(["tapselect"]);
            }
          }
          r2.redrawHint("eles", true);
        }
      }
      if (r2.hoverData.selecting) {
        var box = cy.collection(r2.getAllInBox(select[0], select[1], select[2], select[3]));
        r2.redrawHint("select", true);
        if (box.length > 0) {
          r2.redrawHint("eles", true);
        }
        cy.emit(makeEvent("boxend"));
        var eleWouldBeSelected = function eleWouldBeSelected2(ele) {
          return ele.selectable() && !ele.selected();
        };
        if (cy.selectionType() === "additive") {
          box.emit(makeEvent("box")).stdFilter(eleWouldBeSelected).select().emit(makeEvent("boxselect"));
        } else {
          if (!multSelKeyDown) {
            cy.$(isSelected).unmerge(box).unselect();
          }
          box.emit(makeEvent("box")).stdFilter(eleWouldBeSelected).select().emit(makeEvent("boxselect"));
        }
        r2.redraw();
      }
      if (r2.hoverData.dragging) {
        r2.hoverData.dragging = false;
        r2.redrawHint("select", true);
        r2.redrawHint("eles", true);
        r2.redraw();
      }
      if (!select[4]) {
        r2.redrawHint("drag", true);
        r2.redrawHint("eles", true);
        var downWasGrabbed = down && down.grabbed();
        freeDraggedElements(draggedElements);
        if (downWasGrabbed) {
          down.emit(makeEvent("freeon"));
          draggedElements.emit(makeEvent("free"));
          if (r2.dragData.didDrag) {
            down.emit(makeEvent("dragfreeon"));
            draggedElements.emit(makeEvent("dragfree"));
          }
        }
      }
    }
    select[4] = 0;
    r2.hoverData.down = null;
    r2.hoverData.cxtStarted = false;
    r2.hoverData.draggingEles = false;
    r2.hoverData.selecting = false;
    r2.hoverData.isOverThresholdDrag = false;
    r2.dragData.didDrag = false;
    r2.hoverData.dragged = false;
    r2.hoverData.dragDelta = [];
    r2.hoverData.mdownPos = null;
    r2.hoverData.mdownGPos = null;
    r2.hoverData.which = null;
  }, false);
  var wheelDeltas = [];
  var wheelDeltaN = 4;
  var inaccurateScrollDevice;
  var inaccurateScrollFactor = 1e5;
  var allAreDivisibleBy = function allAreDivisibleBy2(list, factor) {
    for (var i2 = 0; i2 < list.length; i2++) {
      if (list[i2] % factor !== 0) {
        return false;
      }
    }
    return true;
  };
  var allAreSameMagnitude = function allAreSameMagnitude2(list) {
    var firstMag = Math.abs(list[0]);
    for (var i2 = 1; i2 < list.length; i2++) {
      if (Math.abs(list[i2]) !== firstMag) {
        return false;
      }
    }
    return true;
  };
  var wheelHandler = function wheelHandler2(e) {
    var clamp = false;
    var delta = e.deltaY;
    if (delta == null) {
      if (e.wheelDeltaY != null) {
        delta = e.wheelDeltaY / 4;
      } else if (e.wheelDelta != null) {
        delta = e.wheelDelta / 4;
      }
    }
    if (delta === 0) {
      return;
    }
    if (inaccurateScrollDevice == null) {
      if (wheelDeltas.length >= wheelDeltaN) {
        var wds = wheelDeltas;
        inaccurateScrollDevice = allAreDivisibleBy(wds, 5);
        if (!inaccurateScrollDevice) {
          var firstMag = Math.abs(wds[0]);
          inaccurateScrollDevice = allAreSameMagnitude(wds) && firstMag > 5;
        }
        if (inaccurateScrollDevice) {
          for (var i2 = 0; i2 < wds.length; i2++) {
            inaccurateScrollFactor = Math.min(Math.abs(wds[i2]), inaccurateScrollFactor);
          }
        }
      } else {
        wheelDeltas.push(delta);
        clamp = true;
      }
    } else if (inaccurateScrollDevice) {
      inaccurateScrollFactor = Math.min(Math.abs(delta), inaccurateScrollFactor);
    }
    if (r2.scrollingPage) {
      return;
    }
    var cy = r2.cy;
    var zoom2 = cy.zoom();
    var pan2 = cy.pan();
    var pos = r2.projectIntoViewport(e.clientX, e.clientY);
    var rpos = [pos[0] * zoom2 + pan2.x, pos[1] * zoom2 + pan2.y];
    if (r2.hoverData.draggingEles || r2.hoverData.dragging || r2.hoverData.cxtStarted || inBoxSelection()) {
      e.preventDefault();
      return;
    }
    if (cy.panningEnabled() && cy.userPanningEnabled() && cy.zoomingEnabled() && cy.userZoomingEnabled()) {
      e.preventDefault();
      r2.data.wheelZooming = true;
      clearTimeout(r2.data.wheelTimeout);
      r2.data.wheelTimeout = setTimeout(function() {
        r2.data.wheelZooming = false;
        r2.redrawHint("eles", true);
        r2.redraw();
      }, 150);
      var diff2;
      if (clamp && Math.abs(delta) > 5) {
        delta = signum(delta) * 5;
      }
      diff2 = delta / -250;
      if (inaccurateScrollDevice) {
        diff2 /= inaccurateScrollFactor;
        diff2 *= 3;
      }
      diff2 = diff2 * r2.wheelSensitivity;
      var needsWheelFix = e.deltaMode === 1;
      if (needsWheelFix) {
        diff2 *= 33;
      }
      var newZoom = cy.zoom() * Math.pow(10, diff2);
      if (e.type === "gesturechange") {
        newZoom = r2.gestureStartZoom * e.scale;
      }
      cy.zoom({
        level: newZoom,
        renderedPosition: {
          x: rpos[0],
          y: rpos[1]
        }
      });
      cy.emit({
        type: e.type === "gesturechange" ? "pinchzoom" : "scrollzoom",
        originalEvent: e,
        position: {
          x: pos[0],
          y: pos[1]
        }
      });
    }
  };
  r2.registerBinding(r2.container, "wheel", wheelHandler, true);
  r2.registerBinding(containerWindow, "scroll", function scrollHandler(e) {
    r2.scrollingPage = true;
    clearTimeout(r2.scrollingPageTimeout);
    r2.scrollingPageTimeout = setTimeout(function() {
      r2.scrollingPage = false;
    }, 250);
  }, true);
  r2.registerBinding(r2.container, "gesturestart", function gestureStartHandler(e) {
    r2.gestureStartZoom = r2.cy.zoom();
    if (!r2.hasTouchStarted) {
      e.preventDefault();
    }
  }, true);
  r2.registerBinding(r2.container, "gesturechange", function(e) {
    if (!r2.hasTouchStarted) {
      wheelHandler(e);
    }
  }, true);
  r2.registerBinding(r2.container, "mouseout", function mouseOutHandler(e) {
    var pos = r2.projectIntoViewport(e.clientX, e.clientY);
    r2.cy.emit({
      originalEvent: e,
      type: "mouseout",
      position: {
        x: pos[0],
        y: pos[1]
      }
    });
  }, false);
  r2.registerBinding(r2.container, "mouseover", function mouseOverHandler(e) {
    var pos = r2.projectIntoViewport(e.clientX, e.clientY);
    r2.cy.emit({
      originalEvent: e,
      type: "mouseover",
      position: {
        x: pos[0],
        y: pos[1]
      }
    });
  }, false);
  var f1x1, f1y1, f2x1, f2y1;
  var distance1, distance1Sq;
  var center1, modelCenter1;
  var offsetLeft, offsetTop;
  var containerWidth, containerHeight;
  var twoFingersStartInside;
  var distance = function distance2(x1, y1, x22, y22) {
    return Math.sqrt((x22 - x1) * (x22 - x1) + (y22 - y1) * (y22 - y1));
  };
  var distanceSq = function distanceSq2(x1, y1, x22, y22) {
    return (x22 - x1) * (x22 - x1) + (y22 - y1) * (y22 - y1);
  };
  var touchstartHandler;
  r2.registerBinding(r2.container, "touchstart", touchstartHandler = function touchstartHandler2(e) {
    r2.hasTouchStarted = true;
    if (!eventInContainer(e)) {
      return;
    }
    blurActiveDomElement();
    r2.touchData.capture = true;
    r2.data.bgActivePosistion = void 0;
    var cy = r2.cy;
    var now = r2.touchData.now;
    var earlier = r2.touchData.earlier;
    if (e.touches[0]) {
      var pos = r2.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
      now[0] = pos[0];
      now[1] = pos[1];
    }
    if (e.touches[1]) {
      var pos = r2.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
      now[2] = pos[0];
      now[3] = pos[1];
    }
    if (e.touches[2]) {
      var pos = r2.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
      now[4] = pos[0];
      now[5] = pos[1];
    }
    var makeEvent = function makeEvent2(type2) {
      return {
        originalEvent: e,
        type: type2,
        position: {
          x: now[0],
          y: now[1]
        }
      };
    };
    if (e.touches[1]) {
      r2.touchData.singleTouchMoved = true;
      freeDraggedElements(r2.dragData.touchDragEles);
      var offsets = r2.findContainerClientCoords();
      offsetLeft = offsets[0];
      offsetTop = offsets[1];
      containerWidth = offsets[2];
      containerHeight = offsets[3];
      f1x1 = e.touches[0].clientX - offsetLeft;
      f1y1 = e.touches[0].clientY - offsetTop;
      f2x1 = e.touches[1].clientX - offsetLeft;
      f2y1 = e.touches[1].clientY - offsetTop;
      twoFingersStartInside = 0 <= f1x1 && f1x1 <= containerWidth && 0 <= f2x1 && f2x1 <= containerWidth && 0 <= f1y1 && f1y1 <= containerHeight && 0 <= f2y1 && f2y1 <= containerHeight;
      var pan2 = cy.pan();
      var zoom2 = cy.zoom();
      distance1 = distance(f1x1, f1y1, f2x1, f2y1);
      distance1Sq = distanceSq(f1x1, f1y1, f2x1, f2y1);
      center1 = [(f1x1 + f2x1) / 2, (f1y1 + f2y1) / 2];
      modelCenter1 = [(center1[0] - pan2.x) / zoom2, (center1[1] - pan2.y) / zoom2];
      var cxtDistThreshold = 200;
      var cxtDistThresholdSq = cxtDistThreshold * cxtDistThreshold;
      if (distance1Sq < cxtDistThresholdSq && !e.touches[2]) {
        var near1 = r2.findNearestElement(now[0], now[1], true, true);
        var near2 = r2.findNearestElement(now[2], now[3], true, true);
        if (near1 && near1.isNode()) {
          near1.activate().emit(makeEvent("cxttapstart"));
          r2.touchData.start = near1;
        } else if (near2 && near2.isNode()) {
          near2.activate().emit(makeEvent("cxttapstart"));
          r2.touchData.start = near2;
        } else {
          cy.emit(makeEvent("cxttapstart"));
        }
        if (r2.touchData.start) {
          r2.touchData.start._private.grabbed = false;
        }
        r2.touchData.cxt = true;
        r2.touchData.cxtDragged = false;
        r2.data.bgActivePosistion = void 0;
        r2.redraw();
        return;
      }
    }
    if (e.touches[2]) {
      if (cy.boxSelectionEnabled()) {
        e.preventDefault();
      }
    } else if (e.touches[1]) ;
    else if (e.touches[0]) {
      var nears = r2.findNearestElements(now[0], now[1], true, true);
      var near = nears[0];
      if (near != null) {
        near.activate();
        r2.touchData.start = near;
        r2.touchData.starts = nears;
        if (r2.nodeIsGrabbable(near)) {
          var draggedEles = r2.dragData.touchDragEles = cy.collection();
          var selectedNodes = null;
          r2.redrawHint("eles", true);
          r2.redrawHint("drag", true);
          if (near.selected()) {
            selectedNodes = cy.$(function(ele) {
              return ele.selected() && r2.nodeIsGrabbable(ele);
            });
            addNodesToDrag(selectedNodes, {
              addToList: draggedEles
            });
          } else {
            addNodeToDrag(near, {
              addToList: draggedEles
            });
          }
          setGrabTarget(near);
          near.emit(makeEvent("grabon"));
          if (selectedNodes) {
            selectedNodes.forEach(function(n2) {
              n2.emit(makeEvent("grab"));
            });
          } else {
            near.emit(makeEvent("grab"));
          }
        }
      }
      triggerEvents(near, ["touchstart", "tapstart", "vmousedown"], e, {
        x: now[0],
        y: now[1]
      });
      if (near == null) {
        r2.data.bgActivePosistion = {
          x: pos[0],
          y: pos[1]
        };
        r2.redrawHint("select", true);
        r2.redraw();
      }
      r2.touchData.singleTouchMoved = false;
      r2.touchData.singleTouchStartTime = +/* @__PURE__ */ new Date();
      clearTimeout(r2.touchData.tapholdTimeout);
      r2.touchData.tapholdTimeout = setTimeout(function() {
        if (r2.touchData.singleTouchMoved === false && !r2.pinching && !r2.touchData.selecting) {
          triggerEvents(r2.touchData.start, ["taphold"], e, {
            x: now[0],
            y: now[1]
          });
        }
      }, r2.tapholdDuration);
    }
    if (e.touches.length >= 1) {
      var sPos = r2.touchData.startPosition = [null, null, null, null, null, null];
      for (var i2 = 0; i2 < now.length; i2++) {
        sPos[i2] = earlier[i2] = now[i2];
      }
      var touch0 = e.touches[0];
      r2.touchData.startGPosition = [touch0.clientX, touch0.clientY];
    }
  }, false);
  var touchmoveHandler;
  r2.registerBinding(containerWindow, "touchmove", touchmoveHandler = function touchmoveHandler2(e) {
    var capture = r2.touchData.capture;
    if (!capture && !eventInContainer(e)) {
      return;
    }
    var select = r2.selection;
    var cy = r2.cy;
    var now = r2.touchData.now;
    var earlier = r2.touchData.earlier;
    var zoom2 = cy.zoom();
    if (e.touches[0]) {
      var pos = r2.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
      now[0] = pos[0];
      now[1] = pos[1];
    }
    if (e.touches[1]) {
      var pos = r2.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
      now[2] = pos[0];
      now[3] = pos[1];
    }
    if (e.touches[2]) {
      var pos = r2.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
      now[4] = pos[0];
      now[5] = pos[1];
    }
    var makeEvent = function makeEvent2(type2) {
      return {
        originalEvent: e,
        type: type2,
        position: {
          x: now[0],
          y: now[1]
        }
      };
    };
    var startGPos = r2.touchData.startGPosition;
    var isOverThresholdDrag;
    if (capture && e.touches[0] && startGPos) {
      var disp = [];
      for (var j2 = 0; j2 < now.length; j2++) {
        disp[j2] = now[j2] - earlier[j2];
      }
      var dx = e.touches[0].clientX - startGPos[0];
      var dx2 = dx * dx;
      var dy = e.touches[0].clientY - startGPos[1];
      var dy2 = dy * dy;
      var dist22 = dx2 + dy2;
      isOverThresholdDrag = dist22 >= r2.touchTapThreshold2;
    }
    if (capture && r2.touchData.cxt) {
      e.preventDefault();
      var f1x2 = e.touches[0].clientX - offsetLeft, f1y2 = e.touches[0].clientY - offsetTop;
      var f2x2 = e.touches[1].clientX - offsetLeft, f2y2 = e.touches[1].clientY - offsetTop;
      var distance2Sq = distanceSq(f1x2, f1y2, f2x2, f2y2);
      var factorSq = distance2Sq / distance1Sq;
      var distThreshold = 150;
      var distThresholdSq = distThreshold * distThreshold;
      var factorThreshold = 1.5;
      var factorThresholdSq = factorThreshold * factorThreshold;
      if (factorSq >= factorThresholdSq || distance2Sq >= distThresholdSq) {
        r2.touchData.cxt = false;
        r2.data.bgActivePosistion = void 0;
        r2.redrawHint("select", true);
        var cxtEvt = makeEvent("cxttapend");
        if (r2.touchData.start) {
          r2.touchData.start.unactivate().emit(cxtEvt);
          r2.touchData.start = null;
        } else {
          cy.emit(cxtEvt);
        }
      }
    }
    if (capture && r2.touchData.cxt) {
      var cxtEvt = makeEvent("cxtdrag");
      r2.data.bgActivePosistion = void 0;
      r2.redrawHint("select", true);
      if (r2.touchData.start) {
        r2.touchData.start.emit(cxtEvt);
      } else {
        cy.emit(cxtEvt);
      }
      if (r2.touchData.start) {
        r2.touchData.start._private.grabbed = false;
      }
      r2.touchData.cxtDragged = true;
      var near = r2.findNearestElement(now[0], now[1], true, true);
      if (!r2.touchData.cxtOver || near !== r2.touchData.cxtOver) {
        if (r2.touchData.cxtOver) {
          r2.touchData.cxtOver.emit(makeEvent("cxtdragout"));
        }
        r2.touchData.cxtOver = near;
        if (near) {
          near.emit(makeEvent("cxtdragover"));
        }
      }
    } else if (capture && e.touches[2] && cy.boxSelectionEnabled()) {
      e.preventDefault();
      r2.data.bgActivePosistion = void 0;
      this.lastThreeTouch = +/* @__PURE__ */ new Date();
      if (!r2.touchData.selecting) {
        cy.emit(makeEvent("boxstart"));
      }
      r2.touchData.selecting = true;
      r2.touchData.didSelect = true;
      select[4] = 1;
      if (!select || select.length === 0 || select[0] === void 0) {
        select[0] = (now[0] + now[2] + now[4]) / 3;
        select[1] = (now[1] + now[3] + now[5]) / 3;
        select[2] = (now[0] + now[2] + now[4]) / 3 + 1;
        select[3] = (now[1] + now[3] + now[5]) / 3 + 1;
      } else {
        select[2] = (now[0] + now[2] + now[4]) / 3;
        select[3] = (now[1] + now[3] + now[5]) / 3;
      }
      r2.redrawHint("select", true);
      r2.redraw();
    } else if (capture && e.touches[1] && !r2.touchData.didSelect && cy.zoomingEnabled() && cy.panningEnabled() && cy.userZoomingEnabled() && cy.userPanningEnabled()) {
      e.preventDefault();
      r2.data.bgActivePosistion = void 0;
      r2.redrawHint("select", true);
      var draggedEles = r2.dragData.touchDragEles;
      if (draggedEles) {
        r2.redrawHint("drag", true);
        for (var i2 = 0; i2 < draggedEles.length; i2++) {
          var de_p = draggedEles[i2]._private;
          de_p.grabbed = false;
          de_p.rscratch.inDragLayer = false;
        }
      }
      var _start = r2.touchData.start;
      var f1x2 = e.touches[0].clientX - offsetLeft, f1y2 = e.touches[0].clientY - offsetTop;
      var f2x2 = e.touches[1].clientX - offsetLeft, f2y2 = e.touches[1].clientY - offsetTop;
      var distance2 = distance(f1x2, f1y2, f2x2, f2y2);
      var factor = distance2 / distance1;
      if (twoFingersStartInside) {
        var df1x = f1x2 - f1x1;
        var df1y = f1y2 - f1y1;
        var df2x = f2x2 - f2x1;
        var df2y = f2y2 - f2y1;
        var tx = (df1x + df2x) / 2;
        var ty = (df1y + df2y) / 2;
        var zoom1 = cy.zoom();
        var zoom22 = zoom1 * factor;
        var pan1 = cy.pan();
        var ctrx = modelCenter1[0] * zoom1 + pan1.x;
        var ctry = modelCenter1[1] * zoom1 + pan1.y;
        var pan2 = {
          x: -zoom22 / zoom1 * (ctrx - pan1.x - tx) + ctrx,
          y: -zoom22 / zoom1 * (ctry - pan1.y - ty) + ctry
        };
        if (_start && _start.active()) {
          var draggedEles = r2.dragData.touchDragEles;
          freeDraggedElements(draggedEles);
          r2.redrawHint("drag", true);
          r2.redrawHint("eles", true);
          _start.unactivate().emit(makeEvent("freeon"));
          draggedEles.emit(makeEvent("free"));
          if (r2.dragData.didDrag) {
            _start.emit(makeEvent("dragfreeon"));
            draggedEles.emit(makeEvent("dragfree"));
          }
        }
        cy.viewport({
          zoom: zoom22,
          pan: pan2,
          cancelOnFailedZoom: true
        });
        cy.emit(makeEvent("pinchzoom"));
        distance1 = distance2;
        f1x1 = f1x2;
        f1y1 = f1y2;
        f2x1 = f2x2;
        f2y1 = f2y2;
        r2.pinching = true;
      }
      if (e.touches[0]) {
        var pos = r2.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
        now[0] = pos[0];
        now[1] = pos[1];
      }
      if (e.touches[1]) {
        var pos = r2.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
        now[2] = pos[0];
        now[3] = pos[1];
      }
      if (e.touches[2]) {
        var pos = r2.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
        now[4] = pos[0];
        now[5] = pos[1];
      }
    } else if (e.touches[0] && !r2.touchData.didSelect) {
      var start = r2.touchData.start;
      var last2 = r2.touchData.last;
      var near;
      if (!r2.hoverData.draggingEles && !r2.swipePanning) {
        near = r2.findNearestElement(now[0], now[1], true, true);
      }
      if (capture && start != null) {
        e.preventDefault();
      }
      if (capture && start != null && r2.nodeIsDraggable(start)) {
        if (isOverThresholdDrag) {
          var draggedEles = r2.dragData.touchDragEles;
          var justStartedDrag = !r2.dragData.didDrag;
          if (justStartedDrag) {
            addNodesToDrag(draggedEles, {
              inDragLayer: true
            });
          }
          r2.dragData.didDrag = true;
          var totalShift = {
            x: 0,
            y: 0
          };
          if (number$1(disp[0]) && number$1(disp[1])) {
            totalShift.x += disp[0];
            totalShift.y += disp[1];
            if (justStartedDrag) {
              r2.redrawHint("eles", true);
              var dragDelta = r2.touchData.dragDelta;
              if (dragDelta && number$1(dragDelta[0]) && number$1(dragDelta[1])) {
                totalShift.x += dragDelta[0];
                totalShift.y += dragDelta[1];
              }
            }
          }
          r2.hoverData.draggingEles = true;
          draggedEles.silentShift(totalShift).emit(makeEvent("position")).emit(makeEvent("drag"));
          r2.redrawHint("drag", true);
          if (r2.touchData.startPosition[0] == earlier[0] && r2.touchData.startPosition[1] == earlier[1]) {
            r2.redrawHint("eles", true);
          }
          r2.redraw();
        } else {
          var dragDelta = r2.touchData.dragDelta = r2.touchData.dragDelta || [];
          if (dragDelta.length === 0) {
            dragDelta.push(disp[0]);
            dragDelta.push(disp[1]);
          } else {
            dragDelta[0] += disp[0];
            dragDelta[1] += disp[1];
          }
        }
      }
      {
        triggerEvents(start || near, ["touchmove", "tapdrag", "vmousemove"], e, {
          x: now[0],
          y: now[1]
        });
        if ((!start || !start.grabbed()) && near != last2) {
          if (last2) {
            last2.emit(makeEvent("tapdragout"));
          }
          if (near) {
            near.emit(makeEvent("tapdragover"));
          }
        }
        r2.touchData.last = near;
      }
      if (capture) {
        for (var i2 = 0; i2 < now.length; i2++) {
          if (now[i2] && r2.touchData.startPosition[i2] && isOverThresholdDrag) {
            r2.touchData.singleTouchMoved = true;
          }
        }
      }
      if (capture && (start == null || start.pannable()) && cy.panningEnabled() && cy.userPanningEnabled()) {
        var allowPassthrough = allowPanningPassthrough(start, r2.touchData.starts);
        if (allowPassthrough) {
          e.preventDefault();
          if (!r2.data.bgActivePosistion) {
            r2.data.bgActivePosistion = array2point(r2.touchData.startPosition);
          }
          if (r2.swipePanning) {
            cy.panBy({
              x: disp[0] * zoom2,
              y: disp[1] * zoom2
            });
            cy.emit(makeEvent("dragpan"));
          } else if (isOverThresholdDrag) {
            r2.swipePanning = true;
            cy.panBy({
              x: dx * zoom2,
              y: dy * zoom2
            });
            cy.emit(makeEvent("dragpan"));
            if (start) {
              start.unactivate();
              r2.redrawHint("select", true);
              r2.touchData.start = null;
            }
          }
        }
        var pos = r2.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
        now[0] = pos[0];
        now[1] = pos[1];
      }
    }
    for (var j2 = 0; j2 < now.length; j2++) {
      earlier[j2] = now[j2];
    }
    if (capture && e.touches.length > 0 && !r2.hoverData.draggingEles && !r2.swipePanning && r2.data.bgActivePosistion != null) {
      r2.data.bgActivePosistion = void 0;
      r2.redrawHint("select", true);
      r2.redraw();
    }
  }, false);
  var touchcancelHandler;
  r2.registerBinding(containerWindow, "touchcancel", touchcancelHandler = function touchcancelHandler2(e) {
    var start = r2.touchData.start;
    r2.touchData.capture = false;
    if (start) {
      start.unactivate();
    }
  });
  var touchendHandler, didDoubleTouch, touchTimeout, prevTouchTimeStamp;
  r2.registerBinding(containerWindow, "touchend", touchendHandler = function touchendHandler2(e) {
    var start = r2.touchData.start;
    var capture = r2.touchData.capture;
    if (capture) {
      if (e.touches.length === 0) {
        r2.touchData.capture = false;
      }
      e.preventDefault();
    } else {
      return;
    }
    var select = r2.selection;
    r2.swipePanning = false;
    r2.hoverData.draggingEles = false;
    var cy = r2.cy;
    var zoom2 = cy.zoom();
    var now = r2.touchData.now;
    var earlier = r2.touchData.earlier;
    if (e.touches[0]) {
      var pos = r2.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
      now[0] = pos[0];
      now[1] = pos[1];
    }
    if (e.touches[1]) {
      var pos = r2.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
      now[2] = pos[0];
      now[3] = pos[1];
    }
    if (e.touches[2]) {
      var pos = r2.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
      now[4] = pos[0];
      now[5] = pos[1];
    }
    var makeEvent = function makeEvent2(type2) {
      return {
        originalEvent: e,
        type: type2,
        position: {
          x: now[0],
          y: now[1]
        }
      };
    };
    if (start) {
      start.unactivate();
    }
    var ctxTapend;
    if (r2.touchData.cxt) {
      ctxTapend = makeEvent("cxttapend");
      if (start) {
        start.emit(ctxTapend);
      } else {
        cy.emit(ctxTapend);
      }
      if (!r2.touchData.cxtDragged) {
        var ctxTap = makeEvent("cxttap");
        if (start) {
          start.emit(ctxTap);
        } else {
          cy.emit(ctxTap);
        }
      }
      if (r2.touchData.start) {
        r2.touchData.start._private.grabbed = false;
      }
      r2.touchData.cxt = false;
      r2.touchData.start = null;
      r2.redraw();
      return;
    }
    if (!e.touches[2] && cy.boxSelectionEnabled() && r2.touchData.selecting) {
      r2.touchData.selecting = false;
      var box = cy.collection(r2.getAllInBox(select[0], select[1], select[2], select[3]));
      select[0] = void 0;
      select[1] = void 0;
      select[2] = void 0;
      select[3] = void 0;
      select[4] = 0;
      r2.redrawHint("select", true);
      cy.emit(makeEvent("boxend"));
      var eleWouldBeSelected = function eleWouldBeSelected2(ele) {
        return ele.selectable() && !ele.selected();
      };
      box.emit(makeEvent("box")).stdFilter(eleWouldBeSelected).select().emit(makeEvent("boxselect"));
      if (box.nonempty()) {
        r2.redrawHint("eles", true);
      }
      r2.redraw();
    }
    if (start != null) {
      start.unactivate();
    }
    if (e.touches[2]) {
      r2.data.bgActivePosistion = void 0;
      r2.redrawHint("select", true);
    } else if (e.touches[1]) ;
    else if (e.touches[0]) ;
    else if (!e.touches[0]) {
      r2.data.bgActivePosistion = void 0;
      r2.redrawHint("select", true);
      var draggedEles = r2.dragData.touchDragEles;
      if (start != null) {
        var startWasGrabbed = start._private.grabbed;
        freeDraggedElements(draggedEles);
        r2.redrawHint("drag", true);
        r2.redrawHint("eles", true);
        if (startWasGrabbed) {
          start.emit(makeEvent("freeon"));
          draggedEles.emit(makeEvent("free"));
          if (r2.dragData.didDrag) {
            start.emit(makeEvent("dragfreeon"));
            draggedEles.emit(makeEvent("dragfree"));
          }
        }
        triggerEvents(start, ["touchend", "tapend", "vmouseup", "tapdragout"], e, {
          x: now[0],
          y: now[1]
        });
        start.unactivate();
        r2.touchData.start = null;
      } else {
        var near = r2.findNearestElement(now[0], now[1], true, true);
        triggerEvents(near, ["touchend", "tapend", "vmouseup", "tapdragout"], e, {
          x: now[0],
          y: now[1]
        });
      }
      var dx = r2.touchData.startPosition[0] - now[0];
      var dx2 = dx * dx;
      var dy = r2.touchData.startPosition[1] - now[1];
      var dy2 = dy * dy;
      var dist22 = dx2 + dy2;
      var rdist2 = dist22 * zoom2 * zoom2;
      if (!r2.touchData.singleTouchMoved) {
        if (!start) {
          cy.$(":selected").unselect(["tapunselect"]);
        }
        triggerEvents(start, ["tap", "vclick"], e, {
          x: now[0],
          y: now[1]
        });
        didDoubleTouch = false;
        if (e.timeStamp - prevTouchTimeStamp <= cy.multiClickDebounceTime()) {
          touchTimeout && clearTimeout(touchTimeout);
          didDoubleTouch = true;
          prevTouchTimeStamp = null;
          triggerEvents(start, ["dbltap", "vdblclick"], e, {
            x: now[0],
            y: now[1]
          });
        } else {
          touchTimeout = setTimeout(function() {
            if (didDoubleTouch) return;
            triggerEvents(start, ["onetap", "voneclick"], e, {
              x: now[0],
              y: now[1]
            });
          }, cy.multiClickDebounceTime());
          prevTouchTimeStamp = e.timeStamp;
        }
      }
      if (start != null && !r2.dragData.didDrag && start._private.selectable && rdist2 < r2.touchTapThreshold2 && !r2.pinching) {
        if (cy.selectionType() === "single") {
          cy.$(isSelected).unmerge(start).unselect(["tapunselect"]);
          start.select(["tapselect"]);
        } else {
          if (start.selected()) {
            start.unselect(["tapunselect"]);
          } else {
            start.select(["tapselect"]);
          }
        }
        r2.redrawHint("eles", true);
      }
      r2.touchData.singleTouchMoved = true;
    }
    for (var j2 = 0; j2 < now.length; j2++) {
      earlier[j2] = now[j2];
    }
    r2.dragData.didDrag = false;
    if (e.touches.length === 0) {
      r2.touchData.dragDelta = [];
      r2.touchData.startPosition = [null, null, null, null, null, null];
      r2.touchData.startGPosition = null;
      r2.touchData.didSelect = false;
    }
    if (e.touches.length < 2) {
      if (e.touches.length === 1) {
        r2.touchData.startGPosition = [e.touches[0].clientX, e.touches[0].clientY];
      }
      r2.pinching = false;
      r2.redrawHint("eles", true);
      r2.redraw();
    }
  }, false);
  if (typeof TouchEvent === "undefined") {
    var pointers = [];
    var makeTouch = function makeTouch2(e) {
      return {
        clientX: e.clientX,
        clientY: e.clientY,
        force: 1,
        identifier: e.pointerId,
        pageX: e.pageX,
        pageY: e.pageY,
        radiusX: e.width / 2,
        radiusY: e.height / 2,
        screenX: e.screenX,
        screenY: e.screenY,
        target: e.target
      };
    };
    var makePointer = function makePointer2(e) {
      return {
        event: e,
        touch: makeTouch(e)
      };
    };
    var addPointer = function addPointer2(e) {
      pointers.push(makePointer(e));
    };
    var removePointer = function removePointer2(e) {
      for (var i2 = 0; i2 < pointers.length; i2++) {
        var p3 = pointers[i2];
        if (p3.event.pointerId === e.pointerId) {
          pointers.splice(i2, 1);
          return;
        }
      }
    };
    var updatePointer = function updatePointer2(e) {
      var p3 = pointers.filter(function(p4) {
        return p4.event.pointerId === e.pointerId;
      })[0];
      p3.event = e;
      p3.touch = makeTouch(e);
    };
    var addTouchesToEvent = function addTouchesToEvent2(e) {
      e.touches = pointers.map(function(p3) {
        return p3.touch;
      });
    };
    var pointerIsMouse = function pointerIsMouse2(e) {
      return e.pointerType === "mouse" || e.pointerType === 4;
    };
    r2.registerBinding(r2.container, "pointerdown", function(e) {
      if (pointerIsMouse(e)) {
        return;
      }
      e.preventDefault();
      addPointer(e);
      addTouchesToEvent(e);
      touchstartHandler(e);
    });
    r2.registerBinding(r2.container, "pointerup", function(e) {
      if (pointerIsMouse(e)) {
        return;
      }
      removePointer(e);
      addTouchesToEvent(e);
      touchendHandler(e);
    });
    r2.registerBinding(r2.container, "pointercancel", function(e) {
      if (pointerIsMouse(e)) {
        return;
      }
      removePointer(e);
      addTouchesToEvent(e);
      touchcancelHandler(e);
    });
    r2.registerBinding(r2.container, "pointermove", function(e) {
      if (pointerIsMouse(e)) {
        return;
      }
      e.preventDefault();
      updatePointer(e);
      addTouchesToEvent(e);
      touchmoveHandler(e);
    });
  }
};
var BRp$2 = {};
BRp$2.generatePolygon = function(name, points) {
  return this.nodeShapes[name] = {
    renderer: this,
    name,
    points,
    draw: function draw(context, centerX, centerY, width2, height2, cornerRadius) {
      this.renderer.nodeShapeImpl("polygon", context, centerX, centerY, width2, height2, this.points);
    },
    intersectLine: function intersectLine(nodeX, nodeY, width2, height2, x3, y3, padding, cornerRadius) {
      return polygonIntersectLine(x3, y3, this.points, nodeX, nodeY, width2 / 2, height2 / 2, padding);
    },
    checkPoint: function checkPoint(x3, y3, padding, width2, height2, centerX, centerY, cornerRadius) {
      return pointInsidePolygon(x3, y3, this.points, centerX, centerY, width2, height2, [0, -1], padding);
    },
    hasMiterBounds: name !== "rectangle",
    miterBounds: function miterBounds(centerX, centerY, width2, height2, strokeWidth, strokePosition) {
      return miterBox(this.points, centerX, centerY, width2, height2, strokeWidth);
    }
  };
};
BRp$2.generateEllipse = function() {
  return this.nodeShapes["ellipse"] = {
    renderer: this,
    name: "ellipse",
    draw: function draw(context, centerX, centerY, width2, height2, cornerRadius) {
      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width2, height2);
    },
    intersectLine: function intersectLine(nodeX, nodeY, width2, height2, x3, y3, padding, cornerRadius) {
      return intersectLineEllipse(x3, y3, nodeX, nodeY, width2 / 2 + padding, height2 / 2 + padding);
    },
    checkPoint: function checkPoint(x3, y3, padding, width2, height2, centerX, centerY, cornerRadius) {
      return checkInEllipse(x3, y3, width2, height2, centerX, centerY, padding);
    }
  };
};
BRp$2.generateRoundPolygon = function(name, points) {
  return this.nodeShapes[name] = {
    renderer: this,
    name,
    points,
    getOrCreateCorners: function getOrCreateCorners(centerX, centerY, width2, height2, cornerRadius, rs2, field) {
      if (rs2[field] !== void 0 && rs2[field + "-cx"] === centerX && rs2[field + "-cy"] === centerY) {
        return rs2[field];
      }
      rs2[field] = new Array(points.length / 2);
      rs2[field + "-cx"] = centerX;
      rs2[field + "-cy"] = centerY;
      var halfW = width2 / 2;
      var halfH = height2 / 2;
      cornerRadius = cornerRadius === "auto" ? getRoundPolygonRadius(width2, height2) : cornerRadius;
      var p3 = new Array(points.length / 2);
      for (var _i2 = 0; _i2 < points.length / 2; _i2++) {
        p3[_i2] = {
          x: centerX + halfW * points[_i2 * 2],
          y: centerY + halfH * points[_i2 * 2 + 1]
        };
      }
      var i2, p1, p22, p32, len = p3.length;
      p1 = p3[len - 1];
      for (i2 = 0; i2 < len; i2++) {
        p22 = p3[i2 % len];
        p32 = p3[(i2 + 1) % len];
        rs2[field][i2] = getRoundCorner(p1, p22, p32, cornerRadius);
        p1 = p22;
        p22 = p32;
      }
      return rs2[field];
    },
    draw: function draw(context, centerX, centerY, width2, height2, cornerRadius, rs2) {
      this.renderer.nodeShapeImpl("round-polygon", context, centerX, centerY, width2, height2, this.points, this.getOrCreateCorners(centerX, centerY, width2, height2, cornerRadius, rs2, "drawCorners"));
    },
    intersectLine: function intersectLine(nodeX, nodeY, width2, height2, x3, y3, padding, cornerRadius, rs2) {
      return roundPolygonIntersectLine(x3, y3, this.points, nodeX, nodeY, width2, height2, padding, this.getOrCreateCorners(nodeX, nodeY, width2, height2, cornerRadius, rs2, "corners"));
    },
    checkPoint: function checkPoint(x3, y3, padding, width2, height2, centerX, centerY, cornerRadius, rs2) {
      return pointInsideRoundPolygon(x3, y3, this.points, centerX, centerY, width2, height2, this.getOrCreateCorners(centerX, centerY, width2, height2, cornerRadius, rs2, "corners"));
    }
  };
};
BRp$2.generateRoundRectangle = function() {
  return this.nodeShapes["round-rectangle"] = this.nodeShapes["roundrectangle"] = {
    renderer: this,
    name: "round-rectangle",
    points: generateUnitNgonPointsFitToSquare(4, 0),
    draw: function draw(context, centerX, centerY, width2, height2, cornerRadius) {
      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width2, height2, this.points, cornerRadius);
    },
    intersectLine: function intersectLine(nodeX, nodeY, width2, height2, x3, y3, padding, cornerRadius) {
      return roundRectangleIntersectLine(x3, y3, nodeX, nodeY, width2, height2, padding, cornerRadius);
    },
    checkPoint: function checkPoint(x3, y3, padding, width2, height2, centerX, centerY, cornerRadius) {
      var halfWidth = width2 / 2;
      var halfHeight = height2 / 2;
      cornerRadius = cornerRadius === "auto" ? getRoundRectangleRadius(width2, height2) : cornerRadius;
      cornerRadius = Math.min(halfWidth, halfHeight, cornerRadius);
      var diam = cornerRadius * 2;
      if (pointInsidePolygon(x3, y3, this.points, centerX, centerY, width2, height2 - diam, [0, -1], padding)) {
        return true;
      }
      if (pointInsidePolygon(x3, y3, this.points, centerX, centerY, width2 - diam, height2, [0, -1], padding)) {
        return true;
      }
      if (checkInEllipse(x3, y3, diam, diam, centerX - halfWidth + cornerRadius, centerY - halfHeight + cornerRadius, padding)) {
        return true;
      }
      if (checkInEllipse(x3, y3, diam, diam, centerX + halfWidth - cornerRadius, centerY - halfHeight + cornerRadius, padding)) {
        return true;
      }
      if (checkInEllipse(x3, y3, diam, diam, centerX + halfWidth - cornerRadius, centerY + halfHeight - cornerRadius, padding)) {
        return true;
      }
      if (checkInEllipse(x3, y3, diam, diam, centerX - halfWidth + cornerRadius, centerY + halfHeight - cornerRadius, padding)) {
        return true;
      }
      return false;
    }
  };
};
BRp$2.generateCutRectangle = function() {
  return this.nodeShapes["cut-rectangle"] = this.nodeShapes["cutrectangle"] = {
    renderer: this,
    name: "cut-rectangle",
    cornerLength: getCutRectangleCornerLength(),
    points: generateUnitNgonPointsFitToSquare(4, 0),
    draw: function draw(context, centerX, centerY, width2, height2, cornerRadius) {
      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width2, height2, null, cornerRadius);
    },
    generateCutTrianglePts: function generateCutTrianglePts(width2, height2, centerX, centerY, cornerRadius) {
      var cl2 = cornerRadius === "auto" ? this.cornerLength : cornerRadius;
      var hh2 = height2 / 2;
      var hw = width2 / 2;
      var xBegin = centerX - hw;
      var xEnd = centerX + hw;
      var yBegin = centerY - hh2;
      var yEnd = centerY + hh2;
      return {
        topLeft: [xBegin, yBegin + cl2, xBegin + cl2, yBegin, xBegin + cl2, yBegin + cl2],
        topRight: [xEnd - cl2, yBegin, xEnd, yBegin + cl2, xEnd - cl2, yBegin + cl2],
        bottomRight: [xEnd, yEnd - cl2, xEnd - cl2, yEnd, xEnd - cl2, yEnd - cl2],
        bottomLeft: [xBegin + cl2, yEnd, xBegin, yEnd - cl2, xBegin + cl2, yEnd - cl2]
      };
    },
    intersectLine: function intersectLine(nodeX, nodeY, width2, height2, x3, y3, padding, cornerRadius) {
      var cPts = this.generateCutTrianglePts(width2 + 2 * padding, height2 + 2 * padding, nodeX, nodeY, cornerRadius);
      var pts2 = [].concat.apply([], [cPts.topLeft.splice(0, 4), cPts.topRight.splice(0, 4), cPts.bottomRight.splice(0, 4), cPts.bottomLeft.splice(0, 4)]);
      return polygonIntersectLine(x3, y3, pts2, nodeX, nodeY);
    },
    checkPoint: function checkPoint(x3, y3, padding, width2, height2, centerX, centerY, cornerRadius) {
      var cl2 = cornerRadius === "auto" ? this.cornerLength : cornerRadius;
      if (pointInsidePolygon(x3, y3, this.points, centerX, centerY, width2, height2 - 2 * cl2, [0, -1], padding)) {
        return true;
      }
      if (pointInsidePolygon(x3, y3, this.points, centerX, centerY, width2 - 2 * cl2, height2, [0, -1], padding)) {
        return true;
      }
      var cutTrianglePts = this.generateCutTrianglePts(width2, height2, centerX, centerY);
      return pointInsidePolygonPoints(x3, y3, cutTrianglePts.topLeft) || pointInsidePolygonPoints(x3, y3, cutTrianglePts.topRight) || pointInsidePolygonPoints(x3, y3, cutTrianglePts.bottomRight) || pointInsidePolygonPoints(x3, y3, cutTrianglePts.bottomLeft);
    }
  };
};
BRp$2.generateBarrel = function() {
  return this.nodeShapes["barrel"] = {
    renderer: this,
    name: "barrel",
    points: generateUnitNgonPointsFitToSquare(4, 0),
    draw: function draw(context, centerX, centerY, width2, height2, cornerRadius) {
      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width2, height2);
    },
    intersectLine: function intersectLine(nodeX, nodeY, width2, height2, x3, y3, padding, cornerRadius) {
      var t0 = 0.15;
      var t1 = 0.5;
      var t2 = 0.85;
      var bPts = this.generateBarrelBezierPts(width2 + 2 * padding, height2 + 2 * padding, nodeX, nodeY);
      var approximateBarrelCurvePts = function approximateBarrelCurvePts2(pts3) {
        var m0 = qbezierPtAt({
          x: pts3[0],
          y: pts3[1]
        }, {
          x: pts3[2],
          y: pts3[3]
        }, {
          x: pts3[4],
          y: pts3[5]
        }, t0);
        var m1 = qbezierPtAt({
          x: pts3[0],
          y: pts3[1]
        }, {
          x: pts3[2],
          y: pts3[3]
        }, {
          x: pts3[4],
          y: pts3[5]
        }, t1);
        var m2 = qbezierPtAt({
          x: pts3[0],
          y: pts3[1]
        }, {
          x: pts3[2],
          y: pts3[3]
        }, {
          x: pts3[4],
          y: pts3[5]
        }, t2);
        return [pts3[0], pts3[1], m0.x, m0.y, m1.x, m1.y, m2.x, m2.y, pts3[4], pts3[5]];
      };
      var pts2 = [].concat(approximateBarrelCurvePts(bPts.topLeft), approximateBarrelCurvePts(bPts.topRight), approximateBarrelCurvePts(bPts.bottomRight), approximateBarrelCurvePts(bPts.bottomLeft));
      return polygonIntersectLine(x3, y3, pts2, nodeX, nodeY);
    },
    generateBarrelBezierPts: function generateBarrelBezierPts(width2, height2, centerX, centerY) {
      var hh2 = height2 / 2;
      var hw = width2 / 2;
      var xBegin = centerX - hw;
      var xEnd = centerX + hw;
      var yBegin = centerY - hh2;
      var yEnd = centerY + hh2;
      var curveConstants = getBarrelCurveConstants(width2, height2);
      var hOffset = curveConstants.heightOffset;
      var wOffset = curveConstants.widthOffset;
      var ctrlPtXOffset = curveConstants.ctrlPtOffsetPct * width2;
      var pts2 = {
        topLeft: [xBegin, yBegin + hOffset, xBegin + ctrlPtXOffset, yBegin, xBegin + wOffset, yBegin],
        topRight: [xEnd - wOffset, yBegin, xEnd - ctrlPtXOffset, yBegin, xEnd, yBegin + hOffset],
        bottomRight: [xEnd, yEnd - hOffset, xEnd - ctrlPtXOffset, yEnd, xEnd - wOffset, yEnd],
        bottomLeft: [xBegin + wOffset, yEnd, xBegin + ctrlPtXOffset, yEnd, xBegin, yEnd - hOffset]
      };
      pts2.topLeft.isTop = true;
      pts2.topRight.isTop = true;
      pts2.bottomLeft.isBottom = true;
      pts2.bottomRight.isBottom = true;
      return pts2;
    },
    checkPoint: function checkPoint(x3, y3, padding, width2, height2, centerX, centerY, cornerRadius) {
      var curveConstants = getBarrelCurveConstants(width2, height2);
      var hOffset = curveConstants.heightOffset;
      var wOffset = curveConstants.widthOffset;
      if (pointInsidePolygon(x3, y3, this.points, centerX, centerY, width2, height2 - 2 * hOffset, [0, -1], padding)) {
        return true;
      }
      if (pointInsidePolygon(x3, y3, this.points, centerX, centerY, width2 - 2 * wOffset, height2, [0, -1], padding)) {
        return true;
      }
      var barrelCurvePts = this.generateBarrelBezierPts(width2, height2, centerX, centerY);
      var getCurveT = function getCurveT2(x4, y4, curvePts) {
        var x0 = curvePts[4];
        var x1 = curvePts[2];
        var x22 = curvePts[0];
        var y02 = curvePts[5];
        var y23 = curvePts[1];
        var xMin = Math.min(x0, x22);
        var xMax = Math.max(x0, x22);
        var yMin = Math.min(y02, y23);
        var yMax = Math.max(y02, y23);
        if (xMin <= x4 && x4 <= xMax && yMin <= y4 && y4 <= yMax) {
          var coeff = bezierPtsToQuadCoeff(x0, x1, x22);
          var roots = solveQuadratic(coeff[0], coeff[1], coeff[2], x4);
          var validRoots = roots.filter(function(r2) {
            return 0 <= r2 && r2 <= 1;
          });
          if (validRoots.length > 0) {
            return validRoots[0];
          }
        }
        return null;
      };
      var curveRegions = Object.keys(barrelCurvePts);
      for (var i2 = 0; i2 < curveRegions.length; i2++) {
        var corner = curveRegions[i2];
        var cornerPts = barrelCurvePts[corner];
        var t = getCurveT(x3, y3, cornerPts);
        if (t == null) {
          continue;
        }
        var y0 = cornerPts[5];
        var y1 = cornerPts[3];
        var y22 = cornerPts[1];
        var bezY = qbezierAt(y0, y1, y22, t);
        if (cornerPts.isTop && bezY <= y3) {
          return true;
        }
        if (cornerPts.isBottom && y3 <= bezY) {
          return true;
        }
      }
      return false;
    }
  };
};
BRp$2.generateBottomRoundrectangle = function() {
  return this.nodeShapes["bottom-round-rectangle"] = this.nodeShapes["bottomroundrectangle"] = {
    renderer: this,
    name: "bottom-round-rectangle",
    points: generateUnitNgonPointsFitToSquare(4, 0),
    draw: function draw(context, centerX, centerY, width2, height2, cornerRadius) {
      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width2, height2, this.points, cornerRadius);
    },
    intersectLine: function intersectLine(nodeX, nodeY, width2, height2, x3, y3, padding, cornerRadius) {
      var topStartX = nodeX - (width2 / 2 + padding);
      var topStartY = nodeY - (height2 / 2 + padding);
      var topEndY = topStartY;
      var topEndX = nodeX + (width2 / 2 + padding);
      var topIntersections = finiteLinesIntersect(x3, y3, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);
      if (topIntersections.length > 0) {
        return topIntersections;
      }
      return roundRectangleIntersectLine(x3, y3, nodeX, nodeY, width2, height2, padding, cornerRadius);
    },
    checkPoint: function checkPoint(x3, y3, padding, width2, height2, centerX, centerY, cornerRadius) {
      cornerRadius = cornerRadius === "auto" ? getRoundRectangleRadius(width2, height2) : cornerRadius;
      var diam = 2 * cornerRadius;
      if (pointInsidePolygon(x3, y3, this.points, centerX, centerY, width2, height2 - diam, [0, -1], padding)) {
        return true;
      }
      if (pointInsidePolygon(x3, y3, this.points, centerX, centerY, width2 - diam, height2, [0, -1], padding)) {
        return true;
      }
      var outerWidth = width2 / 2 + 2 * padding;
      var outerHeight = height2 / 2 + 2 * padding;
      var points = [centerX - outerWidth, centerY - outerHeight, centerX - outerWidth, centerY, centerX + outerWidth, centerY, centerX + outerWidth, centerY - outerHeight];
      if (pointInsidePolygonPoints(x3, y3, points)) {
        return true;
      }
      if (checkInEllipse(x3, y3, diam, diam, centerX + width2 / 2 - cornerRadius, centerY + height2 / 2 - cornerRadius, padding)) {
        return true;
      }
      if (checkInEllipse(x3, y3, diam, diam, centerX - width2 / 2 + cornerRadius, centerY + height2 / 2 - cornerRadius, padding)) {
        return true;
      }
      return false;
    }
  };
};
BRp$2.registerNodeShapes = function() {
  var nodeShapes = this.nodeShapes = {};
  var renderer3 = this;
  this.generateEllipse();
  this.generatePolygon("triangle", generateUnitNgonPointsFitToSquare(3, 0));
  this.generateRoundPolygon("round-triangle", generateUnitNgonPointsFitToSquare(3, 0));
  this.generatePolygon("rectangle", generateUnitNgonPointsFitToSquare(4, 0));
  nodeShapes["square"] = nodeShapes["rectangle"];
  this.generateRoundRectangle();
  this.generateCutRectangle();
  this.generateBarrel();
  this.generateBottomRoundrectangle();
  {
    var diamondPoints = [0, 1, 1, 0, 0, -1, -1, 0];
    this.generatePolygon("diamond", diamondPoints);
    this.generateRoundPolygon("round-diamond", diamondPoints);
  }
  this.generatePolygon("pentagon", generateUnitNgonPointsFitToSquare(5, 0));
  this.generateRoundPolygon("round-pentagon", generateUnitNgonPointsFitToSquare(5, 0));
  this.generatePolygon("hexagon", generateUnitNgonPointsFitToSquare(6, 0));
  this.generateRoundPolygon("round-hexagon", generateUnitNgonPointsFitToSquare(6, 0));
  this.generatePolygon("heptagon", generateUnitNgonPointsFitToSquare(7, 0));
  this.generateRoundPolygon("round-heptagon", generateUnitNgonPointsFitToSquare(7, 0));
  this.generatePolygon("octagon", generateUnitNgonPointsFitToSquare(8, 0));
  this.generateRoundPolygon("round-octagon", generateUnitNgonPointsFitToSquare(8, 0));
  var star5Points = new Array(20);
  {
    var outerPoints = generateUnitNgonPoints(5, 0);
    var innerPoints = generateUnitNgonPoints(5, Math.PI / 5);
    var innerRadius = 0.5 * (3 - Math.sqrt(5));
    innerRadius *= 1.57;
    for (var i2 = 0; i2 < innerPoints.length / 2; i2++) {
      innerPoints[i2 * 2] *= innerRadius;
      innerPoints[i2 * 2 + 1] *= innerRadius;
    }
    for (var i2 = 0; i2 < 20 / 4; i2++) {
      star5Points[i2 * 4] = outerPoints[i2 * 2];
      star5Points[i2 * 4 + 1] = outerPoints[i2 * 2 + 1];
      star5Points[i2 * 4 + 2] = innerPoints[i2 * 2];
      star5Points[i2 * 4 + 3] = innerPoints[i2 * 2 + 1];
    }
  }
  star5Points = fitPolygonToSquare(star5Points);
  this.generatePolygon("star", star5Points);
  this.generatePolygon("vee", [-1, -1, 0, -0.333, 1, -1, 0, 1]);
  this.generatePolygon("rhomboid", [-1, -1, 0.333, -1, 1, 1, -0.333, 1]);
  this.generatePolygon("right-rhomboid", [-0.333, -1, 1, -1, 0.333, 1, -1, 1]);
  this.nodeShapes["concavehexagon"] = this.generatePolygon("concave-hexagon", [-1, -0.95, -0.75, 0, -1, 0.95, 1, 0.95, 0.75, 0, 1, -0.95]);
  {
    var tagPoints = [-1, -1, 0.25, -1, 1, 0, 0.25, 1, -1, 1];
    this.generatePolygon("tag", tagPoints);
    this.generateRoundPolygon("round-tag", tagPoints);
  }
  nodeShapes.makePolygon = function(points) {
    var key = points.join("$");
    var name = "polygon-" + key;
    var shape;
    if (shape = this[name]) {
      return shape;
    }
    return renderer3.generatePolygon(name, points);
  };
};
var BRp$1 = {};
BRp$1.timeToRender = function() {
  return this.redrawTotalTime / this.redrawCount;
};
BRp$1.redraw = function(options3) {
  options3 = options3 || staticEmptyObject();
  var r2 = this;
  if (r2.averageRedrawTime === void 0) {
    r2.averageRedrawTime = 0;
  }
  if (r2.lastRedrawTime === void 0) {
    r2.lastRedrawTime = 0;
  }
  if (r2.lastDrawTime === void 0) {
    r2.lastDrawTime = 0;
  }
  r2.requestedFrame = true;
  r2.renderOptions = options3;
};
BRp$1.beforeRender = function(fn4, priority3) {
  if (this.destroyed) {
    return;
  }
  if (priority3 == null) {
    error("Priority is not optional for beforeRender");
  }
  var cbs = this.beforeRenderCallbacks;
  cbs.push({
    fn: fn4,
    priority: priority3
  });
  cbs.sort(function(a2, b2) {
    return b2.priority - a2.priority;
  });
};
var beforeRenderCallbacks = function beforeRenderCallbacks2(r2, willDraw, startTime) {
  var cbs = r2.beforeRenderCallbacks;
  for (var i2 = 0; i2 < cbs.length; i2++) {
    cbs[i2].fn(willDraw, startTime);
  }
};
BRp$1.startRenderLoop = function() {
  var r2 = this;
  var cy = r2.cy;
  if (r2.renderLoopStarted) {
    return;
  } else {
    r2.renderLoopStarted = true;
  }
  var _renderFn = function renderFn(requestTime) {
    if (r2.destroyed) {
      return;
    }
    if (cy.batching()) ;
    else if (r2.requestedFrame && !r2.skipFrame) {
      beforeRenderCallbacks(r2, true, requestTime);
      var startTime = performanceNow();
      r2.render(r2.renderOptions);
      var endTime = r2.lastDrawTime = performanceNow();
      if (r2.averageRedrawTime === void 0) {
        r2.averageRedrawTime = endTime - startTime;
      }
      if (r2.redrawCount === void 0) {
        r2.redrawCount = 0;
      }
      r2.redrawCount++;
      if (r2.redrawTotalTime === void 0) {
        r2.redrawTotalTime = 0;
      }
      var duration = endTime - startTime;
      r2.redrawTotalTime += duration;
      r2.lastRedrawTime = duration;
      r2.averageRedrawTime = r2.averageRedrawTime / 2 + duration / 2;
      r2.requestedFrame = false;
    } else {
      beforeRenderCallbacks(r2, false, requestTime);
    }
    r2.skipFrame = false;
    requestAnimationFrame2(_renderFn);
  };
  requestAnimationFrame2(_renderFn);
};
var BaseRenderer = function BaseRenderer2(options3) {
  this.init(options3);
};
var BR = BaseRenderer;
var BRp = BR.prototype;
BRp.clientFunctions = ["redrawHint", "render", "renderTo", "matchCanvasSize", "nodeShapeImpl", "arrowShapeImpl"];
BRp.init = function(options3) {
  var r2 = this;
  r2.options = options3;
  r2.cy = options3.cy;
  var ctr = r2.container = options3.cy.container();
  var containerWindow = r2.cy.window();
  if (containerWindow) {
    var document2 = containerWindow.document;
    var head = document2.head;
    var stylesheetId = "__________cytoscape_stylesheet";
    var className = "__________cytoscape_container";
    var stylesheetAlreadyExists = document2.getElementById(stylesheetId) != null;
    if (ctr.className.indexOf(className) < 0) {
      ctr.className = (ctr.className || "") + " " + className;
    }
    if (!stylesheetAlreadyExists) {
      var stylesheet3 = document2.createElement("style");
      stylesheet3.id = stylesheetId;
      stylesheet3.textContent = "." + className + " { position: relative; }";
      head.insertBefore(stylesheet3, head.children[0]);
    }
    var computedStyle = containerWindow.getComputedStyle(ctr);
    var position3 = computedStyle.getPropertyValue("position");
    if (position3 === "static") {
      warn("A Cytoscape container has style position:static and so can not use UI extensions properly");
    }
  }
  r2.selection = [void 0, void 0, void 0, void 0, 0];
  r2.bezierProjPcts = [0.05, 0.225, 0.4, 0.5, 0.6, 0.775, 0.95];
  r2.hoverData = {
    down: null,
    last: null,
    downTime: null,
    triggerMode: null,
    dragging: false,
    initialPan: [null, null],
    capture: false
  };
  r2.dragData = {
    possibleDragElements: []
  };
  r2.touchData = {
    start: null,
    capture: false,
    // These 3 fields related to tap, taphold events
    startPosition: [null, null, null, null, null, null],
    singleTouchStartTime: null,
    singleTouchMoved: true,
    now: [null, null, null, null, null, null],
    earlier: [null, null, null, null, null, null]
  };
  r2.redraws = 0;
  r2.showFps = options3.showFps;
  r2.debug = options3.debug;
  r2.webgl = options3.webgl;
  r2.hideEdgesOnViewport = options3.hideEdgesOnViewport;
  r2.textureOnViewport = options3.textureOnViewport;
  r2.wheelSensitivity = options3.wheelSensitivity;
  r2.motionBlurEnabled = options3.motionBlur;
  r2.forcedPixelRatio = number$1(options3.pixelRatio) ? options3.pixelRatio : null;
  r2.motionBlur = options3.motionBlur;
  r2.motionBlurOpacity = options3.motionBlurOpacity;
  r2.motionBlurTransparency = 1 - r2.motionBlurOpacity;
  r2.motionBlurPxRatio = 1;
  r2.mbPxRBlurry = 1;
  r2.minMbLowQualFrames = 4;
  r2.fullQualityMb = false;
  r2.clearedForMotionBlur = [];
  r2.desktopTapThreshold = options3.desktopTapThreshold;
  r2.desktopTapThreshold2 = options3.desktopTapThreshold * options3.desktopTapThreshold;
  r2.touchTapThreshold = options3.touchTapThreshold;
  r2.touchTapThreshold2 = options3.touchTapThreshold * options3.touchTapThreshold;
  r2.tapholdDuration = 500;
  r2.bindings = [];
  r2.beforeRenderCallbacks = [];
  r2.beforeRenderPriorities = {
    // higher priority execs before lower one
    animations: 400,
    eleCalcs: 300,
    eleTxrDeq: 200,
    lyrTxrDeq: 150,
    lyrTxrSkip: 100
  };
  r2.registerNodeShapes();
  r2.registerArrowShapes();
  r2.registerCalculationListeners();
};
BRp.notify = function(eventName, eles) {
  var r2 = this;
  var cy = r2.cy;
  if (this.destroyed) {
    return;
  }
  if (eventName === "init") {
    r2.load();
    return;
  }
  if (eventName === "destroy") {
    r2.destroy();
    return;
  }
  if (eventName === "add" || eventName === "remove" || eventName === "move" && cy.hasCompoundNodes() || eventName === "load" || eventName === "zorder" || eventName === "mount") {
    r2.invalidateCachedZSortedEles();
  }
  if (eventName === "viewport") {
    r2.redrawHint("select", true);
  }
  if (eventName === "gc") {
    r2.redrawHint("gc", true);
  }
  if (eventName === "load" || eventName === "resize" || eventName === "mount") {
    r2.invalidateContainerClientCoordsCache();
    r2.matchCanvasSize(r2.container);
  }
  r2.redrawHint("eles", true);
  r2.redrawHint("drag", true);
  this.startRenderLoop();
  this.redraw();
};
BRp.destroy = function() {
  var r2 = this;
  r2.destroyed = true;
  r2.cy.stopAnimationLoop();
  for (var i2 = 0; i2 < r2.bindings.length; i2++) {
    var binding = r2.bindings[i2];
    var b2 = binding;
    var tgt = b2.target;
    (tgt.off || tgt.removeEventListener).apply(tgt, b2.args);
  }
  r2.bindings = [];
  r2.beforeRenderCallbacks = [];
  r2.onUpdateEleCalcsFns = [];
  if (r2.removeObserver) {
    r2.removeObserver.disconnect();
  }
  if (r2.styleObserver) {
    r2.styleObserver.disconnect();
  }
  if (r2.resizeObserver) {
    r2.resizeObserver.disconnect();
  }
  if (r2.labelCalcDiv) {
    try {
      document.body.removeChild(r2.labelCalcDiv);
    } catch (e) {
    }
  }
};
BRp.isHeadless = function() {
  return false;
};
[BRp$f, BRp$5, BRp$4, BRp$3, BRp$2, BRp$1].forEach(function(props) {
  extend(BRp, props);
});
var fullFpsTime = 1e3 / 60;
var defs = {
  setupDequeueing: function setupDequeueing(opts) {
    return function setupDequeueingImpl() {
      var self2 = this;
      var r2 = this.renderer;
      if (self2.dequeueingSetup) {
        return;
      } else {
        self2.dequeueingSetup = true;
      }
      var queueRedraw = debounce(function() {
        r2.redrawHint("eles", true);
        r2.redrawHint("drag", true);
        r2.redraw();
      }, opts.deqRedrawThreshold);
      var dequeue = function dequeue2(willDraw, frameStartTime) {
        var startTime = performanceNow();
        var avgRenderTime = r2.averageRedrawTime;
        var renderTime = r2.lastRedrawTime;
        var deqd = [];
        var extent2 = r2.cy.extent();
        var pixelRatio = r2.getPixelRatio();
        if (!willDraw) {
          r2.flushRenderedStyleQueue();
        }
        while (true) {
          var now = performanceNow();
          var duration = now - startTime;
          var frameDuration = now - frameStartTime;
          if (renderTime < fullFpsTime) {
            var timeAvailable = fullFpsTime - (willDraw ? avgRenderTime : 0);
            if (frameDuration >= opts.deqFastCost * timeAvailable) {
              break;
            }
          } else {
            if (willDraw) {
              if (duration >= opts.deqCost * renderTime || duration >= opts.deqAvgCost * avgRenderTime) {
                break;
              }
            } else if (frameDuration >= opts.deqNoDrawCost * fullFpsTime) {
              break;
            }
          }
          var thisDeqd = opts.deq(self2, pixelRatio, extent2);
          if (thisDeqd.length > 0) {
            for (var i2 = 0; i2 < thisDeqd.length; i2++) {
              deqd.push(thisDeqd[i2]);
            }
          } else {
            break;
          }
        }
        if (deqd.length > 0) {
          opts.onDeqd(self2, deqd);
          if (!willDraw && opts.shouldRedraw(self2, deqd, pixelRatio, extent2)) {
            queueRedraw();
          }
        }
      };
      var priority3 = opts.priority || noop$1;
      r2.beforeRender(dequeue, priority3(self2));
    };
  }
};
var ElementTextureCacheLookup = function() {
  function ElementTextureCacheLookup2(getKey3) {
    var doesEleInvalidateKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : falsify;
    _classCallCheck(this, ElementTextureCacheLookup2);
    this.idsByKey = new Map$1();
    this.keyForId = new Map$1();
    this.cachesByLvl = new Map$1();
    this.lvls = [];
    this.getKey = getKey3;
    this.doesEleInvalidateKey = doesEleInvalidateKey;
  }
  return _createClass(ElementTextureCacheLookup2, [{
    key: "getIdsFor",
    value: function getIdsFor(key) {
      if (key == null) {
        error("Can not get id list for null key");
      }
      var idsByKey = this.idsByKey;
      var ids = this.idsByKey.get(key);
      if (!ids) {
        ids = new Set$1();
        idsByKey.set(key, ids);
      }
      return ids;
    }
  }, {
    key: "addIdForKey",
    value: function addIdForKey(key, id2) {
      if (key != null) {
        this.getIdsFor(key).add(id2);
      }
    }
  }, {
    key: "deleteIdForKey",
    value: function deleteIdForKey(key, id2) {
      if (key != null) {
        this.getIdsFor(key)["delete"](id2);
      }
    }
  }, {
    key: "getNumberOfIdsForKey",
    value: function getNumberOfIdsForKey(key) {
      if (key == null) {
        return 0;
      } else {
        return this.getIdsFor(key).size;
      }
    }
  }, {
    key: "updateKeyMappingFor",
    value: function updateKeyMappingFor(ele) {
      var id2 = ele.id();
      var prevKey = this.keyForId.get(id2);
      var currKey = this.getKey(ele);
      this.deleteIdForKey(prevKey, id2);
      this.addIdForKey(currKey, id2);
      this.keyForId.set(id2, currKey);
    }
  }, {
    key: "deleteKeyMappingFor",
    value: function deleteKeyMappingFor(ele) {
      var id2 = ele.id();
      var prevKey = this.keyForId.get(id2);
      this.deleteIdForKey(prevKey, id2);
      this.keyForId["delete"](id2);
    }
  }, {
    key: "keyHasChangedFor",
    value: function keyHasChangedFor(ele) {
      var id2 = ele.id();
      var prevKey = this.keyForId.get(id2);
      var newKey = this.getKey(ele);
      return prevKey !== newKey;
    }
  }, {
    key: "isInvalid",
    value: function isInvalid(ele) {
      return this.keyHasChangedFor(ele) || this.doesEleInvalidateKey(ele);
    }
  }, {
    key: "getCachesAt",
    value: function getCachesAt(lvl) {
      var cachesByLvl = this.cachesByLvl, lvls = this.lvls;
      var caches = cachesByLvl.get(lvl);
      if (!caches) {
        caches = new Map$1();
        cachesByLvl.set(lvl, caches);
        lvls.push(lvl);
      }
      return caches;
    }
  }, {
    key: "getCache",
    value: function getCache(key, lvl) {
      return this.getCachesAt(lvl).get(key);
    }
  }, {
    key: "get",
    value: function get2(ele, lvl) {
      var key = this.getKey(ele);
      var cache3 = this.getCache(key, lvl);
      if (cache3 != null) {
        this.updateKeyMappingFor(ele);
      }
      return cache3;
    }
  }, {
    key: "getForCachedKey",
    value: function getForCachedKey(ele, lvl) {
      var key = this.keyForId.get(ele.id());
      var cache3 = this.getCache(key, lvl);
      return cache3;
    }
  }, {
    key: "hasCache",
    value: function hasCache(key, lvl) {
      return this.getCachesAt(lvl).has(key);
    }
  }, {
    key: "has",
    value: function has(ele, lvl) {
      var key = this.getKey(ele);
      return this.hasCache(key, lvl);
    }
  }, {
    key: "setCache",
    value: function setCache(key, lvl, cache3) {
      cache3.key = key;
      this.getCachesAt(lvl).set(key, cache3);
    }
  }, {
    key: "set",
    value: function set2(ele, lvl, cache3) {
      var key = this.getKey(ele);
      this.setCache(key, lvl, cache3);
      this.updateKeyMappingFor(ele);
    }
  }, {
    key: "deleteCache",
    value: function deleteCache(key, lvl) {
      this.getCachesAt(lvl)["delete"](key);
    }
  }, {
    key: "delete",
    value: function _delete(ele, lvl) {
      var key = this.getKey(ele);
      this.deleteCache(key, lvl);
    }
  }, {
    key: "invalidateKey",
    value: function invalidateKey(key) {
      var _this = this;
      this.lvls.forEach(function(lvl) {
        return _this.deleteCache(key, lvl);
      });
    }
    // returns true if no other eles reference the invalidated cache (n.b. other eles may need the cache with the same key)
  }, {
    key: "invalidate",
    value: function invalidate(ele) {
      var id2 = ele.id();
      var key = this.keyForId.get(id2);
      this.deleteKeyMappingFor(ele);
      var entireKeyInvalidated = this.doesEleInvalidateKey(ele);
      if (entireKeyInvalidated) {
        this.invalidateKey(key);
      }
      return entireKeyInvalidated || this.getNumberOfIdsForKey(key) === 0;
    }
  }]);
}();
var minTxrH = 25;
var txrStepH = 50;
var minLvl$1 = -4;
var maxLvl$1 = 3;
var maxZoom$1 = 7.99;
var eleTxrSpacing = 8;
var defTxrWidth = 1024;
var maxTxrW = 1024;
var maxTxrH = 1024;
var minUtility = 0.2;
var maxFullness = 0.8;
var maxFullnessChecks = 10;
var deqCost$1 = 0.15;
var deqAvgCost$1 = 0.1;
var deqNoDrawCost$1 = 0.9;
var deqFastCost$1 = 0.9;
var deqRedrawThreshold$1 = 100;
var maxDeqSize$1 = 1;
var getTxrReasons = {
  dequeue: "dequeue",
  downscale: "downscale",
  highQuality: "highQuality"
};
var initDefaults = defaults$g({
  getKey: null,
  doesEleInvalidateKey: falsify,
  drawElement: null,
  getBoundingBox: null,
  getRotationPoint: null,
  getRotationOffset: null,
  isVisible: trueify,
  allowEdgeTxrCaching: true,
  allowParentTxrCaching: true
});
var ElementTextureCache = function ElementTextureCache2(renderer3, initOptions) {
  var self2 = this;
  self2.renderer = renderer3;
  self2.onDequeues = [];
  var opts = initDefaults(initOptions);
  extend(self2, opts);
  self2.lookup = new ElementTextureCacheLookup(opts.getKey, opts.doesEleInvalidateKey);
  self2.setupDequeueing();
};
var ETCp = ElementTextureCache.prototype;
ETCp.reasons = getTxrReasons;
ETCp.getTextureQueue = function(txrH) {
  var self2 = this;
  self2.eleImgCaches = self2.eleImgCaches || {};
  return self2.eleImgCaches[txrH] = self2.eleImgCaches[txrH] || [];
};
ETCp.getRetiredTextureQueue = function(txrH) {
  var self2 = this;
  var rtxtrQs = self2.eleImgCaches.retired = self2.eleImgCaches.retired || {};
  var rtxtrQ = rtxtrQs[txrH] = rtxtrQs[txrH] || [];
  return rtxtrQ;
};
ETCp.getElementQueue = function() {
  var self2 = this;
  var q2 = self2.eleCacheQueue = self2.eleCacheQueue || new Heap(function(a2, b2) {
    return b2.reqs - a2.reqs;
  });
  return q2;
};
ETCp.getElementKeyToQueue = function() {
  var self2 = this;
  var k2q = self2.eleKeyToCacheQueue = self2.eleKeyToCacheQueue || {};
  return k2q;
};
ETCp.getElement = function(ele, bb, pxRatio, lvl, reason) {
  var self2 = this;
  var r2 = this.renderer;
  var zoom2 = r2.cy.zoom();
  var lookup2 = this.lookup;
  if (!bb || bb.w === 0 || bb.h === 0 || isNaN(bb.w) || isNaN(bb.h) || !ele.visible() || ele.removed()) {
    return null;
  }
  if (!self2.allowEdgeTxrCaching && ele.isEdge() || !self2.allowParentTxrCaching && ele.isParent()) {
    return null;
  }
  if (lvl == null) {
    lvl = Math.ceil(log2(zoom2 * pxRatio));
  }
  if (lvl < minLvl$1) {
    lvl = minLvl$1;
  } else if (zoom2 >= maxZoom$1 || lvl > maxLvl$1) {
    return null;
  }
  var scale2 = Math.pow(2, lvl);
  var eleScaledH = bb.h * scale2;
  var eleScaledW = bb.w * scale2;
  var scaledLabelShown = r2.eleTextBiggerThanMin(ele, scale2);
  if (!this.isVisible(ele, scaledLabelShown)) {
    return null;
  }
  var eleCache = lookup2.get(ele, lvl);
  if (eleCache && eleCache.invalidated) {
    eleCache.invalidated = false;
    eleCache.texture.invalidatedWidth -= eleCache.width;
  }
  if (eleCache) {
    return eleCache;
  }
  var txrH;
  if (eleScaledH <= minTxrH) {
    txrH = minTxrH;
  } else if (eleScaledH <= txrStepH) {
    txrH = txrStepH;
  } else {
    txrH = Math.ceil(eleScaledH / txrStepH) * txrStepH;
  }
  if (eleScaledH > maxTxrH || eleScaledW > maxTxrW) {
    return null;
  }
  var txrQ = self2.getTextureQueue(txrH);
  var txr = txrQ[txrQ.length - 2];
  var addNewTxr = function addNewTxr2() {
    return self2.recycleTexture(txrH, eleScaledW) || self2.addTexture(txrH, eleScaledW);
  };
  if (!txr) {
    txr = txrQ[txrQ.length - 1];
  }
  if (!txr) {
    txr = addNewTxr();
  }
  if (txr.width - txr.usedWidth < eleScaledW) {
    txr = addNewTxr();
  }
  var scalableFrom = function scalableFrom2(otherCache) {
    return otherCache && otherCache.scaledLabelShown === scaledLabelShown;
  };
  var deqing = reason && reason === getTxrReasons.dequeue;
  var highQualityReq = reason && reason === getTxrReasons.highQuality;
  var downscaleReq = reason && reason === getTxrReasons.downscale;
  var higherCache;
  for (var l2 = lvl + 1; l2 <= maxLvl$1; l2++) {
    var c2 = lookup2.get(ele, l2);
    if (c2) {
      higherCache = c2;
      break;
    }
  }
  var oneUpCache = higherCache && higherCache.level === lvl + 1 ? higherCache : null;
  var downscale = function downscale2() {
    txr.context.drawImage(oneUpCache.texture.canvas, oneUpCache.x, 0, oneUpCache.width, oneUpCache.height, txr.usedWidth, 0, eleScaledW, eleScaledH);
  };
  txr.context.setTransform(1, 0, 0, 1, 0, 0);
  txr.context.clearRect(txr.usedWidth, 0, eleScaledW, txrH);
  if (scalableFrom(oneUpCache)) {
    downscale();
  } else if (scalableFrom(higherCache)) {
    if (highQualityReq) {
      for (var _l2 = higherCache.level; _l2 > lvl; _l2--) {
        oneUpCache = self2.getElement(ele, bb, pxRatio, _l2, getTxrReasons.downscale);
      }
      downscale();
    } else {
      self2.queueElement(ele, higherCache.level - 1);
      return higherCache;
    }
  } else {
    var lowerCache;
    if (!deqing && !highQualityReq && !downscaleReq) {
      for (var _l22 = lvl - 1; _l22 >= minLvl$1; _l22--) {
        var _c2 = lookup2.get(ele, _l22);
        if (_c2) {
          lowerCache = _c2;
          break;
        }
      }
    }
    if (scalableFrom(lowerCache)) {
      self2.queueElement(ele, lvl);
      return lowerCache;
    }
    txr.context.translate(txr.usedWidth, 0);
    txr.context.scale(scale2, scale2);
    this.drawElement(txr.context, ele, bb, scaledLabelShown, false);
    txr.context.scale(1 / scale2, 1 / scale2);
    txr.context.translate(-txr.usedWidth, 0);
  }
  eleCache = {
    x: txr.usedWidth,
    texture: txr,
    level: lvl,
    scale: scale2,
    width: eleScaledW,
    height: eleScaledH,
    scaledLabelShown
  };
  txr.usedWidth += Math.ceil(eleScaledW + eleTxrSpacing);
  txr.eleCaches.push(eleCache);
  lookup2.set(ele, lvl, eleCache);
  self2.checkTextureFullness(txr);
  return eleCache;
};
ETCp.invalidateElements = function(eles) {
  for (var i2 = 0; i2 < eles.length; i2++) {
    this.invalidateElement(eles[i2]);
  }
};
ETCp.invalidateElement = function(ele) {
  var self2 = this;
  var lookup2 = self2.lookup;
  var caches = [];
  var invalid = lookup2.isInvalid(ele);
  if (!invalid) {
    return;
  }
  for (var lvl = minLvl$1; lvl <= maxLvl$1; lvl++) {
    var cache3 = lookup2.getForCachedKey(ele, lvl);
    if (cache3) {
      caches.push(cache3);
    }
  }
  var noOtherElesUseCache = lookup2.invalidate(ele);
  if (noOtherElesUseCache) {
    for (var i2 = 0; i2 < caches.length; i2++) {
      var _cache = caches[i2];
      var txr = _cache.texture;
      txr.invalidatedWidth += _cache.width;
      _cache.invalidated = true;
      self2.checkTextureUtility(txr);
    }
  }
  self2.removeFromQueue(ele);
};
ETCp.checkTextureUtility = function(txr) {
  if (txr.invalidatedWidth >= minUtility * txr.width) {
    this.retireTexture(txr);
  }
};
ETCp.checkTextureFullness = function(txr) {
  var self2 = this;
  var txrQ = self2.getTextureQueue(txr.height);
  if (txr.usedWidth / txr.width > maxFullness && txr.fullnessChecks >= maxFullnessChecks) {
    removeFromArray(txrQ, txr);
  } else {
    txr.fullnessChecks++;
  }
};
ETCp.retireTexture = function(txr) {
  var self2 = this;
  var txrH = txr.height;
  var txrQ = self2.getTextureQueue(txrH);
  var lookup2 = this.lookup;
  removeFromArray(txrQ, txr);
  txr.retired = true;
  var eleCaches = txr.eleCaches;
  for (var i2 = 0; i2 < eleCaches.length; i2++) {
    var eleCache = eleCaches[i2];
    lookup2.deleteCache(eleCache.key, eleCache.level);
  }
  clearArray(eleCaches);
  var rtxtrQ = self2.getRetiredTextureQueue(txrH);
  rtxtrQ.push(txr);
};
ETCp.addTexture = function(txrH, minW) {
  var self2 = this;
  var txrQ = self2.getTextureQueue(txrH);
  var txr = {};
  txrQ.push(txr);
  txr.eleCaches = [];
  txr.height = txrH;
  txr.width = Math.max(defTxrWidth, minW);
  txr.usedWidth = 0;
  txr.invalidatedWidth = 0;
  txr.fullnessChecks = 0;
  txr.canvas = self2.renderer.makeOffscreenCanvas(txr.width, txr.height);
  txr.context = txr.canvas.getContext("2d");
  return txr;
};
ETCp.recycleTexture = function(txrH, minW) {
  var self2 = this;
  var txrQ = self2.getTextureQueue(txrH);
  var rtxtrQ = self2.getRetiredTextureQueue(txrH);
  for (var i2 = 0; i2 < rtxtrQ.length; i2++) {
    var txr = rtxtrQ[i2];
    if (txr.width >= minW) {
      txr.retired = false;
      txr.usedWidth = 0;
      txr.invalidatedWidth = 0;
      txr.fullnessChecks = 0;
      clearArray(txr.eleCaches);
      txr.context.setTransform(1, 0, 0, 1, 0, 0);
      txr.context.clearRect(0, 0, txr.width, txr.height);
      removeFromArray(rtxtrQ, txr);
      txrQ.push(txr);
      return txr;
    }
  }
};
ETCp.queueElement = function(ele, lvl) {
  var self2 = this;
  var q2 = self2.getElementQueue();
  var k2q = self2.getElementKeyToQueue();
  var key = this.getKey(ele);
  var existingReq = k2q[key];
  if (existingReq) {
    existingReq.level = Math.max(existingReq.level, lvl);
    existingReq.eles.merge(ele);
    existingReq.reqs++;
    q2.updateItem(existingReq);
  } else {
    var req = {
      eles: ele.spawn().merge(ele),
      level: lvl,
      reqs: 1,
      key
    };
    q2.push(req);
    k2q[key] = req;
  }
};
ETCp.dequeue = function(pxRatio) {
  var self2 = this;
  var q2 = self2.getElementQueue();
  var k2q = self2.getElementKeyToQueue();
  var dequeued = [];
  var lookup2 = self2.lookup;
  for (var i2 = 0; i2 < maxDeqSize$1; i2++) {
    if (q2.size() > 0) {
      var req = q2.pop();
      var key = req.key;
      var ele = req.eles[0];
      var cacheExists = lookup2.hasCache(ele, req.level);
      k2q[key] = null;
      if (cacheExists) {
        continue;
      }
      dequeued.push(req);
      var bb = self2.getBoundingBox(ele);
      self2.getElement(ele, bb, pxRatio, req.level, getTxrReasons.dequeue);
    } else {
      break;
    }
  }
  return dequeued;
};
ETCp.removeFromQueue = function(ele) {
  var self2 = this;
  var q2 = self2.getElementQueue();
  var k2q = self2.getElementKeyToQueue();
  var key = this.getKey(ele);
  var req = k2q[key];
  if (req != null) {
    if (req.eles.length === 1) {
      req.reqs = MAX_INT$1;
      q2.updateItem(req);
      q2.pop();
      k2q[key] = null;
    } else {
      req.eles.unmerge(ele);
    }
  }
};
ETCp.onDequeue = function(fn4) {
  this.onDequeues.push(fn4);
};
ETCp.offDequeue = function(fn4) {
  removeFromArray(this.onDequeues, fn4);
};
ETCp.setupDequeueing = defs.setupDequeueing({
  deqRedrawThreshold: deqRedrawThreshold$1,
  deqCost: deqCost$1,
  deqAvgCost: deqAvgCost$1,
  deqNoDrawCost: deqNoDrawCost$1,
  deqFastCost: deqFastCost$1,
  deq: function deq(self2, pxRatio, extent2) {
    return self2.dequeue(pxRatio, extent2);
  },
  onDeqd: function onDeqd(self2, deqd) {
    for (var i2 = 0; i2 < self2.onDequeues.length; i2++) {
      var fn4 = self2.onDequeues[i2];
      fn4(deqd);
    }
  },
  shouldRedraw: function shouldRedraw(self2, deqd, pxRatio, extent2) {
    for (var i2 = 0; i2 < deqd.length; i2++) {
      var eles = deqd[i2].eles;
      for (var j2 = 0; j2 < eles.length; j2++) {
        var bb = eles[j2].boundingBox();
        if (boundingBoxesIntersect(bb, extent2)) {
          return true;
        }
      }
    }
    return false;
  },
  priority: function priority(self2) {
    return self2.renderer.beforeRenderPriorities.eleTxrDeq;
  }
});
var defNumLayers = 1;
var minLvl = -4;
var maxLvl = 2;
var maxZoom2 = 3.99;
var deqRedrawThreshold = 50;
var refineEleDebounceTime = 50;
var deqCost = 0.15;
var deqAvgCost = 0.1;
var deqNoDrawCost = 0.9;
var deqFastCost = 0.9;
var maxDeqSize = 1;
var invalidThreshold = 250;
var maxLayerArea = 4e3 * 4e3;
var maxLayerDim = 32767;
var useHighQualityEleTxrReqs = true;
var LayeredTextureCache = function LayeredTextureCache2(renderer3) {
  var self2 = this;
  var r2 = self2.renderer = renderer3;
  var cy = r2.cy;
  self2.layersByLevel = {};
  self2.firstGet = true;
  self2.lastInvalidationTime = performanceNow() - 2 * invalidThreshold;
  self2.skipping = false;
  self2.eleTxrDeqs = cy.collection();
  self2.scheduleElementRefinement = debounce(function() {
    self2.refineElementTextures(self2.eleTxrDeqs);
    self2.eleTxrDeqs.unmerge(self2.eleTxrDeqs);
  }, refineEleDebounceTime);
  r2.beforeRender(function(willDraw, now) {
    if (now - self2.lastInvalidationTime <= invalidThreshold) {
      self2.skipping = true;
    } else {
      self2.skipping = false;
    }
  }, r2.beforeRenderPriorities.lyrTxrSkip);
  var qSort = function qSort2(a2, b2) {
    return b2.reqs - a2.reqs;
  };
  self2.layersQueue = new Heap(qSort);
  self2.setupDequeueing();
};
var LTCp = LayeredTextureCache.prototype;
var layerIdPool = 0;
var MAX_INT = Math.pow(2, 53) - 1;
LTCp.makeLayer = function(bb, lvl) {
  var scale2 = Math.pow(2, lvl);
  var w2 = Math.ceil(bb.w * scale2);
  var h2 = Math.ceil(bb.h * scale2);
  var canvas = this.renderer.makeOffscreenCanvas(w2, h2);
  var layer = {
    id: layerIdPool = ++layerIdPool % MAX_INT,
    bb,
    level: lvl,
    width: w2,
    height: h2,
    canvas,
    context: canvas.getContext("2d"),
    eles: [],
    elesQueue: [],
    reqs: 0
  };
  var cxt = layer.context;
  var dx = -layer.bb.x1;
  var dy = -layer.bb.y1;
  cxt.scale(scale2, scale2);
  cxt.translate(dx, dy);
  return layer;
};
LTCp.getLayers = function(eles, pxRatio, lvl) {
  var self2 = this;
  var r2 = self2.renderer;
  var cy = r2.cy;
  var zoom2 = cy.zoom();
  var firstGet = self2.firstGet;
  self2.firstGet = false;
  if (lvl == null) {
    lvl = Math.ceil(log2(zoom2 * pxRatio));
    if (lvl < minLvl) {
      lvl = minLvl;
    } else if (zoom2 >= maxZoom2 || lvl > maxLvl) {
      return null;
    }
  }
  self2.validateLayersElesOrdering(lvl, eles);
  var layersByLvl = self2.layersByLevel;
  var scale2 = Math.pow(2, lvl);
  var layers = layersByLvl[lvl] = layersByLvl[lvl] || [];
  var bb;
  var lvlComplete = self2.levelIsComplete(lvl, eles);
  var tmpLayers;
  var checkTempLevels = function checkTempLevels2() {
    var canUseAsTmpLvl = function canUseAsTmpLvl2(l2) {
      self2.validateLayersElesOrdering(l2, eles);
      if (self2.levelIsComplete(l2, eles)) {
        tmpLayers = layersByLvl[l2];
        return true;
      }
    };
    var checkLvls = function checkLvls2(dir) {
      if (tmpLayers) {
        return;
      }
      for (var l2 = lvl + dir; minLvl <= l2 && l2 <= maxLvl; l2 += dir) {
        if (canUseAsTmpLvl(l2)) {
          break;
        }
      }
    };
    checkLvls(1);
    checkLvls(-1);
    for (var i3 = layers.length - 1; i3 >= 0; i3--) {
      var layer2 = layers[i3];
      if (layer2.invalid) {
        removeFromArray(layers, layer2);
      }
    }
  };
  if (!lvlComplete) {
    checkTempLevels();
  } else {
    return layers;
  }
  var getBb = function getBb2() {
    if (!bb) {
      bb = makeBoundingBox();
      for (var i3 = 0; i3 < eles.length; i3++) {
        updateBoundingBox(bb, eles[i3].boundingBox());
      }
    }
    return bb;
  };
  var makeLayer = function makeLayer2(opts) {
    opts = opts || {};
    var after = opts.after;
    getBb();
    var w2 = Math.ceil(bb.w * scale2);
    var h2 = Math.ceil(bb.h * scale2);
    if (w2 > maxLayerDim || h2 > maxLayerDim) {
      return null;
    }
    var area = w2 * h2;
    if (area > maxLayerArea) {
      return null;
    }
    var layer2 = self2.makeLayer(bb, lvl);
    if (after != null) {
      var index = layers.indexOf(after) + 1;
      layers.splice(index, 0, layer2);
    } else if (opts.insert === void 0 || opts.insert) {
      layers.unshift(layer2);
    }
    return layer2;
  };
  if (self2.skipping && !firstGet) {
    return null;
  }
  var layer = null;
  var maxElesPerLayer = eles.length / defNumLayers;
  var allowLazyQueueing = !firstGet;
  for (var i2 = 0; i2 < eles.length; i2++) {
    var ele = eles[i2];
    var rs2 = ele._private.rscratch;
    var caches = rs2.imgLayerCaches = rs2.imgLayerCaches || {};
    var existingLayer = caches[lvl];
    if (existingLayer) {
      layer = existingLayer;
      continue;
    }
    if (!layer || layer.eles.length >= maxElesPerLayer || !boundingBoxInBoundingBox(layer.bb, ele.boundingBox())) {
      layer = makeLayer({
        insert: true,
        after: layer
      });
      if (!layer) {
        return null;
      }
    }
    if (tmpLayers || allowLazyQueueing) {
      self2.queueLayer(layer, ele);
    } else {
      self2.drawEleInLayer(layer, ele, lvl, pxRatio);
    }
    layer.eles.push(ele);
    caches[lvl] = layer;
  }
  if (tmpLayers) {
    return tmpLayers;
  }
  if (allowLazyQueueing) {
    return null;
  }
  return layers;
};
LTCp.getEleLevelForLayerLevel = function(lvl, pxRatio) {
  return lvl;
};
LTCp.drawEleInLayer = function(layer, ele, lvl, pxRatio) {
  var self2 = this;
  var r2 = this.renderer;
  var context = layer.context;
  var bb = ele.boundingBox();
  if (bb.w === 0 || bb.h === 0 || !ele.visible()) {
    return;
  }
  lvl = self2.getEleLevelForLayerLevel(lvl, pxRatio);
  {
    r2.setImgSmoothing(context, false);
  }
  {
    r2.drawCachedElement(context, ele, null, null, lvl, useHighQualityEleTxrReqs);
  }
  {
    r2.setImgSmoothing(context, true);
  }
};
LTCp.levelIsComplete = function(lvl, eles) {
  var self2 = this;
  var layers = self2.layersByLevel[lvl];
  if (!layers || layers.length === 0) {
    return false;
  }
  var numElesInLayers = 0;
  for (var i2 = 0; i2 < layers.length; i2++) {
    var layer = layers[i2];
    if (layer.reqs > 0) {
      return false;
    }
    if (layer.invalid) {
      return false;
    }
    numElesInLayers += layer.eles.length;
  }
  if (numElesInLayers !== eles.length) {
    return false;
  }
  return true;
};
LTCp.validateLayersElesOrdering = function(lvl, eles) {
  var layers = this.layersByLevel[lvl];
  if (!layers) {
    return;
  }
  for (var i2 = 0; i2 < layers.length; i2++) {
    var layer = layers[i2];
    var offset = -1;
    for (var j2 = 0; j2 < eles.length; j2++) {
      if (layer.eles[0] === eles[j2]) {
        offset = j2;
        break;
      }
    }
    if (offset < 0) {
      this.invalidateLayer(layer);
      continue;
    }
    var o2 = offset;
    for (var j2 = 0; j2 < layer.eles.length; j2++) {
      if (layer.eles[j2] !== eles[o2 + j2]) {
        this.invalidateLayer(layer);
        break;
      }
    }
  }
};
LTCp.updateElementsInLayers = function(eles, update2) {
  var self2 = this;
  var isEles = element(eles[0]);
  for (var i2 = 0; i2 < eles.length; i2++) {
    var req = isEles ? null : eles[i2];
    var ele = isEles ? eles[i2] : eles[i2].ele;
    var rs2 = ele._private.rscratch;
    var caches = rs2.imgLayerCaches = rs2.imgLayerCaches || {};
    for (var l2 = minLvl; l2 <= maxLvl; l2++) {
      var layer = caches[l2];
      if (!layer) {
        continue;
      }
      if (req && self2.getEleLevelForLayerLevel(layer.level) !== req.level) {
        continue;
      }
      update2(layer, ele, req);
    }
  }
};
LTCp.haveLayers = function() {
  var self2 = this;
  var haveLayers = false;
  for (var l2 = minLvl; l2 <= maxLvl; l2++) {
    var layers = self2.layersByLevel[l2];
    if (layers && layers.length > 0) {
      haveLayers = true;
      break;
    }
  }
  return haveLayers;
};
LTCp.invalidateElements = function(eles) {
  var self2 = this;
  if (eles.length === 0) {
    return;
  }
  self2.lastInvalidationTime = performanceNow();
  if (eles.length === 0 || !self2.haveLayers()) {
    return;
  }
  self2.updateElementsInLayers(eles, function invalAssocLayers(layer, ele, req) {
    self2.invalidateLayer(layer);
  });
};
LTCp.invalidateLayer = function(layer) {
  this.lastInvalidationTime = performanceNow();
  if (layer.invalid) {
    return;
  }
  var lvl = layer.level;
  var eles = layer.eles;
  var layers = this.layersByLevel[lvl];
  removeFromArray(layers, layer);
  layer.elesQueue = [];
  layer.invalid = true;
  if (layer.replacement) {
    layer.replacement.invalid = true;
  }
  for (var i2 = 0; i2 < eles.length; i2++) {
    var caches = eles[i2]._private.rscratch.imgLayerCaches;
    if (caches) {
      caches[lvl] = null;
    }
  }
};
LTCp.refineElementTextures = function(eles) {
  var self2 = this;
  self2.updateElementsInLayers(eles, function refineEachEle(layer, ele, req) {
    var rLyr = layer.replacement;
    if (!rLyr) {
      rLyr = layer.replacement = self2.makeLayer(layer.bb, layer.level);
      rLyr.replaces = layer;
      rLyr.eles = layer.eles;
    }
    if (!rLyr.reqs) {
      for (var i2 = 0; i2 < rLyr.eles.length; i2++) {
        self2.queueLayer(rLyr, rLyr.eles[i2]);
      }
    }
  });
};
LTCp.enqueueElementRefinement = function(ele) {
  this.eleTxrDeqs.merge(ele);
  this.scheduleElementRefinement();
};
LTCp.queueLayer = function(layer, ele) {
  var self2 = this;
  var q2 = self2.layersQueue;
  var elesQ = layer.elesQueue;
  var hasId = elesQ.hasId = elesQ.hasId || {};
  if (layer.replacement) {
    return;
  }
  if (ele) {
    if (hasId[ele.id()]) {
      return;
    }
    elesQ.push(ele);
    hasId[ele.id()] = true;
  }
  if (layer.reqs) {
    layer.reqs++;
    q2.updateItem(layer);
  } else {
    layer.reqs = 1;
    q2.push(layer);
  }
};
LTCp.dequeue = function(pxRatio) {
  var self2 = this;
  var q2 = self2.layersQueue;
  var deqd = [];
  var eleDeqs = 0;
  while (eleDeqs < maxDeqSize) {
    if (q2.size() === 0) {
      break;
    }
    var layer = q2.peek();
    if (layer.replacement) {
      q2.pop();
      continue;
    }
    if (layer.replaces && layer !== layer.replaces.replacement) {
      q2.pop();
      continue;
    }
    if (layer.invalid) {
      q2.pop();
      continue;
    }
    var ele = layer.elesQueue.shift();
    if (ele) {
      self2.drawEleInLayer(layer, ele, layer.level, pxRatio);
      eleDeqs++;
    }
    if (deqd.length === 0) {
      deqd.push(true);
    }
    if (layer.elesQueue.length === 0) {
      q2.pop();
      layer.reqs = 0;
      if (layer.replaces) {
        self2.applyLayerReplacement(layer);
      }
      self2.requestRedraw();
    }
  }
  return deqd;
};
LTCp.applyLayerReplacement = function(layer) {
  var self2 = this;
  var layersInLevel = self2.layersByLevel[layer.level];
  var replaced = layer.replaces;
  var index = layersInLevel.indexOf(replaced);
  if (index < 0 || replaced.invalid) {
    return;
  }
  layersInLevel[index] = layer;
  for (var i2 = 0; i2 < layer.eles.length; i2++) {
    var _p = layer.eles[i2]._private;
    var cache3 = _p.imgLayerCaches = _p.imgLayerCaches || {};
    if (cache3) {
      cache3[layer.level] = layer;
    }
  }
  self2.requestRedraw();
};
LTCp.requestRedraw = debounce(function() {
  var r2 = this.renderer;
  r2.redrawHint("eles", true);
  r2.redrawHint("drag", true);
  r2.redraw();
}, 100);
LTCp.setupDequeueing = defs.setupDequeueing({
  deqRedrawThreshold,
  deqCost,
  deqAvgCost,
  deqNoDrawCost,
  deqFastCost,
  deq: function deq2(self2, pxRatio) {
    return self2.dequeue(pxRatio);
  },
  onDeqd: noop$1,
  shouldRedraw: trueify,
  priority: function priority2(self2) {
    return self2.renderer.beforeRenderPriorities.lyrTxrDeq;
  }
});
var CRp$b = {};
var impl;
function polygon(context, points) {
  for (var i2 = 0; i2 < points.length; i2++) {
    var pt2 = points[i2];
    context.lineTo(pt2.x, pt2.y);
  }
}
function triangleBackcurve(context, points, controlPoint) {
  var firstPt;
  for (var i2 = 0; i2 < points.length; i2++) {
    var pt2 = points[i2];
    if (i2 === 0) {
      firstPt = pt2;
    }
    context.lineTo(pt2.x, pt2.y);
  }
  context.quadraticCurveTo(controlPoint.x, controlPoint.y, firstPt.x, firstPt.y);
}
function triangleTee(context, trianglePoints, teePoints) {
  if (context.beginPath) {
    context.beginPath();
  }
  var triPts = trianglePoints;
  for (var i2 = 0; i2 < triPts.length; i2++) {
    var pt2 = triPts[i2];
    context.lineTo(pt2.x, pt2.y);
  }
  var teePts = teePoints;
  var firstTeePt = teePoints[0];
  context.moveTo(firstTeePt.x, firstTeePt.y);
  for (var i2 = 1; i2 < teePts.length; i2++) {
    var pt2 = teePts[i2];
    context.lineTo(pt2.x, pt2.y);
  }
  if (context.closePath) {
    context.closePath();
  }
}
function circleTriangle(context, trianglePoints, rx, ry, r2) {
  if (context.beginPath) {
    context.beginPath();
  }
  context.arc(rx, ry, r2, 0, Math.PI * 2, false);
  var triPts = trianglePoints;
  var firstTrPt = triPts[0];
  context.moveTo(firstTrPt.x, firstTrPt.y);
  for (var i2 = 0; i2 < triPts.length; i2++) {
    var pt2 = triPts[i2];
    context.lineTo(pt2.x, pt2.y);
  }
  if (context.closePath) {
    context.closePath();
  }
}
function circle$1(context, rx, ry, r2) {
  context.arc(rx, ry, r2, 0, Math.PI * 2, false);
}
CRp$b.arrowShapeImpl = function(name) {
  return (impl || (impl = {
    "polygon": polygon,
    "triangle-backcurve": triangleBackcurve,
    "triangle-tee": triangleTee,
    "circle-triangle": circleTriangle,
    "triangle-cross": triangleTee,
    "circle": circle$1
  }))[name];
};
var CRp$a = {};
CRp$a.drawElement = function(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity) {
  var r2 = this;
  if (ele.isNode()) {
    r2.drawNode(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity);
  } else {
    r2.drawEdge(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity);
  }
};
CRp$a.drawElementOverlay = function(context, ele) {
  var r2 = this;
  if (ele.isNode()) {
    r2.drawNodeOverlay(context, ele);
  } else {
    r2.drawEdgeOverlay(context, ele);
  }
};
CRp$a.drawElementUnderlay = function(context, ele) {
  var r2 = this;
  if (ele.isNode()) {
    r2.drawNodeUnderlay(context, ele);
  } else {
    r2.drawEdgeUnderlay(context, ele);
  }
};
CRp$a.drawCachedElementPortion = function(context, ele, eleTxrCache, pxRatio, lvl, reason, getRotation, getOpacity3) {
  var r2 = this;
  var bb = eleTxrCache.getBoundingBox(ele);
  if (bb.w === 0 || bb.h === 0) {
    return;
  }
  var eleCache = eleTxrCache.getElement(ele, bb, pxRatio, lvl, reason);
  if (eleCache != null) {
    var opacity = getOpacity3(r2, ele);
    if (opacity === 0) {
      return;
    }
    var theta = getRotation(r2, ele);
    var x1 = bb.x1, y1 = bb.y1, w2 = bb.w, h2 = bb.h;
    var x3, y3, sx, sy, smooth;
    if (theta !== 0) {
      var rotPt = eleTxrCache.getRotationPoint(ele);
      sx = rotPt.x;
      sy = rotPt.y;
      context.translate(sx, sy);
      context.rotate(theta);
      smooth = r2.getImgSmoothing(context);
      if (!smooth) {
        r2.setImgSmoothing(context, true);
      }
      var off = eleTxrCache.getRotationOffset(ele);
      x3 = off.x;
      y3 = off.y;
    } else {
      x3 = x1;
      y3 = y1;
    }
    var oldGlobalAlpha;
    if (opacity !== 1) {
      oldGlobalAlpha = context.globalAlpha;
      context.globalAlpha = oldGlobalAlpha * opacity;
    }
    context.drawImage(eleCache.texture.canvas, eleCache.x, 0, eleCache.width, eleCache.height, x3, y3, w2, h2);
    if (opacity !== 1) {
      context.globalAlpha = oldGlobalAlpha;
    }
    if (theta !== 0) {
      context.rotate(-theta);
      context.translate(-sx, -sy);
      if (!smooth) {
        r2.setImgSmoothing(context, false);
      }
    }
  } else {
    eleTxrCache.drawElement(context, ele);
  }
};
var getZeroRotation = function getZeroRotation2() {
  return 0;
};
var getLabelRotation = function getLabelRotation2(r2, ele) {
  return r2.getTextAngle(ele, null);
};
var getSourceLabelRotation = function getSourceLabelRotation2(r2, ele) {
  return r2.getTextAngle(ele, "source");
};
var getTargetLabelRotation = function getTargetLabelRotation2(r2, ele) {
  return r2.getTextAngle(ele, "target");
};
var getOpacity = function getOpacity2(r2, ele) {
  return ele.effectiveOpacity();
};
var getTextOpacity = function getTextOpacity2(e, ele) {
  return ele.pstyle("text-opacity").pfValue * ele.effectiveOpacity();
};
CRp$a.drawCachedElement = function(context, ele, pxRatio, extent2, lvl, requestHighQuality) {
  var r2 = this;
  var _r$data = r2.data, eleTxrCache = _r$data.eleTxrCache, lblTxrCache = _r$data.lblTxrCache, slbTxrCache = _r$data.slbTxrCache, tlbTxrCache = _r$data.tlbTxrCache;
  var bb = ele.boundingBox();
  var reason = requestHighQuality === true ? eleTxrCache.reasons.highQuality : null;
  if (bb.w === 0 || bb.h === 0 || !ele.visible()) {
    return;
  }
  if (!extent2 || boundingBoxesIntersect(bb, extent2)) {
    var isEdge2 = ele.isEdge();
    var badLine = ele.element()._private.rscratch.badLine;
    r2.drawElementUnderlay(context, ele);
    r2.drawCachedElementPortion(context, ele, eleTxrCache, pxRatio, lvl, reason, getZeroRotation, getOpacity);
    if (!isEdge2 || !badLine) {
      r2.drawCachedElementPortion(context, ele, lblTxrCache, pxRatio, lvl, reason, getLabelRotation, getTextOpacity);
    }
    if (isEdge2 && !badLine) {
      r2.drawCachedElementPortion(context, ele, slbTxrCache, pxRatio, lvl, reason, getSourceLabelRotation, getTextOpacity);
      r2.drawCachedElementPortion(context, ele, tlbTxrCache, pxRatio, lvl, reason, getTargetLabelRotation, getTextOpacity);
    }
    r2.drawElementOverlay(context, ele);
  }
};
CRp$a.drawElements = function(context, eles) {
  var r2 = this;
  for (var i2 = 0; i2 < eles.length; i2++) {
    var ele = eles[i2];
    r2.drawElement(context, ele);
  }
};
CRp$a.drawCachedElements = function(context, eles, pxRatio, extent2) {
  var r2 = this;
  for (var i2 = 0; i2 < eles.length; i2++) {
    var ele = eles[i2];
    r2.drawCachedElement(context, ele, pxRatio, extent2);
  }
};
CRp$a.drawCachedNodes = function(context, eles, pxRatio, extent2) {
  var r2 = this;
  for (var i2 = 0; i2 < eles.length; i2++) {
    var ele = eles[i2];
    if (!ele.isNode()) {
      continue;
    }
    r2.drawCachedElement(context, ele, pxRatio, extent2);
  }
};
CRp$a.drawLayeredElements = function(context, eles, pxRatio, extent2) {
  var r2 = this;
  var layers = r2.data.lyrTxrCache.getLayers(eles, pxRatio);
  if (layers) {
    for (var i2 = 0; i2 < layers.length; i2++) {
      var layer = layers[i2];
      var bb = layer.bb;
      if (bb.w === 0 || bb.h === 0) {
        continue;
      }
      context.drawImage(layer.canvas, bb.x1, bb.y1, bb.w, bb.h);
    }
  } else {
    r2.drawCachedElements(context, eles, pxRatio, extent2);
  }
};
var CRp$9 = {};
CRp$9.drawEdge = function(context, edge, shiftToOriginWithBb) {
  var drawLabel = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
  var shouldDrawOverlay = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
  var shouldDrawOpacity = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
  var r2 = this;
  var rs2 = edge._private.rscratch;
  if (shouldDrawOpacity && !edge.visible()) {
    return;
  }
  if (rs2.badLine || rs2.allpts == null || isNaN(rs2.allpts[0])) {
    return;
  }
  var bb;
  if (shiftToOriginWithBb) {
    bb = shiftToOriginWithBb;
    context.translate(-bb.x1, -bb.y1);
  }
  var opacity = shouldDrawOpacity ? edge.pstyle("opacity").value : 1;
  var lineOpacity = shouldDrawOpacity ? edge.pstyle("line-opacity").value : 1;
  var curveStyle = edge.pstyle("curve-style").value;
  var lineStyle = edge.pstyle("line-style").value;
  var edgeWidth = edge.pstyle("width").pfValue;
  var lineCap = edge.pstyle("line-cap").value;
  var lineOutlineWidth = edge.pstyle("line-outline-width").value;
  var lineOutlineColor = edge.pstyle("line-outline-color").value;
  var effectiveLineOpacity = opacity * lineOpacity;
  var effectiveArrowOpacity = opacity * lineOpacity;
  var drawLine = function drawLine2() {
    var strokeOpacity = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : effectiveLineOpacity;
    if (curveStyle === "straight-triangle") {
      r2.eleStrokeStyle(context, edge, strokeOpacity);
      r2.drawEdgeTrianglePath(edge, context, rs2.allpts);
    } else {
      context.lineWidth = edgeWidth;
      context.lineCap = lineCap;
      r2.eleStrokeStyle(context, edge, strokeOpacity);
      r2.drawEdgePath(edge, context, rs2.allpts, lineStyle);
      context.lineCap = "butt";
    }
  };
  var drawLineOutline = function drawLineOutline2() {
    var strokeOpacity = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : effectiveLineOpacity;
    context.lineWidth = edgeWidth + lineOutlineWidth;
    context.lineCap = lineCap;
    if (lineOutlineWidth > 0) {
      r2.colorStrokeStyle(context, lineOutlineColor[0], lineOutlineColor[1], lineOutlineColor[2], strokeOpacity);
    } else {
      context.lineCap = "butt";
      return;
    }
    if (curveStyle === "straight-triangle") {
      r2.drawEdgeTrianglePath(edge, context, rs2.allpts);
    } else {
      r2.drawEdgePath(edge, context, rs2.allpts, lineStyle);
      context.lineCap = "butt";
    }
  };
  var drawOverlay = function drawOverlay2() {
    if (!shouldDrawOverlay) {
      return;
    }
    r2.drawEdgeOverlay(context, edge);
  };
  var drawUnderlay = function drawUnderlay2() {
    if (!shouldDrawOverlay) {
      return;
    }
    r2.drawEdgeUnderlay(context, edge);
  };
  var drawArrows = function drawArrows2() {
    var arrowOpacity = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : effectiveArrowOpacity;
    r2.drawArrowheads(context, edge, arrowOpacity);
  };
  var drawText = function drawText2() {
    r2.drawElementText(context, edge, null, drawLabel);
  };
  context.lineJoin = "round";
  var ghost = edge.pstyle("ghost").value === "yes";
  if (ghost) {
    var gx = edge.pstyle("ghost-offset-x").pfValue;
    var gy = edge.pstyle("ghost-offset-y").pfValue;
    var ghostOpacity = edge.pstyle("ghost-opacity").value;
    var effectiveGhostOpacity = effectiveLineOpacity * ghostOpacity;
    context.translate(gx, gy);
    drawLine(effectiveGhostOpacity);
    drawArrows(effectiveGhostOpacity);
    context.translate(-gx, -gy);
  } else {
    drawLineOutline();
  }
  drawUnderlay();
  drawLine();
  drawArrows();
  drawOverlay();
  drawText();
  if (shiftToOriginWithBb) {
    context.translate(bb.x1, bb.y1);
  }
};
var drawEdgeOverlayUnderlay = function drawEdgeOverlayUnderlay2(overlayOrUnderlay) {
  if (!["overlay", "underlay"].includes(overlayOrUnderlay)) {
    throw new Error("Invalid state");
  }
  return function(context, edge) {
    if (!edge.visible()) {
      return;
    }
    var opacity = edge.pstyle("".concat(overlayOrUnderlay, "-opacity")).value;
    if (opacity === 0) {
      return;
    }
    var r2 = this;
    var usePaths = r2.usePaths();
    var rs2 = edge._private.rscratch;
    var padding = edge.pstyle("".concat(overlayOrUnderlay, "-padding")).pfValue;
    var width2 = 2 * padding;
    var color = edge.pstyle("".concat(overlayOrUnderlay, "-color")).value;
    context.lineWidth = width2;
    if (rs2.edgeType === "self" && !usePaths) {
      context.lineCap = "butt";
    } else {
      context.lineCap = "round";
    }
    r2.colorStrokeStyle(context, color[0], color[1], color[2], opacity);
    r2.drawEdgePath(edge, context, rs2.allpts, "solid");
  };
};
CRp$9.drawEdgeOverlay = drawEdgeOverlayUnderlay("overlay");
CRp$9.drawEdgeUnderlay = drawEdgeOverlayUnderlay("underlay");
CRp$9.drawEdgePath = function(edge, context, pts2, type2) {
  var rs2 = edge._private.rscratch;
  var canvasCxt = context;
  var path;
  var pathCacheHit = false;
  var usePaths = this.usePaths();
  var lineDashPattern = edge.pstyle("line-dash-pattern").pfValue;
  var lineDashOffset = edge.pstyle("line-dash-offset").pfValue;
  if (usePaths) {
    var pathCacheKey = pts2.join("$");
    var keyMatches = rs2.pathCacheKey && rs2.pathCacheKey === pathCacheKey;
    if (keyMatches) {
      path = context = rs2.pathCache;
      pathCacheHit = true;
    } else {
      path = context = new Path2D();
      rs2.pathCacheKey = pathCacheKey;
      rs2.pathCache = path;
    }
  }
  if (canvasCxt.setLineDash) {
    switch (type2) {
      case "dotted":
        canvasCxt.setLineDash([1, 1]);
        break;
      case "dashed":
        canvasCxt.setLineDash(lineDashPattern);
        canvasCxt.lineDashOffset = lineDashOffset;
        break;
      case "solid":
        canvasCxt.setLineDash([]);
        break;
    }
  }
  if (!pathCacheHit && !rs2.badLine) {
    if (context.beginPath) {
      context.beginPath();
    }
    context.moveTo(pts2[0], pts2[1]);
    switch (rs2.edgeType) {
      case "bezier":
      case "self":
      case "compound":
      case "multibezier":
        for (var i2 = 2; i2 + 3 < pts2.length; i2 += 4) {
          context.quadraticCurveTo(pts2[i2], pts2[i2 + 1], pts2[i2 + 2], pts2[i2 + 3]);
        }
        break;
      case "straight":
      case "haystack":
        for (var _i2 = 2; _i2 + 1 < pts2.length; _i2 += 2) {
          context.lineTo(pts2[_i2], pts2[_i2 + 1]);
        }
        break;
      case "segments":
        if (rs2.isRound) {
          var _iterator = _createForOfIteratorHelper(rs2.roundCorners), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var corner = _step.value;
              drawPreparedRoundCorner(context, corner);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          context.lineTo(pts2[pts2.length - 2], pts2[pts2.length - 1]);
        } else {
          for (var _i22 = 2; _i22 + 1 < pts2.length; _i22 += 2) {
            context.lineTo(pts2[_i22], pts2[_i22 + 1]);
          }
        }
        break;
    }
  }
  context = canvasCxt;
  if (usePaths) {
    context.stroke(path);
  } else {
    context.stroke();
  }
  if (context.setLineDash) {
    context.setLineDash([]);
  }
};
CRp$9.drawEdgeTrianglePath = function(edge, context, pts2) {
  context.fillStyle = context.strokeStyle;
  var edgeWidth = edge.pstyle("width").pfValue;
  for (var i2 = 0; i2 + 1 < pts2.length; i2 += 2) {
    var vector = [pts2[i2 + 2] - pts2[i2], pts2[i2 + 3] - pts2[i2 + 1]];
    var length = Math.sqrt(vector[0] * vector[0] + vector[1] * vector[1]);
    var normal = [vector[1] / length, -vector[0] / length];
    var triangleHead = [normal[0] * edgeWidth / 2, normal[1] * edgeWidth / 2];
    context.beginPath();
    context.moveTo(pts2[i2] - triangleHead[0], pts2[i2 + 1] - triangleHead[1]);
    context.lineTo(pts2[i2] + triangleHead[0], pts2[i2 + 1] + triangleHead[1]);
    context.lineTo(pts2[i2 + 2], pts2[i2 + 3]);
    context.closePath();
    context.fill();
  }
};
CRp$9.drawArrowheads = function(context, edge, opacity) {
  var rs2 = edge._private.rscratch;
  var isHaystack = rs2.edgeType === "haystack";
  if (!isHaystack) {
    this.drawArrowhead(context, edge, "source", rs2.arrowStartX, rs2.arrowStartY, rs2.srcArrowAngle, opacity);
  }
  this.drawArrowhead(context, edge, "mid-target", rs2.midX, rs2.midY, rs2.midtgtArrowAngle, opacity);
  this.drawArrowhead(context, edge, "mid-source", rs2.midX, rs2.midY, rs2.midsrcArrowAngle, opacity);
  if (!isHaystack) {
    this.drawArrowhead(context, edge, "target", rs2.arrowEndX, rs2.arrowEndY, rs2.tgtArrowAngle, opacity);
  }
};
CRp$9.drawArrowhead = function(context, edge, prefix, x3, y3, angle2, opacity) {
  if (isNaN(x3) || x3 == null || isNaN(y3) || y3 == null || isNaN(angle2) || angle2 == null) {
    return;
  }
  var self2 = this;
  var arrowShape = edge.pstyle(prefix + "-arrow-shape").value;
  if (arrowShape === "none") {
    return;
  }
  var arrowClearFill = edge.pstyle(prefix + "-arrow-fill").value === "hollow" ? "both" : "filled";
  var arrowFill = edge.pstyle(prefix + "-arrow-fill").value;
  var edgeWidth = edge.pstyle("width").pfValue;
  var pArrowWidth = edge.pstyle(prefix + "-arrow-width");
  var arrowWidth = pArrowWidth.value === "match-line" ? edgeWidth : pArrowWidth.pfValue;
  if (pArrowWidth.units === "%") arrowWidth *= edgeWidth;
  var edgeOpacity = edge.pstyle("opacity").value;
  if (opacity === void 0) {
    opacity = edgeOpacity;
  }
  var gco = context.globalCompositeOperation;
  if (opacity !== 1 || arrowFill === "hollow") {
    context.globalCompositeOperation = "destination-out";
    self2.colorFillStyle(context, 255, 255, 255, 1);
    self2.colorStrokeStyle(context, 255, 255, 255, 1);
    self2.drawArrowShape(edge, context, arrowClearFill, edgeWidth, arrowShape, arrowWidth, x3, y3, angle2);
    context.globalCompositeOperation = gco;
  }
  var color = edge.pstyle(prefix + "-arrow-color").value;
  self2.colorFillStyle(context, color[0], color[1], color[2], opacity);
  self2.colorStrokeStyle(context, color[0], color[1], color[2], opacity);
  self2.drawArrowShape(edge, context, arrowFill, edgeWidth, arrowShape, arrowWidth, x3, y3, angle2);
};
CRp$9.drawArrowShape = function(edge, context, fill, edgeWidth, shape, shapeWidth, x3, y3, angle2) {
  var r2 = this;
  var usePaths = this.usePaths() && shape !== "triangle-cross";
  var pathCacheHit = false;
  var path;
  var canvasContext = context;
  var translation = {
    x: x3,
    y: y3
  };
  var scale2 = edge.pstyle("arrow-scale").value;
  var size3 = this.getArrowWidth(edgeWidth, scale2);
  var shapeImpl = r2.arrowShapes[shape];
  if (usePaths) {
    var cache3 = r2.arrowPathCache = r2.arrowPathCache || [];
    var key = hashString(shape);
    var cachedPath = cache3[key];
    if (cachedPath != null) {
      path = context = cachedPath;
      pathCacheHit = true;
    } else {
      path = context = new Path2D();
      cache3[key] = path;
    }
  }
  if (!pathCacheHit) {
    if (context.beginPath) {
      context.beginPath();
    }
    if (usePaths) {
      shapeImpl.draw(context, 1, 0, {
        x: 0,
        y: 0
      }, 1);
    } else {
      shapeImpl.draw(context, size3, angle2, translation, edgeWidth);
    }
    if (context.closePath) {
      context.closePath();
    }
  }
  context = canvasContext;
  if (usePaths) {
    context.translate(x3, y3);
    context.rotate(angle2);
    context.scale(size3, size3);
  }
  if (fill === "filled" || fill === "both") {
    if (usePaths) {
      context.fill(path);
    } else {
      context.fill();
    }
  }
  if (fill === "hollow" || fill === "both") {
    context.lineWidth = shapeWidth / (usePaths ? size3 : 1);
    context.lineJoin = "miter";
    if (usePaths) {
      context.stroke(path);
    } else {
      context.stroke();
    }
  }
  if (usePaths) {
    context.scale(1 / size3, 1 / size3);
    context.rotate(-angle2);
    context.translate(-x3, -y3);
  }
};
var CRp$8 = {};
CRp$8.safeDrawImage = function(context, img, ix, iy, iw, ih2, x3, y3, w2, h2) {
  if (iw <= 0 || ih2 <= 0 || w2 <= 0 || h2 <= 0) {
    return;
  }
  try {
    context.drawImage(img, ix, iy, iw, ih2, x3, y3, w2, h2);
  } catch (e) {
    warn(e);
  }
};
CRp$8.drawInscribedImage = function(context, img, node, index, nodeOpacity) {
  var r2 = this;
  var pos = node.position();
  var nodeX = pos.x;
  var nodeY = pos.y;
  var styleObj = node.cy().style();
  var getIndexedStyle = styleObj.getIndexedStyle.bind(styleObj);
  var fit2 = getIndexedStyle(node, "background-fit", "value", index);
  var repeat = getIndexedStyle(node, "background-repeat", "value", index);
  var nodeW = node.width();
  var nodeH = node.height();
  var paddingX2 = node.padding() * 2;
  var nodeTW = nodeW + (getIndexedStyle(node, "background-width-relative-to", "value", index) === "inner" ? 0 : paddingX2);
  var nodeTH = nodeH + (getIndexedStyle(node, "background-height-relative-to", "value", index) === "inner" ? 0 : paddingX2);
  var rs2 = node._private.rscratch;
  var clip = getIndexedStyle(node, "background-clip", "value", index);
  var shouldClip = clip === "node";
  var imgOpacity = getIndexedStyle(node, "background-image-opacity", "value", index) * nodeOpacity;
  var smooth = getIndexedStyle(node, "background-image-smoothing", "value", index);
  var cornerRadius = node.pstyle("corner-radius").value;
  if (cornerRadius !== "auto") cornerRadius = node.pstyle("corner-radius").pfValue;
  var imgW = img.width || img.cachedW;
  var imgH = img.height || img.cachedH;
  if (null == imgW || null == imgH) {
    document.body.appendChild(img);
    imgW = img.cachedW = img.width || img.offsetWidth;
    imgH = img.cachedH = img.height || img.offsetHeight;
    document.body.removeChild(img);
  }
  var w2 = imgW;
  var h2 = imgH;
  if (getIndexedStyle(node, "background-width", "value", index) !== "auto") {
    if (getIndexedStyle(node, "background-width", "units", index) === "%") {
      w2 = getIndexedStyle(node, "background-width", "pfValue", index) * nodeTW;
    } else {
      w2 = getIndexedStyle(node, "background-width", "pfValue", index);
    }
  }
  if (getIndexedStyle(node, "background-height", "value", index) !== "auto") {
    if (getIndexedStyle(node, "background-height", "units", index) === "%") {
      h2 = getIndexedStyle(node, "background-height", "pfValue", index) * nodeTH;
    } else {
      h2 = getIndexedStyle(node, "background-height", "pfValue", index);
    }
  }
  if (w2 === 0 || h2 === 0) {
    return;
  }
  if (fit2 === "contain") {
    var scale2 = Math.min(nodeTW / w2, nodeTH / h2);
    w2 *= scale2;
    h2 *= scale2;
  } else if (fit2 === "cover") {
    var scale2 = Math.max(nodeTW / w2, nodeTH / h2);
    w2 *= scale2;
    h2 *= scale2;
  }
  var x3 = nodeX - nodeTW / 2;
  var posXUnits = getIndexedStyle(node, "background-position-x", "units", index);
  var posXPfVal = getIndexedStyle(node, "background-position-x", "pfValue", index);
  if (posXUnits === "%") {
    x3 += (nodeTW - w2) * posXPfVal;
  } else {
    x3 += posXPfVal;
  }
  var offXUnits = getIndexedStyle(node, "background-offset-x", "units", index);
  var offXPfVal = getIndexedStyle(node, "background-offset-x", "pfValue", index);
  if (offXUnits === "%") {
    x3 += (nodeTW - w2) * offXPfVal;
  } else {
    x3 += offXPfVal;
  }
  var y3 = nodeY - nodeTH / 2;
  var posYUnits = getIndexedStyle(node, "background-position-y", "units", index);
  var posYPfVal = getIndexedStyle(node, "background-position-y", "pfValue", index);
  if (posYUnits === "%") {
    y3 += (nodeTH - h2) * posYPfVal;
  } else {
    y3 += posYPfVal;
  }
  var offYUnits = getIndexedStyle(node, "background-offset-y", "units", index);
  var offYPfVal = getIndexedStyle(node, "background-offset-y", "pfValue", index);
  if (offYUnits === "%") {
    y3 += (nodeTH - h2) * offYPfVal;
  } else {
    y3 += offYPfVal;
  }
  if (rs2.pathCache) {
    x3 -= nodeX;
    y3 -= nodeY;
    nodeX = 0;
    nodeY = 0;
  }
  var gAlpha = context.globalAlpha;
  context.globalAlpha = imgOpacity;
  var smoothingEnabled = r2.getImgSmoothing(context);
  var isSmoothingSwitched = false;
  if (smooth === "no" && smoothingEnabled) {
    r2.setImgSmoothing(context, false);
    isSmoothingSwitched = true;
  } else if (smooth === "yes" && !smoothingEnabled) {
    r2.setImgSmoothing(context, true);
    isSmoothingSwitched = true;
  }
  if (repeat === "no-repeat") {
    if (shouldClip) {
      context.save();
      if (rs2.pathCache) {
        context.clip(rs2.pathCache);
      } else {
        r2.nodeShapes[r2.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH, cornerRadius, rs2);
        context.clip();
      }
    }
    r2.safeDrawImage(context, img, 0, 0, imgW, imgH, x3, y3, w2, h2);
    if (shouldClip) {
      context.restore();
    }
  } else {
    var pattern = context.createPattern(img, repeat);
    context.fillStyle = pattern;
    r2.nodeShapes[r2.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH, cornerRadius, rs2);
    context.translate(x3, y3);
    context.fill();
    context.translate(-x3, -y3);
  }
  context.globalAlpha = gAlpha;
  if (isSmoothingSwitched) {
    r2.setImgSmoothing(context, smoothingEnabled);
  }
};
var CRp$7 = {};
CRp$7.eleTextBiggerThanMin = function(ele, scale2) {
  if (!scale2) {
    var zoom2 = ele.cy().zoom();
    var pxRatio = this.getPixelRatio();
    var lvl = Math.ceil(log2(zoom2 * pxRatio));
    scale2 = Math.pow(2, lvl);
  }
  var computedSize = ele.pstyle("font-size").pfValue * scale2;
  var minSize = ele.pstyle("min-zoomed-font-size").pfValue;
  if (computedSize < minSize) {
    return false;
  }
  return true;
};
CRp$7.drawElementText = function(context, ele, shiftToOriginWithBb, force, prefix) {
  var useEleOpacity = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
  var r2 = this;
  if (force == null) {
    if (useEleOpacity && !r2.eleTextBiggerThanMin(ele)) {
      return;
    }
  } else if (force === false) {
    return;
  }
  if (ele.isNode()) {
    var label = ele.pstyle("label");
    if (!label || !label.value) {
      return;
    }
    var justification = r2.getLabelJustification(ele);
    context.textAlign = justification;
    context.textBaseline = "bottom";
  } else {
    var badLine = ele.element()._private.rscratch.badLine;
    var _label = ele.pstyle("label");
    var srcLabel = ele.pstyle("source-label");
    var tgtLabel = ele.pstyle("target-label");
    if (badLine || (!_label || !_label.value) && (!srcLabel || !srcLabel.value) && (!tgtLabel || !tgtLabel.value)) {
      return;
    }
    context.textAlign = "center";
    context.textBaseline = "bottom";
  }
  var applyRotation = !shiftToOriginWithBb;
  var bb;
  if (shiftToOriginWithBb) {
    bb = shiftToOriginWithBb;
    context.translate(-bb.x1, -bb.y1);
  }
  if (prefix == null) {
    r2.drawText(context, ele, null, applyRotation, useEleOpacity);
    if (ele.isEdge()) {
      r2.drawText(context, ele, "source", applyRotation, useEleOpacity);
      r2.drawText(context, ele, "target", applyRotation, useEleOpacity);
    }
  } else {
    r2.drawText(context, ele, prefix, applyRotation, useEleOpacity);
  }
  if (shiftToOriginWithBb) {
    context.translate(bb.x1, bb.y1);
  }
};
CRp$7.getFontCache = function(context) {
  var cache3;
  this.fontCaches = this.fontCaches || [];
  for (var i2 = 0; i2 < this.fontCaches.length; i2++) {
    cache3 = this.fontCaches[i2];
    if (cache3.context === context) {
      return cache3;
    }
  }
  cache3 = {
    context
  };
  this.fontCaches.push(cache3);
  return cache3;
};
CRp$7.setupTextStyle = function(context, ele) {
  var useEleOpacity = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
  var labelStyle = ele.pstyle("font-style").strValue;
  var labelSize = ele.pstyle("font-size").pfValue + "px";
  var labelFamily = ele.pstyle("font-family").strValue;
  var labelWeight = ele.pstyle("font-weight").strValue;
  var opacity = useEleOpacity ? ele.effectiveOpacity() * ele.pstyle("text-opacity").value : 1;
  var outlineOpacity = ele.pstyle("text-outline-opacity").value * opacity;
  var color = ele.pstyle("color").value;
  var outlineColor = ele.pstyle("text-outline-color").value;
  context.font = labelStyle + " " + labelWeight + " " + labelSize + " " + labelFamily;
  context.lineJoin = "round";
  this.colorFillStyle(context, color[0], color[1], color[2], opacity);
  this.colorStrokeStyle(context, outlineColor[0], outlineColor[1], outlineColor[2], outlineOpacity);
};
function circle(ctx, x3, y3, width2, height2) {
  var diameter = Math.min(width2, height2);
  var radius2 = diameter / 2;
  var centerX = x3 + width2 / 2;
  var centerY = y3 + height2 / 2;
  ctx.beginPath();
  ctx.arc(centerX, centerY, radius2, 0, Math.PI * 2);
  ctx.closePath();
}
function roundRect(ctx, x3, y3, width2, height2) {
  var radius2 = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 5;
  var r2 = Math.min(radius2, width2 / 2, height2 / 2);
  ctx.beginPath();
  ctx.moveTo(x3 + r2, y3);
  ctx.lineTo(x3 + width2 - r2, y3);
  ctx.quadraticCurveTo(x3 + width2, y3, x3 + width2, y3 + r2);
  ctx.lineTo(x3 + width2, y3 + height2 - r2);
  ctx.quadraticCurveTo(x3 + width2, y3 + height2, x3 + width2 - r2, y3 + height2);
  ctx.lineTo(x3 + r2, y3 + height2);
  ctx.quadraticCurveTo(x3, y3 + height2, x3, y3 + height2 - r2);
  ctx.lineTo(x3, y3 + r2);
  ctx.quadraticCurveTo(x3, y3, x3 + r2, y3);
  ctx.closePath();
}
CRp$7.getTextAngle = function(ele, prefix) {
  var theta;
  var _p = ele._private;
  var rscratch = _p.rscratch;
  var pdash = prefix ? prefix + "-" : "";
  var rotation = ele.pstyle(pdash + "text-rotation");
  if (rotation.strValue === "autorotate") {
    var textAngle = getPrefixedProperty(rscratch, "labelAngle", prefix);
    theta = ele.isEdge() ? textAngle : 0;
  } else if (rotation.strValue === "none") {
    theta = 0;
  } else {
    theta = rotation.pfValue;
  }
  return theta;
};
CRp$7.drawText = function(context, ele, prefix) {
  var applyRotation = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
  var useEleOpacity = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
  var _p = ele._private;
  var rscratch = _p.rscratch;
  var parentOpacity = useEleOpacity ? ele.effectiveOpacity() : 1;
  if (useEleOpacity && (parentOpacity === 0 || ele.pstyle("text-opacity").value === 0)) {
    return;
  }
  if (prefix === "main") {
    prefix = null;
  }
  var textX = getPrefixedProperty(rscratch, "labelX", prefix);
  var textY = getPrefixedProperty(rscratch, "labelY", prefix);
  var orgTextX, orgTextY;
  var text = this.getLabelText(ele, prefix);
  if (text != null && text !== "" && !isNaN(textX) && !isNaN(textY)) {
    this.setupTextStyle(context, ele, useEleOpacity);
    var pdash = prefix ? prefix + "-" : "";
    var textW = getPrefixedProperty(rscratch, "labelWidth", prefix);
    var textH = getPrefixedProperty(rscratch, "labelHeight", prefix);
    var marginX = ele.pstyle(pdash + "text-margin-x").pfValue;
    var marginY = ele.pstyle(pdash + "text-margin-y").pfValue;
    var isEdge2 = ele.isEdge();
    var halign = ele.pstyle("text-halign").value;
    var valign = ele.pstyle("text-valign").value;
    if (isEdge2) {
      halign = "center";
      valign = "center";
    }
    textX += marginX;
    textY += marginY;
    var theta;
    if (!applyRotation) {
      theta = 0;
    } else {
      theta = this.getTextAngle(ele, prefix);
    }
    if (theta !== 0) {
      orgTextX = textX;
      orgTextY = textY;
      context.translate(orgTextX, orgTextY);
      context.rotate(theta);
      textX = 0;
      textY = 0;
    }
    switch (valign) {
      case "top":
        break;
      case "center":
        textY += textH / 2;
        break;
      case "bottom":
        textY += textH;
        break;
    }
    var backgroundOpacity = ele.pstyle("text-background-opacity").value;
    var borderOpacity = ele.pstyle("text-border-opacity").value;
    var textBorderWidth = ele.pstyle("text-border-width").pfValue;
    var backgroundPadding = ele.pstyle("text-background-padding").pfValue;
    var styleShape = ele.pstyle("text-background-shape").strValue;
    var rounded = styleShape === "round-rectangle" || styleShape === "roundrectangle";
    var circled = styleShape === "circle";
    var roundRadius = 2;
    if (backgroundOpacity > 0 || textBorderWidth > 0 && borderOpacity > 0) {
      var textFill = context.fillStyle;
      var textStroke = context.strokeStyle;
      var textLineWidth = context.lineWidth;
      var textBackgroundColor = ele.pstyle("text-background-color").value;
      var textBorderColor = ele.pstyle("text-border-color").value;
      var textBorderStyle = ele.pstyle("text-border-style").value;
      var doFill = backgroundOpacity > 0;
      var doStroke = textBorderWidth > 0 && borderOpacity > 0;
      var bgX = textX - backgroundPadding;
      switch (halign) {
        case "left":
          bgX -= textW;
          break;
        case "center":
          bgX -= textW / 2;
          break;
      }
      var bgY = textY - textH - backgroundPadding;
      var bgW = textW + 2 * backgroundPadding;
      var bgH = textH + 2 * backgroundPadding;
      if (doFill) {
        context.fillStyle = "rgba(".concat(textBackgroundColor[0], ",").concat(textBackgroundColor[1], ",").concat(textBackgroundColor[2], ",").concat(backgroundOpacity * parentOpacity, ")");
      }
      if (doStroke) {
        context.strokeStyle = "rgba(".concat(textBorderColor[0], ",").concat(textBorderColor[1], ",").concat(textBorderColor[2], ",").concat(borderOpacity * parentOpacity, ")");
        context.lineWidth = textBorderWidth;
        if (context.setLineDash) {
          switch (textBorderStyle) {
            case "dotted":
              context.setLineDash([1, 1]);
              break;
            case "dashed":
              context.setLineDash([4, 2]);
              break;
            case "double":
              context.lineWidth = textBorderWidth / 4;
              context.setLineDash([]);
              break;
            case "solid":
            default:
              context.setLineDash([]);
              break;
          }
        }
      }
      if (rounded) {
        context.beginPath();
        roundRect(context, bgX, bgY, bgW, bgH, roundRadius);
      } else if (circled) {
        context.beginPath();
        circle(context, bgX, bgY, bgW, bgH);
      } else {
        context.beginPath();
        context.rect(bgX, bgY, bgW, bgH);
      }
      if (doFill) context.fill();
      if (doStroke) context.stroke();
      if (doStroke && textBorderStyle === "double") {
        var whiteWidth = textBorderWidth / 2;
        context.beginPath();
        if (rounded) {
          roundRect(context, bgX + whiteWidth, bgY + whiteWidth, bgW - 2 * whiteWidth, bgH - 2 * whiteWidth, roundRadius);
        } else {
          context.rect(bgX + whiteWidth, bgY + whiteWidth, bgW - 2 * whiteWidth, bgH - 2 * whiteWidth);
        }
        context.stroke();
      }
      context.fillStyle = textFill;
      context.strokeStyle = textStroke;
      context.lineWidth = textLineWidth;
      if (context.setLineDash) context.setLineDash([]);
    }
    var lineWidth = 2 * ele.pstyle("text-outline-width").pfValue;
    if (lineWidth > 0) {
      context.lineWidth = lineWidth;
    }
    if (ele.pstyle("text-wrap").value === "wrap") {
      var lines = getPrefixedProperty(rscratch, "labelWrapCachedLines", prefix);
      var lineHeight = getPrefixedProperty(rscratch, "labelLineHeight", prefix);
      var halfTextW = textW / 2;
      var justification = this.getLabelJustification(ele);
      if (justification === "auto") ;
      else if (halign === "left") {
        if (justification === "left") {
          textX += -textW;
        } else if (justification === "center") {
          textX += -halfTextW;
        }
      } else if (halign === "center") {
        if (justification === "left") {
          textX += -halfTextW;
        } else if (justification === "right") {
          textX += halfTextW;
        }
      } else if (halign === "right") {
        if (justification === "center") {
          textX += halfTextW;
        } else if (justification === "right") {
          textX += textW;
        }
      }
      switch (valign) {
        case "top":
          textY -= (lines.length - 1) * lineHeight;
          break;
        case "center":
        case "bottom":
          textY -= (lines.length - 1) * lineHeight;
          break;
      }
      for (var l2 = 0; l2 < lines.length; l2++) {
        if (lineWidth > 0) {
          context.strokeText(lines[l2], textX, textY);
        }
        context.fillText(lines[l2], textX, textY);
        textY += lineHeight;
      }
    } else {
      if (lineWidth > 0) {
        context.strokeText(text, textX, textY);
      }
      context.fillText(text, textX, textY);
    }
    if (theta !== 0) {
      context.rotate(-theta);
      context.translate(-orgTextX, -orgTextY);
    }
  }
};
var CRp$6 = {};
CRp$6.drawNode = function(context, node, shiftToOriginWithBb) {
  var drawLabel = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
  var shouldDrawOverlay = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
  var shouldDrawOpacity = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
  var r2 = this;
  var nodeWidth, nodeHeight;
  var _p = node._private;
  var rs2 = _p.rscratch;
  var pos = node.position();
  if (!number$1(pos.x) || !number$1(pos.y)) {
    return;
  }
  if (shouldDrawOpacity && !node.visible()) {
    return;
  }
  var eleOpacity = shouldDrawOpacity ? node.effectiveOpacity() : 1;
  var usePaths = r2.usePaths();
  var path;
  var pathCacheHit = false;
  var padding = node.padding();
  nodeWidth = node.width() + 2 * padding;
  nodeHeight = node.height() + 2 * padding;
  var bb;
  if (shiftToOriginWithBb) {
    bb = shiftToOriginWithBb;
    context.translate(-bb.x1, -bb.y1);
  }
  var bgImgProp = node.pstyle("background-image");
  var urls = bgImgProp.value;
  var urlDefined = new Array(urls.length);
  var image = new Array(urls.length);
  var numImages = 0;
  for (var i2 = 0; i2 < urls.length; i2++) {
    var url = urls[i2];
    var defd = urlDefined[i2] = url != null && url !== "none";
    if (defd) {
      var bgImgCrossOrigin = node.cy().style().getIndexedStyle(node, "background-image-crossorigin", "value", i2);
      numImages++;
      image[i2] = r2.getCachedImage(url, bgImgCrossOrigin, function() {
        _p.backgroundTimestamp = Date.now();
        node.emitAndNotify("background");
      });
    }
  }
  var darkness = node.pstyle("background-blacken").value;
  var borderWidth = node.pstyle("border-width").pfValue;
  var bgOpacity = node.pstyle("background-opacity").value * eleOpacity;
  var borderColor = node.pstyle("border-color").value;
  var borderStyle = node.pstyle("border-style").value;
  var borderJoin = node.pstyle("border-join").value;
  var borderCap = node.pstyle("border-cap").value;
  var borderPosition = node.pstyle("border-position").value;
  var borderPattern = node.pstyle("border-dash-pattern").pfValue;
  var borderOffset = node.pstyle("border-dash-offset").pfValue;
  var borderOpacity = node.pstyle("border-opacity").value * eleOpacity;
  var outlineWidth = node.pstyle("outline-width").pfValue;
  var outlineColor = node.pstyle("outline-color").value;
  var outlineStyle = node.pstyle("outline-style").value;
  var outlineOpacity = node.pstyle("outline-opacity").value * eleOpacity;
  var outlineOffset = node.pstyle("outline-offset").value;
  var cornerRadius = node.pstyle("corner-radius").value;
  if (cornerRadius !== "auto") cornerRadius = node.pstyle("corner-radius").pfValue;
  var setupShapeColor = function setupShapeColor2() {
    var bgOpy = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : bgOpacity;
    r2.eleFillStyle(context, node, bgOpy);
  };
  var setupBorderColor = function setupBorderColor2() {
    var bdrOpy = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : borderOpacity;
    r2.colorStrokeStyle(context, borderColor[0], borderColor[1], borderColor[2], bdrOpy);
  };
  var setupOutlineColor = function setupOutlineColor2() {
    var otlnOpy = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : outlineOpacity;
    r2.colorStrokeStyle(context, outlineColor[0], outlineColor[1], outlineColor[2], otlnOpy);
  };
  var getPath = function getPath2(width2, height2, shape, points) {
    var pathCache = r2.nodePathCache = r2.nodePathCache || [];
    var key = hashStrings(shape === "polygon" ? shape + "," + points.join(",") : shape, "" + height2, "" + width2, "" + cornerRadius);
    var cachedPath = pathCache[key];
    var path2;
    var cacheHit = false;
    if (cachedPath != null) {
      path2 = cachedPath;
      cacheHit = true;
      rs2.pathCache = path2;
    } else {
      path2 = new Path2D();
      pathCache[key] = rs2.pathCache = path2;
    }
    return {
      path: path2,
      cacheHit
    };
  };
  var styleShape = node.pstyle("shape").strValue;
  var shapePts = node.pstyle("shape-polygon-points").pfValue;
  if (usePaths) {
    context.translate(pos.x, pos.y);
    var shapePath = getPath(nodeWidth, nodeHeight, styleShape, shapePts);
    path = shapePath.path;
    pathCacheHit = shapePath.cacheHit;
  }
  var drawShape = function drawShape2() {
    if (!pathCacheHit) {
      var npos = pos;
      if (usePaths) {
        npos = {
          x: 0,
          y: 0
        };
      }
      r2.nodeShapes[r2.getNodeShape(node)].draw(path || context, npos.x, npos.y, nodeWidth, nodeHeight, cornerRadius, rs2);
    }
    if (usePaths) {
      context.fill(path);
    } else {
      context.fill();
    }
  };
  var drawImages = function drawImages2() {
    var nodeOpacity = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : eleOpacity;
    var inside = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    var prevBging = _p.backgrounding;
    var totalCompleted = 0;
    for (var _i2 = 0; _i2 < image.length; _i2++) {
      var bgContainment = node.cy().style().getIndexedStyle(node, "background-image-containment", "value", _i2);
      if (inside && bgContainment === "over" || !inside && bgContainment === "inside") {
        totalCompleted++;
        continue;
      }
      if (urlDefined[_i2] && image[_i2].complete && !image[_i2].error) {
        totalCompleted++;
        r2.drawInscribedImage(context, image[_i2], node, _i2, nodeOpacity);
      }
    }
    _p.backgrounding = !(totalCompleted === numImages);
    if (prevBging !== _p.backgrounding) {
      node.updateStyle(false);
    }
  };
  var drawPie = function drawPie2() {
    var redrawShape = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
    var pieOpacity = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : eleOpacity;
    if (r2.hasPie(node)) {
      r2.drawPie(context, node, pieOpacity);
      if (redrawShape) {
        if (!usePaths) {
          r2.nodeShapes[r2.getNodeShape(node)].draw(context, pos.x, pos.y, nodeWidth, nodeHeight, cornerRadius, rs2);
        }
      }
    }
  };
  var drawStripe = function drawStripe2() {
    var redrawShape = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
    var stripeOpacity = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : eleOpacity;
    if (r2.hasStripe(node)) {
      context.save();
      if (usePaths) {
        context.clip(rs2.pathCache);
      } else {
        r2.nodeShapes[r2.getNodeShape(node)].draw(context, pos.x, pos.y, nodeWidth, nodeHeight, cornerRadius, rs2);
        context.clip();
      }
      r2.drawStripe(context, node, stripeOpacity);
      context.restore();
      if (redrawShape) {
        if (!usePaths) {
          r2.nodeShapes[r2.getNodeShape(node)].draw(context, pos.x, pos.y, nodeWidth, nodeHeight, cornerRadius, rs2);
        }
      }
    }
  };
  var darken = function darken2() {
    var darkenOpacity = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : eleOpacity;
    var opacity = (darkness > 0 ? darkness : -darkness) * darkenOpacity;
    var c2 = darkness > 0 ? 0 : 255;
    if (darkness !== 0) {
      r2.colorFillStyle(context, c2, c2, c2, opacity);
      if (usePaths) {
        context.fill(path);
      } else {
        context.fill();
      }
    }
  };
  var drawBorder = function drawBorder2() {
    if (borderWidth > 0) {
      context.lineWidth = borderWidth;
      context.lineCap = borderCap;
      context.lineJoin = borderJoin;
      if (context.setLineDash) {
        switch (borderStyle) {
          case "dotted":
            context.setLineDash([1, 1]);
            break;
          case "dashed":
            context.setLineDash(borderPattern);
            context.lineDashOffset = borderOffset;
            break;
          case "solid":
          case "double":
            context.setLineDash([]);
            break;
        }
      }
      if (borderPosition !== "center") {
        context.save();
        context.lineWidth *= 2;
        if (borderPosition === "inside") {
          usePaths ? context.clip(path) : context.clip();
        } else {
          var region = new Path2D();
          region.rect(-nodeWidth / 2 - borderWidth, -nodeHeight / 2 - borderWidth, nodeWidth + 2 * borderWidth, nodeHeight + 2 * borderWidth);
          region.addPath(path);
          context.clip(region, "evenodd");
        }
        usePaths ? context.stroke(path) : context.stroke();
        context.restore();
      } else {
        usePaths ? context.stroke(path) : context.stroke();
      }
      if (borderStyle === "double") {
        context.lineWidth = borderWidth / 3;
        var gco = context.globalCompositeOperation;
        context.globalCompositeOperation = "destination-out";
        if (usePaths) {
          context.stroke(path);
        } else {
          context.stroke();
        }
        context.globalCompositeOperation = gco;
      }
      if (context.setLineDash) {
        context.setLineDash([]);
      }
    }
  };
  var drawOutline = function drawOutline2() {
    if (outlineWidth > 0) {
      context.lineWidth = outlineWidth;
      context.lineCap = "butt";
      if (context.setLineDash) {
        switch (outlineStyle) {
          case "dotted":
            context.setLineDash([1, 1]);
            break;
          case "dashed":
            context.setLineDash([4, 2]);
            break;
          case "solid":
          case "double":
            context.setLineDash([]);
            break;
        }
      }
      var npos = pos;
      if (usePaths) {
        npos = {
          x: 0,
          y: 0
        };
      }
      var shape = r2.getNodeShape(node);
      var bWidth = borderWidth;
      if (borderPosition === "inside") bWidth = 0;
      if (borderPosition === "outside") bWidth *= 2;
      var scaleX = (nodeWidth + bWidth + (outlineWidth + outlineOffset)) / nodeWidth;
      var scaleY = (nodeHeight + bWidth + (outlineWidth + outlineOffset)) / nodeHeight;
      var sWidth = nodeWidth * scaleX;
      var sHeight = nodeHeight * scaleY;
      var points = r2.nodeShapes[shape].points;
      var _path;
      if (usePaths) {
        var outlinePath = getPath(sWidth, sHeight, shape, points);
        _path = outlinePath.path;
      }
      if (shape === "ellipse") {
        r2.drawEllipsePath(_path || context, npos.x, npos.y, sWidth, sHeight);
      } else if (["round-diamond", "round-heptagon", "round-hexagon", "round-octagon", "round-pentagon", "round-polygon", "round-triangle", "round-tag"].includes(shape)) {
        var sMult = 0;
        var offsetX = 0;
        var offsetY = 0;
        if (shape === "round-diamond") {
          sMult = (bWidth + outlineOffset + outlineWidth) * 1.4;
        } else if (shape === "round-heptagon") {
          sMult = (bWidth + outlineOffset + outlineWidth) * 1.075;
          offsetY = -(bWidth / 2 + outlineOffset + outlineWidth) / 35;
        } else if (shape === "round-hexagon") {
          sMult = (bWidth + outlineOffset + outlineWidth) * 1.12;
        } else if (shape === "round-pentagon") {
          sMult = (bWidth + outlineOffset + outlineWidth) * 1.13;
          offsetY = -(bWidth / 2 + outlineOffset + outlineWidth) / 15;
        } else if (shape === "round-tag") {
          sMult = (bWidth + outlineOffset + outlineWidth) * 1.12;
          offsetX = (bWidth / 2 + outlineWidth + outlineOffset) * 0.07;
        } else if (shape === "round-triangle") {
          sMult = (bWidth + outlineOffset + outlineWidth) * (Math.PI / 2);
          offsetY = -(bWidth + outlineOffset / 2 + outlineWidth) / Math.PI;
        }
        if (sMult !== 0) {
          scaleX = (nodeWidth + sMult) / nodeWidth;
          sWidth = nodeWidth * scaleX;
          if (!["round-hexagon", "round-tag"].includes(shape)) {
            scaleY = (nodeHeight + sMult) / nodeHeight;
            sHeight = nodeHeight * scaleY;
          }
        }
        cornerRadius = cornerRadius === "auto" ? getRoundPolygonRadius(sWidth, sHeight) : cornerRadius;
        var halfW = sWidth / 2;
        var halfH = sHeight / 2;
        var radius2 = cornerRadius + (bWidth + outlineWidth + outlineOffset) / 2;
        var p3 = new Array(points.length / 2);
        var corners = new Array(points.length / 2);
        for (var _i2 = 0; _i2 < points.length / 2; _i2++) {
          p3[_i2] = {
            x: npos.x + offsetX + halfW * points[_i2 * 2],
            y: npos.y + offsetY + halfH * points[_i2 * 2 + 1]
          };
        }
        var _i3, p1, p22, p32, len = p3.length;
        p1 = p3[len - 1];
        for (_i3 = 0; _i3 < len; _i3++) {
          p22 = p3[_i3 % len];
          p32 = p3[(_i3 + 1) % len];
          corners[_i3] = getRoundCorner(p1, p22, p32, radius2);
          p1 = p22;
          p22 = p32;
        }
        r2.drawRoundPolygonPath(_path || context, npos.x + offsetX, npos.y + offsetY, nodeWidth * scaleX, nodeHeight * scaleY, points, corners);
      } else if (["roundrectangle", "round-rectangle"].includes(shape)) {
        cornerRadius = cornerRadius === "auto" ? getRoundRectangleRadius(sWidth, sHeight) : cornerRadius;
        r2.drawRoundRectanglePath(_path || context, npos.x, npos.y, sWidth, sHeight, cornerRadius + (bWidth + outlineWidth + outlineOffset) / 2);
      } else if (["cutrectangle", "cut-rectangle"].includes(shape)) {
        cornerRadius = cornerRadius === "auto" ? getCutRectangleCornerLength() : cornerRadius;
        r2.drawCutRectanglePath(_path || context, npos.x, npos.y, sWidth, sHeight, null, cornerRadius + (bWidth + outlineWidth + outlineOffset) / 4);
      } else if (["bottomroundrectangle", "bottom-round-rectangle"].includes(shape)) {
        cornerRadius = cornerRadius === "auto" ? getRoundRectangleRadius(sWidth, sHeight) : cornerRadius;
        r2.drawBottomRoundRectanglePath(_path || context, npos.x, npos.y, sWidth, sHeight, cornerRadius + (bWidth + outlineWidth + outlineOffset) / 2);
      } else if (shape === "barrel") {
        r2.drawBarrelPath(_path || context, npos.x, npos.y, sWidth, sHeight);
      } else if (shape.startsWith("polygon") || ["rhomboid", "right-rhomboid", "round-tag", "tag", "vee"].includes(shape)) {
        var pad = (bWidth + outlineWidth + outlineOffset) / nodeWidth;
        points = joinLines(expandPolygon(points, pad));
        r2.drawPolygonPath(_path || context, npos.x, npos.y, nodeWidth, nodeHeight, points);
      } else {
        var _pad = (bWidth + outlineWidth + outlineOffset) / nodeWidth;
        points = joinLines(expandPolygon(points, -_pad));
        r2.drawPolygonPath(_path || context, npos.x, npos.y, nodeWidth, nodeHeight, points);
      }
      if (usePaths) {
        context.stroke(_path);
      } else {
        context.stroke();
      }
      if (outlineStyle === "double") {
        context.lineWidth = bWidth / 3;
        var gco = context.globalCompositeOperation;
        context.globalCompositeOperation = "destination-out";
        if (usePaths) {
          context.stroke(_path);
        } else {
          context.stroke();
        }
        context.globalCompositeOperation = gco;
      }
      if (context.setLineDash) {
        context.setLineDash([]);
      }
    }
  };
  var drawOverlay = function drawOverlay2() {
    if (shouldDrawOverlay) {
      r2.drawNodeOverlay(context, node, pos, nodeWidth, nodeHeight);
    }
  };
  var drawUnderlay = function drawUnderlay2() {
    if (shouldDrawOverlay) {
      r2.drawNodeUnderlay(context, node, pos, nodeWidth, nodeHeight);
    }
  };
  var drawText = function drawText2() {
    r2.drawElementText(context, node, null, drawLabel);
  };
  var ghost = node.pstyle("ghost").value === "yes";
  if (ghost) {
    var gx = node.pstyle("ghost-offset-x").pfValue;
    var gy = node.pstyle("ghost-offset-y").pfValue;
    var ghostOpacity = node.pstyle("ghost-opacity").value;
    var effGhostOpacity = ghostOpacity * eleOpacity;
    context.translate(gx, gy);
    setupOutlineColor();
    drawOutline();
    setupShapeColor(ghostOpacity * bgOpacity);
    drawShape();
    drawImages(effGhostOpacity, true);
    setupBorderColor(ghostOpacity * borderOpacity);
    drawBorder();
    drawPie(darkness !== 0 || borderWidth !== 0);
    drawStripe(darkness !== 0 || borderWidth !== 0);
    drawImages(effGhostOpacity, false);
    darken(effGhostOpacity);
    context.translate(-gx, -gy);
  }
  if (usePaths) {
    context.translate(-pos.x, -pos.y);
  }
  drawUnderlay();
  if (usePaths) {
    context.translate(pos.x, pos.y);
  }
  setupOutlineColor();
  drawOutline();
  setupShapeColor();
  drawShape();
  drawImages(eleOpacity, true);
  setupBorderColor();
  drawBorder();
  drawPie(darkness !== 0 || borderWidth !== 0);
  drawStripe(darkness !== 0 || borderWidth !== 0);
  drawImages(eleOpacity, false);
  darken();
  if (usePaths) {
    context.translate(-pos.x, -pos.y);
  }
  drawText();
  drawOverlay();
  if (shiftToOriginWithBb) {
    context.translate(bb.x1, bb.y1);
  }
};
var drawNodeOverlayUnderlay = function drawNodeOverlayUnderlay2(overlayOrUnderlay) {
  if (!["overlay", "underlay"].includes(overlayOrUnderlay)) {
    throw new Error("Invalid state");
  }
  return function(context, node, pos, nodeWidth, nodeHeight) {
    var r2 = this;
    if (!node.visible()) {
      return;
    }
    var padding = node.pstyle("".concat(overlayOrUnderlay, "-padding")).pfValue;
    var opacity = node.pstyle("".concat(overlayOrUnderlay, "-opacity")).value;
    var color = node.pstyle("".concat(overlayOrUnderlay, "-color")).value;
    var shape = node.pstyle("".concat(overlayOrUnderlay, "-shape")).value;
    var radius2 = node.pstyle("".concat(overlayOrUnderlay, "-corner-radius")).value;
    if (opacity > 0) {
      pos = pos || node.position();
      if (nodeWidth == null || nodeHeight == null) {
        var _padding = node.padding();
        nodeWidth = node.width() + 2 * _padding;
        nodeHeight = node.height() + 2 * _padding;
      }
      r2.colorFillStyle(context, color[0], color[1], color[2], opacity);
      r2.nodeShapes[shape].draw(context, pos.x, pos.y, nodeWidth + padding * 2, nodeHeight + padding * 2, radius2);
      context.fill();
    }
  };
};
CRp$6.drawNodeOverlay = drawNodeOverlayUnderlay("overlay");
CRp$6.drawNodeUnderlay = drawNodeOverlayUnderlay("underlay");
CRp$6.hasPie = function(node) {
  node = node[0];
  return node._private.hasPie;
};
CRp$6.hasStripe = function(node) {
  node = node[0];
  return node._private.hasStripe;
};
CRp$6.drawPie = function(context, node, nodeOpacity, pos) {
  node = node[0];
  pos = pos || node.position();
  var cyStyle = node.cy().style();
  var pieSize = node.pstyle("pie-size");
  var hole = node.pstyle("pie-hole");
  var overallStartAngle = node.pstyle("pie-start-angle").pfValue;
  var x3 = pos.x;
  var y3 = pos.y;
  var nodeW = node.width();
  var nodeH = node.height();
  var radius2 = Math.min(nodeW, nodeH) / 2;
  var holeRadius;
  var lastPercent = 0;
  var usePaths = this.usePaths();
  if (usePaths) {
    x3 = 0;
    y3 = 0;
  }
  if (pieSize.units === "%") {
    radius2 = radius2 * pieSize.pfValue;
  } else if (pieSize.pfValue !== void 0) {
    radius2 = pieSize.pfValue / 2;
  }
  if (hole.units === "%") {
    holeRadius = radius2 * hole.pfValue;
  } else if (hole.pfValue !== void 0) {
    holeRadius = hole.pfValue / 2;
  }
  if (holeRadius >= radius2) {
    return;
  }
  for (var i2 = 1; i2 <= cyStyle.pieBackgroundN; i2++) {
    var size3 = node.pstyle("pie-" + i2 + "-background-size").value;
    var color = node.pstyle("pie-" + i2 + "-background-color").value;
    var opacity = node.pstyle("pie-" + i2 + "-background-opacity").value * nodeOpacity;
    var percent = size3 / 100;
    if (percent + lastPercent > 1) {
      percent = 1 - lastPercent;
    }
    var angleStart = 1.5 * Math.PI + 2 * Math.PI * lastPercent;
    angleStart += overallStartAngle;
    var angleDelta = 2 * Math.PI * percent;
    var angleEnd = angleStart + angleDelta;
    if (size3 === 0 || lastPercent >= 1 || lastPercent + percent > 1) {
      continue;
    }
    if (holeRadius === 0) {
      context.beginPath();
      context.moveTo(x3, y3);
      context.arc(x3, y3, radius2, angleStart, angleEnd);
      context.closePath();
    } else {
      context.beginPath();
      context.arc(x3, y3, radius2, angleStart, angleEnd);
      context.arc(x3, y3, holeRadius, angleEnd, angleStart, true);
      context.closePath();
    }
    this.colorFillStyle(context, color[0], color[1], color[2], opacity);
    context.fill();
    lastPercent += percent;
  }
};
CRp$6.drawStripe = function(context, node, nodeOpacity, pos) {
  node = node[0];
  pos = pos || node.position();
  var cyStyle = node.cy().style();
  var x3 = pos.x;
  var y3 = pos.y;
  var nodeW = node.width();
  var nodeH = node.height();
  var lastPercent = 0;
  var usePaths = this.usePaths();
  context.save();
  var direction = node.pstyle("stripe-direction").value;
  var stripeSize = node.pstyle("stripe-size");
  switch (direction) {
    case "vertical":
      break;
    case "righward":
      context.rotate(-Math.PI / 2);
      break;
  }
  var stripeW = nodeW;
  var stripeH = nodeH;
  if (stripeSize.units === "%") {
    stripeW = stripeW * stripeSize.pfValue;
    stripeH = stripeH * stripeSize.pfValue;
  } else if (stripeSize.pfValue !== void 0) {
    stripeW = stripeSize.pfValue;
    stripeH = stripeSize.pfValue;
  }
  if (usePaths) {
    x3 = 0;
    y3 = 0;
  }
  y3 -= stripeW / 2;
  x3 -= stripeH / 2;
  for (var i2 = 1; i2 <= cyStyle.stripeBackgroundN; i2++) {
    var size3 = node.pstyle("stripe-" + i2 + "-background-size").value;
    var color = node.pstyle("stripe-" + i2 + "-background-color").value;
    var opacity = node.pstyle("stripe-" + i2 + "-background-opacity").value * nodeOpacity;
    var percent = size3 / 100;
    if (percent + lastPercent > 1) {
      percent = 1 - lastPercent;
    }
    if (size3 === 0 || lastPercent >= 1 || lastPercent + percent > 1) {
      continue;
    }
    context.beginPath();
    context.rect(x3, y3 + stripeH * lastPercent, stripeW, stripeH * percent);
    context.closePath();
    this.colorFillStyle(context, color[0], color[1], color[2], opacity);
    context.fill();
    lastPercent += percent;
  }
  context.restore();
};
var CRp$5 = {};
var motionBlurDelay = 100;
CRp$5.getPixelRatio = function() {
  var context = this.data.contexts[0];
  if (this.forcedPixelRatio != null) {
    return this.forcedPixelRatio;
  }
  var containerWindow = this.cy.window();
  var backingStore = context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;
  return (containerWindow.devicePixelRatio || 1) / backingStore;
};
CRp$5.paintCache = function(context) {
  var caches = this.paintCaches = this.paintCaches || [];
  var needToCreateCache = true;
  var cache3;
  for (var i2 = 0; i2 < caches.length; i2++) {
    cache3 = caches[i2];
    if (cache3.context === context) {
      needToCreateCache = false;
      break;
    }
  }
  if (needToCreateCache) {
    cache3 = {
      context
    };
    caches.push(cache3);
  }
  return cache3;
};
CRp$5.createGradientStyleFor = function(context, shapeStyleName, ele, fill, opacity) {
  var gradientStyle;
  var usePaths = this.usePaths();
  var colors2 = ele.pstyle(shapeStyleName + "-gradient-stop-colors").value, positions2 = ele.pstyle(shapeStyleName + "-gradient-stop-positions").pfValue;
  if (fill === "radial-gradient") {
    if (ele.isEdge()) {
      var start = ele.sourceEndpoint(), end = ele.targetEndpoint(), mid = ele.midpoint();
      var d1 = dist(start, mid);
      var d2 = dist(end, mid);
      gradientStyle = context.createRadialGradient(mid.x, mid.y, 0, mid.x, mid.y, Math.max(d1, d2));
    } else {
      var pos = usePaths ? {
        x: 0,
        y: 0
      } : ele.position(), width2 = ele.paddedWidth(), height2 = ele.paddedHeight();
      gradientStyle = context.createRadialGradient(pos.x, pos.y, 0, pos.x, pos.y, Math.max(width2, height2));
    }
  } else {
    if (ele.isEdge()) {
      var _start = ele.sourceEndpoint(), _end = ele.targetEndpoint();
      gradientStyle = context.createLinearGradient(_start.x, _start.y, _end.x, _end.y);
    } else {
      var _pos = usePaths ? {
        x: 0,
        y: 0
      } : ele.position(), _width = ele.paddedWidth(), _height = ele.paddedHeight(), halfWidth = _width / 2, halfHeight = _height / 2;
      var direction = ele.pstyle("background-gradient-direction").value;
      switch (direction) {
        case "to-bottom":
          gradientStyle = context.createLinearGradient(_pos.x, _pos.y - halfHeight, _pos.x, _pos.y + halfHeight);
          break;
        case "to-top":
          gradientStyle = context.createLinearGradient(_pos.x, _pos.y + halfHeight, _pos.x, _pos.y - halfHeight);
          break;
        case "to-left":
          gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y, _pos.x - halfWidth, _pos.y);
          break;
        case "to-right":
          gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y, _pos.x + halfWidth, _pos.y);
          break;
        case "to-bottom-right":
        case "to-right-bottom":
          gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y - halfHeight, _pos.x + halfWidth, _pos.y + halfHeight);
          break;
        case "to-top-right":
        case "to-right-top":
          gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y + halfHeight, _pos.x + halfWidth, _pos.y - halfHeight);
          break;
        case "to-bottom-left":
        case "to-left-bottom":
          gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y - halfHeight, _pos.x - halfWidth, _pos.y + halfHeight);
          break;
        case "to-top-left":
        case "to-left-top":
          gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y + halfHeight, _pos.x - halfWidth, _pos.y - halfHeight);
          break;
      }
    }
  }
  if (!gradientStyle) return null;
  var hasPositions = positions2.length === colors2.length;
  var length = colors2.length;
  for (var i2 = 0; i2 < length; i2++) {
    gradientStyle.addColorStop(hasPositions ? positions2[i2] : i2 / (length - 1), "rgba(" + colors2[i2][0] + "," + colors2[i2][1] + "," + colors2[i2][2] + "," + opacity + ")");
  }
  return gradientStyle;
};
CRp$5.gradientFillStyle = function(context, ele, fill, opacity) {
  var gradientStyle = this.createGradientStyleFor(context, "background", ele, fill, opacity);
  if (!gradientStyle) return null;
  context.fillStyle = gradientStyle;
};
CRp$5.colorFillStyle = function(context, r2, g2, b2, a2) {
  context.fillStyle = "rgba(" + r2 + "," + g2 + "," + b2 + "," + a2 + ")";
};
CRp$5.eleFillStyle = function(context, ele, opacity) {
  var backgroundFill = ele.pstyle("background-fill").value;
  if (backgroundFill === "linear-gradient" || backgroundFill === "radial-gradient") {
    this.gradientFillStyle(context, ele, backgroundFill, opacity);
  } else {
    var backgroundColor = ele.pstyle("background-color").value;
    this.colorFillStyle(context, backgroundColor[0], backgroundColor[1], backgroundColor[2], opacity);
  }
};
CRp$5.gradientStrokeStyle = function(context, ele, fill, opacity) {
  var gradientStyle = this.createGradientStyleFor(context, "line", ele, fill, opacity);
  if (!gradientStyle) return null;
  context.strokeStyle = gradientStyle;
};
CRp$5.colorStrokeStyle = function(context, r2, g2, b2, a2) {
  context.strokeStyle = "rgba(" + r2 + "," + g2 + "," + b2 + "," + a2 + ")";
};
CRp$5.eleStrokeStyle = function(context, ele, opacity) {
  var lineFill = ele.pstyle("line-fill").value;
  if (lineFill === "linear-gradient" || lineFill === "radial-gradient") {
    this.gradientStrokeStyle(context, ele, lineFill, opacity);
  } else {
    var lineColor = ele.pstyle("line-color").value;
    this.colorStrokeStyle(context, lineColor[0], lineColor[1], lineColor[2], opacity);
  }
};
CRp$5.matchCanvasSize = function(container2) {
  var r2 = this;
  var data4 = r2.data;
  var bb = r2.findContainerClientCoords();
  var width2 = bb[2];
  var height2 = bb[3];
  var pixelRatio = r2.getPixelRatio();
  var mbPxRatio = r2.motionBlurPxRatio;
  if (container2 === r2.data.bufferCanvases[r2.MOTIONBLUR_BUFFER_NODE] || container2 === r2.data.bufferCanvases[r2.MOTIONBLUR_BUFFER_DRAG]) {
    pixelRatio = mbPxRatio;
  }
  var canvasWidth = width2 * pixelRatio;
  var canvasHeight = height2 * pixelRatio;
  var canvas;
  if (canvasWidth === r2.canvasWidth && canvasHeight === r2.canvasHeight) {
    return;
  }
  r2.fontCaches = null;
  var canvasContainer = data4.canvasContainer;
  canvasContainer.style.width = width2 + "px";
  canvasContainer.style.height = height2 + "px";
  for (var i2 = 0; i2 < r2.CANVAS_LAYERS; i2++) {
    canvas = data4.canvases[i2];
    canvas.width = canvasWidth;
    canvas.height = canvasHeight;
    canvas.style.width = width2 + "px";
    canvas.style.height = height2 + "px";
  }
  for (var i2 = 0; i2 < r2.BUFFER_COUNT; i2++) {
    canvas = data4.bufferCanvases[i2];
    canvas.width = canvasWidth;
    canvas.height = canvasHeight;
    canvas.style.width = width2 + "px";
    canvas.style.height = height2 + "px";
  }
  r2.textureMult = 1;
  if (pixelRatio <= 1) {
    canvas = data4.bufferCanvases[r2.TEXTURE_BUFFER];
    r2.textureMult = 2;
    canvas.width = canvasWidth * r2.textureMult;
    canvas.height = canvasHeight * r2.textureMult;
  }
  r2.canvasWidth = canvasWidth;
  r2.canvasHeight = canvasHeight;
  r2.pixelRatio = pixelRatio;
};
CRp$5.renderTo = function(cxt, zoom2, pan2, pxRatio) {
  this.render({
    forcedContext: cxt,
    forcedZoom: zoom2,
    forcedPan: pan2,
    drawAllLayers: true,
    forcedPxRatio: pxRatio
  });
};
CRp$5.clearCanvas = function() {
  var r2 = this;
  var data4 = r2.data;
  function clear(context) {
    context.clearRect(0, 0, r2.canvasWidth, r2.canvasHeight);
  }
  clear(data4.contexts[r2.NODE]);
  clear(data4.contexts[r2.DRAG]);
};
CRp$5.render = function(options3) {
  var r2 = this;
  options3 = options3 || staticEmptyObject();
  var cy = r2.cy;
  var forcedContext = options3.forcedContext;
  var drawAllLayers = options3.drawAllLayers;
  var drawOnlyNodeLayer = options3.drawOnlyNodeLayer;
  var forcedZoom = options3.forcedZoom;
  var forcedPan = options3.forcedPan;
  var pixelRatio = options3.forcedPxRatio === void 0 ? this.getPixelRatio() : options3.forcedPxRatio;
  var data4 = r2.data;
  var needDraw = data4.canvasNeedsRedraw;
  var textureDraw = r2.textureOnViewport && !forcedContext && (r2.pinching || r2.hoverData.dragging || r2.swipePanning || r2.data.wheelZooming);
  var motionBlur = options3.motionBlur !== void 0 ? options3.motionBlur : r2.motionBlur;
  var mbPxRatio = r2.motionBlurPxRatio;
  var hasCompoundNodes2 = cy.hasCompoundNodes();
  var inNodeDragGesture = r2.hoverData.draggingEles;
  var inBoxSelection = r2.hoverData.selecting || r2.touchData.selecting ? true : false;
  motionBlur = motionBlur && !forcedContext && r2.motionBlurEnabled && !inBoxSelection;
  var motionBlurFadeEffect = motionBlur;
  if (!forcedContext) {
    if (r2.prevPxRatio !== pixelRatio) {
      r2.invalidateContainerClientCoordsCache();
      r2.matchCanvasSize(r2.container);
      r2.redrawHint("eles", true);
      r2.redrawHint("drag", true);
    }
    r2.prevPxRatio = pixelRatio;
  }
  if (!forcedContext && r2.motionBlurTimeout) {
    clearTimeout(r2.motionBlurTimeout);
  }
  if (motionBlur) {
    if (r2.mbFrames == null) {
      r2.mbFrames = 0;
    }
    r2.mbFrames++;
    if (r2.mbFrames < 3) {
      motionBlurFadeEffect = false;
    }
    if (r2.mbFrames > r2.minMbLowQualFrames) {
      r2.motionBlurPxRatio = r2.mbPxRBlurry;
    }
  }
  if (r2.clearingMotionBlur) {
    r2.motionBlurPxRatio = 1;
  }
  if (r2.textureDrawLastFrame && !textureDraw) {
    needDraw[r2.NODE] = true;
    needDraw[r2.SELECT_BOX] = true;
  }
  var style3 = cy.style();
  var zoom2 = cy.zoom();
  var effectiveZoom = forcedZoom !== void 0 ? forcedZoom : zoom2;
  var pan2 = cy.pan();
  var effectivePan = {
    x: pan2.x,
    y: pan2.y
  };
  var vp = {
    zoom: zoom2,
    pan: {
      x: pan2.x,
      y: pan2.y
    }
  };
  var prevVp = r2.prevViewport;
  var viewportIsDiff = prevVp === void 0 || vp.zoom !== prevVp.zoom || vp.pan.x !== prevVp.pan.x || vp.pan.y !== prevVp.pan.y;
  if (!viewportIsDiff && !(inNodeDragGesture && !hasCompoundNodes2)) {
    r2.motionBlurPxRatio = 1;
  }
  if (forcedPan) {
    effectivePan = forcedPan;
  }
  effectiveZoom *= pixelRatio;
  effectivePan.x *= pixelRatio;
  effectivePan.y *= pixelRatio;
  var eles = r2.getCachedZSortedEles();
  function mbclear(context2, x3, y3, w2, h2) {
    var gco = context2.globalCompositeOperation;
    context2.globalCompositeOperation = "destination-out";
    r2.colorFillStyle(context2, 255, 255, 255, r2.motionBlurTransparency);
    context2.fillRect(x3, y3, w2, h2);
    context2.globalCompositeOperation = gco;
  }
  function setContextTransform2(context2, clear2) {
    var ePan, eZoom, w2, h2;
    if (!r2.clearingMotionBlur && (context2 === data4.bufferContexts[r2.MOTIONBLUR_BUFFER_NODE] || context2 === data4.bufferContexts[r2.MOTIONBLUR_BUFFER_DRAG])) {
      ePan = {
        x: pan2.x * mbPxRatio,
        y: pan2.y * mbPxRatio
      };
      eZoom = zoom2 * mbPxRatio;
      w2 = r2.canvasWidth * mbPxRatio;
      h2 = r2.canvasHeight * mbPxRatio;
    } else {
      ePan = effectivePan;
      eZoom = effectiveZoom;
      w2 = r2.canvasWidth;
      h2 = r2.canvasHeight;
    }
    context2.setTransform(1, 0, 0, 1, 0, 0);
    if (clear2 === "motionBlur") {
      mbclear(context2, 0, 0, w2, h2);
    } else if (!forcedContext && (clear2 === void 0 || clear2)) {
      context2.clearRect(0, 0, w2, h2);
    }
    if (!drawAllLayers) {
      context2.translate(ePan.x, ePan.y);
      context2.scale(eZoom, eZoom);
    }
    if (forcedPan) {
      context2.translate(forcedPan.x, forcedPan.y);
    }
    if (forcedZoom) {
      context2.scale(forcedZoom, forcedZoom);
    }
  }
  if (!textureDraw) {
    r2.textureDrawLastFrame = false;
  }
  if (textureDraw) {
    r2.textureDrawLastFrame = true;
    if (!r2.textureCache) {
      r2.textureCache = {};
      r2.textureCache.bb = cy.mutableElements().boundingBox();
      r2.textureCache.texture = r2.data.bufferCanvases[r2.TEXTURE_BUFFER];
      var cxt = r2.data.bufferContexts[r2.TEXTURE_BUFFER];
      cxt.setTransform(1, 0, 0, 1, 0, 0);
      cxt.clearRect(0, 0, r2.canvasWidth * r2.textureMult, r2.canvasHeight * r2.textureMult);
      r2.render({
        forcedContext: cxt,
        drawOnlyNodeLayer: true,
        forcedPxRatio: pixelRatio * r2.textureMult
      });
      var vp = r2.textureCache.viewport = {
        zoom: cy.zoom(),
        pan: cy.pan(),
        width: r2.canvasWidth,
        height: r2.canvasHeight
      };
      vp.mpan = {
        x: (0 - vp.pan.x) / vp.zoom,
        y: (0 - vp.pan.y) / vp.zoom
      };
    }
    needDraw[r2.DRAG] = false;
    needDraw[r2.NODE] = false;
    var context = data4.contexts[r2.NODE];
    var texture = r2.textureCache.texture;
    var vp = r2.textureCache.viewport;
    context.setTransform(1, 0, 0, 1, 0, 0);
    if (motionBlur) {
      mbclear(context, 0, 0, vp.width, vp.height);
    } else {
      context.clearRect(0, 0, vp.width, vp.height);
    }
    var outsideBgColor = style3.core("outside-texture-bg-color").value;
    var outsideBgOpacity = style3.core("outside-texture-bg-opacity").value;
    r2.colorFillStyle(context, outsideBgColor[0], outsideBgColor[1], outsideBgColor[2], outsideBgOpacity);
    context.fillRect(0, 0, vp.width, vp.height);
    var zoom2 = cy.zoom();
    setContextTransform2(context, false);
    context.clearRect(vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);
    context.drawImage(texture, vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);
  } else if (r2.textureOnViewport && !forcedContext) {
    r2.textureCache = null;
  }
  var extent2 = cy.extent();
  var vpManip = r2.pinching || r2.hoverData.dragging || r2.swipePanning || r2.data.wheelZooming || r2.hoverData.draggingEles || r2.cy.animated();
  var hideEdges = r2.hideEdgesOnViewport && vpManip;
  var needMbClear = [];
  needMbClear[r2.NODE] = !needDraw[r2.NODE] && motionBlur && !r2.clearedForMotionBlur[r2.NODE] || r2.clearingMotionBlur;
  if (needMbClear[r2.NODE]) {
    r2.clearedForMotionBlur[r2.NODE] = true;
  }
  needMbClear[r2.DRAG] = !needDraw[r2.DRAG] && motionBlur && !r2.clearedForMotionBlur[r2.DRAG] || r2.clearingMotionBlur;
  if (needMbClear[r2.DRAG]) {
    r2.clearedForMotionBlur[r2.DRAG] = true;
  }
  if (needDraw[r2.NODE] || drawAllLayers || drawOnlyNodeLayer || needMbClear[r2.NODE]) {
    var useBuffer = motionBlur && !needMbClear[r2.NODE] && mbPxRatio !== 1;
    var context = forcedContext || (useBuffer ? r2.data.bufferContexts[r2.MOTIONBLUR_BUFFER_NODE] : data4.contexts[r2.NODE]);
    var clear = motionBlur && !useBuffer ? "motionBlur" : void 0;
    setContextTransform2(context, clear);
    if (hideEdges) {
      r2.drawCachedNodes(context, eles.nondrag, pixelRatio, extent2);
    } else {
      r2.drawLayeredElements(context, eles.nondrag, pixelRatio, extent2);
    }
    if (r2.debug) {
      r2.drawDebugPoints(context, eles.nondrag);
    }
    if (!drawAllLayers && !motionBlur) {
      needDraw[r2.NODE] = false;
    }
  }
  if (!drawOnlyNodeLayer && (needDraw[r2.DRAG] || drawAllLayers || needMbClear[r2.DRAG])) {
    var useBuffer = motionBlur && !needMbClear[r2.DRAG] && mbPxRatio !== 1;
    var context = forcedContext || (useBuffer ? r2.data.bufferContexts[r2.MOTIONBLUR_BUFFER_DRAG] : data4.contexts[r2.DRAG]);
    setContextTransform2(context, motionBlur && !useBuffer ? "motionBlur" : void 0);
    if (hideEdges) {
      r2.drawCachedNodes(context, eles.drag, pixelRatio, extent2);
    } else {
      r2.drawCachedElements(context, eles.drag, pixelRatio, extent2);
    }
    if (r2.debug) {
      r2.drawDebugPoints(context, eles.drag);
    }
    if (!drawAllLayers && !motionBlur) {
      needDraw[r2.DRAG] = false;
    }
  }
  this.drawSelectionRectangle(options3, setContextTransform2);
  if (motionBlur && mbPxRatio !== 1) {
    var cxtNode = data4.contexts[r2.NODE];
    var txtNode = r2.data.bufferCanvases[r2.MOTIONBLUR_BUFFER_NODE];
    var cxtDrag = data4.contexts[r2.DRAG];
    var txtDrag = r2.data.bufferCanvases[r2.MOTIONBLUR_BUFFER_DRAG];
    var drawMotionBlur = function drawMotionBlur2(cxt2, txt, needClear) {
      cxt2.setTransform(1, 0, 0, 1, 0, 0);
      if (needClear || !motionBlurFadeEffect) {
        cxt2.clearRect(0, 0, r2.canvasWidth, r2.canvasHeight);
      } else {
        mbclear(cxt2, 0, 0, r2.canvasWidth, r2.canvasHeight);
      }
      var pxr = mbPxRatio;
      cxt2.drawImage(
        txt,
        // img
        0,
        0,
        // sx, sy
        r2.canvasWidth * pxr,
        r2.canvasHeight * pxr,
        // sw, sh
        0,
        0,
        // x, y
        r2.canvasWidth,
        r2.canvasHeight
        // w, h
      );
    };
    if (needDraw[r2.NODE] || needMbClear[r2.NODE]) {
      drawMotionBlur(cxtNode, txtNode, needMbClear[r2.NODE]);
      needDraw[r2.NODE] = false;
    }
    if (needDraw[r2.DRAG] || needMbClear[r2.DRAG]) {
      drawMotionBlur(cxtDrag, txtDrag, needMbClear[r2.DRAG]);
      needDraw[r2.DRAG] = false;
    }
  }
  r2.prevViewport = vp;
  if (r2.clearingMotionBlur) {
    r2.clearingMotionBlur = false;
    r2.motionBlurCleared = true;
    r2.motionBlur = true;
  }
  if (motionBlur) {
    r2.motionBlurTimeout = setTimeout(function() {
      r2.motionBlurTimeout = null;
      r2.clearedForMotionBlur[r2.NODE] = false;
      r2.clearedForMotionBlur[r2.DRAG] = false;
      r2.motionBlur = false;
      r2.clearingMotionBlur = !textureDraw;
      r2.mbFrames = 0;
      needDraw[r2.NODE] = true;
      needDraw[r2.DRAG] = true;
      r2.redraw();
    }, motionBlurDelay);
  }
  if (!forcedContext) {
    cy.emit("render");
  }
};
var fpsHeight;
CRp$5.drawSelectionRectangle = function(options3, setContextTransform2) {
  var r2 = this;
  var cy = r2.cy;
  var data4 = r2.data;
  var style3 = cy.style();
  var drawOnlyNodeLayer = options3.drawOnlyNodeLayer;
  var drawAllLayers = options3.drawAllLayers;
  var needDraw = data4.canvasNeedsRedraw;
  var forcedContext = options3.forcedContext;
  if (r2.showFps || !drawOnlyNodeLayer && needDraw[r2.SELECT_BOX] && !drawAllLayers) {
    var context = forcedContext || data4.contexts[r2.SELECT_BOX];
    setContextTransform2(context);
    if (r2.selection[4] == 1 && (r2.hoverData.selecting || r2.touchData.selecting)) {
      var zoom2 = r2.cy.zoom();
      var borderWidth = style3.core("selection-box-border-width").value / zoom2;
      context.lineWidth = borderWidth;
      context.fillStyle = "rgba(" + style3.core("selection-box-color").value[0] + "," + style3.core("selection-box-color").value[1] + "," + style3.core("selection-box-color").value[2] + "," + style3.core("selection-box-opacity").value + ")";
      context.fillRect(r2.selection[0], r2.selection[1], r2.selection[2] - r2.selection[0], r2.selection[3] - r2.selection[1]);
      if (borderWidth > 0) {
        context.strokeStyle = "rgba(" + style3.core("selection-box-border-color").value[0] + "," + style3.core("selection-box-border-color").value[1] + "," + style3.core("selection-box-border-color").value[2] + "," + style3.core("selection-box-opacity").value + ")";
        context.strokeRect(r2.selection[0], r2.selection[1], r2.selection[2] - r2.selection[0], r2.selection[3] - r2.selection[1]);
      }
    }
    if (data4.bgActivePosistion && !r2.hoverData.selecting) {
      var zoom2 = r2.cy.zoom();
      var pos = data4.bgActivePosistion;
      context.fillStyle = "rgba(" + style3.core("active-bg-color").value[0] + "," + style3.core("active-bg-color").value[1] + "," + style3.core("active-bg-color").value[2] + "," + style3.core("active-bg-opacity").value + ")";
      context.beginPath();
      context.arc(pos.x, pos.y, style3.core("active-bg-size").pfValue / zoom2, 0, 2 * Math.PI);
      context.fill();
    }
    var timeToRender = r2.lastRedrawTime;
    if (r2.showFps && timeToRender) {
      timeToRender = Math.round(timeToRender);
      var fps = Math.round(1e3 / timeToRender);
      var text = "1 frame = " + timeToRender + " ms = " + fps + " fps";
      context.setTransform(1, 0, 0, 1, 0, 0);
      context.fillStyle = "rgba(255, 0, 0, 0.75)";
      context.strokeStyle = "rgba(255, 0, 0, 0.75)";
      context.font = "30px Arial";
      if (!fpsHeight) {
        var dims = context.measureText(text);
        fpsHeight = dims.actualBoundingBoxAscent;
      }
      context.fillText(text, 0, fpsHeight);
      var maxFps = 60;
      context.strokeRect(0, fpsHeight + 10, 250, 20);
      context.fillRect(0, fpsHeight + 10, 250 * Math.min(fps / maxFps, 1), 20);
    }
    if (!drawAllLayers) {
      needDraw[r2.SELECT_BOX] = false;
    }
  }
};
function compileShader(gl2, type2, source) {
  var shader = gl2.createShader(type2);
  gl2.shaderSource(shader, source);
  gl2.compileShader(shader);
  if (!gl2.getShaderParameter(shader, gl2.COMPILE_STATUS)) {
    throw new Error(gl2.getShaderInfoLog(shader));
  }
  return shader;
}
function createProgram(gl2, vertexSource, fragementSource) {
  var vertexShader = compileShader(gl2, gl2.VERTEX_SHADER, vertexSource);
  var fragmentShader = compileShader(gl2, gl2.FRAGMENT_SHADER, fragementSource);
  var program = gl2.createProgram();
  gl2.attachShader(program, vertexShader);
  gl2.attachShader(program, fragmentShader);
  gl2.linkProgram(program);
  if (!gl2.getProgramParameter(program, gl2.LINK_STATUS)) {
    throw new Error("Could not initialize shaders");
  }
  return program;
}
function createTextureCanvas(r2, width2, height2) {
  if (height2 === void 0) {
    height2 = width2;
  }
  var canvas = r2.makeOffscreenCanvas(width2, height2);
  var ctx = canvas.context = canvas.getContext("2d");
  canvas.clear = function() {
    return ctx.clearRect(0, 0, canvas.width, canvas.height);
  };
  canvas.clear();
  return canvas;
}
function getEffectivePanZoom(r2) {
  var pixelRatio = r2.pixelRatio;
  var zoom2 = r2.cy.zoom();
  var pan2 = r2.cy.pan();
  return {
    zoom: zoom2 * pixelRatio,
    pan: {
      x: pan2.x * pixelRatio,
      y: pan2.y * pixelRatio
    }
  };
}
function getEffectiveZoom(r2) {
  var pixelRatio = r2.pixelRatio;
  var zoom2 = r2.cy.zoom();
  return zoom2 * pixelRatio;
}
function modelToRenderedPosition2(r2, pan2, zoom2, x3, y3) {
  var rx = x3 * zoom2 + pan2.x;
  var ry = y3 * zoom2 + pan2.y;
  ry = Math.round(r2.canvasHeight - ry);
  return [rx, ry];
}
function isSimpleShape(node) {
  if (node.pstyle("background-fill").value !== "solid") return false;
  if (node.pstyle("background-image").strValue !== "none") return false;
  if (node.pstyle("border-width").value === 0) return true;
  if (node.pstyle("border-opacity").value === 0) return true;
  if (node.pstyle("border-style").value !== "solid") return false;
  return true;
}
function arrayEqual(a1, a2) {
  if (a1.length !== a2.length) {
    return false;
  }
  for (var i2 = 0; i2 < a1.length; i2++) {
    if (a1[i2] !== a2[i2]) {
      return false;
    }
  }
  return true;
}
function toWebGLColor(color, opacity, outArray) {
  var r2 = color[0] / 255;
  var g2 = color[1] / 255;
  var b2 = color[2] / 255;
  var a2 = opacity;
  var arr = outArray || new Array(4);
  arr[0] = r2 * a2;
  arr[1] = g2 * a2;
  arr[2] = b2 * a2;
  arr[3] = a2;
  return arr;
}
function indexToVec4(index, outArray) {
  var arr = outArray || new Array(4);
  arr[0] = (index >> 0 & 255) / 255;
  arr[1] = (index >> 8 & 255) / 255;
  arr[2] = (index >> 16 & 255) / 255;
  arr[3] = (index >> 24 & 255) / 255;
  return arr;
}
function vec4ToIndex(vec4) {
  return vec4[0] + (vec4[1] << 8) + (vec4[2] << 16) + (vec4[3] << 24);
}
function createTexture(gl2, debugID) {
  var texture = gl2.createTexture();
  texture.buffer = function(offscreenCanvas) {
    gl2.bindTexture(gl2.TEXTURE_2D, texture);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_WRAP_S, gl2.CLAMP_TO_EDGE);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_WRAP_T, gl2.CLAMP_TO_EDGE);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_MAG_FILTER, gl2.LINEAR);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_MIN_FILTER, gl2.LINEAR_MIPMAP_NEAREST);
    gl2.pixelStorei(gl2.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);
    gl2.texImage2D(gl2.TEXTURE_2D, 0, gl2.RGBA, gl2.RGBA, gl2.UNSIGNED_BYTE, offscreenCanvas);
    gl2.generateMipmap(gl2.TEXTURE_2D);
    gl2.bindTexture(gl2.TEXTURE_2D, null);
  };
  texture.deleteTexture = function() {
    gl2.deleteTexture(texture);
  };
  return texture;
}
function getTypeInfo(gl2, glslType) {
  switch (glslType) {
    case "float":
      return [1, gl2.FLOAT, 4];
    case "vec2":
      return [2, gl2.FLOAT, 4];
    case "vec3":
      return [3, gl2.FLOAT, 4];
    case "vec4":
      return [4, gl2.FLOAT, 4];
    case "int":
      return [1, gl2.INT, 4];
    case "ivec2":
      return [2, gl2.INT, 4];
  }
}
function createTypedArray(gl2, glType, dataOrSize) {
  switch (glType) {
    case gl2.FLOAT:
      return new Float32Array(dataOrSize);
    case gl2.INT:
      return new Int32Array(dataOrSize);
  }
}
function createTypedArrayView(gl2, glType, array3, stride, size3, i2) {
  switch (glType) {
    case gl2.FLOAT:
      return new Float32Array(array3.buffer, i2 * stride, size3);
    case gl2.INT:
      return new Int32Array(array3.buffer, i2 * stride, size3);
  }
}
function createBufferStaticDraw(gl2, type2, attributeLoc, dataArray) {
  var _getTypeInfo = getTypeInfo(gl2, type2), _getTypeInfo2 = _slicedToArray(_getTypeInfo, 2), size3 = _getTypeInfo2[0], glType = _getTypeInfo2[1];
  var data4 = createTypedArray(gl2, glType, dataArray);
  var buffer = gl2.createBuffer();
  gl2.bindBuffer(gl2.ARRAY_BUFFER, buffer);
  gl2.bufferData(gl2.ARRAY_BUFFER, data4, gl2.STATIC_DRAW);
  if (glType === gl2.FLOAT) {
    gl2.vertexAttribPointer(attributeLoc, size3, glType, false, 0, 0);
  } else if (glType === gl2.INT) {
    gl2.vertexAttribIPointer(attributeLoc, size3, glType, 0, 0);
  }
  gl2.enableVertexAttribArray(attributeLoc);
  gl2.bindBuffer(gl2.ARRAY_BUFFER, null);
  return buffer;
}
function createBufferDynamicDraw(gl2, instances, type2, attributeLoc) {
  var _getTypeInfo3 = getTypeInfo(gl2, type2), _getTypeInfo4 = _slicedToArray(_getTypeInfo3, 3), size3 = _getTypeInfo4[0], glType = _getTypeInfo4[1], bytes = _getTypeInfo4[2];
  var dataArray = createTypedArray(gl2, glType, instances * size3);
  var stride = size3 * bytes;
  var buffer = gl2.createBuffer();
  gl2.bindBuffer(gl2.ARRAY_BUFFER, buffer);
  gl2.bufferData(gl2.ARRAY_BUFFER, instances * stride, gl2.DYNAMIC_DRAW);
  gl2.enableVertexAttribArray(attributeLoc);
  if (glType === gl2.FLOAT) {
    gl2.vertexAttribPointer(attributeLoc, size3, glType, false, stride, 0);
  } else if (glType === gl2.INT) {
    gl2.vertexAttribIPointer(attributeLoc, size3, glType, stride, 0);
  }
  gl2.vertexAttribDivisor(attributeLoc, 1);
  gl2.bindBuffer(gl2.ARRAY_BUFFER, null);
  var views = new Array(instances);
  for (var i2 = 0; i2 < instances; i2++) {
    views[i2] = createTypedArrayView(gl2, glType, dataArray, stride, size3, i2);
  }
  buffer.dataArray = dataArray;
  buffer.stride = stride;
  buffer.size = size3;
  buffer.getView = function(i3) {
    return views[i3];
  };
  buffer.setPoint = function(i3, x3, y3) {
    var view = views[i3];
    view[0] = x3;
    view[1] = y3;
  };
  buffer.bufferSubData = function(count) {
    gl2.bindBuffer(gl2.ARRAY_BUFFER, buffer);
    if (count) {
      gl2.bufferSubData(gl2.ARRAY_BUFFER, 0, dataArray, 0, count * size3);
    } else {
      gl2.bufferSubData(gl2.ARRAY_BUFFER, 0, dataArray);
    }
  };
  return buffer;
}
function create3x3MatrixBufferDynamicDraw(gl2, instances, attributeLoc) {
  var matrixSize = 9;
  var matrixData = new Float32Array(instances * matrixSize);
  var matrixViews = new Array(instances);
  for (var i2 = 0; i2 < instances; i2++) {
    var byteOffset = i2 * matrixSize * 4;
    matrixViews[i2] = new Float32Array(matrixData.buffer, byteOffset, matrixSize);
  }
  var buffer = gl2.createBuffer();
  gl2.bindBuffer(gl2.ARRAY_BUFFER, buffer);
  gl2.bufferData(gl2.ARRAY_BUFFER, matrixData.byteLength, gl2.DYNAMIC_DRAW);
  for (var _i2 = 0; _i2 < 3; _i2++) {
    var loc = attributeLoc + _i2;
    gl2.enableVertexAttribArray(loc);
    gl2.vertexAttribPointer(loc, 3, gl2.FLOAT, false, 3 * 12, _i2 * 12);
    gl2.vertexAttribDivisor(loc, 1);
  }
  gl2.bindBuffer(gl2.ARRAY_BUFFER, null);
  buffer.getMatrixView = function(i3) {
    return matrixViews[i3];
  };
  buffer.setData = function(matrix, i3) {
    matrixViews[i3].set(matrix, 0);
  };
  buffer.bufferSubData = function() {
    gl2.bindBuffer(gl2.ARRAY_BUFFER, buffer);
    gl2.bufferSubData(gl2.ARRAY_BUFFER, 0, matrixData);
  };
  return buffer;
}
function createPickingFrameBuffer(gl2) {
  var fb = gl2.createFramebuffer();
  gl2.bindFramebuffer(gl2.FRAMEBUFFER, fb);
  var targetTexture = gl2.createTexture();
  gl2.bindTexture(gl2.TEXTURE_2D, targetTexture);
  gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_MIN_FILTER, gl2.LINEAR);
  gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_WRAP_S, gl2.CLAMP_TO_EDGE);
  gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_WRAP_T, gl2.CLAMP_TO_EDGE);
  gl2.framebufferTexture2D(gl2.FRAMEBUFFER, gl2.COLOR_ATTACHMENT0, gl2.TEXTURE_2D, targetTexture, 0);
  gl2.bindFramebuffer(gl2.FRAMEBUFFER, null);
  fb.setFramebufferAttachmentSizes = function(width2, height2) {
    gl2.bindTexture(gl2.TEXTURE_2D, targetTexture);
    gl2.texImage2D(gl2.TEXTURE_2D, 0, gl2.RGBA, width2, height2, 0, gl2.RGBA, gl2.UNSIGNED_BYTE, null);
  };
  return fb;
}
var ARRAY_TYPE = typeof Float32Array !== "undefined" ? Float32Array : Array;
if (!Math.hypot) Math.hypot = function() {
  var y3 = 0, i2 = arguments.length;
  while (i2--) {
    y3 += arguments[i2] * arguments[i2];
  }
  return Math.sqrt(y3);
};
function create() {
  var out = new ARRAY_TYPE(9);
  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
  }
  out[0] = 1;
  out[4] = 1;
  out[8] = 1;
  return out;
}
function identity2(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
function multiply(out, a2, b2) {
  var a00 = a2[0], a01 = a2[1], a02 = a2[2];
  var a10 = a2[3], a11 = a2[4], a12 = a2[5];
  var a20 = a2[6], a21 = a2[7], a22 = a2[8];
  var b00 = b2[0], b01 = b2[1], b02 = b2[2];
  var b10 = b2[3], b11 = b2[4], b12 = b2[5];
  var b20 = b2[6], b21 = b2[7], b22 = b2[8];
  out[0] = b00 * a00 + b01 * a10 + b02 * a20;
  out[1] = b00 * a01 + b01 * a11 + b02 * a21;
  out[2] = b00 * a02 + b01 * a12 + b02 * a22;
  out[3] = b10 * a00 + b11 * a10 + b12 * a20;
  out[4] = b10 * a01 + b11 * a11 + b12 * a21;
  out[5] = b10 * a02 + b11 * a12 + b12 * a22;
  out[6] = b20 * a00 + b21 * a10 + b22 * a20;
  out[7] = b20 * a01 + b21 * a11 + b22 * a21;
  out[8] = b20 * a02 + b21 * a12 + b22 * a22;
  return out;
}
function translate(out, a2, v3) {
  var a00 = a2[0], a01 = a2[1], a02 = a2[2], a10 = a2[3], a11 = a2[4], a12 = a2[5], a20 = a2[6], a21 = a2[7], a22 = a2[8], x3 = v3[0], y3 = v3[1];
  out[0] = a00;
  out[1] = a01;
  out[2] = a02;
  out[3] = a10;
  out[4] = a11;
  out[5] = a12;
  out[6] = x3 * a00 + y3 * a10 + a20;
  out[7] = x3 * a01 + y3 * a11 + a21;
  out[8] = x3 * a02 + y3 * a12 + a22;
  return out;
}
function rotate(out, a2, rad) {
  var a00 = a2[0], a01 = a2[1], a02 = a2[2], a10 = a2[3], a11 = a2[4], a12 = a2[5], a20 = a2[6], a21 = a2[7], a22 = a2[8], s2 = Math.sin(rad), c2 = Math.cos(rad);
  out[0] = c2 * a00 + s2 * a10;
  out[1] = c2 * a01 + s2 * a11;
  out[2] = c2 * a02 + s2 * a12;
  out[3] = c2 * a10 - s2 * a00;
  out[4] = c2 * a11 - s2 * a01;
  out[5] = c2 * a12 - s2 * a02;
  out[6] = a20;
  out[7] = a21;
  out[8] = a22;
  return out;
}
function scale(out, a2, v3) {
  var x3 = v3[0], y3 = v3[1];
  out[0] = x3 * a2[0];
  out[1] = x3 * a2[1];
  out[2] = x3 * a2[2];
  out[3] = y3 * a2[3];
  out[4] = y3 * a2[4];
  out[5] = y3 * a2[5];
  out[6] = a2[6];
  out[7] = a2[7];
  out[8] = a2[8];
  return out;
}
function projection(out, width2, height2) {
  out[0] = 2 / width2;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = -2 / height2;
  out[5] = 0;
  out[6] = -1;
  out[7] = 1;
  out[8] = 1;
  return out;
}
var Atlas = function() {
  function Atlas2(r2, texSize, texRows, createTextureCanvas2) {
    _classCallCheck(this, Atlas2);
    this.debugID = Math.floor(Math.random() * 1e4);
    this.r = r2;
    this.texSize = texSize;
    this.texRows = texRows;
    this.texHeight = Math.floor(texSize / texRows);
    this.enableWrapping = true;
    this.locked = false;
    this.texture = null;
    this.needsBuffer = true;
    this.freePointer = {
      x: 0,
      row: 0
    };
    this.keyToLocation = /* @__PURE__ */ new Map();
    this.canvas = createTextureCanvas2(r2, texSize, texSize);
    this.scratch = createTextureCanvas2(r2, texSize, this.texHeight, "scratch");
  }
  return _createClass(Atlas2, [{
    key: "lock",
    value: function lock() {
      this.locked = true;
    }
  }, {
    key: "getKeys",
    value: function getKeys() {
      return new Set(this.keyToLocation.keys());
    }
  }, {
    key: "getScale",
    value: function getScale(_ref) {
      var w2 = _ref.w, h2 = _ref.h;
      var texHeight = this.texHeight, maxTexWidth = this.texSize;
      var scale2 = texHeight / h2;
      var texW = w2 * scale2;
      var texH = h2 * scale2;
      if (texW > maxTexWidth) {
        scale2 = maxTexWidth / w2;
        texW = w2 * scale2;
        texH = h2 * scale2;
      }
      return {
        scale: scale2,
        texW,
        texH
      };
    }
  }, {
    key: "draw",
    value: function draw(key, bb, doDrawing) {
      var _this = this;
      if (this.locked) throw new Error("can't draw, atlas is locked");
      var texSize = this.texSize, texRows = this.texRows, texHeight = this.texHeight;
      var _this$getScale = this.getScale(bb), scale2 = _this$getScale.scale, texW = _this$getScale.texW, texH = _this$getScale.texH;
      var drawAt = function drawAt2(location2, canvas) {
        if (doDrawing && canvas) {
          var context = canvas.context;
          var x3 = location2.x, row = location2.row;
          var xOffset = x3;
          var yOffset = texHeight * row;
          context.save();
          context.translate(xOffset, yOffset);
          context.scale(scale2, scale2);
          doDrawing(context, bb);
          context.restore();
        }
      };
      var locations = [null, null];
      var drawNormal = function drawNormal2() {
        drawAt(_this.freePointer, _this.canvas);
        locations[0] = {
          x: _this.freePointer.x,
          y: _this.freePointer.row * texHeight,
          w: texW,
          h: texH
        };
        locations[1] = {
          // create a second location with a width of 0, for convenience
          x: _this.freePointer.x + texW,
          y: _this.freePointer.row * texHeight,
          w: 0,
          h: texH
        };
        _this.freePointer.x += texW;
        if (_this.freePointer.x == texSize) {
          _this.freePointer.x = 0;
          _this.freePointer.row++;
        }
      };
      var drawWrapped = function drawWrapped2() {
        var scratch = _this.scratch, canvas = _this.canvas;
        scratch.clear();
        drawAt({
          x: 0,
          row: 0
        }, scratch);
        var firstTexW = texSize - _this.freePointer.x;
        var secondTexW = texW - firstTexW;
        var h2 = texHeight;
        {
          var dx = _this.freePointer.x;
          var dy = _this.freePointer.row * texHeight;
          var w2 = firstTexW;
          canvas.context.drawImage(scratch, 0, 0, w2, h2, dx, dy, w2, h2);
          locations[0] = {
            x: dx,
            y: dy,
            w: w2,
            h: texH
          };
        }
        {
          var sx = firstTexW;
          var _dy = (_this.freePointer.row + 1) * texHeight;
          var _w = secondTexW;
          if (canvas) {
            canvas.context.drawImage(scratch, sx, 0, _w, h2, 0, _dy, _w, h2);
          }
          locations[1] = {
            x: 0,
            y: _dy,
            w: _w,
            h: texH
          };
        }
        _this.freePointer.x = secondTexW;
        _this.freePointer.row++;
      };
      var moveToStartOfNextRow = function moveToStartOfNextRow2() {
        _this.freePointer.x = 0;
        _this.freePointer.row++;
      };
      if (this.freePointer.x + texW <= texSize) {
        drawNormal();
      } else if (this.freePointer.row >= texRows - 1) {
        return false;
      } else if (this.freePointer.x === texSize) {
        moveToStartOfNextRow();
        drawNormal();
      } else if (this.enableWrapping) {
        drawWrapped();
      } else {
        moveToStartOfNextRow();
        drawNormal();
      }
      this.keyToLocation.set(key, locations);
      this.needsBuffer = true;
      return locations;
    }
  }, {
    key: "getOffsets",
    value: function getOffsets(key) {
      return this.keyToLocation.get(key);
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return this.freePointer.x === 0 && this.freePointer.row === 0;
    }
  }, {
    key: "canFit",
    value: function canFit(bb) {
      if (this.locked) return false;
      var texSize = this.texSize, texRows = this.texRows;
      var _this$getScale2 = this.getScale(bb), texW = _this$getScale2.texW;
      if (this.freePointer.x + texW > texSize) {
        return this.freePointer.row < texRows - 1;
      }
      return true;
    }
    // called on every frame
  }, {
    key: "bufferIfNeeded",
    value: function bufferIfNeeded(gl2) {
      if (!this.texture) {
        this.texture = createTexture(gl2, this.debugID);
      }
      if (this.needsBuffer) {
        this.texture.buffer(this.canvas);
        this.needsBuffer = false;
        if (this.locked) {
          this.canvas = null;
          this.scratch = null;
        }
      }
    }
  }, {
    key: "dispose",
    value: function dispose() {
      if (this.texture) {
        this.texture.deleteTexture();
        this.texture = null;
      }
      this.canvas = null;
      this.scratch = null;
      this.locked = true;
    }
  }]);
}();
var AtlasCollection = function() {
  function AtlasCollection2(r2, texSize, texRows, createTextureCanvas2) {
    _classCallCheck(this, AtlasCollection2);
    this.r = r2;
    this.texSize = texSize;
    this.texRows = texRows;
    this.createTextureCanvas = createTextureCanvas2;
    this.atlases = [];
    this.styleKeyToAtlas = /* @__PURE__ */ new Map();
    this.markedKeys = /* @__PURE__ */ new Set();
  }
  return _createClass(AtlasCollection2, [{
    key: "getKeys",
    value: function getKeys() {
      return new Set(this.styleKeyToAtlas.keys());
    }
  }, {
    key: "_createAtlas",
    value: function _createAtlas() {
      var r2 = this.r, texSize = this.texSize, texRows = this.texRows, createTextureCanvas2 = this.createTextureCanvas;
      return new Atlas(r2, texSize, texRows, createTextureCanvas2);
    }
  }, {
    key: "_getScratchCanvas",
    value: function _getScratchCanvas() {
      if (!this.scratch) {
        var r2 = this.r, texSize = this.texSize, texRows = this.texRows, createTextureCanvas2 = this.createTextureCanvas;
        var texHeight = Math.floor(texSize / texRows);
        this.scratch = createTextureCanvas2(r2, texSize, texHeight, "scratch");
      }
      return this.scratch;
    }
  }, {
    key: "draw",
    value: function draw(key, bb, doDrawing) {
      var atlas = this.styleKeyToAtlas.get(key);
      if (!atlas) {
        atlas = this.atlases[this.atlases.length - 1];
        if (!atlas || !atlas.canFit(bb)) {
          if (atlas) atlas.lock();
          atlas = this._createAtlas();
          this.atlases.push(atlas);
        }
        atlas.draw(key, bb, doDrawing);
        this.styleKeyToAtlas.set(key, atlas);
      }
      return atlas;
    }
  }, {
    key: "getAtlas",
    value: function getAtlas(key) {
      return this.styleKeyToAtlas.get(key);
    }
  }, {
    key: "hasAtlas",
    value: function hasAtlas(key) {
      return this.styleKeyToAtlas.has(key);
    }
  }, {
    key: "markKeyForGC",
    value: function markKeyForGC(key) {
      this.markedKeys.add(key);
    }
  }, {
    key: "gc",
    value: function gc3() {
      var _this2 = this;
      var markedKeys = this.markedKeys;
      if (markedKeys.size === 0) {
        console.log("nothing to garbage collect");
        return;
      }
      var newAtlases = [];
      var newStyleKeyToAtlas = /* @__PURE__ */ new Map();
      var newAtlas = null;
      var _iterator = _createForOfIteratorHelper(this.atlases), _step;
      try {
        var _loop = function _loop2() {
          var atlas = _step.value;
          var keys2 = atlas.getKeys();
          var keysToCollect = intersection(markedKeys, keys2);
          if (keysToCollect.size === 0) {
            newAtlases.push(atlas);
            keys2.forEach(function(k2) {
              return newStyleKeyToAtlas.set(k2, atlas);
            });
            return 1;
          }
          if (!newAtlas) {
            newAtlas = _this2._createAtlas();
            newAtlases.push(newAtlas);
          }
          var _iterator2 = _createForOfIteratorHelper(keys2), _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              var key = _step2.value;
              if (!keysToCollect.has(key)) {
                var _atlas$getOffsets = atlas.getOffsets(key), _atlas$getOffsets2 = _slicedToArray(_atlas$getOffsets, 2), s1 = _atlas$getOffsets2[0], s2 = _atlas$getOffsets2[1];
                if (!newAtlas.canFit({
                  w: s1.w + s2.w,
                  h: s1.h
                })) {
                  newAtlas.lock();
                  newAtlas = _this2._createAtlas();
                  newAtlases.push(newAtlas);
                }
                if (atlas.canvas) {
                  _this2._copyTextureToNewAtlas(key, atlas, newAtlas);
                  newStyleKeyToAtlas.set(key, newAtlas);
                }
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
          atlas.dispose();
        };
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          if (_loop()) continue;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      this.atlases = newAtlases;
      this.styleKeyToAtlas = newStyleKeyToAtlas;
      this.markedKeys = /* @__PURE__ */ new Set();
    }
  }, {
    key: "_copyTextureToNewAtlas",
    value: function _copyTextureToNewAtlas(key, oldAtlas, newAtlas) {
      var _oldAtlas$getOffsets = oldAtlas.getOffsets(key), _oldAtlas$getOffsets2 = _slicedToArray(_oldAtlas$getOffsets, 2), s1 = _oldAtlas$getOffsets2[0], s2 = _oldAtlas$getOffsets2[1];
      if (s2.w === 0) {
        newAtlas.draw(key, s1, function(context) {
          context.drawImage(oldAtlas.canvas, s1.x, s1.y, s1.w, s1.h, 0, 0, s1.w, s1.h);
        });
      } else {
        var scratch = this._getScratchCanvas();
        scratch.clear();
        scratch.context.drawImage(oldAtlas.canvas, s1.x, s1.y, s1.w, s1.h, 0, 0, s1.w, s1.h);
        scratch.context.drawImage(oldAtlas.canvas, s2.x, s2.y, s2.w, s2.h, s1.w, 0, s2.w, s2.h);
        var w2 = s1.w + s2.w;
        var h2 = s1.h;
        newAtlas.draw(key, {
          w: w2,
          h: h2
        }, function(context) {
          context.drawImage(
            scratch,
            0,
            0,
            w2,
            h2,
            0,
            0,
            w2,
            h2
            // the destination context has already been translated to the correct position
          );
        });
      }
    }
  }, {
    key: "getCounts",
    value: function getCounts() {
      return {
        keyCount: this.styleKeyToAtlas.size,
        atlasCount: new Set(this.styleKeyToAtlas.values()).size
      };
    }
  }]);
}();
function intersection(set1, set2) {
  if (set1.intersection) return set1.intersection(set2);
  else return new Set(_toConsumableArray(set1).filter(function(x3) {
    return set2.has(x3);
  }));
}
var AtlasManager = function() {
  function AtlasManager2(r2, globalOptions) {
    _classCallCheck(this, AtlasManager2);
    this.r = r2;
    this.globalOptions = globalOptions;
    this.atlasSize = globalOptions.webglTexSize;
    this.maxAtlasesPerBatch = globalOptions.webglTexPerBatch;
    this.renderTypes = /* @__PURE__ */ new Map();
    this.collections = /* @__PURE__ */ new Map();
    this.typeAndIdToKey = /* @__PURE__ */ new Map();
  }
  return _createClass(AtlasManager2, [{
    key: "getAtlasSize",
    value: function getAtlasSize() {
      return this.atlasSize;
    }
  }, {
    key: "addAtlasCollection",
    value: function addAtlasCollection(collectionName, atlasCollectionOptions) {
      var _this$globalOptions = this.globalOptions, webglTexSize = _this$globalOptions.webglTexSize, createTextureCanvas2 = _this$globalOptions.createTextureCanvas;
      var texRows = atlasCollectionOptions.texRows;
      var cachedCreateTextureCanvas = this._cacheScratchCanvas(createTextureCanvas2);
      var atlasCollection = new AtlasCollection(this.r, webglTexSize, texRows, cachedCreateTextureCanvas);
      this.collections.set(collectionName, atlasCollection);
    }
  }, {
    key: "addRenderType",
    value: function addRenderType(type2, renderTypeOptions) {
      var collection4 = renderTypeOptions.collection;
      if (!this.collections.has(collection4)) throw new Error("invalid atlas collection name '".concat(collection4, "'"));
      var atlasCollection = this.collections.get(collection4);
      var opts = extend({
        type: type2,
        atlasCollection
      }, renderTypeOptions);
      this.renderTypes.set(type2, opts);
    }
  }, {
    key: "getRenderTypeOpts",
    value: function getRenderTypeOpts(type2) {
      return this.renderTypes.get(type2);
    }
  }, {
    key: "getAtlasCollection",
    value: function getAtlasCollection(name) {
      return this.collections.get(name);
    }
  }, {
    key: "_cacheScratchCanvas",
    value: function _cacheScratchCanvas(createTextureCanvas2) {
      var prevW = -1;
      var prevH = -1;
      var scratchCanvas = null;
      return function(r2, w2, h2, scratch) {
        if (scratch) {
          if (!scratchCanvas || w2 != prevW || h2 != prevH) {
            prevW = w2;
            prevH = h2;
            scratchCanvas = createTextureCanvas2(r2, w2, h2);
          }
          return scratchCanvas;
        } else {
          return createTextureCanvas2(r2, w2, h2);
        }
      };
    }
  }, {
    key: "_key",
    value: function _key(renderType, id2) {
      return "".concat(renderType, "-").concat(id2);
    }
    /** Marks textues associated with the element for garbage collection. */
  }, {
    key: "invalidate",
    value: function invalidate(eles) {
      var _this3 = this;
      var _ref2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref2$forceRedraw = _ref2.forceRedraw, forceRedraw = _ref2$forceRedraw === void 0 ? false : _ref2$forceRedraw, _ref2$filterEle = _ref2.filterEle, filterEle = _ref2$filterEle === void 0 ? function() {
        return true;
      } : _ref2$filterEle, _ref2$filterType = _ref2.filterType, filterType = _ref2$filterType === void 0 ? function() {
        return true;
      } : _ref2$filterType;
      var needGC = false;
      var runGCNow = false;
      var _iterator3 = _createForOfIteratorHelper(eles), _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
          var ele = _step3.value;
          if (filterEle(ele)) {
            var _iterator4 = _createForOfIteratorHelper(this.renderTypes.values()), _step4;
            try {
              var _loop2 = function _loop22() {
                var opts = _step4.value;
                var renderType = opts.type;
                if (filterType(renderType)) {
                  var atlasCollection = _this3.collections.get(opts.collection);
                  var key = opts.getKey(ele);
                  var keyArray = Array.isArray(key) ? key : [key];
                  if (forceRedraw) {
                    keyArray.forEach(function(key2) {
                      return atlasCollection.markKeyForGC(key2);
                    });
                    runGCNow = true;
                  } else {
                    var id2 = opts.getID ? opts.getID(ele) : ele.id();
                    var mapKey = _this3._key(renderType, id2);
                    var oldKeyArray = _this3.typeAndIdToKey.get(mapKey);
                    if (oldKeyArray !== void 0 && !arrayEqual(keyArray, oldKeyArray)) {
                      needGC = true;
                      _this3.typeAndIdToKey["delete"](mapKey);
                      oldKeyArray.forEach(function(oldKey) {
                        return atlasCollection.markKeyForGC(oldKey);
                      });
                    }
                  }
                }
              };
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                _loop2();
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      if (runGCNow) {
        this.gc();
        needGC = false;
      }
      return needGC;
    }
    /** Garbage collect */
  }, {
    key: "gc",
    value: function gc3() {
      var _iterator5 = _createForOfIteratorHelper(this.collections.values()), _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
          var collection4 = _step5.value;
          collection4.gc();
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  }, {
    key: "getOrCreateAtlas",
    value: function getOrCreateAtlas(ele, type2, bb, styleKey) {
      var opts = this.renderTypes.get(type2);
      var atlasCollection = this.collections.get(opts.collection);
      var drawn = false;
      var atlas = atlasCollection.draw(styleKey, bb, function(context) {
        if (opts.drawClipped) {
          context.save();
          context.beginPath();
          context.rect(0, 0, bb.w, bb.h);
          context.clip();
          opts.drawElement(context, ele, bb, true, true);
          context.restore();
        } else {
          opts.drawElement(context, ele, bb, true, true);
        }
        drawn = true;
      });
      if (drawn) {
        var id2 = opts.getID ? opts.getID(ele) : ele.id();
        var mapKey = this._key(type2, id2);
        if (this.typeAndIdToKey.has(mapKey)) {
          this.typeAndIdToKey.get(mapKey).push(styleKey);
        } else {
          this.typeAndIdToKey.set(mapKey, [styleKey]);
        }
      }
      return atlas;
    }
  }, {
    key: "getAtlasInfo",
    value: function getAtlasInfo(ele, type2) {
      var _this4 = this;
      var opts = this.renderTypes.get(type2);
      var key = opts.getKey(ele);
      var keyArray = Array.isArray(key) ? key : [key];
      return keyArray.map(function(styleKey) {
        var bb = opts.getBoundingBox(ele, styleKey);
        var atlas = _this4.getOrCreateAtlas(ele, type2, bb, styleKey);
        var _atlas$getOffsets3 = atlas.getOffsets(styleKey), _atlas$getOffsets4 = _slicedToArray(_atlas$getOffsets3, 2), tex1 = _atlas$getOffsets4[0], tex2 = _atlas$getOffsets4[1];
        return {
          atlas,
          tex: tex1,
          tex1,
          tex2,
          bb
        };
      });
    }
  }, {
    key: "getDebugInfo",
    value: function getDebugInfo() {
      var debugInfo = [];
      var _iterator6 = _createForOfIteratorHelper(this.collections), _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
          var _step6$value = _slicedToArray(_step6.value, 2), name = _step6$value[0], collection4 = _step6$value[1];
          var _collection$getCounts = collection4.getCounts(), keyCount = _collection$getCounts.keyCount, atlasCount = _collection$getCounts.atlasCount;
          debugInfo.push({
            type: name,
            keyCount,
            atlasCount
          });
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      return debugInfo;
    }
  }]);
}();
var AtlasBatchManager = function() {
  function AtlasBatchManager2(globalOptions) {
    _classCallCheck(this, AtlasBatchManager2);
    this.globalOptions = globalOptions;
    this.atlasSize = globalOptions.webglTexSize;
    this.maxAtlasesPerBatch = globalOptions.webglTexPerBatch;
    this.batchAtlases = [];
  }
  return _createClass(AtlasBatchManager2, [{
    key: "getMaxAtlasesPerBatch",
    value: function getMaxAtlasesPerBatch() {
      return this.maxAtlasesPerBatch;
    }
  }, {
    key: "getAtlasSize",
    value: function getAtlasSize() {
      return this.atlasSize;
    }
  }, {
    key: "getIndexArray",
    value: function getIndexArray() {
      return Array.from({
        length: this.maxAtlasesPerBatch
      }, function(v3, i2) {
        return i2;
      });
    }
  }, {
    key: "startBatch",
    value: function startBatch2() {
      this.batchAtlases = [];
    }
  }, {
    key: "getAtlasCount",
    value: function getAtlasCount() {
      return this.batchAtlases.length;
    }
  }, {
    key: "getAtlases",
    value: function getAtlases() {
      return this.batchAtlases;
    }
  }, {
    key: "canAddToCurrentBatch",
    value: function canAddToCurrentBatch(atlas) {
      if (this.batchAtlases.length === this.maxAtlasesPerBatch) {
        return this.batchAtlases.includes(atlas);
      }
      return true;
    }
  }, {
    key: "getAtlasIndexForBatch",
    value: function getAtlasIndexForBatch(atlas) {
      var atlasID = this.batchAtlases.indexOf(atlas);
      if (atlasID < 0) {
        if (this.batchAtlases.length === this.maxAtlasesPerBatch) {
          throw new Error("cannot add more atlases to batch");
        }
        this.batchAtlases.push(atlas);
        atlasID = this.batchAtlases.length - 1;
      }
      return atlasID;
    }
  }]);
}();
var circleSD = "\n  float circleSD(vec2 p, float r) {\n    return distance(vec2(0), p) - r; // signed distance\n  }\n";
var rectangleSD = "\n  float rectangleSD(vec2 p, vec2 b) {\n    vec2 d = abs(p)-b;\n    return distance(vec2(0),max(d,0.0)) + min(max(d.x,d.y),0.0);\n  }\n";
var roundRectangleSD = "\n  float roundRectangleSD(vec2 p, vec2 b, vec4 cr) {\n    cr.xy = (p.x > 0.0) ? cr.xy : cr.zw;\n    cr.x  = (p.y > 0.0) ? cr.x  : cr.y;\n    vec2 q = abs(p) - b + cr.x;\n    return min(max(q.x, q.y), 0.0) + distance(vec2(0), max(q, 0.0)) - cr.x;\n  }\n";
var ellipseSD = "\n  float ellipseSD(vec2 p, vec2 ab) {\n    p = abs( p ); // symmetry\n\n    // find root with Newton solver\n    vec2 q = ab*(p-ab);\n    float w = (q.x<q.y)? 1.570796327 : 0.0;\n    for( int i=0; i<5; i++ ) {\n      vec2 cs = vec2(cos(w),sin(w));\n      vec2 u = ab*vec2( cs.x,cs.y);\n      vec2 v = ab*vec2(-cs.y,cs.x);\n      w = w + dot(p-u,v)/(dot(p-u,u)+dot(v,v));\n    }\n    \n    // compute final point and distance\n    float d = length(p-ab*vec2(cos(w),sin(w)));\n    \n    // return signed distance\n    return (dot(p/ab,p/ab)>1.0) ? d : -d;\n  }\n";
var RENDER_TARGET = {
  SCREEN: {
    name: "screen",
    screen: true
  },
  PICKING: {
    name: "picking",
    picking: true
  }
};
var TEX_PICKING_MODE = {
  // render the texture just like in RENDER_TARGET.SCREEN mode
  IGNORE: 1,
  // don't render the texture at all
  USE_BB: 2
  // render the bounding box as an opaque rectangle
};
var TEXTURE = 0;
var EDGE_STRAIGHT = 1;
var EDGE_CURVE_SEGMENT = 2;
var EDGE_ARROW = 3;
var RECTANGLE = 4;
var ROUND_RECTANGLE = 5;
var BOTTOM_ROUND_RECTANGLE = 6;
var ELLIPSE = 7;
var ElementDrawingWebGL = function() {
  function ElementDrawingWebGL2(r2, gl2, opts) {
    _classCallCheck(this, ElementDrawingWebGL2);
    this.r = r2;
    this.gl = gl2;
    this.maxInstances = opts.webglBatchSize;
    this.atlasSize = opts.webglTexSize;
    this.bgColor = opts.bgColor;
    this.debug = opts.webglDebug;
    this.batchDebugInfo = [];
    opts.enableWrapping = true;
    opts.createTextureCanvas = createTextureCanvas;
    this.atlasManager = new AtlasManager(r2, opts);
    this.batchManager = new AtlasBatchManager(opts);
    this.simpleShapeOptions = /* @__PURE__ */ new Map();
    this.program = this._createShaderProgram(RENDER_TARGET.SCREEN);
    this.pickingProgram = this._createShaderProgram(RENDER_TARGET.PICKING);
    this.vao = this._createVAO();
  }
  return _createClass(ElementDrawingWebGL2, [{
    key: "addAtlasCollection",
    value: function addAtlasCollection(collectionName, opts) {
      this.atlasManager.addAtlasCollection(collectionName, opts);
    }
    /**
     * @typedef { Object } TextureRenderTypeOpts
     * @property { string } collection - name of atlas collection to render textures to
     * @property { function } getKey - returns the "style key" for an element, may be a single value or an array for multi-line lables
     * @property { function } drawElement - uses a canvas renderer to draw the element to the texture atlas
     * @property { boolean  } drawClipped - if true the context will be clipped to the bounding box before drawElement() is called, may affect performance
     * @property { function } getBoundingBox - returns the bounding box for an element
     * @property { function } getRotation
     * @property { function } getRotationPoint
     * @property { function } getRotationOffset
     * @property { function } isVisible - an extra check for visibility in addition to ele.visible()
     * @property { function } getTexPickingMode - returns a value from the TEX_PICKING_MODE enum
     */
    /**
     * @param { string } typeName
     * @param { TextureRenderTypeOpts } opts
     */
  }, {
    key: "addTextureAtlasRenderType",
    value: function addTextureAtlasRenderType(typeName, opts) {
      this.atlasManager.addRenderType(typeName, opts);
    }
    /**
     * @typedef { Object } SimpleShapeRenderTypeOpts
     * @property { function } getBoundingBox - returns the bounding box for an element
     * @property { function } isVisible - this is an extra check for visibility in addition to ele.visible()
     * @property { function } isSimple - check if element is a simple shape, or if it needs to fall back to texture rendering
     * @property { ShapeVisualProperties } shapeProps
     */
    /**
     * @typedef { Object } ShapeVisualProperties
     * @property { string } shape
     * @property { string } color
     * @property { string } opacity
     * @property { string } padding
     * @property { string } radius
     * @property { boolean } border
    */
    /**
     * @param { string } typeName
     * @param { SimpleShapeRenderTypeOpts } opts
     */
  }, {
    key: "addSimpleShapeRenderType",
    value: function addSimpleShapeRenderType(typeName, opts) {
      this.simpleShapeOptions.set(typeName, opts);
    }
    /**
     * Inform the atlasManager when element style keys may have changed.
     * The atlasManager can then mark unused textures for "garbage collection".
     */
  }, {
    key: "invalidate",
    value: function invalidate(eles) {
      var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, type2 = _ref.type;
      var atlasManager = this.atlasManager;
      if (type2) {
        return atlasManager.invalidate(eles, {
          filterType: function filterType(t) {
            return t === type2;
          },
          forceRedraw: true
        });
      } else {
        return atlasManager.invalidate(eles);
      }
    }
    /**
     * Run texture garbage collection.
     */
  }, {
    key: "gc",
    value: function gc3() {
      this.atlasManager.gc();
    }
  }, {
    key: "_createShaderProgram",
    value: function _createShaderProgram(renderTarget) {
      var gl2 = this.gl;
      var vertexShaderSource = "#version 300 es\n      precision highp float;\n\n      uniform mat3 uPanZoomMatrix;\n      uniform int  uAtlasSize;\n      \n      // instanced\n      in vec2 aPosition; // a vertex from the unit square\n      \n      in mat3 aTransform; // used to transform verticies, eg into a bounding box\n      in int aVertType; // the type of thing we are rendering\n\n      // the z-index that is output when using picking mode\n      in vec4 aIndex;\n      \n      // For textures\n      in int aAtlasId; // which shader unit/atlas to use\n      in vec4 aTex; // x/y/w/h of texture in atlas\n\n      // for edges\n      in vec4 aPointAPointB;\n      in vec4 aPointCPointD;\n      in vec2 aLineWidth; // also used for node border width\n\n      // simple shapes\n      in vec4 aCornerRadius; // for round-rectangle [top-right, bottom-right, top-left, bottom-left]\n      in vec4 aColor; // also used for edges\n      in vec4 aBorderColor; // aLineWidth is used for border width\n\n      // output values passed to the fragment shader\n      out vec2 vTexCoord;\n      out vec4 vColor;\n      out vec2 vPosition;\n      // flat values are not interpolated\n      flat out int vAtlasId; \n      flat out int vVertType;\n      flat out vec2 vTopRight;\n      flat out vec2 vBotLeft;\n      flat out vec4 vCornerRadius;\n      flat out vec4 vBorderColor;\n      flat out vec2 vBorderWidth;\n      flat out vec4 vIndex;\n      \n      void main(void) {\n        int vid = gl_VertexID;\n        vec2 position = aPosition; // TODO make this a vec3, simplifies some code below\n\n        if(aVertType == ".concat(TEXTURE, ") {\n          float texX = aTex.x; // texture coordinates\n          float texY = aTex.y;\n          float texW = aTex.z;\n          float texH = aTex.w;\n\n          if(vid == 1 || vid == 2 || vid == 4) {\n            texX += texW;\n          }\n          if(vid == 2 || vid == 4 || vid == 5) {\n            texY += texH;\n          }\n\n          float d = float(uAtlasSize);\n          vTexCoord = vec2(texX / d, texY / d); // tex coords must be between 0 and 1\n\n          gl_Position = vec4(uPanZoomMatrix * aTransform * vec3(position, 1.0), 1.0);\n        }\n        else if(aVertType == ").concat(RECTANGLE, " || aVertType == ").concat(ELLIPSE, " \n             || aVertType == ").concat(ROUND_RECTANGLE, " || aVertType == ").concat(BOTTOM_ROUND_RECTANGLE, ") { // simple shapes\n\n          // the bounding box is needed by the fragment shader\n          vBotLeft  = (aTransform * vec3(0, 0, 1)).xy; // flat\n          vTopRight = (aTransform * vec3(1, 1, 1)).xy; // flat\n          vPosition = (aTransform * vec3(position, 1)).xy; // will be interpolated\n\n          // calculations are done in the fragment shader, just pass these along\n          vColor = aColor;\n          vCornerRadius = aCornerRadius;\n          vBorderColor = aBorderColor;\n          vBorderWidth = aLineWidth;\n\n          gl_Position = vec4(uPanZoomMatrix * aTransform * vec3(position, 1.0), 1.0);\n        }\n        else if(aVertType == ").concat(EDGE_STRAIGHT, ") {\n          vec2 source = aPointAPointB.xy;\n          vec2 target = aPointAPointB.zw;\n\n          // adjust the geometry so that the line is centered on the edge\n          position.y = position.y - 0.5;\n\n          // stretch the unit square into a long skinny rectangle\n          vec2 xBasis = target - source;\n          vec2 yBasis = normalize(vec2(-xBasis.y, xBasis.x));\n          vec2 point = source + xBasis * position.x + yBasis * aLineWidth[0] * position.y;\n\n          gl_Position = vec4(uPanZoomMatrix * vec3(point, 1.0), 1.0);\n          vColor = aColor;\n        } \n        else if(aVertType == ").concat(EDGE_CURVE_SEGMENT, ") {\n          vec2 pointA = aPointAPointB.xy;\n          vec2 pointB = aPointAPointB.zw;\n          vec2 pointC = aPointCPointD.xy;\n          vec2 pointD = aPointCPointD.zw;\n\n          // adjust the geometry so that the line is centered on the edge\n          position.y = position.y - 0.5;\n\n          vec2 p0, p1, p2, pos;\n          if(position.x == 0.0) { // The left side of the unit square\n            p0 = pointA;\n            p1 = pointB;\n            p2 = pointC;\n            pos = position;\n          } else { // The right side of the unit square, use same approach but flip the geometry upside down\n            p0 = pointD;\n            p1 = pointC;\n            p2 = pointB;\n            pos = vec2(0.0, -position.y);\n          }\n\n          vec2 p01 = p1 - p0;\n          vec2 p12 = p2 - p1;\n          vec2 p21 = p1 - p2;\n\n          // Find the normal vector.\n          vec2 tangent = normalize(normalize(p12) + normalize(p01));\n          vec2 normal = vec2(-tangent.y, tangent.x);\n\n          // Find the vector perpendicular to p0 -> p1.\n          vec2 p01Norm = normalize(vec2(-p01.y, p01.x));\n\n          // Determine the bend direction.\n          float sigma = sign(dot(p01 + p21, normal));\n          float width = aLineWidth[0];\n\n          if(sign(pos.y) == -sigma) {\n            // This is an intersecting vertex. Adjust the position so that there's no overlap.\n            vec2 point = 0.5 * width * normal * -sigma / dot(normal, p01Norm);\n            gl_Position = vec4(uPanZoomMatrix * vec3(p1 + point, 1.0), 1.0);\n          } else {\n            // This is a non-intersecting vertex. Treat it like a mitre join.\n            vec2 point = 0.5 * width * normal * sigma * dot(normal, p01Norm);\n            gl_Position = vec4(uPanZoomMatrix * vec3(p1 + point, 1.0), 1.0);\n          }\n\n          vColor = aColor;\n        } \n        else if(aVertType == ").concat(EDGE_ARROW, " && vid < 3) {\n          // massage the first triangle into an edge arrow\n          if(vid == 0)\n            position = vec2(-0.15, -0.3);\n          if(vid == 1)\n            position = vec2(  0.0,  0.0);\n          if(vid == 2)\n            position = vec2( 0.15, -0.3);\n\n          gl_Position = vec4(uPanZoomMatrix * aTransform * vec3(position, 1.0), 1.0);\n          vColor = aColor;\n        }\n        else {\n          gl_Position = vec4(2.0, 0.0, 0.0, 1.0); // discard vertex by putting it outside webgl clip space\n        }\n\n        vAtlasId = aAtlasId;\n        vVertType = aVertType;\n        vIndex = aIndex;\n      }\n    ");
      var idxs = this.batchManager.getIndexArray();
      var fragmentShaderSource = "#version 300 es\n      precision highp float;\n\n      // declare texture unit for each texture atlas in the batch\n      ".concat(idxs.map(function(i3) {
        return "uniform sampler2D uTexture".concat(i3, ";");
      }).join("\n	"), "\n\n      uniform vec4 uBGColor;\n      uniform float uZoom;\n\n      in vec2 vTexCoord;\n      in vec4 vColor;\n      in vec2 vPosition; // model coordinates\n\n      flat in int vAtlasId;\n      flat in vec4 vIndex;\n      flat in int vVertType;\n      flat in vec2 vTopRight;\n      flat in vec2 vBotLeft;\n      flat in vec4 vCornerRadius;\n      flat in vec4 vBorderColor;\n      flat in vec2 vBorderWidth;\n\n      out vec4 outColor;\n\n      ").concat(circleSD, "\n      ").concat(rectangleSD, "\n      ").concat(roundRectangleSD, "\n      ").concat(ellipseSD, "\n\n      vec4 blend(vec4 top, vec4 bot) { // blend colors with premultiplied alpha\n        return vec4( \n          top.rgb + (bot.rgb * (1.0 - top.a)),\n          top.a   + (bot.a   * (1.0 - top.a)) \n        );\n      }\n\n      vec4 distInterp(vec4 cA, vec4 cB, float d) { // interpolate color using Signed Distance\n        // scale to the zoom level so that borders don't look blurry when zoomed in\n        // note 1.5 is an aribitrary value chosen because it looks good\n        return mix(cA, cB, 1.0 - smoothstep(0.0, 1.5 / uZoom, abs(d))); \n      }\n\n      void main(void) {\n        if(vVertType == ").concat(TEXTURE, ") {\n          // look up the texel from the texture unit\n          ").concat(idxs.map(function(i3) {
        return "if(vAtlasId == ".concat(i3, ") outColor = texture(uTexture").concat(i3, ", vTexCoord);");
      }).join("\n	else "), "\n        } \n        else if(vVertType == ").concat(EDGE_ARROW, ") {\n          // mimics how canvas renderer uses context.globalCompositeOperation = 'destination-out';\n          outColor = blend(vColor, uBGColor);\n          outColor.a = 1.0; // make opaque, masks out line under arrow\n        }\n        else if(vVertType == ").concat(RECTANGLE, " && vBorderWidth == vec2(0.0)) { // simple rectangle with no border\n          outColor = vColor; // unit square is already transformed to the rectangle, nothing else needs to be done\n        }\n        else if(vVertType == ").concat(RECTANGLE, " || vVertType == ").concat(ELLIPSE, " \n          || vVertType == ").concat(ROUND_RECTANGLE, " || vVertType == ").concat(BOTTOM_ROUND_RECTANGLE, ") { // use SDF\n\n          float outerBorder = vBorderWidth[0];\n          float innerBorder = vBorderWidth[1];\n          float borderPadding = outerBorder * 2.0;\n          float w = vTopRight.x - vBotLeft.x - borderPadding;\n          float h = vTopRight.y - vBotLeft.y - borderPadding;\n          vec2 b = vec2(w/2.0, h/2.0); // half width, half height\n          vec2 p = vPosition - vec2(vTopRight.x - b[0] - outerBorder, vTopRight.y - b[1] - outerBorder); // translate to center\n\n          float d; // signed distance\n          if(vVertType == ").concat(RECTANGLE, ") {\n            d = rectangleSD(p, b);\n          } else if(vVertType == ").concat(ELLIPSE, " && w == h) {\n            d = circleSD(p, b.x); // faster than ellipse\n          } else if(vVertType == ").concat(ELLIPSE, ") {\n            d = ellipseSD(p, b);\n          } else {\n            d = roundRectangleSD(p, b, vCornerRadius.wzyx);\n          }\n\n          // use the distance to interpolate a color to smooth the edges of the shape, doesn't need multisampling\n          // we must smooth colors inwards, because we can't change pixels outside the shape's bounding box\n          if(d > 0.0) {\n            if(d > outerBorder) {\n              discard;\n            } else {\n              outColor = distInterp(vBorderColor, vec4(0), d - outerBorder);\n            }\n          } else {\n            if(d > innerBorder) {\n              vec4 outerColor = outerBorder == 0.0 ? vec4(0) : vBorderColor;\n              vec4 innerBorderColor = blend(vBorderColor, vColor);\n              outColor = distInterp(innerBorderColor, outerColor, d);\n            } \n            else {\n              vec4 outerColor;\n              if(innerBorder == 0.0 && outerBorder == 0.0) {\n                outerColor = vec4(0);\n              } else if(innerBorder == 0.0) {\n                outerColor = vBorderColor;\n              } else {\n                outerColor = blend(vBorderColor, vColor);\n              }\n              outColor = distInterp(vColor, outerColor, d - innerBorder);\n            }\n          }\n        }\n        else {\n          outColor = vColor;\n        }\n\n        ").concat(renderTarget.picking ? "if(outColor.a == 0.0) discard;\n             else outColor = vIndex;" : "", "\n      }\n    ");
      var program = createProgram(gl2, vertexShaderSource, fragmentShaderSource);
      program.aPosition = gl2.getAttribLocation(program, "aPosition");
      program.aIndex = gl2.getAttribLocation(program, "aIndex");
      program.aVertType = gl2.getAttribLocation(program, "aVertType");
      program.aTransform = gl2.getAttribLocation(program, "aTransform");
      program.aAtlasId = gl2.getAttribLocation(program, "aAtlasId");
      program.aTex = gl2.getAttribLocation(program, "aTex");
      program.aPointAPointB = gl2.getAttribLocation(program, "aPointAPointB");
      program.aPointCPointD = gl2.getAttribLocation(program, "aPointCPointD");
      program.aLineWidth = gl2.getAttribLocation(program, "aLineWidth");
      program.aColor = gl2.getAttribLocation(program, "aColor");
      program.aCornerRadius = gl2.getAttribLocation(program, "aCornerRadius");
      program.aBorderColor = gl2.getAttribLocation(program, "aBorderColor");
      program.uPanZoomMatrix = gl2.getUniformLocation(program, "uPanZoomMatrix");
      program.uAtlasSize = gl2.getUniformLocation(program, "uAtlasSize");
      program.uBGColor = gl2.getUniformLocation(program, "uBGColor");
      program.uZoom = gl2.getUniformLocation(program, "uZoom");
      program.uTextures = [];
      for (var i2 = 0; i2 < this.batchManager.getMaxAtlasesPerBatch(); i2++) {
        program.uTextures.push(gl2.getUniformLocation(program, "uTexture".concat(i2)));
      }
      return program;
    }
  }, {
    key: "_createVAO",
    value: function _createVAO() {
      var unitSquare = [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1];
      this.vertexCount = unitSquare.length / 2;
      var n2 = this.maxInstances;
      var gl2 = this.gl, program = this.program;
      var vao = gl2.createVertexArray();
      gl2.bindVertexArray(vao);
      createBufferStaticDraw(gl2, "vec2", program.aPosition, unitSquare);
      this.transformBuffer = create3x3MatrixBufferDynamicDraw(gl2, n2, program.aTransform);
      this.indexBuffer = createBufferDynamicDraw(gl2, n2, "vec4", program.aIndex);
      this.vertTypeBuffer = createBufferDynamicDraw(gl2, n2, "int", program.aVertType);
      this.atlasIdBuffer = createBufferDynamicDraw(gl2, n2, "int", program.aAtlasId);
      this.texBuffer = createBufferDynamicDraw(gl2, n2, "vec4", program.aTex);
      this.pointAPointBBuffer = createBufferDynamicDraw(gl2, n2, "vec4", program.aPointAPointB);
      this.pointCPointDBuffer = createBufferDynamicDraw(gl2, n2, "vec4", program.aPointCPointD);
      this.lineWidthBuffer = createBufferDynamicDraw(gl2, n2, "vec2", program.aLineWidth);
      this.colorBuffer = createBufferDynamicDraw(gl2, n2, "vec4", program.aColor);
      this.cornerRadiusBuffer = createBufferDynamicDraw(gl2, n2, "vec4", program.aCornerRadius);
      this.borderColorBuffer = createBufferDynamicDraw(gl2, n2, "vec4", program.aBorderColor);
      gl2.bindVertexArray(null);
      return vao;
    }
  }, {
    key: "buffers",
    get: function get2() {
      var _this = this;
      if (!this._buffers) {
        this._buffers = Object.keys(this).filter(function(k2) {
          return endsWith(k2, "Buffer");
        }).map(function(k2) {
          return _this[k2];
        });
      }
      return this._buffers;
    }
  }, {
    key: "startFrame",
    value: function startFrame(panZoomMatrix) {
      var renderTarget = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : RENDER_TARGET.SCREEN;
      this.panZoomMatrix = panZoomMatrix;
      this.renderTarget = renderTarget;
      this.batchDebugInfo = [];
      this.wrappedCount = 0;
      this.simpleCount = 0;
      this.startBatch();
    }
  }, {
    key: "startBatch",
    value: function startBatch2() {
      this.instanceCount = 0;
      this.batchManager.startBatch();
    }
  }, {
    key: "endFrame",
    value: function endFrame() {
      this.endBatch();
    }
  }, {
    key: "_isVisible",
    value: function _isVisible(ele, opts) {
      if (ele.visible()) {
        if (opts && opts.isVisible) {
          return opts.isVisible(ele);
        }
        return true;
      }
      return false;
    }
    /**
     * Draws a texture using the texture atlas.
     */
  }, {
    key: "drawTexture",
    value: function drawTexture(ele, eleIndex, type2) {
      var atlasManager = this.atlasManager, batchManager = this.batchManager;
      var opts = atlasManager.getRenderTypeOpts(type2);
      if (!this._isVisible(ele, opts)) {
        return;
      }
      if (ele.isEdge() && !this._isValidEdge(ele)) {
        return;
      }
      if (this.renderTarget.picking && opts.getTexPickingMode) {
        var mode = opts.getTexPickingMode(ele);
        if (mode === TEX_PICKING_MODE.IGNORE) {
          return;
        } else if (mode == TEX_PICKING_MODE.USE_BB) {
          this.drawPickingRectangle(ele, eleIndex, type2);
          return;
        }
      }
      var atlasInfoArray = atlasManager.getAtlasInfo(ele, type2);
      var _iterator = _createForOfIteratorHelper(atlasInfoArray), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var atlasInfo = _step.value;
          var atlas = atlasInfo.atlas, tex1 = atlasInfo.tex1, tex2 = atlasInfo.tex2;
          if (!batchManager.canAddToCurrentBatch(atlas)) {
            this.endBatch();
          }
          var atlasIndex = batchManager.getAtlasIndexForBatch(atlas);
          for (var _i2 = 0, _arr = [[tex1, true], [tex2, false]]; _i2 < _arr.length; _i2++) {
            var _arr$_i = _slicedToArray(_arr[_i2], 2), tex = _arr$_i[0], first2 = _arr$_i[1];
            if (tex.w != 0) {
              var instance2 = this.instanceCount;
              this.vertTypeBuffer.getView(instance2)[0] = TEXTURE;
              var indexView = this.indexBuffer.getView(instance2);
              indexToVec4(eleIndex, indexView);
              var atlasIdView = this.atlasIdBuffer.getView(instance2);
              atlasIdView[0] = atlasIndex;
              var texView = this.texBuffer.getView(instance2);
              texView[0] = tex.x;
              texView[1] = tex.y;
              texView[2] = tex.w;
              texView[3] = tex.h;
              var matrixView = this.transformBuffer.getMatrixView(instance2);
              this.setTransformMatrix(ele, matrixView, opts, atlasInfo, first2);
              this.instanceCount++;
              if (!first2) this.wrappedCount++;
              if (this.instanceCount >= this.maxInstances) {
                this.endBatch();
              }
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    /**
     * matrix is expected to be a 9 element array
     * this function follows same pattern as CRp.drawCachedElementPortion(...)
     */
  }, {
    key: "setTransformMatrix",
    value: function setTransformMatrix(ele, matrix, opts, atlasInfo) {
      var first2 = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
      var padding = 0;
      if (opts.shapeProps && opts.shapeProps.padding) {
        padding = ele.pstyle(opts.shapeProps.padding).pfValue;
      }
      if (atlasInfo) {
        var bb = atlasInfo.bb, tex1 = atlasInfo.tex1, tex2 = atlasInfo.tex2;
        var ratio = tex1.w / (tex1.w + tex2.w);
        if (!first2) {
          ratio = 1 - ratio;
        }
        var adjBB = this._getAdjustedBB(bb, padding, first2, ratio);
        this._applyTransformMatrix(matrix, adjBB, opts, ele);
      } else {
        var _bb = opts.getBoundingBox(ele);
        var _adjBB = this._getAdjustedBB(_bb, padding, true, 1);
        this._applyTransformMatrix(matrix, _adjBB, opts, ele);
      }
    }
  }, {
    key: "_applyTransformMatrix",
    value: function _applyTransformMatrix(matrix, adjBB, opts, ele) {
      var x3, y3;
      identity2(matrix);
      var theta = opts.getRotation ? opts.getRotation(ele) : 0;
      if (theta !== 0) {
        var _opts$getRotationPoin = opts.getRotationPoint(ele), sx = _opts$getRotationPoin.x, sy = _opts$getRotationPoin.y;
        translate(matrix, matrix, [sx, sy]);
        rotate(matrix, matrix, theta);
        var offset = opts.getRotationOffset(ele);
        x3 = offset.x + (adjBB.xOffset || 0);
        y3 = offset.y + (adjBB.yOffset || 0);
      } else {
        x3 = adjBB.x1;
        y3 = adjBB.y1;
      }
      translate(matrix, matrix, [x3, y3]);
      scale(matrix, matrix, [adjBB.w, adjBB.h]);
    }
    /**
     * Adjusts a node or label BB to accomodate padding and split for wrapped textures.
     * @param bb - the original bounding box
     * @param padding - the padding to add to the bounding box
     * @param first - whether this is the first part of a wrapped texture
     * @param ratio - the ratio of the texture width of part of the text to the entire texture
     */
  }, {
    key: "_getAdjustedBB",
    value: function _getAdjustedBB(bb, padding, first2, ratio) {
      var x1 = bb.x1, y1 = bb.y1, w2 = bb.w, h2 = bb.h, yOffset = bb.yOffset;
      if (padding) {
        x1 -= padding;
        y1 -= padding;
        w2 += 2 * padding;
        h2 += 2 * padding;
      }
      var xOffset = 0;
      var adjW = w2 * ratio;
      if (first2 && ratio < 1) {
        w2 = adjW;
      } else if (!first2 && ratio < 1) {
        xOffset = w2 - adjW;
        x1 += xOffset;
        w2 = adjW;
      }
      return {
        x1,
        y1,
        w: w2,
        h: h2,
        xOffset,
        yOffset
      };
    }
    /**
     * Draw a solid opaque rectangle matching the element's Bounding Box.
     * Used by the PICKING mode to make the entire BB of a label clickable.
     */
  }, {
    key: "drawPickingRectangle",
    value: function drawPickingRectangle(ele, eleIndex, type2) {
      var opts = this.atlasManager.getRenderTypeOpts(type2);
      var instance2 = this.instanceCount;
      this.vertTypeBuffer.getView(instance2)[0] = RECTANGLE;
      var indexView = this.indexBuffer.getView(instance2);
      indexToVec4(eleIndex, indexView);
      var colorView = this.colorBuffer.getView(instance2);
      toWebGLColor([0, 0, 0], 1, colorView);
      var matrixView = this.transformBuffer.getMatrixView(instance2);
      this.setTransformMatrix(ele, matrixView, opts);
      this.simpleCount++;
      this.instanceCount++;
      if (this.instanceCount >= this.maxInstances) {
        this.endBatch();
      }
    }
    /**
     * Draw a node using either a texture or a "simple shape".
     */
  }, {
    key: "drawNode",
    value: function drawNode(node, eleIndex, type2) {
      var opts = this.simpleShapeOptions.get(type2);
      if (!this._isVisible(node, opts)) {
        return;
      }
      var props = opts.shapeProps;
      var vertType = this._getVertTypeForShape(node, props.shape);
      if (vertType === void 0 || opts.isSimple && !opts.isSimple(node)) {
        this.drawTexture(node, eleIndex, type2);
        return;
      }
      var instance2 = this.instanceCount;
      this.vertTypeBuffer.getView(instance2)[0] = vertType;
      if (vertType === ROUND_RECTANGLE || vertType === BOTTOM_ROUND_RECTANGLE) {
        var bb = opts.getBoundingBox(node);
        var radius2 = this._getCornerRadius(node, props.radius, bb);
        var radiusView = this.cornerRadiusBuffer.getView(instance2);
        radiusView[0] = radius2;
        radiusView[1] = radius2;
        radiusView[2] = radius2;
        radiusView[3] = radius2;
        if (vertType === BOTTOM_ROUND_RECTANGLE) {
          radiusView[0] = 0;
          radiusView[2] = 0;
        }
      }
      var indexView = this.indexBuffer.getView(instance2);
      indexToVec4(eleIndex, indexView);
      var color = node.pstyle(props.color).value;
      var opacity = node.pstyle(props.opacity).value;
      var colorView = this.colorBuffer.getView(instance2);
      toWebGLColor(color, opacity, colorView);
      var lineWidthView = this.lineWidthBuffer.getView(instance2);
      lineWidthView[0] = 0;
      lineWidthView[1] = 0;
      if (props.border) {
        var borderWidth = node.pstyle("border-width").value;
        if (borderWidth > 0) {
          var borderColor = node.pstyle("border-color").value;
          var borderOpacity = node.pstyle("border-opacity").value;
          var borderColorView = this.borderColorBuffer.getView(instance2);
          toWebGLColor(borderColor, borderOpacity, borderColorView);
          var borderPos = node.pstyle("border-position").value;
          if (borderPos === "inside") {
            lineWidthView[0] = 0;
            lineWidthView[1] = -borderWidth;
          } else if (borderPos === "outside") {
            lineWidthView[0] = borderWidth;
            lineWidthView[1] = 0;
          } else {
            var halfWidth = borderWidth / 2;
            lineWidthView[0] = halfWidth;
            lineWidthView[1] = -halfWidth;
          }
        }
      }
      var matrixView = this.transformBuffer.getMatrixView(instance2);
      this.setTransformMatrix(node, matrixView, opts);
      this.simpleCount++;
      this.instanceCount++;
      if (this.instanceCount >= this.maxInstances) {
        this.endBatch();
      }
    }
  }, {
    key: "_getVertTypeForShape",
    value: function _getVertTypeForShape(node, shapeProp) {
      var shape = node.pstyle(shapeProp).value;
      switch (shape) {
        case "rectangle":
          return RECTANGLE;
        case "ellipse":
          return ELLIPSE;
        case "roundrectangle":
        case "round-rectangle":
          return ROUND_RECTANGLE;
        case "bottom-round-rectangle":
          return BOTTOM_ROUND_RECTANGLE;
        default:
          return void 0;
      }
    }
  }, {
    key: "_getCornerRadius",
    value: function _getCornerRadius(node, radiusProp, _ref2) {
      var w2 = _ref2.w, h2 = _ref2.h;
      if (node.pstyle(radiusProp).value === "auto") {
        return getRoundRectangleRadius(w2, h2);
      } else {
        var radius2 = node.pstyle(radiusProp).pfValue;
        var halfWidth = w2 / 2;
        var halfHeight = h2 / 2;
        return Math.min(radius2, halfHeight, halfWidth);
      }
    }
    /**
     * Only supports drawing triangles at the moment.
     */
  }, {
    key: "drawEdgeArrow",
    value: function drawEdgeArrow(edge, eleIndex, prefix) {
      if (!edge.visible()) {
        return;
      }
      var rs2 = edge._private.rscratch;
      var x3, y3, angle2;
      if (prefix === "source") {
        x3 = rs2.arrowStartX;
        y3 = rs2.arrowStartY;
        angle2 = rs2.srcArrowAngle;
      } else {
        x3 = rs2.arrowEndX;
        y3 = rs2.arrowEndY;
        angle2 = rs2.tgtArrowAngle;
      }
      if (isNaN(x3) || x3 == null || isNaN(y3) || y3 == null || isNaN(angle2) || angle2 == null) {
        return;
      }
      var arrowShape = edge.pstyle(prefix + "-arrow-shape").value;
      if (arrowShape === "none") {
        return;
      }
      var color = edge.pstyle(prefix + "-arrow-color").value;
      var baseOpacity = edge.pstyle("opacity").value;
      var lineOpacity = edge.pstyle("line-opacity").value;
      var opacity = baseOpacity * lineOpacity;
      var lineWidth = edge.pstyle("width").pfValue;
      var scale$1 = edge.pstyle("arrow-scale").value;
      var size3 = this.r.getArrowWidth(lineWidth, scale$1);
      var instance2 = this.instanceCount;
      var transform8 = this.transformBuffer.getMatrixView(instance2);
      identity2(transform8);
      translate(transform8, transform8, [x3, y3]);
      scale(transform8, transform8, [size3, size3]);
      rotate(transform8, transform8, angle2);
      this.vertTypeBuffer.getView(instance2)[0] = EDGE_ARROW;
      var indexView = this.indexBuffer.getView(instance2);
      indexToVec4(eleIndex, indexView);
      var colorView = this.colorBuffer.getView(instance2);
      toWebGLColor(color, opacity, colorView);
      this.instanceCount++;
      if (this.instanceCount >= this.maxInstances) {
        this.endBatch();
      }
    }
    /**
     * Draw straight-line or bezier curve edges.
     */
  }, {
    key: "drawEdgeLine",
    value: function drawEdgeLine(edge, eleIndex) {
      if (!edge.visible()) {
        return;
      }
      var points = this._getEdgePoints(edge);
      if (!points) {
        return;
      }
      var baseOpacity = edge.pstyle("opacity").value;
      var lineOpacity = edge.pstyle("line-opacity").value;
      var width2 = edge.pstyle("width").pfValue;
      var color = edge.pstyle("line-color").value;
      var opacity = baseOpacity * lineOpacity;
      if (points.length / 2 + this.instanceCount > this.maxInstances) {
        this.endBatch();
      }
      if (points.length == 4) {
        var instance2 = this.instanceCount;
        this.vertTypeBuffer.getView(instance2)[0] = EDGE_STRAIGHT;
        var indexView = this.indexBuffer.getView(instance2);
        indexToVec4(eleIndex, indexView);
        var colorView = this.colorBuffer.getView(instance2);
        toWebGLColor(color, opacity, colorView);
        var lineWidthBuffer = this.lineWidthBuffer.getView(instance2);
        lineWidthBuffer[0] = width2;
        var sourceTargetView = this.pointAPointBBuffer.getView(instance2);
        sourceTargetView[0] = points[0];
        sourceTargetView[1] = points[1];
        sourceTargetView[2] = points[2];
        sourceTargetView[3] = points[3];
        this.instanceCount++;
        if (this.instanceCount >= this.maxInstances) {
          this.endBatch();
        }
      } else {
        for (var i2 = 0; i2 < points.length - 2; i2 += 2) {
          var _instance = this.instanceCount;
          this.vertTypeBuffer.getView(_instance)[0] = EDGE_CURVE_SEGMENT;
          var _indexView = this.indexBuffer.getView(_instance);
          indexToVec4(eleIndex, _indexView);
          var _colorView = this.colorBuffer.getView(_instance);
          toWebGLColor(color, opacity, _colorView);
          var _lineWidthBuffer = this.lineWidthBuffer.getView(_instance);
          _lineWidthBuffer[0] = width2;
          var pAx = points[i2 - 2], pAy = points[i2 - 1];
          var pBx = points[i2], pBy = points[i2 + 1];
          var pCx = points[i2 + 2], pCy = points[i2 + 3];
          var pDx = points[i2 + 4], pDy = points[i2 + 5];
          if (i2 == 0) {
            pAx = 2 * pBx - pCx + 1e-3;
            pAy = 2 * pBy - pCy + 1e-3;
          }
          if (i2 == points.length - 4) {
            pDx = 2 * pCx - pBx + 1e-3;
            pDy = 2 * pCy - pBy + 1e-3;
          }
          var pointABView = this.pointAPointBBuffer.getView(_instance);
          pointABView[0] = pAx;
          pointABView[1] = pAy;
          pointABView[2] = pBx;
          pointABView[3] = pBy;
          var pointCDView = this.pointCPointDBuffer.getView(_instance);
          pointCDView[0] = pCx;
          pointCDView[1] = pCy;
          pointCDView[2] = pDx;
          pointCDView[3] = pDy;
          this.instanceCount++;
          if (this.instanceCount >= this.maxInstances) {
            this.endBatch();
          }
        }
      }
    }
  }, {
    key: "_isValidEdge",
    value: function _isValidEdge(edge) {
      var rs2 = edge._private.rscratch;
      if (rs2.badLine || rs2.allpts == null || isNaN(rs2.allpts[0])) {
        return false;
      }
      return true;
    }
  }, {
    key: "_getEdgePoints",
    value: function _getEdgePoints(edge) {
      var rs2 = edge._private.rscratch;
      if (!this._isValidEdge(edge)) {
        return;
      }
      var controlPoints3 = rs2.allpts;
      if (controlPoints3.length == 4) {
        return controlPoints3;
      }
      var numSegments = this._getNumSegments(edge);
      return this._getCurveSegmentPoints(controlPoints3, numSegments);
    }
  }, {
    key: "_getNumSegments",
    value: function _getNumSegments(edge) {
      var numSegments = 15;
      return Math.min(Math.max(numSegments, 5), this.maxInstances);
    }
  }, {
    key: "_getCurveSegmentPoints",
    value: function _getCurveSegmentPoints(controlPoints3, segments) {
      if (controlPoints3.length == 4) {
        return controlPoints3;
      }
      var curvePoints = Array((segments + 1) * 2);
      for (var i2 = 0; i2 <= segments; i2++) {
        if (i2 == 0) {
          curvePoints[0] = controlPoints3[0];
          curvePoints[1] = controlPoints3[1];
        } else if (i2 == segments) {
          curvePoints[i2 * 2] = controlPoints3[controlPoints3.length - 2];
          curvePoints[i2 * 2 + 1] = controlPoints3[controlPoints3.length - 1];
        } else {
          var t = i2 / segments;
          this._setCurvePoint(controlPoints3, t, curvePoints, i2 * 2);
        }
      }
      return curvePoints;
    }
  }, {
    key: "_setCurvePoint",
    value: function _setCurvePoint(points, t, curvePoints, cpi) {
      if (points.length <= 2) {
        curvePoints[cpi] = points[0];
        curvePoints[cpi + 1] = points[1];
      } else {
        var newpoints = Array(points.length - 2);
        for (var i2 = 0; i2 < newpoints.length; i2 += 2) {
          var x3 = (1 - t) * points[i2] + t * points[i2 + 2];
          var y3 = (1 - t) * points[i2 + 1] + t * points[i2 + 3];
          newpoints[i2] = x3;
          newpoints[i2 + 1] = y3;
        }
        return this._setCurvePoint(newpoints, t, curvePoints, cpi);
      }
    }
  }, {
    key: "endBatch",
    value: function endBatch2() {
      var gl2 = this.gl, vao = this.vao, vertexCount = this.vertexCount, count = this.instanceCount;
      if (count === 0) return;
      var program = this.renderTarget.picking ? this.pickingProgram : this.program;
      gl2.useProgram(program);
      gl2.bindVertexArray(vao);
      var _iterator2 = _createForOfIteratorHelper(this.buffers), _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
          var buffer = _step2.value;
          buffer.bufferSubData(count);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      var atlases = this.batchManager.getAtlases();
      for (var i2 = 0; i2 < atlases.length; i2++) {
        atlases[i2].bufferIfNeeded(gl2);
      }
      for (var _i2 = 0; _i2 < atlases.length; _i2++) {
        gl2.activeTexture(gl2.TEXTURE0 + _i2);
        gl2.bindTexture(gl2.TEXTURE_2D, atlases[_i2].texture);
        gl2.uniform1i(program.uTextures[_i2], _i2);
      }
      gl2.uniform1f(program.uZoom, getEffectiveZoom(this.r));
      gl2.uniformMatrix3fv(program.uPanZoomMatrix, false, this.panZoomMatrix);
      gl2.uniform1i(program.uAtlasSize, this.batchManager.getAtlasSize());
      var webglBgColor = toWebGLColor(this.bgColor, 1);
      gl2.uniform4fv(program.uBGColor, webglBgColor);
      gl2.drawArraysInstanced(gl2.TRIANGLES, 0, vertexCount, count);
      gl2.bindVertexArray(null);
      gl2.bindTexture(gl2.TEXTURE_2D, null);
      if (this.debug) {
        this.batchDebugInfo.push({
          count,
          // instance count
          atlasCount: atlases.length
        });
      }
      this.startBatch();
    }
  }, {
    key: "getDebugInfo",
    value: function getDebugInfo() {
      var atlasInfo = this.atlasManager.getDebugInfo();
      var totalAtlases = atlasInfo.reduce(function(count, info) {
        return count + info.atlasCount;
      }, 0);
      var batchInfo = this.batchDebugInfo;
      var totalInstances = batchInfo.reduce(function(count, info) {
        return count + info.count;
      }, 0);
      return {
        atlasInfo,
        totalAtlases,
        wrappedCount: this.wrappedCount,
        simpleCount: this.simpleCount,
        batchCount: batchInfo.length,
        batchInfo,
        totalInstances
      };
    }
  }]);
}();
var CRp$4 = {};
CRp$4.initWebgl = function(opts, fns) {
  var r2 = this;
  var gl2 = r2.data.contexts[r2.WEBGL];
  opts.bgColor = getBGColor(r2);
  opts.webglTexSize = Math.min(opts.webglTexSize, gl2.getParameter(gl2.MAX_TEXTURE_SIZE));
  opts.webglTexRows = Math.min(opts.webglTexRows, 54);
  opts.webglTexRowsNodes = Math.min(opts.webglTexRowsNodes, 54);
  opts.webglBatchSize = Math.min(opts.webglBatchSize, 16384);
  opts.webglTexPerBatch = Math.min(opts.webglTexPerBatch, gl2.getParameter(gl2.MAX_TEXTURE_IMAGE_UNITS));
  r2.webglDebug = opts.webglDebug;
  r2.webglDebugShowAtlases = opts.webglDebugShowAtlases;
  r2.pickingFrameBuffer = createPickingFrameBuffer(gl2);
  r2.pickingFrameBuffer.needsDraw = true;
  r2.drawing = new ElementDrawingWebGL(r2, gl2, opts);
  var getLabelRotation3 = function getLabelRotation4(prop) {
    return function(ele) {
      return r2.getTextAngle(ele, prop);
    };
  };
  var isLabelVisible = function isLabelVisible2(prop) {
    return function(ele) {
      var label = ele.pstyle(prop);
      return label && label.value;
    };
  };
  var isLayerVisible = function isLayerVisible2(prefix) {
    return function(node) {
      return node.pstyle("".concat(prefix, "-opacity")).value > 0;
    };
  };
  var getTexPickingMode = function getTexPickingMode2(ele) {
    var enabled = ele.pstyle("text-events").strValue === "yes";
    return enabled ? TEX_PICKING_MODE.USE_BB : TEX_PICKING_MODE.IGNORE;
  };
  var getBBForSimpleShape = function getBBForSimpleShape2(node) {
    var _node$position = node.position(), x3 = _node$position.x, y3 = _node$position.y;
    var w2 = node.outerWidth();
    var h2 = node.outerHeight();
    return {
      w: w2,
      h: h2,
      x1: x3 - w2 / 2,
      y1: y3 - h2 / 2
    };
  };
  r2.drawing.addAtlasCollection("node", {
    texRows: opts.webglTexRowsNodes
  });
  r2.drawing.addAtlasCollection("label", {
    texRows: opts.webglTexRows
  });
  r2.drawing.addTextureAtlasRenderType("node-body", {
    collection: "node",
    getKey: fns.getStyleKey,
    getBoundingBox: fns.getElementBox,
    drawElement: fns.drawElement
  });
  r2.drawing.addSimpleShapeRenderType("node-body", {
    getBoundingBox: getBBForSimpleShape,
    isSimple: isSimpleShape,
    shapeProps: {
      shape: "shape",
      color: "background-color",
      opacity: "background-opacity",
      radius: "corner-radius",
      border: true
    }
  });
  r2.drawing.addSimpleShapeRenderType("node-overlay", {
    getBoundingBox: getBBForSimpleShape,
    isVisible: isLayerVisible("overlay"),
    shapeProps: {
      shape: "overlay-shape",
      color: "overlay-color",
      opacity: "overlay-opacity",
      padding: "overlay-padding",
      radius: "overlay-corner-radius"
    }
  });
  r2.drawing.addSimpleShapeRenderType("node-underlay", {
    getBoundingBox: getBBForSimpleShape,
    isVisible: isLayerVisible("underlay"),
    shapeProps: {
      shape: "underlay-shape",
      color: "underlay-color",
      opacity: "underlay-opacity",
      padding: "underlay-padding",
      radius: "underlay-corner-radius"
    }
  });
  r2.drawing.addTextureAtlasRenderType("label", {
    // node label or edge mid label
    collection: "label",
    getTexPickingMode,
    getKey: getStyleKeysForLabel(fns.getLabelKey, null),
    getBoundingBox: getBoundingBoxForLabel(fns.getLabelBox, null),
    drawClipped: true,
    drawElement: fns.drawLabel,
    getRotation: getLabelRotation3(null),
    getRotationPoint: fns.getLabelRotationPoint,
    getRotationOffset: fns.getLabelRotationOffset,
    isVisible: isLabelVisible("label")
  });
  r2.drawing.addTextureAtlasRenderType("edge-source-label", {
    collection: "label",
    getTexPickingMode,
    getKey: getStyleKeysForLabel(fns.getSourceLabelKey, "source"),
    getBoundingBox: getBoundingBoxForLabel(fns.getSourceLabelBox, "source"),
    drawClipped: true,
    drawElement: fns.drawSourceLabel,
    getRotation: getLabelRotation3("source"),
    getRotationPoint: fns.getSourceLabelRotationPoint,
    getRotationOffset: fns.getSourceLabelRotationOffset,
    isVisible: isLabelVisible("source-label")
  });
  r2.drawing.addTextureAtlasRenderType("edge-target-label", {
    collection: "label",
    getTexPickingMode,
    getKey: getStyleKeysForLabel(fns.getTargetLabelKey, "target"),
    getBoundingBox: getBoundingBoxForLabel(fns.getTargetLabelBox, "target"),
    drawClipped: true,
    drawElement: fns.drawTargetLabel,
    getRotation: getLabelRotation3("target"),
    getRotationPoint: fns.getTargetLabelRotationPoint,
    getRotationOffset: fns.getTargetLabelRotationOffset,
    isVisible: isLabelVisible("target-label")
  });
  var setGCFlag = debounce(function() {
    console.log("garbage collect flag set");
    r2.data.gc = true;
  }, 1e4);
  r2.onUpdateEleCalcs(function(willDraw, eles) {
    var gcNeeded = false;
    if (eles && eles.length > 0) {
      gcNeeded |= r2.drawing.invalidate(eles);
    }
    if (gcNeeded) {
      setGCFlag();
    }
  });
  overrideCanvasRendererFunctions(r2);
};
function getBGColor(r2) {
  var container2 = r2.cy.container();
  var cssColor = container2 && container2.style && container2.style.backgroundColor || "white";
  return color2tuple(cssColor);
}
function getLabelLines(ele, prefix) {
  var rs2 = ele._private.rscratch;
  return getPrefixedProperty(rs2, "labelWrapCachedLines", prefix) || [];
}
var getStyleKeysForLabel = function getStyleKeysForLabel2(getKey3, prefix) {
  return function(ele) {
    var key = getKey3(ele);
    var lines = getLabelLines(ele, prefix);
    if (lines.length > 1) {
      return lines.map(function(line, index) {
        return "".concat(key, "_").concat(index);
      });
    }
    return key;
  };
};
var getBoundingBoxForLabel = function getBoundingBoxForLabel2(getBoundingBox, prefix) {
  return function(ele, styleKey) {
    var bb = getBoundingBox(ele);
    if (typeof styleKey === "string") {
      var ui2 = styleKey.indexOf("_");
      if (ui2 > 0) {
        var lineIndex = Number(styleKey.substring(ui2 + 1));
        var lines = getLabelLines(ele, prefix);
        var h2 = bb.h / lines.length;
        var yOffset = h2 * lineIndex;
        var y1 = bb.y1 + yOffset;
        return {
          x1: bb.x1,
          w: bb.w,
          y1,
          h: h2,
          yOffset
        };
      }
    }
    return bb;
  };
};
function overrideCanvasRendererFunctions(r2) {
  {
    var renderCanvas = r2.render;
    r2.render = function(options3) {
      options3 = options3 || {};
      var cy = r2.cy;
      if (r2.webgl) {
        if (cy.zoom() > maxZoom$1) {
          clearWebgl(r2);
          renderCanvas.call(r2, options3);
        } else {
          clearCanvas(r2);
          renderWebgl(r2, options3, RENDER_TARGET.SCREEN);
        }
      }
    };
  }
  {
    var baseFunc = r2.matchCanvasSize;
    r2.matchCanvasSize = function(container2) {
      baseFunc.call(r2, container2);
      r2.pickingFrameBuffer.setFramebufferAttachmentSizes(r2.canvasWidth, r2.canvasHeight);
      r2.pickingFrameBuffer.needsDraw = true;
    };
  }
  {
    r2.findNearestElements = function(x3, y3, interactiveElementsOnly, isTouch) {
      return findNearestElementsWebgl(r2, x3, y3);
    };
  }
  {
    var _baseFunc = r2.invalidateCachedZSortedEles;
    r2.invalidateCachedZSortedEles = function() {
      _baseFunc.call(r2);
      r2.pickingFrameBuffer.needsDraw = true;
    };
  }
  {
    var _baseFunc2 = r2.notify;
    r2.notify = function(eventName, eles) {
      _baseFunc2.call(r2, eventName, eles);
      if (eventName === "viewport" || eventName === "bounds") {
        r2.pickingFrameBuffer.needsDraw = true;
      } else if (eventName === "background") {
        r2.drawing.invalidate(eles, {
          type: "node-body"
        });
      }
    };
  }
}
function clearWebgl(r2) {
  var gl2 = r2.data.contexts[r2.WEBGL];
  gl2.clear(gl2.COLOR_BUFFER_BIT | gl2.DEPTH_BUFFER_BIT);
}
function clearCanvas(r2) {
  var clear = function clear2(context) {
    context.save();
    context.setTransform(1, 0, 0, 1, 0, 0);
    context.clearRect(0, 0, r2.canvasWidth, r2.canvasHeight);
    context.restore();
  };
  clear(r2.data.contexts[r2.NODE]);
  clear(r2.data.contexts[r2.DRAG]);
}
function createPanZoomMatrix(r2) {
  var width2 = r2.canvasWidth;
  var height2 = r2.canvasHeight;
  var _util$getEffectivePan = getEffectivePanZoom(r2), pan2 = _util$getEffectivePan.pan, zoom2 = _util$getEffectivePan.zoom;
  var transform8 = create();
  translate(transform8, transform8, [pan2.x, pan2.y]);
  scale(transform8, transform8, [zoom2, zoom2]);
  var projection$1 = create();
  projection(projection$1, width2, height2);
  var product = create();
  multiply(product, projection$1, transform8);
  return product;
}
function setContextTransform(r2, context) {
  var width2 = r2.canvasWidth;
  var height2 = r2.canvasHeight;
  var _util$getEffectivePan2 = getEffectivePanZoom(r2), pan2 = _util$getEffectivePan2.pan, zoom2 = _util$getEffectivePan2.zoom;
  context.setTransform(1, 0, 0, 1, 0, 0);
  context.clearRect(0, 0, width2, height2);
  context.translate(pan2.x, pan2.y);
  context.scale(zoom2, zoom2);
}
function drawSelectionRectangle(r2, options3) {
  r2.drawSelectionRectangle(options3, function(context) {
    return setContextTransform(r2, context);
  });
}
function drawAxes(r2) {
  var context = r2.data.contexts[r2.NODE];
  context.save();
  setContextTransform(r2, context);
  context.strokeStyle = "rgba(0, 0, 0, 0.3)";
  context.beginPath();
  context.moveTo(-1e3, 0);
  context.lineTo(1e3, 0);
  context.stroke();
  context.beginPath();
  context.moveTo(0, -1e3);
  context.lineTo(0, 1e3);
  context.stroke();
  context.restore();
}
function drawAtlases(r2) {
  var draw = function draw2(drawing, name, row) {
    var collection4 = drawing.atlasManager.getAtlasCollection(name);
    var context = r2.data.contexts[r2.NODE];
    var atlases = collection4.atlases;
    for (var _i2 = 0; _i2 < atlases.length; _i2++) {
      var atlas = atlases[_i2];
      var canvas = atlas.canvas;
      if (canvas) {
        var w2 = canvas.width;
        var h2 = canvas.height;
        var x3 = w2 * _i2;
        var y3 = canvas.height * row;
        var scale2 = 0.4;
        context.save();
        context.scale(scale2, scale2);
        context.drawImage(canvas, x3, y3);
        context.strokeStyle = "black";
        context.rect(x3, y3, w2, h2);
        context.stroke();
        context.restore();
      }
    }
  };
  var i2 = 0;
  draw(r2.drawing, "node", i2++);
  draw(r2.drawing, "label", i2++);
}
function getPickingIndexes(r2, mX1, mY1, mX2, mY2) {
  var x3, y3, w2, h2;
  var _util$getEffectivePan3 = getEffectivePanZoom(r2), pan2 = _util$getEffectivePan3.pan, zoom2 = _util$getEffectivePan3.zoom;
  {
    var _util$modelToRendered = modelToRenderedPosition2(r2, pan2, zoom2, mX1, mY1), _util$modelToRendered2 = _slicedToArray(_util$modelToRendered, 2), cX1 = _util$modelToRendered2[0], cY1 = _util$modelToRendered2[1];
    var t = 6;
    x3 = cX1 - t / 2;
    y3 = cY1 - t / 2;
    w2 = t;
    h2 = t;
  }
  if (w2 === 0 || h2 === 0) {
    return [];
  }
  var gl2 = r2.data.contexts[r2.WEBGL];
  gl2.bindFramebuffer(gl2.FRAMEBUFFER, r2.pickingFrameBuffer);
  if (r2.pickingFrameBuffer.needsDraw) {
    gl2.viewport(0, 0, gl2.canvas.width, gl2.canvas.height);
    renderWebgl(r2, null, RENDER_TARGET.PICKING);
    r2.pickingFrameBuffer.needsDraw = false;
  }
  var n2 = w2 * h2;
  var data4 = new Uint8Array(n2 * 4);
  gl2.readPixels(x3, y3, w2, h2, gl2.RGBA, gl2.UNSIGNED_BYTE, data4);
  gl2.bindFramebuffer(gl2.FRAMEBUFFER, null);
  var indexes = /* @__PURE__ */ new Set();
  for (var i2 = 0; i2 < n2; i2++) {
    var pixel = data4.slice(i2 * 4, i2 * 4 + 4);
    var index = vec4ToIndex(pixel) - 1;
    if (index >= 0) {
      indexes.add(index);
    }
  }
  return indexes;
}
function findNearestElementsWebgl(r2, x3, y3) {
  var indexes = getPickingIndexes(r2, x3, y3);
  var eles = r2.getCachedZSortedEles();
  var node, edge;
  var _iterator = _createForOfIteratorHelper(indexes), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var index = _step.value;
      var ele = eles[index];
      if (!node && ele.isNode()) {
        node = ele;
      }
      if (!edge && ele.isEdge()) {
        edge = ele;
      }
      if (node && edge) {
        break;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return [node, edge].filter(Boolean);
}
function drawEle(r2, index, ele) {
  var drawing = r2.drawing;
  index += 1;
  if (ele.isNode()) {
    drawing.drawNode(ele, index, "node-underlay");
    drawing.drawNode(ele, index, "node-body");
    drawing.drawTexture(ele, index, "label");
    drawing.drawNode(ele, index, "node-overlay");
  } else {
    drawing.drawEdgeLine(ele, index);
    drawing.drawEdgeArrow(ele, index, "source");
    drawing.drawEdgeArrow(ele, index, "target");
    drawing.drawTexture(ele, index, "label");
    drawing.drawTexture(ele, index, "edge-source-label");
    drawing.drawTexture(ele, index, "edge-target-label");
  }
}
function renderWebgl(r2, options3, renderTarget) {
  var start;
  if (r2.webglDebug) {
    start = performance.now();
  }
  var drawing = r2.drawing;
  var eleCount = 0;
  if (renderTarget.screen) {
    if (r2.data.canvasNeedsRedraw[r2.SELECT_BOX]) {
      drawSelectionRectangle(r2, options3);
    }
  }
  if (r2.data.canvasNeedsRedraw[r2.NODE] || renderTarget.picking) {
    var gl2 = r2.data.contexts[r2.WEBGL];
    if (renderTarget.screen) {
      gl2.clearColor(0, 0, 0, 0);
      gl2.enable(gl2.BLEND);
      gl2.blendFunc(gl2.ONE, gl2.ONE_MINUS_SRC_ALPHA);
    } else {
      gl2.disable(gl2.BLEND);
    }
    gl2.clear(gl2.COLOR_BUFFER_BIT | gl2.DEPTH_BUFFER_BIT);
    gl2.viewport(0, 0, gl2.canvas.width, gl2.canvas.height);
    var panZoomMatrix = createPanZoomMatrix(r2);
    var eles = r2.getCachedZSortedEles();
    eleCount = eles.length;
    drawing.startFrame(panZoomMatrix, renderTarget);
    if (renderTarget.screen) {
      for (var i2 = 0; i2 < eles.nondrag.length; i2++) {
        drawEle(r2, i2, eles.nondrag[i2]);
      }
      for (var _i2 = 0; _i2 < eles.drag.length; _i2++) {
        drawEle(r2, _i2, eles.drag[_i2]);
      }
    } else if (renderTarget.picking) {
      for (var _i3 = 0; _i3 < eles.length; _i3++) {
        drawEle(r2, _i3, eles[_i3]);
      }
    }
    drawing.endFrame();
    if (renderTarget.screen && r2.webglDebugShowAtlases) {
      drawAxes(r2);
      drawAtlases(r2);
    }
    r2.data.canvasNeedsRedraw[r2.NODE] = false;
    r2.data.canvasNeedsRedraw[r2.DRAG] = false;
  }
  if (r2.webglDebug) {
    var end = performance.now();
    var compact = false;
    var time2 = Math.ceil(end - start);
    var debugInfo = drawing.getDebugInfo();
    var report = ["".concat(eleCount, " elements"), "".concat(debugInfo.totalInstances, " instances"), "".concat(debugInfo.batchCount, " batches"), "".concat(debugInfo.totalAtlases, " atlases"), "".concat(debugInfo.wrappedCount, " wrapped textures"), "".concat(debugInfo.simpleCount, " simple shapes")].join(", ");
    if (compact) {
      console.log("WebGL (".concat(renderTarget.name, ") - time ").concat(time2, "ms, ").concat(report));
    } else {
      console.log("WebGL (".concat(renderTarget.name, ") - frame time ").concat(time2, "ms"));
      console.log("Totals:");
      console.log("  ".concat(report));
      console.log("Texture Atlases Used:");
      var atlasInfo = debugInfo.atlasInfo;
      var _iterator2 = _createForOfIteratorHelper(atlasInfo), _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
          var info = _step2.value;
          console.log("  ".concat(info.type, ": ").concat(info.keyCount, " keys, ").concat(info.atlasCount, " atlases"));
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      console.log("");
    }
  }
  if (r2.data.gc) {
    console.log("Garbage Collect!");
    r2.data.gc = false;
    drawing.gc();
  }
}
var CRp$3 = {};
CRp$3.drawPolygonPath = function(context, x3, y3, width2, height2, points) {
  var halfW = width2 / 2;
  var halfH = height2 / 2;
  if (context.beginPath) {
    context.beginPath();
  }
  context.moveTo(x3 + halfW * points[0], y3 + halfH * points[1]);
  for (var i2 = 1; i2 < points.length / 2; i2++) {
    context.lineTo(x3 + halfW * points[i2 * 2], y3 + halfH * points[i2 * 2 + 1]);
  }
  context.closePath();
};
CRp$3.drawRoundPolygonPath = function(context, x3, y3, width2, height2, points, corners) {
  corners.forEach(function(corner) {
    return drawPreparedRoundCorner(context, corner);
  });
  context.closePath();
};
CRp$3.drawRoundRectanglePath = function(context, x3, y3, width2, height2, radius2) {
  var halfWidth = width2 / 2;
  var halfHeight = height2 / 2;
  var cornerRadius = radius2 === "auto" ? getRoundRectangleRadius(width2, height2) : Math.min(radius2, halfHeight, halfWidth);
  if (context.beginPath) {
    context.beginPath();
  }
  context.moveTo(x3, y3 - halfHeight);
  context.arcTo(x3 + halfWidth, y3 - halfHeight, x3 + halfWidth, y3, cornerRadius);
  context.arcTo(x3 + halfWidth, y3 + halfHeight, x3, y3 + halfHeight, cornerRadius);
  context.arcTo(x3 - halfWidth, y3 + halfHeight, x3 - halfWidth, y3, cornerRadius);
  context.arcTo(x3 - halfWidth, y3 - halfHeight, x3, y3 - halfHeight, cornerRadius);
  context.lineTo(x3, y3 - halfHeight);
  context.closePath();
};
CRp$3.drawBottomRoundRectanglePath = function(context, x3, y3, width2, height2, radius2) {
  var halfWidth = width2 / 2;
  var halfHeight = height2 / 2;
  var cornerRadius = radius2 === "auto" ? getRoundRectangleRadius(width2, height2) : radius2;
  if (context.beginPath) {
    context.beginPath();
  }
  context.moveTo(x3, y3 - halfHeight);
  context.lineTo(x3 + halfWidth, y3 - halfHeight);
  context.lineTo(x3 + halfWidth, y3);
  context.arcTo(x3 + halfWidth, y3 + halfHeight, x3, y3 + halfHeight, cornerRadius);
  context.arcTo(x3 - halfWidth, y3 + halfHeight, x3 - halfWidth, y3, cornerRadius);
  context.lineTo(x3 - halfWidth, y3 - halfHeight);
  context.lineTo(x3, y3 - halfHeight);
  context.closePath();
};
CRp$3.drawCutRectanglePath = function(context, x3, y3, width2, height2, points, corners) {
  var halfWidth = width2 / 2;
  var halfHeight = height2 / 2;
  var cornerLength = corners === "auto" ? getCutRectangleCornerLength() : corners;
  if (context.beginPath) {
    context.beginPath();
  }
  context.moveTo(x3 - halfWidth + cornerLength, y3 - halfHeight);
  context.lineTo(x3 + halfWidth - cornerLength, y3 - halfHeight);
  context.lineTo(x3 + halfWidth, y3 - halfHeight + cornerLength);
  context.lineTo(x3 + halfWidth, y3 + halfHeight - cornerLength);
  context.lineTo(x3 + halfWidth - cornerLength, y3 + halfHeight);
  context.lineTo(x3 - halfWidth + cornerLength, y3 + halfHeight);
  context.lineTo(x3 - halfWidth, y3 + halfHeight - cornerLength);
  context.lineTo(x3 - halfWidth, y3 - halfHeight + cornerLength);
  context.closePath();
};
CRp$3.drawBarrelPath = function(context, x3, y3, width2, height2) {
  var halfWidth = width2 / 2;
  var halfHeight = height2 / 2;
  var xBegin = x3 - halfWidth;
  var xEnd = x3 + halfWidth;
  var yBegin = y3 - halfHeight;
  var yEnd = y3 + halfHeight;
  var barrelCurveConstants = getBarrelCurveConstants(width2, height2);
  var wOffset = barrelCurveConstants.widthOffset;
  var hOffset = barrelCurveConstants.heightOffset;
  var ctrlPtXOffset = barrelCurveConstants.ctrlPtOffsetPct * wOffset;
  if (context.beginPath) {
    context.beginPath();
  }
  context.moveTo(xBegin, yBegin + hOffset);
  context.lineTo(xBegin, yEnd - hOffset);
  context.quadraticCurveTo(xBegin + ctrlPtXOffset, yEnd, xBegin + wOffset, yEnd);
  context.lineTo(xEnd - wOffset, yEnd);
  context.quadraticCurveTo(xEnd - ctrlPtXOffset, yEnd, xEnd, yEnd - hOffset);
  context.lineTo(xEnd, yBegin + hOffset);
  context.quadraticCurveTo(xEnd - ctrlPtXOffset, yBegin, xEnd - wOffset, yBegin);
  context.lineTo(xBegin + wOffset, yBegin);
  context.quadraticCurveTo(xBegin + ctrlPtXOffset, yBegin, xBegin, yBegin + hOffset);
  context.closePath();
};
var sin0 = Math.sin(0);
var cos0 = Math.cos(0);
var sin = {};
var cos = {};
var ellipseStepSize = Math.PI / 40;
for (i2 = 0 * Math.PI; i2 < 2 * Math.PI; i2 += ellipseStepSize) {
  sin[i2] = Math.sin(i2);
  cos[i2] = Math.cos(i2);
}
var i2;
CRp$3.drawEllipsePath = function(context, centerX, centerY, width2, height2) {
  if (context.beginPath) {
    context.beginPath();
  }
  if (context.ellipse) {
    context.ellipse(centerX, centerY, width2 / 2, height2 / 2, 0, 0, 2 * Math.PI);
  } else {
    var xPos, yPos;
    var rw = width2 / 2;
    var rh2 = height2 / 2;
    for (var i2 = 0 * Math.PI; i2 < 2 * Math.PI; i2 += ellipseStepSize) {
      xPos = centerX - rw * sin[i2] * sin0 + rw * cos[i2] * cos0;
      yPos = centerY + rh2 * cos[i2] * sin0 + rh2 * sin[i2] * cos0;
      if (i2 === 0) {
        context.moveTo(xPos, yPos);
      } else {
        context.lineTo(xPos, yPos);
      }
    }
  }
  context.closePath();
};
var CRp$2 = {};
CRp$2.createBuffer = function(w2, h2) {
  var buffer = document.createElement("canvas");
  buffer.width = w2;
  buffer.height = h2;
  return [buffer, buffer.getContext("2d")];
};
CRp$2.bufferCanvasImage = function(options3) {
  var cy = this.cy;
  var eles = cy.mutableElements();
  var bb = eles.boundingBox();
  var ctrRect = this.findContainerClientCoords();
  var width2 = options3.full ? Math.ceil(bb.w) : ctrRect[2];
  var height2 = options3.full ? Math.ceil(bb.h) : ctrRect[3];
  var specdMaxDims = number$1(options3.maxWidth) || number$1(options3.maxHeight);
  var pxRatio = this.getPixelRatio();
  var scale2 = 1;
  if (options3.scale !== void 0) {
    width2 *= options3.scale;
    height2 *= options3.scale;
    scale2 = options3.scale;
  } else if (specdMaxDims) {
    var maxScaleW = Infinity;
    var maxScaleH = Infinity;
    if (number$1(options3.maxWidth)) {
      maxScaleW = scale2 * options3.maxWidth / width2;
    }
    if (number$1(options3.maxHeight)) {
      maxScaleH = scale2 * options3.maxHeight / height2;
    }
    scale2 = Math.min(maxScaleW, maxScaleH);
    width2 *= scale2;
    height2 *= scale2;
  }
  if (!specdMaxDims) {
    width2 *= pxRatio;
    height2 *= pxRatio;
    scale2 *= pxRatio;
  }
  var buffCanvas = document.createElement("canvas");
  buffCanvas.width = width2;
  buffCanvas.height = height2;
  buffCanvas.style.width = width2 + "px";
  buffCanvas.style.height = height2 + "px";
  var buffCxt = buffCanvas.getContext("2d");
  if (width2 > 0 && height2 > 0) {
    buffCxt.clearRect(0, 0, width2, height2);
    buffCxt.globalCompositeOperation = "source-over";
    var zsortedEles = this.getCachedZSortedEles();
    if (options3.full) {
      buffCxt.translate(-bb.x1 * scale2, -bb.y1 * scale2);
      buffCxt.scale(scale2, scale2);
      this.drawElements(buffCxt, zsortedEles);
      buffCxt.scale(1 / scale2, 1 / scale2);
      buffCxt.translate(bb.x1 * scale2, bb.y1 * scale2);
    } else {
      var pan2 = cy.pan();
      var translation = {
        x: pan2.x * scale2,
        y: pan2.y * scale2
      };
      scale2 *= cy.zoom();
      buffCxt.translate(translation.x, translation.y);
      buffCxt.scale(scale2, scale2);
      this.drawElements(buffCxt, zsortedEles);
      buffCxt.scale(1 / scale2, 1 / scale2);
      buffCxt.translate(-translation.x, -translation.y);
    }
    if (options3.bg) {
      buffCxt.globalCompositeOperation = "destination-over";
      buffCxt.fillStyle = options3.bg;
      buffCxt.rect(0, 0, width2, height2);
      buffCxt.fill();
    }
  }
  return buffCanvas;
};
function b64ToBlob(b64, mimeType) {
  var bytes = atob(b64);
  var buff = new ArrayBuffer(bytes.length);
  var buffUint8 = new Uint8Array(buff);
  for (var i2 = 0; i2 < bytes.length; i2++) {
    buffUint8[i2] = bytes.charCodeAt(i2);
  }
  return new Blob([buff], {
    type: mimeType
  });
}
function b64UriToB64(b64uri) {
  var i2 = b64uri.indexOf(",");
  return b64uri.substr(i2 + 1);
}
function output(options3, canvas, mimeType) {
  var getB64Uri = function getB64Uri2() {
    return canvas.toDataURL(mimeType, options3.quality);
  };
  switch (options3.output) {
    case "blob-promise":
      return new Promise$1(function(resolve2, reject2) {
        try {
          canvas.toBlob(function(blob) {
            if (blob != null) {
              resolve2(blob);
            } else {
              reject2(new Error("`canvas.toBlob()` sent a null value in its callback"));
            }
          }, mimeType, options3.quality);
        } catch (err) {
          reject2(err);
        }
      });
    case "blob":
      return b64ToBlob(b64UriToB64(getB64Uri()), mimeType);
    case "base64":
      return b64UriToB64(getB64Uri());
    case "base64uri":
    default:
      return getB64Uri();
  }
}
CRp$2.png = function(options3) {
  return output(options3, this.bufferCanvasImage(options3), "image/png");
};
CRp$2.jpg = function(options3) {
  return output(options3, this.bufferCanvasImage(options3), "image/jpeg");
};
var CRp$1 = {};
CRp$1.nodeShapeImpl = function(name, context, centerX, centerY, width2, height2, points, corners) {
  switch (name) {
    case "ellipse":
      return this.drawEllipsePath(context, centerX, centerY, width2, height2);
    case "polygon":
      return this.drawPolygonPath(context, centerX, centerY, width2, height2, points);
    case "round-polygon":
      return this.drawRoundPolygonPath(context, centerX, centerY, width2, height2, points, corners);
    case "roundrectangle":
    case "round-rectangle":
      return this.drawRoundRectanglePath(context, centerX, centerY, width2, height2, corners);
    case "cutrectangle":
    case "cut-rectangle":
      return this.drawCutRectanglePath(context, centerX, centerY, width2, height2, points, corners);
    case "bottomroundrectangle":
    case "bottom-round-rectangle":
      return this.drawBottomRoundRectanglePath(context, centerX, centerY, width2, height2, corners);
    case "barrel":
      return this.drawBarrelPath(context, centerX, centerY, width2, height2);
  }
};
var CR = CanvasRenderer;
var CRp = CanvasRenderer.prototype;
CRp.CANVAS_LAYERS = 3;
CRp.SELECT_BOX = 0;
CRp.DRAG = 1;
CRp.NODE = 2;
CRp.WEBGL = 3;
CRp.CANVAS_TYPES = ["2d", "2d", "2d", "webgl2"];
CRp.BUFFER_COUNT = 3;
CRp.TEXTURE_BUFFER = 0;
CRp.MOTIONBLUR_BUFFER_NODE = 1;
CRp.MOTIONBLUR_BUFFER_DRAG = 2;
function CanvasRenderer(options3) {
  var r2 = this;
  var containerWindow = r2.cy.window();
  var document2 = containerWindow.document;
  if (options3.webgl) {
    CRp.CANVAS_LAYERS = r2.CANVAS_LAYERS = 4;
    console.log("webgl rendering enabled");
  }
  r2.data = {
    canvases: new Array(CRp.CANVAS_LAYERS),
    contexts: new Array(CRp.CANVAS_LAYERS),
    canvasNeedsRedraw: new Array(CRp.CANVAS_LAYERS),
    bufferCanvases: new Array(CRp.BUFFER_COUNT),
    bufferContexts: new Array(CRp.CANVAS_LAYERS)
  };
  var tapHlOffAttr = "-webkit-tap-highlight-color";
  var tapHlOffStyle = "rgba(0,0,0,0)";
  r2.data.canvasContainer = document2.createElement("div");
  var containerStyle = r2.data.canvasContainer.style;
  r2.data.canvasContainer.style[tapHlOffAttr] = tapHlOffStyle;
  containerStyle.position = "relative";
  containerStyle.zIndex = "0";
  containerStyle.overflow = "hidden";
  var container2 = options3.cy.container();
  container2.appendChild(r2.data.canvasContainer);
  container2.style[tapHlOffAttr] = tapHlOffStyle;
  var styleMap = {
    "-webkit-user-select": "none",
    "-moz-user-select": "-moz-none",
    "user-select": "none",
    "-webkit-tap-highlight-color": "rgba(0,0,0,0)",
    "outline-style": "none"
  };
  if (ms()) {
    styleMap["-ms-touch-action"] = "none";
    styleMap["touch-action"] = "none";
  }
  for (var i2 = 0; i2 < CRp.CANVAS_LAYERS; i2++) {
    var canvas = r2.data.canvases[i2] = document2.createElement("canvas");
    var type2 = CRp.CANVAS_TYPES[i2];
    r2.data.contexts[i2] = canvas.getContext(type2);
    if (!r2.data.contexts[i2]) {
      error("Could not create canvas of type " + type2);
    }
    Object.keys(styleMap).forEach(function(k2) {
      canvas.style[k2] = styleMap[k2];
    });
    canvas.style.position = "absolute";
    canvas.setAttribute("data-id", "layer" + i2);
    canvas.style.zIndex = String(CRp.CANVAS_LAYERS - i2);
    r2.data.canvasContainer.appendChild(canvas);
    r2.data.canvasNeedsRedraw[i2] = false;
  }
  r2.data.topCanvas = r2.data.canvases[0];
  r2.data.canvases[CRp.NODE].setAttribute("data-id", "layer" + CRp.NODE + "-node");
  r2.data.canvases[CRp.SELECT_BOX].setAttribute("data-id", "layer" + CRp.SELECT_BOX + "-selectbox");
  r2.data.canvases[CRp.DRAG].setAttribute("data-id", "layer" + CRp.DRAG + "-drag");
  if (r2.data.canvases[CRp.WEBGL]) {
    r2.data.canvases[CRp.WEBGL].setAttribute("data-id", "layer" + CRp.WEBGL + "-webgl");
  }
  for (var i2 = 0; i2 < CRp.BUFFER_COUNT; i2++) {
    r2.data.bufferCanvases[i2] = document2.createElement("canvas");
    r2.data.bufferContexts[i2] = r2.data.bufferCanvases[i2].getContext("2d");
    r2.data.bufferCanvases[i2].style.position = "absolute";
    r2.data.bufferCanvases[i2].setAttribute("data-id", "buffer" + i2);
    r2.data.bufferCanvases[i2].style.zIndex = String(-i2 - 1);
    r2.data.bufferCanvases[i2].style.visibility = "hidden";
  }
  r2.pathsEnabled = true;
  var emptyBb = makeBoundingBox();
  var getBoxCenter = function getBoxCenter2(bb) {
    return {
      x: (bb.x1 + bb.x2) / 2,
      y: (bb.y1 + bb.y2) / 2
    };
  };
  var getCenterOffset = function getCenterOffset2(bb) {
    return {
      x: -bb.w / 2,
      y: -bb.h / 2
    };
  };
  var backgroundTimestampHasChanged = function backgroundTimestampHasChanged2(ele) {
    var _p = ele[0]._private;
    var same2 = _p.oldBackgroundTimestamp === _p.backgroundTimestamp;
    return !same2;
  };
  var getStyleKey = function getStyleKey2(ele) {
    return ele[0]._private.nodeKey;
  };
  var getLabelKey = function getLabelKey2(ele) {
    return ele[0]._private.labelStyleKey;
  };
  var getSourceLabelKey = function getSourceLabelKey2(ele) {
    return ele[0]._private.sourceLabelStyleKey;
  };
  var getTargetLabelKey = function getTargetLabelKey2(ele) {
    return ele[0]._private.targetLabelStyleKey;
  };
  var drawElement = function drawElement2(context, ele, bb, scaledLabelShown, useEleOpacity) {
    return r2.drawElement(context, ele, bb, false, false, useEleOpacity);
  };
  var drawLabel = function drawLabel2(context, ele, bb, scaledLabelShown, useEleOpacity) {
    return r2.drawElementText(context, ele, bb, scaledLabelShown, "main", useEleOpacity);
  };
  var drawSourceLabel = function drawSourceLabel2(context, ele, bb, scaledLabelShown, useEleOpacity) {
    return r2.drawElementText(context, ele, bb, scaledLabelShown, "source", useEleOpacity);
  };
  var drawTargetLabel = function drawTargetLabel2(context, ele, bb, scaledLabelShown, useEleOpacity) {
    return r2.drawElementText(context, ele, bb, scaledLabelShown, "target", useEleOpacity);
  };
  var getElementBox = function getElementBox2(ele) {
    ele.boundingBox();
    return ele[0]._private.bodyBounds;
  };
  var getLabelBox = function getLabelBox2(ele) {
    ele.boundingBox();
    return ele[0]._private.labelBounds.main || emptyBb;
  };
  var getSourceLabelBox = function getSourceLabelBox2(ele) {
    ele.boundingBox();
    return ele[0]._private.labelBounds.source || emptyBb;
  };
  var getTargetLabelBox = function getTargetLabelBox2(ele) {
    ele.boundingBox();
    return ele[0]._private.labelBounds.target || emptyBb;
  };
  var isLabelVisibleAtScale = function isLabelVisibleAtScale2(ele, scaledLabelShown) {
    return scaledLabelShown;
  };
  var getElementRotationPoint = function getElementRotationPoint2(ele) {
    return getBoxCenter(getElementBox(ele));
  };
  var addTextMargin = function addTextMargin2(prefix, pt2, ele) {
    var pre = prefix ? prefix + "-" : "";
    return {
      x: pt2.x + ele.pstyle(pre + "text-margin-x").pfValue,
      y: pt2.y + ele.pstyle(pre + "text-margin-y").pfValue
    };
  };
  var getRsPt = function getRsPt2(ele, x3, y3) {
    var rs2 = ele[0]._private.rscratch;
    return {
      x: rs2[x3],
      y: rs2[y3]
    };
  };
  var getLabelRotationPoint = function getLabelRotationPoint2(ele) {
    return addTextMargin("", getRsPt(ele, "labelX", "labelY"), ele);
  };
  var getSourceLabelRotationPoint = function getSourceLabelRotationPoint2(ele) {
    return addTextMargin("source", getRsPt(ele, "sourceLabelX", "sourceLabelY"), ele);
  };
  var getTargetLabelRotationPoint = function getTargetLabelRotationPoint2(ele) {
    return addTextMargin("target", getRsPt(ele, "targetLabelX", "targetLabelY"), ele);
  };
  var getElementRotationOffset = function getElementRotationOffset2(ele) {
    return getCenterOffset(getElementBox(ele));
  };
  var getSourceLabelRotationOffset = function getSourceLabelRotationOffset2(ele) {
    return getCenterOffset(getSourceLabelBox(ele));
  };
  var getTargetLabelRotationOffset = function getTargetLabelRotationOffset2(ele) {
    return getCenterOffset(getTargetLabelBox(ele));
  };
  var getLabelRotationOffset = function getLabelRotationOffset2(ele) {
    var bb = getLabelBox(ele);
    var p3 = getCenterOffset(getLabelBox(ele));
    if (ele.isNode()) {
      switch (ele.pstyle("text-halign").value) {
        case "left":
          p3.x = -bb.w - (bb.leftPad || 0);
          break;
        case "right":
          p3.x = -(bb.rightPad || 0);
          break;
      }
      switch (ele.pstyle("text-valign").value) {
        case "top":
          p3.y = -bb.h - (bb.topPad || 0);
          break;
        case "bottom":
          p3.y = -(bb.botPad || 0);
          break;
      }
    }
    return p3;
  };
  var eleTxrCache = r2.data.eleTxrCache = new ElementTextureCache(r2, {
    getKey: getStyleKey,
    doesEleInvalidateKey: backgroundTimestampHasChanged,
    drawElement,
    getBoundingBox: getElementBox,
    getRotationPoint: getElementRotationPoint,
    getRotationOffset: getElementRotationOffset,
    allowEdgeTxrCaching: false,
    allowParentTxrCaching: false
  });
  var lblTxrCache = r2.data.lblTxrCache = new ElementTextureCache(r2, {
    getKey: getLabelKey,
    drawElement: drawLabel,
    getBoundingBox: getLabelBox,
    getRotationPoint: getLabelRotationPoint,
    getRotationOffset: getLabelRotationOffset,
    isVisible: isLabelVisibleAtScale
  });
  var slbTxrCache = r2.data.slbTxrCache = new ElementTextureCache(r2, {
    getKey: getSourceLabelKey,
    drawElement: drawSourceLabel,
    getBoundingBox: getSourceLabelBox,
    getRotationPoint: getSourceLabelRotationPoint,
    getRotationOffset: getSourceLabelRotationOffset,
    isVisible: isLabelVisibleAtScale
  });
  var tlbTxrCache = r2.data.tlbTxrCache = new ElementTextureCache(r2, {
    getKey: getTargetLabelKey,
    drawElement: drawTargetLabel,
    getBoundingBox: getTargetLabelBox,
    getRotationPoint: getTargetLabelRotationPoint,
    getRotationOffset: getTargetLabelRotationOffset,
    isVisible: isLabelVisibleAtScale
  });
  var lyrTxrCache = r2.data.lyrTxrCache = new LayeredTextureCache(r2);
  r2.onUpdateEleCalcs(function invalidateTextureCaches(willDraw, eles) {
    eleTxrCache.invalidateElements(eles);
    lblTxrCache.invalidateElements(eles);
    slbTxrCache.invalidateElements(eles);
    tlbTxrCache.invalidateElements(eles);
    lyrTxrCache.invalidateElements(eles);
    for (var _i2 = 0; _i2 < eles.length; _i2++) {
      var _p = eles[_i2]._private;
      _p.oldBackgroundTimestamp = _p.backgroundTimestamp;
    }
  });
  var refineInLayers = function refineInLayers2(reqs) {
    for (var i3 = 0; i3 < reqs.length; i3++) {
      lyrTxrCache.enqueueElementRefinement(reqs[i3].ele);
    }
  };
  eleTxrCache.onDequeue(refineInLayers);
  lblTxrCache.onDequeue(refineInLayers);
  slbTxrCache.onDequeue(refineInLayers);
  tlbTxrCache.onDequeue(refineInLayers);
  if (options3.webgl) {
    r2.initWebgl(options3, {
      getStyleKey,
      getLabelKey,
      getSourceLabelKey,
      getTargetLabelKey,
      drawElement,
      drawLabel,
      drawSourceLabel,
      drawTargetLabel,
      getElementBox,
      getLabelBox,
      getSourceLabelBox,
      getTargetLabelBox,
      getElementRotationPoint,
      getElementRotationOffset,
      getLabelRotationPoint,
      getSourceLabelRotationPoint,
      getTargetLabelRotationPoint,
      getLabelRotationOffset,
      getSourceLabelRotationOffset,
      getTargetLabelRotationOffset
    });
  }
}
CRp.redrawHint = function(group2, bool) {
  var r2 = this;
  switch (group2) {
    case "eles":
      r2.data.canvasNeedsRedraw[CRp.NODE] = bool;
      break;
    case "drag":
      r2.data.canvasNeedsRedraw[CRp.DRAG] = bool;
      break;
    case "select":
      r2.data.canvasNeedsRedraw[CRp.SELECT_BOX] = bool;
      break;
    case "gc":
      r2.data.gc = true;
      break;
  }
};
var pathsImpld = typeof Path2D !== "undefined";
CRp.path2dEnabled = function(on4) {
  if (on4 === void 0) {
    return this.pathsEnabled;
  }
  this.pathsEnabled = on4 ? true : false;
};
CRp.usePaths = function() {
  return pathsImpld && this.pathsEnabled;
};
CRp.setImgSmoothing = function(context, bool) {
  if (context.imageSmoothingEnabled != null) {
    context.imageSmoothingEnabled = bool;
  } else {
    context.webkitImageSmoothingEnabled = bool;
    context.mozImageSmoothingEnabled = bool;
    context.msImageSmoothingEnabled = bool;
  }
};
CRp.getImgSmoothing = function(context) {
  if (context.imageSmoothingEnabled != null) {
    return context.imageSmoothingEnabled;
  } else {
    return context.webkitImageSmoothingEnabled || context.mozImageSmoothingEnabled || context.msImageSmoothingEnabled;
  }
};
CRp.makeOffscreenCanvas = function(width2, height2) {
  var canvas;
  if ((typeof OffscreenCanvas === "undefined" ? "undefined" : _typeof(OffscreenCanvas)) !== "undefined") {
    canvas = new OffscreenCanvas(width2, height2);
  } else {
    var containerWindow = this.cy.window();
    var document2 = containerWindow.document;
    canvas = document2.createElement("canvas");
    canvas.width = width2;
    canvas.height = height2;
  }
  return canvas;
};
[CRp$b, CRp$a, CRp$9, CRp$8, CRp$7, CRp$6, CRp$5, CRp$4, CRp$3, CRp$2, CRp$1].forEach(function(props) {
  extend(CRp, props);
});
var renderer2 = [{
  name: "null",
  impl: NullRenderer
}, {
  name: "base",
  impl: BR
}, {
  name: "canvas",
  impl: CR
}];
var incExts = [{
  type: "layout",
  extensions: layout3
}, {
  type: "renderer",
  extensions: renderer2
}];
var extensions = {};
var modules = {};
function setExtension(type2, name, registrant) {
  var ext = registrant;
  var overrideErr = function overrideErr2(field) {
    warn("Can not register `" + name + "` for `" + type2 + "` since `" + field + "` already exists in the prototype and can not be overridden");
  };
  if (type2 === "core") {
    if (Core.prototype[name]) {
      return overrideErr(name);
    } else {
      Core.prototype[name] = registrant;
    }
  } else if (type2 === "collection") {
    if (Collection.prototype[name]) {
      return overrideErr(name);
    } else {
      Collection.prototype[name] = registrant;
    }
  } else if (type2 === "layout") {
    var Layout2 = function Layout3(options3) {
      this.options = options3;
      registrant.call(this, options3);
      if (!plainObject(this._private)) {
        this._private = {};
      }
      this._private.cy = options3.cy;
      this._private.listeners = [];
      this.createEmitter();
    };
    var layoutProto = Layout2.prototype = Object.create(registrant.prototype);
    var optLayoutFns = [];
    for (var i2 = 0; i2 < optLayoutFns.length; i2++) {
      var fnName = optLayoutFns[i2];
      layoutProto[fnName] = layoutProto[fnName] || function() {
        return this;
      };
    }
    if (layoutProto.start && !layoutProto.run) {
      layoutProto.run = function() {
        this.start();
        return this;
      };
    } else if (!layoutProto.start && layoutProto.run) {
      layoutProto.start = function() {
        this.run();
        return this;
      };
    }
    var regStop = registrant.prototype.stop;
    layoutProto.stop = function() {
      var opts = this.options;
      if (opts && opts.animate) {
        var anis = this.animations;
        if (anis) {
          for (var _i2 = 0; _i2 < anis.length; _i2++) {
            anis[_i2].stop();
          }
        }
      }
      if (regStop) {
        regStop.call(this);
      } else {
        this.emit("layoutstop");
      }
      return this;
    };
    if (!layoutProto.destroy) {
      layoutProto.destroy = function() {
        return this;
      };
    }
    layoutProto.cy = function() {
      return this._private.cy;
    };
    var getCy = function getCy2(layout6) {
      return layout6._private.cy;
    };
    var emitterOpts = {
      addEventFields: function addEventFields4(layout6, evt) {
        evt.layout = layout6;
        evt.cy = getCy(layout6);
        evt.target = layout6;
      },
      bubble: function bubble3() {
        return true;
      },
      parent: function parent4(layout6) {
        return getCy(layout6);
      }
    };
    extend(layoutProto, {
      createEmitter: function createEmitter3() {
        this._private.emitter = new Emitter2(emitterOpts, this);
        return this;
      },
      emitter: function emitter3() {
        return this._private.emitter;
      },
      on: function on4(evt, cb) {
        this.emitter().on(evt, cb);
        return this;
      },
      one: function one3(evt, cb) {
        this.emitter().one(evt, cb);
        return this;
      },
      once: function once3(evt, cb) {
        this.emitter().one(evt, cb);
        return this;
      },
      removeListener: function removeListener3(evt, cb) {
        this.emitter().removeListener(evt, cb);
        return this;
      },
      removeAllListeners: function removeAllListeners3() {
        this.emitter().removeAllListeners();
        return this;
      },
      emit: function emit3(evt, params) {
        this.emitter().emit(evt, params);
        return this;
      }
    });
    define2.eventAliasesOn(layoutProto);
    ext = Layout2;
  } else if (type2 === "renderer" && name !== "null" && name !== "base") {
    var BaseRenderer3 = getExtension("renderer", "base");
    var bProto = BaseRenderer3.prototype;
    var RegistrantRenderer = registrant;
    var rProto = registrant.prototype;
    var Renderer = function Renderer2() {
      BaseRenderer3.apply(this, arguments);
      RegistrantRenderer.apply(this, arguments);
    };
    var proto = Renderer.prototype;
    for (var pName in bProto) {
      var pVal = bProto[pName];
      var existsInR = rProto[pName] != null;
      if (existsInR) {
        return overrideErr(pName);
      }
      proto[pName] = pVal;
    }
    for (var _pName in rProto) {
      proto[_pName] = rProto[_pName];
    }
    bProto.clientFunctions.forEach(function(name2) {
      proto[name2] = proto[name2] || function() {
        error("Renderer does not implement `renderer." + name2 + "()` on its prototype");
      };
    });
    ext = Renderer;
  } else if (type2 === "__proto__" || type2 === "constructor" || type2 === "prototype") {
    return error(type2 + " is an illegal type to be registered, possibly lead to prototype pollutions");
  }
  return setMap({
    map: extensions,
    keys: [type2, name],
    value: ext
  });
}
function getExtension(type2, name) {
  return getMap({
    map: extensions,
    keys: [type2, name]
  });
}
function setModule(type2, name, moduleType, moduleName, registrant) {
  return setMap({
    map: modules,
    keys: [type2, name, moduleType, moduleName],
    value: registrant
  });
}
function getModule(type2, name, moduleType, moduleName) {
  return getMap({
    map: modules,
    keys: [type2, name, moduleType, moduleName]
  });
}
var extension = function extension2() {
  if (arguments.length === 2) {
    return getExtension.apply(null, arguments);
  } else if (arguments.length === 3) {
    return setExtension.apply(null, arguments);
  } else if (arguments.length === 4) {
    return getModule.apply(null, arguments);
  } else if (arguments.length === 5) {
    return setModule.apply(null, arguments);
  } else {
    error("Invalid extension access syntax");
  }
};
Core.prototype.extension = extension;
incExts.forEach(function(group2) {
  group2.extensions.forEach(function(ext) {
    setExtension(group2.type, ext.name, ext.impl);
  });
});
var _Stylesheet = function Stylesheet() {
  if (!(this instanceof _Stylesheet)) {
    return new _Stylesheet();
  }
  this.length = 0;
};
var sheetfn = _Stylesheet.prototype;
sheetfn.instanceString = function() {
  return "stylesheet";
};
sheetfn.selector = function(selector) {
  var i2 = this.length++;
  this[i2] = {
    selector,
    properties: []
  };
  return this;
};
sheetfn.css = function(name, value) {
  var i2 = this.length - 1;
  if (string(name)) {
    this[i2].properties.push({
      name,
      value
    });
  } else if (plainObject(name)) {
    var map2 = name;
    var propNames = Object.keys(map2);
    for (var j2 = 0; j2 < propNames.length; j2++) {
      var key = propNames[j2];
      var mapVal = map2[key];
      if (mapVal == null) {
        continue;
      }
      var prop = _Style.properties[key] || _Style.properties[dash2camel(key)];
      if (prop == null) {
        continue;
      }
      var _name = prop.name;
      var _value = mapVal;
      this[i2].properties.push({
        name: _name,
        value: _value
      });
    }
  }
  return this;
};
sheetfn.style = sheetfn.css;
sheetfn.generateStyle = function(cy) {
  var style3 = new _Style(cy);
  return this.appendToStyle(style3);
};
sheetfn.appendToStyle = function(style3) {
  for (var i2 = 0; i2 < this.length; i2++) {
    var context = this[i2];
    var selector = context.selector;
    var props = context.properties;
    style3.selector(selector);
    for (var j2 = 0; j2 < props.length; j2++) {
      var prop = props[j2];
      style3.css(prop.name, prop.value);
    }
  }
  return style3;
};
var version2 = "3.33.1";
var cytoscape2 = function cytoscape3(options3) {
  if (options3 === void 0) {
    options3 = {};
  }
  if (plainObject(options3)) {
    return new Core(options3);
  } else if (string(options3)) {
    return extension.apply(extension, arguments);
  }
};
cytoscape2.use = function(ext) {
  var args = Array.prototype.slice.call(arguments, 1);
  args.unshift(cytoscape2);
  ext.apply(null, args);
  return this;
};
cytoscape2.warnings = function(bool) {
  return warnings(bool);
};
cytoscape2.version = version2;
cytoscape2.stylesheet = cytoscape2.Stylesheet = _Stylesheet;

// node_modules/@neo4j-nvl/layout-workers/lib/cosebilkent-layout/cose-bilkent-layout-impl.js
var import_cytoscape_cose_bilkent = __toESM(require_cytoscape_cose_bilkent(), 1);
cytoscape2.use(import_cytoscape_cose_bilkent.default);
var type = "cose-bilkent";
var layout4 = (elements, spacingFactor) => {
  const c2 = cytoscape2({
    headless: true,
    styleEnabled: false
  });
  c2.add(elements);
  const positions2 = {};
  const cytoLayout = c2.layout({
    name: type,
    animate: false,
    spacingFactor,
    quality: "default",
    tile: false,
    randomize: true,
    stop: () => {
      c2.nodes().forEach((n2) => {
        positions2[n2.id()] = { ...n2.position() };
      });
    }
  });
  cytoLayout.run();
  return {
    positions: positions2
  };
};

// node_modules/@neo4j-nvl/layout-workers/lib/cosebilkent-layout/CoseBilkentLayout.fallback.js
var CoseBilkentLayoutFallbackWorker = class {
  start() {
  }
  postMessage(data4) {
    const { elements, spacingFactor } = data4;
    const layoutData = layout4(elements, spacingFactor);
    this.onmessage({ data: layoutData });
  }
  onmessage() {
  }
  close() {
  }
};
var coseBilkentLayoutFallbackWorker = {
  port: new CoseBilkentLayoutFallbackWorker()
};

// node_modules/@neo4j-nvl/layout-workers/lib/cosebilkent-layout/workerFactory.mjs
var createCoseBilkentLayoutWorker = () => new SharedWorker(new URL("./CoseBilkentLayout.worker.js", import.meta.url), {
  type: "module",
  name: "CoseBilkentLayout"
});

// node_modules/@neo4j-nvl/layout-workers/lib/hierarchical-layout/dagre-layout-impl.js
var import_dagre = __toESM(require_dagre(), 1);
var import_bin_pack = __toESM(require_bin_pack(), 1);
var import_graphlib = __toESM(require_graphlib(), 1);

// node_modules/@neo4j-nvl/layout-workers/lib/hierarchical-layout/constants.js
var Ranker = "tight-tree";
var SubGraphSpacing = 100;
var DirectionUp = "up";
var DirectionDown = "down";
var DirectionLeft = "left";
var DirectionRight = "right";
var Directions = {
  [DirectionUp]: "BT",
  [DirectionDown]: "TB",
  [DirectionLeft]: "RL",
  [DirectionRight]: "LR"
};
var PackingBin = "bin";
var DefaultNodeSize = 25;
var GlAdjust = 1 / 0.38;

// node_modules/@neo4j-nvl/layout-workers/lib/hierarchical-layout/dagre-layout-impl.js
var isDirectionVertical = (direction) => direction === DirectionUp || direction === DirectionDown;
var isDirectionNatural = (direction) => direction === DirectionDown || direction === DirectionRight;
var getGraphDimensions = (g2) => {
  let minX = null;
  let minY = null;
  let maxX = null;
  let maxY = null;
  let minCenterX = null;
  let minCenterY = null;
  let maxCenterX = null;
  let maxCenterY = null;
  for (const id2 of g2.nodes()) {
    const sn2 = g2.node(id2);
    if (minCenterX === null || sn2.x < minCenterX) {
      minCenterX = sn2.x;
    }
    if (minCenterY === null || sn2.y < minCenterY) {
      minCenterY = sn2.y;
    }
    if (maxCenterX === null || sn2.x > maxCenterX) {
      maxCenterX = sn2.x;
    }
    if (maxCenterY === null || sn2.y > maxCenterY) {
      maxCenterY = sn2.y;
    }
    const halfSize = Math.ceil(sn2.width / 2);
    if (minX === null || sn2.x - halfSize < minX) {
      minX = sn2.x - halfSize;
    }
    if (minY === null || sn2.y - halfSize < minY) {
      minY = sn2.y - halfSize;
    }
    if (maxX === null || sn2.x + halfSize > maxX) {
      maxX = sn2.x + halfSize;
    }
    if (maxY === null || sn2.y + halfSize > maxY) {
      maxY = sn2.y + halfSize;
    }
  }
  return {
    minX,
    minY,
    maxX,
    maxY,
    minCenterX,
    minCenterY,
    maxCenterX,
    maxCenterY,
    width: maxX - minX,
    height: maxY - minY,
    xOffset: minCenterX - minX,
    yOffset: minCenterY - minY
  };
};
var createGraph = (pixelRatio) => {
  const g2 = new import_dagre.default.graphlib.Graph();
  g2.setGraph({});
  g2.setDefaultEdgeLabel(() => ({}));
  g2.graph().nodesep = 75 * pixelRatio;
  g2.graph().ranksep = 75 * pixelRatio;
  return g2;
};
var findParentForEdges = (id2, connectedNodes, layoutGraph2) => {
  const { rank: currentRank } = layoutGraph2.node(id2);
  let pRank = null;
  let pId = null;
  for (const otherId of connectedNodes) {
    const { rank } = layoutGraph2.node(otherId);
    if (otherId === id2 || rank >= currentRank) {
      continue;
    } else if (rank === currentRank - 1) {
      pRank = rank;
      pId = otherId;
      break;
    } else if (pRank === null && pId === null || rank > pRank) {
      pRank = rank;
      pId = otherId;
    }
  }
  return pId;
};
var findParent = (id2, layoutGraph2) => {
  let pId = findParentForEdges(id2, layoutGraph2.predecessors(id2), layoutGraph2);
  if (pId === null) {
    pId = findParentForEdges(id2, layoutGraph2.successors(id2), layoutGraph2);
  }
  return pId;
};
var getConnectedSubGraphs = (g2, pixelRatio) => {
  const subGraphs = [];
  const components2 = import_graphlib.default.alg.components(g2);
  if (components2.length > 1) {
    for (const component2 of components2) {
      const subGraph = createGraph(pixelRatio);
      for (const id2 of component2) {
        const n2 = g2.node(id2);
        subGraph.setNode(id2, { width: n2.width, height: n2.height });
        const outEdges = g2.outEdges(id2);
        if (outEdges) {
          for (const e of outEdges) {
            subGraph.setEdge(e.v, e.w);
          }
        }
      }
      subGraphs.push(subGraph);
    }
  } else {
    subGraphs.push(g2);
  }
  return subGraphs;
};
var layoutGraph = (g2, direction, parents2) => {
  g2.graph().ranker = Ranker;
  g2.graph().rankdir = Directions[direction];
  const dagreLayoutGraph = import_dagre.default.layout(g2);
  for (const id2 of dagreLayoutGraph.nodes()) {
    const pId = findParent(id2, dagreLayoutGraph);
    if (pId !== null) {
      parents2[id2] = pId;
    }
  }
};
var getDistance3 = (p1, p22) => Math.sqrt((p1.x - p22.x) * (p1.x - p22.x) + (p1.y - p22.y) * (p1.y - p22.y));
var mergeStraightPoints = (points) => {
  const mergedPoints = [points[0]];
  let prevSegment = { p1: points[0], p2: points[1] };
  let prevLength = getDistance3(prevSegment.p1, prevSegment.p2);
  for (let i2 = 2; i2 < points.length; i2++) {
    let currentSegment = { p1: points[i2 - 1], p2: points[i2] };
    let currentLength = getDistance3(currentSegment.p1, currentSegment.p2);
    const compositeSegment = { p1: prevSegment.p1, p2: currentSegment.p2 };
    const compositeLength = getDistance3(compositeSegment.p1, compositeSegment.p2);
    if (currentLength + prevLength - compositeLength < 0.1) {
      mergedPoints.pop();
      currentSegment = compositeSegment;
      currentLength = compositeLength;
    }
    mergedPoints.push(currentSegment.p1);
    prevSegment = currentSegment;
    prevLength = currentLength;
  }
  mergedPoints.push(points[points.length - 1]);
  return mergedPoints;
};
var layout5 = (nodes3, nodeIds, idToPosition, rels, direction, packing, pixelRatio = 1) => {
  const g2 = createGraph(pixelRatio);
  const parents2 = {};
  const positionSum = { x: 0, y: 0 };
  const numNodes = nodes3.length;
  for (const n2 of nodes3) {
    const position3 = idToPosition[n2.id];
    positionSum.x += (position3 == null ? void 0 : position3.x) || 0;
    positionSum.y += (position3 == null ? void 0 : position3.y) || 0;
    const size3 = (n2.size || DefaultNodeSize) * GlAdjust * pixelRatio;
    g2.setNode(n2.id, { width: size3, height: size3 });
  }
  const prevNodeCenterPoint = numNodes ? [positionSum.x / numNodes, positionSum.y / numNodes] : [0, 0];
  const addedRel = {};
  for (const r2 of rels) {
    if (nodeIds[r2.from] && nodeIds[r2.to] && r2.from !== r2.to) {
      const relKey = r2.from < r2.to ? `${r2.from}-${r2.to}` : `${r2.to}-${r2.from}`;
      if (!addedRel[relKey]) {
        addedRel[relKey] = 1;
        g2.setEdge(r2.from, r2.to);
      }
    }
  }
  const subGraphs = getConnectedSubGraphs(g2, pixelRatio);
  if (subGraphs.length > 1) {
    subGraphs.forEach((subGraph) => layoutGraph(subGraph, direction, parents2));
    const isVertical = isDirectionVertical(direction);
    const isNatural = isDirectionNatural(direction);
    const singleNodeGraphs = subGraphs.filter((sg) => sg.nodeCount() === 1);
    const multiNodeGraphs = subGraphs.filter((sg) => sg.nodeCount() !== 1);
    if (packing === PackingBin) {
      multiNodeGraphs.sort((a2, b2) => b2.nodeCount() - a2.nodeCount());
      const adjustDimensionPaddingNormal = ({ width: width2, height: height2, ...rest }) => ({
        ...rest,
        width: width2 + SubGraphSpacing,
        height: height2 + SubGraphSpacing
      });
      const adjustDimensionPaddingFlip = ({ width: width2, height: height2, ...rest }) => ({
        ...rest,
        width: height2 + SubGraphSpacing,
        height: width2 + SubGraphSpacing
      });
      const adjustDimensionPadding = isVertical ? adjustDimensionPaddingNormal : adjustDimensionPaddingFlip;
      const multiGraphDimensions = multiNodeGraphs.map(getGraphDimensions).map(adjustDimensionPadding);
      const singleGraphDimensions = singleNodeGraphs.map(getGraphDimensions).map(adjustDimensionPadding);
      const bins = multiGraphDimensions.concat(singleGraphDimensions);
      (0, import_bin_pack.default)(bins, { inPlace: true });
      const halfSpacing = Math.floor(SubGraphSpacing / 2);
      const xProp = isVertical ? "x" : "y";
      const yProp = isVertical ? "y" : "x";
      if (!isNatural) {
        const positionProp = isVertical ? "y" : "x";
        const extentProp = isVertical ? "height" : "width";
        const min4 = bins.reduce((minBin, d2) => minBin === null ? d2[positionProp] : Math.min(d2[positionProp], minBin[extentProp] || 0), null);
        const max5 = bins.reduce((maxBin, d2) => {
          return maxBin === null ? d2[positionProp] + d2[extentProp] : Math.max(d2[positionProp] + d2[extentProp], maxBin[extentProp] || 0);
        }, null);
        bins.forEach((d2) => {
          d2[positionProp] = min4 + (max5 - (d2[positionProp] + d2[extentProp]));
        });
      }
      const assignPositions = (subGraph, dimensions2) => {
        for (const id2 of subGraph.nodes()) {
          const sn2 = subGraph.node(id2);
          const n2 = g2.node(id2);
          n2.x = sn2.x - dimensions2.xOffset + dimensions2[xProp] + halfSpacing;
          n2.y = sn2.y - dimensions2.yOffset + dimensions2[yProp] + halfSpacing;
        }
      };
      for (let i2 = 0; i2 < multiNodeGraphs.length; i2++) {
        const subGraph = multiNodeGraphs[i2];
        const dimensions2 = multiGraphDimensions[i2];
        assignPositions(subGraph, dimensions2);
      }
      for (let i2 = 0; i2 < singleNodeGraphs.length; i2++) {
        const subGraph = singleNodeGraphs[i2];
        const dimensions2 = singleGraphDimensions[i2];
        assignPositions(subGraph, dimensions2);
      }
    } else {
      multiNodeGraphs.sort(isNatural ? (a2, b2) => b2.nodeCount() - a2.nodeCount() : (a2, b2) => a2.nodeCount() - b2.nodeCount());
      const multiGraphDimensions = multiNodeGraphs.map(getGraphDimensions);
      const singleNodesAcc = singleNodeGraphs.reduce((acc, subGraph) => acc + g2.node(subGraph.nodes()[0]).width, 0);
      const singleNodesMaxSize = singleNodeGraphs.reduce((maxSize, subGraph) => Math.max(maxSize, g2.node(subGraph.nodes()[0]).width), 0);
      const singleNodesSize = singleNodeGraphs.length > 0 ? singleNodesAcc + (singleNodeGraphs.length - 1) * SubGraphSpacing : 0;
      const maxSubGraphWidth = multiGraphDimensions.reduce((maxWidth, { width: width2 }) => Math.max(maxWidth, width2), 0);
      const graphWidth = Math.max(maxSubGraphWidth, singleNodesSize);
      const maxSubGraphHeight = multiGraphDimensions.reduce((maxHeight, { height: height2 }) => Math.max(maxHeight, height2), 0);
      const graphHeight = Math.max(maxSubGraphHeight, singleNodesSize);
      let position3 = 0;
      const positionMultiNodeGraphs = () => {
        for (let i2 = 0; i2 < multiNodeGraphs.length; i2++) {
          const subGraph = multiNodeGraphs[i2];
          const dimensions2 = multiGraphDimensions[i2];
          const centerOffset = isVertical ? Math.floor((graphWidth - dimensions2.width) / 2) : Math.floor((graphHeight - dimensions2.height) / 2);
          for (const id2 of subGraph.nodes()) {
            const sn2 = subGraph.node(id2);
            const n2 = g2.node(id2);
            if (isVertical) {
              n2.x = sn2.x - dimensions2.minX + centerOffset;
              n2.y = sn2.y - dimensions2.minY + position3;
            } else {
              n2.x = sn2.x - dimensions2.minX + position3;
              n2.y = sn2.y - dimensions2.minY + centerOffset;
            }
          }
          for (const id2 of subGraph.edges()) {
            const sedge = subGraph.edge(id2);
            const edge = g2.edge(id2);
            if (sedge.points && sedge.points.length > 3) {
              edge.points = sedge.points.map(({ x: x3, y: y3 }) => ({
                x: x3 - dimensions2.minX + (isVertical ? centerOffset : position3),
                y: y3 - dimensions2.minY + (isVertical ? position3 : centerOffset)
              }));
            }
          }
          position3 += (isVertical ? dimensions2.height : dimensions2.width) + SubGraphSpacing;
        }
      };
      const positionSingleNodeGraphs = () => {
        const singleCenterOffset = Math.floor(((isVertical ? graphWidth : graphHeight) - singleNodesSize) / 2);
        position3 += Math.floor(singleNodesMaxSize / 2);
        let singlePosition = singleCenterOffset;
        for (const subGraph of singleNodeGraphs) {
          const id2 = subGraph.nodes()[0];
          const n2 = g2.node(id2);
          if (isVertical) {
            n2.x = singlePosition + Math.floor(n2.width / 2);
            n2.y = position3;
          } else {
            n2.x = position3;
            n2.y = singlePosition + Math.floor(n2.width / 2);
          }
          singlePosition += SubGraphSpacing + n2.width;
        }
        position3 = singleNodesMaxSize + SubGraphSpacing;
      };
      if (isNatural) {
        positionMultiNodeGraphs();
        positionSingleNodeGraphs();
      } else {
        positionSingleNodeGraphs();
        positionMultiNodeGraphs();
      }
    }
  } else {
    layoutGraph(g2, direction, parents2);
  }
  positionSum.x = 0;
  positionSum.y = 0;
  const positions2 = {};
  for (const id2 of g2.nodes()) {
    const n2 = g2.node(id2);
    positionSum.x += n2.x || 0;
    positionSum.y += n2.y || 0;
    positions2[id2] = { x: n2.x, y: n2.y };
  }
  const newNodeCenterPoint = numNodes ? [positionSum.x / numNodes, positionSum.y / numNodes] : [0, 0];
  const translateX = prevNodeCenterPoint[0] - newNodeCenterPoint[0];
  const translateY = prevNodeCenterPoint[1] - newNodeCenterPoint[1];
  for (const key in positions2) {
    positions2[key].x += translateX;
    positions2[key].y += translateY;
  }
  const waypoints = {};
  for (const id2 of g2.edges()) {
    const e = g2.edge(id2);
    if (e.points && e.points.length > 3) {
      const mergedPoints = mergeStraightPoints(e.points);
      for (const p3 of mergedPoints) {
        p3.x += translateX;
        p3.y += translateY;
      }
      waypoints[`${id2.v}-${id2.w}`] = {
        points: [...mergedPoints],
        from: {
          x: positions2[id2.v].x,
          y: positions2[id2.v].y
        },
        to: {
          x: positions2[id2.w].x,
          y: positions2[id2.w].y
        }
      };
      waypoints[`${id2.w}-${id2.v}`] = {
        points: mergedPoints.reverse(),
        from: {
          x: positions2[id2.w].x,
          y: positions2[id2.w].y
        },
        to: {
          x: positions2[id2.v].x,
          y: positions2[id2.v].y
        }
      };
    }
  }
  return {
    positions: positions2,
    parents: parents2,
    waypoints
  };
};

// node_modules/@neo4j-nvl/layout-workers/lib/hierarchical-layout/HierarchicalLayout.fallback.js
var HierarchicalLayoutFallbackWorker = class {
  start() {
  }
  postMessage(data4) {
    const { nodes: nodes3, nodeIds, idToPosition, rels, direction, packing, pixelRatio, forcedDelay = 0 } = data4;
    const layoutData = layout5(nodes3, nodeIds, idToPosition, rels, direction, packing, pixelRatio);
    if (forcedDelay) {
      setTimeout(() => {
        this.onmessage({ data: layoutData });
      }, forcedDelay);
    } else {
      this.onmessage({ data: layoutData });
    }
  }
  onmessage() {
  }
  close() {
  }
};
var hierarchicalLayoutFallbackWorker = {
  port: new HierarchicalLayoutFallbackWorker()
};

// node_modules/@neo4j-nvl/layout-workers/lib/hierarchical-layout/workerFactory.mjs
var createHierarchicalLayoutWorker = () => new SharedWorker(new URL("./HierarchicalLayout.worker.js", import.meta.url), {
  type: "module",
  name: "HierarchicalLayout"
});

// node_modules/@segment/analytics-next/dist/pkg/core/arguments-resolver/index.js
function resolveArguments(eventName, properties, options3, callback) {
  var _a3;
  var args = [eventName, properties, options3, callback];
  var name = isPlainObject(eventName) ? eventName.event : eventName;
  if (!name || !isString(name)) {
    throw new Error("Event missing");
  }
  var data4 = isPlainObject(eventName) ? (_a3 = eventName.properties) !== null && _a3 !== void 0 ? _a3 : {} : isPlainObject(properties) ? properties : {};
  var opts = {};
  if (!isFunction(options3)) {
    opts = options3 !== null && options3 !== void 0 ? options3 : {};
  }
  if (isPlainObject(eventName) && !isFunction(properties)) {
    opts = properties !== null && properties !== void 0 ? properties : {};
  }
  var cb = args.find(isFunction);
  return [name, data4, opts, cb];
}
function resolvePageArguments(category, name, properties, options3, callback) {
  var resolvedProperties;
  var resolvedOptions;
  var resolvedCategory = null;
  var resolvedName = null;
  var args = [category, name, properties, options3, callback];
  var strings = args.filter(isString);
  if (strings.length === 1) {
    if (isString(args[1])) {
      resolvedName = args[1];
      resolvedCategory = null;
    } else {
      resolvedName = strings[0];
      resolvedCategory = null;
    }
  } else if (strings.length === 2) {
    if (typeof args[0] === "string") {
      resolvedCategory = args[0];
    }
    if (typeof args[1] === "string") {
      resolvedName = args[1];
    }
  }
  var resolvedCallback = args.find(isFunction);
  var objects = args.filter(isPlainObject);
  if (objects.length === 1) {
    if (isPlainObject(args[2])) {
      resolvedOptions = {};
      resolvedProperties = args[2];
    } else if (isPlainObject(args[3])) {
      resolvedProperties = {};
      resolvedOptions = args[3];
    } else {
      resolvedProperties = objects[0];
      resolvedOptions = {};
    }
  } else if (objects.length === 2) {
    resolvedProperties = objects[0];
    resolvedOptions = objects[1];
  }
  return [
    resolvedCategory,
    resolvedName,
    resolvedProperties !== null && resolvedProperties !== void 0 ? resolvedProperties : resolvedProperties = {},
    resolvedOptions !== null && resolvedOptions !== void 0 ? resolvedOptions : resolvedOptions = {},
    resolvedCallback
  ];
}
var resolveUserArguments = function(user) {
  return function() {
    var _a3, _b2, _c2;
    var args = [];
    for (var _i2 = 0; _i2 < arguments.length; _i2++) {
      args[_i2] = arguments[_i2];
    }
    var values = {};
    var orderStack = [
      "callback",
      "options",
      "traits",
      "id"
    ];
    for (var _d = 0, args_1 = args; _d < args_1.length; _d++) {
      var arg = args_1[_d];
      var current = orderStack.pop();
      if (current === "id") {
        if (isString(arg) || isNumber(arg)) {
          values.id = arg.toString();
          continue;
        }
        if (arg === null || arg === void 0) {
          continue;
        }
        current = orderStack.pop();
      }
      if ((current === "traits" || current === "options") && (arg === null || arg === void 0 || isPlainObject(arg))) {
        values[current] = arg;
      }
      if (isFunction(arg)) {
        values.callback = arg;
        break;
      }
    }
    return [
      (_a3 = values.id) !== null && _a3 !== void 0 ? _a3 : user.id(),
      (_b2 = values.traits) !== null && _b2 !== void 0 ? _b2 : {},
      (_c2 = values.options) !== null && _c2 !== void 0 ? _c2 : {},
      values.callback
    ];
  };
};
function resolveAliasArguments(to2, from, options3, callback) {
  if (isNumber(to2))
    to2 = to2.toString();
  if (isNumber(from))
    from = from.toString();
  var args = [to2, from, options3, callback];
  var _a3 = args.filter(isString), _b2 = _a3[0], aliasTo = _b2 === void 0 ? to2 : _b2, _c2 = _a3[1], aliasFrom = _c2 === void 0 ? null : _c2;
  var _d = args.filter(isPlainObject)[0], opts = _d === void 0 ? {} : _d;
  var resolvedCallback = args.find(isFunction);
  return [aliasTo, aliasFrom, opts, resolvedCallback];
}

// node_modules/@segment/analytics-page-tools/dist/esm/index.mjs
function isPlainObject2(obj) {
  return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase() === "object";
}
var BufferedPageContextDiscriminant = "bpc";
var createBufferedPageContext = function(url, canonicalUrl, search, path, title, referrer) {
  return {
    __t: BufferedPageContextDiscriminant,
    c: canonicalUrl,
    p: path,
    u: url,
    s: search,
    t: title,
    r: referrer
  };
};
var BUFFERED_PAGE_CONTEXT_KEYS = Object.keys(createBufferedPageContext("", "", "", "", "", ""));
function isBufferedPageContext(bufferedPageCtx) {
  if (!isPlainObject2(bufferedPageCtx)) return false;
  if (bufferedPageCtx.__t !== BufferedPageContextDiscriminant) return false;
  for (var k2 in bufferedPageCtx) {
    if (!BUFFERED_PAGE_CONTEXT_KEYS.includes(k2)) {
      return false;
    }
  }
  return true;
}
var createCanonicalURL = function(canonicalUrl, searchParams) {
  return canonicalUrl.indexOf("?") > -1 ? canonicalUrl : canonicalUrl + searchParams;
};
var removeHash = function(href) {
  var hashIdx = href.indexOf("#");
  return hashIdx === -1 ? href : href.slice(0, hashIdx);
};
var parseCanonicalPath = function(canonicalUrl) {
  try {
    return new URL(canonicalUrl).pathname;
  } catch (_e2) {
    return canonicalUrl[0] === "/" ? canonicalUrl : "/" + canonicalUrl;
  }
};
var createPageContext = function(param) {
  var canonicalUrl = param.c, pathname = param.p, search = param.s, url = param.u, referrer = param.r, title = param.t;
  var newPath = canonicalUrl ? parseCanonicalPath(canonicalUrl) : pathname;
  var newUrl = canonicalUrl ? createCanonicalURL(canonicalUrl, search) : removeHash(url);
  return {
    path: newPath,
    referrer,
    search,
    title,
    url: newUrl
  };
};
var getDefaultBufferedPageContext = function() {
  var c2 = document.querySelector("link[rel='canonical']");
  return createBufferedPageContext(location.href, c2 && c2.getAttribute("href") || void 0, location.search, location.pathname, document.title, document.referrer);
};
var getDefaultPageContext = function() {
  return createPageContext(getDefaultBufferedPageContext());
};

// node_modules/@segment/analytics-next/dist/pkg/lib/pick.js
function pick(object3, keys2) {
  return Object.assign.apply(Object, __spreadArray([{}], keys2.map(function(key) {
    var _a3;
    if (object3 && Object.prototype.hasOwnProperty.call(object3, key)) {
      return _a3 = {}, _a3[key] = object3[key], _a3;
    }
  }), false));
}

// node_modules/@segment/analytics-next/dist/pkg/core/page/add-page-context.js
var addPageContext = function(event3, pageCtx) {
  if (pageCtx === void 0) {
    pageCtx = getDefaultPageContext();
  }
  var evtCtx = event3.context;
  var pageContextFromEventProps;
  if (event3.type === "page") {
    pageContextFromEventProps = event3.properties && pick(event3.properties, Object.keys(pageCtx));
    event3.properties = __assign(__assign(__assign({}, pageCtx), event3.properties), event3.name ? { name: event3.name } : {});
  }
  evtCtx.page = __assign(__assign(__assign({}, pageCtx), pageContextFromEventProps), evtCtx.page);
};

// node_modules/@segment/analytics-next/dist/pkg/core/events/index.js
var EventFactory = (
  /** @class */
  function(_super) {
    __extends(EventFactory2, _super);
    function EventFactory2(user) {
      var _this = _super.call(this, {
        createMessageId: function() {
          return "ajs-next-".concat(Date.now(), "-").concat(v4());
        },
        onEventMethodCall: function(_a3) {
          var options3 = _a3.options;
          _this.maybeUpdateAnonId(options3);
        },
        onFinishedEvent: function(event3) {
          _this.addIdentity(event3);
          return event3;
        }
      }) || this;
      _this.user = user;
      return _this;
    }
    EventFactory2.prototype.maybeUpdateAnonId = function(options3) {
      (options3 === null || options3 === void 0 ? void 0 : options3.anonymousId) && this.user.anonymousId(options3.anonymousId);
    };
    EventFactory2.prototype.addIdentity = function(event3) {
      if (this.user.id()) {
        event3.userId = this.user.id();
      }
      if (this.user.anonymousId()) {
        event3.anonymousId = this.user.anonymousId();
      }
    };
    EventFactory2.prototype.track = function(event3, properties, options3, integrationsOptions, pageCtx) {
      var ev = _super.prototype.track.call(this, event3, properties, options3, integrationsOptions);
      addPageContext(ev, pageCtx);
      return ev;
    };
    EventFactory2.prototype.page = function(category, page, properties, options3, integrationsOptions, pageCtx) {
      var ev = _super.prototype.page.call(this, category, page, properties, options3, integrationsOptions);
      addPageContext(ev, pageCtx);
      return ev;
    };
    EventFactory2.prototype.screen = function(category, screen, properties, options3, integrationsOptions, pageCtx) {
      var ev = _super.prototype.screen.call(this, category, screen, properties, options3, integrationsOptions);
      addPageContext(ev, pageCtx);
      return ev;
    };
    EventFactory2.prototype.identify = function(userId, traits, options3, integrationsOptions, pageCtx) {
      var ev = _super.prototype.identify.call(this, userId, traits, options3, integrationsOptions);
      addPageContext(ev, pageCtx);
      return ev;
    };
    EventFactory2.prototype.group = function(groupId, traits, options3, integrationsOptions, pageCtx) {
      var ev = _super.prototype.group.call(this, groupId, traits, options3, integrationsOptions);
      addPageContext(ev, pageCtx);
      return ev;
    };
    EventFactory2.prototype.alias = function(to2, from, options3, integrationsOptions, pageCtx) {
      var ev = _super.prototype.alias.call(this, to2, from, options3, integrationsOptions);
      addPageContext(ev, pageCtx);
      return ev;
    };
    return EventFactory2;
  }(CoreEventFactory)
);

// node_modules/@segment/analytics-next/dist/pkg/core/plugin/index.js
var isDestinationPluginWithAddMiddleware = function(plugin) {
  return "addMiddleware" in plugin && plugin.type === "destination";
};

// node_modules/@segment/analytics-next/dist/pkg/core/queue/event-queue.js
var EventQueue = (
  /** @class */
  function(_super) {
    __extends(EventQueue2, _super);
    function EventQueue2(nameOrQueue) {
      return _super.call(this, typeof nameOrQueue === "string" ? new PersistedPriorityQueue(4, nameOrQueue) : nameOrQueue) || this;
    }
    EventQueue2.prototype.flush = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a3) {
          if (isOffline())
            return [2, []];
          return [2, _super.prototype.flush.call(this)];
        });
      });
    };
    return EventQueue2;
  }(CoreEventQueue)
);

// node_modules/@segment/analytics-next/dist/pkg/lib/bind-all.js
function bindAll(obj) {
  var proto = obj.constructor.prototype;
  for (var _i2 = 0, _a3 = Object.getOwnPropertyNames(proto); _i2 < _a3.length; _i2++) {
    var key = _a3[_i2];
    if (key !== "constructor") {
      var desc = Object.getOwnPropertyDescriptor(obj.constructor.prototype, key);
      if (!!desc && typeof desc.value === "function") {
        obj[key] = obj[key].bind(obj);
      }
    }
  }
  return obj;
}

// node_modules/js-cookie/dist/js.cookie.mjs
function assign5(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = arguments[i2];
    for (var key in source) {
      target[key] = source[key];
    }
  }
  return target;
}
var defaultConverter = {
  read: function(value) {
    if (value[0] === '"') {
      value = value.slice(1, -1);
    }
    return value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent);
  },
  write: function(value) {
    return encodeURIComponent(value).replace(
      /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,
      decodeURIComponent
    );
  }
};
function init(converter, defaultAttributes) {
  function set2(key, value, attributes) {
    if (typeof document === "undefined") {
      return;
    }
    attributes = assign5({}, defaultAttributes, attributes);
    if (typeof attributes.expires === "number") {
      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);
    }
    if (attributes.expires) {
      attributes.expires = attributes.expires.toUTCString();
    }
    key = encodeURIComponent(key).replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent).replace(/[()]/g, escape);
    var stringifiedAttributes = "";
    for (var attributeName in attributes) {
      if (!attributes[attributeName]) {
        continue;
      }
      stringifiedAttributes += "; " + attributeName;
      if (attributes[attributeName] === true) {
        continue;
      }
      stringifiedAttributes += "=" + attributes[attributeName].split(";")[0];
    }
    return document.cookie = key + "=" + converter.write(value, key) + stringifiedAttributes;
  }
  function get2(key) {
    if (typeof document === "undefined" || arguments.length && !key) {
      return;
    }
    var cookies = document.cookie ? document.cookie.split("; ") : [];
    var jar = {};
    for (var i2 = 0; i2 < cookies.length; i2++) {
      var parts = cookies[i2].split("=");
      var value = parts.slice(1).join("=");
      try {
        var foundKey = decodeURIComponent(parts[0]);
        jar[foundKey] = converter.read(value, foundKey);
        if (key === foundKey) {
          break;
        }
      } catch (e) {
      }
    }
    return key ? jar[key] : jar;
  }
  return Object.create(
    {
      set: set2,
      get: get2,
      remove: function(key, attributes) {
        set2(
          key,
          "",
          assign5({}, attributes, {
            expires: -1
          })
        );
      },
      withAttributes: function(attributes) {
        return init(this.converter, assign5({}, this.attributes, attributes));
      },
      withConverter: function(converter2) {
        return init(assign5({}, this.converter, converter2), this.attributes);
      }
    },
    {
      attributes: { value: Object.freeze(defaultAttributes) },
      converter: { value: Object.freeze(converter) }
    }
  );
}
var api2 = init(defaultConverter, { path: "/" });
var js_cookie_default = api2;

// node_modules/@segment/analytics-next/dist/pkg/core/user/tld.js
function levels(url) {
  var host = url.hostname;
  var parts = host.split(".");
  var last2 = parts[parts.length - 1];
  var levels2 = [];
  if (parts.length === 4 && parseInt(last2, 10) > 0) {
    return levels2;
  }
  if (parts.length <= 1) {
    return levels2;
  }
  for (var i2 = parts.length - 2; i2 >= 0; --i2) {
    levels2.push(parts.slice(i2).join("."));
  }
  return levels2;
}
function parseUrl(url) {
  try {
    return new URL(url);
  } catch (_a3) {
    return;
  }
}
function tld(url) {
  var parsedUrl = parseUrl(url);
  if (!parsedUrl)
    return;
  var lvls = levels(parsedUrl);
  for (var i2 = 0; i2 < lvls.length; ++i2) {
    var cname = "__tld__";
    var domain = lvls[i2];
    var opts = { domain: "." + domain };
    try {
      js_cookie_default.set(cname, "1", opts);
      if (js_cookie_default.get(cname)) {
        js_cookie_default.remove(cname, opts);
        return domain;
      }
    } catch (_2) {
      return;
    }
  }
}

// node_modules/@segment/analytics-next/dist/pkg/core/storage/cookieStorage.js
var ONE_YEAR = 365;
var CookieStorage = (
  /** @class */
  function() {
    function CookieStorage2(options3) {
      if (options3 === void 0) {
        options3 = CookieStorage2.defaults;
      }
      this.options = __assign(__assign({}, CookieStorage2.defaults), options3);
    }
    Object.defineProperty(CookieStorage2, "defaults", {
      get: function() {
        return {
          maxage: ONE_YEAR,
          domain: tld(window.location.href),
          path: "/",
          sameSite: "Lax"
        };
      },
      enumerable: false,
      configurable: true
    });
    CookieStorage2.prototype.opts = function() {
      return {
        sameSite: this.options.sameSite,
        expires: this.options.maxage,
        domain: this.options.domain,
        path: this.options.path,
        secure: this.options.secure
      };
    };
    CookieStorage2.prototype.get = function(key) {
      var _a3;
      try {
        var value = js_cookie_default.get(key);
        if (value === void 0 || value === null) {
          return null;
        }
        try {
          return (_a3 = JSON.parse(value)) !== null && _a3 !== void 0 ? _a3 : null;
        } catch (e) {
          return value !== null && value !== void 0 ? value : null;
        }
      } catch (e) {
        return null;
      }
    };
    CookieStorage2.prototype.set = function(key, value) {
      if (typeof value === "string") {
        js_cookie_default.set(key, value, this.opts());
      } else if (value === null) {
        js_cookie_default.remove(key, this.opts());
      } else {
        js_cookie_default.set(key, JSON.stringify(value), this.opts());
      }
    };
    CookieStorage2.prototype.remove = function(key) {
      return js_cookie_default.remove(key, this.opts());
    };
    return CookieStorage2;
  }()
);

// node_modules/@segment/analytics-next/dist/pkg/core/storage/localStorage.js
var LocalStorage = (
  /** @class */
  function() {
    function LocalStorage2() {
    }
    LocalStorage2.prototype.localStorageWarning = function(key, state) {
      console.warn("Unable to access ".concat(key, ", localStorage may be ").concat(state));
    };
    LocalStorage2.prototype.get = function(key) {
      var _a3;
      try {
        var val = localStorage.getItem(key);
        if (val === null) {
          return null;
        }
        try {
          return (_a3 = JSON.parse(val)) !== null && _a3 !== void 0 ? _a3 : null;
        } catch (e) {
          return val !== null && val !== void 0 ? val : null;
        }
      } catch (err) {
        this.localStorageWarning(key, "unavailable");
        return null;
      }
    };
    LocalStorage2.prototype.set = function(key, value) {
      try {
        localStorage.setItem(key, JSON.stringify(value));
      } catch (_a3) {
        this.localStorageWarning(key, "full");
      }
    };
    LocalStorage2.prototype.remove = function(key) {
      try {
        return localStorage.removeItem(key);
      } catch (err) {
        this.localStorageWarning(key, "unavailable");
      }
    };
    return LocalStorage2;
  }()
);

// node_modules/@segment/analytics-next/dist/pkg/core/storage/memoryStorage.js
var MemoryStorage = (
  /** @class */
  function() {
    function MemoryStorage2() {
      this.cache = {};
    }
    MemoryStorage2.prototype.get = function(key) {
      var _a3;
      return (_a3 = this.cache[key]) !== null && _a3 !== void 0 ? _a3 : null;
    };
    MemoryStorage2.prototype.set = function(key, value) {
      this.cache[key] = value;
    };
    MemoryStorage2.prototype.remove = function(key) {
      delete this.cache[key];
    };
    return MemoryStorage2;
  }()
);

// node_modules/@segment/analytics-next/dist/pkg/core/storage/types.js
var StoreType = {
  Cookie: "cookie",
  LocalStorage: "localStorage",
  Memory: "memory"
};

// node_modules/@segment/analytics-next/dist/pkg/core/storage/settings.js
function isArrayOfStoreType(s2) {
  return s2 && s2.stores && Array.isArray(s2.stores) && s2.stores.every(function(e) {
    return Object.values(StoreType).includes(e);
  });
}
function isStoreTypeWithSettings(s2) {
  return typeof s2 === "object" && s2.name !== void 0;
}

// node_modules/@segment/analytics-next/dist/pkg/core/storage/universalStorage.js
var _logStoreKeyError = function(store, action, key, err) {
  console.warn("".concat(store.constructor.name, ": Can't ").concat(action, ' key "').concat(key, '" | Err: ').concat(err));
};
var UniversalStorage = (
  /** @class */
  function() {
    function UniversalStorage2(stores) {
      this.stores = stores;
    }
    UniversalStorage2.prototype.get = function(key) {
      var val = null;
      for (var _i2 = 0, _a3 = this.stores; _i2 < _a3.length; _i2++) {
        var store = _a3[_i2];
        try {
          val = store.get(key);
          if (val !== void 0 && val !== null) {
            return val;
          }
        } catch (e) {
          _logStoreKeyError(store, "get", key, e);
        }
      }
      return null;
    };
    UniversalStorage2.prototype.set = function(key, value) {
      this.stores.forEach(function(store) {
        try {
          store.set(key, value);
        } catch (e) {
          _logStoreKeyError(store, "set", key, e);
        }
      });
    };
    UniversalStorage2.prototype.clear = function(key) {
      this.stores.forEach(function(store) {
        try {
          store.remove(key);
        } catch (e) {
          _logStoreKeyError(store, "remove", key, e);
        }
      });
    };
    UniversalStorage2.prototype.getAndSync = function(key) {
      var val = this.get(key);
      var coercedValue = typeof val === "number" ? val.toString() : val;
      this.set(key, coercedValue);
      return coercedValue;
    };
    return UniversalStorage2;
  }()
);

// node_modules/@segment/analytics-next/dist/pkg/core/storage/index.js
function initializeStorages(args) {
  var storages = args.map(function(s2) {
    var type2;
    var settings;
    if (isStoreTypeWithSettings(s2)) {
      type2 = s2.name;
      settings = s2.settings;
    } else {
      type2 = s2;
    }
    switch (type2) {
      case StoreType.Cookie:
        return new CookieStorage(settings);
      case StoreType.LocalStorage:
        return new LocalStorage();
      case StoreType.Memory:
        return new MemoryStorage();
      default:
        throw new Error("Unknown Store Type: ".concat(s2));
    }
  });
  return storages;
}
function applyCookieOptions(storeTypes, cookieOptions2) {
  return storeTypes.map(function(s2) {
    if (cookieOptions2 && s2 === StoreType.Cookie) {
      return {
        name: s2,
        settings: cookieOptions2
      };
    }
    return s2;
  });
}

// node_modules/@segment/analytics-next/dist/pkg/core/user/index.js
var defaults3 = {
  persist: true,
  cookie: {
    key: "ajs_user_id",
    oldKey: "ajs_user"
  },
  localStorage: {
    key: "ajs_user_traits"
  }
};
var User = (
  /** @class */
  function() {
    function User2(options3, cookieOptions2) {
      if (options3 === void 0) {
        options3 = defaults3;
      }
      var _this = this;
      var _a3, _b2, _c2, _d;
      this.options = {};
      this.id = function(id2) {
        if (_this.options.disable) {
          return null;
        }
        var prevId = _this.identityStore.getAndSync(_this.idKey);
        if (id2 !== void 0) {
          _this.identityStore.set(_this.idKey, id2);
          var changingIdentity = id2 !== prevId && prevId !== null && id2 !== null;
          if (changingIdentity) {
            _this.anonymousId(null);
          }
        }
        var retId = _this.identityStore.getAndSync(_this.idKey);
        if (retId)
          return retId;
        var retLeg = _this.legacyUserStore.get(defaults3.cookie.oldKey);
        return retLeg ? typeof retLeg === "object" ? retLeg.id : retLeg : null;
      };
      this.anonymousId = function(id2) {
        var _a4, _b3;
        if (_this.options.disable) {
          return null;
        }
        if (id2 === void 0) {
          var val = (_a4 = _this.identityStore.getAndSync(_this.anonKey)) !== null && _a4 !== void 0 ? _a4 : (_b3 = _this.legacySIO()) === null || _b3 === void 0 ? void 0 : _b3[0];
          if (val) {
            return val;
          }
        }
        if (id2 === null) {
          _this.identityStore.set(_this.anonKey, null);
          return _this.identityStore.getAndSync(_this.anonKey);
        }
        _this.identityStore.set(_this.anonKey, id2 !== null && id2 !== void 0 ? id2 : v4());
        return _this.identityStore.getAndSync(_this.anonKey);
      };
      this.traits = function(traits) {
        var _a4;
        if (_this.options.disable) {
          return;
        }
        if (traits === null) {
          traits = {};
        }
        if (traits) {
          _this.traitsStore.set(_this.traitsKey, traits !== null && traits !== void 0 ? traits : {});
        }
        return (_a4 = _this.traitsStore.get(_this.traitsKey)) !== null && _a4 !== void 0 ? _a4 : {};
      };
      this.options = __assign(__assign({}, defaults3), options3);
      this.cookieOptions = cookieOptions2;
      this.idKey = (_b2 = (_a3 = options3.cookie) === null || _a3 === void 0 ? void 0 : _a3.key) !== null && _b2 !== void 0 ? _b2 : defaults3.cookie.key;
      this.traitsKey = (_d = (_c2 = options3.localStorage) === null || _c2 === void 0 ? void 0 : _c2.key) !== null && _d !== void 0 ? _d : defaults3.localStorage.key;
      this.anonKey = "ajs_anonymous_id";
      this.identityStore = this.createStorage(this.options, cookieOptions2);
      this.legacyUserStore = this.createStorage(this.options, cookieOptions2, function(s2) {
        return s2 === StoreType.Cookie;
      });
      this.traitsStore = this.createStorage(this.options, cookieOptions2, function(s2) {
        return s2 !== StoreType.Cookie;
      });
      var legacyUser = this.legacyUserStore.get(defaults3.cookie.oldKey);
      if (legacyUser && typeof legacyUser === "object") {
        legacyUser.id && this.id(legacyUser.id);
        legacyUser.traits && this.traits(legacyUser.traits);
      }
      bindAll(this);
    }
    User2.prototype.legacySIO = function() {
      var val = this.legacyUserStore.get("_sio");
      if (!val) {
        return null;
      }
      var _a3 = val.split("----"), anon = _a3[0], user = _a3[1];
      return [anon, user];
    };
    User2.prototype.identify = function(id2, traits) {
      if (this.options.disable) {
        return;
      }
      traits = traits !== null && traits !== void 0 ? traits : {};
      var currentId = this.id();
      if (currentId === null || currentId === id2) {
        traits = __assign(__assign({}, this.traits()), traits);
      }
      if (id2) {
        this.id(id2);
      }
      this.traits(traits);
    };
    User2.prototype.logout = function() {
      this.anonymousId(null);
      this.id(null);
      this.traits({});
    };
    User2.prototype.reset = function() {
      this.logout();
      this.identityStore.clear(this.idKey);
      this.identityStore.clear(this.anonKey);
      this.traitsStore.clear(this.traitsKey);
    };
    User2.prototype.load = function() {
      return new User2(this.options, this.cookieOptions);
    };
    User2.prototype.save = function() {
      return true;
    };
    User2.prototype.createStorage = function(options3, cookieOpts, filterStores) {
      var stores = [
        StoreType.LocalStorage,
        StoreType.Cookie,
        StoreType.Memory
      ];
      if (options3.disable) {
        return new UniversalStorage([]);
      }
      if (!options3.persist) {
        return new UniversalStorage([new MemoryStorage()]);
      }
      if (options3.storage !== void 0 && options3.storage !== null) {
        if (isArrayOfStoreType(options3.storage)) {
          stores = options3.storage.stores;
        }
      }
      if (options3.localStorageFallbackDisabled) {
        stores = stores.filter(function(s2) {
          return s2 !== StoreType.LocalStorage;
        });
      }
      if (filterStores) {
        stores = stores.filter(filterStores);
      }
      return new UniversalStorage(initializeStorages(applyCookieOptions(stores, cookieOpts)));
    };
    User2.defaults = defaults3;
    return User2;
  }()
);
var groupDefaults = {
  persist: true,
  cookie: {
    key: "ajs_group_id"
  },
  localStorage: {
    key: "ajs_group_properties"
  }
};
var Group = (
  /** @class */
  function(_super) {
    __extends(Group2, _super);
    function Group2(options3, cookie) {
      if (options3 === void 0) {
        options3 = groupDefaults;
      }
      var _this = _super.call(this, __assign(__assign({}, groupDefaults), options3), cookie) || this;
      _this.anonymousId = function(_id) {
        return void 0;
      };
      bindAll(_this);
      return _this;
    }
    return Group2;
  }(User)
);

// node_modules/@segment/analytics-next/dist/pkg/lib/is-thenable.js
var isThenable = function(value) {
  return typeof value === "object" && value !== null && "then" in value && typeof value.then === "function";
};

// node_modules/@segment/analytics-next/dist/pkg/core/buffer/index.js
var flushSyncAnalyticsCalls = function(name, analytics, buffer) {
  buffer.getAndRemove(name).forEach(function(c2) {
    callAnalyticsMethod(analytics, c2).catch(console.error);
  });
};
var flushAddSourceMiddleware = function(analytics, buffer) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _i2, _a3, c2;
    return __generator(this, function(_b2) {
      switch (_b2.label) {
        case 0:
          _i2 = 0, _a3 = buffer.getAndRemove("addSourceMiddleware");
          _b2.label = 1;
        case 1:
          if (!(_i2 < _a3.length)) return [3, 4];
          c2 = _a3[_i2];
          return [4, callAnalyticsMethod(analytics, c2).catch(console.error)];
        case 2:
          _b2.sent();
          _b2.label = 3;
        case 3:
          _i2++;
          return [3, 1];
        case 4:
          return [
            2
            /*return*/
          ];
      }
    });
  });
};
var flushRegister = function(analytics, buffer) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _i2, _a3, c2;
    return __generator(this, function(_b2) {
      switch (_b2.label) {
        case 0:
          _i2 = 0, _a3 = buffer.getAndRemove("register");
          _b2.label = 1;
        case 1:
          if (!(_i2 < _a3.length)) return [3, 4];
          c2 = _a3[_i2];
          return [4, callAnalyticsMethod(analytics, c2).catch(console.error)];
        case 2:
          _b2.sent();
          _b2.label = 3;
        case 3:
          _i2++;
          return [3, 1];
        case 4:
          return [
            2
            /*return*/
          ];
      }
    });
  });
};
var flushOn = flushSyncAnalyticsCalls.bind(void 0, "on");
var flushSetAnonymousID = flushSyncAnalyticsCalls.bind(void 0, "setAnonymousId");
var flushAnalyticsCallsInNewTask = function(analytics, buffer) {
  ;
  Object.keys(buffer.calls).forEach(function(m2) {
    buffer.getAndRemove(m2).forEach(function(c2) {
      setTimeout(function() {
        callAnalyticsMethod(analytics, c2).catch(console.error);
      }, 0);
    });
  });
};
var popPageContext = function(args) {
  if (hasBufferedPageContextAsLastArg(args)) {
    var ctx = args.pop();
    return createPageContext(ctx);
  }
};
var hasBufferedPageContextAsLastArg = function(args) {
  var lastArg = args[args.length - 1];
  return isBufferedPageContext(lastArg);
};
var PreInitMethodCall = (
  /** @class */
  /* @__PURE__ */ function() {
    function PreInitMethodCall2(method, args, resolve2, reject2) {
      if (resolve2 === void 0) {
        resolve2 = function() {
        };
      }
      if (reject2 === void 0) {
        reject2 = console.error;
      }
      this.method = method;
      this.resolve = resolve2;
      this.reject = reject2;
      this.called = false;
      this.args = args;
    }
    return PreInitMethodCall2;
  }()
);
var PreInitMethodCallBuffer = (
  /** @class */
  function() {
    function PreInitMethodCallBuffer2() {
      var calls = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        calls[_i2] = arguments[_i2];
      }
      this._callMap = {};
      this.add.apply(this, calls);
    }
    Object.defineProperty(PreInitMethodCallBuffer2.prototype, "calls", {
      /**
       * Pull any buffered method calls from the window object, and use them to hydrate the instance buffer.
       */
      get: function() {
        this._pushSnippetWindowBuffer();
        return this._callMap;
      },
      set: function(calls) {
        this._callMap = calls;
      },
      enumerable: false,
      configurable: true
    });
    PreInitMethodCallBuffer2.prototype.get = function(methodName) {
      var _a3;
      return (_a3 = this.calls[methodName]) !== null && _a3 !== void 0 ? _a3 : [];
    };
    PreInitMethodCallBuffer2.prototype.getAndRemove = function(methodName) {
      var calls = this.get(methodName);
      this.calls[methodName] = [];
      return calls;
    };
    PreInitMethodCallBuffer2.prototype.add = function() {
      var _this = this;
      var calls = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        calls[_i2] = arguments[_i2];
      }
      calls.forEach(function(call) {
        var eventsExpectingPageContext = [
          "track",
          "screen",
          "alias",
          "group",
          "page",
          "identify"
        ];
        if (eventsExpectingPageContext.includes(call.method) && !hasBufferedPageContextAsLastArg(call.args)) {
          call.args = __spreadArray(__spreadArray([], call.args, true), [getDefaultBufferedPageContext()], false);
        }
        if (_this.calls[call.method]) {
          _this.calls[call.method].push(call);
        } else {
          _this.calls[call.method] = [call];
        }
      });
    };
    PreInitMethodCallBuffer2.prototype.clear = function() {
      this._pushSnippetWindowBuffer();
      this.calls = {};
    };
    PreInitMethodCallBuffer2.prototype.toArray = function() {
      var _a3;
      return (_a3 = []).concat.apply(_a3, Object.values(this.calls));
    };
    PreInitMethodCallBuffer2.prototype._pushSnippetWindowBuffer = function() {
      if (getVersionType() === "npm") {
        return void 0;
      }
      var wa2 = getGlobalAnalytics();
      if (!Array.isArray(wa2))
        return void 0;
      var buffered = wa2.splice(0, wa2.length);
      var calls = buffered.map(function(_a3) {
        var methodName = _a3[0], args = _a3.slice(1);
        return new PreInitMethodCall(methodName, args);
      });
      this.add.apply(this, calls);
    };
    return PreInitMethodCallBuffer2;
  }()
);
function callAnalyticsMethod(analytics, call) {
  return __awaiter(this, void 0, void 0, function() {
    var result, err_1;
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          _a3.trys.push([0, 3, , 4]);
          if (call.called) {
            return [2, void 0];
          }
          call.called = true;
          result = analytics[call.method].apply(analytics, call.args);
          if (!isThenable(result)) return [3, 2];
          return [4, result];
        case 1:
          _a3.sent();
          _a3.label = 2;
        case 2:
          call.resolve(result);
          return [3, 4];
        case 3:
          err_1 = _a3.sent();
          call.reject(err_1);
          return [3, 4];
        case 4:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
var AnalyticsBuffered = (
  /** @class */
  function() {
    function AnalyticsBuffered2(loader) {
      var _this = this;
      this.trackSubmit = this._createMethod("trackSubmit");
      this.trackClick = this._createMethod("trackClick");
      this.trackLink = this._createMethod("trackLink");
      this.pageView = this._createMethod("pageview");
      this.identify = this._createMethod("identify");
      this.reset = this._createMethod("reset");
      this.group = this._createMethod("group");
      this.track = this._createMethod("track");
      this.ready = this._createMethod("ready");
      this.alias = this._createMethod("alias");
      this.debug = this._createChainableMethod("debug");
      this.page = this._createMethod("page");
      this.once = this._createChainableMethod("once");
      this.off = this._createChainableMethod("off");
      this.on = this._createChainableMethod("on");
      this.addSourceMiddleware = this._createMethod("addSourceMiddleware");
      this.setAnonymousId = this._createMethod("setAnonymousId");
      this.addDestinationMiddleware = this._createMethod("addDestinationMiddleware");
      this.screen = this._createMethod("screen");
      this.register = this._createMethod("register");
      this.deregister = this._createMethod("deregister");
      this.user = this._createMethod("user");
      this.VERSION = version;
      this._preInitBuffer = new PreInitMethodCallBuffer();
      this._promise = loader(this._preInitBuffer);
      this._promise.then(function(_a3) {
        var ajs = _a3[0], ctx = _a3[1];
        _this.instance = ajs;
        _this.ctx = ctx;
      }).catch(function() {
      });
    }
    AnalyticsBuffered2.prototype.then = function() {
      var _a3;
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return (_a3 = this._promise).then.apply(_a3, args);
    };
    AnalyticsBuffered2.prototype.catch = function() {
      var _a3;
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return (_a3 = this._promise).catch.apply(_a3, args);
    };
    AnalyticsBuffered2.prototype.finally = function() {
      var _a3;
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return (_a3 = this._promise).finally.apply(_a3, args);
    };
    AnalyticsBuffered2.prototype._createMethod = function(methodName) {
      var _this = this;
      return function() {
        var _a3;
        var args = [];
        for (var _i2 = 0; _i2 < arguments.length; _i2++) {
          args[_i2] = arguments[_i2];
        }
        if (_this.instance) {
          var result = (_a3 = _this.instance)[methodName].apply(_a3, args);
          return Promise.resolve(result);
        }
        return new Promise(function(resolve2, reject2) {
          _this._preInitBuffer.add(new PreInitMethodCall(methodName, args, resolve2, reject2));
        });
      };
    };
    AnalyticsBuffered2.prototype._createChainableMethod = function(methodName) {
      var _this = this;
      return function() {
        var _a3;
        var args = [];
        for (var _i2 = 0; _i2 < arguments.length; _i2++) {
          args[_i2] = arguments[_i2];
        }
        if (_this.instance) {
          void (_a3 = _this.instance)[methodName].apply(_a3, args);
          return _this;
        } else {
          _this._preInitBuffer.add(new PreInitMethodCall(methodName, args));
        }
        return _this;
      };
    };
    return AnalyticsBuffered2;
  }()
);

// node_modules/@segment/analytics-next/dist/pkg/lib/on-page-change.js
var onPageChange = function(cb) {
  var unloaded = false;
  window.addEventListener("pagehide", function() {
    if (unloaded)
      return;
    unloaded = true;
    cb(unloaded);
  });
  document.addEventListener("visibilitychange", function() {
    if (document.visibilityState == "hidden") {
      if (unloaded)
        return;
      unloaded = true;
    } else {
      unloaded = false;
    }
    cb(unloaded);
  });
};

// node_modules/@segment/analytics-next/dist/pkg/plugins/segmentio/ratelimit-error.js
var RateLimitError = (
  /** @class */
  function(_super) {
    __extends(RateLimitError2, _super);
    function RateLimitError2(message, retryTimeout) {
      var _this = _super.call(this, message) || this;
      _this.retryTimeout = retryTimeout;
      _this.name = "RateLimitError";
      return _this;
    }
    return RateLimitError2;
  }(Error)
);

// node_modules/@segment/analytics-next/dist/pkg/plugins/segmentio/shared-dispatcher.js
var createHeaders = function(headerSettings) {
  return __assign({ "Content-Type": "text/plain" }, typeof headerSettings === "function" ? headerSettings() : headerSettings);
};

// node_modules/@segment/analytics-next/dist/pkg/plugins/segmentio/batched-dispatcher.js
var MAX_PAYLOAD_SIZE = 500;
var MAX_KEEPALIVE_SIZE = 64;
function kilobytes(buffer) {
  var size3 = encodeURI(JSON.stringify(buffer)).split(/%..|./).length - 1;
  return size3 / 1024;
}
function approachingTrackingAPILimit(buffer) {
  return kilobytes(buffer) >= MAX_PAYLOAD_SIZE - 50;
}
function passedKeepaliveLimit(buffer) {
  return kilobytes(buffer) >= MAX_KEEPALIVE_SIZE - 10;
}
function chunks(batch3) {
  var result = [];
  var index = 0;
  batch3.forEach(function(item) {
    var size3 = kilobytes(result[index]);
    if (size3 >= 64) {
      index++;
    }
    if (result[index]) {
      result[index].push(item);
    } else {
      result[index] = [item];
    }
  });
  return result;
}
function batch2(apiHost, config) {
  var _a3, _b2;
  var buffer = [];
  var pageUnloaded = false;
  var limit2 = (_a3 = config === null || config === void 0 ? void 0 : config.size) !== null && _a3 !== void 0 ? _a3 : 10;
  var timeout = (_b2 = config === null || config === void 0 ? void 0 : config.timeout) !== null && _b2 !== void 0 ? _b2 : 5e3;
  var rateLimitTimeout = 0;
  function sendBatch(batch3) {
    var _a4;
    if (batch3.length === 0) {
      return;
    }
    var writeKey = (_a4 = batch3[0]) === null || _a4 === void 0 ? void 0 : _a4.writeKey;
    var updatedBatch = batch3.map(function(event3) {
      var _a5 = event3, sentAt = _a5.sentAt, newEvent = __rest(_a5, ["sentAt"]);
      return newEvent;
    });
    return fetch("https://".concat(apiHost, "/b"), {
      credentials: config === null || config === void 0 ? void 0 : config.credentials,
      keepalive: (config === null || config === void 0 ? void 0 : config.keepalive) || pageUnloaded,
      headers: createHeaders(config === null || config === void 0 ? void 0 : config.headers),
      method: "post",
      body: JSON.stringify({
        writeKey,
        batch: updatedBatch,
        sentAt: (/* @__PURE__ */ new Date()).toISOString()
      }),
      // @ts-ignore - not in the ts lib yet
      priority: config === null || config === void 0 ? void 0 : config.priority
    }).then(function(res) {
      var _a5;
      if (res.status >= 500) {
        throw new Error("Bad response from server: ".concat(res.status));
      }
      if (res.status === 429) {
        var retryTimeoutStringSecs = (_a5 = res.headers) === null || _a5 === void 0 ? void 0 : _a5.get("x-ratelimit-reset");
        var retryTimeoutMS = typeof retryTimeoutStringSecs == "string" ? parseInt(retryTimeoutStringSecs) * 1e3 : timeout;
        throw new RateLimitError("Rate limit exceeded: ".concat(res.status), retryTimeoutMS);
      }
    });
  }
  function flush(attempt2) {
    var _a4;
    if (attempt2 === void 0) {
      attempt2 = 1;
    }
    return __awaiter(this, void 0, void 0, function() {
      var batch_1;
      return __generator(this, function(_b3) {
        if (buffer.length) {
          batch_1 = buffer;
          buffer = [];
          return [2, (_a4 = sendBatch(batch_1)) === null || _a4 === void 0 ? void 0 : _a4.catch(function(error3) {
            var _a5;
            var ctx = Context.system();
            ctx.log("error", "Error sending batch", error3);
            if (attempt2 <= ((_a5 = config === null || config === void 0 ? void 0 : config.maxRetries) !== null && _a5 !== void 0 ? _a5 : 10)) {
              if (error3.name === "RateLimitError") {
                rateLimitTimeout = error3.retryTimeout;
              }
              buffer.push.apply(buffer, batch_1);
              buffer.map(function(event3) {
                if ("_metadata" in event3) {
                  var segmentEvent = event3;
                  segmentEvent._metadata = __assign(__assign({}, segmentEvent._metadata), { retryCount: attempt2 });
                }
              });
              scheduleFlush2(attempt2 + 1);
            }
          })];
        }
        return [
          2
          /*return*/
        ];
      });
    });
  }
  var schedule;
  function scheduleFlush2(attempt2) {
    if (attempt2 === void 0) {
      attempt2 = 1;
    }
    if (schedule) {
      return;
    }
    schedule = setTimeout(function() {
      schedule = void 0;
      flush(attempt2).catch(console.error);
    }, rateLimitTimeout ? rateLimitTimeout : timeout);
    rateLimitTimeout = 0;
  }
  onPageChange(function(unloaded) {
    pageUnloaded = unloaded;
    if (pageUnloaded && buffer.length) {
      var reqs = chunks(buffer).map(sendBatch);
      Promise.all(reqs).catch(console.error);
    }
  });
  function dispatch2(_url, body) {
    return __awaiter(this, void 0, void 0, function() {
      var bufferOverflow;
      return __generator(this, function(_a4) {
        buffer.push(body);
        bufferOverflow = buffer.length >= limit2 || approachingTrackingAPILimit(buffer) || (config === null || config === void 0 ? void 0 : config.keepalive) && passedKeepaliveLimit(buffer);
        return [2, bufferOverflow || pageUnloaded ? flush() : scheduleFlush2()];
      });
    });
  }
  return {
    dispatch: dispatch2
  };
}

// node_modules/@segment/analytics-next/dist/pkg/plugins/segmentio/fetch-dispatcher.js
function fetch_dispatcher_default(config) {
  function dispatch2(url, body) {
    return fetch(url, {
      credentials: config === null || config === void 0 ? void 0 : config.credentials,
      keepalive: config === null || config === void 0 ? void 0 : config.keepalive,
      headers: createHeaders(config === null || config === void 0 ? void 0 : config.headers),
      method: "post",
      body: JSON.stringify(body),
      // @ts-ignore - not in the ts lib yet
      priority: config === null || config === void 0 ? void 0 : config.priority
    }).then(function(res) {
      var _a3;
      if (res.status >= 500) {
        throw new Error("Bad response from server: ".concat(res.status));
      }
      if (res.status === 429) {
        var retryTimeoutStringSecs = (_a3 = res.headers) === null || _a3 === void 0 ? void 0 : _a3.get("x-ratelimit-reset");
        var retryTimeoutMS = retryTimeoutStringSecs ? parseInt(retryTimeoutStringSecs) * 1e3 : 5e3;
        throw new RateLimitError("Rate limit exceeded: ".concat(res.status), retryTimeoutMS);
      }
    });
  }
  return {
    dispatch: dispatch2
  };
}

// node_modules/@segment/analytics-next/dist/pkg/plugins/segmentio/normalize.js
function normalize3(analytics, json2, settings, integrations, ctx) {
  var _a3;
  var user = analytics.user();
  delete json2.options;
  json2.writeKey = settings === null || settings === void 0 ? void 0 : settings.apiKey;
  json2.userId = json2.userId || user.id();
  json2.anonymousId = json2.anonymousId || user.anonymousId();
  json2.sentAt = /* @__PURE__ */ new Date();
  var failed = analytics.queue.failedInitializations || [];
  if (failed.length > 0) {
    json2._metadata = { failedInitializations: failed };
  }
  if (ctx != null) {
    if (ctx.attempts > 1) {
      json2._metadata = __assign(__assign({}, json2._metadata), { retryCount: ctx.attempts });
    }
    ctx.attempts++;
  }
  var bundled = [];
  var unbundled = [];
  for (var key in integrations) {
    var integration = integrations[key];
    if (key === "Segment.io") {
      bundled.push(key);
    }
    if (integration.bundlingStatus === "bundled") {
      bundled.push(key);
    }
    if (integration.bundlingStatus === "unbundled") {
      unbundled.push(key);
    }
  }
  for (var _i2 = 0, _b2 = (settings === null || settings === void 0 ? void 0 : settings.unbundledIntegrations) || []; _i2 < _b2.length; _i2++) {
    var settingsUnbundled = _b2[_i2];
    if (!unbundled.includes(settingsUnbundled)) {
      unbundled.push(settingsUnbundled);
    }
  }
  var configIds = (_a3 = settings === null || settings === void 0 ? void 0 : settings.maybeBundledConfigIds) !== null && _a3 !== void 0 ? _a3 : {};
  var bundledConfigIds = [];
  bundled.sort().forEach(function(name) {
    var _a4;
    ;
    ((_a4 = configIds[name]) !== null && _a4 !== void 0 ? _a4 : []).forEach(function(id2) {
      bundledConfigIds.push(id2);
    });
  });
  if ((settings === null || settings === void 0 ? void 0 : settings.addBundledMetadata) !== false) {
    json2._metadata = __assign(__assign({}, json2._metadata), { bundled: bundled.sort(), unbundled: unbundled.sort(), bundledIds: bundledConfigIds });
  }
  return json2;
}

// node_modules/@segment/analytics-next/dist/pkg/plugins/segmentio/schedule-flush.js
function flushQueue(xt2, queue) {
  return __awaiter(this, void 0, void 0, function() {
    var failedQueue;
    var _this = this;
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          failedQueue = [];
          if (isOffline()) {
            return [2, queue];
          }
          return [
            4,
            pWhile(function() {
              return queue.length > 0 && !isOffline();
            }, function() {
              return __awaiter(_this, void 0, void 0, function() {
                var ctx, result, success;
                return __generator(this, function(_a4) {
                  switch (_a4.label) {
                    case 0:
                      ctx = queue.pop();
                      if (!ctx) {
                        return [
                          2
                          /*return*/
                        ];
                      }
                      return [4, attempt(ctx, xt2)];
                    case 1:
                      result = _a4.sent();
                      success = result instanceof Context;
                      if (!success) {
                        failedQueue.push(ctx);
                      }
                      return [
                        2
                        /*return*/
                      ];
                  }
                });
              });
            })
            // re-add failed tasks
          ];
        case 1:
          _a3.sent();
          failedQueue.map(function(failed) {
            return queue.pushWithBackoff(failed);
          });
          return [2, queue];
      }
    });
  });
}
function scheduleFlush(flushing, buffer, xt2, scheduleFlush2) {
  var _this = this;
  if (flushing) {
    return;
  }
  setTimeout(function() {
    return __awaiter(_this, void 0, void 0, function() {
      var isFlushing, newBuffer;
      return __generator(this, function(_a3) {
        switch (_a3.label) {
          case 0:
            isFlushing = true;
            return [4, flushQueue(xt2, buffer)];
          case 1:
            newBuffer = _a3.sent();
            isFlushing = false;
            if (buffer.todo > 0) {
              scheduleFlush2(isFlushing, newBuffer, xt2, scheduleFlush2);
            }
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, Math.random() * 5e3);
}

// node_modules/@segment/analytics-next/dist/pkg/plugins/segmentio/index.js
function onAlias(analytics, json2) {
  var _a3, _b2, _c2, _d;
  var user = analytics.user();
  json2.previousId = (_c2 = (_b2 = (_a3 = json2.previousId) !== null && _a3 !== void 0 ? _a3 : json2.from) !== null && _b2 !== void 0 ? _b2 : user.id()) !== null && _c2 !== void 0 ? _c2 : user.anonymousId();
  json2.userId = (_d = json2.userId) !== null && _d !== void 0 ? _d : json2.to;
  delete json2.from;
  delete json2.to;
  return json2;
}
var isSegmentPlugin = function(plugin) {
  return plugin.name === "Segment.io";
};
function segmentio(analytics, settings, integrations) {
  var _a3, _b2, _c2;
  window.addEventListener("pagehide", function() {
    buffer.push.apply(buffer, Array.from(inflightEvents));
    inflightEvents.clear();
  });
  var writeKey = (_a3 = settings === null || settings === void 0 ? void 0 : settings.apiKey) !== null && _a3 !== void 0 ? _a3 : "";
  var buffer = analytics.options.disableClientPersistence ? new PriorityQueue(analytics.queue.queue.maxAttempts, []) : new PersistedPriorityQueue(analytics.queue.queue.maxAttempts, "".concat(writeKey, ":dest-Segment.io"));
  var inflightEvents = /* @__PURE__ */ new Set();
  var flushing = false;
  var apiHost = (_b2 = settings === null || settings === void 0 ? void 0 : settings.apiHost) !== null && _b2 !== void 0 ? _b2 : SEGMENT_API_HOST;
  var protocol = (_c2 = settings === null || settings === void 0 ? void 0 : settings.protocol) !== null && _c2 !== void 0 ? _c2 : "https";
  var remote = "".concat(protocol, "://").concat(apiHost);
  var deliveryStrategy = settings === null || settings === void 0 ? void 0 : settings.deliveryStrategy;
  var client = deliveryStrategy && "strategy" in deliveryStrategy && deliveryStrategy.strategy === "batching" ? batch2(apiHost, deliveryStrategy.config) : fetch_dispatcher_default(deliveryStrategy === null || deliveryStrategy === void 0 ? void 0 : deliveryStrategy.config);
  function send(ctx) {
    return __awaiter(this, void 0, void 0, function() {
      var path, json2;
      return __generator(this, function(_a4) {
        if (isOffline()) {
          buffer.push(ctx);
          scheduleFlush(flushing, buffer, segmentio2, scheduleFlush);
          return [2, ctx];
        }
        inflightEvents.add(ctx);
        path = ctx.event.type.charAt(0);
        json2 = toFacade(ctx.event).json();
        if (ctx.event.type === "track") {
          delete json2.traits;
        }
        if (ctx.event.type === "alias") {
          json2 = onAlias(analytics, json2);
        }
        if (buffer.getAttempts(ctx) >= buffer.maxAttempts) {
          inflightEvents.delete(ctx);
          return [2, ctx];
        }
        return [2, client.dispatch("".concat(remote, "/").concat(path), normalize3(analytics, json2, settings, integrations, ctx)).then(function() {
          return ctx;
        }).catch(function(error3) {
          ctx.log("error", "Error sending event", error3);
          if (error3.name === "RateLimitError") {
            var timeout = error3.retryTimeout;
            buffer.pushWithBackoff(ctx, timeout);
          } else {
            buffer.pushWithBackoff(ctx);
          }
          scheduleFlush(flushing, buffer, segmentio2, scheduleFlush);
          return ctx;
        }).finally(function() {
          inflightEvents.delete(ctx);
        })];
      });
    });
  }
  var segmentio2 = {
    metadata: {
      writeKey,
      apiHost,
      protocol
    },
    name: "Segment.io",
    type: "destination",
    version: "0.1.0",
    isLoaded: function() {
      return true;
    },
    load: function() {
      return Promise.resolve();
    },
    track: send,
    identify: send,
    page: send,
    alias: send,
    group: send,
    screen: send
  };
  if (buffer.todo) {
    scheduleFlush(flushing, buffer, segmentio2, scheduleFlush);
  }
  return segmentio2;
}

// node_modules/@segment/analytics-next/dist/pkg/core/analytics/index.js
var deprecationWarning = "This is being deprecated and will be not be available in future releases of Analytics JS";
var global2 = getGlobal();
var _analytics = global2 === null || global2 === void 0 ? void 0 : global2.analytics;
function createDefaultQueue(name, retryQueue, disablePersistance) {
  if (retryQueue === void 0) {
    retryQueue = false;
  }
  if (disablePersistance === void 0) {
    disablePersistance = false;
  }
  var maxAttempts = retryQueue ? 10 : 1;
  var priorityQueue = disablePersistance ? new PriorityQueue(maxAttempts, []) : new PersistedPriorityQueue(maxAttempts, name);
  return new EventQueue(priorityQueue);
}
var AnalyticsInstanceSettings = (
  /** @class */
  function() {
    function AnalyticsInstanceSettings2(settings, queue) {
      var _a3;
      this.timeout = 300;
      this._getSegmentPluginMetadata = function() {
        var _a4;
        return (_a4 = queue.plugins.find(isSegmentPlugin)) === null || _a4 === void 0 ? void 0 : _a4.metadata;
      };
      this.writeKey = settings.writeKey;
      var emptyCDNSettings = {
        integrations: {
          "Segment.io": {
            apiKey: ""
          }
        }
      };
      this.cdnSettings = (_a3 = settings.cdnSettings) !== null && _a3 !== void 0 ? _a3 : emptyCDNSettings;
      this.cdnURL = settings.cdnURL;
    }
    Object.defineProperty(AnalyticsInstanceSettings2.prototype, "apiHost", {
      get: function() {
        var _a3, _b2;
        return (_b2 = (_a3 = this._getSegmentPluginMetadata) === null || _a3 === void 0 ? void 0 : _a3.call(this)) === null || _b2 === void 0 ? void 0 : _b2.apiHost;
      },
      enumerable: false,
      configurable: true
    });
    return AnalyticsInstanceSettings2;
  }()
);
function _stub() {
  console.warn(deprecationWarning);
}
var Analytics = (
  /** @class */
  function(_super) {
    __extends(Analytics2, _super);
    function Analytics2(settings, options3, queue, user, group2) {
      var _this = this;
      var _a3, _b2;
      _this = _super.call(this) || this;
      _this._debug = false;
      _this.initialized = false;
      _this.user = function() {
        return _this._user;
      };
      _this.init = _this.initialize.bind(_this);
      _this.log = _stub;
      _this.addIntegrationMiddleware = _stub;
      _this.listeners = _stub;
      _this.addEventListener = _stub;
      _this.removeAllListeners = _stub;
      _this.removeListener = _stub;
      _this.removeEventListener = _stub;
      _this.hasListeners = _stub;
      _this.add = _stub;
      _this.addIntegration = _stub;
      var cookieOptions2 = options3 === null || options3 === void 0 ? void 0 : options3.cookie;
      var disablePersistance = (_a3 = options3 === null || options3 === void 0 ? void 0 : options3.disableClientPersistence) !== null && _a3 !== void 0 ? _a3 : false;
      _this.queue = queue !== null && queue !== void 0 ? queue : createDefaultQueue("".concat(settings.writeKey, ":event-queue"), options3 === null || options3 === void 0 ? void 0 : options3.retryQueue, disablePersistance);
      _this.settings = new AnalyticsInstanceSettings(settings, _this.queue);
      var storageSetting = options3 === null || options3 === void 0 ? void 0 : options3.storage;
      _this._universalStorage = _this.createStore(disablePersistance, storageSetting, cookieOptions2);
      _this._user = user !== null && user !== void 0 ? user : new User(__assign({ persist: !disablePersistance, storage: options3 === null || options3 === void 0 ? void 0 : options3.storage }, options3 === null || options3 === void 0 ? void 0 : options3.user), cookieOptions2).load();
      _this._group = group2 !== null && group2 !== void 0 ? group2 : new Group(__assign({ persist: !disablePersistance, storage: options3 === null || options3 === void 0 ? void 0 : options3.storage }, options3 === null || options3 === void 0 ? void 0 : options3.group), cookieOptions2).load();
      _this.eventFactory = new EventFactory(_this._user);
      _this.integrations = (_b2 = options3 === null || options3 === void 0 ? void 0 : options3.integrations) !== null && _b2 !== void 0 ? _b2 : {};
      _this.options = options3 !== null && options3 !== void 0 ? options3 : {};
      bindAll(_this);
      return _this;
    }
    Analytics2.prototype.createStore = function(disablePersistance, storageSetting, cookieOptions2) {
      if (disablePersistance) {
        return new UniversalStorage([new MemoryStorage()]);
      } else {
        if (storageSetting) {
          if (isArrayOfStoreType(storageSetting)) {
            return new UniversalStorage(initializeStorages(applyCookieOptions(storageSetting.stores, cookieOptions2)));
          }
        }
      }
      return new UniversalStorage(initializeStorages([
        StoreType.LocalStorage,
        {
          name: StoreType.Cookie,
          settings: cookieOptions2
        },
        StoreType.Memory
      ]));
    };
    Object.defineProperty(Analytics2.prototype, "storage", {
      get: function() {
        return this._universalStorage;
      },
      enumerable: false,
      configurable: true
    });
    Analytics2.prototype.track = function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return __awaiter(this, void 0, void 0, function() {
        var pageCtx, _a3, name, data4, opts, cb, segmentEvent;
        var _this = this;
        return __generator(this, function(_b2) {
          pageCtx = popPageContext(args);
          _a3 = resolveArguments.apply(void 0, args), name = _a3[0], data4 = _a3[1], opts = _a3[2], cb = _a3[3];
          segmentEvent = this.eventFactory.track(name, data4, opts, this.integrations, pageCtx);
          return [2, this._dispatch(segmentEvent, cb).then(function(ctx) {
            _this.emit("track", name, ctx.event.properties, ctx.event.options);
            return ctx;
          })];
        });
      });
    };
    Analytics2.prototype.page = function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return __awaiter(this, void 0, void 0, function() {
        var pageCtx, _a3, category, page, properties, options3, callback, segmentEvent;
        var _this = this;
        return __generator(this, function(_b2) {
          pageCtx = popPageContext(args);
          _a3 = resolvePageArguments.apply(void 0, args), category = _a3[0], page = _a3[1], properties = _a3[2], options3 = _a3[3], callback = _a3[4];
          segmentEvent = this.eventFactory.page(category, page, properties, options3, this.integrations, pageCtx);
          return [2, this._dispatch(segmentEvent, callback).then(function(ctx) {
            _this.emit("page", category, page, ctx.event.properties, ctx.event.options);
            return ctx;
          })];
        });
      });
    };
    Analytics2.prototype.identify = function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return __awaiter(this, void 0, void 0, function() {
        var pageCtx, _a3, id2, _traits, options3, callback, segmentEvent;
        var _this = this;
        return __generator(this, function(_b2) {
          pageCtx = popPageContext(args);
          _a3 = resolveUserArguments(this._user).apply(void 0, args), id2 = _a3[0], _traits = _a3[1], options3 = _a3[2], callback = _a3[3];
          this._user.identify(id2, _traits);
          segmentEvent = this.eventFactory.identify(this._user.id(), this._user.traits(), options3, this.integrations, pageCtx);
          return [2, this._dispatch(segmentEvent, callback).then(function(ctx) {
            _this.emit("identify", ctx.event.userId, ctx.event.traits, ctx.event.options);
            return ctx;
          })];
        });
      });
    };
    Analytics2.prototype.group = function() {
      var _this = this;
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      var pageCtx = popPageContext(args);
      if (args.length === 0) {
        return this._group;
      }
      var _a3 = resolveUserArguments(this._group).apply(void 0, args), id2 = _a3[0], _traits = _a3[1], options3 = _a3[2], callback = _a3[3];
      this._group.identify(id2, _traits);
      var groupId = this._group.id();
      var groupTraits = this._group.traits();
      var segmentEvent = this.eventFactory.group(groupId, groupTraits, options3, this.integrations, pageCtx);
      return this._dispatch(segmentEvent, callback).then(function(ctx) {
        _this.emit("group", ctx.event.groupId, ctx.event.traits, ctx.event.options);
        return ctx;
      });
    };
    Analytics2.prototype.alias = function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return __awaiter(this, void 0, void 0, function() {
        var pageCtx, _a3, to2, from, options3, callback, segmentEvent;
        var _this = this;
        return __generator(this, function(_b2) {
          pageCtx = popPageContext(args);
          _a3 = resolveAliasArguments.apply(void 0, args), to2 = _a3[0], from = _a3[1], options3 = _a3[2], callback = _a3[3];
          segmentEvent = this.eventFactory.alias(to2, from, options3, this.integrations, pageCtx);
          return [2, this._dispatch(segmentEvent, callback).then(function(ctx) {
            _this.emit("alias", to2, from, ctx.event.options);
            return ctx;
          })];
        });
      });
    };
    Analytics2.prototype.screen = function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return __awaiter(this, void 0, void 0, function() {
        var pageCtx, _a3, category, page, properties, options3, callback, segmentEvent;
        var _this = this;
        return __generator(this, function(_b2) {
          pageCtx = popPageContext(args);
          _a3 = resolvePageArguments.apply(void 0, args), category = _a3[0], page = _a3[1], properties = _a3[2], options3 = _a3[3], callback = _a3[4];
          segmentEvent = this.eventFactory.screen(category, page, properties, options3, this.integrations, pageCtx);
          return [2, this._dispatch(segmentEvent, callback).then(function(ctx) {
            _this.emit("screen", category, page, ctx.event.properties, ctx.event.options);
            return ctx;
          })];
        });
      });
    };
    Analytics2.prototype.trackClick = function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return __awaiter(this, void 0, void 0, function() {
        var autotrack;
        var _a3;
        return __generator(this, function(_b2) {
          switch (_b2.label) {
            case 0:
              return [4, import(
                /* webpackChunkName: "auto-track" */
                "./auto-track-6Q4JW7WJ.js"
              )];
            case 1:
              autotrack = _b2.sent();
              return [2, (_a3 = autotrack.link).call.apply(_a3, __spreadArray([this], args, false))];
          }
        });
      });
    };
    Analytics2.prototype.trackLink = function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return __awaiter(this, void 0, void 0, function() {
        var autotrack;
        var _a3;
        return __generator(this, function(_b2) {
          switch (_b2.label) {
            case 0:
              return [4, import(
                /* webpackChunkName: "auto-track" */
                "./auto-track-6Q4JW7WJ.js"
              )];
            case 1:
              autotrack = _b2.sent();
              return [2, (_a3 = autotrack.link).call.apply(_a3, __spreadArray([this], args, false))];
          }
        });
      });
    };
    Analytics2.prototype.trackSubmit = function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return __awaiter(this, void 0, void 0, function() {
        var autotrack;
        var _a3;
        return __generator(this, function(_b2) {
          switch (_b2.label) {
            case 0:
              return [4, import(
                /* webpackChunkName: "auto-track" */
                "./auto-track-6Q4JW7WJ.js"
              )];
            case 1:
              autotrack = _b2.sent();
              return [2, (_a3 = autotrack.form).call.apply(_a3, __spreadArray([this], args, false))];
          }
        });
      });
    };
    Analytics2.prototype.trackForm = function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return __awaiter(this, void 0, void 0, function() {
        var autotrack;
        var _a3;
        return __generator(this, function(_b2) {
          switch (_b2.label) {
            case 0:
              return [4, import(
                /* webpackChunkName: "auto-track" */
                "./auto-track-6Q4JW7WJ.js"
              )];
            case 1:
              autotrack = _b2.sent();
              return [2, (_a3 = autotrack.form).call.apply(_a3, __spreadArray([this], args, false))];
          }
        });
      });
    };
    Analytics2.prototype.register = function() {
      var plugins = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        plugins[_i2] = arguments[_i2];
      }
      return __awaiter(this, void 0, void 0, function() {
        var ctx, registrations;
        var _this = this;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              ctx = Context.system();
              registrations = plugins.map(function(xt2) {
                return _this.queue.register(ctx, xt2, _this);
              });
              return [4, Promise.all(registrations)];
            case 1:
              _a3.sent();
              return [2, ctx];
          }
        });
      });
    };
    Analytics2.prototype.deregister = function() {
      var plugins = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        plugins[_i2] = arguments[_i2];
      }
      return __awaiter(this, void 0, void 0, function() {
        var ctx, deregistrations;
        var _this = this;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              ctx = Context.system();
              deregistrations = plugins.map(function(pl2) {
                var plugin = _this.queue.plugins.find(function(p3) {
                  return p3.name === pl2;
                });
                if (plugin) {
                  return _this.queue.deregister(ctx, plugin, _this);
                } else {
                  ctx.log("warn", "plugin ".concat(pl2, " not found"));
                }
              });
              return [4, Promise.all(deregistrations)];
            case 1:
              _a3.sent();
              return [2, ctx];
          }
        });
      });
    };
    Analytics2.prototype.debug = function(toggle) {
      if (toggle === false && localStorage.getItem("debug")) {
        localStorage.removeItem("debug");
      }
      this._debug = toggle;
      return this;
    };
    Analytics2.prototype.reset = function() {
      this._user.reset();
      this._group.reset();
      this.emit("reset");
    };
    Analytics2.prototype.timeout = function(timeout) {
      this.settings.timeout = timeout;
    };
    Analytics2.prototype._dispatch = function(event3, callback) {
      return __awaiter(this, void 0, void 0, function() {
        var ctx;
        return __generator(this, function(_a3) {
          ctx = new Context(event3);
          ctx.stats.increment("analytics_js.invoke", 1, [event3.type]);
          if (isOffline() && !this.options.retryQueue) {
            return [2, ctx];
          }
          return [2, dispatch(ctx, this.queue, this, {
            callback,
            debug: this._debug,
            timeout: this.settings.timeout
          })];
        });
      });
    };
    Analytics2.prototype.addSourceMiddleware = function(fn4) {
      return __awaiter(this, void 0, void 0, function() {
        var _this = this;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.queue.criticalTasks.run(function() {
                return __awaiter(_this, void 0, void 0, function() {
                  var sourceMiddlewarePlugin, integrations, plugin;
                  return __generator(this, function(_a4) {
                    switch (_a4.label) {
                      case 0:
                        return [4, import(
                          /* webpackChunkName: "middleware" */
                          "./middleware-MIRLFV53.js"
                        )];
                      case 1:
                        sourceMiddlewarePlugin = _a4.sent().sourceMiddlewarePlugin;
                        integrations = {};
                        this.queue.plugins.forEach(function(plugin2) {
                          if (plugin2.type === "destination") {
                            return integrations[plugin2.name] = true;
                          }
                        });
                        plugin = sourceMiddlewarePlugin(fn4, integrations);
                        return [4, this.register(plugin)];
                      case 2:
                        _a4.sent();
                        return [
                          2
                          /*return*/
                        ];
                    }
                  });
                });
              })];
            case 1:
              _a3.sent();
              return [2, this];
          }
        });
      });
    };
    Analytics2.prototype.addDestinationMiddleware = function(integrationName) {
      var middlewares = [];
      for (var _i2 = 1; _i2 < arguments.length; _i2++) {
        middlewares[_i2 - 1] = arguments[_i2];
      }
      this.queue.plugins.filter(isDestinationPluginWithAddMiddleware).forEach(function(p3) {
        if (integrationName === "*" || p3.name.toLowerCase() === integrationName.toLowerCase()) {
          p3.addMiddleware.apply(p3, middlewares);
        }
      });
      return Promise.resolve(this);
    };
    Analytics2.prototype.setAnonymousId = function(id2) {
      return this._user.anonymousId(id2);
    };
    Analytics2.prototype.queryString = function(query) {
      return __awaiter(this, void 0, void 0, function() {
        var queryString;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              if (this.options.useQueryString === false) {
                return [2, []];
              }
              return [4, import(
                /* webpackChunkName: "queryString" */
                "./query-string-4FBP3LMT.js"
              )];
            case 1:
              queryString = _a3.sent().queryString;
              return [2, queryString(this, query)];
          }
        });
      });
    };
    Analytics2.prototype.use = function(legacyPluginFactory) {
      legacyPluginFactory(this);
      return this;
    };
    Analytics2.prototype.ready = function(callback) {
      if (callback === void 0) {
        callback = function(res) {
          return res;
        };
      }
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a3) {
          return [2, Promise.all(this.queue.plugins.map(function(i2) {
            return i2.ready ? i2.ready() : Promise.resolve();
          })).then(function(res) {
            callback(res);
            return res;
          })];
        });
      });
    };
    Analytics2.prototype.noConflict = function() {
      console.warn(deprecationWarning);
      setGlobalAnalytics(_analytics !== null && _analytics !== void 0 ? _analytics : this);
      return this;
    };
    Analytics2.prototype.normalize = function(msg) {
      console.warn(deprecationWarning);
      return this.eventFactory["normalize"](msg);
    };
    Object.defineProperty(Analytics2.prototype, "failedInitializations", {
      get: function() {
        console.warn(deprecationWarning);
        return this.queue.failedInitializations;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Analytics2.prototype, "VERSION", {
      get: function() {
        return version;
      },
      enumerable: false,
      configurable: true
    });
    Analytics2.prototype.initialize = function(_settings, _options) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a3) {
          console.warn(deprecationWarning);
          return [2, Promise.resolve(this)];
        });
      });
    };
    Analytics2.prototype.pageview = function(url) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              console.warn(deprecationWarning);
              return [4, this.page({ path: url })];
            case 1:
              _a3.sent();
              return [2, this];
          }
        });
      });
    };
    Object.defineProperty(Analytics2.prototype, "plugins", {
      get: function() {
        var _a3;
        console.warn(deprecationWarning);
        return (_a3 = this._plugins) !== null && _a3 !== void 0 ? _a3 : {};
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Analytics2.prototype, "Integrations", {
      get: function() {
        console.warn(deprecationWarning);
        var integrations = this.queue.plugins.filter(function(plugin) {
          return plugin.type === "destination";
        }).reduce(function(acc, plugin) {
          var name = "".concat(plugin.name.toLowerCase().replace(".", "").split(" ").join("-"), "Integration");
          var integration = window[name];
          if (!integration) {
            return acc;
          }
          var nested = integration.Integration;
          if (nested) {
            acc[plugin.name] = nested;
            return acc;
          }
          acc[plugin.name] = integration;
          return acc;
        }, {});
        return integrations;
      },
      enumerable: false,
      configurable: true
    });
    Analytics2.prototype.push = function(args) {
      var an2 = this;
      var method = args.shift();
      if (method) {
        if (!an2[method])
          return;
      }
      an2[method].apply(this, args);
    };
    return Analytics2;
  }(Emitter)
);
var NullAnalytics = (
  /** @class */
  function(_super) {
    __extends(NullAnalytics2, _super);
    function NullAnalytics2() {
      var _this = _super.call(this, { writeKey: "" }, { disableClientPersistence: true }) || this;
      _this.initialized = true;
      return _this;
    }
    return NullAnalytics2;
  }(Analytics)
);

// node_modules/@segment/analytics-next/dist/pkg/lib/get-process-env.js
function getProcessEnv() {
  if (typeof process === "undefined" || !process.env) {
    return {};
  }
  return process.env;
}

// node_modules/@segment/analytics-next/dist/pkg/lib/client-hints/index.js
function clientHints(hints) {
  return __awaiter(this, void 0, void 0, function() {
    var userAgentData;
    return __generator(this, function(_a3) {
      userAgentData = navigator.userAgentData;
      if (!userAgentData)
        return [2, void 0];
      if (!hints)
        return [2, userAgentData.toJSON()];
      return [2, userAgentData.getHighEntropyValues(hints).catch(function() {
        return userAgentData.toJSON();
      })];
    });
  });
}

// node_modules/@segment/analytics-next/dist/pkg/plugins/env-enrichment/index.js
var cookieOptions;
function getCookieOptions() {
  if (cookieOptions) {
    return cookieOptions;
  }
  var domain = tld(window.location.href);
  cookieOptions = {
    expires: 31536e6,
    secure: false,
    path: "/"
  };
  if (domain) {
    cookieOptions.domain = domain;
  }
  return cookieOptions;
}
function ads(query) {
  var queryIds = {
    btid: "dataxu",
    urid: "millennial-media"
  };
  if (query.startsWith("?")) {
    query = query.substring(1);
  }
  query = query.replace(/\?/g, "&");
  var parts = query.split("&");
  for (var _i2 = 0, parts_1 = parts; _i2 < parts_1.length; _i2++) {
    var part = parts_1[_i2];
    var _a3 = part.split("="), k2 = _a3[0], v3 = _a3[1];
    if (queryIds[k2]) {
      return {
        id: v3,
        type: queryIds[k2]
      };
    }
  }
}
function utm(query) {
  if (query.startsWith("?")) {
    query = query.substring(1);
  }
  query = query.replace(/\?/g, "&");
  return query.split("&").reduce(function(acc, str) {
    var _a3 = str.split("="), k2 = _a3[0], _b2 = _a3[1], v3 = _b2 === void 0 ? "" : _b2;
    if (k2.includes("utm_") && k2.length > 4) {
      var utmParam = k2.slice(4);
      if (utmParam === "campaign") {
        utmParam = "name";
      }
      acc[utmParam] = gracefulDecodeURIComponent(v3);
    }
    return acc;
  }, {});
}
function ampId() {
  var ampId2 = js_cookie_default.get("_ga");
  if (ampId2 && ampId2.startsWith("amp")) {
    return ampId2;
  }
}
function referrerId(query, ctx, disablePersistance) {
  var _a3;
  var storage = new UniversalStorage(disablePersistance ? [] : [new CookieStorage(getCookieOptions())]);
  var stored = storage.get("s:context.referrer");
  var ad = (_a3 = ads(query)) !== null && _a3 !== void 0 ? _a3 : stored;
  if (!ad) {
    return;
  }
  if (ctx) {
    ctx.referrer = __assign(__assign({}, ctx.referrer), ad);
  }
  storage.set("s:context.referrer", ad);
}
var objectToQueryString = function(obj) {
  try {
    var searchParams_1 = new URLSearchParams();
    Object.entries(obj).forEach(function(_a3) {
      var k2 = _a3[0], v3 = _a3[1];
      if (Array.isArray(v3)) {
        v3.forEach(function(value) {
          return searchParams_1.append(k2, value);
        });
      } else {
        searchParams_1.append(k2, v3);
      }
    });
    return searchParams_1.toString();
  } catch (_a3) {
    return "";
  }
};
var EnvironmentEnrichmentPlugin = (
  /** @class */
  /* @__PURE__ */ function() {
    function EnvironmentEnrichmentPlugin2() {
      var _this = this;
      this.name = "Page Enrichment";
      this.type = "before";
      this.version = "0.1.0";
      this.isLoaded = function() {
        return true;
      };
      this.load = function(_ctx, instance2) {
        return __awaiter(_this, void 0, void 0, function() {
          var _a3, _1;
          return __generator(this, function(_b2) {
            switch (_b2.label) {
              case 0:
                this.instance = instance2;
                _b2.label = 1;
              case 1:
                _b2.trys.push([1, 3, , 4]);
                _a3 = this;
                return [4, clientHints(this.instance.options.highEntropyValuesClientHints)];
              case 2:
                _a3.userAgentData = _b2.sent();
                return [3, 4];
              case 3:
                _1 = _b2.sent();
                return [3, 4];
              case 4:
                return [2, Promise.resolve()];
            }
          });
        });
      };
      this.enrich = function(ctx) {
        var _a3, _b2;
        var evtCtx = ctx.event.context;
        var search = evtCtx.page.search || "";
        var query = typeof search === "object" ? objectToQueryString(search) : search;
        evtCtx.userAgent = navigator.userAgent;
        evtCtx.userAgentData = _this.userAgentData;
        var locale = navigator.userLanguage || navigator.language;
        if (typeof evtCtx.locale === "undefined" && typeof locale !== "undefined") {
          evtCtx.locale = locale;
        }
        (_a3 = evtCtx.library) !== null && _a3 !== void 0 ? _a3 : evtCtx.library = {
          name: "analytics.js",
          version: "".concat(getVersionType() === "web" ? "next" : "npm:next", "-").concat(version)
        };
        if (query && !evtCtx.campaign) {
          evtCtx.campaign = utm(query);
        }
        var amp = ampId();
        if (amp) {
          evtCtx.amp = { id: amp };
        }
        referrerId(query, evtCtx, (_b2 = _this.instance.options.disableClientPersistence) !== null && _b2 !== void 0 ? _b2 : false);
        try {
          evtCtx.timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        } catch (_2) {
        }
        return ctx;
      };
      this.track = this.enrich;
      this.identify = this.enrich;
      this.page = this.enrich;
      this.group = this.enrich;
      this.alias = this.enrich;
      this.screen = this.enrich;
    }
    return EnvironmentEnrichmentPlugin2;
  }()
);
var envEnrichment = new EnvironmentEnrichmentPlugin();

// node_modules/@segment/analytics-next/dist/pkg/plugins/remote-loader/index.js
var ActionDestination = (
  /** @class */
  function() {
    function ActionDestination2(name, action) {
      this.version = "1.0.0";
      this.alternativeNames = [];
      this.loadPromise = createDeferred();
      this.middleware = [];
      this.alias = this._createMethod("alias");
      this.group = this._createMethod("group");
      this.identify = this._createMethod("identify");
      this.page = this._createMethod("page");
      this.screen = this._createMethod("screen");
      this.track = this._createMethod("track");
      this.action = action;
      this.name = name;
      this.type = action.type;
      this.alternativeNames.push(action.name);
    }
    ActionDestination2.prototype.addMiddleware = function() {
      var _a3;
      var fn4 = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        fn4[_i2] = arguments[_i2];
      }
      if (this.type === "destination") {
        (_a3 = this.middleware).push.apply(_a3, fn4);
      }
    };
    ActionDestination2.prototype.transform = function(ctx) {
      return __awaiter(this, void 0, void 0, function() {
        var modifiedEvent;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, applyDestinationMiddleware(this.name, ctx.event, this.middleware)];
            case 1:
              modifiedEvent = _a3.sent();
              if (modifiedEvent === null) {
                ctx.cancel(new ContextCancelation({
                  retry: false,
                  reason: "dropped by destination middleware"
                }));
              }
              return [2, new Context(modifiedEvent)];
          }
        });
      });
    };
    ActionDestination2.prototype._createMethod = function(methodName) {
      var _this = this;
      return function(ctx) {
        return __awaiter(_this, void 0, void 0, function() {
          var transformedContext, error_1;
          return __generator(this, function(_a3) {
            switch (_a3.label) {
              case 0:
                if (!this.action[methodName])
                  return [2, ctx];
                transformedContext = ctx;
                if (!(this.type === "destination")) return [3, 2];
                return [4, this.transform(ctx)];
              case 1:
                transformedContext = _a3.sent();
                _a3.label = 2;
              case 2:
                _a3.trys.push([2, 5, , 6]);
                return [4, this.ready()];
              case 3:
                if (!_a3.sent()) {
                  throw new Error("Something prevented the destination from getting ready");
                }
                recordIntegrationMetric(ctx, {
                  integrationName: this.action.name,
                  methodName,
                  type: "action"
                });
                return [4, this.action[methodName](transformedContext)];
              case 4:
                _a3.sent();
                return [3, 6];
              case 5:
                error_1 = _a3.sent();
                recordIntegrationMetric(ctx, {
                  integrationName: this.action.name,
                  methodName,
                  type: "action",
                  didError: true
                });
                throw error_1;
              case 6:
                return [2, ctx];
            }
          });
        });
      };
    };
    ActionDestination2.prototype.isLoaded = function() {
      return this.action.isLoaded();
    };
    ActionDestination2.prototype.ready = function() {
      return __awaiter(this, void 0, void 0, function() {
        var _a3;
        return __generator(this, function(_b2) {
          switch (_b2.label) {
            case 0:
              _b2.trys.push([0, 2, , 3]);
              return [4, this.loadPromise.promise];
            case 1:
              _b2.sent();
              return [2, true];
            case 2:
              _a3 = _b2.sent();
              return [2, false];
            case 3:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    ActionDestination2.prototype.load = function(ctx, analytics) {
      return __awaiter(this, void 0, void 0, function() {
        var loadP, _a3, _b2, error_2;
        return __generator(this, function(_c2) {
          switch (_c2.label) {
            case 0:
              if (this.loadPromise.isSettled()) {
                return [2, this.loadPromise.promise];
              }
              _c2.label = 1;
            case 1:
              _c2.trys.push([1, 3, , 4]);
              recordIntegrationMetric(ctx, {
                integrationName: this.action.name,
                methodName: "load",
                type: "action"
              });
              loadP = this.action.load(ctx, analytics);
              _b2 = (_a3 = this.loadPromise).resolve;
              return [4, loadP];
            case 2:
              _b2.apply(_a3, [_c2.sent()]);
              return [2, loadP];
            case 3:
              error_2 = _c2.sent();
              recordIntegrationMetric(ctx, {
                integrationName: this.action.name,
                methodName: "load",
                type: "action",
                didError: true
              });
              this.loadPromise.reject(error_2);
              throw error_2;
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    ActionDestination2.prototype.unload = function(ctx, analytics) {
      var _a3, _b2;
      return (_b2 = (_a3 = this.action).unload) === null || _b2 === void 0 ? void 0 : _b2.call(_a3, ctx, analytics);
    };
    return ActionDestination2;
  }()
);
function validate(pluginLike) {
  if (!Array.isArray(pluginLike)) {
    throw new Error("Not a valid list of plugins");
  }
  var required = ["load", "isLoaded", "name", "version", "type"];
  pluginLike.forEach(function(plugin) {
    required.forEach(function(method) {
      var _a3;
      if (plugin[method] === void 0) {
        throw new Error("Plugin: ".concat((_a3 = plugin.name) !== null && _a3 !== void 0 ? _a3 : "unknown", " missing required function ").concat(method));
      }
    });
  });
  return true;
}
function isPluginDisabled(userIntegrations, remotePlugin) {
  var creationNameEnabled = userIntegrations[remotePlugin.creationName];
  var currentNameEnabled = userIntegrations[remotePlugin.name];
  if (userIntegrations.All === false && !creationNameEnabled && !currentNameEnabled) {
    return true;
  }
  if (creationNameEnabled === false || currentNameEnabled === false) {
    return true;
  }
  return false;
}
function loadPluginFactory(remotePlugin, obfuscate) {
  return __awaiter(this, void 0, void 0, function() {
    var defaultCdn, cdn, urlSplit, name_1, obfuscatedURL, error_3, err_1;
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          _a3.trys.push([0, 9, , 10]);
          defaultCdn = new RegExp("https://cdn.segment.(com|build)");
          cdn = getCDN();
          if (!obfuscate) return [3, 6];
          urlSplit = remotePlugin.url.split("/");
          name_1 = urlSplit[urlSplit.length - 2];
          obfuscatedURL = remotePlugin.url.replace(name_1, btoa(name_1).replace(/=/g, ""));
          _a3.label = 1;
        case 1:
          _a3.trys.push([1, 3, , 5]);
          return [4, loadScript(obfuscatedURL.replace(defaultCdn, cdn))];
        case 2:
          _a3.sent();
          return [3, 5];
        case 3:
          error_3 = _a3.sent();
          return [4, loadScript(remotePlugin.url.replace(defaultCdn, cdn))];
        case 4:
          _a3.sent();
          return [3, 5];
        case 5:
          return [3, 8];
        case 6:
          return [4, loadScript(remotePlugin.url.replace(defaultCdn, cdn))];
        case 7:
          _a3.sent();
          _a3.label = 8;
        case 8:
          if (typeof window[remotePlugin.libraryName] === "function") {
            return [2, window[remotePlugin.libraryName]];
          }
          return [3, 10];
        case 9:
          err_1 = _a3.sent();
          console.error("Failed to create PluginFactory", remotePlugin);
          throw err_1;
        case 10:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function remoteLoader(settings, integrations, mergedIntegrations, options3, routingMiddleware, pluginSources) {
  var _a3, _b2, _c2;
  return __awaiter(this, void 0, void 0, function() {
    var allPlugins, routingRules, pluginPromises;
    var _this = this;
    return __generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          allPlugins = [];
          routingRules = (_b2 = (_a3 = settings.middlewareSettings) === null || _a3 === void 0 ? void 0 : _a3.routingRules) !== null && _b2 !== void 0 ? _b2 : [];
          pluginPromises = ((_c2 = settings.remotePlugins) !== null && _c2 !== void 0 ? _c2 : []).map(function(remotePlugin) {
            return __awaiter(_this, void 0, void 0, function() {
              var pluginFactory, _a4, intg, plugin, plugins, routing_1, error_4;
              return __generator(this, function(_b3) {
                switch (_b3.label) {
                  case 0:
                    if (isPluginDisabled(integrations, remotePlugin))
                      return [
                        2
                        /*return*/
                      ];
                    _b3.label = 1;
                  case 1:
                    _b3.trys.push([1, 6, , 7]);
                    _a4 = pluginSources === null || pluginSources === void 0 ? void 0 : pluginSources.find(function(_a5) {
                      var pluginName = _a5.pluginName;
                      return pluginName === remotePlugin.name;
                    });
                    if (_a4) return [3, 3];
                    return [4, loadPluginFactory(remotePlugin, options3 === null || options3 === void 0 ? void 0 : options3.obfuscate)];
                  case 2:
                    _a4 = _b3.sent();
                    _b3.label = 3;
                  case 3:
                    pluginFactory = _a4;
                    if (!pluginFactory) return [3, 5];
                    intg = mergedIntegrations[remotePlugin.name];
                    return [4, pluginFactory(__assign(__assign({}, remotePlugin.settings), intg))];
                  case 4:
                    plugin = _b3.sent();
                    plugins = Array.isArray(plugin) ? plugin : [plugin];
                    validate(plugins);
                    routing_1 = routingRules.filter(function(rule) {
                      return rule.destinationName === remotePlugin.creationName;
                    });
                    plugins.forEach(function(plugin2) {
                      var wrapper = new ActionDestination(remotePlugin.creationName, plugin2);
                      if (routing_1.length && routingMiddleware) {
                        wrapper.addMiddleware(routingMiddleware);
                      }
                      allPlugins.push(wrapper);
                    });
                    _b3.label = 5;
                  case 5:
                    return [3, 7];
                  case 6:
                    error_4 = _b3.sent();
                    console.warn("Failed to load Remote Plugin", error_4);
                    return [3, 7];
                  case 7:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          });
          return [4, Promise.all(pluginPromises)];
        case 1:
          _d.sent();
          return [2, allPlugins.filter(Boolean)];
      }
    });
  });
}

// node_modules/@segment/analytics-next/dist/pkg/core/inspector/index.js
var _a;
var _b;
var env = getGlobal();
var inspectorHost = (_a = (_b = env)["__SEGMENT_INSPECTOR__"]) !== null && _a !== void 0 ? _a : _b["__SEGMENT_INSPECTOR__"] = {};
var attachInspector = function(analytics) {
  var _a3;
  return (_a3 = inspectorHost.attach) === null || _a3 === void 0 ? void 0 : _a3.call(inspectorHost, analytics);
};

// node_modules/@segment/analytics-next/dist/pkg/browser/index.js
function loadCDNSettings(writeKey, baseUrl) {
  return fetch("".concat(baseUrl, "/v1/projects/").concat(writeKey, "/settings")).then(function(res) {
    if (!res.ok) {
      return res.text().then(function(errorResponseMessage) {
        throw new Error(errorResponseMessage);
      });
    }
    return res.json();
  }).catch(function(err) {
    console.error(err.message);
    throw err;
  });
}
function hasLegacyDestinations(settings) {
  return getProcessEnv().NODE_ENV !== "test" && // just one integration means segmentio
  Object.keys(settings.integrations).length > 1;
}
function hasTsubMiddleware(settings) {
  var _a3, _b2, _c2;
  return getProcessEnv().NODE_ENV !== "test" && ((_c2 = (_b2 = (_a3 = settings.middlewareSettings) === null || _a3 === void 0 ? void 0 : _a3.routingRules) === null || _b2 === void 0 ? void 0 : _b2.length) !== null && _c2 !== void 0 ? _c2 : 0) > 0;
}
function flushPreBuffer(analytics, buffer) {
  flushSetAnonymousID(analytics, buffer);
  flushOn(analytics, buffer);
}
function flushFinalBuffer(analytics, queryString, buffer) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          return [4, flushQueryString(analytics, queryString)];
        case 1:
          _a3.sent();
          flushAnalyticsCallsInNewTask(analytics, buffer);
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
var getQueryString = function() {
  var _a3, _b2;
  var hash = (_a3 = window.location.hash) !== null && _a3 !== void 0 ? _a3 : "";
  var search = (_b2 = window.location.search) !== null && _b2 !== void 0 ? _b2 : "";
  var term = search.length ? search : hash.replace(/(?=#).*(?=\?)/, "");
  return term;
};
var flushQueryString = function(analytics, queryString) {
  return __awaiter(void 0, void 0, void 0, function() {
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          if (!queryString.includes("ajs_")) return [3, 2];
          return [4, analytics.queryString(queryString).catch(console.error)];
        case 1:
          _a3.sent();
          _a3.label = 2;
        case 2:
          return [
            2
            /*return*/
          ];
      }
    });
  });
};
function registerPlugins(writeKey, cdnSettings, analytics, options3, pluginLikes, legacyIntegrationSources, preInitBuffer) {
  var _a3, _b2, _c2;
  if (pluginLikes === void 0) {
    pluginLikes = [];
  }
  return __awaiter(this, void 0, void 0, function() {
    var pluginsFromSettings, pluginSources, tsubMiddleware, _d, legacyDestinations, _e2, schemaFilter, _f2, mergedSettings, remotePlugins, basePlugins, shouldIgnoreSegmentio, _g, _h, ctx;
    var _this = this;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          flushPreBuffer(analytics, preInitBuffer);
          pluginsFromSettings = pluginLikes === null || pluginLikes === void 0 ? void 0 : pluginLikes.filter(function(pluginLike) {
            return typeof pluginLike === "object";
          });
          pluginSources = pluginLikes === null || pluginLikes === void 0 ? void 0 : pluginLikes.filter(function(pluginLike) {
            return typeof pluginLike === "function" && typeof pluginLike.pluginName === "string";
          });
          if (!hasTsubMiddleware(cdnSettings)) return [3, 2];
          return [4, import(
            /* webpackChunkName: "tsub-middleware" */
            "./routing-middleware-R5NVTKQY.js"
          ).then(function(mod) {
            return mod.tsubMiddleware(cdnSettings.middlewareSettings.routingRules);
          })];
        case 1:
          _d = _j.sent();
          return [3, 3];
        case 2:
          _d = void 0;
          _j.label = 3;
        case 3:
          tsubMiddleware = _d;
          if (!(hasLegacyDestinations(cdnSettings) || legacyIntegrationSources.length > 0)) return [3, 5];
          return [4, import(
            /* webpackChunkName: "ajs-destination" */
            "./ajs-destination-3BMEW5NE.js"
          ).then(function(mod) {
            return mod.ajsDestinations(writeKey, cdnSettings, analytics.integrations, options3, tsubMiddleware, legacyIntegrationSources);
          })];
        case 4:
          _e2 = _j.sent();
          return [3, 6];
        case 5:
          _e2 = [];
          _j.label = 6;
        case 6:
          legacyDestinations = _e2;
          if (!cdnSettings.legacyVideoPluginsEnabled) return [3, 8];
          return [4, import(
            /* webpackChunkName: "legacyVideos" */
            "./legacy-video-plugins-NPCW6BZO.js"
          ).then(function(mod) {
            return mod.loadLegacyVideoPlugins(analytics);
          })];
        case 7:
          _j.sent();
          _j.label = 8;
        case 8:
          if (!((_a3 = options3.plan) === null || _a3 === void 0 ? void 0 : _a3.track)) return [3, 10];
          return [4, import(
            /* webpackChunkName: "schemaFilter" */
            "./schema-filter-W5BFYKGB.js"
          ).then(function(mod) {
            var _a4;
            return mod.schemaFilter((_a4 = options3.plan) === null || _a4 === void 0 ? void 0 : _a4.track, cdnSettings);
          })];
        case 9:
          _f2 = _j.sent();
          return [3, 11];
        case 10:
          _f2 = void 0;
          _j.label = 11;
        case 11:
          schemaFilter = _f2;
          mergedSettings = mergedOptions(cdnSettings, options3);
          return [4, remoteLoader(cdnSettings, analytics.integrations, mergedSettings, options3, tsubMiddleware, pluginSources).catch(function() {
            return [];
          })];
        case 12:
          remotePlugins = _j.sent();
          basePlugins = __spreadArray(__spreadArray([envEnrichment], legacyDestinations, true), remotePlugins, true);
          if (schemaFilter) {
            basePlugins.push(schemaFilter);
          }
          shouldIgnoreSegmentio = ((_b2 = options3.integrations) === null || _b2 === void 0 ? void 0 : _b2.All) === false && !options3.integrations["Segment.io"] || options3.integrations && options3.integrations["Segment.io"] === false;
          if (!!shouldIgnoreSegmentio) return [3, 14];
          _h = (_g = basePlugins).push;
          return [4, segmentio(analytics, mergedSettings["Segment.io"], cdnSettings.integrations)];
        case 13:
          _h.apply(_g, [_j.sent()]);
          _j.label = 14;
        case 14:
          return [4, analytics.register.apply(analytics, __spreadArray(__spreadArray([], basePlugins, false), pluginsFromSettings, false))];
        case 15:
          ctx = _j.sent();
          return [4, flushRegister(analytics, preInitBuffer)];
        case 16:
          _j.sent();
          if (!Object.entries((_c2 = cdnSettings.enabledMiddleware) !== null && _c2 !== void 0 ? _c2 : {}).some(function(_a4) {
            var enabled = _a4[1];
            return enabled;
          })) return [3, 18];
          return [4, import(
            /* webpackChunkName: "remoteMiddleware" */
            "./remote-middleware-RRK6DLLT.js"
          ).then(function(_a4) {
            var remoteMiddlewares = _a4.remoteMiddlewares;
            return __awaiter(_this, void 0, void 0, function() {
              var middleware, promises;
              return __generator(this, function(_b3) {
                switch (_b3.label) {
                  case 0:
                    return [4, remoteMiddlewares(ctx, cdnSettings, options3.obfuscate)];
                  case 1:
                    middleware = _b3.sent();
                    promises = middleware.map(function(mdw) {
                      return analytics.addSourceMiddleware(mdw);
                    });
                    return [2, Promise.all(promises)];
                }
              });
            });
          })];
        case 17:
          _j.sent();
          _j.label = 18;
        case 18:
          return [4, flushAddSourceMiddleware(analytics, preInitBuffer)];
        case 19:
          _j.sent();
          return [2, ctx];
      }
    });
  });
}
function loadAnalytics(settings, options3, preInitBuffer) {
  var _a3, _b2, _c2, _d, _e2, _f2, _g, _h, _j;
  if (options3 === void 0) {
    options3 = {};
  }
  return __awaiter(this, void 0, void 0, function() {
    var queryString, cdnURL, cdnSettings, _k, disabled, retryQueue, analytics, plugins, classicIntegrations, segmentLoadOptions, ctx;
    return __generator(this, function(_l2) {
      switch (_l2.label) {
        case 0:
          if (options3.disable === true) {
            return [2, [new NullAnalytics(), Context.system()]];
          }
          if (options3.globalAnalyticsKey)
            setGlobalAnalyticsKey(options3.globalAnalyticsKey);
          if (settings.cdnURL)
            setGlobalCDNUrl(settings.cdnURL);
          if (options3.initialPageview) {
            preInitBuffer.add(new PreInitMethodCall("page", []));
          }
          queryString = getQueryString();
          cdnURL = (_a3 = settings.cdnURL) !== null && _a3 !== void 0 ? _a3 : getCDN();
          if (!((_b2 = settings.cdnSettings) !== null && _b2 !== void 0)) return [3, 1];
          _k = _b2;
          return [3, 3];
        case 1:
          return [4, loadCDNSettings(settings.writeKey, cdnURL)];
        case 2:
          _k = _l2.sent();
          _l2.label = 3;
        case 3:
          cdnSettings = _k;
          if (options3.updateCDNSettings) {
            cdnSettings = options3.updateCDNSettings(cdnSettings);
          }
          if (!(typeof options3.disable === "function")) return [3, 5];
          return [4, options3.disable(cdnSettings)];
        case 4:
          disabled = _l2.sent();
          if (disabled) {
            return [2, [new NullAnalytics(), Context.system()]];
          }
          _l2.label = 5;
        case 5:
          retryQueue = (_d = (_c2 = cdnSettings.integrations["Segment.io"]) === null || _c2 === void 0 ? void 0 : _c2.retryQueue) !== null && _d !== void 0 ? _d : true;
          options3 = __assign({ retryQueue }, options3);
          analytics = new Analytics(__assign(__assign({}, settings), { cdnSettings, cdnURL }), options3);
          attachInspector(analytics);
          plugins = (_e2 = settings.plugins) !== null && _e2 !== void 0 ? _e2 : [];
          classicIntegrations = (_f2 = settings.classicIntegrations) !== null && _f2 !== void 0 ? _f2 : [];
          segmentLoadOptions = (_g = options3.integrations) === null || _g === void 0 ? void 0 : _g["Segment.io"];
          Stats.initRemoteMetrics(__assign(__assign({}, cdnSettings.metrics), { host: (_h = segmentLoadOptions === null || segmentLoadOptions === void 0 ? void 0 : segmentLoadOptions.apiHost) !== null && _h !== void 0 ? _h : (_j = cdnSettings.metrics) === null || _j === void 0 ? void 0 : _j.host, protocol: segmentLoadOptions === null || segmentLoadOptions === void 0 ? void 0 : segmentLoadOptions.protocol }));
          return [4, registerPlugins(settings.writeKey, cdnSettings, analytics, options3, plugins, classicIntegrations, preInitBuffer)];
        case 6:
          ctx = _l2.sent();
          analytics.initialized = true;
          analytics.emit("initialize", settings, options3);
          return [4, flushFinalBuffer(analytics, queryString, preInitBuffer)];
        case 7:
          _l2.sent();
          return [2, [analytics, ctx]];
      }
    });
  });
}
var AnalyticsBrowser = (
  /** @class */
  function(_super) {
    __extends(AnalyticsBrowser2, _super);
    function AnalyticsBrowser2() {
      var _this = this;
      var _a3 = createDeferred(), loadStart = _a3.promise, resolveLoadStart = _a3.resolve;
      _this = _super.call(this, function(buffer) {
        return loadStart.then(function(_a4) {
          var settings = _a4[0], options3 = _a4[1];
          return loadAnalytics(settings, options3, buffer);
        });
      }) || this;
      _this._resolveLoadStart = function(settings, options3) {
        return resolveLoadStart([settings, options3]);
      };
      return _this;
    }
    AnalyticsBrowser2.prototype.load = function(settings, options3) {
      if (options3 === void 0) {
        options3 = {};
      }
      this._resolveLoadStart(settings, options3);
      return this;
    };
    AnalyticsBrowser2.load = function(settings, options3) {
      if (options3 === void 0) {
        options3 = {};
      }
      return new AnalyticsBrowser2().load(settings, options3);
    };
    AnalyticsBrowser2.standalone = function(writeKey, options3) {
      return AnalyticsBrowser2.load({ writeKey }, options3).then(function(res) {
        return res[0];
      });
    };
    return AnalyticsBrowser2;
  }(AnalyticsBuffered)
);

// node_modules/@segment/analytics-next/dist/pkg/node/node.browser.js
var AnalyticsNode = (
  /** @class */
  function() {
    function AnalyticsNode2() {
    }
    AnalyticsNode2.load = function() {
      return Promise.reject(new Error("AnalyticsNode is not available in browsers."));
    };
    return AnalyticsNode2;
  }()
);

// node_modules/@neo4j-nvl/base/dist/base.mjs
var r = { 5: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true }), t.EMPTY_OBSERVER = t.SafeSubscriber = t.Subscriber = void 0;
  var o2 = r2(1018), i2 = r2(8014), a2 = r2(3413), u2 = r2(7315), s2 = r2(1342), c2 = r2(9052), l2 = r2(9155), f2 = r2(9223), h2 = function(e2) {
    function r3(r4) {
      var n3 = e2.call(this) || this;
      return n3.isStopped = false, r4 ? (n3.destination = r4, i2.isSubscription(r4) && r4.add(n3)) : n3.destination = t.EMPTY_OBSERVER, n3;
    }
    return n2(r3, e2), r3.create = function(e3, t2, r4) {
      return new y3(e3, t2, r4);
    }, r3.prototype.next = function(e3) {
      this.isStopped ? m2(c2.nextNotification(e3), this) : this._next(e3);
    }, r3.prototype.error = function(e3) {
      this.isStopped ? m2(c2.errorNotification(e3), this) : (this.isStopped = true, this._error(e3));
    }, r3.prototype.complete = function() {
      this.isStopped ? m2(c2.COMPLETE_NOTIFICATION, this) : (this.isStopped = true, this._complete());
    }, r3.prototype.unsubscribe = function() {
      this.closed || (this.isStopped = true, e2.prototype.unsubscribe.call(this), this.destination = null);
    }, r3.prototype._next = function(e3) {
      this.destination.next(e3);
    }, r3.prototype._error = function(e3) {
      try {
        this.destination.error(e3);
      } finally {
        this.unsubscribe();
      }
    }, r3.prototype._complete = function() {
      try {
        this.destination.complete();
      } finally {
        this.unsubscribe();
      }
    }, r3;
  }(i2.Subscription);
  t.Subscriber = h2;
  var d2 = Function.prototype.bind;
  function p3(e2, t2) {
    return d2.call(e2, t2);
  }
  var v3 = function() {
    function e2(e3) {
      this.partialObserver = e3;
    }
    return e2.prototype.next = function(e3) {
      var t2 = this.partialObserver;
      if (t2.next) try {
        t2.next(e3);
      } catch (e4) {
        b2(e4);
      }
    }, e2.prototype.error = function(e3) {
      var t2 = this.partialObserver;
      if (t2.error) try {
        t2.error(e3);
      } catch (e4) {
        b2(e4);
      }
      else b2(e3);
    }, e2.prototype.complete = function() {
      var e3 = this.partialObserver;
      if (e3.complete) try {
        e3.complete();
      } catch (e4) {
        b2(e4);
      }
    }, e2;
  }(), y3 = function(e2) {
    function t2(t3, r3, n3) {
      var i3, u3, s3 = e2.call(this) || this;
      return o2.isFunction(t3) || !t3 ? i3 = { next: null != t3 ? t3 : void 0, error: null != r3 ? r3 : void 0, complete: null != n3 ? n3 : void 0 } : s3 && a2.config.useDeprecatedNextContext ? ((u3 = Object.create(t3)).unsubscribe = function() {
        return s3.unsubscribe();
      }, i3 = { next: t3.next && p3(t3.next, u3), error: t3.error && p3(t3.error, u3), complete: t3.complete && p3(t3.complete, u3) }) : i3 = t3, s3.destination = new v3(i3), s3;
    }
    return n2(t2, e2), t2;
  }(h2);
  function b2(e2) {
    a2.config.useDeprecatedSynchronousErrorHandling ? f2.captureError(e2) : u2.reportUnhandledError(e2);
  }
  function m2(e2, t2) {
    var r3 = a2.config.onStoppedNotification;
    r3 && l2.timeoutProvider.setTimeout(function() {
      return r3(e2, t2);
    });
  }
  t.SafeSubscriber = y3, t.EMPTY_OBSERVER = { closed: true, next: s2.noop, error: function(e2) {
    throw e2;
  }, complete: s2.noop };
}, 45: function(e, t) {
  var r2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true });
  var n2 = function() {
    function e2(e3) {
      this.position = 0, this.length = e3;
    }
    return e2.prototype.getUInt8 = function(e3) {
      throw new Error("Not implemented");
    }, e2.prototype.getInt8 = function(e3) {
      throw new Error("Not implemented");
    }, e2.prototype.getFloat64 = function(e3) {
      throw new Error("Not implemented");
    }, e2.prototype.getVarInt = function(e3) {
      throw new Error("Not implemented");
    }, e2.prototype.putUInt8 = function(e3, t2) {
      throw new Error("Not implemented");
    }, e2.prototype.putInt8 = function(e3, t2) {
      throw new Error("Not implemented");
    }, e2.prototype.putFloat64 = function(e3, t2) {
      throw new Error("Not implemented");
    }, e2.prototype.getInt16 = function(e3) {
      return this.getInt8(e3) << 8 | this.getUInt8(e3 + 1);
    }, e2.prototype.getUInt16 = function(e3) {
      return this.getUInt8(e3) << 8 | this.getUInt8(e3 + 1);
    }, e2.prototype.getInt32 = function(e3) {
      return this.getInt8(e3) << 24 | this.getUInt8(e3 + 1) << 16 | this.getUInt8(e3 + 2) << 8 | this.getUInt8(e3 + 3);
    }, e2.prototype.getUInt32 = function(e3) {
      return this.getUInt8(e3) << 24 | this.getUInt8(e3 + 1) << 16 | this.getUInt8(e3 + 2) << 8 | this.getUInt8(e3 + 3);
    }, e2.prototype.getInt64 = function(e3) {
      return this.getInt8(e3) << 56 | this.getUInt8(e3 + 1) << 48 | this.getUInt8(e3 + 2) << 40 | this.getUInt8(e3 + 3) << 32 | this.getUInt8(e3 + 4) << 24 | this.getUInt8(e3 + 5) << 16 | this.getUInt8(e3 + 6) << 8 | this.getUInt8(e3 + 7);
    }, e2.prototype.getSlice = function(e3, t2) {
      return new o2(e3, t2, this);
    }, e2.prototype.putInt16 = function(e3, t2) {
      this.putInt8(e3, t2 >> 8), this.putUInt8(e3 + 1, 255 & t2);
    }, e2.prototype.putUInt16 = function(e3, t2) {
      this.putUInt8(e3, t2 >> 8 & 255), this.putUInt8(e3 + 1, 255 & t2);
    }, e2.prototype.putInt32 = function(e3, t2) {
      this.putInt8(e3, t2 >> 24), this.putUInt8(e3 + 1, t2 >> 16 & 255), this.putUInt8(e3 + 2, t2 >> 8 & 255), this.putUInt8(e3 + 3, 255 & t2);
    }, e2.prototype.putUInt32 = function(e3, t2) {
      this.putUInt8(e3, t2 >> 24 & 255), this.putUInt8(e3 + 1, t2 >> 16 & 255), this.putUInt8(e3 + 2, t2 >> 8 & 255), this.putUInt8(e3 + 3, 255 & t2);
    }, e2.prototype.putInt64 = function(e3, t2) {
      this.putInt8(e3, t2 >> 48), this.putUInt8(e3 + 1, t2 >> 42 & 255), this.putUInt8(e3 + 2, t2 >> 36 & 255), this.putUInt8(e3 + 3, t2 >> 30 & 255), this.putUInt8(e3 + 4, t2 >> 24 & 255), this.putUInt8(e3 + 5, t2 >> 16 & 255), this.putUInt8(e3 + 6, t2 >> 8 & 255), this.putUInt8(e3 + 7, 255 & t2);
    }, e2.prototype.putVarInt = function(e3, t2) {
      for (var r3 = 0; t2 > 1; ) {
        var n3 = t2 % 128;
        t2 >= 128 && (n3 += 128), t2 /= 128, this.putUInt8(e3 + r3, n3), r3 += 1;
      }
      return r3;
    }, e2.prototype.putBytes = function(e3, t2) {
      for (var r3 = 0, n3 = t2.remaining(); r3 < n3; r3++) this.putUInt8(e3 + r3, t2.readUInt8());
    }, e2.prototype.readUInt8 = function() {
      return this.getUInt8(this._updatePos(1));
    }, e2.prototype.readInt8 = function() {
      return this.getInt8(this._updatePos(1));
    }, e2.prototype.readUInt16 = function() {
      return this.getUInt16(this._updatePos(2));
    }, e2.prototype.readUInt32 = function() {
      return this.getUInt32(this._updatePos(4));
    }, e2.prototype.readInt16 = function() {
      return this.getInt16(this._updatePos(2));
    }, e2.prototype.readInt32 = function() {
      return this.getInt32(this._updatePos(4));
    }, e2.prototype.readInt64 = function() {
      return this.getInt32(this._updatePos(8));
    }, e2.prototype.readFloat64 = function() {
      return this.getFloat64(this._updatePos(8));
    }, e2.prototype.readVarInt = function() {
      var e3 = this.getVarInt(this.position);
      return this._updatePos(e3.length), e3.value;
    }, e2.prototype.writeUInt8 = function(e3) {
      this.putUInt8(this._updatePos(1), e3);
    }, e2.prototype.writeInt8 = function(e3) {
      this.putInt8(this._updatePos(1), e3);
    }, e2.prototype.writeInt16 = function(e3) {
      this.putInt16(this._updatePos(2), e3);
    }, e2.prototype.writeInt32 = function(e3) {
      this.putInt32(this._updatePos(4), e3);
    }, e2.prototype.writeUInt32 = function(e3) {
      this.putUInt32(this._updatePos(4), e3);
    }, e2.prototype.writeInt64 = function(e3) {
      this.putInt64(this._updatePos(8), e3);
    }, e2.prototype.writeFloat64 = function(e3) {
      this.putFloat64(this._updatePos(8), e3);
    }, e2.prototype.writeVarInt = function(e3) {
      var t2 = this.putVarInt(this.position, e3);
      this._updatePos(t2);
    }, e2.prototype.writeBytes = function(e3) {
      this.putBytes(this._updatePos(e3.remaining()), e3);
    }, e2.prototype.readSlice = function(e3) {
      return this.getSlice(this._updatePos(e3), e3);
    }, e2.prototype._updatePos = function(e3) {
      var t2 = this.position;
      return this.position += e3, t2;
    }, e2.prototype.remaining = function() {
      return this.length - this.position;
    }, e2.prototype.hasRemaining = function() {
      return this.remaining() > 0;
    }, e2.prototype.reset = function() {
      this.position = 0;
    }, e2.prototype.toString = function() {
      return this.constructor.name + "( position=" + this.position + " )\n  " + this.toHex();
    }, e2.prototype.toHex = function() {
      for (var e3 = "", t2 = 0; t2 < this.length; t2++) {
        var r3 = this.getUInt8(t2).toString(16);
        1 === r3.length && (r3 = "0" + r3), e3 += r3, t2 !== this.length - 1 && (e3 += " ");
      }
      return e3;
    }, e2;
  }();
  t.default = n2;
  var o2 = function(e2) {
    function t2(t3, r3, n3) {
      var o3 = e2.call(this, r3) || this;
      return o3._start = t3, o3._inner = n3, o3;
    }
    return r2(t2, e2), t2.prototype.putUInt8 = function(e3, t3) {
      this._inner.putUInt8(this._start + e3, t3);
    }, t2.prototype.getUInt8 = function(e3) {
      return this._inner.getUInt8(this._start + e3);
    }, t2.prototype.putInt8 = function(e3, t3) {
      this._inner.putInt8(this._start + e3, t3);
    }, t2.prototype.putFloat64 = function(e3, t3) {
      this._inner.putFloat64(this._start + e3, t3);
    }, t2.prototype.getInt8 = function(e3) {
      return this._inner.getInt8(this._start + e3);
    }, t2.prototype.getFloat64 = function(e3) {
      return this._inner.getFloat64(this._start + e3);
    }, t2;
  }(n2);
}, 93: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.getBrokenObjectReason = t.isBrokenObject = t.createBrokenObject = void 0;
  var r2 = "__isBrokenObject__", n2 = "__reason__";
  t.createBrokenObject = function(e2, t2) {
    void 0 === t2 && (t2 = {});
    var o2 = function() {
      throw e2;
    };
    return new Proxy(t2, { get: function(t3, i2) {
      return i2 === r2 || (i2 === n2 ? e2 : void ("toJSON" !== i2 && o2()));
    }, set: o2, apply: o2, construct: o2, defineProperty: o2, deleteProperty: o2, getOwnPropertyDescriptor: o2, getPrototypeOf: o2, has: o2, isExtensible: o2, ownKeys: o2, preventExtensions: o2, setPrototypeOf: o2 });
  }, t.isBrokenObject = function(e2) {
    return null !== e2 && "object" == typeof e2 && true === e2[r2];
  }, t.getBrokenObjectReason = function(e2) {
    return e2[n2];
  };
}, 95: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true }), t.AsyncSubject = void 0;
  var o2 = function(e2) {
    function t2() {
      var t3 = null !== e2 && e2.apply(this, arguments) || this;
      return t3._value = null, t3._hasValue = false, t3._isComplete = false, t3;
    }
    return n2(t2, e2), t2.prototype._checkFinalizedStatuses = function(e3) {
      var t3 = this, r3 = t3.hasError, n3 = t3._hasValue, o3 = t3._value, i2 = t3.thrownError, a2 = t3.isStopped, u2 = t3._isComplete;
      r3 ? e3.error(i2) : (a2 || u2) && (n3 && e3.next(o3), e3.complete());
    }, t2.prototype.next = function(e3) {
      this.isStopped || (this._value = e3, this._hasValue = true);
    }, t2.prototype.complete = function() {
      var t3 = this, r3 = t3._hasValue, n3 = t3._value;
      t3._isComplete || (this._isComplete = true, r3 && e2.prototype.next.call(this, n3), e2.prototype.complete.call(this));
    }, t2;
  }(r2(2483).Subject);
  t.AsyncSubject = o2;
}, 137: (e) => {
  e.exports = class {
    constructor(e2, t, r2, n2) {
      let o2;
      if ("object" == typeof e2) {
        let i2 = e2;
        e2 = i2.k_p, t = i2.k_i, r2 = i2.k_d, n2 = i2.dt, o2 = i2.i_max;
      }
      this.k_p = "number" == typeof e2 ? e2 : 1, this.k_i = t || 0, this.k_d = r2 || 0, this.dt = n2 || 0, this.i_max = o2 || 0, this.sumError = 0, this.lastError = 0, this.lastTime = 0, this.target = 0;
    }
    setTarget(e2) {
      this.target = e2;
    }
    update(e2) {
      this.currentValue = e2;
      let t = this.dt;
      if (!t) {
        let e3 = Date.now();
        t = 0 === this.lastTime ? 0 : (e3 - this.lastTime) / 1e3, this.lastTime = e3;
      }
      "number" == typeof t && 0 !== t || (t = 1);
      let r2 = this.target - this.currentValue;
      if (this.sumError = this.sumError + r2 * t, this.i_max > 0 && Math.abs(this.sumError) > this.i_max) {
        let e3 = this.sumError > 0 ? 1 : -1;
        this.sumError = e3 * this.i_max;
      }
      let n2 = (r2 - this.lastError) / t;
      return this.lastError = r2, this.k_p * r2 + this.k_i * this.sumError + this.k_d * n2;
    }
    reset() {
      this.sumError = 0, this.lastError = 0, this.lastTime = 0;
    }
  };
}, 182: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true }), t.VirtualAction = t.VirtualTimeScheduler = void 0;
  var o2 = r2(5267), i2 = r2(8014), a2 = function(e2) {
    function t2(t3, r3) {
      void 0 === t3 && (t3 = u2), void 0 === r3 && (r3 = 1 / 0);
      var n3 = e2.call(this, t3, function() {
        return n3.frame;
      }) || this;
      return n3.maxFrames = r3, n3.frame = 0, n3.index = -1, n3;
    }
    return n2(t2, e2), t2.prototype.flush = function() {
      for (var e3, t3, r3 = this.actions, n3 = this.maxFrames; (t3 = r3[0]) && t3.delay <= n3 && (r3.shift(), this.frame = t3.delay, !(e3 = t3.execute(t3.state, t3.delay))); ) ;
      if (e3) {
        for (; t3 = r3.shift(); ) t3.unsubscribe();
        throw e3;
      }
    }, t2.frameTimeFactor = 10, t2;
  }(r2(5648).AsyncScheduler);
  t.VirtualTimeScheduler = a2;
  var u2 = function(e2) {
    function t2(t3, r3, n3) {
      void 0 === n3 && (n3 = t3.index += 1);
      var o3 = e2.call(this, t3, r3) || this;
      return o3.scheduler = t3, o3.work = r3, o3.index = n3, o3.active = true, o3.index = t3.index = n3, o3;
    }
    return n2(t2, e2), t2.prototype.schedule = function(r3, n3) {
      if (void 0 === n3 && (n3 = 0), Number.isFinite(n3)) {
        if (!this.id) return e2.prototype.schedule.call(this, r3, n3);
        this.active = false;
        var o3 = new t2(this.scheduler, this.work);
        return this.add(o3), o3.schedule(r3, n3);
      }
      return i2.Subscription.EMPTY;
    }, t2.prototype.requestAsyncId = function(e3, r3, n3) {
      void 0 === n3 && (n3 = 0), this.delay = e3.frame + n3;
      var o3 = e3.actions;
      return o3.push(this), o3.sort(t2.sortActions), 1;
    }, t2.prototype.recycleAsyncId = function(e3, t3, r3) {
      void 0 === r3 && (r3 = 0);
    }, t2.prototype._execute = function(t3, r3) {
      if (true === this.active) return e2.prototype._execute.call(this, t3, r3);
    }, t2.sortActions = function(e3, t3) {
      return e3.delay === t3.delay ? e3.index === t3.index ? 0 : e3.index > t3.index ? 1 : -1 : e3.delay > t3.delay ? 1 : -1;
    }, t2;
  }(o2.AsyncAction);
  t.VirtualAction = u2;
}, 187: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.zipAll = void 0;
  var n2 = r2(7286), o2 = r2(3638);
  t.zipAll = function(e2) {
    return o2.joinAllInternals(n2.zip, e2);
  };
}, 206: function(e, t, r2) {
  var n2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.RoutingTable = t.Rediscovery = void 0;
  var o2 = n2(r2(4151));
  t.Rediscovery = o2.default;
  var i2 = n2(r2(9018));
  t.RoutingTable = i2.default, t.default = o2.default;
}, 245: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.not = void 0, t.not = function(e2, t2) {
    return function(r2, n2) {
      return !e2.call(t2, r2, n2);
    };
  };
}, 269: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.startWith = void 0;
  var n2 = r2(3865), o2 = r2(1107), i2 = r2(7843);
  t.startWith = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    var r3 = o2.popScheduler(e2);
    return i2.operate(function(t3, o3) {
      (r3 ? n2.concat(e2, t3, r3) : n2.concat(e2, t3)).subscribe(o3);
    });
  };
}, 326: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.TELEMETRY_APIS = t.BOLT_PROTOCOL_V5_8 = t.BOLT_PROTOCOL_V5_7 = t.BOLT_PROTOCOL_V5_6 = t.BOLT_PROTOCOL_V5_5 = t.BOLT_PROTOCOL_V5_4 = t.BOLT_PROTOCOL_V5_3 = t.BOLT_PROTOCOL_V5_2 = t.BOLT_PROTOCOL_V5_1 = t.BOLT_PROTOCOL_V5_0 = t.BOLT_PROTOCOL_V4_4 = t.BOLT_PROTOCOL_V4_3 = t.BOLT_PROTOCOL_V4_2 = t.BOLT_PROTOCOL_V4_1 = t.BOLT_PROTOCOL_V4_0 = t.BOLT_PROTOCOL_V3 = t.BOLT_PROTOCOL_V2 = t.BOLT_PROTOCOL_V1 = t.DEFAULT_POOL_MAX_SIZE = t.DEFAULT_POOL_ACQUISITION_TIMEOUT = t.DEFAULT_CONNECTION_TIMEOUT_MILLIS = t.ACCESS_MODE_WRITE = t.ACCESS_MODE_READ = t.FETCH_ALL = void 0, t.FETCH_ALL = -1, t.DEFAULT_POOL_ACQUISITION_TIMEOUT = 6e4, t.DEFAULT_POOL_MAX_SIZE = 100, t.DEFAULT_CONNECTION_TIMEOUT_MILLIS = 3e4, t.ACCESS_MODE_READ = "READ", t.ACCESS_MODE_WRITE = "WRITE", t.BOLT_PROTOCOL_V1 = 1, t.BOLT_PROTOCOL_V2 = 2, t.BOLT_PROTOCOL_V3 = 3, t.BOLT_PROTOCOL_V4_0 = 4, t.BOLT_PROTOCOL_V4_1 = 4.1, t.BOLT_PROTOCOL_V4_2 = 4.2, t.BOLT_PROTOCOL_V4_3 = 4.3, t.BOLT_PROTOCOL_V4_4 = 4.4, t.BOLT_PROTOCOL_V5_0 = 5, t.BOLT_PROTOCOL_V5_1 = 5.1, t.BOLT_PROTOCOL_V5_2 = 5.2, t.BOLT_PROTOCOL_V5_3 = 5.3, t.BOLT_PROTOCOL_V5_4 = 5.4, t.BOLT_PROTOCOL_V5_5 = 5.5, t.BOLT_PROTOCOL_V5_6 = 5.6, t.BOLT_PROTOCOL_V5_7 = 5.7, t.BOLT_PROTOCOL_V5_8 = 5.8, t.TELEMETRY_APIS = { MANAGED_TRANSACTION: 0, UNMANAGED_TRANSACTION: 1, AUTO_COMMIT_TRANSACTION: 2, EXECUTE_QUERY: 3 };
}, 347: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.fromEventPattern = void 0;
  var n2 = r2(4662), o2 = r2(1018), i2 = r2(1251);
  t.fromEventPattern = function e2(t2, r3, a2) {
    return a2 ? e2(t2, r3).pipe(i2.mapOneOrManyArgs(a2)) : new n2.Observable(function(e3) {
      var n3 = function() {
        for (var t3 = [], r4 = 0; r4 < arguments.length; r4++) t3[r4] = arguments[r4];
        return e3.next(1 === t3.length ? t3[0] : t3);
      }, i3 = t2(n3);
      return o2.isFunction(r3) ? function() {
        return r3(n3, i3);
      } : void 0;
    });
  };
}, 361: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, o2 = this && this.__spreadArray || function(e2, t2) {
    for (var r3 = 0, n3 = t2.length, o3 = e2.length; r3 < n3; r3++, o3++) e2[o3] = t2[r3];
    return e2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.merge = void 0;
  var i2 = r2(7843), a2 = r2(7302), u2 = r2(1107), s2 = r2(4917);
  t.merge = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    var r3 = u2.popScheduler(e2), c2 = u2.popNumber(e2, 1 / 0);
    return i2.operate(function(t3, i3) {
      a2.mergeAll(c2)(s2.from(o2([t3], n2(e2)), r3)).subscribe(i3);
    });
  };
}, 373: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.Dechunker = t.Chunker = void 0;
  var i2 = o2(r2(45)), a2 = r2(5319), u2 = o2(r2(5553)), s2 = function(e2) {
    function t2(t3, r3) {
      var n3 = e2.call(this, 0) || this;
      return n3._bufferSize = r3 || 1400, n3._ch = t3, n3._buffer = (0, a2.alloc)(n3._bufferSize), n3._currentChunkStart = 0, n3._chunkOpen = false, n3;
    }
    return n2(t2, e2), t2.prototype.putUInt8 = function(e3, t3) {
      this._ensure(1), this._buffer.writeUInt8(t3);
    }, t2.prototype.putInt8 = function(e3, t3) {
      this._ensure(1), this._buffer.writeInt8(t3);
    }, t2.prototype.putFloat64 = function(e3, t3) {
      this._ensure(8), this._buffer.writeFloat64(t3);
    }, t2.prototype.putBytes = function(e3, t3) {
      for (; t3.remaining() > 0; ) this._ensure(1), this._buffer.remaining() > t3.remaining() ? this._buffer.writeBytes(t3) : this._buffer.writeBytes(t3.readSlice(this._buffer.remaining()));
      return this;
    }, t2.prototype.flush = function() {
      if (this._buffer.position > 0) {
        this._closeChunkIfOpen();
        var e3 = this._buffer;
        this._buffer = null, this._ch.write(e3.getSlice(0, e3.position)), this._buffer = (0, a2.alloc)(this._bufferSize), this._chunkOpen = false;
      }
      return this;
    }, t2.prototype.messageBoundary = function() {
      this._closeChunkIfOpen(), this._buffer.remaining() < 2 && this.flush(), this._buffer.writeInt16(0);
    }, t2.prototype._ensure = function(e3) {
      var t3 = this._chunkOpen ? e3 : e3 + 2;
      this._buffer.remaining() < t3 && this.flush(), this._chunkOpen || (this._currentChunkStart = this._buffer.position, this._buffer.position = this._buffer.position + 2, this._chunkOpen = true);
    }, t2.prototype._closeChunkIfOpen = function() {
      if (this._chunkOpen) {
        var e3 = this._buffer.position - (this._currentChunkStart + 2);
        this._buffer.putUInt16(this._currentChunkStart, e3), this._chunkOpen = false;
      }
    }, t2;
  }(i2.default);
  t.Chunker = s2;
  var c2 = function() {
    function e2() {
      this._currentMessage = [], this._partialChunkHeader = 0, this._state = this.AWAITING_CHUNK;
    }
    return e2.prototype.AWAITING_CHUNK = function(e3) {
      return e3.remaining() >= 2 ? this._onHeader(e3.readUInt16()) : (this._partialChunkHeader = e3.readUInt8() << 8, this.IN_HEADER);
    }, e2.prototype.IN_HEADER = function(e3) {
      return this._onHeader(65535 & (this._partialChunkHeader | e3.readUInt8()));
    }, e2.prototype.IN_CHUNK = function(e3) {
      return this._chunkSize <= e3.remaining() ? (this._currentMessage.push(e3.readSlice(this._chunkSize)), this.AWAITING_CHUNK) : (this._chunkSize -= e3.remaining(), this._currentMessage.push(e3.readSlice(e3.remaining())), this.IN_CHUNK);
    }, e2.prototype.CLOSED = function(e3) {
    }, e2.prototype._onHeader = function(e3) {
      if (0 === e3) {
        var t2 = void 0;
        switch (this._currentMessage.length) {
          case 0:
            return this.AWAITING_CHUNK;
          case 1:
            t2 = this._currentMessage[0];
            break;
          default:
            t2 = new u2.default(this._currentMessage);
        }
        return this._currentMessage = [], this.onmessage(t2), this.AWAITING_CHUNK;
      }
      return this._chunkSize = e3, this.IN_CHUNK;
    }, e2.prototype.write = function(e3) {
      for (; e3.hasRemaining(); ) this._state = this._state(e3);
    }, e2;
  }();
  t.Dechunker = c2;
}, 378: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.defaultIfEmpty = void 0;
  var n2 = r2(7843), o2 = r2(3111);
  t.defaultIfEmpty = function(e2) {
    return n2.operate(function(t2, r3) {
      var n3 = false;
      t2.subscribe(o2.createOperatorSubscriber(r3, function(e3) {
        n3 = true, r3.next(e3);
      }, function() {
        n3 || r3.next(e2), r3.complete();
      }));
    });
  };
}, 397: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.assertNotificationFilterIsEmpty = t.assertImpersonatedUserIsEmpty = t.assertTxConfigIsEmpty = t.assertDatabaseIsEmpty = void 0;
  var n2 = r2(9305);
  r2(9014), t.assertTxConfigIsEmpty = function(e2, t2, r3) {
    if (void 0 === t2 && (t2 = function() {
    }), e2 && !e2.isEmpty()) {
      var o2 = (0, n2.newError)("Driver is connected to the database that does not support transaction configuration. Please upgrade to neo4j 3.5.0 or later in order to use this functionality");
      throw t2(o2.message), r3.onError(o2), o2;
    }
  }, t.assertDatabaseIsEmpty = function(e2, t2, r3) {
    if (void 0 === t2 && (t2 = function() {
    }), e2) {
      var o2 = (0, n2.newError)("Driver is connected to the database that does not support multiple databases. Please upgrade to neo4j 4.0.0 or later in order to use this functionality");
      throw t2(o2.message), r3.onError(o2), o2;
    }
  }, t.assertImpersonatedUserIsEmpty = function(e2, t2, r3) {
    if (void 0 === t2 && (t2 = function() {
    }), e2) {
      var o2 = (0, n2.newError)("Driver is connected to the database that does not support user impersonation. Please upgrade to neo4j 4.4.0 or later in order to use this functionality. " + "Trying to impersonate ".concat(e2, "."));
      throw t2(o2.message), r3.onError(o2), o2;
    }
  }, t.assertNotificationFilterIsEmpty = function(e2, t2, r3) {
    if (void 0 === t2 && (t2 = function() {
    }), void 0 !== e2) {
      var o2 = (0, n2.newError)("Driver is connected to a database that does not support user notification filters. Please upgrade to Neo4j 5.7.0 or later in order to use this functionality. " + "Trying to set notifications to ".concat(n2.json.stringify(e2), "."));
      throw t2(o2.message), r3.onError(o2), o2;
    }
  };
}, 407: function(e, t, r2) {
  var n2 = this && this.__assign || function() {
    return n2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, n2.apply(this, arguments);
  }, o2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.Url = t.formatIPv6Address = t.formatIPv4Address = t.defaultPortForScheme = t.parseDatabaseUrl = void 0;
  var i2 = r2(6587), a2 = function(e2, t2, r3, n3, o3) {
    this.scheme = e2, this.host = t2, this.port = r3, this.hostAndPort = n3, this.query = o3;
  };
  function u2(e2, t2, r3) {
    if ("" === (e2 = (null != e2 ? e2 : "").trim())) throw new Error("Illegal empty ".concat(t2, " in URL query '").concat(r3, "'"));
    return e2;
  }
  function s2(e2) {
    var t2 = "[" === e2.charAt(0), r3 = "]" === e2.charAt(e2.length - 1);
    if (t2 || r3) {
      if (t2 && r3) return e2;
      throw new Error("Illegal IPv6 address ".concat(e2));
    }
    return "[".concat(e2, "]");
  }
  function c2(e2) {
    return "http" === e2 ? 7474 : "https" === e2 ? 7473 : 7687;
  }
  t.Url = a2, t.parseDatabaseUrl = function(e2) {
    var t2;
    (0, i2.assertString)(e2, "URL");
    var r3, l2 = function(e3) {
      return (e3 = e3.trim()).includes("://") ? { schemeMissing: false, url: e3 } : { schemeMissing: true, url: "none://".concat(e3) };
    }(e2), f2 = function(e3) {
      function t3(e4, t4) {
        var r5 = e4.indexOf(t4);
        return r5 >= 0 ? [e4.substring(0, r5), e4[r5], e4.substring(r5 + 1)] : [e4, "", ""];
      }
      var r4, i3 = {};
      return ":" === (r4 = t3(e3, ":"))[1] && (i3.scheme = decodeURIComponent(r4[0]), e3 = r4[2]), "#" === (r4 = t3(e3, "#"))[1] && (i3.fragment = decodeURIComponent(r4[2]), e3 = r4[0]), "?" === (r4 = t3(e3, "?"))[1] && (i3.query = r4[2], e3 = r4[0]), e3.startsWith("//") ? (r4 = t3(e3.substr(2), "/"), (i3 = n2(n2({}, i3), function(e4) {
        var r5, n3 = {};
        "@" === (r5 = function(e5, t4) {
          var r6 = e5.lastIndexOf(t4);
          return r6 >= 0 ? [e5.substring(0, r6), e5[r6], e5.substring(r6 + 1)] : ["", "", e5];
        }(e4, "@"))[1] && (n3.userInfo = decodeURIComponent(r5[0]), e4 = r5[2]);
        var i4 = o2(function(e5, r6, n4) {
          var o3 = t3(e5, r6), i5 = t3(o3[2], n4);
          return [i5[0], i5[2]];
        }(e4, "[", "]"), 2), a3 = i4[0], u3 = i4[1];
        return "" !== a3 ? (n3.host = a3, r5 = t3(u3, ":")) : (r5 = t3(e4, ":"), n3.host = r5[0]), ":" === r5[1] && (n3.port = r5[2]), n3;
      }(r4[0]))).path = r4[1] + r4[2]) : i3.path = e3, i3;
    }(l2.url), h2 = l2.schemeMissing ? null : function(e3) {
      return null != e3 ? (":" === (e3 = e3.trim()).charAt(e3.length - 1) && (e3 = e3.substring(0, e3.length - 1)), e3) : null;
    }(f2.scheme), d2 = function(e3) {
      if (null == e3) throw new Error("Unable to extract host from null or undefined URL");
      return e3.trim();
    }(f2.host), p3 = function(e3) {
      if ("" === e3 || null == e3) throw new Error("Illegal host ".concat(e3));
      return e3.includes(":") ? s2(e3) : e3;
    }(d2), v3 = function(e3, t3) {
      var r4 = "string" == typeof e3 ? parseInt(e3, 10) : e3;
      return null == r4 || isNaN(r4) ? c2(t3) : r4;
    }(f2.port, h2), y3 = "".concat(p3, ":").concat(v3), b2 = function(e3, t3) {
      var r4 = null != e3 ? function(e4) {
        return "?" === (null == (e4 = (null != e4 ? e4 : "").trim()) ? void 0 : e4.charAt(0)) && (e4 = e4.substring(1, e4.length)), e4;
      }(e3) : null, n3 = {};
      return null != r4 && r4.split("&").forEach(function(e4) {
        var r5 = e4.split("=");
        if (2 !== r5.length) throw new Error("Invalid parameters: '".concat(r5.toString(), "' in URL '").concat(t3, "'."));
        var o3 = u2(r5[0], "key", t3), i3 = u2(r5[1], "value", t3);
        if (void 0 !== n3[o3]) throw new Error("Duplicated query parameters with key '".concat(o3, "' in URL '").concat(t3, "'"));
        n3[o3] = i3;
      }), n3;
    }(null !== (t2 = f2.query) && void 0 !== t2 ? t2 : "string" != typeof (r3 = f2.resourceName) ? null : o2(r3.split("?"), 2)[1], e2);
    return new a2(h2, d2, v3, y3, b2);
  }, t.formatIPv4Address = function(e2, t2) {
    return "".concat(e2, ":").concat(t2);
  }, t.formatIPv6Address = function(e2, t2) {
    var r3 = s2(e2);
    return "".concat(r3, ":").concat(t2);
  }, t.defaultPortForScheme = c2;
}, 481: (e, t, r2) => {
  e.exports = r2(137);
}, 489: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.TimeInterval = t.timeInterval = void 0;
  var n2 = r2(7961), o2 = r2(7843), i2 = r2(3111);
  t.timeInterval = function(e2) {
    return void 0 === e2 && (e2 = n2.asyncScheduler), o2.operate(function(t2, r3) {
      var n3 = e2.now();
      t2.subscribe(i2.createOperatorSubscriber(r3, function(t3) {
        var o3 = e2.now(), i3 = o3 - n3;
        n3 = o3, r3.next(new a2(t3, i3));
      }));
    });
  };
  var a2 = function(e2, t2) {
    this.value = e2, this.interval = t2;
  };
  t.TimeInterval = a2;
}, 490: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.ignoreElements = void 0;
  var n2 = r2(7843), o2 = r2(3111), i2 = r2(1342);
  t.ignoreElements = function() {
    return n2.operate(function(e2, t2) {
      e2.subscribe(o2.createOperatorSubscriber(t2, i2.noop));
    });
  };
}, 582: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.sequenceEqual = void 0;
  var n2 = r2(7843), o2 = r2(3111), i2 = r2(9445);
  t.sequenceEqual = function(e2, t2) {
    return void 0 === t2 && (t2 = function(e3, t3) {
      return e3 === t3;
    }), n2.operate(function(r3, n3) {
      var a2 = { buffer: [], complete: false }, u2 = { buffer: [], complete: false }, s2 = function(e3) {
        n3.next(e3), n3.complete();
      }, c2 = function(e3, r4) {
        var i3 = o2.createOperatorSubscriber(n3, function(n4) {
          var o3 = r4.buffer, i4 = r4.complete;
          0 === o3.length ? i4 ? s2(false) : e3.buffer.push(n4) : !t2(n4, o3.shift()) && s2(false);
        }, function() {
          e3.complete = true;
          var t3 = r4.complete, n4 = r4.buffer;
          t3 && s2(0 === n4.length), null == i3 || i3.unsubscribe();
        });
        return i3;
      };
      r3.subscribe(c2(a2, u2)), i2.innerFrom(e2).subscribe(c2(u2, a2));
    });
  };
}, 614: function(e, t) {
  var r2 = this && this.__awaiter || function(e2, t2, r3, n3) {
    return new (r3 || (r3 = Promise))(function(o2, i2) {
      function a2(e3) {
        try {
          s2(n3.next(e3));
        } catch (e4) {
          i2(e4);
        }
      }
      function u2(e3) {
        try {
          s2(n3.throw(e3));
        } catch (e4) {
          i2(e4);
        }
      }
      function s2(e3) {
        var t3;
        e3.done ? o2(e3.value) : (t3 = e3.value, t3 instanceof r3 ? t3 : new r3(function(e4) {
          e4(t3);
        })).then(a2, u2);
      }
      s2((n3 = n3.apply(e2, t2 || [])).next());
    });
  }, n2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o2, i2, a2 = { label: 0, sent: function() {
      if (1 & o2[0]) throw o2[1];
      return o2[1];
    }, trys: [], ops: [] };
    return i2 = { next: u2(0), throw: u2(1), return: u2(2) }, "function" == typeof Symbol && (i2[Symbol.iterator] = function() {
      return this;
    }), i2;
    function u2(u3) {
      return function(s2) {
        return function(u4) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; i2 && (i2 = 0, u4[0] && (a2 = 0)), a2; ) try {
            if (r3 = 1, n3 && (o2 = 2 & u4[0] ? n3.return : u4[0] ? n3.throw || ((o2 = n3.return) && o2.call(n3), 0) : n3.next) && !(o2 = o2.call(n3, u4[1])).done) return o2;
            switch (n3 = 0, o2 && (u4 = [2 & u4[0], o2.value]), u4[0]) {
              case 0:
              case 1:
                o2 = u4;
                break;
              case 4:
                return a2.label++, { value: u4[1], done: false };
              case 5:
                a2.label++, n3 = u4[1], u4 = [0];
                continue;
              case 7:
                u4 = a2.ops.pop(), a2.trys.pop();
                continue;
              default:
                if (!((o2 = (o2 = a2.trys).length > 0 && o2[o2.length - 1]) || 6 !== u4[0] && 2 !== u4[0])) {
                  a2 = 0;
                  continue;
                }
                if (3 === u4[0] && (!o2 || u4[1] > o2[0] && u4[1] < o2[3])) {
                  a2.label = u4[1];
                  break;
                }
                if (6 === u4[0] && a2.label < o2[1]) {
                  a2.label = o2[1], o2 = u4;
                  break;
                }
                if (o2 && a2.label < o2[2]) {
                  a2.label = o2[2], a2.ops.push(u4);
                  break;
                }
                o2[2] && a2.ops.pop(), a2.trys.pop();
                continue;
            }
            u4 = t2.call(e2, a2);
          } catch (e3) {
            u4 = [6, e3], n3 = 0;
          } finally {
            r3 = o2 = 0;
          }
          if (5 & u4[0]) throw u4[1];
          return { value: u4[0] ? u4[1] : void 0, done: true };
        }([u3, s2]);
      };
    }
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.default = { load: function(e2) {
    return r2(this, void 0, void 0, function() {
      return n2(this, function(t2) {
        return [2, e2];
      });
    });
  } };
}, 715: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true });
  var r2 = function() {
    function e2(e3) {
      this._offset = e3 || 0;
    }
    return e2.prototype.next = function(e3) {
      if (0 === e3) return -1;
      var t2 = this._offset;
      return this._offset += 1, this._offset === Number.MAX_SAFE_INTEGER && (this._offset = 0), t2 % e3;
    }, e2;
  }();
  t.default = r2;
}, 754: function(e, t, r2) {
  var n2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3);
    var o3 = Object.getOwnPropertyDescriptor(t2, r3);
    o3 && !("get" in o3 ? !t2.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
      return t2[r3];
    } }), Object.defineProperty(e2, n3, o3);
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), o2 = this && this.__setModuleDefault || (Object.create ? function(e2, t2) {
    Object.defineProperty(e2, "default", { enumerable: true, value: t2 });
  } : function(e2, t2) {
    e2.default = t2;
  }), i2 = this && this.__importStar || function(e2) {
    if (e2 && e2.__esModule) return e2;
    var t2 = {};
    if (null != e2) for (var r3 in e2) "default" !== r3 && Object.prototype.hasOwnProperty.call(e2, r3) && n2(t2, e2, r3);
    return o2(t2, e2), t2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.TxConfig = void 0;
  var a2 = i2(r2(6587)), u2 = r2(9691), s2 = r2(3371), c2 = function() {
    function e2(e3, t2) {
      !function(e4) {
        null != e4 && a2.assertObject(e4, "Transaction config");
      }(e3), this.timeout = function(e4, t3) {
        if (a2.isObject(e4) && null != e4.timeout) {
          a2.assertNumberOrInteger(e4.timeout, "Transaction timeout"), function(e5) {
            return "number" == typeof e5.timeout && !Number.isInteger(e5.timeout);
          }(e4) && true === (null == t3 ? void 0 : t3.isInfoEnabled()) && (null == t3 || t3.info("Transaction timeout expected to be an integer, got: ".concat(e4.timeout, ". The value will be rounded up.")));
          var r3 = (0, s2.int)(e4.timeout, { ceilFloat: true });
          if (r3.isNegative()) throw (0, u2.newError)("Transaction timeout should not be negative");
          return r3;
        }
        return null;
      }(e3, t2), this.metadata = function(e4) {
        if (a2.isObject(e4) && null != e4.metadata) {
          var t3 = e4.metadata;
          if (a2.assertObject(t3, "config.metadata"), 0 !== Object.keys(t3).length) return t3;
        }
        return null;
      }(e3);
    }
    return e2.empty = function() {
      return l2;
    }, e2.prototype.isEmpty = function() {
      return Object.values(this).every(function(e3) {
        return null == e3;
      });
    }, e2;
  }();
  t.TxConfig = c2;
  var l2 = new c2({});
}, 766: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.publish = void 0;
  var n2 = r2(2483), o2 = r2(9247), i2 = r2(1483);
  t.publish = function(e2) {
    return e2 ? function(t2) {
      return i2.connect(e2)(t2);
    } : function(e3) {
      return o2.multicast(new n2.Subject())(e3);
    };
  };
}, 783: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.filter = void 0;
  var n2 = r2(7843), o2 = r2(3111);
  t.filter = function(e2, t2) {
    return n2.operate(function(r3, n3) {
      var i2 = 0;
      r3.subscribe(o2.createOperatorSubscriber(n3, function(r4) {
        return e2.call(t2, r4, i2++) && n3.next(r4);
      }));
    });
  };
}, 827: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true }), t.AsapScheduler = void 0;
  var o2 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), t2.prototype.flush = function(e3) {
      this._active = true;
      var t3 = this._scheduled;
      this._scheduled = void 0;
      var r3, n3 = this.actions;
      e3 = e3 || n3.shift();
      do {
        if (r3 = e3.execute(e3.state, e3.delay)) break;
      } while ((e3 = n3[0]) && e3.id === t3 && n3.shift());
      if (this._active = false, r3) {
        for (; (e3 = n3[0]) && e3.id === t3 && n3.shift(); ) e3.unsubscribe();
        throw r3;
      }
    }, t2;
  }(r2(5648).AsyncScheduler);
  t.AsapScheduler = o2;
}, 844: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = o2(r2(1711)), a2 = r2(397), u2 = o2(r2(7449)), s2 = o2(r2(3321)), c2 = o2(r2(7021)), l2 = r2(9014), f2 = r2(9305).internal.constants.BOLT_PROTOCOL_V5_0, h2 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), Object.defineProperty(t2.prototype, "version", { get: function() {
      return f2;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "transformer", { get: function() {
      var e3 = this;
      return void 0 === this._transformer && (this._transformer = new s2.default(Object.values(u2.default).map(function(t3) {
        return t3(e3._config, e3._log);
      }))), this._transformer;
    }, enumerable: false, configurable: true }), t2.prototype.initialize = function(e3) {
      var t3 = this, r3 = void 0 === e3 ? {} : e3, n3 = r3.userAgent, o3 = (r3.boltAgent, r3.authToken), i3 = r3.notificationFilter, u3 = r3.onError, s3 = r3.onComplete, f3 = new l2.LoginObserver({ onError: function(e4) {
        return t3._onLoginError(e4, u3);
      }, onCompleted: function(e4) {
        return t3._onLoginCompleted(e4, o3, s3);
      } });
      return (0, a2.assertNotificationFilterIsEmpty)(i3, this._onProtocolError, f3), this.write(c2.default.hello(n3, o3, this._serversideRouting), f3, true), f3;
    }, t2;
  }(i2.default);
  t.default = h2;
}, 846: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.take = void 0;
  var n2 = r2(8616), o2 = r2(7843), i2 = r2(3111);
  t.take = function(e2) {
    return e2 <= 0 ? function() {
      return n2.EMPTY;
    } : o2.operate(function(t2, r3) {
      var n3 = 0;
      t2.subscribe(i2.createOperatorSubscriber(r3, function(t3) {
        ++n3 <= e2 && (r3.next(t3), e2 <= n3 && r3.complete());
      }));
    });
  };
}, 854: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.scheduleAsyncIterable = void 0;
  var n2 = r2(4662), o2 = r2(7110);
  t.scheduleAsyncIterable = function(e2, t2) {
    if (!e2) throw new Error("Iterable cannot be null");
    return new n2.Observable(function(r3) {
      o2.executeSchedule(r3, t2, function() {
        var n3 = e2[Symbol.asyncIterator]();
        o2.executeSchedule(r3, t2, function() {
          n3.next().then(function(e3) {
            e3.done ? r3.complete() : r3.next(e3.value);
          });
        }, 0, true);
      });
    });
  };
}, 914: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.delay = void 0;
  var n2 = r2(7961), o2 = r2(8766), i2 = r2(4092);
  t.delay = function(e2, t2) {
    void 0 === t2 && (t2 = n2.asyncScheduler);
    var r3 = i2.timer(e2, t2);
    return o2.delayWhen(function() {
      return r3;
    });
  };
}, 934: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__assign || function() {
    return o2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, o2.apply(this, arguments);
  }, i2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var a2 = i2(r2(6345)), u2 = i2(r2(3019)), s2 = i2(r2(3321)), c2 = i2(r2(7021)), l2 = r2(9014), f2 = r2(9305).internal.constants, h2 = f2.BOLT_PROTOCOL_V5_2, d2 = f2.FETCH_ALL, p3 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), Object.defineProperty(t2.prototype, "version", { get: function() {
      return h2;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "transformer", { get: function() {
      var e3 = this;
      return void 0 === this._transformer && (this._transformer = new s2.default(Object.values(u2.default).map(function(t3) {
        return t3(e3._config, e3._log);
      }))), this._transformer;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "supportsReAuth", { get: function() {
      return true;
    }, enumerable: false, configurable: true }), t2.prototype.initialize = function(e3) {
      var t3 = this, r3 = void 0 === e3 ? {} : e3, n3 = r3.userAgent, i3 = (r3.boltAgent, r3.authToken), a3 = r3.notificationFilter, u3 = r3.onError, s3 = r3.onComplete, f3 = {}, h3 = new l2.LoginObserver({ onError: function(e4) {
        return t3._onLoginError(e4, u3);
      }, onCompleted: function(e4) {
        return f3.metadata = e4, t3._onLoginCompleted(e4);
      } });
      return this.write(c2.default.hello5x2(n3, a3, this._serversideRouting), h3, false), this.logon({ authToken: i3, onComplete: function(e4) {
        return s3(o2(o2({}, e4), f3.metadata));
      }, onError: u3, flush: true });
    }, t2.prototype.beginTransaction = function(e3) {
      var t3 = void 0 === e3 ? {} : e3, r3 = t3.bookmarks, n3 = t3.txConfig, o3 = t3.database, i3 = t3.mode, a3 = t3.impersonatedUser, u3 = t3.notificationFilter, s3 = t3.beforeError, f3 = t3.afterError, h3 = t3.beforeComplete, d3 = t3.afterComplete, p4 = new l2.ResultStreamObserver({ server: this._server, beforeError: s3, afterError: f3, beforeComplete: h3, afterComplete: d3 });
      return p4.prepareToHandleSingleResponse(), this.write(c2.default.begin({ bookmarks: r3, txConfig: n3, database: o3, mode: i3, impersonatedUser: a3, notificationFilter: u3 }), p4, true), p4;
    }, t2.prototype.run = function(e3, t3, r3) {
      var n3 = void 0 === r3 ? {} : r3, o3 = n3.bookmarks, i3 = n3.txConfig, a3 = n3.database, u3 = n3.mode, s3 = n3.impersonatedUser, f3 = n3.notificationFilter, h3 = n3.beforeKeys, p4 = n3.afterKeys, v3 = n3.beforeError, y3 = n3.afterError, b2 = n3.beforeComplete, m2 = n3.afterComplete, g2 = n3.flush, _2 = void 0 === g2 || g2, w2 = n3.reactive, O2 = void 0 !== w2 && w2, S2 = n3.fetchSize, E2 = void 0 === S2 ? d2 : S2, P2 = n3.highRecordWatermark, T2 = void 0 === P2 ? Number.MAX_VALUE : P2, x3 = n3.lowRecordWatermark, C2 = void 0 === x3 ? Number.MAX_VALUE : x3, j2 = new l2.ResultStreamObserver({ server: this._server, reactive: O2, fetchSize: E2, moreFunction: this._requestMore.bind(this), discardFunction: this._requestDiscard.bind(this), beforeKeys: h3, afterKeys: p4, beforeError: v3, afterError: y3, beforeComplete: b2, afterComplete: m2, highRecordWatermark: T2, lowRecordWatermark: C2 }), A2 = O2;
      return this.write(c2.default.runWithMetadata(e3, t3, { bookmarks: o3, txConfig: i3, database: a3, mode: u3, impersonatedUser: s3, notificationFilter: f3 }), j2, A2 && _2), O2 || this.write(c2.default.pull({ n: E2 }), j2, _2), j2;
    }, t2;
  }(a2.default);
  t.default = p3;
}, 983: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.mergeMap = void 0;
  var n2 = r2(5471), o2 = r2(9445), i2 = r2(7843), a2 = r2(1983), u2 = r2(1018);
  t.mergeMap = function e2(t2, r3, s2) {
    return void 0 === s2 && (s2 = 1 / 0), u2.isFunction(r3) ? e2(function(e3, i3) {
      return n2.map(function(t3, n3) {
        return r3(e3, t3, i3, n3);
      })(o2.innerFrom(t2(e3, i3)));
    }, s2) : ("number" == typeof r3 && (s2 = r3), i2.operate(function(e3, r4) {
      return a2.mergeInternals(e3, r4, t2, s2);
    }));
  };
}, 1004: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.of = void 0;
  var n2 = r2(1107), o2 = r2(4917);
  t.of = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    var r3 = n2.popScheduler(e2);
    return o2.from(e2, r3);
  };
}, 1018: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.isFunction = void 0, t.isFunction = function(e2) {
    return "function" == typeof e2;
  };
}, 1038: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.count = void 0;
  var n2 = r2(9139);
  t.count = function(e2) {
    return n2.reduce(function(t2, r3, n3) {
      return !e2 || e2(r3, n3) ? t2 + 1 : t2;
    }, 0);
  };
}, 1048: (e, t, r2) => {
  const n2 = r2(7991), o2 = r2(9318), i2 = "function" == typeof Symbol && "function" == typeof Symbol.for ? Symbol.for("nodejs.util.inspect.custom") : null;
  t.Buffer = s2, t.SlowBuffer = function(e2) {
    return +e2 != e2 && (e2 = 0), s2.alloc(+e2);
  }, t.INSPECT_MAX_BYTES = 50;
  const a2 = 2147483647;
  function u2(e2) {
    if (e2 > a2) throw new RangeError('The value "' + e2 + '" is invalid for option "size"');
    const t2 = new Uint8Array(e2);
    return Object.setPrototypeOf(t2, s2.prototype), t2;
  }
  function s2(e2, t2, r3) {
    if ("number" == typeof e2) {
      if ("string" == typeof t2) throw new TypeError('The "string" argument must be of type string. Received type number');
      return f2(e2);
    }
    return c2(e2, t2, r3);
  }
  function c2(e2, t2, r3) {
    if ("string" == typeof e2) return function(e3, t3) {
      if ("string" == typeof t3 && "" !== t3 || (t3 = "utf8"), !s2.isEncoding(t3)) throw new TypeError("Unknown encoding: " + t3);
      const r4 = 0 | v3(e3, t3);
      let n4 = u2(r4);
      const o4 = n4.write(e3, t3);
      return o4 !== r4 && (n4 = n4.slice(0, o4)), n4;
    }(e2, t2);
    if (ArrayBuffer.isView(e2)) return function(e3) {
      if (K3(e3, Uint8Array)) {
        const t3 = new Uint8Array(e3);
        return d2(t3.buffer, t3.byteOffset, t3.byteLength);
      }
      return h2(e3);
    }(e2);
    if (null == e2) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e2);
    if (K3(e2, ArrayBuffer) || e2 && K3(e2.buffer, ArrayBuffer)) return d2(e2, t2, r3);
    if ("undefined" != typeof SharedArrayBuffer && (K3(e2, SharedArrayBuffer) || e2 && K3(e2.buffer, SharedArrayBuffer))) return d2(e2, t2, r3);
    if ("number" == typeof e2) throw new TypeError('The "value" argument must not be of type number. Received type number');
    const n3 = e2.valueOf && e2.valueOf();
    if (null != n3 && n3 !== e2) return s2.from(n3, t2, r3);
    const o3 = function(e3) {
      if (s2.isBuffer(e3)) {
        const t3 = 0 | p3(e3.length), r4 = u2(t3);
        return 0 === r4.length || e3.copy(r4, 0, 0, t3), r4;
      }
      return void 0 !== e3.length ? "number" != typeof e3.length || Z2(e3.length) ? u2(0) : h2(e3) : "Buffer" === e3.type && Array.isArray(e3.data) ? h2(e3.data) : void 0;
    }(e2);
    if (o3) return o3;
    if ("undefined" != typeof Symbol && null != Symbol.toPrimitive && "function" == typeof e2[Symbol.toPrimitive]) return s2.from(e2[Symbol.toPrimitive]("string"), t2, r3);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e2);
  }
  function l2(e2) {
    if ("number" != typeof e2) throw new TypeError('"size" argument must be of type number');
    if (e2 < 0) throw new RangeError('The value "' + e2 + '" is invalid for option "size"');
  }
  function f2(e2) {
    return l2(e2), u2(e2 < 0 ? 0 : 0 | p3(e2));
  }
  function h2(e2) {
    const t2 = e2.length < 0 ? 0 : 0 | p3(e2.length), r3 = u2(t2);
    for (let n3 = 0; n3 < t2; n3 += 1) r3[n3] = 255 & e2[n3];
    return r3;
  }
  function d2(e2, t2, r3) {
    if (t2 < 0 || e2.byteLength < t2) throw new RangeError('"offset" is outside of buffer bounds');
    if (e2.byteLength < t2 + (r3 || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let n3;
    return n3 = void 0 === t2 && void 0 === r3 ? new Uint8Array(e2) : void 0 === r3 ? new Uint8Array(e2, t2) : new Uint8Array(e2, t2, r3), Object.setPrototypeOf(n3, s2.prototype), n3;
  }
  function p3(e2) {
    if (e2 >= a2) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + a2.toString(16) + " bytes");
    return 0 | e2;
  }
  function v3(e2, t2) {
    if (s2.isBuffer(e2)) return e2.length;
    if (ArrayBuffer.isView(e2) || K3(e2, ArrayBuffer)) return e2.byteLength;
    if ("string" != typeof e2) throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof e2);
    const r3 = e2.length, n3 = arguments.length > 2 && true === arguments[2];
    if (!n3 && 0 === r3) return 0;
    let o3 = false;
    for (; ; ) switch (t2) {
      case "ascii":
      case "latin1":
      case "binary":
        return r3;
      case "utf8":
      case "utf-8":
        return H2(e2).length;
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return 2 * r3;
      case "hex":
        return r3 >>> 1;
      case "base64":
        return Y2(e2).length;
      default:
        if (o3) return n3 ? -1 : H2(e2).length;
        t2 = ("" + t2).toLowerCase(), o3 = true;
    }
  }
  function y3(e2, t2, r3) {
    let n3 = false;
    if ((void 0 === t2 || t2 < 0) && (t2 = 0), t2 > this.length) return "";
    if ((void 0 === r3 || r3 > this.length) && (r3 = this.length), r3 <= 0) return "";
    if ((r3 >>>= 0) <= (t2 >>>= 0)) return "";
    for (e2 || (e2 = "utf8"); ; ) switch (e2) {
      case "hex":
        return A2(this, t2, r3);
      case "utf8":
      case "utf-8":
        return T2(this, t2, r3);
      case "ascii":
        return C2(this, t2, r3);
      case "latin1":
      case "binary":
        return j2(this, t2, r3);
      case "base64":
        return P2(this, t2, r3);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return k2(this, t2, r3);
      default:
        if (n3) throw new TypeError("Unknown encoding: " + e2);
        e2 = (e2 + "").toLowerCase(), n3 = true;
    }
  }
  function b2(e2, t2, r3) {
    const n3 = e2[t2];
    e2[t2] = e2[r3], e2[r3] = n3;
  }
  function m2(e2, t2, r3, n3, o3) {
    if (0 === e2.length) return -1;
    if ("string" == typeof r3 ? (n3 = r3, r3 = 0) : r3 > 2147483647 ? r3 = 2147483647 : r3 < -2147483648 && (r3 = -2147483648), Z2(r3 = +r3) && (r3 = o3 ? 0 : e2.length - 1), r3 < 0 && (r3 = e2.length + r3), r3 >= e2.length) {
      if (o3) return -1;
      r3 = e2.length - 1;
    } else if (r3 < 0) {
      if (!o3) return -1;
      r3 = 0;
    }
    if ("string" == typeof t2 && (t2 = s2.from(t2, n3)), s2.isBuffer(t2)) return 0 === t2.length ? -1 : g2(e2, t2, r3, n3, o3);
    if ("number" == typeof t2) return t2 &= 255, "function" == typeof Uint8Array.prototype.indexOf ? o3 ? Uint8Array.prototype.indexOf.call(e2, t2, r3) : Uint8Array.prototype.lastIndexOf.call(e2, t2, r3) : g2(e2, [t2], r3, n3, o3);
    throw new TypeError("val must be string, number or Buffer");
  }
  function g2(e2, t2, r3, n3, o3) {
    let i3, a3 = 1, u3 = e2.length, s3 = t2.length;
    if (void 0 !== n3 && ("ucs2" === (n3 = String(n3).toLowerCase()) || "ucs-2" === n3 || "utf16le" === n3 || "utf-16le" === n3)) {
      if (e2.length < 2 || t2.length < 2) return -1;
      a3 = 2, u3 /= 2, s3 /= 2, r3 /= 2;
    }
    function c3(e3, t3) {
      return 1 === a3 ? e3[t3] : e3.readUInt16BE(t3 * a3);
    }
    if (o3) {
      let n4 = -1;
      for (i3 = r3; i3 < u3; i3++) if (c3(e2, i3) === c3(t2, -1 === n4 ? 0 : i3 - n4)) {
        if (-1 === n4 && (n4 = i3), i3 - n4 + 1 === s3) return n4 * a3;
      } else -1 !== n4 && (i3 -= i3 - n4), n4 = -1;
    } else for (r3 + s3 > u3 && (r3 = u3 - s3), i3 = r3; i3 >= 0; i3--) {
      let r4 = true;
      for (let n4 = 0; n4 < s3; n4++) if (c3(e2, i3 + n4) !== c3(t2, n4)) {
        r4 = false;
        break;
      }
      if (r4) return i3;
    }
    return -1;
  }
  function _2(e2, t2, r3, n3) {
    r3 = Number(r3) || 0;
    const o3 = e2.length - r3;
    n3 ? (n3 = Number(n3)) > o3 && (n3 = o3) : n3 = o3;
    const i3 = t2.length;
    let a3;
    for (n3 > i3 / 2 && (n3 = i3 / 2), a3 = 0; a3 < n3; ++a3) {
      const n4 = parseInt(t2.substr(2 * a3, 2), 16);
      if (Z2(n4)) return a3;
      e2[r3 + a3] = n4;
    }
    return a3;
  }
  function w2(e2, t2, r3, n3) {
    return X2(H2(t2, e2.length - r3), e2, r3, n3);
  }
  function O2(e2, t2, r3, n3) {
    return X2(function(e3) {
      const t3 = [];
      for (let r4 = 0; r4 < e3.length; ++r4) t3.push(255 & e3.charCodeAt(r4));
      return t3;
    }(t2), e2, r3, n3);
  }
  function S2(e2, t2, r3, n3) {
    return X2(Y2(t2), e2, r3, n3);
  }
  function E2(e2, t2, r3, n3) {
    return X2(function(e3, t3) {
      let r4, n4, o3;
      const i3 = [];
      for (let a3 = 0; a3 < e3.length && !((t3 -= 2) < 0); ++a3) r4 = e3.charCodeAt(a3), n4 = r4 >> 8, o3 = r4 % 256, i3.push(o3), i3.push(n4);
      return i3;
    }(t2, e2.length - r3), e2, r3, n3);
  }
  function P2(e2, t2, r3) {
    return 0 === t2 && r3 === e2.length ? n2.fromByteArray(e2) : n2.fromByteArray(e2.slice(t2, r3));
  }
  function T2(e2, t2, r3) {
    r3 = Math.min(e2.length, r3);
    const n3 = [];
    let o3 = t2;
    for (; o3 < r3; ) {
      const t3 = e2[o3];
      let i3 = null, a3 = t3 > 239 ? 4 : t3 > 223 ? 3 : t3 > 191 ? 2 : 1;
      if (o3 + a3 <= r3) {
        let r4, n4, u3, s3;
        switch (a3) {
          case 1:
            t3 < 128 && (i3 = t3);
            break;
          case 2:
            r4 = e2[o3 + 1], 128 == (192 & r4) && (s3 = (31 & t3) << 6 | 63 & r4, s3 > 127 && (i3 = s3));
            break;
          case 3:
            r4 = e2[o3 + 1], n4 = e2[o3 + 2], 128 == (192 & r4) && 128 == (192 & n4) && (s3 = (15 & t3) << 12 | (63 & r4) << 6 | 63 & n4, s3 > 2047 && (s3 < 55296 || s3 > 57343) && (i3 = s3));
            break;
          case 4:
            r4 = e2[o3 + 1], n4 = e2[o3 + 2], u3 = e2[o3 + 3], 128 == (192 & r4) && 128 == (192 & n4) && 128 == (192 & u3) && (s3 = (15 & t3) << 18 | (63 & r4) << 12 | (63 & n4) << 6 | 63 & u3, s3 > 65535 && s3 < 1114112 && (i3 = s3));
        }
      }
      null === i3 ? (i3 = 65533, a3 = 1) : i3 > 65535 && (i3 -= 65536, n3.push(i3 >>> 10 & 1023 | 55296), i3 = 56320 | 1023 & i3), n3.push(i3), o3 += a3;
    }
    return function(e3) {
      const t3 = e3.length;
      if (t3 <= x3) return String.fromCharCode.apply(String, e3);
      let r4 = "", n4 = 0;
      for (; n4 < t3; ) r4 += String.fromCharCode.apply(String, e3.slice(n4, n4 += x3));
      return r4;
    }(n3);
  }
  t.kMaxLength = a2, s2.TYPED_ARRAY_SUPPORT = function() {
    try {
      const e2 = new Uint8Array(1), t2 = { foo: function() {
        return 42;
      } };
      return Object.setPrototypeOf(t2, Uint8Array.prototype), Object.setPrototypeOf(e2, t2), 42 === e2.foo();
    } catch (e2) {
      return false;
    }
  }(), s2.TYPED_ARRAY_SUPPORT || "undefined" == typeof console || "function" != typeof console.error || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), Object.defineProperty(s2.prototype, "parent", { enumerable: true, get: function() {
    if (s2.isBuffer(this)) return this.buffer;
  } }), Object.defineProperty(s2.prototype, "offset", { enumerable: true, get: function() {
    if (s2.isBuffer(this)) return this.byteOffset;
  } }), s2.poolSize = 8192, s2.from = function(e2, t2, r3) {
    return c2(e2, t2, r3);
  }, Object.setPrototypeOf(s2.prototype, Uint8Array.prototype), Object.setPrototypeOf(s2, Uint8Array), s2.alloc = function(e2, t2, r3) {
    return function(e3, t3, r4) {
      return l2(e3), e3 <= 0 ? u2(e3) : void 0 !== t3 ? "string" == typeof r4 ? u2(e3).fill(t3, r4) : u2(e3).fill(t3) : u2(e3);
    }(e2, t2, r3);
  }, s2.allocUnsafe = function(e2) {
    return f2(e2);
  }, s2.allocUnsafeSlow = function(e2) {
    return f2(e2);
  }, s2.isBuffer = function(e2) {
    return null != e2 && true === e2._isBuffer && e2 !== s2.prototype;
  }, s2.compare = function(e2, t2) {
    if (K3(e2, Uint8Array) && (e2 = s2.from(e2, e2.offset, e2.byteLength)), K3(t2, Uint8Array) && (t2 = s2.from(t2, t2.offset, t2.byteLength)), !s2.isBuffer(e2) || !s2.isBuffer(t2)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (e2 === t2) return 0;
    let r3 = e2.length, n3 = t2.length;
    for (let o3 = 0, i3 = Math.min(r3, n3); o3 < i3; ++o3) if (e2[o3] !== t2[o3]) {
      r3 = e2[o3], n3 = t2[o3];
      break;
    }
    return r3 < n3 ? -1 : n3 < r3 ? 1 : 0;
  }, s2.isEncoding = function(e2) {
    switch (String(e2).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return true;
      default:
        return false;
    }
  }, s2.concat = function(e2, t2) {
    if (!Array.isArray(e2)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (0 === e2.length) return s2.alloc(0);
    let r3;
    if (void 0 === t2) for (t2 = 0, r3 = 0; r3 < e2.length; ++r3) t2 += e2[r3].length;
    const n3 = s2.allocUnsafe(t2);
    let o3 = 0;
    for (r3 = 0; r3 < e2.length; ++r3) {
      let t3 = e2[r3];
      if (K3(t3, Uint8Array)) o3 + t3.length > n3.length ? (s2.isBuffer(t3) || (t3 = s2.from(t3)), t3.copy(n3, o3)) : Uint8Array.prototype.set.call(n3, t3, o3);
      else {
        if (!s2.isBuffer(t3)) throw new TypeError('"list" argument must be an Array of Buffers');
        t3.copy(n3, o3);
      }
      o3 += t3.length;
    }
    return n3;
  }, s2.byteLength = v3, s2.prototype._isBuffer = true, s2.prototype.swap16 = function() {
    const e2 = this.length;
    if (e2 % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for (let t2 = 0; t2 < e2; t2 += 2) b2(this, t2, t2 + 1);
    return this;
  }, s2.prototype.swap32 = function() {
    const e2 = this.length;
    if (e2 % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for (let t2 = 0; t2 < e2; t2 += 4) b2(this, t2, t2 + 3), b2(this, t2 + 1, t2 + 2);
    return this;
  }, s2.prototype.swap64 = function() {
    const e2 = this.length;
    if (e2 % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for (let t2 = 0; t2 < e2; t2 += 8) b2(this, t2, t2 + 7), b2(this, t2 + 1, t2 + 6), b2(this, t2 + 2, t2 + 5), b2(this, t2 + 3, t2 + 4);
    return this;
  }, s2.prototype.toString = function() {
    const e2 = this.length;
    return 0 === e2 ? "" : 0 === arguments.length ? T2(this, 0, e2) : y3.apply(this, arguments);
  }, s2.prototype.toLocaleString = s2.prototype.toString, s2.prototype.equals = function(e2) {
    if (!s2.isBuffer(e2)) throw new TypeError("Argument must be a Buffer");
    return this === e2 || 0 === s2.compare(this, e2);
  }, s2.prototype.inspect = function() {
    let e2 = "";
    const r3 = t.INSPECT_MAX_BYTES;
    return e2 = this.toString("hex", 0, r3).replace(/(.{2})/g, "$1 ").trim(), this.length > r3 && (e2 += " ... "), "<Buffer " + e2 + ">";
  }, i2 && (s2.prototype[i2] = s2.prototype.inspect), s2.prototype.compare = function(e2, t2, r3, n3, o3) {
    if (K3(e2, Uint8Array) && (e2 = s2.from(e2, e2.offset, e2.byteLength)), !s2.isBuffer(e2)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e2);
    if (void 0 === t2 && (t2 = 0), void 0 === r3 && (r3 = e2 ? e2.length : 0), void 0 === n3 && (n3 = 0), void 0 === o3 && (o3 = this.length), t2 < 0 || r3 > e2.length || n3 < 0 || o3 > this.length) throw new RangeError("out of range index");
    if (n3 >= o3 && t2 >= r3) return 0;
    if (n3 >= o3) return -1;
    if (t2 >= r3) return 1;
    if (this === e2) return 0;
    let i3 = (o3 >>>= 0) - (n3 >>>= 0), a3 = (r3 >>>= 0) - (t2 >>>= 0);
    const u3 = Math.min(i3, a3), c3 = this.slice(n3, o3), l3 = e2.slice(t2, r3);
    for (let e3 = 0; e3 < u3; ++e3) if (c3[e3] !== l3[e3]) {
      i3 = c3[e3], a3 = l3[e3];
      break;
    }
    return i3 < a3 ? -1 : a3 < i3 ? 1 : 0;
  }, s2.prototype.includes = function(e2, t2, r3) {
    return -1 !== this.indexOf(e2, t2, r3);
  }, s2.prototype.indexOf = function(e2, t2, r3) {
    return m2(this, e2, t2, r3, true);
  }, s2.prototype.lastIndexOf = function(e2, t2, r3) {
    return m2(this, e2, t2, r3, false);
  }, s2.prototype.write = function(e2, t2, r3, n3) {
    if (void 0 === t2) n3 = "utf8", r3 = this.length, t2 = 0;
    else if (void 0 === r3 && "string" == typeof t2) n3 = t2, r3 = this.length, t2 = 0;
    else {
      if (!isFinite(t2)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
      t2 >>>= 0, isFinite(r3) ? (r3 >>>= 0, void 0 === n3 && (n3 = "utf8")) : (n3 = r3, r3 = void 0);
    }
    const o3 = this.length - t2;
    if ((void 0 === r3 || r3 > o3) && (r3 = o3), e2.length > 0 && (r3 < 0 || t2 < 0) || t2 > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    n3 || (n3 = "utf8");
    let i3 = false;
    for (; ; ) switch (n3) {
      case "hex":
        return _2(this, e2, t2, r3);
      case "utf8":
      case "utf-8":
        return w2(this, e2, t2, r3);
      case "ascii":
      case "latin1":
      case "binary":
        return O2(this, e2, t2, r3);
      case "base64":
        return S2(this, e2, t2, r3);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return E2(this, e2, t2, r3);
      default:
        if (i3) throw new TypeError("Unknown encoding: " + n3);
        n3 = ("" + n3).toLowerCase(), i3 = true;
    }
  }, s2.prototype.toJSON = function() {
    return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
  };
  const x3 = 4096;
  function C2(e2, t2, r3) {
    let n3 = "";
    r3 = Math.min(e2.length, r3);
    for (let o3 = t2; o3 < r3; ++o3) n3 += String.fromCharCode(127 & e2[o3]);
    return n3;
  }
  function j2(e2, t2, r3) {
    let n3 = "";
    r3 = Math.min(e2.length, r3);
    for (let o3 = t2; o3 < r3; ++o3) n3 += String.fromCharCode(e2[o3]);
    return n3;
  }
  function A2(e2, t2, r3) {
    const n3 = e2.length;
    (!t2 || t2 < 0) && (t2 = 0), (!r3 || r3 < 0 || r3 > n3) && (r3 = n3);
    let o3 = "";
    for (let n4 = t2; n4 < r3; ++n4) o3 += $3[e2[n4]];
    return o3;
  }
  function k2(e2, t2, r3) {
    const n3 = e2.slice(t2, r3);
    let o3 = "";
    for (let e3 = 0; e3 < n3.length - 1; e3 += 2) o3 += String.fromCharCode(n3[e3] + 256 * n3[e3 + 1]);
    return o3;
  }
  function R2(e2, t2, r3) {
    if (e2 % 1 != 0 || e2 < 0) throw new RangeError("offset is not uint");
    if (e2 + t2 > r3) throw new RangeError("Trying to access beyond buffer length");
  }
  function I2(e2, t2, r3, n3, o3, i3) {
    if (!s2.isBuffer(e2)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (t2 > o3 || t2 < i3) throw new RangeError('"value" argument is out of bounds');
    if (r3 + n3 > e2.length) throw new RangeError("Index out of range");
  }
  function M2(e2, t2, r3, n3, o3) {
    V2(t2, n3, o3, e2, r3, 7);
    let i3 = Number(t2 & BigInt(4294967295));
    e2[r3++] = i3, i3 >>= 8, e2[r3++] = i3, i3 >>= 8, e2[r3++] = i3, i3 >>= 8, e2[r3++] = i3;
    let a3 = Number(t2 >> BigInt(32) & BigInt(4294967295));
    return e2[r3++] = a3, a3 >>= 8, e2[r3++] = a3, a3 >>= 8, e2[r3++] = a3, a3 >>= 8, e2[r3++] = a3, r3;
  }
  function N2(e2, t2, r3, n3, o3) {
    V2(t2, n3, o3, e2, r3, 7);
    let i3 = Number(t2 & BigInt(4294967295));
    e2[r3 + 7] = i3, i3 >>= 8, e2[r3 + 6] = i3, i3 >>= 8, e2[r3 + 5] = i3, i3 >>= 8, e2[r3 + 4] = i3;
    let a3 = Number(t2 >> BigInt(32) & BigInt(4294967295));
    return e2[r3 + 3] = a3, a3 >>= 8, e2[r3 + 2] = a3, a3 >>= 8, e2[r3 + 1] = a3, a3 >>= 8, e2[r3] = a3, r3 + 8;
  }
  function D2(e2, t2, r3, n3, o3, i3) {
    if (r3 + n3 > e2.length) throw new RangeError("Index out of range");
    if (r3 < 0) throw new RangeError("Index out of range");
  }
  function L2(e2, t2, r3, n3, i3) {
    return t2 = +t2, r3 >>>= 0, i3 || D2(e2, 0, r3, 4), o2.write(e2, t2, r3, n3, 23, 4), r3 + 4;
  }
  function U2(e2, t2, r3, n3, i3) {
    return t2 = +t2, r3 >>>= 0, i3 || D2(e2, 0, r3, 8), o2.write(e2, t2, r3, n3, 52, 8), r3 + 8;
  }
  s2.prototype.slice = function(e2, t2) {
    const r3 = this.length;
    (e2 = ~~e2) < 0 ? (e2 += r3) < 0 && (e2 = 0) : e2 > r3 && (e2 = r3), (t2 = void 0 === t2 ? r3 : ~~t2) < 0 ? (t2 += r3) < 0 && (t2 = 0) : t2 > r3 && (t2 = r3), t2 < e2 && (t2 = e2);
    const n3 = this.subarray(e2, t2);
    return Object.setPrototypeOf(n3, s2.prototype), n3;
  }, s2.prototype.readUintLE = s2.prototype.readUIntLE = function(e2, t2, r3) {
    e2 >>>= 0, t2 >>>= 0, r3 || R2(e2, t2, this.length);
    let n3 = this[e2], o3 = 1, i3 = 0;
    for (; ++i3 < t2 && (o3 *= 256); ) n3 += this[e2 + i3] * o3;
    return n3;
  }, s2.prototype.readUintBE = s2.prototype.readUIntBE = function(e2, t2, r3) {
    e2 >>>= 0, t2 >>>= 0, r3 || R2(e2, t2, this.length);
    let n3 = this[e2 + --t2], o3 = 1;
    for (; t2 > 0 && (o3 *= 256); ) n3 += this[e2 + --t2] * o3;
    return n3;
  }, s2.prototype.readUint8 = s2.prototype.readUInt8 = function(e2, t2) {
    return e2 >>>= 0, t2 || R2(e2, 1, this.length), this[e2];
  }, s2.prototype.readUint16LE = s2.prototype.readUInt16LE = function(e2, t2) {
    return e2 >>>= 0, t2 || R2(e2, 2, this.length), this[e2] | this[e2 + 1] << 8;
  }, s2.prototype.readUint16BE = s2.prototype.readUInt16BE = function(e2, t2) {
    return e2 >>>= 0, t2 || R2(e2, 2, this.length), this[e2] << 8 | this[e2 + 1];
  }, s2.prototype.readUint32LE = s2.prototype.readUInt32LE = function(e2, t2) {
    return e2 >>>= 0, t2 || R2(e2, 4, this.length), (this[e2] | this[e2 + 1] << 8 | this[e2 + 2] << 16) + 16777216 * this[e2 + 3];
  }, s2.prototype.readUint32BE = s2.prototype.readUInt32BE = function(e2, t2) {
    return e2 >>>= 0, t2 || R2(e2, 4, this.length), 16777216 * this[e2] + (this[e2 + 1] << 16 | this[e2 + 2] << 8 | this[e2 + 3]);
  }, s2.prototype.readBigUInt64LE = Q2(function(e2) {
    W2(e2 >>>= 0, "offset");
    const t2 = this[e2], r3 = this[e2 + 7];
    void 0 !== t2 && void 0 !== r3 || q2(e2, this.length - 8);
    const n3 = t2 + 256 * this[++e2] + 65536 * this[++e2] + this[++e2] * 2 ** 24, o3 = this[++e2] + 256 * this[++e2] + 65536 * this[++e2] + r3 * 2 ** 24;
    return BigInt(n3) + (BigInt(o3) << BigInt(32));
  }), s2.prototype.readBigUInt64BE = Q2(function(e2) {
    W2(e2 >>>= 0, "offset");
    const t2 = this[e2], r3 = this[e2 + 7];
    void 0 !== t2 && void 0 !== r3 || q2(e2, this.length - 8);
    const n3 = t2 * 2 ** 24 + 65536 * this[++e2] + 256 * this[++e2] + this[++e2], o3 = this[++e2] * 2 ** 24 + 65536 * this[++e2] + 256 * this[++e2] + r3;
    return (BigInt(n3) << BigInt(32)) + BigInt(o3);
  }), s2.prototype.readIntLE = function(e2, t2, r3) {
    e2 >>>= 0, t2 >>>= 0, r3 || R2(e2, t2, this.length);
    let n3 = this[e2], o3 = 1, i3 = 0;
    for (; ++i3 < t2 && (o3 *= 256); ) n3 += this[e2 + i3] * o3;
    return o3 *= 128, n3 >= o3 && (n3 -= Math.pow(2, 8 * t2)), n3;
  }, s2.prototype.readIntBE = function(e2, t2, r3) {
    e2 >>>= 0, t2 >>>= 0, r3 || R2(e2, t2, this.length);
    let n3 = t2, o3 = 1, i3 = this[e2 + --n3];
    for (; n3 > 0 && (o3 *= 256); ) i3 += this[e2 + --n3] * o3;
    return o3 *= 128, i3 >= o3 && (i3 -= Math.pow(2, 8 * t2)), i3;
  }, s2.prototype.readInt8 = function(e2, t2) {
    return e2 >>>= 0, t2 || R2(e2, 1, this.length), 128 & this[e2] ? -1 * (255 - this[e2] + 1) : this[e2];
  }, s2.prototype.readInt16LE = function(e2, t2) {
    e2 >>>= 0, t2 || R2(e2, 2, this.length);
    const r3 = this[e2] | this[e2 + 1] << 8;
    return 32768 & r3 ? 4294901760 | r3 : r3;
  }, s2.prototype.readInt16BE = function(e2, t2) {
    e2 >>>= 0, t2 || R2(e2, 2, this.length);
    const r3 = this[e2 + 1] | this[e2] << 8;
    return 32768 & r3 ? 4294901760 | r3 : r3;
  }, s2.prototype.readInt32LE = function(e2, t2) {
    return e2 >>>= 0, t2 || R2(e2, 4, this.length), this[e2] | this[e2 + 1] << 8 | this[e2 + 2] << 16 | this[e2 + 3] << 24;
  }, s2.prototype.readInt32BE = function(e2, t2) {
    return e2 >>>= 0, t2 || R2(e2, 4, this.length), this[e2] << 24 | this[e2 + 1] << 16 | this[e2 + 2] << 8 | this[e2 + 3];
  }, s2.prototype.readBigInt64LE = Q2(function(e2) {
    W2(e2 >>>= 0, "offset");
    const t2 = this[e2], r3 = this[e2 + 7];
    void 0 !== t2 && void 0 !== r3 || q2(e2, this.length - 8);
    const n3 = this[e2 + 4] + 256 * this[e2 + 5] + 65536 * this[e2 + 6] + (r3 << 24);
    return (BigInt(n3) << BigInt(32)) + BigInt(t2 + 256 * this[++e2] + 65536 * this[++e2] + this[++e2] * 2 ** 24);
  }), s2.prototype.readBigInt64BE = Q2(function(e2) {
    W2(e2 >>>= 0, "offset");
    const t2 = this[e2], r3 = this[e2 + 7];
    void 0 !== t2 && void 0 !== r3 || q2(e2, this.length - 8);
    const n3 = (t2 << 24) + 65536 * this[++e2] + 256 * this[++e2] + this[++e2];
    return (BigInt(n3) << BigInt(32)) + BigInt(this[++e2] * 2 ** 24 + 65536 * this[++e2] + 256 * this[++e2] + r3);
  }), s2.prototype.readFloatLE = function(e2, t2) {
    return e2 >>>= 0, t2 || R2(e2, 4, this.length), o2.read(this, e2, true, 23, 4);
  }, s2.prototype.readFloatBE = function(e2, t2) {
    return e2 >>>= 0, t2 || R2(e2, 4, this.length), o2.read(this, e2, false, 23, 4);
  }, s2.prototype.readDoubleLE = function(e2, t2) {
    return e2 >>>= 0, t2 || R2(e2, 8, this.length), o2.read(this, e2, true, 52, 8);
  }, s2.prototype.readDoubleBE = function(e2, t2) {
    return e2 >>>= 0, t2 || R2(e2, 8, this.length), o2.read(this, e2, false, 52, 8);
  }, s2.prototype.writeUintLE = s2.prototype.writeUIntLE = function(e2, t2, r3, n3) {
    e2 = +e2, t2 >>>= 0, r3 >>>= 0, n3 || I2(this, e2, t2, r3, Math.pow(2, 8 * r3) - 1, 0);
    let o3 = 1, i3 = 0;
    for (this[t2] = 255 & e2; ++i3 < r3 && (o3 *= 256); ) this[t2 + i3] = e2 / o3 & 255;
    return t2 + r3;
  }, s2.prototype.writeUintBE = s2.prototype.writeUIntBE = function(e2, t2, r3, n3) {
    e2 = +e2, t2 >>>= 0, r3 >>>= 0, n3 || I2(this, e2, t2, r3, Math.pow(2, 8 * r3) - 1, 0);
    let o3 = r3 - 1, i3 = 1;
    for (this[t2 + o3] = 255 & e2; --o3 >= 0 && (i3 *= 256); ) this[t2 + o3] = e2 / i3 & 255;
    return t2 + r3;
  }, s2.prototype.writeUint8 = s2.prototype.writeUInt8 = function(e2, t2, r3) {
    return e2 = +e2, t2 >>>= 0, r3 || I2(this, e2, t2, 1, 255, 0), this[t2] = 255 & e2, t2 + 1;
  }, s2.prototype.writeUint16LE = s2.prototype.writeUInt16LE = function(e2, t2, r3) {
    return e2 = +e2, t2 >>>= 0, r3 || I2(this, e2, t2, 2, 65535, 0), this[t2] = 255 & e2, this[t2 + 1] = e2 >>> 8, t2 + 2;
  }, s2.prototype.writeUint16BE = s2.prototype.writeUInt16BE = function(e2, t2, r3) {
    return e2 = +e2, t2 >>>= 0, r3 || I2(this, e2, t2, 2, 65535, 0), this[t2] = e2 >>> 8, this[t2 + 1] = 255 & e2, t2 + 2;
  }, s2.prototype.writeUint32LE = s2.prototype.writeUInt32LE = function(e2, t2, r3) {
    return e2 = +e2, t2 >>>= 0, r3 || I2(this, e2, t2, 4, 4294967295, 0), this[t2 + 3] = e2 >>> 24, this[t2 + 2] = e2 >>> 16, this[t2 + 1] = e2 >>> 8, this[t2] = 255 & e2, t2 + 4;
  }, s2.prototype.writeUint32BE = s2.prototype.writeUInt32BE = function(e2, t2, r3) {
    return e2 = +e2, t2 >>>= 0, r3 || I2(this, e2, t2, 4, 4294967295, 0), this[t2] = e2 >>> 24, this[t2 + 1] = e2 >>> 16, this[t2 + 2] = e2 >>> 8, this[t2 + 3] = 255 & e2, t2 + 4;
  }, s2.prototype.writeBigUInt64LE = Q2(function(e2, t2 = 0) {
    return M2(this, e2, t2, BigInt(0), BigInt("0xffffffffffffffff"));
  }), s2.prototype.writeBigUInt64BE = Q2(function(e2, t2 = 0) {
    return N2(this, e2, t2, BigInt(0), BigInt("0xffffffffffffffff"));
  }), s2.prototype.writeIntLE = function(e2, t2, r3, n3) {
    if (e2 = +e2, t2 >>>= 0, !n3) {
      const n4 = Math.pow(2, 8 * r3 - 1);
      I2(this, e2, t2, r3, n4 - 1, -n4);
    }
    let o3 = 0, i3 = 1, a3 = 0;
    for (this[t2] = 255 & e2; ++o3 < r3 && (i3 *= 256); ) e2 < 0 && 0 === a3 && 0 !== this[t2 + o3 - 1] && (a3 = 1), this[t2 + o3] = (e2 / i3 | 0) - a3 & 255;
    return t2 + r3;
  }, s2.prototype.writeIntBE = function(e2, t2, r3, n3) {
    if (e2 = +e2, t2 >>>= 0, !n3) {
      const n4 = Math.pow(2, 8 * r3 - 1);
      I2(this, e2, t2, r3, n4 - 1, -n4);
    }
    let o3 = r3 - 1, i3 = 1, a3 = 0;
    for (this[t2 + o3] = 255 & e2; --o3 >= 0 && (i3 *= 256); ) e2 < 0 && 0 === a3 && 0 !== this[t2 + o3 + 1] && (a3 = 1), this[t2 + o3] = (e2 / i3 | 0) - a3 & 255;
    return t2 + r3;
  }, s2.prototype.writeInt8 = function(e2, t2, r3) {
    return e2 = +e2, t2 >>>= 0, r3 || I2(this, e2, t2, 1, 127, -128), e2 < 0 && (e2 = 255 + e2 + 1), this[t2] = 255 & e2, t2 + 1;
  }, s2.prototype.writeInt16LE = function(e2, t2, r3) {
    return e2 = +e2, t2 >>>= 0, r3 || I2(this, e2, t2, 2, 32767, -32768), this[t2] = 255 & e2, this[t2 + 1] = e2 >>> 8, t2 + 2;
  }, s2.prototype.writeInt16BE = function(e2, t2, r3) {
    return e2 = +e2, t2 >>>= 0, r3 || I2(this, e2, t2, 2, 32767, -32768), this[t2] = e2 >>> 8, this[t2 + 1] = 255 & e2, t2 + 2;
  }, s2.prototype.writeInt32LE = function(e2, t2, r3) {
    return e2 = +e2, t2 >>>= 0, r3 || I2(this, e2, t2, 4, 2147483647, -2147483648), this[t2] = 255 & e2, this[t2 + 1] = e2 >>> 8, this[t2 + 2] = e2 >>> 16, this[t2 + 3] = e2 >>> 24, t2 + 4;
  }, s2.prototype.writeInt32BE = function(e2, t2, r3) {
    return e2 = +e2, t2 >>>= 0, r3 || I2(this, e2, t2, 4, 2147483647, -2147483648), e2 < 0 && (e2 = 4294967295 + e2 + 1), this[t2] = e2 >>> 24, this[t2 + 1] = e2 >>> 16, this[t2 + 2] = e2 >>> 8, this[t2 + 3] = 255 & e2, t2 + 4;
  }, s2.prototype.writeBigInt64LE = Q2(function(e2, t2 = 0) {
    return M2(this, e2, t2, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  }), s2.prototype.writeBigInt64BE = Q2(function(e2, t2 = 0) {
    return N2(this, e2, t2, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  }), s2.prototype.writeFloatLE = function(e2, t2, r3) {
    return L2(this, e2, t2, true, r3);
  }, s2.prototype.writeFloatBE = function(e2, t2, r3) {
    return L2(this, e2, t2, false, r3);
  }, s2.prototype.writeDoubleLE = function(e2, t2, r3) {
    return U2(this, e2, t2, true, r3);
  }, s2.prototype.writeDoubleBE = function(e2, t2, r3) {
    return U2(this, e2, t2, false, r3);
  }, s2.prototype.copy = function(e2, t2, r3, n3) {
    if (!s2.isBuffer(e2)) throw new TypeError("argument should be a Buffer");
    if (r3 || (r3 = 0), n3 || 0 === n3 || (n3 = this.length), t2 >= e2.length && (t2 = e2.length), t2 || (t2 = 0), n3 > 0 && n3 < r3 && (n3 = r3), n3 === r3) return 0;
    if (0 === e2.length || 0 === this.length) return 0;
    if (t2 < 0) throw new RangeError("targetStart out of bounds");
    if (r3 < 0 || r3 >= this.length) throw new RangeError("Index out of range");
    if (n3 < 0) throw new RangeError("sourceEnd out of bounds");
    n3 > this.length && (n3 = this.length), e2.length - t2 < n3 - r3 && (n3 = e2.length - t2 + r3);
    const o3 = n3 - r3;
    return this === e2 && "function" == typeof Uint8Array.prototype.copyWithin ? this.copyWithin(t2, r3, n3) : Uint8Array.prototype.set.call(e2, this.subarray(r3, n3), t2), o3;
  }, s2.prototype.fill = function(e2, t2, r3, n3) {
    if ("string" == typeof e2) {
      if ("string" == typeof t2 ? (n3 = t2, t2 = 0, r3 = this.length) : "string" == typeof r3 && (n3 = r3, r3 = this.length), void 0 !== n3 && "string" != typeof n3) throw new TypeError("encoding must be a string");
      if ("string" == typeof n3 && !s2.isEncoding(n3)) throw new TypeError("Unknown encoding: " + n3);
      if (1 === e2.length) {
        const t3 = e2.charCodeAt(0);
        ("utf8" === n3 && t3 < 128 || "latin1" === n3) && (e2 = t3);
      }
    } else "number" == typeof e2 ? e2 &= 255 : "boolean" == typeof e2 && (e2 = Number(e2));
    if (t2 < 0 || this.length < t2 || this.length < r3) throw new RangeError("Out of range index");
    if (r3 <= t2) return this;
    let o3;
    if (t2 >>>= 0, r3 = void 0 === r3 ? this.length : r3 >>> 0, e2 || (e2 = 0), "number" == typeof e2) for (o3 = t2; o3 < r3; ++o3) this[o3] = e2;
    else {
      const i3 = s2.isBuffer(e2) ? e2 : s2.from(e2, n3), a3 = i3.length;
      if (0 === a3) throw new TypeError('The value "' + e2 + '" is invalid for argument "value"');
      for (o3 = 0; o3 < r3 - t2; ++o3) this[o3 + t2] = i3[o3 % a3];
    }
    return this;
  };
  const F2 = {};
  function B2(e2, t2, r3) {
    F2[e2] = class extends r3 {
      constructor() {
        super(), Object.defineProperty(this, "message", { value: t2.apply(this, arguments), writable: true, configurable: true }), this.name = `${this.name} [${e2}]`, this.stack, delete this.name;
      }
      get code() {
        return e2;
      }
      set code(e3) {
        Object.defineProperty(this, "code", { configurable: true, enumerable: true, value: e3, writable: true });
      }
      toString() {
        return `${this.name} [${e2}]: ${this.message}`;
      }
    };
  }
  function z2(e2) {
    let t2 = "", r3 = e2.length;
    const n3 = "-" === e2[0] ? 1 : 0;
    for (; r3 >= n3 + 4; r3 -= 3) t2 = `_${e2.slice(r3 - 3, r3)}${t2}`;
    return `${e2.slice(0, r3)}${t2}`;
  }
  function V2(e2, t2, r3, n3, o3, i3) {
    if (e2 > r3 || e2 < t2) {
      const n4 = "bigint" == typeof t2 ? "n" : "";
      let o4;
      throw o4 = i3 > 3 ? 0 === t2 || t2 === BigInt(0) ? `>= 0${n4} and < 2${n4} ** ${8 * (i3 + 1)}${n4}` : `>= -(2${n4} ** ${8 * (i3 + 1) - 1}${n4}) and < 2 ** ${8 * (i3 + 1) - 1}${n4}` : `>= ${t2}${n4} and <= ${r3}${n4}`, new F2.ERR_OUT_OF_RANGE("value", o4, e2);
    }
    !function(e3, t3, r4) {
      W2(t3, "offset"), void 0 !== e3[t3] && void 0 !== e3[t3 + r4] || q2(t3, e3.length - (r4 + 1));
    }(n3, o3, i3);
  }
  function W2(e2, t2) {
    if ("number" != typeof e2) throw new F2.ERR_INVALID_ARG_TYPE(t2, "number", e2);
  }
  function q2(e2, t2, r3) {
    if (Math.floor(e2) !== e2) throw W2(e2, r3), new F2.ERR_OUT_OF_RANGE(r3 || "offset", "an integer", e2);
    if (t2 < 0) throw new F2.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new F2.ERR_OUT_OF_RANGE(r3 || "offset", `>= ${r3 ? 1 : 0} and <= ${t2}`, e2);
  }
  B2("ERR_BUFFER_OUT_OF_BOUNDS", function(e2) {
    return e2 ? `${e2} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
  }, RangeError), B2("ERR_INVALID_ARG_TYPE", function(e2, t2) {
    return `The "${e2}" argument must be of type number. Received type ${typeof t2}`;
  }, TypeError), B2("ERR_OUT_OF_RANGE", function(e2, t2, r3) {
    let n3 = `The value of "${e2}" is out of range.`, o3 = r3;
    return Number.isInteger(r3) && Math.abs(r3) > 2 ** 32 ? o3 = z2(String(r3)) : "bigint" == typeof r3 && (o3 = String(r3), (r3 > BigInt(2) ** BigInt(32) || r3 < -(BigInt(2) ** BigInt(32))) && (o3 = z2(o3)), o3 += "n"), n3 += ` It must be ${t2}. Received ${o3}`, n3;
  }, RangeError);
  const G2 = /[^+/0-9A-Za-z-_]/g;
  function H2(e2, t2) {
    let r3;
    t2 = t2 || 1 / 0;
    const n3 = e2.length;
    let o3 = null;
    const i3 = [];
    for (let a3 = 0; a3 < n3; ++a3) {
      if (r3 = e2.charCodeAt(a3), r3 > 55295 && r3 < 57344) {
        if (!o3) {
          if (r3 > 56319) {
            (t2 -= 3) > -1 && i3.push(239, 191, 189);
            continue;
          }
          if (a3 + 1 === n3) {
            (t2 -= 3) > -1 && i3.push(239, 191, 189);
            continue;
          }
          o3 = r3;
          continue;
        }
        if (r3 < 56320) {
          (t2 -= 3) > -1 && i3.push(239, 191, 189), o3 = r3;
          continue;
        }
        r3 = 65536 + (o3 - 55296 << 10 | r3 - 56320);
      } else o3 && (t2 -= 3) > -1 && i3.push(239, 191, 189);
      if (o3 = null, r3 < 128) {
        if ((t2 -= 1) < 0) break;
        i3.push(r3);
      } else if (r3 < 2048) {
        if ((t2 -= 2) < 0) break;
        i3.push(r3 >> 6 | 192, 63 & r3 | 128);
      } else if (r3 < 65536) {
        if ((t2 -= 3) < 0) break;
        i3.push(r3 >> 12 | 224, r3 >> 6 & 63 | 128, 63 & r3 | 128);
      } else {
        if (!(r3 < 1114112)) throw new Error("Invalid code point");
        if ((t2 -= 4) < 0) break;
        i3.push(r3 >> 18 | 240, r3 >> 12 & 63 | 128, r3 >> 6 & 63 | 128, 63 & r3 | 128);
      }
    }
    return i3;
  }
  function Y2(e2) {
    return n2.toByteArray(function(e3) {
      if ((e3 = (e3 = e3.split("=")[0]).trim().replace(G2, "")).length < 2) return "";
      for (; e3.length % 4 != 0; ) e3 += "=";
      return e3;
    }(e2));
  }
  function X2(e2, t2, r3, n3) {
    let o3;
    for (o3 = 0; o3 < n3 && !(o3 + r3 >= t2.length || o3 >= e2.length); ++o3) t2[o3 + r3] = e2[o3];
    return o3;
  }
  function K3(e2, t2) {
    return e2 instanceof t2 || null != e2 && null != e2.constructor && null != e2.constructor.name && e2.constructor.name === t2.name;
  }
  function Z2(e2) {
    return e2 != e2;
  }
  const $3 = function() {
    const e2 = "0123456789abcdef", t2 = new Array(256);
    for (let r3 = 0; r3 < 16; ++r3) {
      const n3 = 16 * r3;
      for (let o3 = 0; o3 < 16; ++o3) t2[n3 + o3] = e2[r3] + e2[o3];
    }
    return t2;
  }();
  function Q2(e2) {
    return "undefined" == typeof BigInt ? J2 : e2;
  }
  function J2() {
    throw new Error("BigInt not supported");
  }
}, 1053: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.rawPolyfilledDiagnosticRecord = void 0, t.rawPolyfilledDiagnosticRecord = { OPERATION: "", OPERATION_CODE: "0", CURRENT_SCHEMA: "/" }, Object.freeze(t.rawPolyfilledDiagnosticRecord);
}, 1074: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.isValidDate = void 0, t.isValidDate = function(e2) {
    return e2 instanceof Date && !isNaN(e2);
  };
}, 1092: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = o2(r2(6377)), a2 = o2(r2(6161)), u2 = o2(r2(3321)), s2 = o2(r2(7021)), c2 = r2(9014), l2 = r2(9305).internal.constants, f2 = l2.BOLT_PROTOCOL_V5_8, h2 = l2.FETCH_ALL, d2 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), Object.defineProperty(t2.prototype, "version", { get: function() {
      return f2;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "transformer", { get: function() {
      var e3 = this;
      return void 0 === this._transformer && (this._transformer = new u2.default(Object.values(a2.default).map(function(t3) {
        return t3(e3._config, e3._log);
      }))), this._transformer;
    }, enumerable: false, configurable: true }), t2.prototype.run = function(e3, t3, r3) {
      var n3 = void 0 === r3 ? {} : r3, o3 = n3.bookmarks, i3 = n3.txConfig, a3 = n3.database, u3 = n3.mode, l3 = n3.impersonatedUser, f3 = n3.notificationFilter, d3 = n3.beforeKeys, p3 = n3.afterKeys, v3 = n3.beforeError, y3 = n3.afterError, b2 = n3.beforeComplete, m2 = n3.afterComplete, g2 = n3.flush, _2 = void 0 === g2 || g2, w2 = n3.reactive, O2 = void 0 !== w2 && w2, S2 = n3.fetchSize, E2 = void 0 === S2 ? h2 : S2, P2 = n3.highRecordWatermark, T2 = void 0 === P2 ? Number.MAX_VALUE : P2, x3 = n3.lowRecordWatermark, C2 = void 0 === x3 ? Number.MAX_VALUE : x3, j2 = n3.onDb, A2 = new c2.ResultStreamObserver({ server: this._server, reactive: O2, fetchSize: E2, moreFunction: this._requestMore.bind(this), discardFunction: this._requestDiscard.bind(this), beforeKeys: d3, afterKeys: p3, beforeError: v3, afterError: y3, beforeComplete: b2, afterComplete: m2, highRecordWatermark: T2, lowRecordWatermark: C2, enrichMetadata: this._enrichMetadata, onDb: j2 }), k2 = O2;
      return this.write(s2.default.runWithMetadata5x5(e3, t3, { bookmarks: o3, txConfig: i3, database: a3, mode: u3, impersonatedUser: l3, notificationFilter: f3 }), A2, k2 && _2), O2 || this.write(s2.default.pull({ n: E2 }), A2, _2), A2;
    }, t2;
  }(i2.default);
  t.default = d2;
}, 1103: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.throwError = void 0;
  var n2 = r2(4662), o2 = r2(1018);
  t.throwError = function(e2, t2) {
    var r3 = o2.isFunction(e2) ? e2 : function() {
      return e2;
    }, i2 = function(e3) {
      return e3.error(r3());
    };
    return new n2.Observable(t2 ? function(e3) {
      return t2.schedule(i2, 0, e3);
    } : i2);
  };
}, 1107: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.popNumber = t.popScheduler = t.popResultSelector = void 0;
  var n2 = r2(1018), o2 = r2(8613);
  function i2(e2) {
    return e2[e2.length - 1];
  }
  t.popResultSelector = function(e2) {
    return n2.isFunction(i2(e2)) ? e2.pop() : void 0;
  }, t.popScheduler = function(e2) {
    return o2.isScheduler(i2(e2)) ? e2.pop() : void 0;
  }, t.popNumber = function(e2, t2) {
    return "number" == typeof i2(e2) ? e2.pop() : t2;
  };
}, 1116: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.isInteropObservable = void 0;
  var n2 = r2(3327), o2 = r2(1018);
  t.isInteropObservable = function(e2) {
    return o2.isFunction(e2[n2.observable]);
  };
}, 1141: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.windowWhen = void 0;
  var n2 = r2(2483), o2 = r2(7843), i2 = r2(3111), a2 = r2(9445);
  t.windowWhen = function(e2) {
    return o2.operate(function(t2, r3) {
      var o3, u2, s2 = function(e3) {
        o3.error(e3), r3.error(e3);
      }, c2 = function() {
        var t3;
        null == u2 || u2.unsubscribe(), null == o3 || o3.complete(), o3 = new n2.Subject(), r3.next(o3.asObservable());
        try {
          t3 = a2.innerFrom(e2());
        } catch (e3) {
          return void s2(e3);
        }
        t3.subscribe(u2 = i2.createOperatorSubscriber(r3, c2, c2, s2));
      };
      c2(), t2.subscribe(i2.createOperatorSubscriber(r3, function(e3) {
        return o3.next(e3);
      }, function() {
        o3.complete(), r3.complete();
      }, s2, function() {
        null == u2 || u2.unsubscribe(), o3 = null;
      }));
    });
  };
}, 1175: function(e, t, r2) {
  var n2 = this && this.__assign || function() {
    return n2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, n2.apply(this, arguments);
  }, o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = o2(r2(3448));
  t.default = n2({}, i2.default);
}, 1187: function(e, t, r2) {
  var n2 = this && this.__awaiter || function(e2, t2, r3, n3) {
    return new (r3 || (r3 = Promise))(function(o3, i3) {
      function a3(e3) {
        try {
          s3(n3.next(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function u3(e3) {
        try {
          s3(n3.throw(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function s3(e3) {
        var t3;
        e3.done ? o3(e3.value) : (t3 = e3.value, t3 instanceof r3 ? t3 : new r3(function(e4) {
          e4(t3);
        })).then(a3, u3);
      }
      s3((n3 = n3.apply(e2, t2 || [])).next());
    });
  }, o2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u3(0), throw: u3(1), return: u3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u3(u4) {
      return function(s3) {
        return function(u5) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; i3 && (i3 = 0, u5[0] && (a3 = 0)), a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & u5[0] ? n3.return : u5[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, u5[1])).done) return o3;
            switch (n3 = 0, o3 && (u5 = [2 & u5[0], o3.value]), u5[0]) {
              case 0:
              case 1:
                o3 = u5;
                break;
              case 4:
                return a3.label++, { value: u5[1], done: false };
              case 5:
                a3.label++, n3 = u5[1], u5 = [0];
                continue;
              case 7:
                u5 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== u5[0] && 2 !== u5[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === u5[0] && (!o3 || u5[1] > o3[0] && u5[1] < o3[3])) {
                  a3.label = u5[1];
                  break;
                }
                if (6 === u5[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = u5;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(u5);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            u5 = t2.call(e2, a3);
          } catch (e3) {
            u5 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & u5[0]) throw u5[1];
          return { value: u5[0] ? u5[1] : void 0, done: true };
        }([u4, s3]);
      };
    }
  }, i2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.UnboundRelationship = t.Relationship = t.Node = t.Record = t.ServerInfo = t.GqlStatusObject = t.Notification = t.QueryStatistics = t.ProfiledPlan = t.Plan = t.ResultSummary = t.RxResult = t.RxManagedTransaction = t.RxTransaction = t.RxSession = t.EagerResult = t.Result = t.ManagedTransaction = t.Transaction = t.Session = t.Driver = t.temporal = t.spatial = t.graph = t.error = t.routing = t.session = t.types = t.logging = t.auth = t.isRetryableError = t.Neo4jError = t.integer = t.isUnboundRelationship = t.isRelationship = t.isPathSegment = t.isPath = t.isNode = t.isDateTime = t.isLocalDateTime = t.isDate = t.isTime = t.isLocalTime = t.isDuration = t.isPoint = t.isInt = t.int = t.hasReachableServer = t.driver = t.authTokenManagers = void 0, t.clientCertificateProviders = t.notificationFilterMinimumSeverityLevel = t.notificationFilterDisabledClassification = t.notificationFilterDisabledCategory = t.notificationSeverityLevel = t.notificationClassification = t.notificationCategory = t.resultTransformers = t.bookmarkManager = t.DateTime = t.LocalDateTime = t.Date = t.Time = t.LocalTime = t.Duration = t.Integer = t.Point = t.PathSegment = t.Path = void 0;
  var a2 = r2(7857);
  Object.defineProperty(t, "Driver", { enumerable: true, get: function() {
    return a2.Driver;
  } });
  var u2 = i2(r2(3659)), s2 = r2(9305);
  Object.defineProperty(t, "authTokenManagers", { enumerable: true, get: function() {
    return s2.authTokenManagers;
  } }), Object.defineProperty(t, "Neo4jError", { enumerable: true, get: function() {
    return s2.Neo4jError;
  } }), Object.defineProperty(t, "isRetryableError", { enumerable: true, get: function() {
    return s2.isRetryableError;
  } }), Object.defineProperty(t, "error", { enumerable: true, get: function() {
    return s2.error;
  } }), Object.defineProperty(t, "Integer", { enumerable: true, get: function() {
    return s2.Integer;
  } }), Object.defineProperty(t, "int", { enumerable: true, get: function() {
    return s2.int;
  } }), Object.defineProperty(t, "isInt", { enumerable: true, get: function() {
    return s2.isInt;
  } }), Object.defineProperty(t, "isPoint", { enumerable: true, get: function() {
    return s2.isPoint;
  } }), Object.defineProperty(t, "Point", { enumerable: true, get: function() {
    return s2.Point;
  } }), Object.defineProperty(t, "Date", { enumerable: true, get: function() {
    return s2.Date;
  } }), Object.defineProperty(t, "DateTime", { enumerable: true, get: function() {
    return s2.DateTime;
  } }), Object.defineProperty(t, "Duration", { enumerable: true, get: function() {
    return s2.Duration;
  } }), Object.defineProperty(t, "isDate", { enumerable: true, get: function() {
    return s2.isDate;
  } }), Object.defineProperty(t, "isDateTime", { enumerable: true, get: function() {
    return s2.isDateTime;
  } }), Object.defineProperty(t, "isDuration", { enumerable: true, get: function() {
    return s2.isDuration;
  } }), Object.defineProperty(t, "isLocalDateTime", { enumerable: true, get: function() {
    return s2.isLocalDateTime;
  } }), Object.defineProperty(t, "isLocalTime", { enumerable: true, get: function() {
    return s2.isLocalTime;
  } }), Object.defineProperty(t, "isNode", { enumerable: true, get: function() {
    return s2.isNode;
  } }), Object.defineProperty(t, "isPath", { enumerable: true, get: function() {
    return s2.isPath;
  } }), Object.defineProperty(t, "isPathSegment", { enumerable: true, get: function() {
    return s2.isPathSegment;
  } }), Object.defineProperty(t, "isRelationship", { enumerable: true, get: function() {
    return s2.isRelationship;
  } }), Object.defineProperty(t, "isTime", { enumerable: true, get: function() {
    return s2.isTime;
  } }), Object.defineProperty(t, "isUnboundRelationship", { enumerable: true, get: function() {
    return s2.isUnboundRelationship;
  } }), Object.defineProperty(t, "LocalDateTime", { enumerable: true, get: function() {
    return s2.LocalDateTime;
  } }), Object.defineProperty(t, "LocalTime", { enumerable: true, get: function() {
    return s2.LocalTime;
  } }), Object.defineProperty(t, "Time", { enumerable: true, get: function() {
    return s2.Time;
  } }), Object.defineProperty(t, "Node", { enumerable: true, get: function() {
    return s2.Node;
  } }), Object.defineProperty(t, "Path", { enumerable: true, get: function() {
    return s2.Path;
  } }), Object.defineProperty(t, "PathSegment", { enumerable: true, get: function() {
    return s2.PathSegment;
  } }), Object.defineProperty(t, "Relationship", { enumerable: true, get: function() {
    return s2.Relationship;
  } }), Object.defineProperty(t, "UnboundRelationship", { enumerable: true, get: function() {
    return s2.UnboundRelationship;
  } }), Object.defineProperty(t, "Record", { enumerable: true, get: function() {
    return s2.Record;
  } }), Object.defineProperty(t, "ResultSummary", { enumerable: true, get: function() {
    return s2.ResultSummary;
  } }), Object.defineProperty(t, "Plan", { enumerable: true, get: function() {
    return s2.Plan;
  } }), Object.defineProperty(t, "ProfiledPlan", { enumerable: true, get: function() {
    return s2.ProfiledPlan;
  } }), Object.defineProperty(t, "QueryStatistics", { enumerable: true, get: function() {
    return s2.QueryStatistics;
  } }), Object.defineProperty(t, "Notification", { enumerable: true, get: function() {
    return s2.Notification;
  } }), Object.defineProperty(t, "GqlStatusObject", { enumerable: true, get: function() {
    return s2.GqlStatusObject;
  } }), Object.defineProperty(t, "ServerInfo", { enumerable: true, get: function() {
    return s2.ServerInfo;
  } }), Object.defineProperty(t, "Result", { enumerable: true, get: function() {
    return s2.Result;
  } }), Object.defineProperty(t, "EagerResult", { enumerable: true, get: function() {
    return s2.EagerResult;
  } }), Object.defineProperty(t, "auth", { enumerable: true, get: function() {
    return s2.auth;
  } }), Object.defineProperty(t, "Session", { enumerable: true, get: function() {
    return s2.Session;
  } }), Object.defineProperty(t, "Transaction", { enumerable: true, get: function() {
    return s2.Transaction;
  } }), Object.defineProperty(t, "ManagedTransaction", { enumerable: true, get: function() {
    return s2.ManagedTransaction;
  } }), Object.defineProperty(t, "bookmarkManager", { enumerable: true, get: function() {
    return s2.bookmarkManager;
  } }), Object.defineProperty(t, "routing", { enumerable: true, get: function() {
    return s2.routing;
  } }), Object.defineProperty(t, "resultTransformers", { enumerable: true, get: function() {
    return s2.resultTransformers;
  } }), Object.defineProperty(t, "notificationCategory", { enumerable: true, get: function() {
    return s2.notificationCategory;
  } }), Object.defineProperty(t, "notificationClassification", { enumerable: true, get: function() {
    return s2.notificationClassification;
  } }), Object.defineProperty(t, "notificationSeverityLevel", { enumerable: true, get: function() {
    return s2.notificationSeverityLevel;
  } }), Object.defineProperty(t, "notificationFilterDisabledCategory", { enumerable: true, get: function() {
    return s2.notificationFilterDisabledCategory;
  } }), Object.defineProperty(t, "notificationFilterDisabledClassification", { enumerable: true, get: function() {
    return s2.notificationFilterDisabledClassification;
  } }), Object.defineProperty(t, "notificationFilterMinimumSeverityLevel", { enumerable: true, get: function() {
    return s2.notificationFilterMinimumSeverityLevel;
  } }), Object.defineProperty(t, "clientCertificateProviders", { enumerable: true, get: function() {
    return s2.clientCertificateProviders;
  } });
  var c2 = r2(6672), l2 = i2(r2(3466));
  t.RxSession = l2.default;
  var f2 = i2(r2(5742));
  t.RxTransaction = f2.default;
  var h2 = i2(r2(1530));
  t.RxManagedTransaction = h2.default;
  var d2 = i2(r2(3057));
  t.RxResult = d2.default;
  var p3 = s2.internal.util, v3 = p3.ENCRYPTION_ON, y3 = p3.assertString, b2 = p3.isEmptyObjectOrNull, m2 = s2.internal.serverAddress.ServerAddress, g2 = s2.internal.urlUtil, _2 = "neo4j-javascript/" + u2.default;
  function w2(e2, t2, r3) {
    void 0 === r3 && (r3 = {}), y3(e2, "Bolt URL");
    var n3, o3 = g2.parseDatabaseUrl(e2), i3 = false, l3 = false;
    switch (o3.scheme) {
      case "bolt":
        break;
      case "bolt+s":
        l3 = true, n3 = "TRUST_SYSTEM_CA_SIGNED_CERTIFICATES";
        break;
      case "bolt+ssc":
        l3 = true, n3 = "TRUST_ALL_CERTIFICATES";
        break;
      case "neo4j":
        i3 = true;
        break;
      case "neo4j+s":
        l3 = true, n3 = "TRUST_SYSTEM_CA_SIGNED_CERTIFICATES", i3 = true;
        break;
      case "neo4j+ssc":
        l3 = true, n3 = "TRUST_ALL_CERTIFICATES", i3 = true;
        break;
      default:
        throw new Error("Unknown scheme: ".concat(o3.scheme));
    }
    if (l3) {
      if ("encrypted" in r3 || "trust" in r3) throw new Error("Encryption/trust can only be configured either through URL or config, not both");
      r3.encrypted = v3, r3.trust = n3, r3.clientCertificate = (0, s2.resolveCertificateProvider)(r3.clientCertificate);
    }
    var f3 = function(e3) {
      if ("object" == typeof (t3 = e3) && null != t3 && "getToken" in t3 && "handleSecurityException" in t3 && "function" == typeof t3.getToken && "function" == typeof t3.handleSecurityException) return e3;
      var t3, r4 = e3;
      return (r4 = r4 || {}).scheme = r4.scheme || "none", (0, s2.staticAuthTokenManager)({ authToken: r4 });
    }(t2);
    r3.userAgent = r3.userAgent || _2, r3.boltAgent = s2.internal.boltAgent.fromVersion(u2.default);
    var h3 = m2.fromUrl(o3.hostAndPort), d3 = { address: h3, typename: i3 ? "Routing" : "Direct", routing: i3 };
    return new a2.Driver(d3, r3, function() {
      if (i3) return function(e3, t3, r4, n4) {
        return new c2.RoutingConnectionProvider({ id: e3, config: t3, log: r4, hostNameResolver: n4, authTokenManager: f3, address: h3, userAgent: t3.userAgent, boltAgent: t3.boltAgent, routingContext: o3.query });
      };
      if (!b2(o3.query)) throw new Error("Parameters are not supported with none routed scheme. Given URL: '".concat(e2, "'"));
      return function(e3, t3, r4) {
        return new c2.DirectConnectionProvider({ id: e3, config: t3, log: r4, authTokenManager: f3, address: h3, userAgent: t3.userAgent, boltAgent: t3.boltAgent });
      };
    }());
  }
  function O2(e2, t2) {
    return n2(this, void 0, void 0, function() {
      var r3;
      return o2(this, function(n3) {
        switch (n3.label) {
          case 0:
            r3 = w2(e2, { scheme: "none", principal: "", credentials: "" }, t2), n3.label = 1;
          case 1:
            return n3.trys.push([1, , 3, 5]), [4, r3.getNegotiatedProtocolVersion()];
          case 2:
            return n3.sent(), [2, true];
          case 3:
            return [4, r3.close()];
          case 4:
            return n3.sent(), [7];
          case 5:
            return [2];
        }
      });
    });
  }
  t.driver = w2, t.hasReachableServer = O2;
  var S2 = { console: function(e2) {
    return { level: e2, logger: function(e3, t2) {
      return console.log("".concat(r2.g.Date.now(), " ").concat(e3.toUpperCase(), " ").concat(t2));
    } };
  } };
  t.logging = S2;
  var E2 = { Node: s2.Node, Relationship: s2.Relationship, UnboundRelationship: s2.UnboundRelationship, PathSegment: s2.PathSegment, Path: s2.Path, Result: s2.Result, EagerResult: s2.EagerResult, ResultSummary: s2.ResultSummary, Record: s2.Record, Point: s2.Point, Date: s2.Date, DateTime: s2.DateTime, Duration: s2.Duration, LocalDateTime: s2.LocalDateTime, LocalTime: s2.LocalTime, Time: s2.Time, Integer: s2.Integer };
  t.types = E2;
  var P2 = { READ: a2.READ, WRITE: a2.WRITE };
  t.session = P2;
  var T2 = { toNumber: s2.toNumber, toString: s2.toString, inSafeRange: s2.inSafeRange };
  t.integer = T2;
  var x3 = { isPoint: s2.isPoint };
  t.spatial = x3;
  var C2 = { isDuration: s2.isDuration, isLocalTime: s2.isLocalTime, isTime: s2.isTime, isDate: s2.isDate, isLocalDateTime: s2.isLocalDateTime, isDateTime: s2.isDateTime };
  t.temporal = C2;
  var j2 = { isNode: s2.isNode, isPath: s2.isPath, isPathSegment: s2.isPathSegment, isRelationship: s2.isRelationship, isUnboundRelationship: s2.isUnboundRelationship };
  t.graph = j2;
  var A2 = { authTokenManagers: s2.authTokenManagers, driver: w2, hasReachableServer: O2, int: s2.int, isInt: s2.isInt, isPoint: s2.isPoint, isDuration: s2.isDuration, isLocalTime: s2.isLocalTime, isTime: s2.isTime, isDate: s2.isDate, isLocalDateTime: s2.isLocalDateTime, isDateTime: s2.isDateTime, isNode: s2.isNode, isPath: s2.isPath, isPathSegment: s2.isPathSegment, isRelationship: s2.isRelationship, isUnboundRelationship: s2.isUnboundRelationship, integer: T2, Neo4jError: s2.Neo4jError, isRetryableError: s2.isRetryableError, auth: s2.auth, logging: S2, types: E2, session: P2, routing: s2.routing, error: s2.error, graph: j2, spatial: x3, temporal: C2, Driver: a2.Driver, Session: s2.Session, Transaction: s2.Transaction, ManagedTransaction: s2.ManagedTransaction, Result: s2.Result, EagerResult: s2.EagerResult, RxSession: l2.default, RxTransaction: f2.default, RxManagedTransaction: h2.default, RxResult: d2.default, ResultSummary: s2.ResultSummary, Plan: s2.Plan, ProfiledPlan: s2.ProfiledPlan, QueryStatistics: s2.QueryStatistics, Notification: s2.Notification, GqlStatusObject: s2.GqlStatusObject, ServerInfo: s2.ServerInfo, Record: s2.Record, Node: s2.Node, Relationship: s2.Relationship, UnboundRelationship: s2.UnboundRelationship, Path: s2.Path, PathSegment: s2.PathSegment, Point: s2.Point, Integer: s2.Integer, Duration: s2.Duration, LocalTime: s2.LocalTime, Time: s2.Time, Date: s2.Date, LocalDateTime: s2.LocalDateTime, DateTime: s2.DateTime, bookmarkManager: s2.bookmarkManager, resultTransformers: s2.resultTransformers, notificationCategory: s2.notificationCategory, notificationSeverityLevel: s2.notificationSeverityLevel, notificationFilterDisabledCategory: s2.notificationFilterDisabledCategory, notificationFilterMinimumSeverityLevel: s2.notificationFilterMinimumSeverityLevel, clientCertificateProviders: s2.clientCertificateProviders };
  t.default = A2;
}, 1226: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, o2 = this && this.__spreadArray || function(e2, t2) {
    for (var r3 = 0, n3 = t2.length, o3 = e2.length; r3 < n3; r3++, o3++) e2[o3] = t2[r3];
    return e2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.onErrorResumeNext = t.onErrorResumeNextWith = void 0;
  var i2 = r2(8535), a2 = r2(6102);
  function u2() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    var r3 = i2.argsOrArgArray(e2);
    return function(e3) {
      return a2.onErrorResumeNext.apply(void 0, o2([e3], n2(r3)));
    };
  }
  t.onErrorResumeNextWith = u2, t.onErrorResumeNext = u2;
}, 1242: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true }), t.ReplaySubject = void 0;
  var o2 = r2(2483), i2 = r2(9568), a2 = function(e2) {
    function t2(t3, r3, n3) {
      void 0 === t3 && (t3 = 1 / 0), void 0 === r3 && (r3 = 1 / 0), void 0 === n3 && (n3 = i2.dateTimestampProvider);
      var o3 = e2.call(this) || this;
      return o3._bufferSize = t3, o3._windowTime = r3, o3._timestampProvider = n3, o3._buffer = [], o3._infiniteTimeWindow = true, o3._infiniteTimeWindow = r3 === 1 / 0, o3._bufferSize = Math.max(1, t3), o3._windowTime = Math.max(1, r3), o3;
    }
    return n2(t2, e2), t2.prototype.next = function(t3) {
      var r3 = this, n3 = r3.isStopped, o3 = r3._buffer, i3 = r3._infiniteTimeWindow, a3 = r3._timestampProvider, u2 = r3._windowTime;
      n3 || (o3.push(t3), !i3 && o3.push(a3.now() + u2)), this._trimBuffer(), e2.prototype.next.call(this, t3);
    }, t2.prototype._subscribe = function(e3) {
      this._throwIfClosed(), this._trimBuffer();
      for (var t3 = this._innerSubscribe(e3), r3 = this._infiniteTimeWindow, n3 = this._buffer.slice(), o3 = 0; o3 < n3.length && !e3.closed; o3 += r3 ? 1 : 2) e3.next(n3[o3]);
      return this._checkFinalizedStatuses(e3), t3;
    }, t2.prototype._trimBuffer = function() {
      var e3 = this, t3 = e3._bufferSize, r3 = e3._timestampProvider, n3 = e3._buffer, o3 = e3._infiniteTimeWindow, i3 = (o3 ? 1 : 2) * t3;
      if (t3 < 1 / 0 && i3 < n3.length && n3.splice(0, n3.length - i3), !o3) {
        for (var a3 = r3.now(), u2 = 0, s2 = 1; s2 < n3.length && n3[s2] <= a3; s2 += 2) u2 = s2;
        u2 && n3.splice(0, u2 + 1);
      }
    }, t2;
  }(o2.Subject);
  t.ReplaySubject = a2;
}, 1251: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, o2 = this && this.__spreadArray || function(e2, t2) {
    for (var r3 = 0, n3 = t2.length, o3 = e2.length; r3 < n3; r3++, o3++) e2[o3] = t2[r3];
    return e2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.mapOneOrManyArgs = void 0;
  var i2 = r2(5471), a2 = Array.isArray;
  t.mapOneOrManyArgs = function(e2) {
    return i2.map(function(t2) {
      return function(e3, t3) {
        return a2(t3) ? e3.apply(void 0, o2([], n2(t3))) : e3(t3);
      }(e2, t2);
    });
  };
}, 1293: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true }), t.QueueScheduler = void 0;
  var o2 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), t2;
  }(r2(5648).AsyncScheduler);
  t.QueueScheduler = o2;
}, 1342: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.noop = void 0, t.noop = function() {
  };
}, 1358: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.isAsyncIterable = void 0;
  var n2 = r2(1018);
  t.isAsyncIterable = function(e2) {
    return Symbol.asyncIterator && n2.isFunction(null == e2 ? void 0 : e2[Symbol.asyncIterator]);
  };
}, 1409: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true });
  var r2 = function() {
    function e2() {
    }
    return e2.prototype.beginTransaction = function(e3) {
      throw new Error("Not implemented");
    }, e2.prototype.run = function(e3, t2, r3) {
      throw new Error("Not implemented");
    }, e2.prototype.commitTransaction = function(e3) {
      throw new Error("Not implemented");
    }, e2.prototype.rollbackTransaction = function(e3) {
      throw new Error("Not implemented");
    }, e2.prototype.resetAndFlush = function() {
      throw new Error("Not implemented");
    }, e2.prototype.isOpen = function() {
      throw new Error("Not implemented");
    }, e2.prototype.getProtocolVersion = function() {
      throw new Error("Not implemented");
    }, e2.prototype.hasOngoingObservableRequests = function() {
      throw new Error("Not implemented");
    }, e2;
  }();
  t.default = r2;
}, 1415: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.max = void 0;
  var n2 = r2(9139), o2 = r2(1018);
  t.max = function(e2) {
    return n2.reduce(o2.isFunction(e2) ? function(t2, r3) {
      return e2(t2, r3) > 0 ? t2 : r3;
    } : function(e3, t2) {
      return e3 > t2 ? e3 : t2;
    });
  };
}, 1439: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, o2 = this && this.__spreadArray || function(e2, t2) {
    for (var r3 = 0, n3 = t2.length, o3 = e2.length; r3 < n3; r3++, o3++) e2[o3] = t2[r3];
    return e2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.bindCallbackInternals = void 0;
  var i2 = r2(8613), a2 = r2(4662), u2 = r2(8960), s2 = r2(1251), c2 = r2(5184), l2 = r2(95);
  t.bindCallbackInternals = function e2(t2, r3, f2, h2) {
    if (f2) {
      if (!i2.isScheduler(f2)) return function() {
        for (var n3 = [], o3 = 0; o3 < arguments.length; o3++) n3[o3] = arguments[o3];
        return e2(t2, r3, h2).apply(this, n3).pipe(s2.mapOneOrManyArgs(f2));
      };
      h2 = f2;
    }
    return h2 ? function() {
      for (var n3 = [], o3 = 0; o3 < arguments.length; o3++) n3[o3] = arguments[o3];
      return e2(t2, r3).apply(this, n3).pipe(u2.subscribeOn(h2), c2.observeOn(h2));
    } : function() {
      for (var e3 = this, i3 = [], u3 = 0; u3 < arguments.length; u3++) i3[u3] = arguments[u3];
      var s3 = new l2.AsyncSubject(), c3 = true;
      return new a2.Observable(function(a3) {
        var u4 = s3.subscribe(a3);
        if (c3) {
          c3 = false;
          var l3 = false, f3 = false;
          r3.apply(e3, o2(o2([], n2(i3)), [function() {
            for (var e4 = [], r4 = 0; r4 < arguments.length; r4++) e4[r4] = arguments[r4];
            if (t2) {
              var n3 = e4.shift();
              if (null != n3) return void s3.error(n3);
            }
            s3.next(1 < e4.length ? e4 : e4[0]), f3 = true, l3 && s3.complete();
          }])), f3 && s3.complete(), l3 = true;
        }
        return u4;
      });
    };
  };
}, 1483: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.connect = void 0;
  var n2 = r2(2483), o2 = r2(9445), i2 = r2(7843), a2 = r2(6824), u2 = { connector: function() {
    return new n2.Subject();
  } };
  t.connect = function(e2, t2) {
    void 0 === t2 && (t2 = u2);
    var r3 = t2.connector;
    return i2.operate(function(t3, n3) {
      var i3 = r3();
      o2.innerFrom(e2(a2.fromSubscribable(i3))).subscribe(n3), n3.add(t3.subscribe(i3));
    });
  };
}, 1505: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.SequenceError = void 0;
  var n2 = r2(5568);
  t.SequenceError = n2.createErrorClass(function(e2) {
    return function(t2) {
      e2(this), this.name = "SequenceError", this.message = t2;
    };
  });
}, 1517: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.isPathSegment = t.PathSegment = t.isPath = t.Path = t.isUnboundRelationship = t.UnboundRelationship = t.isRelationship = t.Relationship = t.isNode = t.Node = void 0;
  var n2 = r2(4027), o2 = { value: true, enumerable: false, configurable: false, writable: false }, i2 = "__isNode__", a2 = "__isRelationship__", u2 = "__isUnboundRelationship__", s2 = "__isPath__", c2 = "__isPathSegment__";
  function l2(e2, t2) {
    return null != e2 && true === e2[t2];
  }
  var f2 = function() {
    function e2(e3, t2, r3, n3) {
      this.identity = e3, this.labels = t2, this.properties = r3, this.elementId = y3(n3, function() {
        return e3.toString();
      });
    }
    return e2.prototype.toString = function() {
      for (var e3 = "(" + this.elementId, t2 = 0; t2 < this.labels.length; t2++) e3 += ":" + this.labels[t2];
      var r3 = Object.keys(this.properties);
      if (r3.length > 0) {
        for (e3 += " {", t2 = 0; t2 < r3.length; t2++) t2 > 0 && (e3 += ","), e3 += r3[t2] + ":" + (0, n2.stringify)(this.properties[r3[t2]]);
        e3 += "}";
      }
      return e3 + ")";
    }, e2;
  }();
  t.Node = f2, Object.defineProperty(f2.prototype, i2, o2), t.isNode = function(e2) {
    return l2(e2, i2);
  };
  var h2 = function() {
    function e2(e3, t2, r3, n3, o3, i3, a3, u3) {
      this.identity = e3, this.start = t2, this.end = r3, this.type = n3, this.properties = o3, this.elementId = y3(i3, function() {
        return e3.toString();
      }), this.startNodeElementId = y3(a3, function() {
        return t2.toString();
      }), this.endNodeElementId = y3(u3, function() {
        return r3.toString();
      });
    }
    return e2.prototype.toString = function() {
      var e3 = "(" + this.startNodeElementId + ")-[:" + this.type, t2 = Object.keys(this.properties);
      if (t2.length > 0) {
        e3 += " {";
        for (var r3 = 0; r3 < t2.length; r3++) r3 > 0 && (e3 += ","), e3 += t2[r3] + ":" + (0, n2.stringify)(this.properties[t2[r3]]);
        e3 += "}";
      }
      return e3 + "]->(" + this.endNodeElementId + ")";
    }, e2;
  }();
  t.Relationship = h2, Object.defineProperty(h2.prototype, a2, o2), t.isRelationship = function(e2) {
    return l2(e2, a2);
  };
  var d2 = function() {
    function e2(e3, t2, r3, n3) {
      this.identity = e3, this.type = t2, this.properties = r3, this.elementId = y3(n3, function() {
        return e3.toString();
      });
    }
    return e2.prototype.bind = function(e3, t2) {
      return new h2(this.identity, e3, t2, this.type, this.properties, this.elementId);
    }, e2.prototype.bindTo = function(e3, t2) {
      return new h2(this.identity, e3.identity, t2.identity, this.type, this.properties, this.elementId, e3.elementId, t2.elementId);
    }, e2.prototype.toString = function() {
      var e3 = "-[:" + this.type, t2 = Object.keys(this.properties);
      if (t2.length > 0) {
        e3 += " {";
        for (var r3 = 0; r3 < t2.length; r3++) r3 > 0 && (e3 += ","), e3 += t2[r3] + ":" + (0, n2.stringify)(this.properties[t2[r3]]);
        e3 += "}";
      }
      return e3 + "]->";
    }, e2;
  }();
  t.UnboundRelationship = d2, Object.defineProperty(d2.prototype, u2, o2), t.isUnboundRelationship = function(e2) {
    return l2(e2, u2);
  };
  var p3 = function(e2, t2, r3) {
    this.start = e2, this.relationship = t2, this.end = r3;
  };
  t.PathSegment = p3, Object.defineProperty(p3.prototype, c2, o2), t.isPathSegment = function(e2) {
    return l2(e2, c2);
  };
  var v3 = function(e2, t2, r3) {
    this.start = e2, this.end = t2, this.segments = r3, this.length = r3.length;
  };
  function y3(e2, t2) {
    return null == e2 ? t2() : e2;
  }
  t.Path = v3, Object.defineProperty(v3.prototype, s2, o2), t.isPath = function(e2) {
    return l2(e2, s2);
  };
}, 1518: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.pairwise = void 0;
  var n2 = r2(7843), o2 = r2(3111);
  t.pairwise = function() {
    return n2.operate(function(e2, t2) {
      var r3, n3 = false;
      e2.subscribe(o2.createOperatorSubscriber(t2, function(e3) {
        var o3 = r3;
        r3 = e3, n3 && t2.next([o3, e3]), n3 = true;
      }));
    });
  };
}, 1530: function(e, t, r2) {
  var n2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true }), n2(r2(3057)), n2(r2(5742));
  var o2 = function() {
    function e2(e3) {
      var t2 = e3.run;
      this._run = t2;
    }
    return e2.fromTransaction = function(t2) {
      return new e2({ run: t2.run.bind(t2) });
    }, e2.prototype.run = function(e3, t2) {
      return this._run(e3, t2);
    }, e2;
  }();
  t.default = o2;
}, 1551: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.exhaust = void 0;
  var n2 = r2(2752);
  t.exhaust = n2.exhaustAll;
}, 1554: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.timeout = t.TimeoutError = void 0;
  var n2 = r2(7961), o2 = r2(1074), i2 = r2(7843), a2 = r2(9445), u2 = r2(5568), s2 = r2(3111), c2 = r2(7110);
  function l2(e2) {
    throw new t.TimeoutError(e2);
  }
  t.TimeoutError = u2.createErrorClass(function(e2) {
    return function(t2) {
      void 0 === t2 && (t2 = null), e2(this), this.message = "Timeout has occurred", this.name = "TimeoutError", this.info = t2;
    };
  }), t.timeout = function(e2, t2) {
    var r3 = o2.isValidDate(e2) ? { first: e2 } : "number" == typeof e2 ? { each: e2 } : e2, u3 = r3.first, f2 = r3.each, h2 = r3.with, d2 = void 0 === h2 ? l2 : h2, p3 = r3.scheduler, v3 = void 0 === p3 ? null != t2 ? t2 : n2.asyncScheduler : p3, y3 = r3.meta, b2 = void 0 === y3 ? null : y3;
    if (null == u3 && null == f2) throw new TypeError("No timeout provided.");
    return i2.operate(function(e3, t3) {
      var r4, n3, o3 = null, i3 = 0, l3 = function(e4) {
        n3 = c2.executeSchedule(t3, v3, function() {
          try {
            r4.unsubscribe(), a2.innerFrom(d2({ meta: b2, lastValue: o3, seen: i3 })).subscribe(t3);
          } catch (e5) {
            t3.error(e5);
          }
        }, e4);
      };
      r4 = e3.subscribe(s2.createOperatorSubscriber(t3, function(e4) {
        null == n3 || n3.unsubscribe(), i3++, t3.next(o3 = e4), f2 > 0 && l3(f2);
      }, void 0, void 0, function() {
        (null == n3 ? void 0 : n3.closed) || null == n3 || n3.unsubscribe(), o3 = null;
      })), !i3 && l3(null != u3 ? "number" == typeof u3 ? u3 : +u3 - v3.now() : f2);
    });
  };
}, 1573: function(e, t, r2) {
  var n2 = this && this.__awaiter || function(e2, t2, r3, n3) {
    return new (r3 || (r3 = Promise))(function(o3, i3) {
      function a3(e3) {
        try {
          s3(n3.next(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function u3(e3) {
        try {
          s3(n3.throw(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function s3(e3) {
        var t3;
        e3.done ? o3(e3.value) : (t3 = e3.value, t3 instanceof r3 ? t3 : new r3(function(e4) {
          e4(t3);
        })).then(a3, u3);
      }
      s3((n3 = n3.apply(e2, t2 || [])).next());
    });
  }, o2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u3(0), throw: u3(1), return: u3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u3(u4) {
      return function(s3) {
        return function(u5) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; i3 && (i3 = 0, u5[0] && (a3 = 0)), a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & u5[0] ? n3.return : u5[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, u5[1])).done) return o3;
            switch (n3 = 0, o3 && (u5 = [2 & u5[0], o3.value]), u5[0]) {
              case 0:
              case 1:
                o3 = u5;
                break;
              case 4:
                return a3.label++, { value: u5[1], done: false };
              case 5:
                a3.label++, n3 = u5[1], u5 = [0];
                continue;
              case 7:
                u5 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== u5[0] && 2 !== u5[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === u5[0] && (!o3 || u5[1] > o3[0] && u5[1] < o3[3])) {
                  a3.label = u5[1];
                  break;
                }
                if (6 === u5[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = u5;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(u5);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            u5 = t2.call(e2, a3);
          } catch (e3) {
            u5 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & u5[0]) throw u5[1];
          return { value: u5[0] ? u5[1] : void 0, done: true };
        }([u4, s3]);
      };
    }
  }, i2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var a2 = i2(r2(8917)), u2 = r2(9691), s2 = new (function() {
    function e2() {
    }
    return e2.prototype.eagerResultTransformer = function() {
      return c2;
    }, e2.prototype.eager = function() {
      return c2;
    }, e2.prototype.mappedResultTransformer = function(e3) {
      return l2(e3);
    }, e2.prototype.mapped = function(e3) {
      return l2(e3);
    }, e2.prototype.first = function() {
      return f2;
    }, e2.prototype.summary = function() {
      return h2;
    }, e2;
  }())();
  function c2(e2) {
    return n2(this, void 0, void 0, function() {
      var t2, r3, n3, i3;
      return o2(this, function(o3) {
        switch (o3.label) {
          case 0:
            return [4, e2];
          case 1:
            return t2 = o3.sent(), r3 = t2.summary, n3 = t2.records, [4, e2.keys()];
          case 2:
            return i3 = o3.sent(), [2, new a2.default(i3, n3, r3)];
        }
      });
    });
  }
  function l2(e2) {
    var t2 = this;
    if (null == e2 || null == e2.collect && null == e2.map) throw (0, u2.newError)("Requires a map or/and a collect functions.");
    return function(r3) {
      return n2(t2, void 0, void 0, function() {
        return o2(this, function(t3) {
          switch (t3.label) {
            case 0:
              return [4, new Promise(function(t4, n3) {
                var o3 = { records: [], keys: [] };
                r3.subscribe({ onKeys: function(e3) {
                  o3.keys = e3;
                }, onNext: function(t5) {
                  if (null != e2.map) {
                    var r4 = e2.map(t5);
                    void 0 !== r4 && o3.records.push(r4);
                  } else o3.records.push(t5);
                }, onCompleted: function(r4) {
                  if (null != e2.collect) t4(e2.collect(o3.records, r4, o3.keys));
                  else {
                    var n4 = { records: o3.records, summary: r4, keys: o3.keys };
                    t4(n4);
                  }
                }, onError: function(e3) {
                  n3(e3);
                } });
              })];
            case 1:
              return [2, t3.sent()];
          }
        });
      });
    };
  }
  function f2(e2) {
    return n2(this, void 0, void 0, function() {
      var t2, r3, n3, i3;
      return o2(this, function(o3) {
        switch (o3.label) {
          case 0:
            return [4, (t2 = e2[Symbol.asyncIterator]()).next()];
          case 1:
            r3 = o3.sent(), n3 = r3.value, i3 = r3.done, o3.label = 2;
          case 2:
            return o3.trys.push([2, , 3, 6]), true === i3 ? [2, void 0] : [2, n3];
          case 3:
            return null == t2.return ? [3, 5] : [4, t2.return()];
          case 4:
            o3.sent(), o3.label = 5;
          case 5:
            return [7];
          case 6:
            return [2];
        }
      });
    });
  }
  function h2(e2) {
    return n2(this, void 0, void 0, function() {
      return o2(this, function(t2) {
        switch (t2.label) {
          case 0:
            return [4, e2.summary()];
          case 1:
            return [2, t2.sent()];
        }
      });
    });
  }
  Object.freeze(s2), t.default = s2;
}, 1637: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true }), t.BehaviorSubject = void 0;
  var o2 = function(e2) {
    function t2(t3) {
      var r3 = e2.call(this) || this;
      return r3._value = t3, r3;
    }
    return n2(t2, e2), Object.defineProperty(t2.prototype, "value", { get: function() {
      return this.getValue();
    }, enumerable: false, configurable: true }), t2.prototype._subscribe = function(t3) {
      var r3 = e2.prototype._subscribe.call(this, t3);
      return !r3.closed && t3.next(this._value), r3;
    }, t2.prototype.getValue = function() {
      var e3 = this, t3 = e3.hasError, r3 = e3.thrownError, n3 = e3._value;
      if (t3) throw r3;
      return this._throwIfClosed(), n3;
    }, t2.prototype.next = function(t3) {
      e2.prototype.next.call(this, this._value = t3);
    }, t2;
  }(r2(2483).Subject);
  t.BehaviorSubject = o2;
}, 1656: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.scheduled = void 0;
  var n2 = r2(9567), o2 = r2(9589), i2 = r2(6985), a2 = r2(8808), u2 = r2(854), s2 = r2(1116), c2 = r2(7629), l2 = r2(8046), f2 = r2(6368), h2 = r2(1358), d2 = r2(7614), p3 = r2(9137), v3 = r2(4953);
  t.scheduled = function(e2, t2) {
    if (null != e2) {
      if (s2.isInteropObservable(e2)) return n2.scheduleObservable(e2, t2);
      if (l2.isArrayLike(e2)) return i2.scheduleArray(e2, t2);
      if (c2.isPromise(e2)) return o2.schedulePromise(e2, t2);
      if (h2.isAsyncIterable(e2)) return u2.scheduleAsyncIterable(e2, t2);
      if (f2.isIterable(e2)) return a2.scheduleIterable(e2, t2);
      if (p3.isReadableStreamLike(e2)) return v3.scheduleReadableStreamLike(e2, t2);
    }
    throw d2.createInvalidObservableTypeError(e2);
  };
}, 1699: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.partition = void 0;
  var n2 = r2(245), o2 = r2(783), i2 = r2(9445);
  t.partition = function(e2, t2, r3) {
    return [o2.filter(t2, r3)(i2.innerFrom(e2)), o2.filter(n2.not(t2, r3))(i2.innerFrom(e2))];
  };
}, 1711: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__assign || function() {
    return o2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, o2.apply(this, arguments);
  }, i2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var a2 = i2(r2(9054)), u2 = r2(9305), s2 = i2(r2(7021)), c2 = r2(9014), l2 = r2(397), f2 = i2(r2(7518)), h2 = i2(r2(5045)), d2 = i2(r2(3321)), p3 = u2.internal.constants, v3 = p3.BOLT_PROTOCOL_V4_4, y3 = p3.FETCH_ALL, b2 = u2.internal.bookmarks.Bookmarks, m2 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), Object.defineProperty(t2.prototype, "version", { get: function() {
      return v3;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "transformer", { get: function() {
      var e3 = this;
      return void 0 === this._transformer && (this._transformer = new d2.default(Object.values(f2.default).map(function(t3) {
        return t3(e3._config, e3._log);
      }))), this._transformer;
    }, enumerable: false, configurable: true }), t2.prototype.requestRoutingInformation = function(e3) {
      var t3 = e3.routingContext, r3 = void 0 === t3 ? {} : t3, n3 = e3.databaseName, o3 = void 0 === n3 ? null : n3, i3 = e3.impersonatedUser, a3 = void 0 === i3 ? null : i3, u3 = e3.sessionContext, l3 = void 0 === u3 ? {} : u3, f3 = e3.onError, h3 = e3.onCompleted, d3 = new c2.RouteObserver({ onProtocolError: this._onProtocolError, onError: f3, onCompleted: h3 }), p4 = l3.bookmarks || b2.empty();
      return this.write(s2.default.routeV4x4(r3, p4.values(), { databaseName: o3, impersonatedUser: a3 }), d3, true), d3;
    }, t2.prototype.run = function(e3, t3, r3) {
      var n3 = void 0 === r3 ? {} : r3, o3 = n3.bookmarks, i3 = n3.txConfig, a3 = n3.database, u3 = n3.mode, f3 = n3.impersonatedUser, h3 = n3.notificationFilter, d3 = n3.beforeKeys, p4 = n3.afterKeys, v5 = n3.beforeError, b3 = n3.afterError, m3 = n3.beforeComplete, g2 = n3.afterComplete, _2 = n3.flush, w2 = void 0 === _2 || _2, O2 = n3.reactive, S2 = void 0 !== O2 && O2, E2 = n3.fetchSize, P2 = void 0 === E2 ? y3 : E2, T2 = n3.highRecordWatermark, x3 = void 0 === T2 ? Number.MAX_VALUE : T2, C2 = n3.lowRecordWatermark, j2 = void 0 === C2 ? Number.MAX_VALUE : C2, A2 = new c2.ResultStreamObserver({ server: this._server, reactive: S2, fetchSize: P2, moreFunction: this._requestMore.bind(this), discardFunction: this._requestDiscard.bind(this), beforeKeys: d3, afterKeys: p4, beforeError: v5, afterError: b3, beforeComplete: m3, afterComplete: g2, highRecordWatermark: x3, lowRecordWatermark: j2 });
      (0, l2.assertNotificationFilterIsEmpty)(h3, this._onProtocolError, A2);
      var k2 = S2;
      return this.write(s2.default.runWithMetadata(e3, t3, { bookmarks: o3, txConfig: i3, database: a3, mode: u3, impersonatedUser: f3 }), A2, k2 && w2), S2 || this.write(s2.default.pull({ n: P2 }), A2, w2), A2;
    }, t2.prototype.beginTransaction = function(e3) {
      var t3 = void 0 === e3 ? {} : e3, r3 = t3.bookmarks, n3 = t3.txConfig, o3 = t3.database, i3 = t3.mode, a3 = t3.impersonatedUser, u3 = t3.notificationFilter, f3 = t3.beforeError, h3 = t3.afterError, d3 = t3.beforeComplete, p4 = t3.afterComplete, v5 = new c2.ResultStreamObserver({ server: this._server, beforeError: f3, afterError: h3, beforeComplete: d3, afterComplete: p4 });
      return v5.prepareToHandleSingleResponse(), (0, l2.assertNotificationFilterIsEmpty)(u3, this._onProtocolError, v5), this.write(s2.default.begin({ bookmarks: r3, txConfig: n3, database: o3, mode: i3, impersonatedUser: a3 }), v5, true), v5;
    }, t2.prototype._applyUtcPatch = function() {
      var e3 = this;
      this._transformer = new d2.default(Object.values(o2(o2({}, f2.default), h2.default)).map(function(t3) {
        return t3(e3._config, e3._log);
      }));
    }, t2;
  }(a2.default);
  t.default = m2;
}, 1731: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.sample = void 0;
  var n2 = r2(9445), o2 = r2(7843), i2 = r2(1342), a2 = r2(3111);
  t.sample = function(e2) {
    return o2.operate(function(t2, r3) {
      var o3 = false, u2 = null;
      t2.subscribe(a2.createOperatorSubscriber(r3, function(e3) {
        o3 = true, u2 = e3;
      })), n2.innerFrom(e2).subscribe(a2.createOperatorSubscriber(r3, function() {
        if (o3) {
          o3 = false;
          var e3 = u2;
          u2 = null, r3.next(e3);
        }
      }, i2.noop));
    });
  };
}, 1751: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.isObservable = void 0;
  var n2 = r2(4662), o2 = r2(1018);
  t.isObservable = function(e2) {
    return !!e2 && (e2 instanceof n2.Observable || o2.isFunction(e2.lift) && o2.isFunction(e2.subscribe));
  };
}, 1759: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.NotFoundError = void 0;
  var n2 = r2(5568);
  t.NotFoundError = n2.createErrorClass(function(e2) {
    return function(t2) {
      e2(this), this.name = "NotFoundError", this.message = t2;
    };
  });
}, 1776: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, o2 = this && this.__spreadArray || function(e2, t2) {
    for (var r3 = 0, n3 = t2.length, o3 = e2.length; r3 < n3; r3++, o3++) e2[o3] = t2[r3];
    return e2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.endWith = void 0;
  var i2 = r2(3865), a2 = r2(1004);
  t.endWith = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    return function(t3) {
      return i2.concat(t3, a2.of.apply(void 0, o2([], n2(e2))));
    };
  };
}, 1803: (e) => {
  var t, r2, n2 = document.attachEvent, o2 = false;
  function i2(e2) {
    var t2 = e2.__resizeTriggers__, r3 = t2.firstElementChild, n3 = t2.lastElementChild, o3 = r3.firstElementChild;
    n3.scrollLeft = n3.scrollWidth, n3.scrollTop = n3.scrollHeight, o3.style.width = r3.offsetWidth + 1 + "px", o3.style.height = r3.offsetHeight + 1 + "px", r3.scrollLeft = r3.scrollWidth, r3.scrollTop = r3.scrollHeight;
  }
  function a2(e2) {
    var t2 = this;
    i2(this), this.__resizeRAF__ && s2(this.__resizeRAF__), this.__resizeRAF__ = u2(function() {
      (function(e3) {
        return e3.offsetWidth != e3.__resizeLast__.width || e3.offsetHeight != e3.__resizeLast__.height;
      })(t2) && (t2.__resizeLast__.width = t2.offsetWidth, t2.__resizeLast__.height = t2.offsetHeight, t2.__resizeListeners__.forEach(function(r3) {
        r3.call(t2, e2);
      }));
    });
  }
  if (!n2) {
    var u2 = (r2 = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function(e2) {
      return window.setTimeout(e2, 20);
    }, function(e2) {
      return r2(e2);
    }), s2 = (t = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.clearTimeout, function(e2) {
      return t(e2);
    }), c2 = false, l2 = "", f2 = "animationstart", h2 = "Webkit Moz O ms".split(" "), d2 = "webkitAnimationStart animationstart oAnimationStart MSAnimationStart".split(" "), p3 = document.createElement("fakeelement");
    if (void 0 !== p3.style.animationName && (c2 = true), false === c2) {
      for (var v3 = 0; v3 < h2.length; v3++) if (void 0 !== p3.style[h2[v3] + "AnimationName"]) {
        l2 = "-" + h2[v3].toLowerCase() + "-", f2 = d2[v3], c2 = true;
        break;
      }
    }
    var y3 = "resizeanim", b2 = "@" + l2 + "keyframes " + y3 + " { from { opacity: 0; } to { opacity: 0; } } ", m2 = l2 + "animation: 1ms " + y3 + "; ";
  }
  e.exports = function(e2, t2) {
    return n2 ? e2.attachEvent("onresize", t2) : (e2.__resizeTriggers__ || ("static" == getComputedStyle(e2).position && (e2.style.position = "relative"), function() {
      if (!o2) {
        var e3 = (b2 || "") + ".resize-triggers { " + (m2 || "") + 'visibility: hidden; opacity: 0; } .resize-triggers, .resize-triggers > div, .contract-trigger:before { content: " "; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }', t3 = document.head || document.getElementsByTagName("head")[0], r3 = document.createElement("style");
        r3.type = "text/css", r3.styleSheet ? r3.styleSheet.cssText = e3 : r3.appendChild(document.createTextNode(e3)), t3.appendChild(r3), o2 = true;
      }
    }(), e2.__resizeLast__ = {}, e2.__resizeListeners__ = [], (e2.__resizeTriggers__ = document.createElement("div")).className = "resize-triggers", e2.__resizeTriggers__.innerHTML = '<div class="expand-trigger"><div></div></div><div class="contract-trigger"></div>', e2.appendChild(e2.__resizeTriggers__), i2(e2), e2.addEventListener("scroll", a2, true), f2 && e2.__resizeTriggers__.addEventListener(f2, function(t3) {
      t3.animationName == y3 && i2(e2);
    })), e2.__resizeListeners__.push(t2)), function() {
      n2 ? e2.detachEvent("onresize", t2) : (e2.__resizeListeners__.splice(e2.__resizeListeners__.indexOf(t2), 1), e2.__resizeListeners__.length || (e2.removeEventListener("scroll", a2), e2.__resizeTriggers__ = !e2.removeChild(e2.__resizeTriggers__)));
    };
  };
}, 1839: function(e, t, r2) {
  var n2 = this && this.__awaiter || function(e2, t2, r3, n3) {
    return new (r3 || (r3 = Promise))(function(o3, i3) {
      function a3(e3) {
        try {
          s2(n3.next(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function u3(e3) {
        try {
          s2(n3.throw(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function s2(e3) {
        var t3;
        e3.done ? o3(e3.value) : (t3 = e3.value, t3 instanceof r3 ? t3 : new r3(function(e4) {
          e4(t3);
        })).then(a3, u3);
      }
      s2((n3 = n3.apply(e2, t2 || [])).next());
    });
  }, o2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u3(0), throw: u3(1), return: u3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u3(u4) {
      return function(s2) {
        return function(u5) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; i3 && (i3 = 0, u5[0] && (a3 = 0)), a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & u5[0] ? n3.return : u5[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, u5[1])).done) return o3;
            switch (n3 = 0, o3 && (u5 = [2 & u5[0], o3.value]), u5[0]) {
              case 0:
              case 1:
                o3 = u5;
                break;
              case 4:
                return a3.label++, { value: u5[1], done: false };
              case 5:
                a3.label++, n3 = u5[1], u5 = [0];
                continue;
              case 7:
                u5 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== u5[0] && 2 !== u5[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === u5[0] && (!o3 || u5[1] > o3[0] && u5[1] < o3[3])) {
                  a3.label = u5[1];
                  break;
                }
                if (6 === u5[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = u5;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(u5);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            u5 = t2.call(e2, a3);
          } catch (e3) {
            u5 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & u5[0]) throw u5[1];
          return { value: u5[0] ? u5[1] : void 0, done: true };
        }([u4, s2]);
      };
    }
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = r2(9305), a2 = r2(6781), u2 = function() {
    function e2(e3) {
      var t2 = e3.authTokenManager, r3 = e3.userAgent, n3 = e3.boltAgent;
      this._authTokenManager = t2 || (0, i2.staticAuthTokenManager)({}), this._userAgent = r3, this._boltAgent = n3;
    }
    return e2.prototype.authenticate = function(e3) {
      var t2 = e3.connection, r3 = e3.auth, i3 = e3.skipReAuth, u3 = e3.waitReAuth, s2 = e3.forceReAuth;
      return n2(this, void 0, void 0, function() {
        var e4, n3;
        return o2(this, function(o3) {
          switch (o3.label) {
            case 0:
              return null == r3 ? [3, 3] : (e4 = true === t2.supportsReAuth && (!a2.object.equals(t2.authToken, r3) && true !== i3 || true === s2), null == t2.authToken || e4 ? [4, t2.connect(this._userAgent, this._boltAgent, r3, u3 || false)] : [3, 2]);
            case 1:
            case 5:
              return [2, o3.sent()];
            case 2:
            case 6:
              return [2, t2];
            case 3:
              return [4, this._authTokenManager.getToken()];
            case 4:
              return n3 = o3.sent(), a2.object.equals(n3, t2.authToken) ? [3, 6] : [4, t2.connect(this._userAgent, this._boltAgent, n3, false)];
          }
        });
      });
    }, e2.prototype.handleError = function(e3) {
      var t2 = e3.connection, r3 = e3.code;
      return !(!t2 || !r3.startsWith("Neo.ClientError.Security.")) && this._authTokenManager.handleSecurityException(t2.authToken, r3);
    }, e2;
  }();
  t.default = u2;
}, 1866: function(e, t, r2) {
  var n2 = this && this.__assign || function() {
    return n2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, n2.apply(this, arguments);
  }, o2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3);
    var o3 = Object.getOwnPropertyDescriptor(t2, r3);
    o3 && !("get" in o3 ? !t2.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
      return t2[r3];
    } }), Object.defineProperty(e2, n3, o3);
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), i2 = this && this.__setModuleDefault || (Object.create ? function(e2, t2) {
    Object.defineProperty(e2, "default", { enumerable: true, value: t2 });
  } : function(e2, t2) {
    e2.default = t2;
  }), a2 = this && this.__importStar || function(e2) {
    if (e2 && e2.__esModule) return e2;
    var t2 = {};
    if (null != e2) for (var r3 in e2) "default" !== r3 && Object.prototype.hasOwnProperty.call(e2, r3) && o2(t2, e2, r3);
    return i2(t2, e2), t2;
  }, u2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, s2 = this && this.__spreadArray || function(e2, t2, r3) {
    if (r3 || 2 === arguments.length) for (var n3, o3 = 0, i3 = t2.length; o3 < i3; o3++) !n3 && o3 in t2 || (n3 || (n3 = Array.prototype.slice.call(t2, 0, o3)), n3[o3] = t2[o3]);
    return e2.concat(n3 || Array.prototype.slice.call(t2));
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.buildNotificationsFromMetadata = t.buildGqlStatusObjectFromMetadata = t.polyfillNotification = t.polyfillGqlStatusObject = t.GqlStatusObject = t.Notification = t.notificationClassification = t.notificationCategory = t.notificationSeverityLevel = void 0;
  var c2 = a2(r2(4027)), l2 = r2(6995), f2 = r2(1053), h2 = { WARNING: { gql_status: "01N42", status_description: "warn: unknown warning" }, NO_DATA: { gql_status: "02N42", status_description: "note: no data - unknown subcondition" }, INFORMATION: { gql_status: "03N42", status_description: "info: unknown notification" }, ERROR: { gql_status: "50N42", status_description: "error: general processing exception - unexpected error" } }, d2 = { WARNING: "WARNING", INFORMATION: "INFORMATION", UNKNOWN: "UNKNOWN" };
  t.notificationSeverityLevel = d2, Object.freeze(d2);
  var p3 = Object.values(d2), v3 = { HINT: "HINT", UNRECOGNIZED: "UNRECOGNIZED", UNSUPPORTED: "UNSUPPORTED", PERFORMANCE: "PERFORMANCE", DEPRECATION: "DEPRECATION", TOPOLOGY: "TOPOLOGY", SECURITY: "SECURITY", GENERIC: "GENERIC", SCHEMA: "SCHEMA", UNKNOWN: "UNKNOWN" };
  t.notificationCategory = v3, Object.freeze(v3);
  var y3 = Object.values(v3), b2 = v3;
  t.notificationClassification = b2;
  var m2 = function(e2) {
    this.code = e2.code, this.title = e2.title, this.description = e2.description, this.severity = e2.severity, this.position = P2(e2.position), this.severityLevel = T2(e2.severity), this.rawSeverityLevel = e2.severity, this.category = x3(e2.category), this.rawCategory = e2.category;
  };
  t.Notification = m2;
  var g2 = function() {
    function e2(e3) {
      var t2;
      this.gqlStatus = e3.gql_status, this.statusDescription = e3.status_description, this.diagnosticRecord = null !== (t2 = e3.diagnostic_record) && void 0 !== t2 ? t2 : {}, this.position = null != this.diagnosticRecord._position ? P2(this.diagnosticRecord._position) : void 0, this.severity = T2(this.diagnosticRecord._severity), this.rawSeverity = this.diagnosticRecord._severity, this.classification = x3(this.diagnosticRecord._classification), this.rawClassification = this.diagnosticRecord._classification, this.isNotification = null != e3.neo4j_code, Object.freeze(this);
    }
    return Object.defineProperty(e2.prototype, "diagnosticRecordAsJsonString", { get: function() {
      return c2.stringify(this.diagnosticRecord, { useCustomToString: true });
    }, enumerable: false, configurable: true }), e2;
  }();
  function _2(e2) {
    var t2, r3, n3;
    if (null != e2.neo4j_code) return new m2({ code: e2.neo4j_code, title: e2.title, description: e2.description, severity: null === (t2 = e2.diagnostic_record) || void 0 === t2 ? void 0 : t2._severity, category: null === (r3 = e2.diagnostic_record) || void 0 === r3 ? void 0 : r3._classification, position: null === (n3 = e2.diagnostic_record) || void 0 === n3 ? void 0 : n3._position });
  }
  function w2(e2) {
    var t2, r3 = e2.severity === d2.WARNING ? h2.WARNING : h2.INFORMATION, o3 = { gql_status: r3.gql_status, status_description: null !== (t2 = e2.description) && void 0 !== t2 ? t2 : r3.status_description, neo4j_code: e2.code, title: e2.title, diagnostic_record: n2({}, f2.rawPolyfilledDiagnosticRecord) };
    return null != e2.severity && (o3.diagnostic_record._severity = e2.severity), null != e2.category && (o3.diagnostic_record._classification = e2.category), null != e2.position && (o3.diagnostic_record._position = e2.position), new g2(o3);
  }
  t.GqlStatusObject = g2, t.polyfillNotification = _2, t.polyfillGqlStatusObject = w2;
  var O2 = { SUCCESS: new g2({ gql_status: "00000", status_description: "note: successful completion", diagnostic_record: f2.rawPolyfilledDiagnosticRecord }), NO_DATA: new g2({ gql_status: "02000", status_description: "note: no data", diagnostic_record: f2.rawPolyfilledDiagnosticRecord }), NO_DATA_UNKNOWN_SUBCONDITION: new g2(n2(n2({}, h2.NO_DATA), { diagnostic_record: f2.rawPolyfilledDiagnosticRecord })), OMITTED_RESULT: new g2({ gql_status: "00001", status_description: "note: successful completion - omitted result", diagnostic_record: f2.rawPolyfilledDiagnosticRecord }) };
  Object.freeze(O2), t.buildGqlStatusObjectFromMetadata = function(e2) {
    var t2, r3;
    if (null != e2.statuses) return e2.statuses.map(function(e3) {
      return new g2(e3);
    });
    var n3, o3 = true === (null == (n3 = e2.stream_summary) ? void 0 : n3.have_records_streamed) ? O2.SUCCESS : false === (null == n3 ? void 0 : n3.has_keys) ? O2.OMITTED_RESULT : true === (null == n3 ? void 0 : n3.pulled) ? O2.NO_DATA : O2.NO_DATA_UNKNOWN_SUBCONDITION;
    return s2([o3], u2(null !== (r3 = null === (t2 = e2.notifications) || void 0 === t2 ? void 0 : t2.map(w2)) && void 0 !== r3 ? r3 : []), false).sort(function(e3, t3) {
      return E2(e3) - E2(t3);
    });
  };
  var S2 = Object.freeze({ "02": 0, "01": 1, "00": 2 });
  function E2(e2) {
    var t2, r3, n3 = null === (t2 = e2.gqlStatus) || void 0 === t2 ? void 0 : t2.slice(0, 2);
    return null !== (r3 = S2[n3]) && void 0 !== r3 ? r3 : 9999;
  }
  function P2(e2) {
    return null == e2 ? {} : { offset: l2.util.toNumber(e2.offset), line: l2.util.toNumber(e2.line), column: l2.util.toNumber(e2.column) };
  }
  function T2(e2) {
    return p3.includes(e2) ? e2 : d2.UNKNOWN;
  }
  function x3(e2) {
    return y3.includes(e2) ? e2 : b2.UNKNOWN;
  }
  t.buildNotificationsFromMetadata = function(e2) {
    return null != e2.notifications ? e2.notifications.map(function(e3) {
      return new m2(e3);
    }) : null != e2.statuses ? e2.statuses.map(_2).filter(function(e3) {
      return null != e3;
    }) : [];
  }, t.default = m2;
}, 1964: (e, t) => {
  function r2() {
    return "function" == typeof Symbol && Symbol.iterator ? Symbol.iterator : "@@iterator";
  }
  Object.defineProperty(t, "__esModule", { value: true }), t.iterator = t.getSymbolIterator = void 0, t.getSymbolIterator = r2, t.iterator = r2();
}, 1967: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true });
  var n2 = r2(9691), o2 = r2(4027), i2 = { basic: function(e2, t2, r3) {
    return null != r3 ? { scheme: "basic", principal: e2, credentials: t2, realm: r3 } : { scheme: "basic", principal: e2, credentials: t2 };
  }, kerberos: function(e2) {
    return { scheme: "kerberos", principal: "", credentials: e2 };
  }, bearer: function(e2) {
    return { scheme: "bearer", credentials: e2 };
  }, none: function() {
    return { scheme: "none" };
  }, custom: function(e2, t2, r3, i3, u2) {
    var s2 = { scheme: i3, principal: e2 };
    if (a2(t2) && (s2.credentials = t2), a2(r3) && (s2.realm = r3), a2(u2)) {
      try {
        (0, o2.stringify)(u2);
      } catch (e3) {
        throw (0, n2.newError)("Circular references in custom auth token parameters", void 0, e3);
      }
      s2.parameters = u2;
    }
    return s2;
  } };
  function a2(e2) {
    return !(null == e2 || "" === e2 || Object.getPrototypeOf(e2) === Object.prototype && 0 === Object.keys(e2).length);
  }
  t.default = i2;
}, 1983: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.mergeInternals = void 0;
  var n2 = r2(9445), o2 = r2(7110), i2 = r2(3111);
  t.mergeInternals = function(e2, t2, r3, a2, u2, s2, c2, l2) {
    var f2 = [], h2 = 0, d2 = 0, p3 = false, v3 = function() {
      !p3 || f2.length || h2 || t2.complete();
    }, y3 = function(e3) {
      return h2 < a2 ? b2(e3) : f2.push(e3);
    }, b2 = function(e3) {
      s2 && t2.next(e3), h2++;
      var l3 = false;
      n2.innerFrom(r3(e3, d2++)).subscribe(i2.createOperatorSubscriber(t2, function(e4) {
        null == u2 || u2(e4), s2 ? y3(e4) : t2.next(e4);
      }, function() {
        l3 = true;
      }, void 0, function() {
        if (l3) try {
          h2--;
          for (var e4 = function() {
            var e5 = f2.shift();
            c2 ? o2.executeSchedule(t2, c2, function() {
              return b2(e5);
            }) : b2(e5);
          }; f2.length && h2 < a2; ) e4();
          v3();
        } catch (e5) {
          t2.error(e5);
        }
      }));
    };
    return e2.subscribe(i2.createOperatorSubscriber(t2, y3, function() {
      p3 = true, v3();
    })), function() {
      null == l2 || l2();
    };
  };
}, 1985: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.notificationFilterDisabledClassification = t.notificationFilterDisabledCategory = t.notificationFilterMinimumSeverityLevel = void 0;
  var r2 = { OFF: "OFF", WARNING: "WARNING", INFORMATION: "INFORMATION" };
  t.notificationFilterMinimumSeverityLevel = r2, Object.freeze(r2);
  var n2 = { HINT: "HINT", UNRECOGNIZED: "UNRECOGNIZED", UNSUPPORTED: "UNSUPPORTED", PERFORMANCE: "PERFORMANCE", TOPOLOGY: "TOPOLOGY", SECURITY: "SECURITY", DEPRECATION: "DEPRECATION", GENERIC: "GENERIC", SCHEMA: "SCHEMA" };
  t.notificationFilterDisabledCategory = n2, Object.freeze(n2);
  var o2 = n2;
  t.notificationFilterDisabledClassification = o2;
  t.default = function() {
    throw this.minimumSeverityLevel = void 0, this.disabledCategories = void 0, this.disabledClassifications = void 0, new Error("Not implemented");
  };
}, 2007: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.Releasable = void 0;
  var r2 = function() {
    function e2() {
    }
    return e2.prototype.release = function() {
      throw new Error("Not implemented");
    }, e2;
  }();
  t.Releasable = r2;
  var n2 = function() {
    function e2() {
    }
    return e2.prototype.acquireConnection = function(e3) {
      throw Error("Not implemented");
    }, e2.prototype.supportsMultiDb = function() {
      throw Error("Not implemented");
    }, e2.prototype.supportsTransactionConfig = function() {
      throw Error("Not implemented");
    }, e2.prototype.supportsUserImpersonation = function() {
      throw Error("Not implemented");
    }, e2.prototype.supportsSessionAuth = function() {
      throw Error("Not implemented");
    }, e2.prototype.SSREnabled = function() {
      return false;
    }, e2.prototype.verifyConnectivityAndGetServerInfo = function(e3) {
      throw Error("Not implemented");
    }, e2.prototype.verifyAuthentication = function(e3) {
      throw Error("Not implemented");
    }, e2.prototype.getNegotiatedProtocolVersion = function() {
      throw Error("Not Implemented");
    }, e2.prototype.close = function() {
      throw Error("Not implemented");
    }, e2;
  }();
  t.default = n2;
}, 2063: (e) => {
  e.exports = ["<<=", ">>=", "++", "--", "<<", ">>", "<=", ">=", "==", "!=", "&&", "||", "+=", "-=", "*=", "/=", "%=", "&=", "^^", "^=", "|=", "(", ")", "[", "]", ".", "!", "~", "*", "/", "%", "+", "-", "<", ">", "&", "^", "|", "?", ":", "=", ",", ";", "{", "}"];
}, 2066: function(e, t, r2) {
  var n2 = this && this.__assign || function() {
    return n2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, n2.apply(this, arguments);
  }, o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = o2(r2(1175));
  t.default = n2({}, i2.default);
}, 2069: function(e, t, r2) {
  var n2 = this && this.__awaiter || function(e2, t2, r3, n3) {
    return new (r3 || (r3 = Promise))(function(o3, i3) {
      function a3(e3) {
        try {
          s3(n3.next(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function u3(e3) {
        try {
          s3(n3.throw(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function s3(e3) {
        var t3;
        e3.done ? o3(e3.value) : (t3 = e3.value, t3 instanceof r3 ? t3 : new r3(function(e4) {
          e4(t3);
        })).then(a3, u3);
      }
      s3((n3 = n3.apply(e2, t2 || [])).next());
    });
  }, o2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u3(0), throw: u3(1), return: u3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u3(u4) {
      return function(s3) {
        return function(u5) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; i3 && (i3 = 0, u5[0] && (a3 = 0)), a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & u5[0] ? n3.return : u5[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, u5[1])).done) return o3;
            switch (n3 = 0, o3 && (u5 = [2 & u5[0], o3.value]), u5[0]) {
              case 0:
              case 1:
                o3 = u5;
                break;
              case 4:
                return a3.label++, { value: u5[1], done: false };
              case 5:
                a3.label++, n3 = u5[1], u5 = [0];
                continue;
              case 7:
                u5 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== u5[0] && 2 !== u5[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === u5[0] && (!o3 || u5[1] > o3[0] && u5[1] < o3[3])) {
                  a3.label = u5[1];
                  break;
                }
                if (6 === u5[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = u5;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(u5);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            u5 = t2.call(e2, a3);
          } catch (e3) {
            u5 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & u5[0]) throw u5[1];
          return { value: u5[0] ? u5[1] : void 0, done: true };
        }([u4, s3]);
      };
    }
  }, i2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.staticAuthTokenManager = t.authTokenManagers = t.AuthTokenAndExpiration = void 0;
  var a2 = i2(r2(1967)), u2 = r2(6995), s2 = function() {
    function e2() {
    }
    return e2.prototype.getToken = function() {
      throw new Error("Not Implemented");
    }, e2.prototype.handleSecurityException = function(e3, t2) {
      throw new Error("Not implemented");
    }, e2;
  }();
  t.default = s2;
  t.AuthTokenAndExpiration = function() {
    this.token = a2.default.none(), this.expiration = void 0;
  };
  var c2 = new (function() {
    function e2() {
    }
    return e2.prototype.bearer = function(e3) {
      var t2 = e3.tokenProvider;
      if ("function" != typeof t2) throw new TypeError("tokenProvider should be function, but got: ".concat(typeof t2));
      return new f2(t2, ["Neo.ClientError.Security.Unauthorized", "Neo.ClientError.Security.TokenExpired"]);
    }, e2.prototype.basic = function(e3) {
      var t2 = this, r3 = e3.tokenProvider;
      if ("function" != typeof r3) throw new TypeError("tokenProvider should be function, but got: ".concat(typeof r3));
      return new f2(function() {
        return n2(t2, void 0, void 0, function() {
          var e4;
          return o2(this, function(t3) {
            switch (t3.label) {
              case 0:
                return e4 = {}, [4, r3()];
              case 1:
                return [2, (e4.token = t3.sent(), e4)];
            }
          });
        });
      }, ["Neo.ClientError.Security.Unauthorized"]);
    }, e2;
  }())();
  t.authTokenManagers = c2, Object.freeze(c2), t.staticAuthTokenManager = function(e2) {
    var t2 = e2.authToken;
    return new h2(t2);
  };
  var l2 = function() {
    function e2(e3) {
      void 0 === e3 && (e3 = []), this._subscribers = e3;
    }
    return e2.prototype.subscribe = function(e3) {
      this._subscribers.push(e3);
    }, e2.prototype.onCompleted = function(e3) {
      this._subscribers.forEach(function(t2) {
        return t2.onCompleted(e3);
      });
    }, e2.prototype.onError = function(e3) {
      this._subscribers.forEach(function(t2) {
        return t2.onError(e3);
      });
    }, e2;
  }(), f2 = function() {
    function e2(e3, t2, r3, n3) {
      this._tokenProvider = e3, this._handledSecurityCodes = t2, this._currentAuthData = r3, this._refreshObservable = n3;
    }
    return e2.prototype.getToken = function() {
      var e3;
      return n2(this, void 0, void 0, function() {
        return o2(this, function(t2) {
          switch (t2.label) {
            case 0:
              return void 0 === this._currentAuthData || void 0 !== this._currentAuthData.expiration && this._currentAuthData.expiration < /* @__PURE__ */ new Date() ? [4, this._refreshAuthToken()] : [3, 2];
            case 1:
              t2.sent(), t2.label = 2;
            case 2:
              return [2, null === (e3 = this._currentAuthData) || void 0 === e3 ? void 0 : e3.token];
          }
        });
      });
    }, e2.prototype.handleSecurityException = function(e3, t2) {
      var r3;
      return !!this._handledSecurityCodes.includes(t2) && (u2.util.equals(e3, null === (r3 = this._currentAuthData) || void 0 === r3 ? void 0 : r3.token) && this._scheduleRefreshAuthToken(), true);
    }, e2.prototype._scheduleRefreshAuthToken = function(e3) {
      var t2 = this;
      void 0 === this._refreshObservable && (this._currentAuthData = void 0, this._refreshObservable = new l2(), Promise.resolve(this._tokenProvider()).then(function(e4) {
        var r3;
        t2._currentAuthData = e4, null === (r3 = t2._refreshObservable) || void 0 === r3 || r3.onCompleted(e4);
      }).catch(function(e4) {
        var r3;
        null === (r3 = t2._refreshObservable) || void 0 === r3 || r3.onError(e4);
      }).finally(function() {
        t2._refreshObservable = void 0;
      })), void 0 !== e3 && this._refreshObservable.subscribe(e3);
    }, e2.prototype._refreshAuthToken = function() {
      return n2(this, void 0, void 0, function() {
        var e3 = this;
        return o2(this, function(t2) {
          switch (t2.label) {
            case 0:
              return [4, new Promise(function(t3, r3) {
                e3._scheduleRefreshAuthToken({ onCompleted: t3, onError: r3 });
              })];
            case 1:
              return [2, t2.sent()];
          }
        });
      });
    }, e2;
  }(), h2 = function() {
    function e2(e3) {
      this._authToken = e3;
    }
    return e2.prototype.getToken = function() {
      return this._authToken;
    }, e2.prototype.handleSecurityException = function(e3, t2) {
      return false;
    }, e2;
  }();
}, 2072: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3);
    var o3 = Object.getOwnPropertyDescriptor(t2, r3);
    o3 && !("get" in o3 ? !t2.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
      return t2[r3];
    } }), Object.defineProperty(e2, n3, o3);
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), i2 = this && this.__setModuleDefault || (Object.create ? function(e2, t2) {
    Object.defineProperty(e2, "default", { enumerable: true, value: t2 });
  } : function(e2, t2) {
    e2.default = t2;
  }), a2 = this && this.__importStar || function(e2) {
    if (e2 && e2.__esModule) return e2;
    var t2 = {};
    if (null != e2) for (var r3 in e2) "default" !== r3 && Object.prototype.hasOwnProperty.call(e2, r3) && o2(t2, e2, r3);
    return i2(t2, e2), t2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.Unpacker = t.Packer = void 0;
  var u2 = a2(r2(5361)), s2 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), t2.prototype.disableByteArrays = function() {
      throw new Error("Bolt V2 should always support byte arrays");
    }, t2;
  }(u2.Packer);
  t.Packer = s2;
  var c2 = function(e2) {
    function t2(t3, r3) {
      return void 0 === t3 && (t3 = false), void 0 === r3 && (r3 = false), e2.call(this, t3, r3) || this;
    }
    return n2(t2, e2), t2;
  }(u2.Unpacker);
  t.Unpacker = c2;
}, 2129: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.takeWhile = void 0;
  var n2 = r2(7843), o2 = r2(3111);
  t.takeWhile = function(e2, t2) {
    return void 0 === t2 && (t2 = false), n2.operate(function(r3, n3) {
      var i2 = 0;
      r3.subscribe(o2.createOperatorSubscriber(n3, function(r4) {
        var o3 = e2(r4, i2++);
        (o3 || t2) && n3.next(r4), !o3 && n3.complete();
      }));
    });
  };
}, 2171: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.partition = void 0;
  var n2 = r2(245), o2 = r2(783);
  t.partition = function(e2, t2) {
    return function(r3) {
      return [o2.filter(e2, t2)(r3), o2.filter(n2.not(e2, t2))(r3)];
    };
  };
}, 2199: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true });
  var o2 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), t2.prototype.resolve = function(e3) {
      return this._resolveToItself(e3);
    }, t2;
  }(r2(9305).internal.resolver.BaseHostNameResolver);
  t.default = o2;
}, 2204: function(e, t, r2) {
  var n2 = this && this.__assign || function() {
    return n2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, n2.apply(this, arguments);
  }, o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = o2(r2(3019));
  t.default = n2({}, i2.default);
}, 2343: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.toArray = void 0;
  var n2 = r2(9139), o2 = r2(7843), i2 = function(e2, t2) {
    return e2.push(t2), e2;
  };
  t.toArray = function() {
    return o2.operate(function(e2, t2) {
      n2.reduce(i2, [])(e2).subscribe(t2);
    });
  };
}, 2360: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.materialize = void 0;
  var n2 = r2(7800), o2 = r2(7843), i2 = r2(3111);
  t.materialize = function() {
    return o2.operate(function(e2, t2) {
      e2.subscribe(i2.createOperatorSubscriber(t2, function(e3) {
        t2.next(n2.Notification.createNext(e3));
      }, function() {
        t2.next(n2.Notification.createComplete()), t2.complete();
      }, function(e3) {
        t2.next(n2.Notification.createError(e3)), t2.complete();
      }));
    });
  };
}, 2363: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true });
  var n2 = r2(9305), o2 = n2.error.SERVICE_UNAVAILABLE, i2 = n2.error.SESSION_EXPIRED, a2 = function() {
    function e2(e3, t2, r3, n3) {
      this._errorCode = e3, this._handleUnavailability = t2 || u2, this._handleWriteFailure = r3 || u2, this._handleSecurityError = n3 || u2;
    }
    return e2.create = function(t2) {
      return new e2(t2.errorCode, t2.handleUnavailability, t2.handleWriteFailure, t2.handleSecurityError);
    }, e2.prototype.errorCode = function() {
      return this._errorCode;
    }, e2.prototype.handleAndTransformError = function(e3, t2, r3) {
      return function(e4) {
        return null != e4 && null != e4.code && e4.code.startsWith("Neo.ClientError.Security.");
      }(e3) ? this._handleSecurityError(e3, t2, r3) : function(e4) {
        return !!e4 && (e4.code === i2 || e4.code === o2 || "Neo.TransientError.General.DatabaseUnavailable" === e4.code);
      }(e3) ? this._handleUnavailability(e3, t2, r3) : function(e4) {
        return !!e4 && ("Neo.ClientError.Cluster.NotALeader" === e4.code || "Neo.ClientError.General.ForbiddenOnReadOnlyDatabase" === e4.code);
      }(e3) ? this._handleWriteFailure(e3, t2, r3) : e3;
    }, e2;
  }();
  function u2(e2) {
    return e2;
  }
  t.default = a2;
}, 2481: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true });
  var n2 = r2(9305), o2 = n2.internal.util, i2 = o2.ENCRYPTION_OFF, a2 = o2.ENCRYPTION_ON, u2 = n2.error.SERVICE_UNAVAILABLE, s2 = [null, void 0, true, false, a2, i2], c2 = [null, void 0, "TRUST_ALL_CERTIFICATES", "TRUST_CUSTOM_CA_SIGNED_CERTIFICATES", "TRUST_SYSTEM_CA_SIGNED_CERTIFICATES"];
  t.default = function(e2, t2, r3, o3) {
    this.address = e2, this.encrypted = function(e3) {
      var t3 = e3.encrypted;
      if (-1 === s2.indexOf(t3)) throw (0, n2.newError)("Illegal value of the encrypted setting ".concat(t3, ". Expected one of ").concat(s2));
      return t3;
    }(t2), this.trust = function(e3) {
      var t3 = e3.trust;
      if (-1 === c2.indexOf(t3)) throw (0, n2.newError)("Illegal value of the trust setting ".concat(t3, ". Expected one of ").concat(c2));
      return t3;
    }(t2), this.trustedCertificates = function(e3) {
      return e3.trustedCertificates || [];
    }(t2), this.knownHostsPath = function(e3) {
      return e3.knownHosts || null;
    }(t2), this.connectionErrorCode = r3 || u2, this.connectionTimeout = t2.connectionTimeout, this.clientCertificate = o3;
  };
}, 2483: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__values || function(e2) {
    var t2 = "function" == typeof Symbol && Symbol.iterator, r3 = t2 && e2[t2], n3 = 0;
    if (r3) return r3.call(e2);
    if (e2 && "number" == typeof e2.length) return { next: function() {
      return e2 && n3 >= e2.length && (e2 = void 0), { value: e2 && e2[n3++], done: !e2 };
    } };
    throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.AnonymousSubject = t.Subject = void 0;
  var i2 = r2(4662), a2 = r2(8014), u2 = r2(9686), s2 = r2(7479), c2 = r2(9223), l2 = function(e2) {
    function t2() {
      var t3 = e2.call(this) || this;
      return t3.closed = false, t3.currentObservers = null, t3.observers = [], t3.isStopped = false, t3.hasError = false, t3.thrownError = null, t3;
    }
    return n2(t2, e2), t2.prototype.lift = function(e3) {
      var t3 = new f2(this, this);
      return t3.operator = e3, t3;
    }, t2.prototype._throwIfClosed = function() {
      if (this.closed) throw new u2.ObjectUnsubscribedError();
    }, t2.prototype.next = function(e3) {
      var t3 = this;
      c2.errorContext(function() {
        var r3, n3;
        if (t3._throwIfClosed(), !t3.isStopped) {
          t3.currentObservers || (t3.currentObservers = Array.from(t3.observers));
          try {
            for (var i3 = o2(t3.currentObservers), a3 = i3.next(); !a3.done; a3 = i3.next()) a3.value.next(e3);
          } catch (e4) {
            r3 = { error: e4 };
          } finally {
            try {
              a3 && !a3.done && (n3 = i3.return) && n3.call(i3);
            } finally {
              if (r3) throw r3.error;
            }
          }
        }
      });
    }, t2.prototype.error = function(e3) {
      var t3 = this;
      c2.errorContext(function() {
        if (t3._throwIfClosed(), !t3.isStopped) {
          t3.hasError = t3.isStopped = true, t3.thrownError = e3;
          for (var r3 = t3.observers; r3.length; ) r3.shift().error(e3);
        }
      });
    }, t2.prototype.complete = function() {
      var e3 = this;
      c2.errorContext(function() {
        if (e3._throwIfClosed(), !e3.isStopped) {
          e3.isStopped = true;
          for (var t3 = e3.observers; t3.length; ) t3.shift().complete();
        }
      });
    }, t2.prototype.unsubscribe = function() {
      this.isStopped = this.closed = true, this.observers = this.currentObservers = null;
    }, Object.defineProperty(t2.prototype, "observed", { get: function() {
      var e3;
      return (null === (e3 = this.observers) || void 0 === e3 ? void 0 : e3.length) > 0;
    }, enumerable: false, configurable: true }), t2.prototype._trySubscribe = function(t3) {
      return this._throwIfClosed(), e2.prototype._trySubscribe.call(this, t3);
    }, t2.prototype._subscribe = function(e3) {
      return this._throwIfClosed(), this._checkFinalizedStatuses(e3), this._innerSubscribe(e3);
    }, t2.prototype._innerSubscribe = function(e3) {
      var t3 = this, r3 = this, n3 = r3.hasError, o3 = r3.isStopped, i3 = r3.observers;
      return n3 || o3 ? a2.EMPTY_SUBSCRIPTION : (this.currentObservers = null, i3.push(e3), new a2.Subscription(function() {
        t3.currentObservers = null, s2.arrRemove(i3, e3);
      }));
    }, t2.prototype._checkFinalizedStatuses = function(e3) {
      var t3 = this, r3 = t3.hasError, n3 = t3.thrownError, o3 = t3.isStopped;
      r3 ? e3.error(n3) : o3 && e3.complete();
    }, t2.prototype.asObservable = function() {
      var e3 = new i2.Observable();
      return e3.source = this, e3;
    }, t2.create = function(e3, t3) {
      return new f2(e3, t3);
    }, t2;
  }(i2.Observable);
  t.Subject = l2;
  var f2 = function(e2) {
    function t2(t3, r3) {
      var n3 = e2.call(this) || this;
      return n3.destination = t3, n3.source = r3, n3;
    }
    return n2(t2, e2), t2.prototype.next = function(e3) {
      var t3, r3;
      null === (r3 = null === (t3 = this.destination) || void 0 === t3 ? void 0 : t3.next) || void 0 === r3 || r3.call(t3, e3);
    }, t2.prototype.error = function(e3) {
      var t3, r3;
      null === (r3 = null === (t3 = this.destination) || void 0 === t3 ? void 0 : t3.error) || void 0 === r3 || r3.call(t3, e3);
    }, t2.prototype.complete = function() {
      var e3, t3;
      null === (t3 = null === (e3 = this.destination) || void 0 === e3 ? void 0 : e3.complete) || void 0 === t3 || t3.call(e3);
    }, t2.prototype._subscribe = function(e3) {
      var t3, r3;
      return null !== (r3 = null === (t3 = this.source) || void 0 === t3 ? void 0 : t3.subscribe(e3)) && void 0 !== r3 ? r3 : a2.EMPTY_SUBSCRIPTION;
    }, t2;
  }(l2);
  t.AnonymousSubject = f2;
}, 2533: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = o2(r2(715)), a2 = function(e2) {
    function t2(t3) {
      var r3 = e2.call(this) || this;
      return r3._readersIndex = new i2.default(), r3._writersIndex = new i2.default(), r3._connectionPool = t3, r3;
    }
    return n2(t2, e2), t2.prototype.selectReader = function(e3) {
      return this._select(e3, this._readersIndex);
    }, t2.prototype.selectWriter = function(e3) {
      return this._select(e3, this._writersIndex);
    }, t2.prototype._select = function(e3, t3) {
      var r3 = e3.length;
      if (0 === r3) return null;
      var n3 = t3.next(r3), o3 = n3, i3 = null, a3 = Number.MAX_SAFE_INTEGER;
      do {
        var u2 = e3[o3], s2 = this._connectionPool.activeResourceCount(u2);
        s2 < a3 && (i3 = u2, a3 = s2), o3 === r3 - 1 ? o3 = 0 : o3++;
      } while (o3 !== n3);
      return i3;
    }, t2;
  }(o2(r2(4311)).default);
  t.default = a2;
}, 2539: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__assign || function() {
    return o2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, o2.apply(this, arguments);
  }, i2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var a2 = i2(r2(5642)), u2 = i2(r2(7021)), s2 = r2(397), c2 = r2(9014), l2 = i2(r2(2066)), f2 = i2(r2(3321)), h2 = r2(9305), d2 = (h2.internal.bookmarks.Bookmarks, h2.internal.constants), p3 = d2.BOLT_PROTOCOL_V4_0, v3 = d2.FETCH_ALL, y3 = h2.internal.txConfig.TxConfig, b2 = "context", m2 = "database", g2 = "CALL dbms.routing.getRoutingTable($".concat(b2, ", $").concat(m2, ")"), _2 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), Object.defineProperty(t2.prototype, "version", { get: function() {
      return p3;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "transformer", { get: function() {
      var e3 = this;
      return void 0 === this._transformer && (this._transformer = new f2.default(Object.values(l2.default).map(function(t3) {
        return t3(e3._config, e3._log);
      }))), this._transformer;
    }, enumerable: false, configurable: true }), t2.prototype.beginTransaction = function(e3) {
      var t3 = void 0 === e3 ? {} : e3, r3 = t3.bookmarks, n3 = t3.txConfig, o3 = t3.database, i3 = t3.impersonatedUser, a3 = t3.notificationFilter, l3 = t3.mode, f3 = t3.beforeError, h3 = t3.afterError, d3 = t3.beforeComplete, p4 = t3.afterComplete, v5 = new c2.ResultStreamObserver({ server: this._server, beforeError: f3, afterError: h3, beforeComplete: d3, afterComplete: p4 });
      return v5.prepareToHandleSingleResponse(), (0, s2.assertImpersonatedUserIsEmpty)(i3, this._onProtocolError, v5), (0, s2.assertNotificationFilterIsEmpty)(a3, this._onProtocolError, v5), this.write(u2.default.begin({ bookmarks: r3, txConfig: n3, database: o3, mode: l3 }), v5, true), v5;
    }, t2.prototype.run = function(e3, t3, r3) {
      var n3 = void 0 === r3 ? {} : r3, o3 = n3.bookmarks, i3 = n3.txConfig, a3 = n3.database, l3 = n3.impersonatedUser, f3 = n3.notificationFilter, h3 = n3.mode, d3 = n3.beforeKeys, p4 = n3.afterKeys, y4 = n3.beforeError, b3 = n3.afterError, m3 = n3.beforeComplete, g3 = n3.afterComplete, _3 = n3.flush, w2 = void 0 === _3 || _3, O2 = n3.reactive, S2 = void 0 !== O2 && O2, E2 = n3.fetchSize, P2 = void 0 === E2 ? v3 : E2, T2 = n3.highRecordWatermark, x3 = void 0 === T2 ? Number.MAX_VALUE : T2, C2 = n3.lowRecordWatermark, j2 = void 0 === C2 ? Number.MAX_VALUE : C2, A2 = new c2.ResultStreamObserver({ server: this._server, reactive: S2, fetchSize: P2, moreFunction: this._requestMore.bind(this), discardFunction: this._requestDiscard.bind(this), beforeKeys: d3, afterKeys: p4, beforeError: y4, afterError: b3, beforeComplete: m3, afterComplete: g3, highRecordWatermark: x3, lowRecordWatermark: j2 });
      (0, s2.assertImpersonatedUserIsEmpty)(l3, this._onProtocolError, A2), (0, s2.assertNotificationFilterIsEmpty)(f3, this._onProtocolError, A2);
      var k2 = S2;
      return this.write(u2.default.runWithMetadata(e3, t3, { bookmarks: o3, txConfig: i3, database: a3, mode: h3 }), A2, k2 && w2), S2 || this.write(u2.default.pull({ n: P2 }), A2, w2), A2;
    }, t2.prototype._requestMore = function(e3, t3, r3) {
      this.write(u2.default.pull({ stmtId: e3, n: t3 }), r3, true);
    }, t2.prototype._requestDiscard = function(e3, t3) {
      this.write(u2.default.discard({ stmtId: e3 }), t3, true);
    }, t2.prototype._noOp = function() {
    }, t2.prototype.requestRoutingInformation = function(e3) {
      var t3, r3 = e3.routingContext, n3 = void 0 === r3 ? {} : r3, i3 = e3.databaseName, a3 = void 0 === i3 ? null : i3, u3 = e3.sessionContext, s3 = void 0 === u3 ? {} : u3, l3 = e3.onError, f3 = e3.onCompleted, h3 = this.run(g2, ((t3 = {})[b2] = n3, t3[m2] = a3, t3), o2(o2({}, s3), { txConfig: y3.empty() }));
      return new c2.ProcedureRouteObserver({ resultObserver: h3, onProtocolError: this._onProtocolError, onError: l3, onCompleted: f3 });
    }, t2;
  }(a2.default);
  t.default = _2;
}, 2551: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, o2 = this && this.__spreadArray || function(e2, t2) {
    for (var r3 = 0, n3 = t2.length, o3 = e2.length; r3 < n3; r3++, o3++) e2[o3] = t2[r3];
    return e2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.combineLatest = void 0;
  var i2 = r2(3247), a2 = r2(7843), u2 = r2(8535), s2 = r2(1251), c2 = r2(2706), l2 = r2(1107);
  t.combineLatest = function e2() {
    for (var t2 = [], r3 = 0; r3 < arguments.length; r3++) t2[r3] = arguments[r3];
    var f2 = l2.popResultSelector(t2);
    return f2 ? c2.pipe(e2.apply(void 0, o2([], n2(t2))), s2.mapOneOrManyArgs(f2)) : a2.operate(function(e3, r4) {
      i2.combineLatestInit(o2([e3], n2(u2.argsOrArgArray(t2))))(r4);
    });
  };
}, 2578: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true });
  var n2 = r2(9305);
  function o2() {
  }
  function i2(e2) {
    return e2;
  }
  var a2 = { onNext: o2, onCompleted: o2, onError: o2 }, u2 = function() {
    function e2(e3) {
      var t2 = void 0 === e3 ? {} : e3, r3 = t2.transformMetadata, n3 = t2.enrichErrorMetadata, a3 = t2.log, u3 = t2.observer;
      this._pendingObservers = [], this._log = a3, this._transformMetadata = r3 || i2, this._enrichErrorMetadata = n3 || i2, this._observer = Object.assign({ onObserversCountChange: o2, onError: o2, onFailure: o2, onErrorApplyTransformation: i2 }, u3);
    }
    return Object.defineProperty(e2.prototype, "currentFailure", { get: function() {
      return this._currentFailure;
    }, enumerable: false, configurable: true }), e2.prototype.handleResponse = function(e3) {
      var t2 = e3.fields[0];
      switch (e3.signature) {
        case 113:
          this._log.isDebugEnabled() && this._log.debug("S: RECORD ".concat(n2.json.stringify(e3))), this._currentObserver.onNext(t2);
          break;
        case 112:
          this._log.isDebugEnabled() && this._log.debug("S: SUCCESS ".concat(n2.json.stringify(e3)));
          try {
            var r3 = this._transformMetadata(t2);
            this._currentObserver.onCompleted(r3);
          } finally {
            this._updateCurrentObserver();
          }
          break;
        case 127:
          this._log.isDebugEnabled() && this._log.debug("S: FAILURE ".concat(n2.json.stringify(e3)));
          try {
            this._currentFailure = this._handleErrorPayload(this._enrichErrorMetadata(t2)), this._currentObserver.onError(this._currentFailure);
          } finally {
            this._updateCurrentObserver(), this._observer.onFailure(this._currentFailure);
          }
          break;
        case 126:
          this._log.isDebugEnabled() && this._log.debug("S: IGNORED ".concat(n2.json.stringify(e3)));
          try {
            this._currentFailure && this._currentObserver.onError ? this._currentObserver.onError(this._currentFailure) : this._currentObserver.onError && this._currentObserver.onError((0, n2.newError)("Ignored either because of an error or RESET"));
          } finally {
            this._updateCurrentObserver();
          }
          break;
        default:
          this._observer.onError((0, n2.newError)("Unknown Bolt protocol message: " + e3));
      }
    }, e2.prototype._updateCurrentObserver = function() {
      this._currentObserver = this._pendingObservers.shift(), this._observer.onObserversCountChange(this._observersCount);
    }, Object.defineProperty(e2.prototype, "_observersCount", { get: function() {
      return null == this._currentObserver ? this._pendingObservers.length : this._pendingObservers.length + 1;
    }, enumerable: false, configurable: true }), e2.prototype._queueObserver = function(e3) {
      return (e3 = e3 || a2).onCompleted = e3.onCompleted || o2, e3.onError = e3.onError || o2, e3.onNext = e3.onNext || o2, void 0 === this._currentObserver ? this._currentObserver = e3 : this._pendingObservers.push(e3), this._observer.onObserversCountChange(this._observersCount), true;
    }, e2.prototype._notifyErrorToObservers = function(e3) {
      for (this._currentObserver && this._currentObserver.onError && this._currentObserver.onError(e3); this._pendingObservers.length > 0; ) {
        var t2 = this._pendingObservers.shift();
        t2 && t2.onError && t2.onError(e3);
      }
    }, e2.prototype.hasOngoingObservableRequests = function() {
      return null != this._currentObserver || this._pendingObservers.length > 0;
    }, e2.prototype._resetFailure = function() {
      this._currentFailure = null;
    }, e2.prototype._handleErrorPayload = function(e3) {
      var t2, r3 = "Neo.TransientError.Transaction.Terminated" === (t2 = e3.code) ? "Neo.ClientError.Transaction.Terminated" : "Neo.TransientError.Transaction.LockClientStopped" === t2 ? "Neo.ClientError.Transaction.LockClientStopped" : t2, o3 = null != e3.cause ? this._handleErrorCause(e3.cause) : void 0, i3 = (0, n2.newError)(e3.message, r3, o3, e3.gql_status, e3.description, e3.diagnostic_record);
      return this._observer.onErrorApplyTransformation(i3);
    }, e2.prototype._handleErrorCause = function(e3) {
      var t2 = null != e3.cause ? this._handleErrorCause(e3.cause) : void 0, r3 = (0, n2.newGQLError)(e3.message, t2, e3.gql_status, e3.description, e3.diagnostic_record);
      return this._observer.onErrorApplyTransformation(r3);
    }, e2;
  }();
  t.default = u2;
}, 2628: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true }), t.AnimationFrameAction = void 0;
  var o2 = r2(5267), i2 = r2(9507), a2 = function(e2) {
    function t2(t3, r3) {
      var n3 = e2.call(this, t3, r3) || this;
      return n3.scheduler = t3, n3.work = r3, n3;
    }
    return n2(t2, e2), t2.prototype.requestAsyncId = function(t3, r3, n3) {
      return void 0 === n3 && (n3 = 0), null !== n3 && n3 > 0 ? e2.prototype.requestAsyncId.call(this, t3, r3, n3) : (t3.actions.push(this), t3._scheduled || (t3._scheduled = i2.animationFrameProvider.requestAnimationFrame(function() {
        return t3.flush(void 0);
      })));
    }, t2.prototype.recycleAsyncId = function(t3, r3, n3) {
      var o3;
      if (void 0 === n3 && (n3 = 0), null != n3 ? n3 > 0 : this.delay > 0) return e2.prototype.recycleAsyncId.call(this, t3, r3, n3);
      var a3 = t3.actions;
      null != r3 && r3 === t3._scheduled && (null === (o3 = a3[a3.length - 1]) || void 0 === o3 ? void 0 : o3.id) !== r3 && (i2.animationFrameProvider.cancelAnimationFrame(r3), t3._scheduled = void 0);
    }, t2;
  }(o2.AsyncAction);
  t.AnimationFrameAction = a2;
}, 2669: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.min = void 0;
  var n2 = r2(9139), o2 = r2(1018);
  t.min = function(e2) {
    return n2.reduce(o2.isFunction(e2) ? function(t2, r3) {
      return e2(t2, r3) < 0 ? t2 : r3;
    } : function(e3, t2) {
      return e3 < t2 ? e3 : t2;
    });
  };
}, 2696: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.FailedObserver = t.CompletedObserver = void 0;
  var r2 = function() {
    function e2() {
    }
    return e2.prototype.subscribe = function(e3) {
      o2(e3, e3.onKeys, []), o2(e3, e3.onCompleted, {});
    }, e2.prototype.cancel = function() {
    }, e2.prototype.pause = function() {
    }, e2.prototype.resume = function() {
    }, e2.prototype.prepareToHandleSingleResponse = function() {
    }, e2.prototype.markCompleted = function() {
    }, e2.prototype.onError = function(e3) {
      throw new Error("CompletedObserver not supposed to call onError", { cause: e3 });
    }, e2;
  }();
  t.CompletedObserver = r2;
  var n2 = function() {
    function e2(e3) {
      var t2 = e3.error, r3 = e3.onError;
      this._error = t2, this._beforeError = r3, this._observers = [], this.onError(t2);
    }
    return e2.prototype.subscribe = function(e3) {
      o2(e3, e3.onError, this._error), this._observers.push(e3);
    }, e2.prototype.onError = function(e3) {
      o2(this, this._beforeError, e3), this._observers.forEach(function(t2) {
        return o2(t2, t2.onError, e3);
      });
    }, e2.prototype.cancel = function() {
    }, e2.prototype.pause = function() {
    }, e2.prototype.resume = function() {
    }, e2.prototype.markCompleted = function() {
    }, e2.prototype.prepareToHandleSingleResponse = function() {
    }, e2;
  }();
  function o2(e2, t2, r3) {
    null != t2 && t2.bind(e2)(r3);
  }
  t.FailedObserver = n2;
}, 2706: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.pipeFromArray = t.pipe = void 0;
  var n2 = r2(6640);
  function o2(e2) {
    return 0 === e2.length ? n2.identity : 1 === e2.length ? e2[0] : function(t2) {
      return e2.reduce(function(e3, t3) {
        return t3(e3);
      }, t2);
    };
  }
  t.pipe = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    return o2(e2);
  }, t.pipeFromArray = o2;
}, 2713: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.bindCallback = void 0;
  var n2 = r2(1439);
  t.bindCallback = function(e2, t2, r3) {
    return n2.bindCallbackInternals(false, e2, t2, r3);
  };
}, 2752: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.exhaustAll = void 0;
  var n2 = r2(4753), o2 = r2(6640);
  t.exhaustAll = function() {
    return n2.exhaustMap(o2.identity);
  };
}, 2823: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.EmptyError = void 0;
  var n2 = r2(5568);
  t.EmptyError = n2.createErrorClass(function(e2) {
    return function() {
      e2(this), this.name = "EmptyError", this.message = "no elements in sequence";
    };
  });
}, 2833: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.merge = void 0;
  var n2 = r2(7302), o2 = r2(9445), i2 = r2(8616), a2 = r2(1107), u2 = r2(4917);
  t.merge = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    var r3 = a2.popScheduler(e2), s2 = a2.popNumber(e2, 1 / 0), c2 = e2;
    return c2.length ? 1 === c2.length ? o2.innerFrom(c2[0]) : n2.mergeAll(s2)(u2.from(c2, r3)) : i2.EMPTY;
  };
}, 2857: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = o2(r2(8320)), a2 = o2(r2(7168)), u2 = r2(9305), s2 = o2(r2(3448)), c2 = o2(r2(3321)), l2 = u2.internal.constants.BOLT_PROTOCOL_V2, f2 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), t2.prototype._createPacker = function(e3) {
      return new a2.default.Packer(e3);
    }, t2.prototype._createUnpacker = function(e3, t3) {
      return new a2.default.Unpacker(e3, t3);
    }, Object.defineProperty(t2.prototype, "transformer", { get: function() {
      var e3 = this;
      return void 0 === this._transformer && (this._transformer = new c2.default(Object.values(s2.default).map(function(t3) {
        return t3(e3._config, e3._log);
      }))), this._transformer;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "version", { get: function() {
      return l2;
    }, enumerable: false, configurable: true }), t2;
  }(i2.default);
  t.default = f2;
}, 2886: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.queue = t.queueScheduler = void 0;
  var n2 = r2(4212), o2 = r2(1293);
  t.queueScheduler = new o2.QueueScheduler(n2.QueueAction), t.queue = t.queueScheduler;
}, 2906: function(e, t, r2) {
  var n2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3);
    var o3 = Object.getOwnPropertyDescriptor(t2, r3);
    o3 && !("get" in o3 ? !t2.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
      return t2[r3];
    } }), Object.defineProperty(e2, n3, o3);
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), o2 = this && this.__setModuleDefault || (Object.create ? function(e2, t2) {
    Object.defineProperty(e2, "default", { enumerable: true, value: t2 });
  } : function(e2, t2) {
    e2.default = t2;
  }), i2 = this && this.__importStar || function(e2) {
    if (e2 && e2.__esModule) return e2;
    var t2 = {};
    if (null != e2) for (var r3 in e2) "default" !== r3 && Object.prototype.hasOwnProperty.call(e2, r3) && n2(t2, e2, r3);
    return o2(t2, e2), t2;
  }, a2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.DEFAULT_MAX_SIZE = t.DEFAULT_ACQUISITION_TIMEOUT = t.PoolConfig = t.Pool = void 0;
  var u2 = i2(r2(7589));
  t.PoolConfig = u2.default, Object.defineProperty(t, "DEFAULT_ACQUISITION_TIMEOUT", { enumerable: true, get: function() {
    return u2.DEFAULT_ACQUISITION_TIMEOUT;
  } }), Object.defineProperty(t, "DEFAULT_MAX_SIZE", { enumerable: true, get: function() {
    return u2.DEFAULT_MAX_SIZE;
  } });
  var s2 = a2(r2(6842));
  t.Pool = s2.default, t.default = s2.default;
}, 3001: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true });
  var r2 = function() {
    function e2(e3) {
      this.maxSize = e3, this.pruneCount = Math.max(Math.round(0.01 * e3 * Math.log(e3)), 1), this.map = /* @__PURE__ */ new Map();
    }
    return e2.prototype.set = function(e3, t2) {
      this.map.set(e3, { database: t2, lastUsed: Date.now() }), this._pruneCache();
    }, e2.prototype.get = function(e3) {
      var t2 = this.map.get(e3);
      if (void 0 !== t2) return t2.lastUsed = Date.now(), t2.database;
    }, e2.prototype.delete = function(e3) {
      this.map.delete(e3);
    }, e2.prototype._pruneCache = function() {
      if (this.map.size > this.maxSize) for (var e3 = Array.from(this.map.entries()).sort(function(e4, t3) {
        return e4[1].lastUsed - t3[1].lastUsed;
      }), t2 = 0; t2 < this.pruneCount; t2++) this.map.delete(e3[t2][0]);
    }, e2;
  }();
  t.default = r2;
}, 3019: function(e, t, r2) {
  var n2 = this && this.__assign || function() {
    return n2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, n2.apply(this, arguments);
  }, o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = o2(r2(9994));
  t.default = n2({}, i2.default);
}, 3057: function(e, t, r2) {
  var n2 = this && this.__awaiter || function(e2, t2, r3, n3) {
    return new (r3 || (r3 = Promise))(function(o3, i3) {
      function a3(e3) {
        try {
          s3(n3.next(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function u3(e3) {
        try {
          s3(n3.throw(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function s3(e3) {
        var t3;
        e3.done ? o3(e3.value) : (t3 = e3.value, t3 instanceof r3 ? t3 : new r3(function(e4) {
          e4(t3);
        })).then(a3, u3);
      }
      s3((n3 = n3.apply(e2, t2 || [])).next());
    });
  }, o2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u3(0), throw: u3(1), return: u3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u3(u4) {
      return function(s3) {
        return function(u5) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; i3 && (i3 = 0, u5[0] && (a3 = 0)), a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & u5[0] ? n3.return : u5[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, u5[1])).done) return o3;
            switch (n3 = 0, o3 && (u5 = [2 & u5[0], o3.value]), u5[0]) {
              case 0:
              case 1:
                o3 = u5;
                break;
              case 4:
                return a3.label++, { value: u5[1], done: false };
              case 5:
                a3.label++, n3 = u5[1], u5 = [0];
                continue;
              case 7:
                u5 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== u5[0] && 2 !== u5[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === u5[0] && (!o3 || u5[1] > o3[0] && u5[1] < o3[3])) {
                  a3.label = u5[1];
                  break;
                }
                if (6 === u5[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = u5;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(u5);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            u5 = t2.call(e2, a3);
          } catch (e3) {
            u5 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & u5[0]) throw u5[1];
          return { value: u5[0] ? u5[1] : void 0, done: true };
        }([u4, s3]);
      };
    }
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = r2(9305), a2 = r2(8813), u2 = r2(9419), s2 = function() {
    function e2(e3, t2) {
      var r3 = e3.pipe((0, u2.publishReplay)(1), (0, u2.refCount)());
      this._result = r3, this._keys = r3.pipe((0, u2.mergeMap)(function(e4) {
        return (0, a2.from)(e4.keys());
      }), (0, u2.publishReplay)(1), (0, u2.refCount)()), this._records = void 0, this._controls = new c2(), this._summary = new a2.ReplaySubject(), this._state = t2 || 0;
    }
    return e2.prototype.keys = function() {
      return this._keys;
    }, e2.prototype.records = function() {
      var e3 = this, t2 = this._result.pipe((0, u2.mergeMap)(function(t3) {
        return new a2.Observable(function(r3) {
          return e3._startStreaming({ result: t3, recordsObserver: r3 });
        });
      }));
      return t2.push = function() {
        return e3._push();
      }, t2;
    }, e2.prototype.consume = function() {
      var e3 = this;
      return this._result.pipe((0, u2.mergeMap)(function(t2) {
        return new a2.Observable(function(r3) {
          return e3._startStreaming({ result: t2, summaryObserver: r3 });
        });
      }));
    }, e2.prototype.pause = function() {
      this._controls.pause();
    }, e2.prototype.resume = function() {
      return this._controls.resume();
    }, e2.prototype.push = function() {
      return this._controls.push();
    }, e2.prototype._startStreaming = function(e3) {
      var t2 = void 0 === e3 ? {} : e3, r3 = t2.result, n3 = t2.recordsObserver, o3 = void 0 === n3 ? null : n3, a3 = t2.summaryObserver, u3 = void 0 === a3 ? null : a3, s3 = [];
      return u3 && s3.push(this._summary.subscribe(u3)), this._state < 1 ? (this._state = 1, this._setupRecordsStream(r3), o3 ? s3.push(this._records.subscribe(o3)) : r3._cancel(), s3.push({ unsubscribe: function() {
        r3._cancel && r3._cancel();
      } })) : o3 && o3.error((0, i2.newError)("Streaming has already started/consumed with a previous records or summary subscription.")), function() {
        s3.forEach(function(e4) {
          return e4.unsubscribe();
        });
      };
    }, e2.prototype._toObservable = function() {
      var t2 = this;
      return new a2.Observable(function(r3) {
        t2._result.subscribe({ complete: function() {
          return r3.complete();
        }, next: function(n3) {
          return r3.next(new e2(function(e3) {
            return new a2.Observable(function(t3) {
              t3.next(e3), t3.complete();
            });
          }(n3)), t2._state);
        }, error: function(e3) {
          return r3.error(e3);
        } });
      });
    }, e2.prototype._setupRecordsStream = function(e3) {
      var t2 = this;
      return this._records || (this._records = function(e4, t3, r3) {
        var i3 = this;
        void 0 === r3 && (r3 = new c2());
        var u3 = new a2.Subject(), s3 = function(a3) {
          return n2(i3, void 0, void 0, function() {
            var n3, i4, c3, l3;
            return o2(this, function(o3) {
              switch (o3.label) {
                case 0:
                  return o3.trys.push([0, 2, 3, 4]), r3.pushing = true, [4, a3];
                case 1:
                  return n3 = o3.sent(), i4 = n3.done, c3 = n3.value, i4 ? (u3.complete(), t3.complete()) : (u3.next(c3), r3.paused || s3(e4.next()).catch(function() {
                  })), [3, 4];
                case 2:
                  return l3 = o3.sent(), u3.error(l3), t3.error(l3), [3, 4];
                case 3:
                  return r3.pushing = false, [7];
                case 4:
                  return [2];
              }
            });
          });
        };
        function l2(t4) {
          return n2(this, void 0, void 0, function() {
            return o2(this, function(r4) {
              switch (r4.label) {
                case 0:
                  return [4, s3(e4.next(t4))];
                case 1:
                  return r4.sent(), [2];
              }
            });
          });
        }
        return r3.pusher = l2, l2(), u3;
      }(e3[Symbol.asyncIterator](), { complete: function() {
        return n2(t2, void 0, void 0, function() {
          var t3, r3;
          return o2(this, function(n3) {
            switch (n3.label) {
              case 0:
                return this._state = 2, r3 = (t3 = this._summary).next, [4, e3.summary()];
              case 1:
                return r3.apply(t3, [n3.sent()]), this._summary.complete(), [2];
            }
          });
        });
      }, error: function(e4) {
        t2._state = 2, t2._summary.error(e4);
      } }, this._controls)), this._records;
    }, e2;
  }();
  t.default = s2;
  var c2 = function() {
    function e2(e3) {
      void 0 === e3 && (e3 = function() {
        return n2(t2, void 0, void 0, function() {
          return o2(this, function(e4) {
            return [2];
          });
        });
      });
      var t2 = this;
      this._paused = false, this._pushing = false, this._push = e3;
    }
    return e2.prototype.pause = function() {
      this._paused = true;
    }, Object.defineProperty(e2.prototype, "paused", { get: function() {
      return this._paused;
    }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "pushing", { get: function() {
      return this._pushing;
    }, set: function(e3) {
      this._pushing = e3;
    }, enumerable: false, configurable: true }), e2.prototype.resume = function() {
      return n2(this, void 0, void 0, function() {
        var e3;
        return o2(this, function(t2) {
          switch (t2.label) {
            case 0:
              return e3 = this._paused, this._paused = false, !e3 || this._pushing ? [3, 2] : [4, this._push()];
            case 1:
              t2.sent(), t2.label = 2;
            case 2:
              return [2];
          }
        });
      });
    }, e2.prototype.push = function() {
      return n2(this, void 0, void 0, function() {
        return o2(this, function(e3) {
          switch (e3.label) {
            case 0:
              return this.pause(), [4, this._push()];
            case 1:
              return [2, e3.sent()];
          }
        });
      });
    }, Object.defineProperty(e2.prototype, "pusher", { get: function() {
      return this._push;
    }, set: function(e3) {
      this._push = e3;
    }, enumerable: false, configurable: true }), e2;
  }();
}, 3110: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.animationFrames = void 0;
  var n2 = r2(4662), o2 = r2(4746), i2 = r2(9507);
  function a2(e2) {
    return new n2.Observable(function(t2) {
      var r3 = e2 || o2.performanceTimestampProvider, n3 = r3.now(), a3 = 0, u3 = function() {
        t2.closed || (a3 = i2.animationFrameProvider.requestAnimationFrame(function(o3) {
          a3 = 0;
          var i3 = r3.now();
          t2.next({ timestamp: e2 ? i3 : o3, elapsed: i3 - n3 }), u3();
        }));
      };
      return u3(), function() {
        a3 && i2.animationFrameProvider.cancelAnimationFrame(a3);
      };
    });
  }
  t.animationFrames = function(e2) {
    return e2 ? a2(e2) : u2;
  };
  var u2 = a2();
}, 3111: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true }), t.OperatorSubscriber = t.createOperatorSubscriber = void 0;
  var o2 = r2(5);
  t.createOperatorSubscriber = function(e2, t2, r3, n3, o3) {
    return new i2(e2, t2, r3, n3, o3);
  };
  var i2 = function(e2) {
    function t2(t3, r3, n3, o3, i3, a2) {
      var u2 = e2.call(this, t3) || this;
      return u2.onFinalize = i3, u2.shouldUnsubscribe = a2, u2._next = r3 ? function(e3) {
        try {
          r3(e3);
        } catch (e4) {
          t3.error(e4);
        }
      } : e2.prototype._next, u2._error = o3 ? function(e3) {
        try {
          o3(e3);
        } catch (e4) {
          t3.error(e4);
        } finally {
          this.unsubscribe();
        }
      } : e2.prototype._error, u2._complete = n3 ? function() {
        try {
          n3();
        } catch (e3) {
          t3.error(e3);
        } finally {
          this.unsubscribe();
        }
      } : e2.prototype._complete, u2;
    }
    return n2(t2, e2), t2.prototype.unsubscribe = function() {
      var t3;
      if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
        var r3 = this.closed;
        e2.prototype.unsubscribe.call(this), !r3 && (null === (t3 = this.onFinalize) || void 0 === t3 || t3.call(this));
      }
    }, t2;
  }(o2.Subscriber);
  t.OperatorSubscriber = i2;
}, 3133: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.shareReplay = void 0;
  var n2 = r2(1242), o2 = r2(8977);
  t.shareReplay = function(e2, t2, r3) {
    var i2, a2, u2, s2, c2 = false;
    return e2 && "object" == typeof e2 ? (i2 = e2.bufferSize, s2 = void 0 === i2 ? 1 / 0 : i2, a2 = e2.windowTime, t2 = void 0 === a2 ? 1 / 0 : a2, c2 = void 0 !== (u2 = e2.refCount) && u2, r3 = e2.scheduler) : s2 = null != e2 ? e2 : 1 / 0, o2.share({ connector: function() {
      return new n2.ReplaySubject(s2, t2, r3);
    }, resetOnError: true, resetOnComplete: false, resetOnRefCountZero: c2 });
  };
}, 3146: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.audit = void 0;
  var n2 = r2(7843), o2 = r2(9445), i2 = r2(3111);
  t.audit = function(e2) {
    return n2.operate(function(t2, r3) {
      var n3 = false, a2 = null, u2 = null, s2 = false, c2 = function() {
        if (null == u2 || u2.unsubscribe(), u2 = null, n3) {
          n3 = false;
          var e3 = a2;
          a2 = null, r3.next(e3);
        }
        s2 && r3.complete();
      }, l2 = function() {
        u2 = null, s2 && r3.complete();
      };
      t2.subscribe(i2.createOperatorSubscriber(r3, function(t3) {
        n3 = true, a2 = t3, u2 || o2.innerFrom(e2(t3)).subscribe(u2 = i2.createOperatorSubscriber(r3, c2, l2));
      }, function() {
        s2 = true, (!n3 || !u2 || u2.closed) && r3.complete();
      }));
    });
  };
}, 3206: (e, t, r2) => {
  e.exports = function(e2) {
    var t2, r3, S2, E2 = 0, P2 = 0, T2 = s2, x3 = [], C2 = [], j2 = 1, A2 = 0, k2 = 0, R2 = false, I2 = false, M2 = "", N2 = i2, D2 = n2;
    "300 es" === (e2 = e2 || {}).version && (N2 = u2, D2 = a2);
    var L2 = {}, U2 = {};
    for (E2 = 0; E2 < N2.length; E2++) L2[N2[E2]] = true;
    for (E2 = 0; E2 < D2.length; E2++) U2[D2[E2]] = true;
    return function(e3) {
      return C2 = [], null !== e3 ? function(e4) {
        var r4;
        for (E2 = 0, e4.toString && (e4 = e4.toString()), M2 += e4.replace(/\r\n/g, "\n"), S2 = M2.length; t2 = M2[E2], E2 < S2; ) {
          switch (r4 = E2, T2) {
            case l2:
              E2 = q2();
              break;
            case f2:
              E2 = W2();
              break;
            case h2:
              E2 = V2();
              break;
            case d2:
              E2 = G2();
              break;
            case p3:
              E2 = X2();
              break;
            case w2:
              E2 = Y2();
              break;
            case v3:
              E2 = K3();
              break;
            case c2:
              E2 = Z2();
              break;
            case g2:
              E2 = z2();
              break;
            case s2:
              E2 = B2();
          }
          r4 !== E2 && ("\n" === M2[r4] ? (A2 = 0, ++j2) : ++A2);
        }
        return P2 += E2, M2 = M2.slice(E2), C2;
      }(e3) : (x3.length && F2(x3.join("")), T2 = _2, F2("(eof)"), C2);
    };
    function F2(e3) {
      e3.length && C2.push({ type: O2[T2], data: e3, position: k2, line: j2, column: A2 });
    }
    function B2() {
      return x3 = x3.length ? [] : x3, "/" === r3 && "*" === t2 ? (k2 = P2 + E2 - 1, T2 = l2, r3 = t2, E2 + 1) : "/" === r3 && "/" === t2 ? (k2 = P2 + E2 - 1, T2 = f2, r3 = t2, E2 + 1) : "#" === t2 ? (T2 = h2, k2 = P2 + E2, E2) : /\s/.test(t2) ? (T2 = g2, k2 = P2 + E2, E2) : (R2 = /\d/.test(t2), I2 = /[^\w_]/.test(t2), k2 = P2 + E2, T2 = R2 ? p3 : I2 ? d2 : c2, E2);
    }
    function z2() {
      return /[^\s]/g.test(t2) ? (F2(x3.join("")), T2 = s2, E2) : (x3.push(t2), r3 = t2, E2 + 1);
    }
    function V2() {
      return "\r" !== t2 && "\n" !== t2 || "\\" === r3 ? (x3.push(t2), r3 = t2, E2 + 1) : (F2(x3.join("")), T2 = s2, E2);
    }
    function W2() {
      return V2();
    }
    function q2() {
      return "/" === t2 && "*" === r3 ? (x3.push(t2), F2(x3.join("")), T2 = s2, E2 + 1) : (x3.push(t2), r3 = t2, E2 + 1);
    }
    function G2() {
      if ("." === r3 && /\d/.test(t2)) return T2 = v3, E2;
      if ("/" === r3 && "*" === t2) return T2 = l2, E2;
      if ("/" === r3 && "/" === t2) return T2 = f2, E2;
      if ("." === t2 && x3.length) {
        for (; H2(x3); ) ;
        return T2 = v3, E2;
      }
      if (";" === t2 || ")" === t2 || "(" === t2) {
        if (x3.length) for (; H2(x3); ) ;
        return F2(t2), T2 = s2, E2 + 1;
      }
      var e3 = 2 === x3.length && "=" !== t2;
      if (/[\w_\d\s]/.test(t2) || e3) {
        for (; H2(x3); ) ;
        return T2 = s2, E2;
      }
      return x3.push(t2), r3 = t2, E2 + 1;
    }
    function H2(e3) {
      for (var t3, r4, n3 = 0; ; ) {
        if (t3 = o2.indexOf(e3.slice(0, e3.length + n3).join("")), r4 = o2[t3], -1 === t3) {
          if (n3-- + e3.length > 0) continue;
          r4 = e3.slice(0, 1).join("");
        }
        return F2(r4), k2 += r4.length, (x3 = x3.slice(r4.length)).length;
      }
    }
    function Y2() {
      return /[^a-fA-F0-9]/.test(t2) ? (F2(x3.join("")), T2 = s2, E2) : (x3.push(t2), r3 = t2, E2 + 1);
    }
    function X2() {
      return "." === t2 || /[eE]/.test(t2) ? (x3.push(t2), T2 = v3, r3 = t2, E2 + 1) : "x" === t2 && 1 === x3.length && "0" === x3[0] ? (T2 = w2, x3.push(t2), r3 = t2, E2 + 1) : /[^\d]/.test(t2) ? (F2(x3.join("")), T2 = s2, E2) : (x3.push(t2), r3 = t2, E2 + 1);
    }
    function K3() {
      return "f" === t2 && (x3.push(t2), r3 = t2, E2 += 1), /[eE]/.test(t2) ? (x3.push(t2), r3 = t2, E2 + 1) : ("-" !== t2 && "+" !== t2 || !/[eE]/.test(r3)) && /[^\d]/.test(t2) ? (F2(x3.join("")), T2 = s2, E2) : (x3.push(t2), r3 = t2, E2 + 1);
    }
    function Z2() {
      if (/[^\d\w_]/.test(t2)) {
        var e3 = x3.join("");
        return T2 = U2[e3] ? m2 : L2[e3] ? b2 : y3, F2(x3.join("")), T2 = s2, E2;
      }
      return x3.push(t2), r3 = t2, E2 + 1;
    }
  };
  var n2 = r2(4704), o2 = r2(2063), i2 = r2(7192), a2 = r2(8784), u2 = r2(5592), s2 = 999, c2 = 9999, l2 = 0, f2 = 1, h2 = 2, d2 = 3, p3 = 4, v3 = 5, y3 = 6, b2 = 7, m2 = 8, g2 = 9, _2 = 10, w2 = 11, O2 = ["block-comment", "line-comment", "preprocessor", "operator", "integer", "float", "ident", "builtin", "keyword", "whitespace", "eof", "integer"];
}, 3218: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.mapTo = void 0;
  var n2 = r2(5471);
  t.mapTo = function(e2) {
    return n2.map(function() {
      return e2;
    });
  };
}, 3229: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true }), t.AnimationFrameScheduler = void 0;
  var o2 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), t2.prototype.flush = function(e3) {
      var t3;
      this._active = true, e3 ? t3 = e3.id : (t3 = this._scheduled, this._scheduled = void 0);
      var r3, n3 = this.actions;
      e3 = e3 || n3.shift();
      do {
        if (r3 = e3.execute(e3.state, e3.delay)) break;
      } while ((e3 = n3[0]) && e3.id === t3 && n3.shift());
      if (this._active = false, r3) {
        for (; (e3 = n3[0]) && e3.id === t3 && n3.shift(); ) e3.unsubscribe();
        throw r3;
      }
    }, t2;
  }(r2(5648).AsyncScheduler);
  t.AnimationFrameScheduler = o2;
}, 3231: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.auditTime = void 0;
  var n2 = r2(7961), o2 = r2(3146), i2 = r2(4092);
  t.auditTime = function(e2, t2) {
    return void 0 === t2 && (t2 = n2.asyncScheduler), o2.audit(function() {
      return i2.timer(e2, t2);
    });
  };
}, 3247: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.combineLatestInit = t.combineLatest = void 0;
  var n2 = r2(4662), o2 = r2(7360), i2 = r2(4917), a2 = r2(6640), u2 = r2(1251), s2 = r2(1107), c2 = r2(6013), l2 = r2(3111), f2 = r2(7110);
  function h2(e2, t2, r3) {
    return void 0 === r3 && (r3 = a2.identity), function(n3) {
      d2(t2, function() {
        for (var o3 = e2.length, a3 = new Array(o3), u3 = o3, s3 = o3, c3 = function(o4) {
          d2(t2, function() {
            var c4 = i2.from(e2[o4], t2), f4 = false;
            c4.subscribe(l2.createOperatorSubscriber(n3, function(e3) {
              a3[o4] = e3, f4 || (f4 = true, s3--), s3 || n3.next(r3(a3.slice()));
            }, function() {
              --u3 || n3.complete();
            }));
          }, n3);
        }, f3 = 0; f3 < o3; f3++) c3(f3);
      }, n3);
    };
  }
  function d2(e2, t2, r3) {
    e2 ? f2.executeSchedule(r3, e2, t2) : t2();
  }
  t.combineLatest = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    var r3 = s2.popScheduler(e2), l3 = s2.popResultSelector(e2), f3 = o2.argsArgArrayOrObject(e2), d3 = f3.args, p3 = f3.keys;
    if (0 === d3.length) return i2.from([], r3);
    var v3 = new n2.Observable(h2(d3, r3, p3 ? function(e3) {
      return c2.createObject(p3, e3);
    } : a2.identity));
    return l3 ? v3.pipe(u2.mapOneOrManyArgs(l3)) : v3;
  }, t.combineLatestInit = h2;
}, 3269: (e, t, r2) => {
  var n2 = r2(6931), o2 = r2(9975), i2 = Object.hasOwnProperty, a2 = /* @__PURE__ */ Object.create(null);
  for (var u2 in n2) i2.call(n2, u2) && (a2[n2[u2]] = u2);
  var s2 = e.exports = { to: {}, get: {} };
  function c2(e2, t2, r3) {
    return Math.min(Math.max(t2, e2), r3);
  }
  function l2(e2) {
    var t2 = Math.round(e2).toString(16).toUpperCase();
    return t2.length < 2 ? "0" + t2 : t2;
  }
  s2.get = function(e2) {
    var t2, r3;
    switch (e2.substring(0, 3).toLowerCase()) {
      case "hsl":
        t2 = s2.get.hsl(e2), r3 = "hsl";
        break;
      case "hwb":
        t2 = s2.get.hwb(e2), r3 = "hwb";
        break;
      default:
        t2 = s2.get.rgb(e2), r3 = "rgb";
    }
    return t2 ? { model: r3, value: t2 } : null;
  }, s2.get.rgb = function(e2) {
    if (!e2) return null;
    var t2, r3, o3, a3 = [0, 0, 0, 1];
    if (t2 = e2.match(/^#([a-f0-9]{6})([a-f0-9]{2})?$/i)) {
      for (o3 = t2[2], t2 = t2[1], r3 = 0; r3 < 3; r3++) {
        var u3 = 2 * r3;
        a3[r3] = parseInt(t2.slice(u3, u3 + 2), 16);
      }
      o3 && (a3[3] = parseInt(o3, 16) / 255);
    } else if (t2 = e2.match(/^#([a-f0-9]{3,4})$/i)) {
      for (o3 = (t2 = t2[1])[3], r3 = 0; r3 < 3; r3++) a3[r3] = parseInt(t2[r3] + t2[r3], 16);
      o3 && (a3[3] = parseInt(o3 + o3, 16) / 255);
    } else if (t2 = e2.match(/^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/)) {
      for (r3 = 0; r3 < 3; r3++) a3[r3] = parseInt(t2[r3 + 1], 0);
      t2[4] && (t2[5] ? a3[3] = 0.01 * parseFloat(t2[4]) : a3[3] = parseFloat(t2[4]));
    } else {
      if (!(t2 = e2.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/))) return (t2 = e2.match(/^(\w+)$/)) ? "transparent" === t2[1] ? [0, 0, 0, 0] : i2.call(n2, t2[1]) ? ((a3 = n2[t2[1]])[3] = 1, a3) : null : null;
      for (r3 = 0; r3 < 3; r3++) a3[r3] = Math.round(2.55 * parseFloat(t2[r3 + 1]));
      t2[4] && (t2[5] ? a3[3] = 0.01 * parseFloat(t2[4]) : a3[3] = parseFloat(t2[4]));
    }
    for (r3 = 0; r3 < 3; r3++) a3[r3] = c2(a3[r3], 0, 255);
    return a3[3] = c2(a3[3], 0, 1), a3;
  }, s2.get.hsl = function(e2) {
    if (!e2) return null;
    var t2 = e2.match(/^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/);
    if (t2) {
      var r3 = parseFloat(t2[4]);
      return [(parseFloat(t2[1]) % 360 + 360) % 360, c2(parseFloat(t2[2]), 0, 100), c2(parseFloat(t2[3]), 0, 100), c2(isNaN(r3) ? 1 : r3, 0, 1)];
    }
    return null;
  }, s2.get.hwb = function(e2) {
    if (!e2) return null;
    var t2 = e2.match(/^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/);
    if (t2) {
      var r3 = parseFloat(t2[4]);
      return [(parseFloat(t2[1]) % 360 + 360) % 360, c2(parseFloat(t2[2]), 0, 100), c2(parseFloat(t2[3]), 0, 100), c2(isNaN(r3) ? 1 : r3, 0, 1)];
    }
    return null;
  }, s2.to.hex = function() {
    var e2 = o2(arguments);
    return "#" + l2(e2[0]) + l2(e2[1]) + l2(e2[2]) + (e2[3] < 1 ? l2(Math.round(255 * e2[3])) : "");
  }, s2.to.rgb = function() {
    var e2 = o2(arguments);
    return e2.length < 4 || 1 === e2[3] ? "rgb(" + Math.round(e2[0]) + ", " + Math.round(e2[1]) + ", " + Math.round(e2[2]) + ")" : "rgba(" + Math.round(e2[0]) + ", " + Math.round(e2[1]) + ", " + Math.round(e2[2]) + ", " + e2[3] + ")";
  }, s2.to.rgb.percent = function() {
    var e2 = o2(arguments), t2 = Math.round(e2[0] / 255 * 100), r3 = Math.round(e2[1] / 255 * 100), n3 = Math.round(e2[2] / 255 * 100);
    return e2.length < 4 || 1 === e2[3] ? "rgb(" + t2 + "%, " + r3 + "%, " + n3 + "%)" : "rgba(" + t2 + "%, " + r3 + "%, " + n3 + "%, " + e2[3] + ")";
  }, s2.to.hsl = function() {
    var e2 = o2(arguments);
    return e2.length < 4 || 1 === e2[3] ? "hsl(" + e2[0] + ", " + e2[1] + "%, " + e2[2] + "%)" : "hsla(" + e2[0] + ", " + e2[1] + "%, " + e2[2] + "%, " + e2[3] + ")";
  }, s2.to.hwb = function() {
    var e2 = o2(arguments), t2 = "";
    return e2.length >= 4 && 1 !== e2[3] && (t2 = ", " + e2[3]), "hwb(" + e2[0] + ", " + e2[1] + "%, " + e2[2] + "%" + t2 + ")";
  }, s2.to.keyword = function(e2) {
    return a2[e2.slice(0, 3)];
  };
}, 3274: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.switchMapTo = void 0;
  var n2 = r2(3879), o2 = r2(1018);
  t.switchMapTo = function(e2, t2) {
    return o2.isFunction(t2) ? n2.switchMap(function() {
      return e2;
    }, t2) : n2.switchMap(function() {
      return e2;
    });
  };
}, 3321: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.TypeTransformer = void 0;
  var n2 = r2(7168), o2 = r2(9305).internal.objectUtil, i2 = function() {
    function e2(e3) {
      this._transformers = e3, this._transformersPerSignature = new Map(e3.map(function(e4) {
        return [e4.signature, e4];
      })), this.fromStructure = this.fromStructure.bind(this), this.toStructure = this.toStructure.bind(this), Object.freeze(this);
    }
    return e2.prototype.fromStructure = function(e3) {
      try {
        return e3 instanceof n2.structure.Structure && this._transformersPerSignature.has(e3.signature) ? (0, this._transformersPerSignature.get(e3.signature).fromStructure)(e3) : e3;
      } catch (e4) {
        return o2.createBrokenObject(e4);
      }
    }, e2.prototype.toStructure = function(e3) {
      var t2 = this._transformers.find(function(t3) {
        return (0, t3.isTypeInstance)(e3);
      });
      return void 0 !== t2 ? t2.toStructure(e3) : e3;
    }, e2;
  }();
  t.default = i2;
  var a2 = function() {
    function e2(e3) {
      var t2 = e3.signature, r3 = e3.fromStructure, n3 = e3.toStructure, o3 = e3.isTypeInstance;
      this.signature = t2, this.isTypeInstance = o3, this.fromStructure = r3, this.toStructure = n3, Object.freeze(this);
    }
    return e2.prototype.extendsWith = function(t2) {
      var r3 = t2.signature, n3 = t2.fromStructure, o3 = t2.toStructure, i3 = t2.isTypeInstance;
      return new e2({ signature: r3 || this.signature, fromStructure: n3 || this.fromStructure, toStructure: o3 || this.toStructure, isTypeInstance: i3 || this.isTypeInstance });
    }, e2;
  }();
  t.TypeTransformer = a2;
}, 3327: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.observable = void 0, t.observable = "function" == typeof Symbol && Symbol.observable || "@@observable";
}, 3371: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.toString = t.toNumber = t.inSafeRange = t.isInt = t.int = void 0;
  var n2 = r2(9691), o2 = /* @__PURE__ */ new Map(), i2 = function() {
    function e2(e3, t2) {
      this.low = null != e3 ? e3 : 0, this.high = null != t2 ? t2 : 0;
    }
    return e2.prototype.inSafeRange = function() {
      return this.greaterThanOrEqual(e2.MIN_SAFE_VALUE) && this.lessThanOrEqual(e2.MAX_SAFE_VALUE);
    }, e2.prototype.toInt = function() {
      return this.low;
    }, e2.prototype.toNumber = function() {
      return this.high * u2 + (this.low >>> 0);
    }, e2.prototype.toBigInt = function() {
      if (this.isZero()) return BigInt(0);
      if (this.isPositive()) return BigInt(this.high >>> 0) * BigInt(u2) + BigInt(this.low >>> 0);
      var e3 = this.negate();
      return BigInt(-1) * (BigInt(e3.high >>> 0) * BigInt(u2) + BigInt(e3.low >>> 0));
    }, e2.prototype.toNumberOrInfinity = function() {
      return this.lessThan(e2.MIN_SAFE_VALUE) ? Number.NEGATIVE_INFINITY : this.greaterThan(e2.MAX_SAFE_VALUE) ? Number.POSITIVE_INFINITY : this.toNumber();
    }, e2.prototype.toString = function(t2) {
      if ((t2 = null != t2 ? t2 : 10) < 2 || t2 > 36) throw RangeError("radix out of range: " + t2.toString());
      if (this.isZero()) return "0";
      var r3;
      if (this.isNegative()) {
        if (this.equals(e2.MIN_VALUE)) {
          var n3 = e2.fromNumber(t2), o3 = this.div(n3);
          return r3 = o3.multiply(n3).subtract(this), o3.toString(t2) + r3.toInt().toString(t2);
        }
        return "-" + this.negate().toString(t2);
      }
      var i3 = e2.fromNumber(Math.pow(t2, 6));
      r3 = this;
      for (var a3 = ""; ; ) {
        var u3 = r3.div(i3), s3 = (r3.subtract(u3.multiply(i3)).toInt() >>> 0).toString(t2);
        if ((r3 = u3).isZero()) return s3 + a3;
        for (; s3.length < 6; ) s3 = "0" + s3;
        a3 = "" + s3 + a3;
      }
    }, e2.prototype.valueOf = function() {
      return this.toBigInt();
    }, e2.prototype.getHighBits = function() {
      return this.high;
    }, e2.prototype.getLowBits = function() {
      return this.low;
    }, e2.prototype.getNumBitsAbs = function() {
      if (this.isNegative()) return this.equals(e2.MIN_VALUE) ? 64 : this.negate().getNumBitsAbs();
      var t2 = 0 !== this.high ? this.high : this.low, r3 = 0;
      for (r3 = 31; r3 > 0 && !(t2 & 1 << r3); r3--) ;
      return 0 !== this.high ? r3 + 33 : r3 + 1;
    }, e2.prototype.isZero = function() {
      return 0 === this.high && 0 === this.low;
    }, e2.prototype.isNegative = function() {
      return this.high < 0;
    }, e2.prototype.isPositive = function() {
      return this.high >= 0;
    }, e2.prototype.isOdd = function() {
      return !(1 & ~this.low);
    }, e2.prototype.isEven = function() {
      return !(1 & this.low);
    }, e2.prototype.equals = function(t2) {
      var r3 = e2.fromValue(t2);
      return this.high === r3.high && this.low === r3.low;
    }, e2.prototype.notEquals = function(e3) {
      return !this.equals(e3);
    }, e2.prototype.lessThan = function(e3) {
      return this.compare(e3) < 0;
    }, e2.prototype.lessThanOrEqual = function(e3) {
      return this.compare(e3) <= 0;
    }, e2.prototype.greaterThan = function(e3) {
      return this.compare(e3) > 0;
    }, e2.prototype.greaterThanOrEqual = function(e3) {
      return this.compare(e3) >= 0;
    }, e2.prototype.compare = function(t2) {
      var r3 = e2.fromValue(t2);
      if (this.equals(r3)) return 0;
      var n3 = this.isNegative(), o3 = r3.isNegative();
      return n3 && !o3 ? -1 : !n3 && o3 ? 1 : this.subtract(r3).isNegative() ? -1 : 1;
    }, e2.prototype.negate = function() {
      return this.equals(e2.MIN_VALUE) ? e2.MIN_VALUE : this.not().add(e2.ONE);
    }, e2.prototype.add = function(t2) {
      var r3 = e2.fromValue(t2), n3 = this.high >>> 16, o3 = 65535 & this.high, i3 = this.low >>> 16, a3 = 65535 & this.low, u3 = r3.high >>> 16, s3 = 65535 & r3.high, c3 = r3.low >>> 16, l3 = 0, f3 = 0, h3 = 0, d3 = 0;
      return h3 += (d3 += a3 + (65535 & r3.low)) >>> 16, d3 &= 65535, f3 += (h3 += i3 + c3) >>> 16, h3 &= 65535, l3 += (f3 += o3 + s3) >>> 16, f3 &= 65535, l3 += n3 + u3, l3 &= 65535, e2.fromBits(h3 << 16 | d3, l3 << 16 | f3);
    }, e2.prototype.subtract = function(t2) {
      var r3 = e2.fromValue(t2);
      return this.add(r3.negate());
    }, e2.prototype.multiply = function(t2) {
      if (this.isZero()) return e2.ZERO;
      var r3 = e2.fromValue(t2);
      if (r3.isZero()) return e2.ZERO;
      if (this.equals(e2.MIN_VALUE)) return r3.isOdd() ? e2.MIN_VALUE : e2.ZERO;
      if (r3.equals(e2.MIN_VALUE)) return this.isOdd() ? e2.MIN_VALUE : e2.ZERO;
      if (this.isNegative()) return r3.isNegative() ? this.negate().multiply(r3.negate()) : this.negate().multiply(r3).negate();
      if (r3.isNegative()) return this.multiply(r3.negate()).negate();
      if (this.lessThan(c2) && r3.lessThan(c2)) return e2.fromNumber(this.toNumber() * r3.toNumber());
      var n3 = this.high >>> 16, o3 = 65535 & this.high, i3 = this.low >>> 16, a3 = 65535 & this.low, u3 = r3.high >>> 16, s3 = 65535 & r3.high, l3 = r3.low >>> 16, f3 = 65535 & r3.low, h3 = 0, d3 = 0, p4 = 0, v3 = 0;
      return p4 += (v3 += a3 * f3) >>> 16, v3 &= 65535, d3 += (p4 += i3 * f3) >>> 16, p4 &= 65535, d3 += (p4 += a3 * l3) >>> 16, p4 &= 65535, h3 += (d3 += o3 * f3) >>> 16, d3 &= 65535, h3 += (d3 += i3 * l3) >>> 16, d3 &= 65535, h3 += (d3 += a3 * s3) >>> 16, d3 &= 65535, h3 += n3 * f3 + o3 * l3 + i3 * s3 + a3 * u3, h3 &= 65535, e2.fromBits(p4 << 16 | v3, h3 << 16 | d3);
    }, e2.prototype.div = function(t2) {
      var r3, o3, i3, a3 = e2.fromValue(t2);
      if (a3.isZero()) throw (0, n2.newError)("division by zero");
      if (this.isZero()) return e2.ZERO;
      if (this.equals(e2.MIN_VALUE)) return a3.equals(e2.ONE) || a3.equals(e2.NEG_ONE) ? e2.MIN_VALUE : a3.equals(e2.MIN_VALUE) ? e2.ONE : (r3 = this.shiftRight(1).div(a3).shiftLeft(1)).equals(e2.ZERO) ? a3.isNegative() ? e2.ONE : e2.NEG_ONE : (o3 = this.subtract(a3.multiply(r3)), i3 = r3.add(o3.div(a3)));
      if (a3.equals(e2.MIN_VALUE)) return e2.ZERO;
      if (this.isNegative()) return a3.isNegative() ? this.negate().div(a3.negate()) : this.negate().div(a3).negate();
      if (a3.isNegative()) return this.div(a3.negate()).negate();
      for (i3 = e2.ZERO, o3 = this; o3.greaterThanOrEqual(a3); ) {
        r3 = Math.max(1, Math.floor(o3.toNumber() / a3.toNumber()));
        for (var u3 = Math.ceil(Math.log(r3) / Math.LN2), s3 = u3 <= 48 ? 1 : Math.pow(2, u3 - 48), c3 = e2.fromNumber(r3), l3 = c3.multiply(a3); l3.isNegative() || l3.greaterThan(o3); ) r3 -= s3, l3 = (c3 = e2.fromNumber(r3)).multiply(a3);
        c3.isZero() && (c3 = e2.ONE), i3 = i3.add(c3), o3 = o3.subtract(l3);
      }
      return i3;
    }, e2.prototype.modulo = function(t2) {
      var r3 = e2.fromValue(t2);
      return this.subtract(this.div(r3).multiply(r3));
    }, e2.prototype.not = function() {
      return e2.fromBits(~this.low, ~this.high);
    }, e2.prototype.and = function(t2) {
      var r3 = e2.fromValue(t2);
      return e2.fromBits(this.low & r3.low, this.high & r3.high);
    }, e2.prototype.or = function(t2) {
      var r3 = e2.fromValue(t2);
      return e2.fromBits(this.low | r3.low, this.high | r3.high);
    }, e2.prototype.xor = function(t2) {
      var r3 = e2.fromValue(t2);
      return e2.fromBits(this.low ^ r3.low, this.high ^ r3.high);
    }, e2.prototype.shiftLeft = function(t2) {
      var r3 = e2.toNumber(t2);
      return 0 == (r3 &= 63) ? e2.ZERO : r3 < 32 ? e2.fromBits(this.low << r3, this.high << r3 | this.low >>> 32 - r3) : e2.fromBits(0, this.low << r3 - 32);
    }, e2.prototype.shiftRight = function(t2) {
      var r3 = e2.toNumber(t2), n3 = e2.toNumber(t2);
      return 0 == (r3 &= 63) ? e2.ZERO : n3 < 32 ? e2.fromBits(this.low >>> r3 | this.high << 32 - r3, this.high >> r3) : e2.fromBits(this.high >> r3 - 32, this.high >= 0 ? 0 : -1);
    }, e2.isInteger = function(e3) {
      return true === (null == e3 ? void 0 : e3.__isInteger__);
    }, e2.fromInt = function(t2) {
      var r3;
      if ((t2 |= 0) >= -128 && t2 < 128 && null != (r3 = o2.get(t2))) return r3;
      var n3 = new e2(t2, t2 < 0 ? -1 : 0);
      return t2 >= -128 && t2 < 128 && o2.set(t2, n3), n3;
    }, e2.fromBits = function(t2, r3) {
      return new e2(t2, r3);
    }, e2.fromNumber = function(t2) {
      return isNaN(t2) || !isFinite(t2) ? e2.ZERO : t2 <= -s2 ? e2.MIN_VALUE : t2 + 1 >= s2 ? e2.MAX_VALUE : t2 < 0 ? e2.fromNumber(-t2).negate() : new e2(t2 % u2 | 0, t2 / u2 | 0);
    }, e2.fromString = function(t2, r3, o3) {
      var i3, u3 = (void 0 === o3 ? {} : o3).strictStringValidation;
      if (0 === t2.length) throw (0, n2.newError)("number format error: empty string");
      if ("NaN" === t2 || "Infinity" === t2 || "+Infinity" === t2 || "-Infinity" === t2) return e2.ZERO;
      if ((r3 = null != r3 ? r3 : 10) < 2 || r3 > 36) throw (0, n2.newError)("radix out of range: " + r3.toString());
      if ((i3 = t2.indexOf("-")) > 0) throw (0, n2.newError)('number format error: interior "-" character: ' + t2);
      if (0 === i3) return e2.fromString(t2.substring(1), r3).negate();
      for (var s3 = e2.fromNumber(Math.pow(r3, 8)), c3 = e2.ZERO, l3 = 0; l3 < t2.length; l3 += 8) {
        var f3 = Math.min(8, t2.length - l3), h3 = t2.substring(l3, l3 + f3), d3 = parseInt(h3, r3);
        if (true === u3 && !a2(h3, d3, r3)) throw (0, n2.newError)('number format error: "'.concat(h3, '" is NaN in radix ').concat(r3, ": ").concat(t2));
        if (f3 < 8) {
          var p4 = e2.fromNumber(Math.pow(r3, f3));
          c3 = c3.multiply(p4).add(e2.fromNumber(d3));
        } else c3 = (c3 = c3.multiply(s3)).add(e2.fromNumber(d3));
      }
      return c3;
    }, e2.fromValue = function(t2, r3) {
      return void 0 === r3 && (r3 = {}), t2 instanceof e2 ? t2 : "number" == typeof t2 ? (true === r3.ceilFloat && (t2 = Math.ceil(t2)), e2.fromNumber(t2)) : "string" == typeof t2 ? e2.fromString(t2, void 0, r3) : "bigint" == typeof t2 ? e2.fromString(t2.toString()) : new e2(t2.low, t2.high);
    }, e2.toNumber = function(t2) {
      switch (typeof t2) {
        case "number":
          return t2;
        case "bigint":
          return Number(t2);
        default:
          return e2.fromValue(t2).toNumber();
      }
    }, e2.toString = function(t2, r3) {
      return e2.fromValue(t2).toString(r3);
    }, e2.inSafeRange = function(t2) {
      return e2.fromValue(t2).inSafeRange();
    }, e2.ZERO = e2.fromInt(0), e2.ONE = e2.fromInt(1), e2.NEG_ONE = e2.fromInt(-1), e2.MAX_VALUE = e2.fromBits(-1, 2147483647), e2.MIN_VALUE = e2.fromBits(0, -2147483648), e2.MIN_SAFE_VALUE = e2.fromBits(1, -2097152), e2.MAX_SAFE_VALUE = e2.fromBits(-1, 2097151), e2.__isInteger__ = true, e2;
  }();
  function a2(e2, t2, r3) {
    return !Number.isNaN(e2) && !Number.isNaN(t2) && function(e3, t3, r4) {
      var n3 = e3.toString(t3), o3 = Math.max(r4 - n3.length, 0), i3 = "0".repeat(o3);
      return "".concat(i3).concat(n3);
    }(t2, r3, e2.length) === e2.toLowerCase();
  }
  Object.defineProperty(i2.prototype, "__isInteger__", { value: true, enumerable: false, configurable: false });
  var u2 = 4294967296, s2 = u2 * u2 / 2, c2 = i2.fromInt(1 << 24), l2 = i2.fromValue;
  t.int = l2;
  var f2 = i2.isInteger;
  t.isInt = f2;
  var h2 = i2.inSafeRange;
  t.inSafeRange = h2;
  var d2 = i2.toNumber;
  t.toNumber = d2;
  var p3 = i2.toString;
  t.toString = p3, t.default = i2;
}, 3389: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true });
  var r2 = function() {
    function e2() {
    }
    return e2.prototype.resolve = function() {
      throw new Error("Abstract function");
    }, e2.prototype._resolveToItself = function(e3) {
      return Promise.resolve([e3]);
    }, e2;
  }();
  t.default = r2;
}, 3399: function(e, t, r2) {
  var n2 = this && this.__assign || function() {
    return n2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, n2.apply(this, arguments);
  }, o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = o2(r2(9238));
  t.default = n2({}, i2.default);
}, 3413: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.config = void 0, t.config = { onUnhandledError: null, onStoppedNotification: null, Promise: void 0, useDeprecatedSynchronousErrorHandling: false, useDeprecatedNextContext: false };
}, 3448: function(e, t, r2) {
  var n2 = this && this.__assign || function() {
    return n2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, n2.apply(this, arguments);
  }, o2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, i2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var a2 = r2(9305), u2 = r2(7168), s2 = r2(3321), c2 = r2(5973), l2 = i2(r2(6661)), f2 = a2.internal.temporalUtil, h2 = f2.dateToEpochDay, d2 = f2.localDateTimeToEpochSecond, p3 = f2.localTimeToNanoOfDay;
  function v3(e2, t2, r3) {
    if (!t2 && !r3) return e2;
    var n3 = function(e3) {
      return r3 ? e3.toBigInt() : e3.toNumberOrInfinity();
    }, o3 = Object.create(Object.getPrototypeOf(e2));
    for (var i3 in e2) if (true === Object.prototype.hasOwnProperty.call(e2, i3)) {
      var u3 = e2[i3];
      o3[i3] = (0, a2.isInt)(u3) ? n3(u3) : u3;
    }
    return Object.freeze(o3), o3;
  }
  t.default = n2(n2({}, l2.default), { createPoint2DTransformer: function() {
    return new s2.TypeTransformer({ signature: 88, isTypeInstance: function(e2) {
      return (0, a2.isPoint)(e2) && (null === e2.z || void 0 === e2.z);
    }, toStructure: function(e2) {
      return new u2.structure.Structure(88, [(0, a2.int)(e2.srid), e2.x, e2.y]);
    }, fromStructure: function(e2) {
      u2.structure.verifyStructSize("Point2D", 3, e2.size);
      var t2 = o2(e2.fields, 3), r3 = t2[0], n3 = t2[1], i3 = t2[2];
      return new a2.Point(r3, n3, i3, void 0);
    } });
  }, createPoint3DTransformer: function() {
    return new s2.TypeTransformer({ signature: 89, isTypeInstance: function(e2) {
      return (0, a2.isPoint)(e2) && null !== e2.z && void 0 !== e2.z;
    }, toStructure: function(e2) {
      return new u2.structure.Structure(89, [(0, a2.int)(e2.srid), e2.x, e2.y, e2.z]);
    }, fromStructure: function(e2) {
      u2.structure.verifyStructSize("Point3D", 4, e2.size);
      var t2 = o2(e2.fields, 4), r3 = t2[0], n3 = t2[1], i3 = t2[2], s3 = t2[3];
      return new a2.Point(r3, n3, i3, s3);
    } });
  }, createDurationTransformer: function() {
    return new s2.TypeTransformer({ signature: 69, isTypeInstance: a2.isDuration, toStructure: function(e2) {
      var t2 = (0, a2.int)(e2.months), r3 = (0, a2.int)(e2.days), n3 = (0, a2.int)(e2.seconds), o3 = (0, a2.int)(e2.nanoseconds);
      return new u2.structure.Structure(69, [t2, r3, n3, o3]);
    }, fromStructure: function(e2) {
      u2.structure.verifyStructSize("Duration", 4, e2.size);
      var t2 = o2(e2.fields, 4), r3 = t2[0], n3 = t2[1], i3 = t2[2], s3 = t2[3];
      return new a2.Duration(r3, n3, i3, s3);
    } });
  }, createLocalTimeTransformer: function(e2) {
    var t2 = e2.disableLosslessIntegers, r3 = e2.useBigInt;
    return new s2.TypeTransformer({ signature: 116, isTypeInstance: a2.isLocalTime, toStructure: function(e3) {
      var t3 = p3(e3.hour, e3.minute, e3.second, e3.nanosecond);
      return new u2.structure.Structure(116, [t3]);
    }, fromStructure: function(e3) {
      u2.structure.verifyStructSize("LocalTime", 1, e3.size);
      var n3 = o2(e3.fields, 1)[0];
      return v3((0, c2.nanoOfDayToLocalTime)(n3), t2, r3);
    } });
  }, createTimeTransformer: function(e2) {
    var t2 = e2.disableLosslessIntegers, r3 = e2.useBigInt;
    return new s2.TypeTransformer({ signature: 84, isTypeInstance: a2.isTime, toStructure: function(e3) {
      var t3 = p3(e3.hour, e3.minute, e3.second, e3.nanosecond), r4 = (0, a2.int)(e3.timeZoneOffsetSeconds);
      return new u2.structure.Structure(84, [t3, r4]);
    }, fromStructure: function(e3) {
      u2.structure.verifyStructSize("Time", 2, e3.size);
      var n3 = o2(e3.fields, 2), i3 = n3[0], s3 = n3[1], l3 = (0, c2.nanoOfDayToLocalTime)(i3);
      return v3(new a2.Time(l3.hour, l3.minute, l3.second, l3.nanosecond, s3), t2, r3);
    } });
  }, createDateTransformer: function(e2) {
    var t2 = e2.disableLosslessIntegers, r3 = e2.useBigInt;
    return new s2.TypeTransformer({ signature: 68, isTypeInstance: a2.isDate, toStructure: function(e3) {
      var t3 = h2(e3.year, e3.month, e3.day);
      return new u2.structure.Structure(68, [t3]);
    }, fromStructure: function(e3) {
      u2.structure.verifyStructSize("Date", 1, e3.size);
      var n3 = o2(e3.fields, 1)[0];
      return v3((0, c2.epochDayToDate)(n3), t2, r3);
    } });
  }, createLocalDateTimeTransformer: function(e2) {
    var t2 = e2.disableLosslessIntegers, r3 = e2.useBigInt;
    return new s2.TypeTransformer({ signature: 100, isTypeInstance: a2.isLocalDateTime, toStructure: function(e3) {
      var t3 = d2(e3.year, e3.month, e3.day, e3.hour, e3.minute, e3.second, e3.nanosecond), r4 = (0, a2.int)(e3.nanosecond);
      return new u2.structure.Structure(100, [t3, r4]);
    }, fromStructure: function(e3) {
      u2.structure.verifyStructSize("LocalDateTime", 2, e3.size);
      var n3 = o2(e3.fields, 2), i3 = n3[0], a3 = n3[1];
      return v3((0, c2.epochSecondAndNanoToLocalDateTime)(i3, a3), t2, r3);
    } });
  }, createDateTimeWithZoneIdTransformer: function(e2) {
    var t2 = e2.disableLosslessIntegers, r3 = e2.useBigInt;
    return new s2.TypeTransformer({ signature: 102, isTypeInstance: function(e3) {
      return (0, a2.isDateTime)(e3) && null != e3.timeZoneId;
    }, toStructure: function(e3) {
      var t3 = d2(e3.year, e3.month, e3.day, e3.hour, e3.minute, e3.second, e3.nanosecond), r4 = (0, a2.int)(e3.nanosecond), n3 = e3.timeZoneId;
      return new u2.structure.Structure(102, [t3, r4, n3]);
    }, fromStructure: function(e3) {
      u2.structure.verifyStructSize("DateTimeWithZoneId", 3, e3.size);
      var n3 = o2(e3.fields, 3), i3 = n3[0], s3 = n3[1], l3 = n3[2], f3 = (0, c2.epochSecondAndNanoToLocalDateTime)(i3, s3);
      return v3(new a2.DateTime(f3.year, f3.month, f3.day, f3.hour, f3.minute, f3.second, f3.nanosecond, null, l3), t2, r3);
    } });
  }, createDateTimeWithOffsetTransformer: function(e2) {
    var t2 = e2.disableLosslessIntegers, r3 = e2.useBigInt;
    return new s2.TypeTransformer({ signature: 70, isTypeInstance: function(e3) {
      return (0, a2.isDateTime)(e3) && null == e3.timeZoneId;
    }, toStructure: function(e3) {
      var t3 = d2(e3.year, e3.month, e3.day, e3.hour, e3.minute, e3.second, e3.nanosecond), r4 = (0, a2.int)(e3.nanosecond), n3 = (0, a2.int)(e3.timeZoneOffsetSeconds);
      return new u2.structure.Structure(70, [t3, r4, n3]);
    }, fromStructure: function(e3) {
      u2.structure.verifyStructSize("DateTimeWithZoneOffset", 3, e3.size);
      var n3 = o2(e3.fields, 3), i3 = n3[0], s3 = n3[1], l3 = n3[2], f3 = (0, c2.epochSecondAndNanoToLocalDateTime)(i3, s3);
      return v3(new a2.DateTime(f3.year, f3.month, f3.day, f3.hour, f3.minute, f3.second, f3.nanosecond, l3, null), t2, r3);
    } });
  } });
}, 3466: function(e, t, r2) {
  var n2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var o2 = r2(8813), i2 = r2(9419), a2 = n2(r2(3057)), u2 = r2(9305), s2 = n2(r2(5742)), c2 = n2(r2(1530)), l2 = n2(r2(9823)), f2 = u2.internal.constants, h2 = f2.ACCESS_MODE_READ, d2 = f2.ACCESS_MODE_WRITE, p3 = f2.TELEMETRY_APIS, v3 = u2.internal.txConfig.TxConfig, y3 = function() {
    function e2(e3) {
      var t2 = void 0 === e3 ? {} : e3, r3 = t2.session, n3 = t2.config, o3 = t2.log;
      this._session = r3, this._retryLogic = function(e4) {
        var t3 = e4 && e4.maxTransactionRetryTime ? e4.maxTransactionRetryTime : null;
        return new l2.default({ maxRetryTimeout: t3 });
      }(n3), this._log = o3;
    }
    return e2.prototype.run = function(e3, t2, r3) {
      var n3 = this;
      return new a2.default(new o2.Observable(function(o3) {
        try {
          o3.next(n3._session.run(e3, t2, r3)), o3.complete();
        } catch (e4) {
          o3.error(e4);
        }
        return function() {
        };
      }));
    }, e2.prototype.beginTransaction = function(e3) {
      return this._beginTransaction(this._session._mode, e3, { api: p3.UNMANAGED_TRANSACTION });
    }, e2.prototype.readTransaction = function(e3, t2) {
      return this._runTransaction(h2, e3, t2);
    }, e2.prototype.writeTransaction = function(e3, t2) {
      return this._runTransaction(d2, e3, t2);
    }, e2.prototype.executeRead = function(e3, t2) {
      return this._executeInTransaction(h2, e3, t2);
    }, e2.prototype.executeWrite = function(e3, t2) {
      return this._executeInTransaction(d2, e3, t2);
    }, e2.prototype._executeInTransaction = function(e3, t2, r3) {
      return this._runTransaction(e3, t2, r3, function(e4) {
        return new c2.default({ run: e4.run.bind(e4) });
      });
    }, e2.prototype.close = function() {
      var e3 = this;
      return new o2.Observable(function(t2) {
        e3._session.close().then(function() {
          t2.complete();
        }).catch(function(e4) {
          return t2.error(e4);
        });
      });
    }, e2.prototype[Symbol.asyncDispose] = function() {
      return this.close();
    }, e2.prototype.lastBookmark = function() {
      return this.lastBookmarks();
    }, e2.prototype.lastBookmarks = function() {
      return this._session.lastBookmarks();
    }, e2.prototype._beginTransaction = function(e3, t2, r3) {
      var n3 = this, i3 = v3.empty();
      return t2 && (i3 = new v3(t2, this._log)), new o2.Observable(function(t3) {
        try {
          n3._session._beginTransaction(e3, i3, r3).then(function(e4) {
            t3.next(new s2.default(e4)), t3.complete();
          }).catch(function(e4) {
            return t3.error(e4);
          });
        } catch (e4) {
          t3.error(e4);
        }
        return function() {
        };
      });
    }, e2.prototype._runTransaction = function(e3, t2, r3, n3) {
      var a3 = this;
      void 0 === n3 && (n3 = function(e4) {
        return e4;
      });
      var u3 = v3.empty();
      r3 && (u3 = new v3(r3));
      var s3 = { apiTelemetryConfig: { api: p3.MANAGED_TRANSACTION, onTelemetrySuccess: function() {
        s3.apiTelemetryConfig = void 0;
      } } };
      return this._retryLogic.retry((0, o2.of)(1).pipe((0, i2.mergeMap)(function() {
        return a3._beginTransaction(e3, u3, s3.apiTelemetryConfig);
      }), (0, i2.mergeMap)(function(e4) {
        return (0, o2.defer)(function() {
          try {
            return t2(n3(e4));
          } catch (e5) {
            return (0, o2.throwError)(function() {
              return e5;
            });
          }
        }).pipe((0, i2.catchError)(function(t3) {
          return e4.rollback().pipe((0, i2.concatWith)((0, o2.throwError)(function() {
            return t3;
          })));
        }), (0, i2.concatWith)(e4.commit()));
      })));
    }, e2;
  }();
  t.default = y3;
}, 3473: function(e, t, r2) {
  var n2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var o2 = n2(r2(5319)), i2 = r2(9305), a2 = n2(r2(1048)), u2 = new (r2(8888)).StringDecoder("utf8");
  t.default = { encode: function(e2) {
    return new o2.default(function(e3) {
      return "function" == typeof a2.default.Buffer.from ? a2.default.Buffer.from(e3, "utf8") : new a2.default.Buffer(e3, "utf8");
    }(e2));
  }, decode: function(e2, t2) {
    if (Object.prototype.hasOwnProperty.call(e2, "_buffer")) return function(e3, t3) {
      var r3 = e3.position, n3 = r3 + t3;
      return e3.position = Math.min(n3, e3.length), e3._buffer.toString("utf8", r3, n3);
    }(e2, t2);
    if (Object.prototype.hasOwnProperty.call(e2, "_buffers")) return function(e3, t3) {
      return function(e4, t4) {
        var r3 = t4, n3 = e4.position;
        return e4._updatePos(Math.min(t4, e4.length - n3)), e4._buffers.reduce(function(e5, t5) {
          if (r3 <= 0) return e5;
          if (n3 >= t5.length) return n3 -= t5.length, "";
          t5._updatePos(n3 - t5.position);
          var o3 = Math.min(t5.length - n3, r3), i3 = t5.readSlice(o3);
          return t5._updatePos(o3), r3 = Math.max(r3 - i3.length, 0), n3 = 0, e5 + function(e6) {
            return u2.write(e6._buffer);
          }(i3);
        }, "") + u2.end();
      }(e3, t3);
    }(e2, t2);
    throw (0, i2.newError)("Don't know how to decode strings from '".concat(e2, "'"));
  } };
}, 3488: function(e, t, r2) {
  var n2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3);
    var o3 = Object.getOwnPropertyDescriptor(t2, r3);
    o3 && !("get" in o3 ? !t2.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
      return t2[r3];
    } }), Object.defineProperty(e2, n3, o3);
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), o2 = this && this.__exportStar || function(e2, t2) {
    for (var r3 in e2) "default" === r3 || Object.prototype.hasOwnProperty.call(t2, r3) || n2(t2, e2, r3);
  };
  Object.defineProperty(t, "__esModule", { value: true }), o2(r2(5837), t);
}, 3545: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__awaiter || function(e2, t2, r3, n3) {
    return new (r3 || (r3 = Promise))(function(o3, i3) {
      function a3(e3) {
        try {
          s3(n3.next(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function u3(e3) {
        try {
          s3(n3.throw(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function s3(e3) {
        var t3;
        e3.done ? o3(e3.value) : (t3 = e3.value, t3 instanceof r3 ? t3 : new r3(function(e4) {
          e4(t3);
        })).then(a3, u3);
      }
      s3((n3 = n3.apply(e2, t2 || [])).next());
    });
  }, i2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u3(0), throw: u3(1), return: u3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u3(u4) {
      return function(s3) {
        return function(u5) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; i3 && (i3 = 0, u5[0] && (a3 = 0)), a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & u5[0] ? n3.return : u5[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, u5[1])).done) return o3;
            switch (n3 = 0, o3 && (u5 = [2 & u5[0], o3.value]), u5[0]) {
              case 0:
              case 1:
                o3 = u5;
                break;
              case 4:
                return a3.label++, { value: u5[1], done: false };
              case 5:
                a3.label++, n3 = u5[1], u5 = [0];
                continue;
              case 7:
                u5 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== u5[0] && 2 !== u5[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === u5[0] && (!o3 || u5[1] > o3[0] && u5[1] < o3[3])) {
                  a3.label = u5[1];
                  break;
                }
                if (6 === u5[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = u5;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(u5);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            u5 = t2.call(e2, a3);
          } catch (e3) {
            u5 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & u5[0]) throw u5[1];
          return { value: u5[0] ? u5[1] : void 0, done: true };
        }([u4, s3]);
      };
    }
  }, a2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var u2 = a2(r2(8987)), s2 = r2(7721), c2 = r2(9305), l2 = c2.internal.constants, f2 = l2.BOLT_PROTOCOL_V3, h2 = l2.BOLT_PROTOCOL_V4_0, d2 = l2.BOLT_PROTOCOL_V4_4, p3 = l2.BOLT_PROTOCOL_V5_1, v3 = c2.error.SERVICE_UNAVAILABLE, y3 = function(e2) {
    function t2(t3) {
      var r3 = t3.id, n3 = t3.config, o3 = t3.log, i3 = t3.address, a3 = t3.userAgent, u3 = t3.boltAgent, s3 = t3.authTokenManager, c3 = t3.newPool, l3 = e2.call(this, { id: r3, config: n3, log: o3, userAgent: a3, boltAgent: u3, authTokenManager: s3, newPool: c3 }) || this;
      return l3._address = i3, l3;
    }
    return n2(t2, e2), t2.prototype.acquireConnection = function(e3) {
      var t3 = void 0 === e3 ? {} : e3, r3 = (t3.accessMode, t3.database), n3 = (t3.bookmarks, t3.auth), a3 = t3.forceReAuth;
      return o2(this, void 0, void 0, function() {
        var e4, t4, o3 = this;
        return i2(this, function(i3) {
          switch (i3.label) {
            case 0:
              return e4 = s2.ConnectionErrorHandler.create({ errorCode: v3, handleSecurityError: function(e5, t5, n4) {
                return o3._handleSecurityError(e5, t5, n4, r3);
              } }), [4, this._connectionPool.acquire({ auth: n3, forceReAuth: a3 }, this._address)];
            case 1:
              return t4 = i3.sent(), n3 ? [4, this._verifyStickyConnection({ auth: n3, connection: t4, address: this._address })] : [3, 3];
            case 2:
              return i3.sent(), [2, t4];
            case 3:
              return [2, new s2.DelegateConnection(t4, e4)];
          }
        });
      });
    }, t2.prototype._handleSecurityError = function(t3, r3, n3, o3) {
      return this._log.warn("Direct driver ".concat(this._id, " will close connection to ").concat(r3, " for database '").concat(o3, "' because of an error ").concat(t3.code, " '").concat(t3.message, "'")), e2.prototype._handleSecurityError.call(this, t3, r3, n3);
    }, t2.prototype._hasProtocolVersion = function(e3) {
      return o2(this, void 0, void 0, function() {
        var t3, r3;
        return i2(this, function(n3) {
          switch (n3.label) {
            case 0:
              return [4, this._createChannelConnection(this._address)];
            case 1:
              return t3 = n3.sent(), r3 = t3.protocol() ? t3.protocol().version : null, [4, t3.close()];
            case 2:
              return n3.sent(), r3 ? [2, e3(r3)] : [2, false];
          }
        });
      });
    }, t2.prototype.supportsMultiDb = function() {
      return o2(this, void 0, void 0, function() {
        return i2(this, function(e3) {
          switch (e3.label) {
            case 0:
              return [4, this._hasProtocolVersion(function(e4) {
                return e4 >= h2;
              })];
            case 1:
              return [2, e3.sent()];
          }
        });
      });
    }, t2.prototype.getNegotiatedProtocolVersion = function() {
      var e3 = this;
      return new Promise(function(t3, r3) {
        e3._hasProtocolVersion(t3).catch(r3);
      });
    }, t2.prototype.supportsTransactionConfig = function() {
      return o2(this, void 0, void 0, function() {
        return i2(this, function(e3) {
          switch (e3.label) {
            case 0:
              return [4, this._hasProtocolVersion(function(e4) {
                return e4 >= f2;
              })];
            case 1:
              return [2, e3.sent()];
          }
        });
      });
    }, t2.prototype.supportsUserImpersonation = function() {
      return o2(this, void 0, void 0, function() {
        return i2(this, function(e3) {
          switch (e3.label) {
            case 0:
              return [4, this._hasProtocolVersion(function(e4) {
                return e4 >= d2;
              })];
            case 1:
              return [2, e3.sent()];
          }
        });
      });
    }, t2.prototype.supportsSessionAuth = function() {
      return o2(this, void 0, void 0, function() {
        return i2(this, function(e3) {
          switch (e3.label) {
            case 0:
              return [4, this._hasProtocolVersion(function(e4) {
                return e4 >= p3;
              })];
            case 1:
              return [2, e3.sent()];
          }
        });
      });
    }, t2.prototype.verifyAuthentication = function(e3) {
      var t3 = e3.auth;
      return o2(this, void 0, void 0, function() {
        var e4 = this;
        return i2(this, function(r3) {
          return [2, this._verifyAuthentication({ auth: t3, getAddress: function() {
            return e4._address;
          } })];
        });
      });
    }, t2.prototype.verifyConnectivityAndGetServerInfo = function() {
      return o2(this, void 0, void 0, function() {
        return i2(this, function(e3) {
          switch (e3.label) {
            case 0:
              return [4, this._verifyConnectivityAndGetServerVersion({ address: this._address })];
            case 1:
              return [2, e3.sent()];
          }
        });
      });
    }, t2;
  }(u2.default);
  t.default = y3;
}, 3555: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.finalize = void 0;
  var n2 = r2(7843);
  t.finalize = function(e2) {
    return n2.operate(function(t2, r3) {
      try {
        t2.subscribe(r3);
      } finally {
        r3.add(e2);
      }
    });
  };
}, 3618: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__awaiter || function(e2, t2, r3, n3) {
    return new (r3 || (r3 = Promise))(function(o3, i3) {
      function a3(e3) {
        try {
          s3(n3.next(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function u3(e3) {
        try {
          s3(n3.throw(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function s3(e3) {
        var t3;
        e3.done ? o3(e3.value) : (t3 = e3.value, t3 instanceof r3 ? t3 : new r3(function(e4) {
          e4(t3);
        })).then(a3, u3);
      }
      s3((n3 = n3.apply(e2, t2 || [])).next());
    });
  }, i2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u3(0), throw: u3(1), return: u3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u3(u4) {
      return function(s3) {
        return function(u5) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; i3 && (i3 = 0, u5[0] && (a3 = 0)), a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & u5[0] ? n3.return : u5[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, u5[1])).done) return o3;
            switch (n3 = 0, o3 && (u5 = [2 & u5[0], o3.value]), u5[0]) {
              case 0:
              case 1:
                o3 = u5;
                break;
              case 4:
                return a3.label++, { value: u5[1], done: false };
              case 5:
                a3.label++, n3 = u5[1], u5 = [0];
                continue;
              case 7:
                u5 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== u5[0] && 2 !== u5[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === u5[0] && (!o3 || u5[1] > o3[0] && u5[1] < o3[3])) {
                  a3.label = u5[1];
                  break;
                }
                if (6 === u5[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = u5;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(u5);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            u5 = t2.call(e2, a3);
          } catch (e3) {
            u5 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & u5[0]) throw u5[1];
          return { value: u5[0] ? u5[1] : void 0, done: true };
        }([u4, s3]);
      };
    }
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.EMPTY_CONNECTION_HOLDER = t.ReadOnlyConnectionHolder = t.ConnectionHolder = void 0;
  var a2 = r2(9691), u2 = r2(6587), s2 = r2(326), c2 = r2(9730), l2 = r2(4883), f2 = function() {
    function e2(e3) {
      var t2 = e3.mode, r3 = e3.database, n3 = void 0 === r3 ? "" : r3, o3 = e3.bookmarks, i3 = e3.connectionProvider, a3 = e3.impersonatedUser, l3 = e3.onDatabaseNameResolved, f3 = e3.getConnectionAcquistionBookmarks, h3 = e3.auth, d3 = e3.log;
      this._mode = null != t2 ? t2 : s2.ACCESS_MODE_WRITE, this._closed = false, this._database = null != n3 ? (0, u2.assertString)(n3, "database") : "", this._bookmarks = null != o3 ? o3 : c2.Bookmarks.empty(), this._connectionProvider = i3, this._impersonatedUser = a3, this._referenceCount = 0, this._connectionPromise = Promise.resolve(null), this._onDatabaseNameResolved = l3, this._auth = h3, this._log = d3, this._logError = this._logError.bind(this), this._getConnectionAcquistionBookmarks = null != f3 ? f3 : function() {
        return Promise.resolve(c2.Bookmarks.empty());
      };
    }
    return e2.prototype.mode = function() {
      return this._mode;
    }, e2.prototype.database = function() {
      return this._database;
    }, e2.prototype.setDatabase = function(e3) {
      this._database = e3;
    }, e2.prototype.bookmarks = function() {
      return this._bookmarks;
    }, e2.prototype.connectionProvider = function() {
      return this._connectionProvider;
    }, e2.prototype.referenceCount = function() {
      return this._referenceCount;
    }, e2.prototype.initializeConnection = function(e3) {
      return 0 !== this._referenceCount || null == this._connectionProvider ? (this._referenceCount++, false) : (this._connectionPromise = this._createConnectionPromise(this._connectionProvider, e3), this._referenceCount++, true);
    }, e2.prototype._createConnectionPromise = function(e3, t2) {
      return o2(this, void 0, void 0, function() {
        var r3, n3, o3;
        return i2(this, function(i3) {
          switch (i3.label) {
            case 0:
              return n3 = (r3 = e3).acquireConnection, o3 = { accessMode: this._mode, database: this._database }, [4, this._getBookmarks()];
            case 1:
              return [4, n3.apply(r3, [(o3.bookmarks = i3.sent(), o3.impersonatedUser = this._impersonatedUser, o3.onDatabaseNameResolved = this._onDatabaseNameResolved, o3.auth = this._auth, o3.homeDb = t2, o3)])];
            case 2:
              return [2, i3.sent()];
          }
        });
      });
    }, e2.prototype._getBookmarks = function() {
      return o2(this, void 0, void 0, function() {
        return i2(this, function(e3) {
          switch (e3.label) {
            case 0:
              return [4, this._getConnectionAcquistionBookmarks()];
            case 1:
              return [2, e3.sent()];
          }
        });
      });
    }, e2.prototype.getConnection = function() {
      return this._connectionPromise;
    }, e2.prototype.releaseConnection = function() {
      return 0 === this._referenceCount ? this._connectionPromise : (this._referenceCount--, 0 === this._referenceCount ? this._releaseConnection() : this._connectionPromise);
    }, e2.prototype.close = function(e3) {
      return this._closed = true, 0 === this._referenceCount ? this._connectionPromise : (this._referenceCount = 0, this._releaseConnection(e3));
    }, e2.prototype.log = function() {
      return this._log;
    }, e2.prototype._releaseConnection = function(e3) {
      return this._connectionPromise = this._connectionPromise.then(function(t2) {
        return null != t2 ? t2.isOpen() && (t2.hasOngoingObservableRequests() || true === e3) ? t2.resetAndFlush().catch(p3).then(function() {
          return t2.release().then(function() {
            return null;
          });
        }) : t2.release().then(function() {
          return null;
        }) : Promise.resolve(null);
      }).catch(this._logError), this._connectionPromise;
    }, e2.prototype._logError = function(e3) {
      return this._log.isWarnEnabled() && this._log.warn("ConnectionHolder got an error while releasing the connection. Error ".concat(e3, ". Stacktrace: ").concat(e3.stack)), null;
    }, e2;
  }();
  t.ConnectionHolder = f2;
  var h2 = function(e2) {
    function t2(t3) {
      var r3 = e2.call(this, { mode: t3.mode(), database: t3.database(), bookmarks: t3.bookmarks(), getConnectionAcquistionBookmarks: t3._getConnectionAcquistionBookmarks, connectionProvider: t3.connectionProvider(), log: t3.log() }) || this;
      return r3._connectionHolder = t3, r3;
    }
    return n2(t2, e2), t2.prototype.initializeConnection = function() {
      return 0 !== this._connectionHolder.referenceCount();
    }, t2.prototype.getConnection = function() {
      return this._connectionHolder.getConnection();
    }, t2.prototype.releaseConnection = function() {
      return this._connectionHolder.getConnection().catch(function() {
        return Promise.resolve(null);
      });
    }, t2.prototype.close = function() {
      return this._connectionHolder.getConnection().catch(function() {
        return Promise.resolve(null);
      });
    }, t2;
  }(f2);
  t.ReadOnlyConnectionHolder = h2, t.default = h2;
  var d2 = new (function(e2) {
    function t2() {
      return e2.call(this, { log: l2.Logger.create({}) }) || this;
    }
    return n2(t2, e2), t2.prototype.mode = function() {
    }, t2.prototype.database = function() {
    }, t2.prototype.initializeConnection = function() {
      return true;
    }, t2.prototype.getConnection = function() {
      return o2(this, void 0, void 0, function() {
        return i2(this, function(e3) {
          switch (e3.label) {
            case 0:
              return [4, Promise.reject((0, a2.newError)("This connection holder does not serve connections"))];
            case 1:
              return [2, e3.sent()];
          }
        });
      });
    }, t2.prototype.releaseConnection = function() {
      return o2(this, void 0, void 0, function() {
        return i2(this, function(e3) {
          switch (e3.label) {
            case 0:
              return [4, Promise.resolve(null)];
            case 1:
              return [2, e3.sent()];
          }
        });
      });
    }, t2.prototype.close = function() {
      return o2(this, void 0, void 0, function() {
        return i2(this, function(e3) {
          switch (e3.label) {
            case 0:
              return [4, Promise.resolve(null)];
            case 1:
              return [2, e3.sent()];
          }
        });
      });
    }, t2;
  }(f2))();
  function p3(e2) {
    return null;
  }
  t.EMPTY_CONNECTION_HOLDER = d2;
}, 3638: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.joinAllInternals = void 0;
  var n2 = r2(6640), o2 = r2(1251), i2 = r2(2706), a2 = r2(983), u2 = r2(2343);
  t.joinAllInternals = function(e2, t2) {
    return i2.pipe(u2.toArray(), a2.mergeMap(function(t3) {
      return e2(t3);
    }), t2 ? o2.mapOneOrManyArgs(t2) : n2.identity);
  };
}, 3659: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.default = "5.28.1";
}, 3692: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.asap = t.asapScheduler = void 0;
  var n2 = r2(5006), o2 = r2(827);
  t.asapScheduler = new o2.AsapScheduler(n2.AsapAction), t.asap = t.asapScheduler;
}, 3862: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.animationFrame = t.animationFrameScheduler = void 0;
  var n2 = r2(2628), o2 = r2(3229);
  t.animationFrameScheduler = new o2.AnimationFrameScheduler(n2.AnimationFrameAction), t.animationFrame = t.animationFrameScheduler;
}, 3865: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.concat = void 0;
  var n2 = r2(8158), o2 = r2(1107), i2 = r2(4917);
  t.concat = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    return n2.concatAll()(i2.from(e2, o2.popScheduler(e2)));
  };
}, 3879: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.switchMap = void 0;
  var n2 = r2(9445), o2 = r2(7843), i2 = r2(3111);
  t.switchMap = function(e2, t2) {
    return o2.operate(function(r3, o3) {
      var a2 = null, u2 = 0, s2 = false, c2 = function() {
        return s2 && !a2 && o3.complete();
      };
      r3.subscribe(i2.createOperatorSubscriber(o3, function(r4) {
        null == a2 || a2.unsubscribe();
        var s3 = 0, l2 = u2++;
        n2.innerFrom(e2(r4, l2)).subscribe(a2 = i2.createOperatorSubscriber(o3, function(e3) {
          return o3.next(t2 ? t2(r4, e3, l2, s3++) : e3);
        }, function() {
          a2 = null, c2();
        }));
      }, function() {
        s2 = true, c2();
      }));
    });
  };
}, 3951: function(e, t, r2) {
  var n2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.ClientCertificatesLoader = t.HostNameResolver = t.Channel = void 0;
  var o2 = n2(r2(6245)), i2 = n2(r2(2199)), a2 = n2(r2(614));
  t.Channel = o2.default, t.HostNameResolver = i2.default, t.ClientCertificatesLoader = a2.default;
}, 3964: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.tap = void 0;
  var n2 = r2(1018), o2 = r2(7843), i2 = r2(3111), a2 = r2(6640);
  t.tap = function(e2, t2, r3) {
    var u2 = n2.isFunction(e2) || t2 || r3 ? { next: e2, error: t2, complete: r3 } : e2;
    return u2 ? o2.operate(function(e3, t3) {
      var r4;
      null === (r4 = u2.subscribe) || void 0 === r4 || r4.call(u2);
      var n3 = true;
      e3.subscribe(i2.createOperatorSubscriber(t3, function(e4) {
        var r5;
        null === (r5 = u2.next) || void 0 === r5 || r5.call(u2, e4), t3.next(e4);
      }, function() {
        var e4;
        n3 = false, null === (e4 = u2.complete) || void 0 === e4 || e4.call(u2), t3.complete();
      }, function(e4) {
        var r5;
        n3 = false, null === (r5 = u2.error) || void 0 === r5 || r5.call(u2, e4), t3.error(e4);
      }, function() {
        var e4, t4;
        n3 && (null === (e4 = u2.unsubscribe) || void 0 === e4 || e4.call(u2)), null === (t4 = u2.finalize) || void 0 === t4 || t4.call(u2);
      }));
    }) : a2.identity;
  };
}, 3982: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.skip = void 0;
  var n2 = r2(783);
  t.skip = function(e2) {
    return n2.filter(function(t2, r3) {
      return e2 <= r3;
    });
  };
}, 4027: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.stringify = void 0;
  var n2 = r2(93);
  t.stringify = function(e2, t2) {
    return JSON.stringify(e2, function(e3, r3) {
      return (0, n2.isBrokenObject)(r3) ? { __isBrokenObject__: true, __reason__: (0, n2.getBrokenObjectReason)(r3) } : "bigint" == typeof r3 ? "".concat(r3, "n") : true !== (null == t2 ? void 0 : t2.sortedElements) || "object" != typeof r3 || Array.isArray(r3) ? true !== (null == t2 ? void 0 : t2.useCustomToString) || "object" != typeof r3 || Array.isArray(r3) || "function" != typeof r3.toString || r3.toString === Object.prototype.toString ? r3 : null == r3 ? void 0 : r3.toString() : Object.keys(r3).sort().reduce(function(e4, t3) {
        return e4[t3] = r3[t3], e4;
      }, {});
    });
  };
}, 4092: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.timer = void 0;
  var n2 = r2(4662), o2 = r2(7961), i2 = r2(8613), a2 = r2(1074);
  t.timer = function(e2, t2, r3) {
    void 0 === e2 && (e2 = 0), void 0 === r3 && (r3 = o2.async);
    var u2 = -1;
    return null != t2 && (i2.isScheduler(t2) ? r3 = t2 : u2 = t2), new n2.Observable(function(t3) {
      var n3 = a2.isValidDate(e2) ? +e2 - r3.now() : e2;
      n3 < 0 && (n3 = 0);
      var o3 = 0;
      return r3.schedule(function() {
        t3.closed || (t3.next(o3++), 0 <= u2 ? this.schedule(void 0, u2) : t3.complete());
      }, n3);
    });
  };
}, 4132: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true });
  var o2 = function(e2) {
    function t2(t3) {
      var r3 = e2.call(this) || this;
      return r3._connection = t3, r3;
    }
    return n2(t2, e2), t2.prototype.acquireConnection = function(e3) {
      var t3 = void 0 === e3 ? {} : e3, r3 = (t3.accessMode, t3.database, t3.bookmarks, this._connection);
      return this._connection = null, Promise.resolve(r3);
    }, t2;
  }(r2(9305).ConnectionProvider);
  t.default = o2;
}, 4151: function(e, t, r2) {
  var n2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var o2 = n2(r2(9018)), i2 = (r2(9305), function() {
    function e2(e3) {
      this._routingContext = e3;
    }
    return e2.prototype.lookupRoutingTableOnRouter = function(e3, t2, r3, n3) {
      var i3 = this;
      return e3._acquireConnection(function(a2) {
        return i3._requestRawRoutingTable(a2, e3, t2, r3, n3).then(function(e4) {
          return e4.isNull ? null : o2.default.fromRawRoutingTable(t2, r3, e4);
        });
      });
    }, e2.prototype._requestRawRoutingTable = function(e3, t2, r3, n3, o3) {
      var i3 = this;
      return new Promise(function(n4, a2) {
        e3.protocol().requestRoutingInformation({ routingContext: i3._routingContext, databaseName: r3, impersonatedUser: o3, sessionContext: { bookmarks: t2._lastBookmarks, mode: t2._mode, database: t2._database, afterComplete: t2._onComplete }, onCompleted: n4, onError: a2 });
      });
    }, e2;
  }());
  t.default = i2;
}, 4209: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.iif = void 0;
  var n2 = r2(9353);
  t.iif = function(e2, t2, r3) {
    return n2.defer(function() {
      return e2() ? t2 : r3;
    });
  };
}, 4212: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true }), t.QueueAction = void 0;
  var o2 = function(e2) {
    function t2(t3, r3) {
      var n3 = e2.call(this, t3, r3) || this;
      return n3.scheduler = t3, n3.work = r3, n3;
    }
    return n2(t2, e2), t2.prototype.schedule = function(t3, r3) {
      return void 0 === r3 && (r3 = 0), r3 > 0 ? e2.prototype.schedule.call(this, t3, r3) : (this.delay = r3, this.state = t3, this.scheduler.flush(this), this);
    }, t2.prototype.execute = function(t3, r3) {
      return r3 > 0 || this.closed ? e2.prototype.execute.call(this, t3, r3) : this._execute(t3, r3);
    }, t2.prototype.requestAsyncId = function(t3, r3, n3) {
      return void 0 === n3 && (n3 = 0), null != n3 && n3 > 0 || null == n3 && this.delay > 0 ? e2.prototype.requestAsyncId.call(this, t3, r3, n3) : (t3.flush(this), 0);
    }, t2;
  }(r2(5267).AsyncAction);
  t.QueueAction = o2;
}, 4271: function(e, t, r2) {
  var n2 = this && this.__awaiter || function(e2, t2, r3, n3) {
    return new (r3 || (r3 = Promise))(function(o3, i3) {
      function a3(e3) {
        try {
          s2(n3.next(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function u2(e3) {
        try {
          s2(n3.throw(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function s2(e3) {
        var t3;
        e3.done ? o3(e3.value) : (t3 = e3.value, t3 instanceof r3 ? t3 : new r3(function(e4) {
          e4(t3);
        })).then(a3, u2);
      }
      s2((n3 = n3.apply(e2, t2 || [])).next());
    });
  }, o2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u2(0), throw: u2(1), return: u2(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u2(u3) {
      return function(s2) {
        return function(u4) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; i3 && (i3 = 0, u4[0] && (a3 = 0)), a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & u4[0] ? n3.return : u4[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, u4[1])).done) return o3;
            switch (n3 = 0, o3 && (u4 = [2 & u4[0], o3.value]), u4[0]) {
              case 0:
              case 1:
                o3 = u4;
                break;
              case 4:
                return a3.label++, { value: u4[1], done: false };
              case 5:
                a3.label++, n3 = u4[1], u4 = [0];
                continue;
              case 7:
                u4 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== u4[0] && 2 !== u4[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === u4[0] && (!o3 || u4[1] > o3[0] && u4[1] < o3[3])) {
                  a3.label = u4[1];
                  break;
                }
                if (6 === u4[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = u4;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(u4);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            u4 = t2.call(e2, a3);
          } catch (e3) {
            u4 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & u4[0]) throw u4[1];
          return { value: u4[0] ? u4[1] : void 0, done: true };
        }([u3, s2]);
      };
    }
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = r2(7452), a2 = function() {
    function e2(e3) {
      var t2 = e3.clientCertificateProvider, r3 = e3.loader;
      this._clientCertificateProvider = t2, this._loader = r3 || i2.ClientCertificatesLoader, this._clientCertificate = null;
    }
    return e2.prototype.getClientCertificate = function() {
      return n2(this, void 0, void 0, function() {
        var e3, t2, r3 = this;
        return o2(this, function(n3) {
          switch (n3.label) {
            case 0:
              return (e3 = null != this._clientCertificateProvider) ? (t2 = null == this._clientCertificate) ? [3, 2] : [4, this._clientCertificateProvider.hasUpdate()] : [3, 3];
            case 1:
              t2 = n3.sent(), n3.label = 2;
            case 2:
              e3 = t2, n3.label = 3;
            case 3:
              return e3 && (this._clientCertificate = Promise.resolve(this._clientCertificateProvider.getClientCertificate()).then(this._loader.load).then(function(e4) {
                return r3._clientCertificate = e4, r3._clientCertificate;
              }).catch(function(e4) {
                throw r3._clientCertificate = null, e4;
              })), [2, this._clientCertificate];
          }
        });
      });
    }, e2;
  }();
  t.default = a2;
}, 4311: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true });
  var r2 = function() {
    function e2() {
    }
    return e2.prototype.selectReader = function(e3) {
      throw new Error("Abstract function");
    }, e2.prototype.selectWriter = function(e3) {
      throw new Error("Abstract function");
    }, e2;
  }();
  t.default = r2;
}, 4325: function(e, t, r2) {
  var n2 = this && this.__assign || function() {
    return n2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, n2.apply(this, arguments);
  }, o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = o2(r2(2204));
  t.default = n2({}, i2.default);
}, 4360: (e) => {
  e.exports = function(e2) {
    for (var t = [], r2 = 0; r2 < e2.length; r2++) "eof" !== e2[r2].type && t.push(e2[r2].data);
    return t.join("");
  };
}, 4408: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.mergeScan = void 0;
  var n2 = r2(7843), o2 = r2(1983);
  t.mergeScan = function(e2, t2, r3) {
    return void 0 === r3 && (r3 = 1 / 0), n2.operate(function(n3, i2) {
      var a2 = t2;
      return o2.mergeInternals(n3, i2, function(t3, r4) {
        return e2(a2, t3, r4);
      }, r3, function(e3) {
        a2 = e3;
      }, false, void 0, function() {
        return a2 = null;
      });
    });
  };
}, 4440: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, o2 = this && this.__spreadArray || function(e2, t2) {
    for (var r3 = 0, n3 = t2.length, o3 = e2.length; r3 < n3; r3++, o3++) e2[o3] = t2[r3];
    return e2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.race = void 0;
  var i2 = r2(8535), a2 = r2(5600);
  t.race = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    return a2.raceWith.apply(void 0, o2([], n2(i2.argsOrArgArray(e2))));
  };
}, 4455: function(e, t, r2) {
  var n2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.LeastConnectedLoadBalancingStrategy = t.LoadBalancingStrategy = void 0;
  var o2 = n2(r2(4311));
  t.LoadBalancingStrategy = o2.default;
  var i2 = n2(r2(2533));
  t.LeastConnectedLoadBalancingStrategy = i2.default, t.default = i2.default;
}, 4461: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.debounce = void 0;
  var n2 = r2(7843), o2 = r2(1342), i2 = r2(3111), a2 = r2(9445);
  t.debounce = function(e2) {
    return n2.operate(function(t2, r3) {
      var n3 = false, u2 = null, s2 = null, c2 = function() {
        if (null == s2 || s2.unsubscribe(), s2 = null, n3) {
          n3 = false;
          var e3 = u2;
          u2 = null, r3.next(e3);
        }
      };
      t2.subscribe(i2.createOperatorSubscriber(r3, function(t3) {
        null == s2 || s2.unsubscribe(), n3 = true, u2 = t3, s2 = i2.createOperatorSubscriber(r3, c2, o2.noop), a2.innerFrom(e2(t3)).subscribe(s2);
      }, function() {
        c2(), r3.complete();
      }, void 0, function() {
        u2 = s2 = null;
      }));
    });
  };
}, 4520: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.elementAt = void 0;
  var n2 = r2(7057), o2 = r2(783), i2 = r2(4869), a2 = r2(378), u2 = r2(846);
  t.elementAt = function(e2, t2) {
    if (e2 < 0) throw new n2.ArgumentOutOfRangeError();
    var r3 = arguments.length >= 2;
    return function(s2) {
      return s2.pipe(o2.filter(function(t3, r4) {
        return r4 === e2;
      }), u2.take(1), r3 ? a2.defaultIfEmpty(t2) : i2.throwIfEmpty(function() {
        return new n2.ArgumentOutOfRangeError();
      }));
    };
  };
}, 4531: function(e, t) {
  var r2 = this && this.__awaiter || function(e2, t2, r3, n3) {
    return new (r3 || (r3 = Promise))(function(o3, i2) {
      function a2(e3) {
        try {
          s2(n3.next(e3));
        } catch (e4) {
          i2(e4);
        }
      }
      function u2(e3) {
        try {
          s2(n3.throw(e3));
        } catch (e4) {
          i2(e4);
        }
      }
      function s2(e3) {
        var t3;
        e3.done ? o3(e3.value) : (t3 = e3.value, t3 instanceof r3 ? t3 : new r3(function(e4) {
          e4(t3);
        })).then(a2, u2);
      }
      s2((n3 = n3.apply(e2, t2 || [])).next());
    });
  }, n2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i2, a2 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i2 = { next: u2(0), throw: u2(1), return: u2(2) }, "function" == typeof Symbol && (i2[Symbol.iterator] = function() {
      return this;
    }), i2;
    function u2(u3) {
      return function(s2) {
        return function(u4) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; i2 && (i2 = 0, u4[0] && (a2 = 0)), a2; ) try {
            if (r3 = 1, n3 && (o3 = 2 & u4[0] ? n3.return : u4[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, u4[1])).done) return o3;
            switch (n3 = 0, o3 && (u4 = [2 & u4[0], o3.value]), u4[0]) {
              case 0:
              case 1:
                o3 = u4;
                break;
              case 4:
                return a2.label++, { value: u4[1], done: false };
              case 5:
                a2.label++, n3 = u4[1], u4 = [0];
                continue;
              case 7:
                u4 = a2.ops.pop(), a2.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a2.trys).length > 0 && o3[o3.length - 1]) || 6 !== u4[0] && 2 !== u4[0])) {
                  a2 = 0;
                  continue;
                }
                if (3 === u4[0] && (!o3 || u4[1] > o3[0] && u4[1] < o3[3])) {
                  a2.label = u4[1];
                  break;
                }
                if (6 === u4[0] && a2.label < o3[1]) {
                  a2.label = o3[1], o3 = u4;
                  break;
                }
                if (o3 && a2.label < o3[2]) {
                  a2.label = o3[2], a2.ops.push(u4);
                  break;
                }
                o3[2] && a2.ops.pop(), a2.trys.pop();
                continue;
            }
            u4 = t2.call(e2, a2);
          } catch (e3) {
            u4 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & u4[0]) throw u4[1];
          return { value: u4[0] ? u4[1] : void 0, done: true };
        }([u3, s2]);
      };
    }
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var o2 = function() {
    function e2(e3) {
      var t2 = e3.connectionLivenessCheckTimeout;
      this._connectionLivenessCheckTimeout = t2;
    }
    return e2.prototype.check = function(e3) {
      return r2(this, void 0, void 0, function() {
        var t2;
        return n2(this, function(r3) {
          switch (r3.label) {
            case 0:
              return this._isCheckDisabled || this._isNewlyCreatedConnection(e3) ? [2, true] : (t2 = Date.now() - e3.idleTimestamp, 0 === this._connectionLivenessCheckTimeout || t2 > this._connectionLivenessCheckTimeout ? [4, e3.resetAndFlush().then(function() {
                return true;
              })] : [3, 2]);
            case 1:
              return [2, r3.sent()];
            case 2:
              return [2, true];
          }
        });
      });
    }, Object.defineProperty(e2.prototype, "_isCheckDisabled", { get: function() {
      return null == this._connectionLivenessCheckTimeout || this._connectionLivenessCheckTimeout < 0;
    }, enumerable: false, configurable: true }), e2.prototype._isNewlyCreatedConnection = function(e3) {
      return null == e3.authToken;
    }, e2;
  }();
  t.default = o2;
}, 4569: function(e, t, r2) {
  var n2, o2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), i2 = this && this.__assign || function() {
    return i2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, i2.apply(this, arguments);
  }, a2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var u2 = function(e2) {
    function t2(t3) {
      var r3 = t3.connectionHolder, o3 = t3.onClose, i3 = t3.onBookmarks, a3 = t3.onConnection, u3 = t3.reactive, s2 = t3.fetchSize, c2 = t3.impersonatedUser, l2 = t3.highRecordWatermark, f2 = t3.lowRecordWatermark, h2 = t3.notificationFilter, d2 = t3.apiTelemetryConfig, p3 = t3.onDbCallback, v3 = e2.call(this, { connectionHolder: r3, onClose: o3, onBookmarks: i3, onConnection: a3, reactive: u3, fetchSize: s2, impersonatedUser: c2, highRecordWatermark: l2, lowRecordWatermark: f2, notificationFilter: h2, apiTelemetryConfig: d2 }) || this;
      return v3[n2] = "TransactionPromise", v3._onDbCallback = p3, v3;
    }
    return o2(t2, e2), t2.prototype.then = function(e3, t3) {
      return this._getOrCreateBeginPromise().then(e3, t3);
    }, t2.prototype.catch = function(e3) {
      return this._getOrCreateBeginPromise().catch(e3);
    }, t2.prototype.finally = function(e3) {
      return this._getOrCreateBeginPromise().finally(e3);
    }, t2.prototype._getOrCreateBeginPromise = function() {
      var e3 = this;
      return null == this._beginPromise && (this._beginPromise = new Promise(function(t3, r3) {
        e3._resolve = t3, e3._reject = r3, null != e3._beginError && r3(e3._beginError), null != e3._beginMetadata && t3(e3._toTransaction());
      })), this._beginPromise;
    }, t2.prototype._toTransaction = function() {
      return i2(i2({}, this), { run: e2.prototype.run.bind(this), commit: e2.prototype.commit.bind(this), rollback: e2.prototype.rollback.bind(this), close: e2.prototype.close.bind(this), isOpen: e2.prototype.isOpen.bind(this), _begin: this._begin.bind(this) });
    }, t2.prototype._begin = function(t3, r3) {
      return e2.prototype._begin.call(this, t3, r3, { onError: this._onBeginError.bind(this), onComplete: this._onBeginMetadata.bind(this), onDB: this._onDbCallback });
    }, t2.prototype._onBeginError = function(e3) {
      this._beginError = e3, null != this._reject && this._reject(e3);
    }, t2.prototype._onBeginMetadata = function(e3) {
      this._beginMetadata = null != e3 ? e3 : {}, null != this._resolve && this._resolve(this._toTransaction());
    }, t2;
  }(a2(r2(9473)).default);
  n2 = Symbol.toStringTag, t.default = u2;
}, 4596: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = o2(r2(2539)), a2 = o2(r2(7021)), u2 = r2(9014), s2 = r2(9305), c2 = r2(397), l2 = o2(r2(7521)), f2 = o2(r2(3321)), h2 = s2.internal.constants.BOLT_PROTOCOL_V4_1, d2 = function(e2) {
    function t2(t3, r3, n3, o3, i3, a3, u3) {
      void 0 === o3 && (o3 = function() {
        return null;
      });
      var s3 = e2.call(this, t3, r3, n3, o3, i3, a3) || this;
      return s3._serversideRouting = u3, s3;
    }
    return n2(t2, e2), Object.defineProperty(t2.prototype, "version", { get: function() {
      return h2;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "transformer", { get: function() {
      var e3 = this;
      return void 0 === this._transformer && (this._transformer = new f2.default(Object.values(l2.default).map(function(t3) {
        return t3(e3._config, e3._log);
      }))), this._transformer;
    }, enumerable: false, configurable: true }), t2.prototype.initialize = function(e3) {
      var t3 = this, r3 = void 0 === e3 ? {} : e3, n3 = r3.userAgent, o3 = (r3.boltAgent, r3.authToken), i3 = r3.notificationFilter, s3 = r3.onError, l3 = r3.onComplete, f3 = new u2.LoginObserver({ onError: function(e4) {
        return t3._onLoginError(e4, s3);
      }, onCompleted: function(e4) {
        return t3._onLoginCompleted(e4, o3, l3);
      } });
      return (0, c2.assertNotificationFilterIsEmpty)(i3, this._onProtocolError, f3), this.write(a2.default.hello(n3, o3, this._serversideRouting), f3, true), f3;
    }, t2;
  }(i2.default);
  t.default = d2;
}, 4662: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.Observable = void 0;
  var n2 = r2(5), o2 = r2(8014), i2 = r2(3327), a2 = r2(2706), u2 = r2(3413), s2 = r2(1018), c2 = r2(9223), l2 = function() {
    function e2(e3) {
      e3 && (this._subscribe = e3);
    }
    return e2.prototype.lift = function(t2) {
      var r3 = new e2();
      return r3.source = this, r3.operator = t2, r3;
    }, e2.prototype.subscribe = function(e3, t2, r3) {
      var i3, a3 = this, u3 = (i3 = e3) && i3 instanceof n2.Subscriber || function(e4) {
        return e4 && s2.isFunction(e4.next) && s2.isFunction(e4.error) && s2.isFunction(e4.complete);
      }(i3) && o2.isSubscription(i3) ? e3 : new n2.SafeSubscriber(e3, t2, r3);
      return c2.errorContext(function() {
        var e4 = a3, t3 = e4.operator, r4 = e4.source;
        u3.add(t3 ? t3.call(u3, r4) : r4 ? a3._subscribe(u3) : a3._trySubscribe(u3));
      }), u3;
    }, e2.prototype._trySubscribe = function(e3) {
      try {
        return this._subscribe(e3);
      } catch (t2) {
        e3.error(t2);
      }
    }, e2.prototype.forEach = function(e3, t2) {
      var r3 = this;
      return new (t2 = f2(t2))(function(t3, o3) {
        var i3 = new n2.SafeSubscriber({ next: function(t4) {
          try {
            e3(t4);
          } catch (e4) {
            o3(e4), i3.unsubscribe();
          }
        }, error: o3, complete: t3 });
        r3.subscribe(i3);
      });
    }, e2.prototype._subscribe = function(e3) {
      var t2;
      return null === (t2 = this.source) || void 0 === t2 ? void 0 : t2.subscribe(e3);
    }, e2.prototype[i2.observable] = function() {
      return this;
    }, e2.prototype.pipe = function() {
      for (var e3 = [], t2 = 0; t2 < arguments.length; t2++) e3[t2] = arguments[t2];
      return a2.pipeFromArray(e3)(this);
    }, e2.prototype.toPromise = function(e3) {
      var t2 = this;
      return new (e3 = f2(e3))(function(e4, r3) {
        var n3;
        t2.subscribe(function(e5) {
          return n3 = e5;
        }, function(e5) {
          return r3(e5);
        }, function() {
          return e4(n3);
        });
      });
    }, e2.create = function(t2) {
      return new e2(t2);
    }, e2;
  }();
  function f2(e2) {
    var t2;
    return null !== (t2 = null != e2 ? e2 : u2.config.Promise) && void 0 !== t2 ? t2 : Promise;
  }
  t.Observable = l2;
}, 4671: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true }), t.Action = void 0;
  var o2 = function(e2) {
    function t2(t3, r3) {
      return e2.call(this) || this;
    }
    return n2(t2, e2), t2.prototype.schedule = function(e3, t3) {
      return void 0 === t3 && (t3 = 0), this;
    }, t2;
  }(r2(8014).Subscription);
  t.Action = o2;
}, 4704: (e) => {
  e.exports = ["precision", "highp", "mediump", "lowp", "attribute", "const", "uniform", "varying", "break", "continue", "do", "for", "while", "if", "else", "in", "out", "inout", "float", "int", "uint", "void", "bool", "true", "false", "discard", "return", "mat2", "mat3", "mat4", "vec2", "vec3", "vec4", "ivec2", "ivec3", "ivec4", "bvec2", "bvec3", "bvec4", "sampler1D", "sampler2D", "sampler3D", "samplerCube", "sampler1DShadow", "sampler2DShadow", "struct", "asm", "class", "union", "enum", "typedef", "template", "this", "packed", "goto", "switch", "default", "inline", "noinline", "volatile", "public", "static", "extern", "external", "interface", "long", "short", "double", "half", "fixed", "unsigned", "input", "output", "hvec2", "hvec3", "hvec4", "dvec2", "dvec3", "dvec4", "fvec2", "fvec3", "fvec4", "sampler2DRect", "sampler3DRect", "sampler2DRectShadow", "sizeof", "cast", "namespace", "using"];
}, 4721: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.skipWhile = void 0;
  var n2 = r2(7843), o2 = r2(3111);
  t.skipWhile = function(e2) {
    return n2.operate(function(t2, r3) {
      var n3 = false, i2 = 0;
      t2.subscribe(o2.createOperatorSubscriber(r3, function(t3) {
        return (n3 || (n3 = !e2(t3, i2++))) && r3.next(t3);
      }));
    });
  };
}, 4746: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.performanceTimestampProvider = void 0, t.performanceTimestampProvider = { now: function() {
    return (t.performanceTimestampProvider.delegate || performance).now();
  }, delegate: void 0 };
}, 4753: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.exhaustMap = void 0;
  var n2 = r2(5471), o2 = r2(9445), i2 = r2(7843), a2 = r2(3111);
  t.exhaustMap = function e2(t2, r3) {
    return r3 ? function(i3) {
      return i3.pipe(e2(function(e3, i4) {
        return o2.innerFrom(t2(e3, i4)).pipe(n2.map(function(t3, n3) {
          return r3(e3, t3, i4, n3);
        }));
      }));
    } : i2.operate(function(e3, r4) {
      var n3 = 0, i3 = null, u2 = false;
      e3.subscribe(a2.createOperatorSubscriber(r4, function(e4) {
        i3 || (i3 = a2.createOperatorSubscriber(r4, void 0, function() {
          i3 = null, u2 && r4.complete();
        }), o2.innerFrom(t2(e4, n3++)).subscribe(i3));
      }, function() {
        u2 = true, !i3 && r4.complete();
      }));
    });
  };
}, 4780: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.takeUntil = void 0;
  var n2 = r2(7843), o2 = r2(3111), i2 = r2(9445), a2 = r2(1342);
  t.takeUntil = function(e2) {
    return n2.operate(function(t2, r3) {
      i2.innerFrom(e2).subscribe(o2.createOperatorSubscriber(r3, function() {
        return r3.complete();
      }, a2.noop)), !r3.closed && t2.subscribe(r3);
    });
  };
}, 4820: function(e, t, r2) {
  var n2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u3(0), throw: u3(1), return: u3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u3(u4) {
      return function(s2) {
        return function(u5) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; i3 && (i3 = 0, u5[0] && (a3 = 0)), a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & u5[0] ? n3.return : u5[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, u5[1])).done) return o3;
            switch (n3 = 0, o3 && (u5 = [2 & u5[0], o3.value]), u5[0]) {
              case 0:
              case 1:
                o3 = u5;
                break;
              case 4:
                return a3.label++, { value: u5[1], done: false };
              case 5:
                a3.label++, n3 = u5[1], u5 = [0];
                continue;
              case 7:
                u5 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== u5[0] && 2 !== u5[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === u5[0] && (!o3 || u5[1] > o3[0] && u5[1] < o3[3])) {
                  a3.label = u5[1];
                  break;
                }
                if (6 === u5[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = u5;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(u5);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            u5 = t2.call(e2, a3);
          } catch (e3) {
            u5 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & u5[0]) throw u5[1];
          return { value: u5[0] ? u5[1] : void 0, done: true };
        }([u4, s2]);
      };
    }
  }, o2 = this && this.__values || function(e2) {
    var t2 = "function" == typeof Symbol && Symbol.iterator, r3 = t2 && e2[t2], n3 = 0;
    if (r3) return r3.call(e2);
    if (e2 && "number" == typeof e2.length) return { next: function() {
      return e2 && n3 >= e2.length && (e2 = void 0), { value: e2 && e2[n3++], done: !e2 };
    } };
    throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }, i2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var a2 = r2(9691), u2 = function() {
    function e2(e3, t2, r3) {
      this.keys = e3, this.length = e3.length, this._fields = t2, this._fieldLookup = null != r3 ? r3 : function(e4) {
        var t3 = {};
        return e4.forEach(function(e5, r4) {
          t3[e5] = r4;
        }), t3;
      }(e3);
    }
    return e2.prototype.forEach = function(e3) {
      var t2, r3;
      try {
        for (var n3 = o2(this.entries()), a3 = n3.next(); !a3.done; a3 = n3.next()) {
          var u3 = i2(a3.value, 2), s2 = u3[0];
          e3(u3[1], s2, this);
        }
      } catch (e4) {
        t2 = { error: e4 };
      } finally {
        try {
          a3 && !a3.done && (r3 = n3.return) && r3.call(n3);
        } finally {
          if (t2) throw t2.error;
        }
      }
    }, e2.prototype.map = function(e3) {
      var t2, r3, n3 = [];
      try {
        for (var a3 = o2(this.entries()), u3 = a3.next(); !u3.done; u3 = a3.next()) {
          var s2 = i2(u3.value, 2), c2 = s2[0], l2 = s2[1];
          n3.push(e3(l2, c2, this));
        }
      } catch (e4) {
        t2 = { error: e4 };
      } finally {
        try {
          u3 && !u3.done && (r3 = a3.return) && r3.call(a3);
        } finally {
          if (t2) throw t2.error;
        }
      }
      return n3;
    }, e2.prototype.entries = function() {
      var e3;
      return n2(this, function(t2) {
        switch (t2.label) {
          case 0:
            e3 = 0, t2.label = 1;
          case 1:
            return e3 < this.keys.length ? [4, [this.keys[e3], this._fields[e3]]] : [3, 4];
          case 2:
            t2.sent(), t2.label = 3;
          case 3:
            return e3++, [3, 1];
          case 4:
            return [2];
        }
      });
    }, e2.prototype.values = function() {
      var e3;
      return n2(this, function(t2) {
        switch (t2.label) {
          case 0:
            e3 = 0, t2.label = 1;
          case 1:
            return e3 < this.keys.length ? [4, this._fields[e3]] : [3, 4];
          case 2:
            t2.sent(), t2.label = 3;
          case 3:
            return e3++, [3, 1];
          case 4:
            return [2];
        }
      });
    }, e2.prototype[Symbol.iterator] = function() {
      var e3;
      return n2(this, function(t2) {
        switch (t2.label) {
          case 0:
            e3 = 0, t2.label = 1;
          case 1:
            return e3 < this.keys.length ? [4, this._fields[e3]] : [3, 4];
          case 2:
            t2.sent(), t2.label = 3;
          case 3:
            return e3++, [3, 1];
          case 4:
            return [2];
        }
      });
    }, e2.prototype.toObject = function() {
      var e3, t2, r3 = {};
      try {
        for (var n3 = o2(this.entries()), a3 = n3.next(); !a3.done; a3 = n3.next()) {
          var u3 = i2(a3.value, 2), s2 = u3[0], c2 = u3[1];
          r3[s2] = c2;
        }
      } catch (t3) {
        e3 = { error: t3 };
      } finally {
        try {
          a3 && !a3.done && (t2 = n3.return) && t2.call(n3);
        } finally {
          if (e3) throw e3.error;
        }
      }
      return r3;
    }, e2.prototype.get = function(e3) {
      var t2;
      if ("number" != typeof e3) {
        if (void 0 === (t2 = this._fieldLookup[e3])) throw (0, a2.newError)("This record has no field with key '".concat(e3.toString(), "', available keys are: [") + this.keys.toString() + "].");
      } else t2 = e3;
      if (t2 > this._fields.length - 1 || t2 < 0) throw (0, a2.newError)("This record has no field with index '" + t2.toString() + "'. Remember that indexes start at `0`, and make sure your query returns records in the shape you meant it to.");
      return this._fields[t2];
    }, e2.prototype.has = function(e3) {
      return "number" == typeof e3 ? e3 >= 0 && e3 < this._fields.length : void 0 !== this._fieldLookup[e3];
    }, e2;
  }();
  t.default = u2;
}, 4862: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.timeoutWith = void 0;
  var n2 = r2(7961), o2 = r2(1074), i2 = r2(1554);
  t.timeoutWith = function(e2, t2, r3) {
    var a2, u2, s2;
    if (r3 = null != r3 ? r3 : n2.async, o2.isValidDate(e2) ? a2 = e2 : "number" == typeof e2 && (u2 = e2), !t2) throw new TypeError("No observable provided to switch to");
    if (s2 = function() {
      return t2;
    }, null == a2 && null == u2) throw new TypeError("No timeout provided.");
    return i2.timeout({ first: a2, each: u2, scheduler: r3, with: s2 });
  };
}, 4869: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.throwIfEmpty = void 0;
  var n2 = r2(2823), o2 = r2(7843), i2 = r2(3111);
  function a2() {
    return new n2.EmptyError();
  }
  t.throwIfEmpty = function(e2) {
    return void 0 === e2 && (e2 = a2), o2.operate(function(t2, r3) {
      var n3 = false;
      t2.subscribe(i2.createOperatorSubscriber(r3, function(e3) {
        n3 = true, r3.next(e3);
      }, function() {
        return n3 ? r3.complete() : r3.error(e2());
      }));
    });
  };
}, 4883: function(e, t, r2) {
  var n2, o2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true }), t.Logger = void 0;
  var i2 = r2(9691), a2 = "error", u2 = "warn", s2 = "info", c2 = "debug", l2 = s2, f2 = ((n2 = {})[a2] = 0, n2[u2] = 1, n2[s2] = 2, n2[c2] = 3, n2), h2 = function() {
    function e2(e3, t2) {
      this._level = e3, this._loggerFunction = t2;
    }
    return e2.create = function(t2) {
      if (null != (null == t2 ? void 0 : t2.logging)) {
        var r3 = t2.logging, n3 = function(e3) {
          if (null != (null == e3 ? void 0 : e3.level)) {
            var t3 = e3.level, r4 = f2[t3];
            if (null == r4 && 0 !== r4) throw (0, i2.newError)("Illegal logging level: ".concat(t3, ". Supported levels are: ").concat(Object.keys(f2).toString()));
            return t3;
          }
          return l2;
        }(r3), o3 = function(e3) {
          var t3, r4;
          if (null != (null == e3 ? void 0 : e3.logger)) {
            var n4 = e3.logger;
            if (null != n4 && "function" == typeof n4) return n4;
          }
          throw (0, i2.newError)("Illegal logger function: ".concat(null !== (r4 = null === (t3 = null == e3 ? void 0 : e3.logger) || void 0 === t3 ? void 0 : t3.toString()) && void 0 !== r4 ? r4 : "undefined"));
        }(r3);
        return new e2(n3, o3);
      }
      return this.noOp();
    }, e2.noOp = function() {
      return d2;
    }, e2.prototype.isErrorEnabled = function() {
      return p3(this._level, a2);
    }, e2.prototype.error = function(e3) {
      this.isErrorEnabled() && this._loggerFunction(a2, e3);
    }, e2.prototype.isWarnEnabled = function() {
      return p3(this._level, u2);
    }, e2.prototype.warn = function(e3) {
      this.isWarnEnabled() && this._loggerFunction(u2, e3);
    }, e2.prototype.isInfoEnabled = function() {
      return p3(this._level, s2);
    }, e2.prototype.info = function(e3) {
      this.isInfoEnabled() && this._loggerFunction(s2, e3);
    }, e2.prototype.isDebugEnabled = function() {
      return p3(this._level, c2);
    }, e2.prototype.debug = function(e3) {
      this.isDebugEnabled() && this._loggerFunction(c2, e3);
    }, e2;
  }();
  t.Logger = h2;
  var d2 = new (function(e2) {
    function t2() {
      return e2.call(this, s2, function(e3, t3) {
      }) || this;
    }
    return o2(t2, e2), t2.prototype.isErrorEnabled = function() {
      return false;
    }, t2.prototype.error = function(e3) {
    }, t2.prototype.isWarnEnabled = function() {
      return false;
    }, t2.prototype.warn = function(e3) {
    }, t2.prototype.isInfoEnabled = function() {
      return false;
    }, t2.prototype.info = function(e3) {
    }, t2.prototype.isDebugEnabled = function() {
      return false;
    }, t2.prototype.debug = function(e3) {
    }, t2;
  }(h2))();
  function p3(e2, t2) {
    return f2[e2] >= f2[t2];
  }
}, 4912: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.pluck = void 0;
  var n2 = r2(5471);
  t.pluck = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    var r3 = e2.length;
    if (0 === r3) throw new Error("list of properties cannot be empty.");
    return n2.map(function(t3) {
      for (var n3 = t3, o2 = 0; o2 < r3; o2++) {
        var i2 = null == n3 ? void 0 : n3[e2[o2]];
        if (void 0 === i2) return;
        n3 = i2;
      }
      return n3;
    });
  };
}, 4917: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.from = void 0;
  var n2 = r2(1656), o2 = r2(9445);
  t.from = function(e2, t2) {
    return t2 ? n2.scheduled(e2, t2) : o2.innerFrom(e2);
  };
}, 4953: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.scheduleReadableStreamLike = void 0;
  var n2 = r2(854), o2 = r2(9137);
  t.scheduleReadableStreamLike = function(e2, t2) {
    return n2.scheduleAsyncIterable(o2.readableStreamLikeToAsyncGenerator(e2), t2);
  };
}, 5006: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true }), t.AsapAction = void 0;
  var o2 = r2(5267), i2 = r2(6293), a2 = function(e2) {
    function t2(t3, r3) {
      var n3 = e2.call(this, t3, r3) || this;
      return n3.scheduler = t3, n3.work = r3, n3;
    }
    return n2(t2, e2), t2.prototype.requestAsyncId = function(t3, r3, n3) {
      return void 0 === n3 && (n3 = 0), null !== n3 && n3 > 0 ? e2.prototype.requestAsyncId.call(this, t3, r3, n3) : (t3.actions.push(this), t3._scheduled || (t3._scheduled = i2.immediateProvider.setImmediate(t3.flush.bind(t3, void 0))));
    }, t2.prototype.recycleAsyncId = function(t3, r3, n3) {
      var o3;
      if (void 0 === n3 && (n3 = 0), null != n3 ? n3 > 0 : this.delay > 0) return e2.prototype.recycleAsyncId.call(this, t3, r3, n3);
      var a3 = t3.actions;
      null != r3 && (null === (o3 = a3[a3.length - 1]) || void 0 === o3 ? void 0 : o3.id) !== r3 && (i2.immediateProvider.clearImmediate(r3), t3._scheduled === r3 && (t3._scheduled = void 0));
    }, t2;
  }(o2.AsyncAction);
  t.AsapAction = a2;
}, 5022: function(e, t, r2) {
  var n2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3);
    var o3 = Object.getOwnPropertyDescriptor(t2, r3);
    o3 && !("get" in o3 ? !t2.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
      return t2[r3];
    } }), Object.defineProperty(e2, n3, o3);
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), o2 = this && this.__setModuleDefault || (Object.create ? function(e2, t2) {
    Object.defineProperty(e2, "default", { enumerable: true, value: t2 });
  } : function(e2, t2) {
    e2.default = t2;
  }), i2 = this && this.__importStar || function(e2) {
    if (e2 && e2.__esModule) return e2;
    var t2 = {};
    if (null != e2) for (var r3 in e2) "default" !== r3 && Object.prototype.hasOwnProperty.call(e2, r3) && n2(t2, e2, r3);
    return o2(t2, e2), t2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.floorMod = t.floorDiv = t.assertValidZoneId = t.assertValidNanosecond = t.assertValidSecond = t.assertValidMinute = t.assertValidHour = t.assertValidDay = t.assertValidMonth = t.assertValidYear = t.timeZoneOffsetInSeconds = t.totalNanoseconds = t.newDate = t.toStandardDate = t.isoStringToStandardDate = t.dateToIsoString = t.timeZoneOffsetToIsoString = t.timeToIsoString = t.durationToIsoString = t.dateToEpochDay = t.localDateTimeToEpochSecond = t.localTimeToNanoOfDay = t.normalizeNanosecondsForDuration = t.normalizeSecondsForDuration = t.SECONDS_PER_DAY = t.DAYS_PER_400_YEAR_CYCLE = t.DAYS_0000_TO_1970 = t.NANOS_PER_HOUR = t.NANOS_PER_MINUTE = t.NANOS_PER_MILLISECOND = t.NANOS_PER_SECOND = t.SECONDS_PER_HOUR = t.SECONDS_PER_MINUTE = t.MINUTES_PER_HOUR = t.NANOSECOND_OF_SECOND_RANGE = t.SECOND_OF_MINUTE_RANGE = t.MINUTE_OF_HOUR_RANGE = t.HOUR_OF_DAY_RANGE = t.DAY_OF_MONTH_RANGE = t.MONTH_OF_YEAR_RANGE = t.YEAR_RANGE = void 0;
  var a2 = i2(r2(3371)), u2 = r2(9691), s2 = r2(6587), c2 = function() {
    function e2(e3, t2) {
      this._minNumber = e3, this._maxNumber = t2, this._minInteger = (0, a2.int)(e3), this._maxInteger = (0, a2.int)(t2);
    }
    return e2.prototype.contains = function(e3) {
      if ((0, a2.isInt)(e3) && e3 instanceof a2.default) return e3.greaterThanOrEqual(this._minInteger) && e3.lessThanOrEqual(this._maxInteger);
      if ("bigint" == typeof e3) {
        var t2 = (0, a2.int)(e3);
        return t2.greaterThanOrEqual(this._minInteger) && t2.lessThanOrEqual(this._maxInteger);
      }
      return e3 >= this._minNumber && e3 <= this._maxNumber;
    }, e2.prototype.toString = function() {
      return "[".concat(this._minNumber, ", ").concat(this._maxNumber, "]");
    }, e2;
  }();
  function l2(e2, r3, n3) {
    e2 = (0, a2.int)(e2), r3 = (0, a2.int)(r3), n3 = (0, a2.int)(n3);
    var o3 = e2.multiply(365);
    return o3 = (o3 = (o3 = e2.greaterThanOrEqual(0) ? o3.add(e2.add(3).div(4).subtract(e2.add(99).div(100)).add(e2.add(399).div(400))) : o3.subtract(e2.div(-4).subtract(e2.div(-100)).add(e2.div(-400)))).add(r3.multiply(367).subtract(362).div(12))).add(n3.subtract(1)), r3.greaterThan(2) && (o3 = o3.subtract(1), function(e3) {
      return !(!(e3 = (0, a2.int)(e3)).modulo(4).equals(0) || e3.modulo(100).equals(0) && !e3.modulo(400).equals(0));
    }(e2) || (o3 = o3.subtract(1))), o3.subtract(t.DAYS_0000_TO_1970);
  }
  function f2(e2, t2) {
    return 1 === e2 ? t2 % 400 == 0 || t2 % 4 == 0 && t2 % 100 != 0 ? 29 : 28 : [0, 2, 4, 6, 7, 9, 11].includes(e2) ? 31 : 30;
  }
  t.YEAR_RANGE = new c2(-999999999, 999999999), t.MONTH_OF_YEAR_RANGE = new c2(1, 12), t.DAY_OF_MONTH_RANGE = new c2(1, 31), t.HOUR_OF_DAY_RANGE = new c2(0, 23), t.MINUTE_OF_HOUR_RANGE = new c2(0, 59), t.SECOND_OF_MINUTE_RANGE = new c2(0, 59), t.NANOSECOND_OF_SECOND_RANGE = new c2(0, 999999999), t.MINUTES_PER_HOUR = 60, t.SECONDS_PER_MINUTE = 60, t.SECONDS_PER_HOUR = t.SECONDS_PER_MINUTE * t.MINUTES_PER_HOUR, t.NANOS_PER_SECOND = 1e9, t.NANOS_PER_MILLISECOND = 1e6, t.NANOS_PER_MINUTE = t.NANOS_PER_SECOND * t.SECONDS_PER_MINUTE, t.NANOS_PER_HOUR = t.NANOS_PER_MINUTE * t.MINUTES_PER_HOUR, t.DAYS_0000_TO_1970 = 719528, t.DAYS_PER_400_YEAR_CYCLE = 146097, t.SECONDS_PER_DAY = 86400, t.normalizeSecondsForDuration = function(e2, r3) {
    return (0, a2.int)(e2).add(v3(r3, t.NANOS_PER_SECOND));
  }, t.normalizeNanosecondsForDuration = function(e2) {
    return y3(e2, t.NANOS_PER_SECOND);
  }, t.localTimeToNanoOfDay = function(e2, r3, n3, o3) {
    e2 = (0, a2.int)(e2), r3 = (0, a2.int)(r3), n3 = (0, a2.int)(n3), o3 = (0, a2.int)(o3);
    var i3 = e2.multiply(t.NANOS_PER_HOUR);
    return (i3 = (i3 = i3.add(r3.multiply(t.NANOS_PER_MINUTE))).add(n3.multiply(t.NANOS_PER_SECOND))).add(o3);
  }, t.localDateTimeToEpochSecond = function(e2, r3, n3, o3, i3, u3, s3) {
    var c3 = l2(e2, r3, n3), f3 = function(e3, r4, n4) {
      e3 = (0, a2.int)(e3), r4 = (0, a2.int)(r4), n4 = (0, a2.int)(n4);
      var o4 = e3.multiply(t.SECONDS_PER_HOUR);
      return (o4 = o4.add(r4.multiply(t.SECONDS_PER_MINUTE))).add(n4);
    }(o3, i3, u3);
    return c3.multiply(t.SECONDS_PER_DAY).add(f3);
  }, t.dateToEpochDay = l2, t.durationToIsoString = function(e2, r3, n3, o3) {
    var i3 = m2(e2), u3 = m2(r3), s3 = function(e3, r4) {
      var n4, o4;
      e3 = (0, a2.int)(e3), r4 = (0, a2.int)(r4);
      var i4 = e3.isNegative(), u4 = r4.greaterThan(0);
      return n4 = i4 && u4 ? e3.equals(-1) ? "-0" : e3.add(1).toString() : e3.toString(), u4 && (o4 = b2(i4 ? r4.negate().add(2 * t.NANOS_PER_SECOND).modulo(t.NANOS_PER_SECOND) : r4.add(t.NANOS_PER_SECOND).modulo(t.NANOS_PER_SECOND))), null != o4 ? n4 + o4 : n4;
    }(n3, o3);
    return "P".concat(i3, "M").concat(u3, "DT").concat(s3, "S");
  }, t.timeToIsoString = function(e2, t2, r3, n3) {
    var o3 = m2(e2, 2), i3 = m2(t2, 2), a3 = m2(r3, 2), u3 = b2(n3);
    return "".concat(o3, ":").concat(i3, ":").concat(a3).concat(u3);
  }, t.timeZoneOffsetToIsoString = function(e2) {
    if ((e2 = (0, a2.int)(e2)).equals(0)) return "Z";
    var r3 = e2.isNegative();
    r3 && (e2 = e2.multiply(-1));
    var n3 = r3 ? "-" : "+", o3 = m2(e2.div(t.SECONDS_PER_HOUR), 2), i3 = m2(e2.div(t.SECONDS_PER_MINUTE).modulo(t.MINUTES_PER_HOUR), 2), u3 = e2.modulo(t.SECONDS_PER_MINUTE), s3 = u3.equals(0) ? null : m2(u3, 2);
    return null != s3 ? "".concat(n3).concat(o3, ":").concat(i3, ":").concat(s3) : "".concat(n3).concat(o3, ":").concat(i3);
  }, t.dateToIsoString = function(e2, t2, r3) {
    var n3 = function(e3) {
      var t3 = (0, a2.int)(e3);
      return t3.isNegative() || t3.greaterThan(9999) ? m2(t3, 6, { usePositiveSign: true }) : m2(t3, 4);
    }(e2), o3 = m2(t2, 2), i3 = m2(r3, 2);
    return "".concat(n3, "-").concat(o3, "-").concat(i3);
  }, t.isoStringToStandardDate = function(e2) {
    return new Date(e2);
  }, t.toStandardDate = function(e2) {
    return new Date(e2);
  }, t.newDate = function(e2) {
    return new Date(e2);
  }, t.totalNanoseconds = function(e2, r3) {
    return function(e3, t2) {
      return e3 instanceof a2.default ? e3.add(t2) : "bigint" == typeof e3 ? e3 + BigInt(t2) : e3 + t2;
    }(r3 = null != r3 ? r3 : 0, e2.getMilliseconds() * t.NANOS_PER_MILLISECOND);
  }, t.timeZoneOffsetInSeconds = function(e2) {
    var r3 = e2.getSeconds() - e2.getUTCSeconds(), n3 = e2.getMinutes() - e2.getUTCMinutes(), o3 = e2.getHours() - e2.getUTCHours(), i3 = function(e3) {
      return e3.getMonth() === e3.getUTCMonth() ? e3.getDate() - e3.getUTCDate() : e3.getFullYear() > e3.getUTCFullYear() || e3.getMonth() > e3.getUTCMonth() && e3.getFullYear() === e3.getUTCFullYear() ? e3.getDate() + f2(e3.getUTCMonth(), e3.getUTCFullYear()) - e3.getUTCDate() : e3.getDate() - (e3.getUTCDate() + f2(e3.getMonth(), e3.getFullYear()));
    }(e2);
    return o3 * t.SECONDS_PER_HOUR + n3 * t.SECONDS_PER_MINUTE + r3 + i3 * t.SECONDS_PER_DAY;
  }, t.assertValidYear = function(e2) {
    return p3(e2, t.YEAR_RANGE, "Year");
  }, t.assertValidMonth = function(e2) {
    return p3(e2, t.MONTH_OF_YEAR_RANGE, "Month");
  }, t.assertValidDay = function(e2) {
    return p3(e2, t.DAY_OF_MONTH_RANGE, "Day");
  }, t.assertValidHour = function(e2) {
    return p3(e2, t.HOUR_OF_DAY_RANGE, "Hour");
  }, t.assertValidMinute = function(e2) {
    return p3(e2, t.MINUTE_OF_HOUR_RANGE, "Minute");
  }, t.assertValidSecond = function(e2) {
    return p3(e2, t.SECOND_OF_MINUTE_RANGE, "Second");
  }, t.assertValidNanosecond = function(e2) {
    return p3(e2, t.NANOSECOND_OF_SECOND_RANGE, "Nanosecond");
  };
  var h2 = /* @__PURE__ */ new Map(), d2 = function(e2, t2) {
    return (0, u2.newError)("".concat(t2, ' is expected to be a valid ZoneId but was: "').concat(e2, '"'));
  };
  function p3(e2, t2, r3) {
    if ((0, s2.assertNumberOrInteger)(e2, r3), !t2.contains(e2)) throw (0, u2.newError)("".concat(r3, " is expected to be in range ").concat(t2.toString(), " but was: ").concat(e2.toString()));
    return e2;
  }
  function v3(e2, t2) {
    e2 = (0, a2.int)(e2), t2 = (0, a2.int)(t2);
    var r3 = e2.div(t2);
    return e2.isPositive() !== t2.isPositive() && r3.multiply(t2).notEquals(e2) && (r3 = r3.subtract(1)), r3;
  }
  function y3(e2, t2) {
    return e2 = (0, a2.int)(e2), t2 = (0, a2.int)(t2), e2.subtract(v3(e2, t2).multiply(t2));
  }
  function b2(e2) {
    return (e2 = (0, a2.int)(e2)).equals(0) ? "" : "." + m2(e2, 9);
  }
  function m2(e2, t2, r3) {
    var n3 = (e2 = (0, a2.int)(e2)).isNegative();
    n3 && (e2 = e2.negate());
    var o3 = e2.toString();
    if (null != t2) for (; o3.length < t2; ) o3 = "0" + o3;
    return n3 ? "-" + o3 : true === (null == r3 ? void 0 : r3.usePositiveSign) ? "+" + o3 : o3;
  }
  t.assertValidZoneId = function(e2, t2) {
    var r3 = h2.get(t2);
    if (true !== r3) {
      if (false === r3) throw d2(t2, e2);
      try {
        Intl.DateTimeFormat(void 0, { timeZone: t2 }), h2.set(t2, true);
      } catch (r4) {
        throw h2.set(t2, false), d2(t2, e2);
      }
    }
  }, t.floorDiv = v3, t.floorMod = y3;
}, 5045: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = r2(7168), a2 = r2(9305), u2 = o2(r2(7518)), s2 = r2(5973), c2 = r2(6492), l2 = a2.internal.temporalUtil.localDateTimeToEpochSecond, f2 = /* @__PURE__ */ new Map();
  function h2(e2, t2, r3) {
    var n3 = function(e3) {
      if (!f2.has(e3)) {
        var t3 = new Intl.DateTimeFormat("en-US", { timeZone: e3, year: "numeric", month: "numeric", day: "numeric", hour: "numeric", minute: "numeric", second: "numeric", hour12: false, era: "narrow" });
        f2.set(e3, t3);
      }
      return f2.get(e3);
    }(e2), o3 = (0, a2.int)(t2).multiply(1e3).add((0, a2.int)(r3).div(1e6)).toNumber(), i3 = n3.formatToParts(o3).reduce(function(e3, t3) {
      return "era" === t3.type ? e3.adjustEra = "B" === t3.value.toUpperCase() ? function(e4) {
        return e4.subtract(1).negate();
      } : c2.identity : "hour" === t3.type ? e3.hour = (0, a2.int)(t3.value).modulo(24) : "literal" !== t3.type && (e3[t3.type] = (0, a2.int)(t3.value)), e3;
    }, {});
    i3.year = i3.adjustEra(i3.year);
    var u3 = l2(i3.year, i3.month, i3.day, i3.hour, i3.minute, i3.second, i3.nanosecond);
    return i3.timeZoneOffsetSeconds = u3.subtract(t2), i3.hour = i3.hour.modulo(24), i3;
  }
  function d2(e2, t2, r3) {
    if (!t2 && !r3) return e2;
    var n3 = function(e3) {
      return r3 ? e3.toBigInt() : e3.toNumberOrInfinity();
    }, o3 = Object.create(Object.getPrototypeOf(e2));
    for (var i3 in e2) if (true === Object.prototype.hasOwnProperty.call(e2, i3)) {
      var u3 = e2[i3];
      o3[i3] = (0, a2.isInt)(u3) ? n3(u3) : u3;
    }
    return Object.freeze(o3), o3;
  }
  t.default = { createDateTimeWithZoneIdTransformer: function(e2, t2) {
    var r3 = e2.disableLosslessIntegers, o3 = e2.useBigInt;
    return u2.default.createDateTimeWithZoneIdTransformer(e2).extendsWith({ signature: 105, fromStructure: function(e3) {
      i2.structure.verifyStructSize("DateTimeWithZoneId", 3, e3.size);
      var t3 = n2(e3.fields, 3), u3 = t3[0], s3 = t3[1], c3 = t3[2], l3 = h2(c3, u3, s3);
      return d2(new a2.DateTime(l3.year, l3.month, l3.day, l3.hour, l3.minute, l3.second, (0, a2.int)(s3), l3.timeZoneOffsetSeconds, c3), r3, o3);
    }, toStructure: function(e3) {
      var r4 = l2(e3.year, e3.month, e3.day, e3.hour, e3.minute, e3.second, e3.nanosecond), n3 = null != e3.timeZoneOffsetSeconds ? e3.timeZoneOffsetSeconds : function(e4, t3, r5) {
        var n4 = h2(e4, t3, r5), o5 = l2(n4.year, n4.month, n4.day, n4.hour, n4.minute, n4.second, r5).subtract(t3), i3 = t3.subtract(o5), a3 = h2(e4, i3, r5);
        return l2(a3.year, a3.month, a3.day, a3.hour, a3.minute, a3.second, r5).subtract(i3);
      }(e3.timeZoneId, r4, e3.nanosecond);
      null == e3.timeZoneOffsetSeconds && t2.warn('DateTime objects without "timeZoneOffsetSeconds" property are prune to bugs related to ambiguous times. For instance, 2022-10-30T2:30:00[Europe/Berlin] could be GMT+1 or GMT+2.');
      var o4 = r4.subtract(n3), u3 = (0, a2.int)(e3.nanosecond), s3 = e3.timeZoneId;
      return new i2.structure.Structure(105, [o4, u3, s3]);
    } });
  }, createDateTimeWithOffsetTransformer: function(e2) {
    var t2 = e2.disableLosslessIntegers, r3 = e2.useBigInt;
    return u2.default.createDateTimeWithOffsetTransformer(e2).extendsWith({ signature: 73, toStructure: function(e3) {
      var t3 = l2(e3.year, e3.month, e3.day, e3.hour, e3.minute, e3.second, e3.nanosecond), r4 = (0, a2.int)(e3.nanosecond), n3 = (0, a2.int)(e3.timeZoneOffsetSeconds), o3 = t3.subtract(n3);
      return new i2.structure.Structure(73, [o3, r4, n3]);
    }, fromStructure: function(e3) {
      i2.structure.verifyStructSize("DateTimeWithZoneOffset", 3, e3.size);
      var o3 = n2(e3.fields, 3), u3 = o3[0], c3 = o3[1], l3 = o3[2], f3 = (0, a2.int)(u3).add(l3), h3 = (0, s2.epochSecondAndNanoToLocalDateTime)(f3, c3);
      return d2(new a2.DateTime(h3.year, h3.month, h3.day, h3.hour, h3.minute, h3.second, h3.nanosecond, l3, null), t2, r3);
    } });
  } };
}, 5184: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.observeOn = void 0;
  var n2 = r2(7110), o2 = r2(7843), i2 = r2(3111);
  t.observeOn = function(e2, t2) {
    return void 0 === t2 && (t2 = 0), o2.operate(function(r3, o3) {
      r3.subscribe(i2.createOperatorSubscriber(o3, function(r4) {
        return n2.executeSchedule(o3, e2, function() {
          return o3.next(r4);
        }, t2);
      }, function() {
        return n2.executeSchedule(o3, e2, function() {
          return o3.complete();
        }, t2);
      }, function(r4) {
        return n2.executeSchedule(o3, e2, function() {
          return o3.error(r4);
        }, t2);
      }));
    });
  };
}, 5250: function(e, t, r2) {
  var n2;
  e = r2.nmd(e), (function() {
    var o2, i2 = "Expected a function", a2 = "__lodash_hash_undefined__", u2 = "__lodash_placeholder__", s2 = 32, c2 = 128, l2 = 1 / 0, f2 = 9007199254740991, h2 = NaN, d2 = 4294967295, p3 = [["ary", c2], ["bind", 1], ["bindKey", 2], ["curry", 8], ["curryRight", 16], ["flip", 512], ["partial", s2], ["partialRight", 64], ["rearg", 256]], v3 = "[object Arguments]", y3 = "[object Array]", b2 = "[object Boolean]", m2 = "[object Date]", g2 = "[object Error]", _2 = "[object Function]", w2 = "[object GeneratorFunction]", O2 = "[object Map]", S2 = "[object Number]", E2 = "[object Object]", P2 = "[object Promise]", T2 = "[object RegExp]", x3 = "[object Set]", C2 = "[object String]", j2 = "[object Symbol]", A2 = "[object WeakMap]", k2 = "[object ArrayBuffer]", R2 = "[object DataView]", I2 = "[object Float32Array]", M2 = "[object Float64Array]", N2 = "[object Int8Array]", D2 = "[object Int16Array]", L2 = "[object Int32Array]", U2 = "[object Uint8Array]", F2 = "[object Uint8ClampedArray]", B2 = "[object Uint16Array]", z2 = "[object Uint32Array]", V2 = /\b__p \+= '';/g, W2 = /\b(__p \+=) '' \+/g, q2 = /(__e\(.*?\)|\b__t\)) \+\n'';/g, G2 = /&(?:amp|lt|gt|quot|#39);/g, H2 = /[&<>"']/g, Y2 = RegExp(G2.source), X2 = RegExp(H2.source), K3 = /<%-([\s\S]+?)%>/g, Z2 = /<%([\s\S]+?)%>/g, $3 = /<%=([\s\S]+?)%>/g, Q2 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, J2 = /^\w*$/, ee2 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, te2 = /[\\^$.*+?()[\]{}|]/g, re2 = RegExp(te2.source), ne2 = /^\s+/, oe2 = /\s/, ie2 = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, ae2 = /\{\n\/\* \[wrapped with (.+)\] \*/, ue2 = /,? & /, se2 = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g, ce2 = /[()=,{}\[\]\/\s]/, le2 = /\\(\\)?/g, fe2 = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g, he2 = /\w*$/, de2 = /^[-+]0x[0-9a-f]+$/i, pe2 = /^0b[01]+$/i, ve2 = /^\[object .+?Constructor\]$/, ye2 = /^0o[0-7]+$/i, be2 = /^(?:0|[1-9]\d*)$/, me2 = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g, ge2 = /($^)/, _e2 = /['\n\r\u2028\u2029\\]/g, we2 = "\\ud800-\\udfff", Oe2 = "\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff", Se2 = "\\u2700-\\u27bf", Ee2 = "a-z\\xdf-\\xf6\\xf8-\\xff", Pe2 = "A-Z\\xc0-\\xd6\\xd8-\\xde", Te2 = "\\ufe0e\\ufe0f", xe2 = "\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", Ce2 = "[" + we2 + "]", je2 = "[" + xe2 + "]", Ae2 = "[" + Oe2 + "]", ke2 = "\\d+", Re2 = "[" + Se2 + "]", Ie2 = "[" + Ee2 + "]", Me2 = "[^" + we2 + xe2 + ke2 + Se2 + Ee2 + Pe2 + "]", Ne2 = "\\ud83c[\\udffb-\\udfff]", De2 = "[^" + we2 + "]", Le2 = "(?:\\ud83c[\\udde6-\\uddff]){2}", Ue2 = "[\\ud800-\\udbff][\\udc00-\\udfff]", Fe2 = "[" + Pe2 + "]", Be2 = "\\u200d", ze2 = "(?:" + Ie2 + "|" + Me2 + ")", Ve2 = "(?:" + Fe2 + "|" + Me2 + ")", We2 = "(?:['’](?:d|ll|m|re|s|t|ve))?", qe2 = "(?:['’](?:D|LL|M|RE|S|T|VE))?", Ge2 = "(?:" + Ae2 + "|" + Ne2 + ")?", He2 = "[" + Te2 + "]?", Ye2 = He2 + Ge2 + "(?:" + Be2 + "(?:" + [De2, Le2, Ue2].join("|") + ")" + He2 + Ge2 + ")*", Xe2 = "(?:" + [Re2, Le2, Ue2].join("|") + ")" + Ye2, Ke2 = "(?:" + [De2 + Ae2 + "?", Ae2, Le2, Ue2, Ce2].join("|") + ")", Ze2 = RegExp("['’]", "g"), $e2 = RegExp(Ae2, "g"), Qe2 = RegExp(Ne2 + "(?=" + Ne2 + ")|" + Ke2 + Ye2, "g"), Je2 = RegExp([Fe2 + "?" + Ie2 + "+" + We2 + "(?=" + [je2, Fe2, "$"].join("|") + ")", Ve2 + "+" + qe2 + "(?=" + [je2, Fe2 + ze2, "$"].join("|") + ")", Fe2 + "?" + ze2 + "+" + We2, Fe2 + "+" + qe2, "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", ke2, Xe2].join("|"), "g"), et2 = RegExp("[" + Be2 + we2 + Oe2 + Te2 + "]"), tt2 = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/, rt2 = ["Array", "Buffer", "DataView", "Date", "Error", "Float32Array", "Float64Array", "Function", "Int8Array", "Int16Array", "Int32Array", "Map", "Math", "Object", "Promise", "RegExp", "Set", "String", "Symbol", "TypeError", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "WeakMap", "_", "clearTimeout", "isFinite", "parseInt", "setTimeout"], nt2 = -1, ot2 = {};
    ot2[I2] = ot2[M2] = ot2[N2] = ot2[D2] = ot2[L2] = ot2[U2] = ot2[F2] = ot2[B2] = ot2[z2] = true, ot2[v3] = ot2[y3] = ot2[k2] = ot2[b2] = ot2[R2] = ot2[m2] = ot2[g2] = ot2[_2] = ot2[O2] = ot2[S2] = ot2[E2] = ot2[T2] = ot2[x3] = ot2[C2] = ot2[A2] = false;
    var it2 = {};
    it2[v3] = it2[y3] = it2[k2] = it2[R2] = it2[b2] = it2[m2] = it2[I2] = it2[M2] = it2[N2] = it2[D2] = it2[L2] = it2[O2] = it2[S2] = it2[E2] = it2[T2] = it2[x3] = it2[C2] = it2[j2] = it2[U2] = it2[F2] = it2[B2] = it2[z2] = true, it2[g2] = it2[_2] = it2[A2] = false;
    var at2 = { "\\": "\\", "'": "'", "\n": "n", "\r": "r", "\u2028": "u2028", "\u2029": "u2029" }, ut2 = parseFloat, st2 = parseInt, ct2 = "object" == typeof r2.g && r2.g && r2.g.Object === Object && r2.g, lt2 = "object" == typeof self && self && self.Object === Object && self, ft2 = ct2 || lt2 || Function("return this")(), ht2 = t && !t.nodeType && t, dt2 = ht2 && e && !e.nodeType && e, pt2 = dt2 && dt2.exports === ht2, vt2 = pt2 && ct2.process, yt2 = function() {
      try {
        return dt2 && dt2.require && dt2.require("util").types || vt2 && vt2.binding && vt2.binding("util");
      } catch (e2) {
      }
    }(), bt2 = yt2 && yt2.isArrayBuffer, mt2 = yt2 && yt2.isDate, gt2 = yt2 && yt2.isMap, _t2 = yt2 && yt2.isRegExp, wt2 = yt2 && yt2.isSet, Ot2 = yt2 && yt2.isTypedArray;
    function St2(e2, t2, r3) {
      switch (r3.length) {
        case 0:
          return e2.call(t2);
        case 1:
          return e2.call(t2, r3[0]);
        case 2:
          return e2.call(t2, r3[0], r3[1]);
        case 3:
          return e2.call(t2, r3[0], r3[1], r3[2]);
      }
      return e2.apply(t2, r3);
    }
    function Et2(e2, t2, r3, n3) {
      for (var o3 = -1, i3 = null == e2 ? 0 : e2.length; ++o3 < i3; ) {
        var a3 = e2[o3];
        t2(n3, a3, r3(a3), e2);
      }
      return n3;
    }
    function Pt2(e2, t2) {
      for (var r3 = -1, n3 = null == e2 ? 0 : e2.length; ++r3 < n3 && false !== t2(e2[r3], r3, e2); ) ;
      return e2;
    }
    function Tt2(e2, t2) {
      for (var r3 = null == e2 ? 0 : e2.length; r3-- && false !== t2(e2[r3], r3, e2); ) ;
      return e2;
    }
    function xt2(e2, t2) {
      for (var r3 = -1, n3 = null == e2 ? 0 : e2.length; ++r3 < n3; ) if (!t2(e2[r3], r3, e2)) return false;
      return true;
    }
    function Ct2(e2, t2) {
      for (var r3 = -1, n3 = null == e2 ? 0 : e2.length, o3 = 0, i3 = []; ++r3 < n3; ) {
        var a3 = e2[r3];
        t2(a3, r3, e2) && (i3[o3++] = a3);
      }
      return i3;
    }
    function jt2(e2, t2) {
      return !(null == e2 || !e2.length) && Ft2(e2, t2, 0) > -1;
    }
    function At2(e2, t2, r3) {
      for (var n3 = -1, o3 = null == e2 ? 0 : e2.length; ++n3 < o3; ) if (r3(t2, e2[n3])) return true;
      return false;
    }
    function kt2(e2, t2) {
      for (var r3 = -1, n3 = null == e2 ? 0 : e2.length, o3 = Array(n3); ++r3 < n3; ) o3[r3] = t2(e2[r3], r3, e2);
      return o3;
    }
    function Rt2(e2, t2) {
      for (var r3 = -1, n3 = t2.length, o3 = e2.length; ++r3 < n3; ) e2[o3 + r3] = t2[r3];
      return e2;
    }
    function It2(e2, t2, r3, n3) {
      var o3 = -1, i3 = null == e2 ? 0 : e2.length;
      for (n3 && i3 && (r3 = e2[++o3]); ++o3 < i3; ) r3 = t2(r3, e2[o3], o3, e2);
      return r3;
    }
    function Mt2(e2, t2, r3, n3) {
      var o3 = null == e2 ? 0 : e2.length;
      for (n3 && o3 && (r3 = e2[--o3]); o3--; ) r3 = t2(r3, e2[o3], o3, e2);
      return r3;
    }
    function Nt2(e2, t2) {
      for (var r3 = -1, n3 = null == e2 ? 0 : e2.length; ++r3 < n3; ) if (t2(e2[r3], r3, e2)) return true;
      return false;
    }
    var Dt2 = Wt2("length");
    function Lt2(e2, t2, r3) {
      var n3;
      return r3(e2, function(e3, r4, o3) {
        if (t2(e3, r4, o3)) return n3 = r4, false;
      }), n3;
    }
    function Ut2(e2, t2, r3, n3) {
      for (var o3 = e2.length, i3 = r3 + (n3 ? 1 : -1); n3 ? i3-- : ++i3 < o3; ) if (t2(e2[i3], i3, e2)) return i3;
      return -1;
    }
    function Ft2(e2, t2, r3) {
      return t2 == t2 ? function(e3, t3, r4) {
        for (var n3 = r4 - 1, o3 = e3.length; ++n3 < o3; ) if (e3[n3] === t3) return n3;
        return -1;
      }(e2, t2, r3) : Ut2(e2, zt2, r3);
    }
    function Bt2(e2, t2, r3, n3) {
      for (var o3 = r3 - 1, i3 = e2.length; ++o3 < i3; ) if (n3(e2[o3], t2)) return o3;
      return -1;
    }
    function zt2(e2) {
      return e2 != e2;
    }
    function Vt2(e2, t2) {
      var r3 = null == e2 ? 0 : e2.length;
      return r3 ? Ht2(e2, t2) / r3 : h2;
    }
    function Wt2(e2) {
      return function(t2) {
        return null == t2 ? o2 : t2[e2];
      };
    }
    function qt2(e2) {
      return function(t2) {
        return null == e2 ? o2 : e2[t2];
      };
    }
    function Gt2(e2, t2, r3, n3, o3) {
      return o3(e2, function(e3, o4, i3) {
        r3 = n3 ? (n3 = false, e3) : t2(r3, e3, o4, i3);
      }), r3;
    }
    function Ht2(e2, t2) {
      for (var r3, n3 = -1, i3 = e2.length; ++n3 < i3; ) {
        var a3 = t2(e2[n3]);
        a3 !== o2 && (r3 = r3 === o2 ? a3 : r3 + a3);
      }
      return r3;
    }
    function Yt2(e2, t2) {
      for (var r3 = -1, n3 = Array(e2); ++r3 < e2; ) n3[r3] = t2(r3);
      return n3;
    }
    function Xt2(e2) {
      return e2 ? e2.slice(0, fr2(e2) + 1).replace(ne2, "") : e2;
    }
    function Kt2(e2) {
      return function(t2) {
        return e2(t2);
      };
    }
    function Zt2(e2, t2) {
      return kt2(t2, function(t3) {
        return e2[t3];
      });
    }
    function $t2(e2, t2) {
      return e2.has(t2);
    }
    function Qt2(e2, t2) {
      for (var r3 = -1, n3 = e2.length; ++r3 < n3 && Ft2(t2, e2[r3], 0) > -1; ) ;
      return r3;
    }
    function Jt2(e2, t2) {
      for (var r3 = e2.length; r3-- && Ft2(t2, e2[r3], 0) > -1; ) ;
      return r3;
    }
    var er2 = qt2({ À: "A", Á: "A", Â: "A", Ã: "A", Ä: "A", Å: "A", à: "a", á: "a", â: "a", ã: "a", ä: "a", å: "a", Ç: "C", ç: "c", Ð: "D", ð: "d", È: "E", É: "E", Ê: "E", Ë: "E", è: "e", é: "e", ê: "e", ë: "e", Ì: "I", Í: "I", Î: "I", Ï: "I", ì: "i", í: "i", î: "i", ï: "i", Ñ: "N", ñ: "n", Ò: "O", Ó: "O", Ô: "O", Õ: "O", Ö: "O", Ø: "O", ò: "o", ó: "o", ô: "o", õ: "o", ö: "o", ø: "o", Ù: "U", Ú: "U", Û: "U", Ü: "U", ù: "u", ú: "u", û: "u", ü: "u", Ý: "Y", ý: "y", ÿ: "y", Æ: "Ae", æ: "ae", Þ: "Th", þ: "th", ß: "ss", Ā: "A", Ă: "A", Ą: "A", ā: "a", ă: "a", ą: "a", Ć: "C", Ĉ: "C", Ċ: "C", Č: "C", ć: "c", ĉ: "c", ċ: "c", č: "c", Ď: "D", Đ: "D", ď: "d", đ: "d", Ē: "E", Ĕ: "E", Ė: "E", Ę: "E", Ě: "E", ē: "e", ĕ: "e", ė: "e", ę: "e", ě: "e", Ĝ: "G", Ğ: "G", Ġ: "G", Ģ: "G", ĝ: "g", ğ: "g", ġ: "g", ģ: "g", Ĥ: "H", Ħ: "H", ĥ: "h", ħ: "h", Ĩ: "I", Ī: "I", Ĭ: "I", Į: "I", İ: "I", ĩ: "i", ī: "i", ĭ: "i", į: "i", ı: "i", Ĵ: "J", ĵ: "j", Ķ: "K", ķ: "k", ĸ: "k", Ĺ: "L", Ļ: "L", Ľ: "L", Ŀ: "L", Ł: "L", ĺ: "l", ļ: "l", ľ: "l", ŀ: "l", ł: "l", Ń: "N", Ņ: "N", Ň: "N", Ŋ: "N", ń: "n", ņ: "n", ň: "n", ŋ: "n", Ō: "O", Ŏ: "O", Ő: "O", ō: "o", ŏ: "o", ő: "o", Ŕ: "R", Ŗ: "R", Ř: "R", ŕ: "r", ŗ: "r", ř: "r", Ś: "S", Ŝ: "S", Ş: "S", Š: "S", ś: "s", ŝ: "s", ş: "s", š: "s", Ţ: "T", Ť: "T", Ŧ: "T", ţ: "t", ť: "t", ŧ: "t", Ũ: "U", Ū: "U", Ŭ: "U", Ů: "U", Ű: "U", Ų: "U", ũ: "u", ū: "u", ŭ: "u", ů: "u", ű: "u", ų: "u", Ŵ: "W", ŵ: "w", Ŷ: "Y", ŷ: "y", Ÿ: "Y", Ź: "Z", Ż: "Z", Ž: "Z", ź: "z", ż: "z", ž: "z", Ĳ: "IJ", ĳ: "ij", Œ: "Oe", œ: "oe", ŉ: "'n", ſ: "s" }), tr2 = qt2({ "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" });
    function rr2(e2) {
      return "\\" + at2[e2];
    }
    function nr2(e2) {
      return et2.test(e2);
    }
    function or2(e2) {
      var t2 = -1, r3 = Array(e2.size);
      return e2.forEach(function(e3, n3) {
        r3[++t2] = [n3, e3];
      }), r3;
    }
    function ir2(e2, t2) {
      return function(r3) {
        return e2(t2(r3));
      };
    }
    function ar2(e2, t2) {
      for (var r3 = -1, n3 = e2.length, o3 = 0, i3 = []; ++r3 < n3; ) {
        var a3 = e2[r3];
        a3 !== t2 && a3 !== u2 || (e2[r3] = u2, i3[o3++] = r3);
      }
      return i3;
    }
    function ur2(e2) {
      var t2 = -1, r3 = Array(e2.size);
      return e2.forEach(function(e3) {
        r3[++t2] = e3;
      }), r3;
    }
    function sr2(e2) {
      var t2 = -1, r3 = Array(e2.size);
      return e2.forEach(function(e3) {
        r3[++t2] = [e3, e3];
      }), r3;
    }
    function cr2(e2) {
      return nr2(e2) ? function(e3) {
        for (var t2 = Qe2.lastIndex = 0; Qe2.test(e3); ) ++t2;
        return t2;
      }(e2) : Dt2(e2);
    }
    function lr2(e2) {
      return nr2(e2) ? function(e3) {
        return e3.match(Qe2) || [];
      }(e2) : function(e3) {
        return e3.split("");
      }(e2);
    }
    function fr2(e2) {
      for (var t2 = e2.length; t2-- && oe2.test(e2.charAt(t2)); ) ;
      return t2;
    }
    var hr2 = qt2({ "&amp;": "&", "&lt;": "<", "&gt;": ">", "&quot;": '"', "&#39;": "'" }), dr2 = function e2(t2) {
      var r3, n3 = (t2 = null == t2 ? ft2 : dr2.defaults(ft2.Object(), t2, dr2.pick(ft2, rt2))).Array, oe3 = t2.Date, we3 = t2.Error, Oe3 = t2.Function, Se3 = t2.Math, Ee3 = t2.Object, Pe3 = t2.RegExp, Te3 = t2.String, xe3 = t2.TypeError, Ce3 = n3.prototype, je3 = Oe3.prototype, Ae3 = Ee3.prototype, ke3 = t2["__core-js_shared__"], Re3 = je3.toString, Ie3 = Ae3.hasOwnProperty, Me3 = 0, Ne3 = (r3 = /[^.]+$/.exec(ke3 && ke3.keys && ke3.keys.IE_PROTO || "")) ? "Symbol(src)_1." + r3 : "", De3 = Ae3.toString, Le3 = Re3.call(Ee3), Ue3 = ft2._, Fe3 = Pe3("^" + Re3.call(Ie3).replace(te2, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"), Be3 = pt2 ? t2.Buffer : o2, ze3 = t2.Symbol, Ve3 = t2.Uint8Array, We3 = Be3 ? Be3.allocUnsafe : o2, qe3 = ir2(Ee3.getPrototypeOf, Ee3), Ge3 = Ee3.create, He3 = Ae3.propertyIsEnumerable, Ye3 = Ce3.splice, Xe3 = ze3 ? ze3.isConcatSpreadable : o2, Ke3 = ze3 ? ze3.iterator : o2, Qe3 = ze3 ? ze3.toStringTag : o2, et3 = function() {
        try {
          var e3 = ci2(Ee3, "defineProperty");
          return e3({}, "", {}), e3;
        } catch (e4) {
        }
      }(), at3 = t2.clearTimeout !== ft2.clearTimeout && t2.clearTimeout, ct3 = oe3 && oe3.now !== ft2.Date.now && oe3.now, lt3 = t2.setTimeout !== ft2.setTimeout && t2.setTimeout, ht3 = Se3.ceil, dt3 = Se3.floor, vt3 = Ee3.getOwnPropertySymbols, yt3 = Be3 ? Be3.isBuffer : o2, Dt3 = t2.isFinite, qt3 = Ce3.join, pr2 = ir2(Ee3.keys, Ee3), vr2 = Se3.max, yr2 = Se3.min, br2 = oe3.now, mr2 = t2.parseInt, gr2 = Se3.random, _r = Ce3.reverse, wr2 = ci2(t2, "DataView"), Or2 = ci2(t2, "Map"), Sr2 = ci2(t2, "Promise"), Er2 = ci2(t2, "Set"), Pr2 = ci2(t2, "WeakMap"), Tr2 = ci2(Ee3, "create"), xr2 = Pr2 && new Pr2(), Cr2 = {}, jr2 = Li2(wr2), Ar2 = Li2(Or2), kr2 = Li2(Sr2), Rr2 = Li2(Er2), Ir2 = Li2(Pr2), Mr2 = ze3 ? ze3.prototype : o2, Nr2 = Mr2 ? Mr2.valueOf : o2, Dr2 = Mr2 ? Mr2.toString : o2;
      function Lr2(e3) {
        if (eu2(e3) && !Wa2(e3) && !(e3 instanceof zr2)) {
          if (e3 instanceof Br2) return e3;
          if (Ie3.call(e3, "__wrapped__")) return Ui2(e3);
        }
        return new Br2(e3);
      }
      var Ur2 = /* @__PURE__ */ function() {
        function e3() {
        }
        return function(t3) {
          if (!Ja2(t3)) return {};
          if (Ge3) return Ge3(t3);
          e3.prototype = t3;
          var r4 = new e3();
          return e3.prototype = o2, r4;
        };
      }();
      function Fr2() {
      }
      function Br2(e3, t3) {
        this.__wrapped__ = e3, this.__actions__ = [], this.__chain__ = !!t3, this.__index__ = 0, this.__values__ = o2;
      }
      function zr2(e3) {
        this.__wrapped__ = e3, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = false, this.__iteratees__ = [], this.__takeCount__ = d2, this.__views__ = [];
      }
      function Vr2(e3) {
        var t3 = -1, r4 = null == e3 ? 0 : e3.length;
        for (this.clear(); ++t3 < r4; ) {
          var n4 = e3[t3];
          this.set(n4[0], n4[1]);
        }
      }
      function Wr2(e3) {
        var t3 = -1, r4 = null == e3 ? 0 : e3.length;
        for (this.clear(); ++t3 < r4; ) {
          var n4 = e3[t3];
          this.set(n4[0], n4[1]);
        }
      }
      function qr2(e3) {
        var t3 = -1, r4 = null == e3 ? 0 : e3.length;
        for (this.clear(); ++t3 < r4; ) {
          var n4 = e3[t3];
          this.set(n4[0], n4[1]);
        }
      }
      function Gr2(e3) {
        var t3 = -1, r4 = null == e3 ? 0 : e3.length;
        for (this.__data__ = new qr2(); ++t3 < r4; ) this.add(e3[t3]);
      }
      function Hr2(e3) {
        var t3 = this.__data__ = new Wr2(e3);
        this.size = t3.size;
      }
      function Yr2(e3, t3) {
        var r4 = Wa2(e3), n4 = !r4 && Va2(e3), o3 = !r4 && !n4 && Ya2(e3), i3 = !r4 && !n4 && !o3 && su2(e3), a3 = r4 || n4 || o3 || i3, u3 = a3 ? Yt2(e3.length, Te3) : [], s3 = u3.length;
        for (var c3 in e3) !t3 && !Ie3.call(e3, c3) || a3 && ("length" == c3 || o3 && ("offset" == c3 || "parent" == c3) || i3 && ("buffer" == c3 || "byteLength" == c3 || "byteOffset" == c3) || yi2(c3, s3)) || u3.push(c3);
        return u3;
      }
      function Xr2(e3) {
        var t3 = e3.length;
        return t3 ? e3[Gn2(0, t3 - 1)] : o2;
      }
      function Kr2(e3, t3) {
        return Ri2(xo2(e3), on4(t3, 0, e3.length));
      }
      function Zr2(e3) {
        return Ri2(xo2(e3));
      }
      function $r2(e3, t3, r4) {
        (r4 !== o2 && !Fa2(e3[t3], r4) || r4 === o2 && !(t3 in e3)) && rn2(e3, t3, r4);
      }
      function Qr2(e3, t3, r4) {
        var n4 = e3[t3];
        Ie3.call(e3, t3) && Fa2(n4, r4) && (r4 !== o2 || t3 in e3) || rn2(e3, t3, r4);
      }
      function Jr2(e3, t3) {
        for (var r4 = e3.length; r4--; ) if (Fa2(e3[r4][0], t3)) return r4;
        return -1;
      }
      function en2(e3, t3, r4, n4) {
        return ln2(e3, function(e4, o3, i3) {
          t3(n4, e4, r4(e4), i3);
        }), n4;
      }
      function tn2(e3, t3) {
        return e3 && Co2(t3, Au2(t3), e3);
      }
      function rn2(e3, t3, r4) {
        "__proto__" == t3 && et3 ? et3(e3, t3, { configurable: true, enumerable: true, value: r4, writable: true }) : e3[t3] = r4;
      }
      function nn2(e3, t3) {
        for (var r4 = -1, i3 = t3.length, a3 = n3(i3), u3 = null == e3; ++r4 < i3; ) a3[r4] = u3 ? o2 : Pu2(e3, t3[r4]);
        return a3;
      }
      function on4(e3, t3, r4) {
        return e3 == e3 && (r4 !== o2 && (e3 = e3 <= r4 ? e3 : r4), t3 !== o2 && (e3 = e3 >= t3 ? e3 : t3)), e3;
      }
      function an2(e3, t3, r4, n4, i3, a3) {
        var u3, s3 = 1 & t3, c3 = 2 & t3, l3 = 4 & t3;
        if (r4 && (u3 = i3 ? r4(e3, n4, i3, a3) : r4(e3)), u3 !== o2) return u3;
        if (!Ja2(e3)) return e3;
        var f3 = Wa2(e3);
        if (f3) {
          if (u3 = function(e4) {
            var t4 = e4.length, r5 = new e4.constructor(t4);
            return t4 && "string" == typeof e4[0] && Ie3.call(e4, "index") && (r5.index = e4.index, r5.input = e4.input), r5;
          }(e3), !s3) return xo2(e3, u3);
        } else {
          var h3 = hi2(e3), d3 = h3 == _2 || h3 == w2;
          if (Ya2(e3)) return wo2(e3, s3);
          if (h3 == E2 || h3 == v3 || d3 && !i3) {
            if (u3 = c3 || d3 ? {} : pi2(e3), !s3) return c3 ? function(e4, t4) {
              return Co2(e4, fi2(e4), t4);
            }(e3, function(e4, t4) {
              return e4 && Co2(t4, ku2(t4), e4);
            }(u3, e3)) : function(e4, t4) {
              return Co2(e4, li2(e4), t4);
            }(e3, tn2(u3, e3));
          } else {
            if (!it2[h3]) return i3 ? e3 : {};
            u3 = function(e4, t4, r5) {
              var n5, o3 = e4.constructor;
              switch (t4) {
                case k2:
                  return Oo2(e4);
                case b2:
                case m2:
                  return new o3(+e4);
                case R2:
                  return function(e5, t5) {
                    var r6 = t5 ? Oo2(e5.buffer) : e5.buffer;
                    return new e5.constructor(r6, e5.byteOffset, e5.byteLength);
                  }(e4, r5);
                case I2:
                case M2:
                case N2:
                case D2:
                case L2:
                case U2:
                case F2:
                case B2:
                case z2:
                  return So2(e4, r5);
                case O2:
                  return new o3();
                case S2:
                case C2:
                  return new o3(e4);
                case T2:
                  return function(e5) {
                    var t5 = new e5.constructor(e5.source, he2.exec(e5));
                    return t5.lastIndex = e5.lastIndex, t5;
                  }(e4);
                case x3:
                  return new o3();
                case j2:
                  return n5 = e4, Nr2 ? Ee3(Nr2.call(n5)) : {};
              }
            }(e3, h3, s3);
          }
        }
        a3 || (a3 = new Hr2());
        var p4 = a3.get(e3);
        if (p4) return p4;
        a3.set(e3, u3), iu2(e3) ? e3.forEach(function(n5) {
          u3.add(an2(n5, t3, r4, n5, e3, a3));
        }) : tu2(e3) && e3.forEach(function(n5, o3) {
          u3.set(o3, an2(n5, t3, r4, o3, e3, a3));
        });
        var y4 = f3 ? o2 : (l3 ? c3 ? ri2 : ti2 : c3 ? ku2 : Au2)(e3);
        return Pt2(y4 || e3, function(n5, o3) {
          y4 && (n5 = e3[o3 = n5]), Qr2(u3, o3, an2(n5, t3, r4, o3, e3, a3));
        }), u3;
      }
      function un2(e3, t3, r4) {
        var n4 = r4.length;
        if (null == e3) return !n4;
        for (e3 = Ee3(e3); n4--; ) {
          var i3 = r4[n4], a3 = t3[i3], u3 = e3[i3];
          if (u3 === o2 && !(i3 in e3) || !a3(u3)) return false;
        }
        return true;
      }
      function sn2(e3, t3, r4) {
        if ("function" != typeof e3) throw new xe3(i2);
        return Ci2(function() {
          e3.apply(o2, r4);
        }, t3);
      }
      function cn2(e3, t3, r4, n4) {
        var o3 = -1, i3 = jt2, a3 = true, u3 = e3.length, s3 = [], c3 = t3.length;
        if (!u3) return s3;
        r4 && (t3 = kt2(t3, Kt2(r4))), n4 ? (i3 = At2, a3 = false) : t3.length >= 200 && (i3 = $t2, a3 = false, t3 = new Gr2(t3));
        e: for (; ++o3 < u3; ) {
          var l3 = e3[o3], f3 = null == r4 ? l3 : r4(l3);
          if (l3 = n4 || 0 !== l3 ? l3 : 0, a3 && f3 == f3) {
            for (var h3 = c3; h3--; ) if (t3[h3] === f3) continue e;
            s3.push(l3);
          } else i3(t3, f3, n4) || s3.push(l3);
        }
        return s3;
      }
      Lr2.templateSettings = { escape: K3, evaluate: Z2, interpolate: $3, variable: "", imports: { _: Lr2 } }, Lr2.prototype = Fr2.prototype, Lr2.prototype.constructor = Lr2, Br2.prototype = Ur2(Fr2.prototype), Br2.prototype.constructor = Br2, zr2.prototype = Ur2(Fr2.prototype), zr2.prototype.constructor = zr2, Vr2.prototype.clear = function() {
        this.__data__ = Tr2 ? Tr2(null) : {}, this.size = 0;
      }, Vr2.prototype.delete = function(e3) {
        var t3 = this.has(e3) && delete this.__data__[e3];
        return this.size -= t3 ? 1 : 0, t3;
      }, Vr2.prototype.get = function(e3) {
        var t3 = this.__data__;
        if (Tr2) {
          var r4 = t3[e3];
          return r4 === a2 ? o2 : r4;
        }
        return Ie3.call(t3, e3) ? t3[e3] : o2;
      }, Vr2.prototype.has = function(e3) {
        var t3 = this.__data__;
        return Tr2 ? t3[e3] !== o2 : Ie3.call(t3, e3);
      }, Vr2.prototype.set = function(e3, t3) {
        var r4 = this.__data__;
        return this.size += this.has(e3) ? 0 : 1, r4[e3] = Tr2 && t3 === o2 ? a2 : t3, this;
      }, Wr2.prototype.clear = function() {
        this.__data__ = [], this.size = 0;
      }, Wr2.prototype.delete = function(e3) {
        var t3 = this.__data__, r4 = Jr2(t3, e3);
        return !(r4 < 0 || (r4 == t3.length - 1 ? t3.pop() : Ye3.call(t3, r4, 1), --this.size, 0));
      }, Wr2.prototype.get = function(e3) {
        var t3 = this.__data__, r4 = Jr2(t3, e3);
        return r4 < 0 ? o2 : t3[r4][1];
      }, Wr2.prototype.has = function(e3) {
        return Jr2(this.__data__, e3) > -1;
      }, Wr2.prototype.set = function(e3, t3) {
        var r4 = this.__data__, n4 = Jr2(r4, e3);
        return n4 < 0 ? (++this.size, r4.push([e3, t3])) : r4[n4][1] = t3, this;
      }, qr2.prototype.clear = function() {
        this.size = 0, this.__data__ = { hash: new Vr2(), map: new (Or2 || Wr2)(), string: new Vr2() };
      }, qr2.prototype.delete = function(e3) {
        var t3 = ui2(this, e3).delete(e3);
        return this.size -= t3 ? 1 : 0, t3;
      }, qr2.prototype.get = function(e3) {
        return ui2(this, e3).get(e3);
      }, qr2.prototype.has = function(e3) {
        return ui2(this, e3).has(e3);
      }, qr2.prototype.set = function(e3, t3) {
        var r4 = ui2(this, e3), n4 = r4.size;
        return r4.set(e3, t3), this.size += r4.size == n4 ? 0 : 1, this;
      }, Gr2.prototype.add = Gr2.prototype.push = function(e3) {
        return this.__data__.set(e3, a2), this;
      }, Gr2.prototype.has = function(e3) {
        return this.__data__.has(e3);
      }, Hr2.prototype.clear = function() {
        this.__data__ = new Wr2(), this.size = 0;
      }, Hr2.prototype.delete = function(e3) {
        var t3 = this.__data__, r4 = t3.delete(e3);
        return this.size = t3.size, r4;
      }, Hr2.prototype.get = function(e3) {
        return this.__data__.get(e3);
      }, Hr2.prototype.has = function(e3) {
        return this.__data__.has(e3);
      }, Hr2.prototype.set = function(e3, t3) {
        var r4 = this.__data__;
        if (r4 instanceof Wr2) {
          var n4 = r4.__data__;
          if (!Or2 || n4.length < 199) return n4.push([e3, t3]), this.size = ++r4.size, this;
          r4 = this.__data__ = new qr2(n4);
        }
        return r4.set(e3, t3), this.size = r4.size, this;
      };
      var ln2 = ko2(mn2), fn4 = ko2(gn2, true);
      function hn2(e3, t3) {
        var r4 = true;
        return ln2(e3, function(e4, n4, o3) {
          return r4 = !!t3(e4, n4, o3);
        }), r4;
      }
      function dn2(e3, t3, r4) {
        for (var n4 = -1, i3 = e3.length; ++n4 < i3; ) {
          var a3 = e3[n4], u3 = t3(a3);
          if (null != u3 && (s3 === o2 ? u3 == u3 && !uu2(u3) : r4(u3, s3))) var s3 = u3, c3 = a3;
        }
        return c3;
      }
      function pn2(e3, t3) {
        var r4 = [];
        return ln2(e3, function(e4, n4, o3) {
          t3(e4, n4, o3) && r4.push(e4);
        }), r4;
      }
      function vn2(e3, t3, r4, n4, o3) {
        var i3 = -1, a3 = e3.length;
        for (r4 || (r4 = vi2), o3 || (o3 = []); ++i3 < a3; ) {
          var u3 = e3[i3];
          t3 > 0 && r4(u3) ? t3 > 1 ? vn2(u3, t3 - 1, r4, n4, o3) : Rt2(o3, u3) : n4 || (o3[o3.length] = u3);
        }
        return o3;
      }
      var yn2 = Ro2(), bn2 = Ro2(true);
      function mn2(e3, t3) {
        return e3 && yn2(e3, t3, Au2);
      }
      function gn2(e3, t3) {
        return e3 && bn2(e3, t3, Au2);
      }
      function _n2(e3, t3) {
        return Ct2(t3, function(t4) {
          return Za2(e3[t4]);
        });
      }
      function wn2(e3, t3) {
        for (var r4 = 0, n4 = (t3 = bo2(t3, e3)).length; null != e3 && r4 < n4; ) e3 = e3[Di2(t3[r4++])];
        return r4 && r4 == n4 ? e3 : o2;
      }
      function On2(e3, t3, r4) {
        var n4 = t3(e3);
        return Wa2(e3) ? n4 : Rt2(n4, r4(e3));
      }
      function Sn2(e3) {
        return null == e3 ? e3 === o2 ? "[object Undefined]" : "[object Null]" : Qe3 && Qe3 in Ee3(e3) ? function(e4) {
          var t3 = Ie3.call(e4, Qe3), r4 = e4[Qe3];
          try {
            e4[Qe3] = o2;
            var n4 = true;
          } catch (e5) {
          }
          var i3 = De3.call(e4);
          return n4 && (t3 ? e4[Qe3] = r4 : delete e4[Qe3]), i3;
        }(e3) : function(e4) {
          return De3.call(e4);
        }(e3);
      }
      function En2(e3, t3) {
        return e3 > t3;
      }
      function Pn2(e3, t3) {
        return null != e3 && Ie3.call(e3, t3);
      }
      function Tn2(e3, t3) {
        return null != e3 && t3 in Ee3(e3);
      }
      function xn2(e3, t3, r4) {
        for (var i3 = r4 ? At2 : jt2, a3 = e3[0].length, u3 = e3.length, s3 = u3, c3 = n3(u3), l3 = 1 / 0, f3 = []; s3--; ) {
          var h3 = e3[s3];
          s3 && t3 && (h3 = kt2(h3, Kt2(t3))), l3 = yr2(h3.length, l3), c3[s3] = !r4 && (t3 || a3 >= 120 && h3.length >= 120) ? new Gr2(s3 && h3) : o2;
        }
        h3 = e3[0];
        var d3 = -1, p4 = c3[0];
        e: for (; ++d3 < a3 && f3.length < l3; ) {
          var v5 = h3[d3], y4 = t3 ? t3(v5) : v5;
          if (v5 = r4 || 0 !== v5 ? v5 : 0, !(p4 ? $t2(p4, y4) : i3(f3, y4, r4))) {
            for (s3 = u3; --s3; ) {
              var b3 = c3[s3];
              if (!(b3 ? $t2(b3, y4) : i3(e3[s3], y4, r4))) continue e;
            }
            p4 && p4.push(y4), f3.push(v5);
          }
        }
        return f3;
      }
      function Cn2(e3, t3, r4) {
        var n4 = null == (e3 = Pi2(e3, t3 = bo2(t3, e3))) ? e3 : e3[Di2(Ki2(t3))];
        return null == n4 ? o2 : St2(n4, e3, r4);
      }
      function jn2(e3) {
        return eu2(e3) && Sn2(e3) == v3;
      }
      function An2(e3, t3, r4, n4, i3) {
        return e3 === t3 || (null == e3 || null == t3 || !eu2(e3) && !eu2(t3) ? e3 != e3 && t3 != t3 : function(e4, t4, r5, n5, i4, a3) {
          var u3 = Wa2(e4), s3 = Wa2(t4), c3 = u3 ? y3 : hi2(e4), l3 = s3 ? y3 : hi2(t4), f3 = (c3 = c3 == v3 ? E2 : c3) == E2, h3 = (l3 = l3 == v3 ? E2 : l3) == E2, d3 = c3 == l3;
          if (d3 && Ya2(e4)) {
            if (!Ya2(t4)) return false;
            u3 = true, f3 = false;
          }
          if (d3 && !f3) return a3 || (a3 = new Hr2()), u3 || su2(e4) ? Jo2(e4, t4, r5, n5, i4, a3) : function(e5, t5, r6, n6, o3, i5, a4) {
            switch (r6) {
              case R2:
                if (e5.byteLength != t5.byteLength || e5.byteOffset != t5.byteOffset) return false;
                e5 = e5.buffer, t5 = t5.buffer;
              case k2:
                return !(e5.byteLength != t5.byteLength || !i5(new Ve3(e5), new Ve3(t5)));
              case b2:
              case m2:
              case S2:
                return Fa2(+e5, +t5);
              case g2:
                return e5.name == t5.name && e5.message == t5.message;
              case T2:
              case C2:
                return e5 == t5 + "";
              case O2:
                var u4 = or2;
              case x3:
                var s4 = 1 & n6;
                if (u4 || (u4 = ur2), e5.size != t5.size && !s4) return false;
                var c4 = a4.get(e5);
                if (c4) return c4 == t5;
                n6 |= 2, a4.set(e5, t5);
                var l4 = Jo2(u4(e5), u4(t5), n6, o3, i5, a4);
                return a4.delete(e5), l4;
              case j2:
                if (Nr2) return Nr2.call(e5) == Nr2.call(t5);
            }
            return false;
          }(e4, t4, c3, r5, n5, i4, a3);
          if (!(1 & r5)) {
            var p4 = f3 && Ie3.call(e4, "__wrapped__"), _3 = h3 && Ie3.call(t4, "__wrapped__");
            if (p4 || _3) {
              var w3 = p4 ? e4.value() : e4, P3 = _3 ? t4.value() : t4;
              return a3 || (a3 = new Hr2()), i4(w3, P3, r5, n5, a3);
            }
          }
          return !!d3 && (a3 || (a3 = new Hr2()), function(e5, t5, r6, n6, i5, a4) {
            var u4 = 1 & r6, s4 = ti2(e5), c4 = s4.length;
            if (c4 != ti2(t5).length && !u4) return false;
            for (var l4 = c4; l4--; ) {
              var f4 = s4[l4];
              if (!(u4 ? f4 in t5 : Ie3.call(t5, f4))) return false;
            }
            var h4 = a4.get(e5), d4 = a4.get(t5);
            if (h4 && d4) return h4 == t5 && d4 == e5;
            var p5 = true;
            a4.set(e5, t5), a4.set(t5, e5);
            for (var v5 = u4; ++l4 < c4; ) {
              var y4 = e5[f4 = s4[l4]], b3 = t5[f4];
              if (n6) var m3 = u4 ? n6(b3, y4, f4, t5, e5, a4) : n6(y4, b3, f4, e5, t5, a4);
              if (!(m3 === o2 ? y4 === b3 || i5(y4, b3, r6, n6, a4) : m3)) {
                p5 = false;
                break;
              }
              v5 || (v5 = "constructor" == f4);
            }
            if (p5 && !v5) {
              var g3 = e5.constructor, _4 = t5.constructor;
              g3 == _4 || !("constructor" in e5) || !("constructor" in t5) || "function" == typeof g3 && g3 instanceof g3 && "function" == typeof _4 && _4 instanceof _4 || (p5 = false);
            }
            return a4.delete(e5), a4.delete(t5), p5;
          }(e4, t4, r5, n5, i4, a3));
        }(e3, t3, r4, n4, An2, i3));
      }
      function kn2(e3, t3, r4, n4) {
        var i3 = r4.length, a3 = i3, u3 = !n4;
        if (null == e3) return !a3;
        for (e3 = Ee3(e3); i3--; ) {
          var s3 = r4[i3];
          if (u3 && s3[2] ? s3[1] !== e3[s3[0]] : !(s3[0] in e3)) return false;
        }
        for (; ++i3 < a3; ) {
          var c3 = (s3 = r4[i3])[0], l3 = e3[c3], f3 = s3[1];
          if (u3 && s3[2]) {
            if (l3 === o2 && !(c3 in e3)) return false;
          } else {
            var h3 = new Hr2();
            if (n4) var d3 = n4(l3, f3, c3, e3, t3, h3);
            if (!(d3 === o2 ? An2(f3, l3, 3, n4, h3) : d3)) return false;
          }
        }
        return true;
      }
      function Rn2(e3) {
        return !(!Ja2(e3) || (t3 = e3, Ne3 && Ne3 in t3)) && (Za2(e3) ? Fe3 : ve2).test(Li2(e3));
        var t3;
      }
      function In2(e3) {
        return "function" == typeof e3 ? e3 : null == e3 ? rs2 : "object" == typeof e3 ? Wa2(e3) ? Un2(e3[0], e3[1]) : Ln2(e3) : fs2(e3);
      }
      function Mn2(e3) {
        if (!wi2(e3)) return pr2(e3);
        var t3 = [];
        for (var r4 in Ee3(e3)) Ie3.call(e3, r4) && "constructor" != r4 && t3.push(r4);
        return t3;
      }
      function Nn2(e3, t3) {
        return e3 < t3;
      }
      function Dn2(e3, t3) {
        var r4 = -1, o3 = Ga2(e3) ? n3(e3.length) : [];
        return ln2(e3, function(e4, n4, i3) {
          o3[++r4] = t3(e4, n4, i3);
        }), o3;
      }
      function Ln2(e3) {
        var t3 = si2(e3);
        return 1 == t3.length && t3[0][2] ? Si2(t3[0][0], t3[0][1]) : function(r4) {
          return r4 === e3 || kn2(r4, e3, t3);
        };
      }
      function Un2(e3, t3) {
        return mi2(e3) && Oi2(t3) ? Si2(Di2(e3), t3) : function(r4) {
          var n4 = Pu2(r4, e3);
          return n4 === o2 && n4 === t3 ? Tu2(r4, e3) : An2(t3, n4, 3);
        };
      }
      function Fn2(e3, t3, r4, n4, i3) {
        e3 !== t3 && yn2(t3, function(a3, u3) {
          if (i3 || (i3 = new Hr2()), Ja2(a3)) !function(e4, t4, r5, n5, i4, a4, u4) {
            var s4 = Ti2(e4, r5), c3 = Ti2(t4, r5), l3 = u4.get(c3);
            if (l3) $r2(e4, r5, l3);
            else {
              var f3 = a4 ? a4(s4, c3, r5 + "", e4, t4, u4) : o2, h3 = f3 === o2;
              if (h3) {
                var d3 = Wa2(c3), p4 = !d3 && Ya2(c3), v5 = !d3 && !p4 && su2(c3);
                f3 = c3, d3 || p4 || v5 ? Wa2(s4) ? f3 = s4 : Ha2(s4) ? f3 = xo2(s4) : p4 ? (h3 = false, f3 = wo2(c3, true)) : v5 ? (h3 = false, f3 = So2(c3, true)) : f3 = [] : nu2(c3) || Va2(c3) ? (f3 = s4, Va2(s4) ? f3 = yu2(s4) : Ja2(s4) && !Za2(s4) || (f3 = pi2(c3))) : h3 = false;
              }
              h3 && (u4.set(c3, f3), i4(f3, c3, n5, a4, u4), u4.delete(c3)), $r2(e4, r5, f3);
            }
          }(e3, t3, u3, r4, Fn2, n4, i3);
          else {
            var s3 = n4 ? n4(Ti2(e3, u3), a3, u3 + "", e3, t3, i3) : o2;
            s3 === o2 && (s3 = a3), $r2(e3, u3, s3);
          }
        }, ku2);
      }
      function Bn2(e3, t3) {
        var r4 = e3.length;
        if (r4) return yi2(t3 += t3 < 0 ? r4 : 0, r4) ? e3[t3] : o2;
      }
      function zn2(e3, t3, r4) {
        t3 = t3.length ? kt2(t3, function(e4) {
          return Wa2(e4) ? function(t4) {
            return wn2(t4, 1 === e4.length ? e4[0] : e4);
          } : e4;
        }) : [rs2];
        var n4 = -1;
        t3 = kt2(t3, Kt2(ai2()));
        var o3 = Dn2(e3, function(e4, r5, o4) {
          var i3 = kt2(t3, function(t4) {
            return t4(e4);
          });
          return { criteria: i3, index: ++n4, value: e4 };
        });
        return function(e4) {
          var t4 = e4.length;
          for (e4.sort(function(e5, t5) {
            return function(e6, t6, r5) {
              for (var n5 = -1, o4 = e6.criteria, i3 = t6.criteria, a3 = o4.length, u3 = r5.length; ++n5 < a3; ) {
                var s3 = Eo2(o4[n5], i3[n5]);
                if (s3) return n5 >= u3 ? s3 : s3 * ("desc" == r5[n5] ? -1 : 1);
              }
              return e6.index - t6.index;
            }(e5, t5, r4);
          }); t4--; ) e4[t4] = e4[t4].value;
          return e4;
        }(o3);
      }
      function Vn2(e3, t3, r4) {
        for (var n4 = -1, o3 = t3.length, i3 = {}; ++n4 < o3; ) {
          var a3 = t3[n4], u3 = wn2(e3, a3);
          r4(u3, a3) && Zn2(i3, bo2(a3, e3), u3);
        }
        return i3;
      }
      function Wn2(e3, t3, r4, n4) {
        var o3 = n4 ? Bt2 : Ft2, i3 = -1, a3 = t3.length, u3 = e3;
        for (e3 === t3 && (t3 = xo2(t3)), r4 && (u3 = kt2(e3, Kt2(r4))); ++i3 < a3; ) for (var s3 = 0, c3 = t3[i3], l3 = r4 ? r4(c3) : c3; (s3 = o3(u3, l3, s3, n4)) > -1; ) u3 !== e3 && Ye3.call(u3, s3, 1), Ye3.call(e3, s3, 1);
        return e3;
      }
      function qn2(e3, t3) {
        for (var r4 = e3 ? t3.length : 0, n4 = r4 - 1; r4--; ) {
          var o3 = t3[r4];
          if (r4 == n4 || o3 !== i3) {
            var i3 = o3;
            yi2(o3) ? Ye3.call(e3, o3, 1) : so2(e3, o3);
          }
        }
        return e3;
      }
      function Gn2(e3, t3) {
        return e3 + dt3(gr2() * (t3 - e3 + 1));
      }
      function Hn2(e3, t3) {
        var r4 = "";
        if (!e3 || t3 < 1 || t3 > f2) return r4;
        do {
          t3 % 2 && (r4 += e3), (t3 = dt3(t3 / 2)) && (e3 += e3);
        } while (t3);
        return r4;
      }
      function Yn2(e3, t3) {
        return ji2(Ei2(e3, t3, rs2), e3 + "");
      }
      function Xn2(e3) {
        return Xr2(Fu2(e3));
      }
      function Kn2(e3, t3) {
        var r4 = Fu2(e3);
        return Ri2(r4, on4(t3, 0, r4.length));
      }
      function Zn2(e3, t3, r4, n4) {
        if (!Ja2(e3)) return e3;
        for (var i3 = -1, a3 = (t3 = bo2(t3, e3)).length, u3 = a3 - 1, s3 = e3; null != s3 && ++i3 < a3; ) {
          var c3 = Di2(t3[i3]), l3 = r4;
          if ("__proto__" === c3 || "constructor" === c3 || "prototype" === c3) return e3;
          if (i3 != u3) {
            var f3 = s3[c3];
            (l3 = n4 ? n4(f3, c3, s3) : o2) === o2 && (l3 = Ja2(f3) ? f3 : yi2(t3[i3 + 1]) ? [] : {});
          }
          Qr2(s3, c3, l3), s3 = s3[c3];
        }
        return e3;
      }
      var $n2 = xr2 ? function(e3, t3) {
        return xr2.set(e3, t3), e3;
      } : rs2, Qn2 = et3 ? function(e3, t3) {
        return et3(e3, "toString", { configurable: true, enumerable: false, value: Ju2(t3), writable: true });
      } : rs2;
      function Jn2(e3) {
        return Ri2(Fu2(e3));
      }
      function eo2(e3, t3, r4) {
        var o3 = -1, i3 = e3.length;
        t3 < 0 && (t3 = -t3 > i3 ? 0 : i3 + t3), (r4 = r4 > i3 ? i3 : r4) < 0 && (r4 += i3), i3 = t3 > r4 ? 0 : r4 - t3 >>> 0, t3 >>>= 0;
        for (var a3 = n3(i3); ++o3 < i3; ) a3[o3] = e3[o3 + t3];
        return a3;
      }
      function to2(e3, t3) {
        var r4;
        return ln2(e3, function(e4, n4, o3) {
          return !(r4 = t3(e4, n4, o3));
        }), !!r4;
      }
      function ro2(e3, t3, r4) {
        var n4 = 0, o3 = null == e3 ? n4 : e3.length;
        if ("number" == typeof t3 && t3 == t3 && o3 <= 2147483647) {
          for (; n4 < o3; ) {
            var i3 = n4 + o3 >>> 1, a3 = e3[i3];
            null !== a3 && !uu2(a3) && (r4 ? a3 <= t3 : a3 < t3) ? n4 = i3 + 1 : o3 = i3;
          }
          return o3;
        }
        return no2(e3, t3, rs2, r4);
      }
      function no2(e3, t3, r4, n4) {
        var i3 = 0, a3 = null == e3 ? 0 : e3.length;
        if (0 === a3) return 0;
        for (var u3 = (t3 = r4(t3)) != t3, s3 = null === t3, c3 = uu2(t3), l3 = t3 === o2; i3 < a3; ) {
          var f3 = dt3((i3 + a3) / 2), h3 = r4(e3[f3]), d3 = h3 !== o2, p4 = null === h3, v5 = h3 == h3, y4 = uu2(h3);
          if (u3) var b3 = n4 || v5;
          else b3 = l3 ? v5 && (n4 || d3) : s3 ? v5 && d3 && (n4 || !p4) : c3 ? v5 && d3 && !p4 && (n4 || !y4) : !p4 && !y4 && (n4 ? h3 <= t3 : h3 < t3);
          b3 ? i3 = f3 + 1 : a3 = f3;
        }
        return yr2(a3, 4294967294);
      }
      function oo2(e3, t3) {
        for (var r4 = -1, n4 = e3.length, o3 = 0, i3 = []; ++r4 < n4; ) {
          var a3 = e3[r4], u3 = t3 ? t3(a3) : a3;
          if (!r4 || !Fa2(u3, s3)) {
            var s3 = u3;
            i3[o3++] = 0 === a3 ? 0 : a3;
          }
        }
        return i3;
      }
      function io2(e3) {
        return "number" == typeof e3 ? e3 : uu2(e3) ? h2 : +e3;
      }
      function ao2(e3) {
        if ("string" == typeof e3) return e3;
        if (Wa2(e3)) return kt2(e3, ao2) + "";
        if (uu2(e3)) return Dr2 ? Dr2.call(e3) : "";
        var t3 = e3 + "";
        return "0" == t3 && 1 / e3 == -1 / 0 ? "-0" : t3;
      }
      function uo2(e3, t3, r4) {
        var n4 = -1, o3 = jt2, i3 = e3.length, a3 = true, u3 = [], s3 = u3;
        if (r4) a3 = false, o3 = At2;
        else if (i3 >= 200) {
          var c3 = t3 ? null : Yo2(e3);
          if (c3) return ur2(c3);
          a3 = false, o3 = $t2, s3 = new Gr2();
        } else s3 = t3 ? [] : u3;
        e: for (; ++n4 < i3; ) {
          var l3 = e3[n4], f3 = t3 ? t3(l3) : l3;
          if (l3 = r4 || 0 !== l3 ? l3 : 0, a3 && f3 == f3) {
            for (var h3 = s3.length; h3--; ) if (s3[h3] === f3) continue e;
            t3 && s3.push(f3), u3.push(l3);
          } else o3(s3, f3, r4) || (s3 !== u3 && s3.push(f3), u3.push(l3));
        }
        return u3;
      }
      function so2(e3, t3) {
        return null == (e3 = Pi2(e3, t3 = bo2(t3, e3))) || delete e3[Di2(Ki2(t3))];
      }
      function co2(e3, t3, r4, n4) {
        return Zn2(e3, t3, r4(wn2(e3, t3)), n4);
      }
      function lo2(e3, t3, r4, n4) {
        for (var o3 = e3.length, i3 = n4 ? o3 : -1; (n4 ? i3-- : ++i3 < o3) && t3(e3[i3], i3, e3); ) ;
        return r4 ? eo2(e3, n4 ? 0 : i3, n4 ? i3 + 1 : o3) : eo2(e3, n4 ? i3 + 1 : 0, n4 ? o3 : i3);
      }
      function fo2(e3, t3) {
        var r4 = e3;
        return r4 instanceof zr2 && (r4 = r4.value()), It2(t3, function(e4, t4) {
          return t4.func.apply(t4.thisArg, Rt2([e4], t4.args));
        }, r4);
      }
      function ho2(e3, t3, r4) {
        var o3 = e3.length;
        if (o3 < 2) return o3 ? uo2(e3[0]) : [];
        for (var i3 = -1, a3 = n3(o3); ++i3 < o3; ) for (var u3 = e3[i3], s3 = -1; ++s3 < o3; ) s3 != i3 && (a3[i3] = cn2(a3[i3] || u3, e3[s3], t3, r4));
        return uo2(vn2(a3, 1), t3, r4);
      }
      function po2(e3, t3, r4) {
        for (var n4 = -1, i3 = e3.length, a3 = t3.length, u3 = {}; ++n4 < i3; ) {
          var s3 = n4 < a3 ? t3[n4] : o2;
          r4(u3, e3[n4], s3);
        }
        return u3;
      }
      function vo2(e3) {
        return Ha2(e3) ? e3 : [];
      }
      function yo2(e3) {
        return "function" == typeof e3 ? e3 : rs2;
      }
      function bo2(e3, t3) {
        return Wa2(e3) ? e3 : mi2(e3, t3) ? [e3] : Ni2(bu2(e3));
      }
      var mo2 = Yn2;
      function go2(e3, t3, r4) {
        var n4 = e3.length;
        return r4 = r4 === o2 ? n4 : r4, !t3 && r4 >= n4 ? e3 : eo2(e3, t3, r4);
      }
      var _o2 = at3 || function(e3) {
        return ft2.clearTimeout(e3);
      };
      function wo2(e3, t3) {
        if (t3) return e3.slice();
        var r4 = e3.length, n4 = We3 ? We3(r4) : new e3.constructor(r4);
        return e3.copy(n4), n4;
      }
      function Oo2(e3) {
        var t3 = new e3.constructor(e3.byteLength);
        return new Ve3(t3).set(new Ve3(e3)), t3;
      }
      function So2(e3, t3) {
        var r4 = t3 ? Oo2(e3.buffer) : e3.buffer;
        return new e3.constructor(r4, e3.byteOffset, e3.length);
      }
      function Eo2(e3, t3) {
        if (e3 !== t3) {
          var r4 = e3 !== o2, n4 = null === e3, i3 = e3 == e3, a3 = uu2(e3), u3 = t3 !== o2, s3 = null === t3, c3 = t3 == t3, l3 = uu2(t3);
          if (!s3 && !l3 && !a3 && e3 > t3 || a3 && u3 && c3 && !s3 && !l3 || n4 && u3 && c3 || !r4 && c3 || !i3) return 1;
          if (!n4 && !a3 && !l3 && e3 < t3 || l3 && r4 && i3 && !n4 && !a3 || s3 && r4 && i3 || !u3 && i3 || !c3) return -1;
        }
        return 0;
      }
      function Po2(e3, t3, r4, o3) {
        for (var i3 = -1, a3 = e3.length, u3 = r4.length, s3 = -1, c3 = t3.length, l3 = vr2(a3 - u3, 0), f3 = n3(c3 + l3), h3 = !o3; ++s3 < c3; ) f3[s3] = t3[s3];
        for (; ++i3 < u3; ) (h3 || i3 < a3) && (f3[r4[i3]] = e3[i3]);
        for (; l3--; ) f3[s3++] = e3[i3++];
        return f3;
      }
      function To2(e3, t3, r4, o3) {
        for (var i3 = -1, a3 = e3.length, u3 = -1, s3 = r4.length, c3 = -1, l3 = t3.length, f3 = vr2(a3 - s3, 0), h3 = n3(f3 + l3), d3 = !o3; ++i3 < f3; ) h3[i3] = e3[i3];
        for (var p4 = i3; ++c3 < l3; ) h3[p4 + c3] = t3[c3];
        for (; ++u3 < s3; ) (d3 || i3 < a3) && (h3[p4 + r4[u3]] = e3[i3++]);
        return h3;
      }
      function xo2(e3, t3) {
        var r4 = -1, o3 = e3.length;
        for (t3 || (t3 = n3(o3)); ++r4 < o3; ) t3[r4] = e3[r4];
        return t3;
      }
      function Co2(e3, t3, r4, n4) {
        var i3 = !r4;
        r4 || (r4 = {});
        for (var a3 = -1, u3 = t3.length; ++a3 < u3; ) {
          var s3 = t3[a3], c3 = n4 ? n4(r4[s3], e3[s3], s3, r4, e3) : o2;
          c3 === o2 && (c3 = e3[s3]), i3 ? rn2(r4, s3, c3) : Qr2(r4, s3, c3);
        }
        return r4;
      }
      function jo2(e3, t3) {
        return function(r4, n4) {
          var o3 = Wa2(r4) ? Et2 : en2, i3 = t3 ? t3() : {};
          return o3(r4, e3, ai2(n4, 2), i3);
        };
      }
      function Ao2(e3) {
        return Yn2(function(t3, r4) {
          var n4 = -1, i3 = r4.length, a3 = i3 > 1 ? r4[i3 - 1] : o2, u3 = i3 > 2 ? r4[2] : o2;
          for (a3 = e3.length > 3 && "function" == typeof a3 ? (i3--, a3) : o2, u3 && bi2(r4[0], r4[1], u3) && (a3 = i3 < 3 ? o2 : a3, i3 = 1), t3 = Ee3(t3); ++n4 < i3; ) {
            var s3 = r4[n4];
            s3 && e3(t3, s3, n4, a3);
          }
          return t3;
        });
      }
      function ko2(e3, t3) {
        return function(r4, n4) {
          if (null == r4) return r4;
          if (!Ga2(r4)) return e3(r4, n4);
          for (var o3 = r4.length, i3 = t3 ? o3 : -1, a3 = Ee3(r4); (t3 ? i3-- : ++i3 < o3) && false !== n4(a3[i3], i3, a3); ) ;
          return r4;
        };
      }
      function Ro2(e3) {
        return function(t3, r4, n4) {
          for (var o3 = -1, i3 = Ee3(t3), a3 = n4(t3), u3 = a3.length; u3--; ) {
            var s3 = a3[e3 ? u3 : ++o3];
            if (false === r4(i3[s3], s3, i3)) break;
          }
          return t3;
        };
      }
      function Io2(e3) {
        return function(t3) {
          var r4 = nr2(t3 = bu2(t3)) ? lr2(t3) : o2, n4 = r4 ? r4[0] : t3.charAt(0), i3 = r4 ? go2(r4, 1).join("") : t3.slice(1);
          return n4[e3]() + i3;
        };
      }
      function Mo2(e3) {
        return function(t3) {
          return It2(Zu2(Vu2(t3).replace(Ze2, "")), e3, "");
        };
      }
      function No2(e3) {
        return function() {
          var t3 = arguments;
          switch (t3.length) {
            case 0:
              return new e3();
            case 1:
              return new e3(t3[0]);
            case 2:
              return new e3(t3[0], t3[1]);
            case 3:
              return new e3(t3[0], t3[1], t3[2]);
            case 4:
              return new e3(t3[0], t3[1], t3[2], t3[3]);
            case 5:
              return new e3(t3[0], t3[1], t3[2], t3[3], t3[4]);
            case 6:
              return new e3(t3[0], t3[1], t3[2], t3[3], t3[4], t3[5]);
            case 7:
              return new e3(t3[0], t3[1], t3[2], t3[3], t3[4], t3[5], t3[6]);
          }
          var r4 = Ur2(e3.prototype), n4 = e3.apply(r4, t3);
          return Ja2(n4) ? n4 : r4;
        };
      }
      function Do2(e3) {
        return function(t3, r4, n4) {
          var i3 = Ee3(t3);
          if (!Ga2(t3)) {
            var a3 = ai2(r4, 3);
            t3 = Au2(t3), r4 = function(e4) {
              return a3(i3[e4], e4, i3);
            };
          }
          var u3 = e3(t3, r4, n4);
          return u3 > -1 ? i3[a3 ? t3[u3] : u3] : o2;
        };
      }
      function Lo2(e3) {
        return ei2(function(t3) {
          var r4 = t3.length, n4 = r4, a3 = Br2.prototype.thru;
          for (e3 && t3.reverse(); n4--; ) {
            var u3 = t3[n4];
            if ("function" != typeof u3) throw new xe3(i2);
            if (a3 && !s3 && "wrapper" == oi2(u3)) var s3 = new Br2([], true);
          }
          for (n4 = s3 ? n4 : r4; ++n4 < r4; ) {
            var c3 = oi2(u3 = t3[n4]), l3 = "wrapper" == c3 ? ni2(u3) : o2;
            s3 = l3 && gi2(l3[0]) && 424 == l3[1] && !l3[4].length && 1 == l3[9] ? s3[oi2(l3[0])].apply(s3, l3[3]) : 1 == u3.length && gi2(u3) ? s3[c3]() : s3.thru(u3);
          }
          return function() {
            var e4 = arguments, n5 = e4[0];
            if (s3 && 1 == e4.length && Wa2(n5)) return s3.plant(n5).value();
            for (var o3 = 0, i3 = r4 ? t3[o3].apply(this, e4) : n5; ++o3 < r4; ) i3 = t3[o3].call(this, i3);
            return i3;
          };
        });
      }
      function Uo2(e3, t3, r4, i3, a3, u3, s3, l3, f3, h3) {
        var d3 = t3 & c2, p4 = 1 & t3, v5 = 2 & t3, y4 = 24 & t3, b3 = 512 & t3, m3 = v5 ? o2 : No2(e3);
        return function c3() {
          for (var g3 = arguments.length, _3 = n3(g3), w3 = g3; w3--; ) _3[w3] = arguments[w3];
          if (y4) var O3 = ii2(c3), S3 = function(e4, t4) {
            for (var r5 = e4.length, n4 = 0; r5--; ) e4[r5] === t4 && ++n4;
            return n4;
          }(_3, O3);
          if (i3 && (_3 = Po2(_3, i3, a3, y4)), u3 && (_3 = To2(_3, u3, s3, y4)), g3 -= S3, y4 && g3 < h3) {
            var E3 = ar2(_3, O3);
            return Go2(e3, t3, Uo2, c3.placeholder, r4, _3, E3, l3, f3, h3 - g3);
          }
          var P3 = p4 ? r4 : this, T3 = v5 ? P3[e3] : e3;
          return g3 = _3.length, l3 ? _3 = function(e4, t4) {
            for (var r5 = e4.length, n4 = yr2(t4.length, r5), i4 = xo2(e4); n4--; ) {
              var a4 = t4[n4];
              e4[n4] = yi2(a4, r5) ? i4[a4] : o2;
            }
            return e4;
          }(_3, l3) : b3 && g3 > 1 && _3.reverse(), d3 && f3 < g3 && (_3.length = f3), this && this !== ft2 && this instanceof c3 && (T3 = m3 || No2(T3)), T3.apply(P3, _3);
        };
      }
      function Fo2(e3, t3) {
        return function(r4, n4) {
          return function(e4, t4, r5, n5) {
            return mn2(e4, function(e5, o3, i3) {
              t4(n5, r5(e5), o3, i3);
            }), n5;
          }(r4, e3, t3(n4), {});
        };
      }
      function Bo2(e3, t3) {
        return function(r4, n4) {
          var i3;
          if (r4 === o2 && n4 === o2) return t3;
          if (r4 !== o2 && (i3 = r4), n4 !== o2) {
            if (i3 === o2) return n4;
            "string" == typeof r4 || "string" == typeof n4 ? (r4 = ao2(r4), n4 = ao2(n4)) : (r4 = io2(r4), n4 = io2(n4)), i3 = e3(r4, n4);
          }
          return i3;
        };
      }
      function zo2(e3) {
        return ei2(function(t3) {
          return t3 = kt2(t3, Kt2(ai2())), Yn2(function(r4) {
            var n4 = this;
            return e3(t3, function(e4) {
              return St2(e4, n4, r4);
            });
          });
        });
      }
      function Vo2(e3, t3) {
        var r4 = (t3 = t3 === o2 ? " " : ao2(t3)).length;
        if (r4 < 2) return r4 ? Hn2(t3, e3) : t3;
        var n4 = Hn2(t3, ht3(e3 / cr2(t3)));
        return nr2(t3) ? go2(lr2(n4), 0, e3).join("") : n4.slice(0, e3);
      }
      function Wo2(e3) {
        return function(t3, r4, i3) {
          return i3 && "number" != typeof i3 && bi2(t3, r4, i3) && (r4 = i3 = o2), t3 = hu2(t3), r4 === o2 ? (r4 = t3, t3 = 0) : r4 = hu2(r4), function(e4, t4, r5, o3) {
            for (var i4 = -1, a3 = vr2(ht3((t4 - e4) / (r5 || 1)), 0), u3 = n3(a3); a3--; ) u3[o3 ? a3 : ++i4] = e4, e4 += r5;
            return u3;
          }(t3, r4, i3 = i3 === o2 ? t3 < r4 ? 1 : -1 : hu2(i3), e3);
        };
      }
      function qo2(e3) {
        return function(t3, r4) {
          return "string" == typeof t3 && "string" == typeof r4 || (t3 = vu2(t3), r4 = vu2(r4)), e3(t3, r4);
        };
      }
      function Go2(e3, t3, r4, n4, i3, a3, u3, c3, l3, f3) {
        var h3 = 8 & t3;
        t3 |= h3 ? s2 : 64, 4 & (t3 &= ~(h3 ? 64 : s2)) || (t3 &= -4);
        var d3 = [e3, t3, i3, h3 ? a3 : o2, h3 ? u3 : o2, h3 ? o2 : a3, h3 ? o2 : u3, c3, l3, f3], p4 = r4.apply(o2, d3);
        return gi2(e3) && xi2(p4, d3), p4.placeholder = n4, Ai2(p4, e3, t3);
      }
      function Ho2(e3) {
        var t3 = Se3[e3];
        return function(e4, r4) {
          if (e4 = vu2(e4), (r4 = null == r4 ? 0 : yr2(du2(r4), 292)) && Dt3(e4)) {
            var n4 = (bu2(e4) + "e").split("e");
            return +((n4 = (bu2(t3(n4[0] + "e" + (+n4[1] + r4))) + "e").split("e"))[0] + "e" + (+n4[1] - r4));
          }
          return t3(e4);
        };
      }
      var Yo2 = Er2 && 1 / ur2(new Er2([, -0]))[1] == l2 ? function(e3) {
        return new Er2(e3);
      } : us2;
      function Xo2(e3) {
        return function(t3) {
          var r4 = hi2(t3);
          return r4 == O2 ? or2(t3) : r4 == x3 ? sr2(t3) : function(e4, t4) {
            return kt2(t4, function(t5) {
              return [t5, e4[t5]];
            });
          }(t3, e3(t3));
        };
      }
      function Ko2(e3, t3, r4, a3, l3, f3, h3, d3) {
        var p4 = 2 & t3;
        if (!p4 && "function" != typeof e3) throw new xe3(i2);
        var v5 = a3 ? a3.length : 0;
        if (v5 || (t3 &= -97, a3 = l3 = o2), h3 = h3 === o2 ? h3 : vr2(du2(h3), 0), d3 = d3 === o2 ? d3 : du2(d3), v5 -= l3 ? l3.length : 0, 64 & t3) {
          var y4 = a3, b3 = l3;
          a3 = l3 = o2;
        }
        var m3 = p4 ? o2 : ni2(e3), g3 = [e3, t3, r4, a3, l3, y4, b3, f3, h3, d3];
        if (m3 && function(e4, t4) {
          var r5 = e4[1], n4 = t4[1], o3 = r5 | n4, i3 = o3 < 131, a4 = n4 == c2 && 8 == r5 || n4 == c2 && 256 == r5 && e4[7].length <= t4[8] || 384 == n4 && t4[7].length <= t4[8] && 8 == r5;
          if (!i3 && !a4) return e4;
          1 & n4 && (e4[2] = t4[2], o3 |= 1 & r5 ? 0 : 4);
          var s3 = t4[3];
          if (s3) {
            var l4 = e4[3];
            e4[3] = l4 ? Po2(l4, s3, t4[4]) : s3, e4[4] = l4 ? ar2(e4[3], u2) : t4[4];
          }
          (s3 = t4[5]) && (l4 = e4[5], e4[5] = l4 ? To2(l4, s3, t4[6]) : s3, e4[6] = l4 ? ar2(e4[5], u2) : t4[6]), (s3 = t4[7]) && (e4[7] = s3), n4 & c2 && (e4[8] = null == e4[8] ? t4[8] : yr2(e4[8], t4[8])), null == e4[9] && (e4[9] = t4[9]), e4[0] = t4[0], e4[1] = o3;
        }(g3, m3), e3 = g3[0], t3 = g3[1], r4 = g3[2], a3 = g3[3], l3 = g3[4], !(d3 = g3[9] = g3[9] === o2 ? p4 ? 0 : e3.length : vr2(g3[9] - v5, 0)) && 24 & t3 && (t3 &= -25), t3 && 1 != t3) _3 = 8 == t3 || 16 == t3 ? function(e4, t4, r5) {
          var i3 = No2(e4);
          return function a4() {
            for (var u3 = arguments.length, s3 = n3(u3), c3 = u3, l4 = ii2(a4); c3--; ) s3[c3] = arguments[c3];
            var f4 = u3 < 3 && s3[0] !== l4 && s3[u3 - 1] !== l4 ? [] : ar2(s3, l4);
            return (u3 -= f4.length) < r5 ? Go2(e4, t4, Uo2, a4.placeholder, o2, s3, f4, o2, o2, r5 - u3) : St2(this && this !== ft2 && this instanceof a4 ? i3 : e4, this, s3);
          };
        }(e3, t3, d3) : t3 != s2 && 33 != t3 || l3.length ? Uo2.apply(o2, g3) : function(e4, t4, r5, o3) {
          var i3 = 1 & t4, a4 = No2(e4);
          return function t5() {
            for (var u3 = -1, s3 = arguments.length, c3 = -1, l4 = o3.length, f4 = n3(l4 + s3), h4 = this && this !== ft2 && this instanceof t5 ? a4 : e4; ++c3 < l4; ) f4[c3] = o3[c3];
            for (; s3--; ) f4[c3++] = arguments[++u3];
            return St2(h4, i3 ? r5 : this, f4);
          };
        }(e3, t3, r4, a3);
        else var _3 = function(e4, t4, r5) {
          var n4 = 1 & t4, o3 = No2(e4);
          return function t5() {
            return (this && this !== ft2 && this instanceof t5 ? o3 : e4).apply(n4 ? r5 : this, arguments);
          };
        }(e3, t3, r4);
        return Ai2((m3 ? $n2 : xi2)(_3, g3), e3, t3);
      }
      function Zo2(e3, t3, r4, n4) {
        return e3 === o2 || Fa2(e3, Ae3[r4]) && !Ie3.call(n4, r4) ? t3 : e3;
      }
      function $o2(e3, t3, r4, n4, i3, a3) {
        return Ja2(e3) && Ja2(t3) && (a3.set(t3, e3), Fn2(e3, t3, o2, $o2, a3), a3.delete(t3)), e3;
      }
      function Qo2(e3) {
        return nu2(e3) ? o2 : e3;
      }
      function Jo2(e3, t3, r4, n4, i3, a3) {
        var u3 = 1 & r4, s3 = e3.length, c3 = t3.length;
        if (s3 != c3 && !(u3 && c3 > s3)) return false;
        var l3 = a3.get(e3), f3 = a3.get(t3);
        if (l3 && f3) return l3 == t3 && f3 == e3;
        var h3 = -1, d3 = true, p4 = 2 & r4 ? new Gr2() : o2;
        for (a3.set(e3, t3), a3.set(t3, e3); ++h3 < s3; ) {
          var v5 = e3[h3], y4 = t3[h3];
          if (n4) var b3 = u3 ? n4(y4, v5, h3, t3, e3, a3) : n4(v5, y4, h3, e3, t3, a3);
          if (b3 !== o2) {
            if (b3) continue;
            d3 = false;
            break;
          }
          if (p4) {
            if (!Nt2(t3, function(e4, t4) {
              if (!$t2(p4, t4) && (v5 === e4 || i3(v5, e4, r4, n4, a3))) return p4.push(t4);
            })) {
              d3 = false;
              break;
            }
          } else if (v5 !== y4 && !i3(v5, y4, r4, n4, a3)) {
            d3 = false;
            break;
          }
        }
        return a3.delete(e3), a3.delete(t3), d3;
      }
      function ei2(e3) {
        return ji2(Ei2(e3, o2, qi2), e3 + "");
      }
      function ti2(e3) {
        return On2(e3, Au2, li2);
      }
      function ri2(e3) {
        return On2(e3, ku2, fi2);
      }
      var ni2 = xr2 ? function(e3) {
        return xr2.get(e3);
      } : us2;
      function oi2(e3) {
        for (var t3 = e3.name + "", r4 = Cr2[t3], n4 = Ie3.call(Cr2, t3) ? r4.length : 0; n4--; ) {
          var o3 = r4[n4], i3 = o3.func;
          if (null == i3 || i3 == e3) return o3.name;
        }
        return t3;
      }
      function ii2(e3) {
        return (Ie3.call(Lr2, "placeholder") ? Lr2 : e3).placeholder;
      }
      function ai2() {
        var e3 = Lr2.iteratee || ns2;
        return e3 = e3 === ns2 ? In2 : e3, arguments.length ? e3(arguments[0], arguments[1]) : e3;
      }
      function ui2(e3, t3) {
        var r4, n4, o3 = e3.__data__;
        return ("string" == (n4 = typeof (r4 = t3)) || "number" == n4 || "symbol" == n4 || "boolean" == n4 ? "__proto__" !== r4 : null === r4) ? o3["string" == typeof t3 ? "string" : "hash"] : o3.map;
      }
      function si2(e3) {
        for (var t3 = Au2(e3), r4 = t3.length; r4--; ) {
          var n4 = t3[r4], o3 = e3[n4];
          t3[r4] = [n4, o3, Oi2(o3)];
        }
        return t3;
      }
      function ci2(e3, t3) {
        var r4 = function(e4, t4) {
          return null == e4 ? o2 : e4[t4];
        }(e3, t3);
        return Rn2(r4) ? r4 : o2;
      }
      var li2 = vt3 ? function(e3) {
        return null == e3 ? [] : (e3 = Ee3(e3), Ct2(vt3(e3), function(t3) {
          return He3.call(e3, t3);
        }));
      } : ps2, fi2 = vt3 ? function(e3) {
        for (var t3 = []; e3; ) Rt2(t3, li2(e3)), e3 = qe3(e3);
        return t3;
      } : ps2, hi2 = Sn2;
      function di2(e3, t3, r4) {
        for (var n4 = -1, o3 = (t3 = bo2(t3, e3)).length, i3 = false; ++n4 < o3; ) {
          var a3 = Di2(t3[n4]);
          if (!(i3 = null != e3 && r4(e3, a3))) break;
          e3 = e3[a3];
        }
        return i3 || ++n4 != o3 ? i3 : !!(o3 = null == e3 ? 0 : e3.length) && Qa2(o3) && yi2(a3, o3) && (Wa2(e3) || Va2(e3));
      }
      function pi2(e3) {
        return "function" != typeof e3.constructor || wi2(e3) ? {} : Ur2(qe3(e3));
      }
      function vi2(e3) {
        return Wa2(e3) || Va2(e3) || !!(Xe3 && e3 && e3[Xe3]);
      }
      function yi2(e3, t3) {
        var r4 = typeof e3;
        return !!(t3 = null == t3 ? f2 : t3) && ("number" == r4 || "symbol" != r4 && be2.test(e3)) && e3 > -1 && e3 % 1 == 0 && e3 < t3;
      }
      function bi2(e3, t3, r4) {
        if (!Ja2(r4)) return false;
        var n4 = typeof t3;
        return !!("number" == n4 ? Ga2(r4) && yi2(t3, r4.length) : "string" == n4 && t3 in r4) && Fa2(r4[t3], e3);
      }
      function mi2(e3, t3) {
        if (Wa2(e3)) return false;
        var r4 = typeof e3;
        return !("number" != r4 && "symbol" != r4 && "boolean" != r4 && null != e3 && !uu2(e3)) || J2.test(e3) || !Q2.test(e3) || null != t3 && e3 in Ee3(t3);
      }
      function gi2(e3) {
        var t3 = oi2(e3), r4 = Lr2[t3];
        if ("function" != typeof r4 || !(t3 in zr2.prototype)) return false;
        if (e3 === r4) return true;
        var n4 = ni2(r4);
        return !!n4 && e3 === n4[0];
      }
      (wr2 && hi2(new wr2(new ArrayBuffer(1))) != R2 || Or2 && hi2(new Or2()) != O2 || Sr2 && hi2(Sr2.resolve()) != P2 || Er2 && hi2(new Er2()) != x3 || Pr2 && hi2(new Pr2()) != A2) && (hi2 = function(e3) {
        var t3 = Sn2(e3), r4 = t3 == E2 ? e3.constructor : o2, n4 = r4 ? Li2(r4) : "";
        if (n4) switch (n4) {
          case jr2:
            return R2;
          case Ar2:
            return O2;
          case kr2:
            return P2;
          case Rr2:
            return x3;
          case Ir2:
            return A2;
        }
        return t3;
      });
      var _i2 = ke3 ? Za2 : vs2;
      function wi2(e3) {
        var t3 = e3 && e3.constructor;
        return e3 === ("function" == typeof t3 && t3.prototype || Ae3);
      }
      function Oi2(e3) {
        return e3 == e3 && !Ja2(e3);
      }
      function Si2(e3, t3) {
        return function(r4) {
          return null != r4 && r4[e3] === t3 && (t3 !== o2 || e3 in Ee3(r4));
        };
      }
      function Ei2(e3, t3, r4) {
        return t3 = vr2(t3 === o2 ? e3.length - 1 : t3, 0), function() {
          for (var o3 = arguments, i3 = -1, a3 = vr2(o3.length - t3, 0), u3 = n3(a3); ++i3 < a3; ) u3[i3] = o3[t3 + i3];
          i3 = -1;
          for (var s3 = n3(t3 + 1); ++i3 < t3; ) s3[i3] = o3[i3];
          return s3[t3] = r4(u3), St2(e3, this, s3);
        };
      }
      function Pi2(e3, t3) {
        return t3.length < 2 ? e3 : wn2(e3, eo2(t3, 0, -1));
      }
      function Ti2(e3, t3) {
        if (("constructor" !== t3 || "function" != typeof e3[t3]) && "__proto__" != t3) return e3[t3];
      }
      var xi2 = ki2($n2), Ci2 = lt3 || function(e3, t3) {
        return ft2.setTimeout(e3, t3);
      }, ji2 = ki2(Qn2);
      function Ai2(e3, t3, r4) {
        var n4 = t3 + "";
        return ji2(e3, function(e4, t4) {
          var r5 = t4.length;
          if (!r5) return e4;
          var n5 = r5 - 1;
          return t4[n5] = (r5 > 1 ? "& " : "") + t4[n5], t4 = t4.join(r5 > 2 ? ", " : " "), e4.replace(ie2, "{\n/* [wrapped with " + t4 + "] */\n");
        }(n4, function(e4, t4) {
          return Pt2(p3, function(r5) {
            var n5 = "_." + r5[0];
            t4 & r5[1] && !jt2(e4, n5) && e4.push(n5);
          }), e4.sort();
        }(function(e4) {
          var t4 = e4.match(ae2);
          return t4 ? t4[1].split(ue2) : [];
        }(n4), r4)));
      }
      function ki2(e3) {
        var t3 = 0, r4 = 0;
        return function() {
          var n4 = br2(), i3 = 16 - (n4 - r4);
          if (r4 = n4, i3 > 0) {
            if (++t3 >= 800) return arguments[0];
          } else t3 = 0;
          return e3.apply(o2, arguments);
        };
      }
      function Ri2(e3, t3) {
        var r4 = -1, n4 = e3.length, i3 = n4 - 1;
        for (t3 = t3 === o2 ? n4 : t3; ++r4 < t3; ) {
          var a3 = Gn2(r4, i3), u3 = e3[a3];
          e3[a3] = e3[r4], e3[r4] = u3;
        }
        return e3.length = t3, e3;
      }
      var Ii2, Mi2, Ni2 = (Ii2 = Ia2(function(e3) {
        var t3 = [];
        return 46 === e3.charCodeAt(0) && t3.push(""), e3.replace(ee2, function(e4, r4, n4, o3) {
          t3.push(n4 ? o3.replace(le2, "$1") : r4 || e4);
        }), t3;
      }, function(e3) {
        return 500 === Mi2.size && Mi2.clear(), e3;
      }), Mi2 = Ii2.cache, Ii2);
      function Di2(e3) {
        if ("string" == typeof e3 || uu2(e3)) return e3;
        var t3 = e3 + "";
        return "0" == t3 && 1 / e3 == -1 / 0 ? "-0" : t3;
      }
      function Li2(e3) {
        if (null != e3) {
          try {
            return Re3.call(e3);
          } catch (e4) {
          }
          try {
            return e3 + "";
          } catch (e4) {
          }
        }
        return "";
      }
      function Ui2(e3) {
        if (e3 instanceof zr2) return e3.clone();
        var t3 = new Br2(e3.__wrapped__, e3.__chain__);
        return t3.__actions__ = xo2(e3.__actions__), t3.__index__ = e3.__index__, t3.__values__ = e3.__values__, t3;
      }
      var Fi2 = Yn2(function(e3, t3) {
        return Ha2(e3) ? cn2(e3, vn2(t3, 1, Ha2, true)) : [];
      }), Bi2 = Yn2(function(e3, t3) {
        var r4 = Ki2(t3);
        return Ha2(r4) && (r4 = o2), Ha2(e3) ? cn2(e3, vn2(t3, 1, Ha2, true), ai2(r4, 2)) : [];
      }), zi2 = Yn2(function(e3, t3) {
        var r4 = Ki2(t3);
        return Ha2(r4) && (r4 = o2), Ha2(e3) ? cn2(e3, vn2(t3, 1, Ha2, true), o2, r4) : [];
      });
      function Vi2(e3, t3, r4) {
        var n4 = null == e3 ? 0 : e3.length;
        if (!n4) return -1;
        var o3 = null == r4 ? 0 : du2(r4);
        return o3 < 0 && (o3 = vr2(n4 + o3, 0)), Ut2(e3, ai2(t3, 3), o3);
      }
      function Wi2(e3, t3, r4) {
        var n4 = null == e3 ? 0 : e3.length;
        if (!n4) return -1;
        var i3 = n4 - 1;
        return r4 !== o2 && (i3 = du2(r4), i3 = r4 < 0 ? vr2(n4 + i3, 0) : yr2(i3, n4 - 1)), Ut2(e3, ai2(t3, 3), i3, true);
      }
      function qi2(e3) {
        return null != e3 && e3.length ? vn2(e3, 1) : [];
      }
      function Gi2(e3) {
        return e3 && e3.length ? e3[0] : o2;
      }
      var Hi2 = Yn2(function(e3) {
        var t3 = kt2(e3, vo2);
        return t3.length && t3[0] === e3[0] ? xn2(t3) : [];
      }), Yi2 = Yn2(function(e3) {
        var t3 = Ki2(e3), r4 = kt2(e3, vo2);
        return t3 === Ki2(r4) ? t3 = o2 : r4.pop(), r4.length && r4[0] === e3[0] ? xn2(r4, ai2(t3, 2)) : [];
      }), Xi2 = Yn2(function(e3) {
        var t3 = Ki2(e3), r4 = kt2(e3, vo2);
        return (t3 = "function" == typeof t3 ? t3 : o2) && r4.pop(), r4.length && r4[0] === e3[0] ? xn2(r4, o2, t3) : [];
      });
      function Ki2(e3) {
        var t3 = null == e3 ? 0 : e3.length;
        return t3 ? e3[t3 - 1] : o2;
      }
      var Zi2 = Yn2($i2);
      function $i2(e3, t3) {
        return e3 && e3.length && t3 && t3.length ? Wn2(e3, t3) : e3;
      }
      var Qi2 = ei2(function(e3, t3) {
        var r4 = null == e3 ? 0 : e3.length, n4 = nn2(e3, t3);
        return qn2(e3, kt2(t3, function(e4) {
          return yi2(e4, r4) ? +e4 : e4;
        }).sort(Eo2)), n4;
      });
      function Ji2(e3) {
        return null == e3 ? e3 : _r.call(e3);
      }
      var ea2 = Yn2(function(e3) {
        return uo2(vn2(e3, 1, Ha2, true));
      }), ta2 = Yn2(function(e3) {
        var t3 = Ki2(e3);
        return Ha2(t3) && (t3 = o2), uo2(vn2(e3, 1, Ha2, true), ai2(t3, 2));
      }), ra2 = Yn2(function(e3) {
        var t3 = Ki2(e3);
        return t3 = "function" == typeof t3 ? t3 : o2, uo2(vn2(e3, 1, Ha2, true), o2, t3);
      });
      function na2(e3) {
        if (!e3 || !e3.length) return [];
        var t3 = 0;
        return e3 = Ct2(e3, function(e4) {
          if (Ha2(e4)) return t3 = vr2(e4.length, t3), true;
        }), Yt2(t3, function(t4) {
          return kt2(e3, Wt2(t4));
        });
      }
      function oa2(e3, t3) {
        if (!e3 || !e3.length) return [];
        var r4 = na2(e3);
        return null == t3 ? r4 : kt2(r4, function(e4) {
          return St2(t3, o2, e4);
        });
      }
      var ia2 = Yn2(function(e3, t3) {
        return Ha2(e3) ? cn2(e3, t3) : [];
      }), aa2 = Yn2(function(e3) {
        return ho2(Ct2(e3, Ha2));
      }), ua2 = Yn2(function(e3) {
        var t3 = Ki2(e3);
        return Ha2(t3) && (t3 = o2), ho2(Ct2(e3, Ha2), ai2(t3, 2));
      }), sa2 = Yn2(function(e3) {
        var t3 = Ki2(e3);
        return t3 = "function" == typeof t3 ? t3 : o2, ho2(Ct2(e3, Ha2), o2, t3);
      }), ca2 = Yn2(na2), la2 = Yn2(function(e3) {
        var t3 = e3.length, r4 = t3 > 1 ? e3[t3 - 1] : o2;
        return r4 = "function" == typeof r4 ? (e3.pop(), r4) : o2, oa2(e3, r4);
      });
      function fa2(e3) {
        var t3 = Lr2(e3);
        return t3.__chain__ = true, t3;
      }
      function ha2(e3, t3) {
        return t3(e3);
      }
      var da2 = ei2(function(e3) {
        var t3 = e3.length, r4 = t3 ? e3[0] : 0, n4 = this.__wrapped__, i3 = function(t4) {
          return nn2(t4, e3);
        };
        return !(t3 > 1 || this.__actions__.length) && n4 instanceof zr2 && yi2(r4) ? ((n4 = n4.slice(r4, +r4 + (t3 ? 1 : 0))).__actions__.push({ func: ha2, args: [i3], thisArg: o2 }), new Br2(n4, this.__chain__).thru(function(e4) {
          return t3 && !e4.length && e4.push(o2), e4;
        })) : this.thru(i3);
      }), pa2 = jo2(function(e3, t3, r4) {
        Ie3.call(e3, r4) ? ++e3[r4] : rn2(e3, r4, 1);
      }), va2 = Do2(Vi2), ya2 = Do2(Wi2);
      function ba2(e3, t3) {
        return (Wa2(e3) ? Pt2 : ln2)(e3, ai2(t3, 3));
      }
      function ma2(e3, t3) {
        return (Wa2(e3) ? Tt2 : fn4)(e3, ai2(t3, 3));
      }
      var ga2 = jo2(function(e3, t3, r4) {
        Ie3.call(e3, r4) ? e3[r4].push(t3) : rn2(e3, r4, [t3]);
      }), _a3 = Yn2(function(e3, t3, r4) {
        var o3 = -1, i3 = "function" == typeof t3, a3 = Ga2(e3) ? n3(e3.length) : [];
        return ln2(e3, function(e4) {
          a3[++o3] = i3 ? St2(t3, e4, r4) : Cn2(e4, t3, r4);
        }), a3;
      }), wa2 = jo2(function(e3, t3, r4) {
        rn2(e3, r4, t3);
      });
      function Oa2(e3, t3) {
        return (Wa2(e3) ? kt2 : Dn2)(e3, ai2(t3, 3));
      }
      var Sa2 = jo2(function(e3, t3, r4) {
        e3[r4 ? 0 : 1].push(t3);
      }, function() {
        return [[], []];
      }), Ea2 = Yn2(function(e3, t3) {
        if (null == e3) return [];
        var r4 = t3.length;
        return r4 > 1 && bi2(e3, t3[0], t3[1]) ? t3 = [] : r4 > 2 && bi2(t3[0], t3[1], t3[2]) && (t3 = [t3[0]]), zn2(e3, vn2(t3, 1), []);
      }), Pa2 = ct3 || function() {
        return ft2.Date.now();
      };
      function Ta2(e3, t3, r4) {
        return t3 = r4 ? o2 : t3, t3 = e3 && null == t3 ? e3.length : t3, Ko2(e3, c2, o2, o2, o2, o2, t3);
      }
      function xa2(e3, t3) {
        var r4;
        if ("function" != typeof t3) throw new xe3(i2);
        return e3 = du2(e3), function() {
          return --e3 > 0 && (r4 = t3.apply(this, arguments)), e3 <= 1 && (t3 = o2), r4;
        };
      }
      var Ca2 = Yn2(function(e3, t3, r4) {
        var n4 = 1;
        if (r4.length) {
          var o3 = ar2(r4, ii2(Ca2));
          n4 |= s2;
        }
        return Ko2(e3, n4, t3, r4, o3);
      }), ja2 = Yn2(function(e3, t3, r4) {
        var n4 = 3;
        if (r4.length) {
          var o3 = ar2(r4, ii2(ja2));
          n4 |= s2;
        }
        return Ko2(t3, n4, e3, r4, o3);
      });
      function Aa2(e3, t3, r4) {
        var n4, a3, u3, s3, c3, l3, f3 = 0, h3 = false, d3 = false, p4 = true;
        if ("function" != typeof e3) throw new xe3(i2);
        function v5(t4) {
          var r5 = n4, i3 = a3;
          return n4 = a3 = o2, f3 = t4, s3 = e3.apply(i3, r5);
        }
        function y4(e4) {
          var r5 = e4 - l3;
          return l3 === o2 || r5 >= t3 || r5 < 0 || d3 && e4 - f3 >= u3;
        }
        function b3() {
          var e4 = Pa2();
          if (y4(e4)) return m3(e4);
          c3 = Ci2(b3, function(e5) {
            var r5 = t3 - (e5 - l3);
            return d3 ? yr2(r5, u3 - (e5 - f3)) : r5;
          }(e4));
        }
        function m3(e4) {
          return c3 = o2, p4 && n4 ? v5(e4) : (n4 = a3 = o2, s3);
        }
        function g3() {
          var e4 = Pa2(), r5 = y4(e4);
          if (n4 = arguments, a3 = this, l3 = e4, r5) {
            if (c3 === o2) return function(e5) {
              return f3 = e5, c3 = Ci2(b3, t3), h3 ? v5(e5) : s3;
            }(l3);
            if (d3) return _o2(c3), c3 = Ci2(b3, t3), v5(l3);
          }
          return c3 === o2 && (c3 = Ci2(b3, t3)), s3;
        }
        return t3 = vu2(t3) || 0, Ja2(r4) && (h3 = !!r4.leading, u3 = (d3 = "maxWait" in r4) ? vr2(vu2(r4.maxWait) || 0, t3) : u3, p4 = "trailing" in r4 ? !!r4.trailing : p4), g3.cancel = function() {
          c3 !== o2 && _o2(c3), f3 = 0, n4 = l3 = a3 = c3 = o2;
        }, g3.flush = function() {
          return c3 === o2 ? s3 : m3(Pa2());
        }, g3;
      }
      var ka2 = Yn2(function(e3, t3) {
        return sn2(e3, 1, t3);
      }), Ra2 = Yn2(function(e3, t3, r4) {
        return sn2(e3, vu2(t3) || 0, r4);
      });
      function Ia2(e3, t3) {
        if ("function" != typeof e3 || null != t3 && "function" != typeof t3) throw new xe3(i2);
        var r4 = function() {
          var n4 = arguments, o3 = t3 ? t3.apply(this, n4) : n4[0], i3 = r4.cache;
          if (i3.has(o3)) return i3.get(o3);
          var a3 = e3.apply(this, n4);
          return r4.cache = i3.set(o3, a3) || i3, a3;
        };
        return r4.cache = new (Ia2.Cache || qr2)(), r4;
      }
      function Ma2(e3) {
        if ("function" != typeof e3) throw new xe3(i2);
        return function() {
          var t3 = arguments;
          switch (t3.length) {
            case 0:
              return !e3.call(this);
            case 1:
              return !e3.call(this, t3[0]);
            case 2:
              return !e3.call(this, t3[0], t3[1]);
            case 3:
              return !e3.call(this, t3[0], t3[1], t3[2]);
          }
          return !e3.apply(this, t3);
        };
      }
      Ia2.Cache = qr2;
      var Na2 = mo2(function(e3, t3) {
        var r4 = (t3 = 1 == t3.length && Wa2(t3[0]) ? kt2(t3[0], Kt2(ai2())) : kt2(vn2(t3, 1), Kt2(ai2()))).length;
        return Yn2(function(n4) {
          for (var o3 = -1, i3 = yr2(n4.length, r4); ++o3 < i3; ) n4[o3] = t3[o3].call(this, n4[o3]);
          return St2(e3, this, n4);
        });
      }), Da2 = Yn2(function(e3, t3) {
        var r4 = ar2(t3, ii2(Da2));
        return Ko2(e3, s2, o2, t3, r4);
      }), La2 = Yn2(function(e3, t3) {
        var r4 = ar2(t3, ii2(La2));
        return Ko2(e3, 64, o2, t3, r4);
      }), Ua2 = ei2(function(e3, t3) {
        return Ko2(e3, 256, o2, o2, o2, t3);
      });
      function Fa2(e3, t3) {
        return e3 === t3 || e3 != e3 && t3 != t3;
      }
      var Ba2 = qo2(En2), za2 = qo2(function(e3, t3) {
        return e3 >= t3;
      }), Va2 = jn2(/* @__PURE__ */ function() {
        return arguments;
      }()) ? jn2 : function(e3) {
        return eu2(e3) && Ie3.call(e3, "callee") && !He3.call(e3, "callee");
      }, Wa2 = n3.isArray, qa2 = bt2 ? Kt2(bt2) : function(e3) {
        return eu2(e3) && Sn2(e3) == k2;
      };
      function Ga2(e3) {
        return null != e3 && Qa2(e3.length) && !Za2(e3);
      }
      function Ha2(e3) {
        return eu2(e3) && Ga2(e3);
      }
      var Ya2 = yt3 || vs2, Xa2 = mt2 ? Kt2(mt2) : function(e3) {
        return eu2(e3) && Sn2(e3) == m2;
      };
      function Ka2(e3) {
        if (!eu2(e3)) return false;
        var t3 = Sn2(e3);
        return t3 == g2 || "[object DOMException]" == t3 || "string" == typeof e3.message && "string" == typeof e3.name && !nu2(e3);
      }
      function Za2(e3) {
        if (!Ja2(e3)) return false;
        var t3 = Sn2(e3);
        return t3 == _2 || t3 == w2 || "[object AsyncFunction]" == t3 || "[object Proxy]" == t3;
      }
      function $a2(e3) {
        return "number" == typeof e3 && e3 == du2(e3);
      }
      function Qa2(e3) {
        return "number" == typeof e3 && e3 > -1 && e3 % 1 == 0 && e3 <= f2;
      }
      function Ja2(e3) {
        var t3 = typeof e3;
        return null != e3 && ("object" == t3 || "function" == t3);
      }
      function eu2(e3) {
        return null != e3 && "object" == typeof e3;
      }
      var tu2 = gt2 ? Kt2(gt2) : function(e3) {
        return eu2(e3) && hi2(e3) == O2;
      };
      function ru2(e3) {
        return "number" == typeof e3 || eu2(e3) && Sn2(e3) == S2;
      }
      function nu2(e3) {
        if (!eu2(e3) || Sn2(e3) != E2) return false;
        var t3 = qe3(e3);
        if (null === t3) return true;
        var r4 = Ie3.call(t3, "constructor") && t3.constructor;
        return "function" == typeof r4 && r4 instanceof r4 && Re3.call(r4) == Le3;
      }
      var ou2 = _t2 ? Kt2(_t2) : function(e3) {
        return eu2(e3) && Sn2(e3) == T2;
      }, iu2 = wt2 ? Kt2(wt2) : function(e3) {
        return eu2(e3) && hi2(e3) == x3;
      };
      function au2(e3) {
        return "string" == typeof e3 || !Wa2(e3) && eu2(e3) && Sn2(e3) == C2;
      }
      function uu2(e3) {
        return "symbol" == typeof e3 || eu2(e3) && Sn2(e3) == j2;
      }
      var su2 = Ot2 ? Kt2(Ot2) : function(e3) {
        return eu2(e3) && Qa2(e3.length) && !!ot2[Sn2(e3)];
      }, cu2 = qo2(Nn2), lu2 = qo2(function(e3, t3) {
        return e3 <= t3;
      });
      function fu2(e3) {
        if (!e3) return [];
        if (Ga2(e3)) return au2(e3) ? lr2(e3) : xo2(e3);
        if (Ke3 && e3[Ke3]) return function(e4) {
          for (var t4, r4 = []; !(t4 = e4.next()).done; ) r4.push(t4.value);
          return r4;
        }(e3[Ke3]());
        var t3 = hi2(e3);
        return (t3 == O2 ? or2 : t3 == x3 ? ur2 : Fu2)(e3);
      }
      function hu2(e3) {
        return e3 ? (e3 = vu2(e3)) === l2 || e3 === -1 / 0 ? 17976931348623157e292 * (e3 < 0 ? -1 : 1) : e3 == e3 ? e3 : 0 : 0 === e3 ? e3 : 0;
      }
      function du2(e3) {
        var t3 = hu2(e3), r4 = t3 % 1;
        return t3 == t3 ? r4 ? t3 - r4 : t3 : 0;
      }
      function pu2(e3) {
        return e3 ? on4(du2(e3), 0, d2) : 0;
      }
      function vu2(e3) {
        if ("number" == typeof e3) return e3;
        if (uu2(e3)) return h2;
        if (Ja2(e3)) {
          var t3 = "function" == typeof e3.valueOf ? e3.valueOf() : e3;
          e3 = Ja2(t3) ? t3 + "" : t3;
        }
        if ("string" != typeof e3) return 0 === e3 ? e3 : +e3;
        e3 = Xt2(e3);
        var r4 = pe2.test(e3);
        return r4 || ye2.test(e3) ? st2(e3.slice(2), r4 ? 2 : 8) : de2.test(e3) ? h2 : +e3;
      }
      function yu2(e3) {
        return Co2(e3, ku2(e3));
      }
      function bu2(e3) {
        return null == e3 ? "" : ao2(e3);
      }
      var mu2 = Ao2(function(e3, t3) {
        if (wi2(t3) || Ga2(t3)) Co2(t3, Au2(t3), e3);
        else for (var r4 in t3) Ie3.call(t3, r4) && Qr2(e3, r4, t3[r4]);
      }), gu2 = Ao2(function(e3, t3) {
        Co2(t3, ku2(t3), e3);
      }), _u2 = Ao2(function(e3, t3, r4, n4) {
        Co2(t3, ku2(t3), e3, n4);
      }), wu2 = Ao2(function(e3, t3, r4, n4) {
        Co2(t3, Au2(t3), e3, n4);
      }), Ou2 = ei2(nn2), Su2 = Yn2(function(e3, t3) {
        e3 = Ee3(e3);
        var r4 = -1, n4 = t3.length, i3 = n4 > 2 ? t3[2] : o2;
        for (i3 && bi2(t3[0], t3[1], i3) && (n4 = 1); ++r4 < n4; ) for (var a3 = t3[r4], u3 = ku2(a3), s3 = -1, c3 = u3.length; ++s3 < c3; ) {
          var l3 = u3[s3], f3 = e3[l3];
          (f3 === o2 || Fa2(f3, Ae3[l3]) && !Ie3.call(e3, l3)) && (e3[l3] = a3[l3]);
        }
        return e3;
      }), Eu2 = Yn2(function(e3) {
        return e3.push(o2, $o2), St2(Iu2, o2, e3);
      });
      function Pu2(e3, t3, r4) {
        var n4 = null == e3 ? o2 : wn2(e3, t3);
        return n4 === o2 ? r4 : n4;
      }
      function Tu2(e3, t3) {
        return null != e3 && di2(e3, t3, Tn2);
      }
      var xu2 = Fo2(function(e3, t3, r4) {
        null != t3 && "function" != typeof t3.toString && (t3 = De3.call(t3)), e3[t3] = r4;
      }, Ju2(rs2)), Cu2 = Fo2(function(e3, t3, r4) {
        null != t3 && "function" != typeof t3.toString && (t3 = De3.call(t3)), Ie3.call(e3, t3) ? e3[t3].push(r4) : e3[t3] = [r4];
      }, ai2), ju2 = Yn2(Cn2);
      function Au2(e3) {
        return Ga2(e3) ? Yr2(e3) : Mn2(e3);
      }
      function ku2(e3) {
        return Ga2(e3) ? Yr2(e3, true) : function(e4) {
          if (!Ja2(e4)) return function(e5) {
            var t4 = [];
            if (null != e5) for (var r5 in Ee3(e5)) t4.push(r5);
            return t4;
          }(e4);
          var t3 = wi2(e4), r4 = [];
          for (var n4 in e4) ("constructor" != n4 || !t3 && Ie3.call(e4, n4)) && r4.push(n4);
          return r4;
        }(e3);
      }
      var Ru2 = Ao2(function(e3, t3, r4) {
        Fn2(e3, t3, r4);
      }), Iu2 = Ao2(function(e3, t3, r4, n4) {
        Fn2(e3, t3, r4, n4);
      }), Mu2 = ei2(function(e3, t3) {
        var r4 = {};
        if (null == e3) return r4;
        var n4 = false;
        t3 = kt2(t3, function(t4) {
          return t4 = bo2(t4, e3), n4 || (n4 = t4.length > 1), t4;
        }), Co2(e3, ri2(e3), r4), n4 && (r4 = an2(r4, 7, Qo2));
        for (var o3 = t3.length; o3--; ) so2(r4, t3[o3]);
        return r4;
      }), Nu2 = ei2(function(e3, t3) {
        return null == e3 ? {} : function(e4, t4) {
          return Vn2(e4, t4, function(t5, r4) {
            return Tu2(e4, r4);
          });
        }(e3, t3);
      });
      function Du2(e3, t3) {
        if (null == e3) return {};
        var r4 = kt2(ri2(e3), function(e4) {
          return [e4];
        });
        return t3 = ai2(t3), Vn2(e3, r4, function(e4, r5) {
          return t3(e4, r5[0]);
        });
      }
      var Lu2 = Xo2(Au2), Uu2 = Xo2(ku2);
      function Fu2(e3) {
        return null == e3 ? [] : Zt2(e3, Au2(e3));
      }
      var Bu2 = Mo2(function(e3, t3, r4) {
        return t3 = t3.toLowerCase(), e3 + (r4 ? zu2(t3) : t3);
      });
      function zu2(e3) {
        return Ku2(bu2(e3).toLowerCase());
      }
      function Vu2(e3) {
        return (e3 = bu2(e3)) && e3.replace(me2, er2).replace($e2, "");
      }
      var Wu2 = Mo2(function(e3, t3, r4) {
        return e3 + (r4 ? "-" : "") + t3.toLowerCase();
      }), qu2 = Mo2(function(e3, t3, r4) {
        return e3 + (r4 ? " " : "") + t3.toLowerCase();
      }), Gu2 = Io2("toLowerCase"), Hu2 = Mo2(function(e3, t3, r4) {
        return e3 + (r4 ? "_" : "") + t3.toLowerCase();
      }), Yu2 = Mo2(function(e3, t3, r4) {
        return e3 + (r4 ? " " : "") + Ku2(t3);
      }), Xu2 = Mo2(function(e3, t3, r4) {
        return e3 + (r4 ? " " : "") + t3.toUpperCase();
      }), Ku2 = Io2("toUpperCase");
      function Zu2(e3, t3, r4) {
        return e3 = bu2(e3), (t3 = r4 ? o2 : t3) === o2 ? function(e4) {
          return tt2.test(e4);
        }(e3) ? function(e4) {
          return e4.match(Je2) || [];
        }(e3) : function(e4) {
          return e4.match(se2) || [];
        }(e3) : e3.match(t3) || [];
      }
      var $u2 = Yn2(function(e3, t3) {
        try {
          return St2(e3, o2, t3);
        } catch (e4) {
          return Ka2(e4) ? e4 : new we3(e4);
        }
      }), Qu2 = ei2(function(e3, t3) {
        return Pt2(t3, function(t4) {
          t4 = Di2(t4), rn2(e3, t4, Ca2(e3[t4], e3));
        }), e3;
      });
      function Ju2(e3) {
        return function() {
          return e3;
        };
      }
      var es2 = Lo2(), ts2 = Lo2(true);
      function rs2(e3) {
        return e3;
      }
      function ns2(e3) {
        return In2("function" == typeof e3 ? e3 : an2(e3, 1));
      }
      var os2 = Yn2(function(e3, t3) {
        return function(r4) {
          return Cn2(r4, e3, t3);
        };
      }), is3 = Yn2(function(e3, t3) {
        return function(r4) {
          return Cn2(e3, r4, t3);
        };
      });
      function as2(e3, t3, r4) {
        var n4 = Au2(t3), o3 = _n2(t3, n4);
        null != r4 || Ja2(t3) && (o3.length || !n4.length) || (r4 = t3, t3 = e3, e3 = this, o3 = _n2(t3, Au2(t3)));
        var i3 = !(Ja2(r4) && "chain" in r4 && !r4.chain), a3 = Za2(e3);
        return Pt2(o3, function(r5) {
          var n5 = t3[r5];
          e3[r5] = n5, a3 && (e3.prototype[r5] = function() {
            var t4 = this.__chain__;
            if (i3 || t4) {
              var r6 = e3(this.__wrapped__);
              return (r6.__actions__ = xo2(this.__actions__)).push({ func: n5, args: arguments, thisArg: e3 }), r6.__chain__ = t4, r6;
            }
            return n5.apply(e3, Rt2([this.value()], arguments));
          });
        }), e3;
      }
      function us2() {
      }
      var ss2 = zo2(kt2), cs2 = zo2(xt2), ls2 = zo2(Nt2);
      function fs2(e3) {
        return mi2(e3) ? Wt2(Di2(e3)) : /* @__PURE__ */ function(e4) {
          return function(t3) {
            return wn2(t3, e4);
          };
        }(e3);
      }
      var hs2 = Wo2(), ds2 = Wo2(true);
      function ps2() {
        return [];
      }
      function vs2() {
        return false;
      }
      var ys2, bs2 = Bo2(function(e3, t3) {
        return e3 + t3;
      }, 0), ms4 = Ho2("ceil"), gs2 = Bo2(function(e3, t3) {
        return e3 / t3;
      }, 1), _s2 = Ho2("floor"), ws2 = Bo2(function(e3, t3) {
        return e3 * t3;
      }, 1), Os2 = Ho2("round"), Ss2 = Bo2(function(e3, t3) {
        return e3 - t3;
      }, 0);
      return Lr2.after = function(e3, t3) {
        if ("function" != typeof t3) throw new xe3(i2);
        return e3 = du2(e3), function() {
          if (--e3 < 1) return t3.apply(this, arguments);
        };
      }, Lr2.ary = Ta2, Lr2.assign = mu2, Lr2.assignIn = gu2, Lr2.assignInWith = _u2, Lr2.assignWith = wu2, Lr2.at = Ou2, Lr2.before = xa2, Lr2.bind = Ca2, Lr2.bindAll = Qu2, Lr2.bindKey = ja2, Lr2.castArray = function() {
        if (!arguments.length) return [];
        var e3 = arguments[0];
        return Wa2(e3) ? e3 : [e3];
      }, Lr2.chain = fa2, Lr2.chunk = function(e3, t3, r4) {
        t3 = (r4 ? bi2(e3, t3, r4) : t3 === o2) ? 1 : vr2(du2(t3), 0);
        var i3 = null == e3 ? 0 : e3.length;
        if (!i3 || t3 < 1) return [];
        for (var a3 = 0, u3 = 0, s3 = n3(ht3(i3 / t3)); a3 < i3; ) s3[u3++] = eo2(e3, a3, a3 += t3);
        return s3;
      }, Lr2.compact = function(e3) {
        for (var t3 = -1, r4 = null == e3 ? 0 : e3.length, n4 = 0, o3 = []; ++t3 < r4; ) {
          var i3 = e3[t3];
          i3 && (o3[n4++] = i3);
        }
        return o3;
      }, Lr2.concat = function() {
        var e3 = arguments.length;
        if (!e3) return [];
        for (var t3 = n3(e3 - 1), r4 = arguments[0], o3 = e3; o3--; ) t3[o3 - 1] = arguments[o3];
        return Rt2(Wa2(r4) ? xo2(r4) : [r4], vn2(t3, 1));
      }, Lr2.cond = function(e3) {
        var t3 = null == e3 ? 0 : e3.length, r4 = ai2();
        return e3 = t3 ? kt2(e3, function(e4) {
          if ("function" != typeof e4[1]) throw new xe3(i2);
          return [r4(e4[0]), e4[1]];
        }) : [], Yn2(function(r5) {
          for (var n4 = -1; ++n4 < t3; ) {
            var o3 = e3[n4];
            if (St2(o3[0], this, r5)) return St2(o3[1], this, r5);
          }
        });
      }, Lr2.conforms = function(e3) {
        return function(e4) {
          var t3 = Au2(e4);
          return function(r4) {
            return un2(r4, e4, t3);
          };
        }(an2(e3, 1));
      }, Lr2.constant = Ju2, Lr2.countBy = pa2, Lr2.create = function(e3, t3) {
        var r4 = Ur2(e3);
        return null == t3 ? r4 : tn2(r4, t3);
      }, Lr2.curry = function e3(t3, r4, n4) {
        var i3 = Ko2(t3, 8, o2, o2, o2, o2, o2, r4 = n4 ? o2 : r4);
        return i3.placeholder = e3.placeholder, i3;
      }, Lr2.curryRight = function e3(t3, r4, n4) {
        var i3 = Ko2(t3, 16, o2, o2, o2, o2, o2, r4 = n4 ? o2 : r4);
        return i3.placeholder = e3.placeholder, i3;
      }, Lr2.debounce = Aa2, Lr2.defaults = Su2, Lr2.defaultsDeep = Eu2, Lr2.defer = ka2, Lr2.delay = Ra2, Lr2.difference = Fi2, Lr2.differenceBy = Bi2, Lr2.differenceWith = zi2, Lr2.drop = function(e3, t3, r4) {
        var n4 = null == e3 ? 0 : e3.length;
        return n4 ? eo2(e3, (t3 = r4 || t3 === o2 ? 1 : du2(t3)) < 0 ? 0 : t3, n4) : [];
      }, Lr2.dropRight = function(e3, t3, r4) {
        var n4 = null == e3 ? 0 : e3.length;
        return n4 ? eo2(e3, 0, (t3 = n4 - (t3 = r4 || t3 === o2 ? 1 : du2(t3))) < 0 ? 0 : t3) : [];
      }, Lr2.dropRightWhile = function(e3, t3) {
        return e3 && e3.length ? lo2(e3, ai2(t3, 3), true, true) : [];
      }, Lr2.dropWhile = function(e3, t3) {
        return e3 && e3.length ? lo2(e3, ai2(t3, 3), true) : [];
      }, Lr2.fill = function(e3, t3, r4, n4) {
        var i3 = null == e3 ? 0 : e3.length;
        return i3 ? (r4 && "number" != typeof r4 && bi2(e3, t3, r4) && (r4 = 0, n4 = i3), function(e4, t4, r5, n5) {
          var i4 = e4.length;
          for ((r5 = du2(r5)) < 0 && (r5 = -r5 > i4 ? 0 : i4 + r5), (n5 = n5 === o2 || n5 > i4 ? i4 : du2(n5)) < 0 && (n5 += i4), n5 = r5 > n5 ? 0 : pu2(n5); r5 < n5; ) e4[r5++] = t4;
          return e4;
        }(e3, t3, r4, n4)) : [];
      }, Lr2.filter = function(e3, t3) {
        return (Wa2(e3) ? Ct2 : pn2)(e3, ai2(t3, 3));
      }, Lr2.flatMap = function(e3, t3) {
        return vn2(Oa2(e3, t3), 1);
      }, Lr2.flatMapDeep = function(e3, t3) {
        return vn2(Oa2(e3, t3), l2);
      }, Lr2.flatMapDepth = function(e3, t3, r4) {
        return r4 = r4 === o2 ? 1 : du2(r4), vn2(Oa2(e3, t3), r4);
      }, Lr2.flatten = qi2, Lr2.flattenDeep = function(e3) {
        return null != e3 && e3.length ? vn2(e3, l2) : [];
      }, Lr2.flattenDepth = function(e3, t3) {
        return null != e3 && e3.length ? vn2(e3, t3 = t3 === o2 ? 1 : du2(t3)) : [];
      }, Lr2.flip = function(e3) {
        return Ko2(e3, 512);
      }, Lr2.flow = es2, Lr2.flowRight = ts2, Lr2.fromPairs = function(e3) {
        for (var t3 = -1, r4 = null == e3 ? 0 : e3.length, n4 = {}; ++t3 < r4; ) {
          var o3 = e3[t3];
          n4[o3[0]] = o3[1];
        }
        return n4;
      }, Lr2.functions = function(e3) {
        return null == e3 ? [] : _n2(e3, Au2(e3));
      }, Lr2.functionsIn = function(e3) {
        return null == e3 ? [] : _n2(e3, ku2(e3));
      }, Lr2.groupBy = ga2, Lr2.initial = function(e3) {
        return null != e3 && e3.length ? eo2(e3, 0, -1) : [];
      }, Lr2.intersection = Hi2, Lr2.intersectionBy = Yi2, Lr2.intersectionWith = Xi2, Lr2.invert = xu2, Lr2.invertBy = Cu2, Lr2.invokeMap = _a3, Lr2.iteratee = ns2, Lr2.keyBy = wa2, Lr2.keys = Au2, Lr2.keysIn = ku2, Lr2.map = Oa2, Lr2.mapKeys = function(e3, t3) {
        var r4 = {};
        return t3 = ai2(t3, 3), mn2(e3, function(e4, n4, o3) {
          rn2(r4, t3(e4, n4, o3), e4);
        }), r4;
      }, Lr2.mapValues = function(e3, t3) {
        var r4 = {};
        return t3 = ai2(t3, 3), mn2(e3, function(e4, n4, o3) {
          rn2(r4, n4, t3(e4, n4, o3));
        }), r4;
      }, Lr2.matches = function(e3) {
        return Ln2(an2(e3, 1));
      }, Lr2.matchesProperty = function(e3, t3) {
        return Un2(e3, an2(t3, 1));
      }, Lr2.memoize = Ia2, Lr2.merge = Ru2, Lr2.mergeWith = Iu2, Lr2.method = os2, Lr2.methodOf = is3, Lr2.mixin = as2, Lr2.negate = Ma2, Lr2.nthArg = function(e3) {
        return e3 = du2(e3), Yn2(function(t3) {
          return Bn2(t3, e3);
        });
      }, Lr2.omit = Mu2, Lr2.omitBy = function(e3, t3) {
        return Du2(e3, Ma2(ai2(t3)));
      }, Lr2.once = function(e3) {
        return xa2(2, e3);
      }, Lr2.orderBy = function(e3, t3, r4, n4) {
        return null == e3 ? [] : (Wa2(t3) || (t3 = null == t3 ? [] : [t3]), Wa2(r4 = n4 ? o2 : r4) || (r4 = null == r4 ? [] : [r4]), zn2(e3, t3, r4));
      }, Lr2.over = ss2, Lr2.overArgs = Na2, Lr2.overEvery = cs2, Lr2.overSome = ls2, Lr2.partial = Da2, Lr2.partialRight = La2, Lr2.partition = Sa2, Lr2.pick = Nu2, Lr2.pickBy = Du2, Lr2.property = fs2, Lr2.propertyOf = function(e3) {
        return function(t3) {
          return null == e3 ? o2 : wn2(e3, t3);
        };
      }, Lr2.pull = Zi2, Lr2.pullAll = $i2, Lr2.pullAllBy = function(e3, t3, r4) {
        return e3 && e3.length && t3 && t3.length ? Wn2(e3, t3, ai2(r4, 2)) : e3;
      }, Lr2.pullAllWith = function(e3, t3, r4) {
        return e3 && e3.length && t3 && t3.length ? Wn2(e3, t3, o2, r4) : e3;
      }, Lr2.pullAt = Qi2, Lr2.range = hs2, Lr2.rangeRight = ds2, Lr2.rearg = Ua2, Lr2.reject = function(e3, t3) {
        return (Wa2(e3) ? Ct2 : pn2)(e3, Ma2(ai2(t3, 3)));
      }, Lr2.remove = function(e3, t3) {
        var r4 = [];
        if (!e3 || !e3.length) return r4;
        var n4 = -1, o3 = [], i3 = e3.length;
        for (t3 = ai2(t3, 3); ++n4 < i3; ) {
          var a3 = e3[n4];
          t3(a3, n4, e3) && (r4.push(a3), o3.push(n4));
        }
        return qn2(e3, o3), r4;
      }, Lr2.rest = function(e3, t3) {
        if ("function" != typeof e3) throw new xe3(i2);
        return Yn2(e3, t3 = t3 === o2 ? t3 : du2(t3));
      }, Lr2.reverse = Ji2, Lr2.sampleSize = function(e3, t3, r4) {
        return t3 = (r4 ? bi2(e3, t3, r4) : t3 === o2) ? 1 : du2(t3), (Wa2(e3) ? Kr2 : Kn2)(e3, t3);
      }, Lr2.set = function(e3, t3, r4) {
        return null == e3 ? e3 : Zn2(e3, t3, r4);
      }, Lr2.setWith = function(e3, t3, r4, n4) {
        return n4 = "function" == typeof n4 ? n4 : o2, null == e3 ? e3 : Zn2(e3, t3, r4, n4);
      }, Lr2.shuffle = function(e3) {
        return (Wa2(e3) ? Zr2 : Jn2)(e3);
      }, Lr2.slice = function(e3, t3, r4) {
        var n4 = null == e3 ? 0 : e3.length;
        return n4 ? (r4 && "number" != typeof r4 && bi2(e3, t3, r4) ? (t3 = 0, r4 = n4) : (t3 = null == t3 ? 0 : du2(t3), r4 = r4 === o2 ? n4 : du2(r4)), eo2(e3, t3, r4)) : [];
      }, Lr2.sortBy = Ea2, Lr2.sortedUniq = function(e3) {
        return e3 && e3.length ? oo2(e3) : [];
      }, Lr2.sortedUniqBy = function(e3, t3) {
        return e3 && e3.length ? oo2(e3, ai2(t3, 2)) : [];
      }, Lr2.split = function(e3, t3, r4) {
        return r4 && "number" != typeof r4 && bi2(e3, t3, r4) && (t3 = r4 = o2), (r4 = r4 === o2 ? d2 : r4 >>> 0) ? (e3 = bu2(e3)) && ("string" == typeof t3 || null != t3 && !ou2(t3)) && !(t3 = ao2(t3)) && nr2(e3) ? go2(lr2(e3), 0, r4) : e3.split(t3, r4) : [];
      }, Lr2.spread = function(e3, t3) {
        if ("function" != typeof e3) throw new xe3(i2);
        return t3 = null == t3 ? 0 : vr2(du2(t3), 0), Yn2(function(r4) {
          var n4 = r4[t3], o3 = go2(r4, 0, t3);
          return n4 && Rt2(o3, n4), St2(e3, this, o3);
        });
      }, Lr2.tail = function(e3) {
        var t3 = null == e3 ? 0 : e3.length;
        return t3 ? eo2(e3, 1, t3) : [];
      }, Lr2.take = function(e3, t3, r4) {
        return e3 && e3.length ? eo2(e3, 0, (t3 = r4 || t3 === o2 ? 1 : du2(t3)) < 0 ? 0 : t3) : [];
      }, Lr2.takeRight = function(e3, t3, r4) {
        var n4 = null == e3 ? 0 : e3.length;
        return n4 ? eo2(e3, (t3 = n4 - (t3 = r4 || t3 === o2 ? 1 : du2(t3))) < 0 ? 0 : t3, n4) : [];
      }, Lr2.takeRightWhile = function(e3, t3) {
        return e3 && e3.length ? lo2(e3, ai2(t3, 3), false, true) : [];
      }, Lr2.takeWhile = function(e3, t3) {
        return e3 && e3.length ? lo2(e3, ai2(t3, 3)) : [];
      }, Lr2.tap = function(e3, t3) {
        return t3(e3), e3;
      }, Lr2.throttle = function(e3, t3, r4) {
        var n4 = true, o3 = true;
        if ("function" != typeof e3) throw new xe3(i2);
        return Ja2(r4) && (n4 = "leading" in r4 ? !!r4.leading : n4, o3 = "trailing" in r4 ? !!r4.trailing : o3), Aa2(e3, t3, { leading: n4, maxWait: t3, trailing: o3 });
      }, Lr2.thru = ha2, Lr2.toArray = fu2, Lr2.toPairs = Lu2, Lr2.toPairsIn = Uu2, Lr2.toPath = function(e3) {
        return Wa2(e3) ? kt2(e3, Di2) : uu2(e3) ? [e3] : xo2(Ni2(bu2(e3)));
      }, Lr2.toPlainObject = yu2, Lr2.transform = function(e3, t3, r4) {
        var n4 = Wa2(e3), o3 = n4 || Ya2(e3) || su2(e3);
        if (t3 = ai2(t3, 4), null == r4) {
          var i3 = e3 && e3.constructor;
          r4 = o3 ? n4 ? new i3() : [] : Ja2(e3) && Za2(i3) ? Ur2(qe3(e3)) : {};
        }
        return (o3 ? Pt2 : mn2)(e3, function(e4, n5, o4) {
          return t3(r4, e4, n5, o4);
        }), r4;
      }, Lr2.unary = function(e3) {
        return Ta2(e3, 1);
      }, Lr2.union = ea2, Lr2.unionBy = ta2, Lr2.unionWith = ra2, Lr2.uniq = function(e3) {
        return e3 && e3.length ? uo2(e3) : [];
      }, Lr2.uniqBy = function(e3, t3) {
        return e3 && e3.length ? uo2(e3, ai2(t3, 2)) : [];
      }, Lr2.uniqWith = function(e3, t3) {
        return t3 = "function" == typeof t3 ? t3 : o2, e3 && e3.length ? uo2(e3, o2, t3) : [];
      }, Lr2.unset = function(e3, t3) {
        return null == e3 || so2(e3, t3);
      }, Lr2.unzip = na2, Lr2.unzipWith = oa2, Lr2.update = function(e3, t3, r4) {
        return null == e3 ? e3 : co2(e3, t3, yo2(r4));
      }, Lr2.updateWith = function(e3, t3, r4, n4) {
        return n4 = "function" == typeof n4 ? n4 : o2, null == e3 ? e3 : co2(e3, t3, yo2(r4), n4);
      }, Lr2.values = Fu2, Lr2.valuesIn = function(e3) {
        return null == e3 ? [] : Zt2(e3, ku2(e3));
      }, Lr2.without = ia2, Lr2.words = Zu2, Lr2.wrap = function(e3, t3) {
        return Da2(yo2(t3), e3);
      }, Lr2.xor = aa2, Lr2.xorBy = ua2, Lr2.xorWith = sa2, Lr2.zip = ca2, Lr2.zipObject = function(e3, t3) {
        return po2(e3 || [], t3 || [], Qr2);
      }, Lr2.zipObjectDeep = function(e3, t3) {
        return po2(e3 || [], t3 || [], Zn2);
      }, Lr2.zipWith = la2, Lr2.entries = Lu2, Lr2.entriesIn = Uu2, Lr2.extend = gu2, Lr2.extendWith = _u2, as2(Lr2, Lr2), Lr2.add = bs2, Lr2.attempt = $u2, Lr2.camelCase = Bu2, Lr2.capitalize = zu2, Lr2.ceil = ms4, Lr2.clamp = function(e3, t3, r4) {
        return r4 === o2 && (r4 = t3, t3 = o2), r4 !== o2 && (r4 = (r4 = vu2(r4)) == r4 ? r4 : 0), t3 !== o2 && (t3 = (t3 = vu2(t3)) == t3 ? t3 : 0), on4(vu2(e3), t3, r4);
      }, Lr2.clone = function(e3) {
        return an2(e3, 4);
      }, Lr2.cloneDeep = function(e3) {
        return an2(e3, 5);
      }, Lr2.cloneDeepWith = function(e3, t3) {
        return an2(e3, 5, t3 = "function" == typeof t3 ? t3 : o2);
      }, Lr2.cloneWith = function(e3, t3) {
        return an2(e3, 4, t3 = "function" == typeof t3 ? t3 : o2);
      }, Lr2.conformsTo = function(e3, t3) {
        return null == t3 || un2(e3, t3, Au2(t3));
      }, Lr2.deburr = Vu2, Lr2.defaultTo = function(e3, t3) {
        return null == e3 || e3 != e3 ? t3 : e3;
      }, Lr2.divide = gs2, Lr2.endsWith = function(e3, t3, r4) {
        e3 = bu2(e3), t3 = ao2(t3);
        var n4 = e3.length, i3 = r4 = r4 === o2 ? n4 : on4(du2(r4), 0, n4);
        return (r4 -= t3.length) >= 0 && e3.slice(r4, i3) == t3;
      }, Lr2.eq = Fa2, Lr2.escape = function(e3) {
        return (e3 = bu2(e3)) && X2.test(e3) ? e3.replace(H2, tr2) : e3;
      }, Lr2.escapeRegExp = function(e3) {
        return (e3 = bu2(e3)) && re2.test(e3) ? e3.replace(te2, "\\$&") : e3;
      }, Lr2.every = function(e3, t3, r4) {
        var n4 = Wa2(e3) ? xt2 : hn2;
        return r4 && bi2(e3, t3, r4) && (t3 = o2), n4(e3, ai2(t3, 3));
      }, Lr2.find = va2, Lr2.findIndex = Vi2, Lr2.findKey = function(e3, t3) {
        return Lt2(e3, ai2(t3, 3), mn2);
      }, Lr2.findLast = ya2, Lr2.findLastIndex = Wi2, Lr2.findLastKey = function(e3, t3) {
        return Lt2(e3, ai2(t3, 3), gn2);
      }, Lr2.floor = _s2, Lr2.forEach = ba2, Lr2.forEachRight = ma2, Lr2.forIn = function(e3, t3) {
        return null == e3 ? e3 : yn2(e3, ai2(t3, 3), ku2);
      }, Lr2.forInRight = function(e3, t3) {
        return null == e3 ? e3 : bn2(e3, ai2(t3, 3), ku2);
      }, Lr2.forOwn = function(e3, t3) {
        return e3 && mn2(e3, ai2(t3, 3));
      }, Lr2.forOwnRight = function(e3, t3) {
        return e3 && gn2(e3, ai2(t3, 3));
      }, Lr2.get = Pu2, Lr2.gt = Ba2, Lr2.gte = za2, Lr2.has = function(e3, t3) {
        return null != e3 && di2(e3, t3, Pn2);
      }, Lr2.hasIn = Tu2, Lr2.head = Gi2, Lr2.identity = rs2, Lr2.includes = function(e3, t3, r4, n4) {
        e3 = Ga2(e3) ? e3 : Fu2(e3), r4 = r4 && !n4 ? du2(r4) : 0;
        var o3 = e3.length;
        return r4 < 0 && (r4 = vr2(o3 + r4, 0)), au2(e3) ? r4 <= o3 && e3.indexOf(t3, r4) > -1 : !!o3 && Ft2(e3, t3, r4) > -1;
      }, Lr2.indexOf = function(e3, t3, r4) {
        var n4 = null == e3 ? 0 : e3.length;
        if (!n4) return -1;
        var o3 = null == r4 ? 0 : du2(r4);
        return o3 < 0 && (o3 = vr2(n4 + o3, 0)), Ft2(e3, t3, o3);
      }, Lr2.inRange = function(e3, t3, r4) {
        return t3 = hu2(t3), r4 === o2 ? (r4 = t3, t3 = 0) : r4 = hu2(r4), function(e4, t4, r5) {
          return e4 >= yr2(t4, r5) && e4 < vr2(t4, r5);
        }(e3 = vu2(e3), t3, r4);
      }, Lr2.invoke = ju2, Lr2.isArguments = Va2, Lr2.isArray = Wa2, Lr2.isArrayBuffer = qa2, Lr2.isArrayLike = Ga2, Lr2.isArrayLikeObject = Ha2, Lr2.isBoolean = function(e3) {
        return true === e3 || false === e3 || eu2(e3) && Sn2(e3) == b2;
      }, Lr2.isBuffer = Ya2, Lr2.isDate = Xa2, Lr2.isElement = function(e3) {
        return eu2(e3) && 1 === e3.nodeType && !nu2(e3);
      }, Lr2.isEmpty = function(e3) {
        if (null == e3) return true;
        if (Ga2(e3) && (Wa2(e3) || "string" == typeof e3 || "function" == typeof e3.splice || Ya2(e3) || su2(e3) || Va2(e3))) return !e3.length;
        var t3 = hi2(e3);
        if (t3 == O2 || t3 == x3) return !e3.size;
        if (wi2(e3)) return !Mn2(e3).length;
        for (var r4 in e3) if (Ie3.call(e3, r4)) return false;
        return true;
      }, Lr2.isEqual = function(e3, t3) {
        return An2(e3, t3);
      }, Lr2.isEqualWith = function(e3, t3, r4) {
        var n4 = (r4 = "function" == typeof r4 ? r4 : o2) ? r4(e3, t3) : o2;
        return n4 === o2 ? An2(e3, t3, o2, r4) : !!n4;
      }, Lr2.isError = Ka2, Lr2.isFinite = function(e3) {
        return "number" == typeof e3 && Dt3(e3);
      }, Lr2.isFunction = Za2, Lr2.isInteger = $a2, Lr2.isLength = Qa2, Lr2.isMap = tu2, Lr2.isMatch = function(e3, t3) {
        return e3 === t3 || kn2(e3, t3, si2(t3));
      }, Lr2.isMatchWith = function(e3, t3, r4) {
        return r4 = "function" == typeof r4 ? r4 : o2, kn2(e3, t3, si2(t3), r4);
      }, Lr2.isNaN = function(e3) {
        return ru2(e3) && e3 != +e3;
      }, Lr2.isNative = function(e3) {
        if (_i2(e3)) throw new we3("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");
        return Rn2(e3);
      }, Lr2.isNil = function(e3) {
        return null == e3;
      }, Lr2.isNull = function(e3) {
        return null === e3;
      }, Lr2.isNumber = ru2, Lr2.isObject = Ja2, Lr2.isObjectLike = eu2, Lr2.isPlainObject = nu2, Lr2.isRegExp = ou2, Lr2.isSafeInteger = function(e3) {
        return $a2(e3) && e3 >= -9007199254740991 && e3 <= f2;
      }, Lr2.isSet = iu2, Lr2.isString = au2, Lr2.isSymbol = uu2, Lr2.isTypedArray = su2, Lr2.isUndefined = function(e3) {
        return e3 === o2;
      }, Lr2.isWeakMap = function(e3) {
        return eu2(e3) && hi2(e3) == A2;
      }, Lr2.isWeakSet = function(e3) {
        return eu2(e3) && "[object WeakSet]" == Sn2(e3);
      }, Lr2.join = function(e3, t3) {
        return null == e3 ? "" : qt3.call(e3, t3);
      }, Lr2.kebabCase = Wu2, Lr2.last = Ki2, Lr2.lastIndexOf = function(e3, t3, r4) {
        var n4 = null == e3 ? 0 : e3.length;
        if (!n4) return -1;
        var i3 = n4;
        return r4 !== o2 && (i3 = (i3 = du2(r4)) < 0 ? vr2(n4 + i3, 0) : yr2(i3, n4 - 1)), t3 == t3 ? function(e4, t4, r5) {
          for (var n5 = r5 + 1; n5--; ) if (e4[n5] === t4) return n5;
          return n5;
        }(e3, t3, i3) : Ut2(e3, zt2, i3, true);
      }, Lr2.lowerCase = qu2, Lr2.lowerFirst = Gu2, Lr2.lt = cu2, Lr2.lte = lu2, Lr2.max = function(e3) {
        return e3 && e3.length ? dn2(e3, rs2, En2) : o2;
      }, Lr2.maxBy = function(e3, t3) {
        return e3 && e3.length ? dn2(e3, ai2(t3, 2), En2) : o2;
      }, Lr2.mean = function(e3) {
        return Vt2(e3, rs2);
      }, Lr2.meanBy = function(e3, t3) {
        return Vt2(e3, ai2(t3, 2));
      }, Lr2.min = function(e3) {
        return e3 && e3.length ? dn2(e3, rs2, Nn2) : o2;
      }, Lr2.minBy = function(e3, t3) {
        return e3 && e3.length ? dn2(e3, ai2(t3, 2), Nn2) : o2;
      }, Lr2.stubArray = ps2, Lr2.stubFalse = vs2, Lr2.stubObject = function() {
        return {};
      }, Lr2.stubString = function() {
        return "";
      }, Lr2.stubTrue = function() {
        return true;
      }, Lr2.multiply = ws2, Lr2.nth = function(e3, t3) {
        return e3 && e3.length ? Bn2(e3, du2(t3)) : o2;
      }, Lr2.noConflict = function() {
        return ft2._ === this && (ft2._ = Ue3), this;
      }, Lr2.noop = us2, Lr2.now = Pa2, Lr2.pad = function(e3, t3, r4) {
        e3 = bu2(e3);
        var n4 = (t3 = du2(t3)) ? cr2(e3) : 0;
        if (!t3 || n4 >= t3) return e3;
        var o3 = (t3 - n4) / 2;
        return Vo2(dt3(o3), r4) + e3 + Vo2(ht3(o3), r4);
      }, Lr2.padEnd = function(e3, t3, r4) {
        e3 = bu2(e3);
        var n4 = (t3 = du2(t3)) ? cr2(e3) : 0;
        return t3 && n4 < t3 ? e3 + Vo2(t3 - n4, r4) : e3;
      }, Lr2.padStart = function(e3, t3, r4) {
        e3 = bu2(e3);
        var n4 = (t3 = du2(t3)) ? cr2(e3) : 0;
        return t3 && n4 < t3 ? Vo2(t3 - n4, r4) + e3 : e3;
      }, Lr2.parseInt = function(e3, t3, r4) {
        return r4 || null == t3 ? t3 = 0 : t3 && (t3 = +t3), mr2(bu2(e3).replace(ne2, ""), t3 || 0);
      }, Lr2.random = function(e3, t3, r4) {
        if (r4 && "boolean" != typeof r4 && bi2(e3, t3, r4) && (t3 = r4 = o2), r4 === o2 && ("boolean" == typeof t3 ? (r4 = t3, t3 = o2) : "boolean" == typeof e3 && (r4 = e3, e3 = o2)), e3 === o2 && t3 === o2 ? (e3 = 0, t3 = 1) : (e3 = hu2(e3), t3 === o2 ? (t3 = e3, e3 = 0) : t3 = hu2(t3)), e3 > t3) {
          var n4 = e3;
          e3 = t3, t3 = n4;
        }
        if (r4 || e3 % 1 || t3 % 1) {
          var i3 = gr2();
          return yr2(e3 + i3 * (t3 - e3 + ut2("1e-" + ((i3 + "").length - 1))), t3);
        }
        return Gn2(e3, t3);
      }, Lr2.reduce = function(e3, t3, r4) {
        var n4 = Wa2(e3) ? It2 : Gt2, o3 = arguments.length < 3;
        return n4(e3, ai2(t3, 4), r4, o3, ln2);
      }, Lr2.reduceRight = function(e3, t3, r4) {
        var n4 = Wa2(e3) ? Mt2 : Gt2, o3 = arguments.length < 3;
        return n4(e3, ai2(t3, 4), r4, o3, fn4);
      }, Lr2.repeat = function(e3, t3, r4) {
        return t3 = (r4 ? bi2(e3, t3, r4) : t3 === o2) ? 1 : du2(t3), Hn2(bu2(e3), t3);
      }, Lr2.replace = function() {
        var e3 = arguments, t3 = bu2(e3[0]);
        return e3.length < 3 ? t3 : t3.replace(e3[1], e3[2]);
      }, Lr2.result = function(e3, t3, r4) {
        var n4 = -1, i3 = (t3 = bo2(t3, e3)).length;
        for (i3 || (i3 = 1, e3 = o2); ++n4 < i3; ) {
          var a3 = null == e3 ? o2 : e3[Di2(t3[n4])];
          a3 === o2 && (n4 = i3, a3 = r4), e3 = Za2(a3) ? a3.call(e3) : a3;
        }
        return e3;
      }, Lr2.round = Os2, Lr2.runInContext = e2, Lr2.sample = function(e3) {
        return (Wa2(e3) ? Xr2 : Xn2)(e3);
      }, Lr2.size = function(e3) {
        if (null == e3) return 0;
        if (Ga2(e3)) return au2(e3) ? cr2(e3) : e3.length;
        var t3 = hi2(e3);
        return t3 == O2 || t3 == x3 ? e3.size : Mn2(e3).length;
      }, Lr2.snakeCase = Hu2, Lr2.some = function(e3, t3, r4) {
        var n4 = Wa2(e3) ? Nt2 : to2;
        return r4 && bi2(e3, t3, r4) && (t3 = o2), n4(e3, ai2(t3, 3));
      }, Lr2.sortedIndex = function(e3, t3) {
        return ro2(e3, t3);
      }, Lr2.sortedIndexBy = function(e3, t3, r4) {
        return no2(e3, t3, ai2(r4, 2));
      }, Lr2.sortedIndexOf = function(e3, t3) {
        var r4 = null == e3 ? 0 : e3.length;
        if (r4) {
          var n4 = ro2(e3, t3);
          if (n4 < r4 && Fa2(e3[n4], t3)) return n4;
        }
        return -1;
      }, Lr2.sortedLastIndex = function(e3, t3) {
        return ro2(e3, t3, true);
      }, Lr2.sortedLastIndexBy = function(e3, t3, r4) {
        return no2(e3, t3, ai2(r4, 2), true);
      }, Lr2.sortedLastIndexOf = function(e3, t3) {
        if (null != e3 && e3.length) {
          var r4 = ro2(e3, t3, true) - 1;
          if (Fa2(e3[r4], t3)) return r4;
        }
        return -1;
      }, Lr2.startCase = Yu2, Lr2.startsWith = function(e3, t3, r4) {
        return e3 = bu2(e3), r4 = null == r4 ? 0 : on4(du2(r4), 0, e3.length), t3 = ao2(t3), e3.slice(r4, r4 + t3.length) == t3;
      }, Lr2.subtract = Ss2, Lr2.sum = function(e3) {
        return e3 && e3.length ? Ht2(e3, rs2) : 0;
      }, Lr2.sumBy = function(e3, t3) {
        return e3 && e3.length ? Ht2(e3, ai2(t3, 2)) : 0;
      }, Lr2.template = function(e3, t3, r4) {
        var n4 = Lr2.templateSettings;
        r4 && bi2(e3, t3, r4) && (t3 = o2), e3 = bu2(e3), t3 = _u2({}, t3, n4, Zo2);
        var i3, a3, u3 = _u2({}, t3.imports, n4.imports, Zo2), s3 = Au2(u3), c3 = Zt2(u3, s3), l3 = 0, f3 = t3.interpolate || ge2, h3 = "__p += '", d3 = Pe3((t3.escape || ge2).source + "|" + f3.source + "|" + (f3 === $3 ? fe2 : ge2).source + "|" + (t3.evaluate || ge2).source + "|$", "g"), p4 = "//# sourceURL=" + (Ie3.call(t3, "sourceURL") ? (t3.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++nt2 + "]") + "\n";
        e3.replace(d3, function(t4, r5, n5, o3, u4, s4) {
          return n5 || (n5 = o3), h3 += e3.slice(l3, s4).replace(_e2, rr2), r5 && (i3 = true, h3 += "' +\n__e(" + r5 + ") +\n'"), u4 && (a3 = true, h3 += "';\n" + u4 + ";\n__p += '"), n5 && (h3 += "' +\n((__t = (" + n5 + ")) == null ? '' : __t) +\n'"), l3 = s4 + t4.length, t4;
        }), h3 += "';\n";
        var v5 = Ie3.call(t3, "variable") && t3.variable;
        if (v5) {
          if (ce2.test(v5)) throw new we3("Invalid `variable` option passed into `_.template`");
        } else h3 = "with (obj) {\n" + h3 + "\n}\n";
        h3 = (a3 ? h3.replace(V2, "") : h3).replace(W2, "$1").replace(q2, "$1;"), h3 = "function(" + (v5 || "obj") + ") {\n" + (v5 ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (i3 ? ", __e = _.escape" : "") + (a3 ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + h3 + "return __p\n}";
        var y4 = $u2(function() {
          return Oe3(s3, p4 + "return " + h3).apply(o2, c3);
        });
        if (y4.source = h3, Ka2(y4)) throw y4;
        return y4;
      }, Lr2.times = function(e3, t3) {
        if ((e3 = du2(e3)) < 1 || e3 > f2) return [];
        var r4 = d2, n4 = yr2(e3, d2);
        t3 = ai2(t3), e3 -= d2;
        for (var o3 = Yt2(n4, t3); ++r4 < e3; ) t3(r4);
        return o3;
      }, Lr2.toFinite = hu2, Lr2.toInteger = du2, Lr2.toLength = pu2, Lr2.toLower = function(e3) {
        return bu2(e3).toLowerCase();
      }, Lr2.toNumber = vu2, Lr2.toSafeInteger = function(e3) {
        return e3 ? on4(du2(e3), -9007199254740991, f2) : 0 === e3 ? e3 : 0;
      }, Lr2.toString = bu2, Lr2.toUpper = function(e3) {
        return bu2(e3).toUpperCase();
      }, Lr2.trim = function(e3, t3, r4) {
        if ((e3 = bu2(e3)) && (r4 || t3 === o2)) return Xt2(e3);
        if (!e3 || !(t3 = ao2(t3))) return e3;
        var n4 = lr2(e3), i3 = lr2(t3);
        return go2(n4, Qt2(n4, i3), Jt2(n4, i3) + 1).join("");
      }, Lr2.trimEnd = function(e3, t3, r4) {
        if ((e3 = bu2(e3)) && (r4 || t3 === o2)) return e3.slice(0, fr2(e3) + 1);
        if (!e3 || !(t3 = ao2(t3))) return e3;
        var n4 = lr2(e3);
        return go2(n4, 0, Jt2(n4, lr2(t3)) + 1).join("");
      }, Lr2.trimStart = function(e3, t3, r4) {
        if ((e3 = bu2(e3)) && (r4 || t3 === o2)) return e3.replace(ne2, "");
        if (!e3 || !(t3 = ao2(t3))) return e3;
        var n4 = lr2(e3);
        return go2(n4, Qt2(n4, lr2(t3))).join("");
      }, Lr2.truncate = function(e3, t3) {
        var r4 = 30, n4 = "...";
        if (Ja2(t3)) {
          var i3 = "separator" in t3 ? t3.separator : i3;
          r4 = "length" in t3 ? du2(t3.length) : r4, n4 = "omission" in t3 ? ao2(t3.omission) : n4;
        }
        var a3 = (e3 = bu2(e3)).length;
        if (nr2(e3)) {
          var u3 = lr2(e3);
          a3 = u3.length;
        }
        if (r4 >= a3) return e3;
        var s3 = r4 - cr2(n4);
        if (s3 < 1) return n4;
        var c3 = u3 ? go2(u3, 0, s3).join("") : e3.slice(0, s3);
        if (i3 === o2) return c3 + n4;
        if (u3 && (s3 += c3.length - s3), ou2(i3)) {
          if (e3.slice(s3).search(i3)) {
            var l3, f3 = c3;
            for (i3.global || (i3 = Pe3(i3.source, bu2(he2.exec(i3)) + "g")), i3.lastIndex = 0; l3 = i3.exec(f3); ) var h3 = l3.index;
            c3 = c3.slice(0, h3 === o2 ? s3 : h3);
          }
        } else if (e3.indexOf(ao2(i3), s3) != s3) {
          var d3 = c3.lastIndexOf(i3);
          d3 > -1 && (c3 = c3.slice(0, d3));
        }
        return c3 + n4;
      }, Lr2.unescape = function(e3) {
        return (e3 = bu2(e3)) && Y2.test(e3) ? e3.replace(G2, hr2) : e3;
      }, Lr2.uniqueId = function(e3) {
        var t3 = ++Me3;
        return bu2(e3) + t3;
      }, Lr2.upperCase = Xu2, Lr2.upperFirst = Ku2, Lr2.each = ba2, Lr2.eachRight = ma2, Lr2.first = Gi2, as2(Lr2, (ys2 = {}, mn2(Lr2, function(e3, t3) {
        Ie3.call(Lr2.prototype, t3) || (ys2[t3] = e3);
      }), ys2), { chain: false }), Lr2.VERSION = "4.17.21", Pt2(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(e3) {
        Lr2[e3].placeholder = Lr2;
      }), Pt2(["drop", "take"], function(e3, t3) {
        zr2.prototype[e3] = function(r4) {
          r4 = r4 === o2 ? 1 : vr2(du2(r4), 0);
          var n4 = this.__filtered__ && !t3 ? new zr2(this) : this.clone();
          return n4.__filtered__ ? n4.__takeCount__ = yr2(r4, n4.__takeCount__) : n4.__views__.push({ size: yr2(r4, d2), type: e3 + (n4.__dir__ < 0 ? "Right" : "") }), n4;
        }, zr2.prototype[e3 + "Right"] = function(t4) {
          return this.reverse()[e3](t4).reverse();
        };
      }), Pt2(["filter", "map", "takeWhile"], function(e3, t3) {
        var r4 = t3 + 1, n4 = 1 == r4 || 3 == r4;
        zr2.prototype[e3] = function(e4) {
          var t4 = this.clone();
          return t4.__iteratees__.push({ iteratee: ai2(e4, 3), type: r4 }), t4.__filtered__ = t4.__filtered__ || n4, t4;
        };
      }), Pt2(["head", "last"], function(e3, t3) {
        var r4 = "take" + (t3 ? "Right" : "");
        zr2.prototype[e3] = function() {
          return this[r4](1).value()[0];
        };
      }), Pt2(["initial", "tail"], function(e3, t3) {
        var r4 = "drop" + (t3 ? "" : "Right");
        zr2.prototype[e3] = function() {
          return this.__filtered__ ? new zr2(this) : this[r4](1);
        };
      }), zr2.prototype.compact = function() {
        return this.filter(rs2);
      }, zr2.prototype.find = function(e3) {
        return this.filter(e3).head();
      }, zr2.prototype.findLast = function(e3) {
        return this.reverse().find(e3);
      }, zr2.prototype.invokeMap = Yn2(function(e3, t3) {
        return "function" == typeof e3 ? new zr2(this) : this.map(function(r4) {
          return Cn2(r4, e3, t3);
        });
      }), zr2.prototype.reject = function(e3) {
        return this.filter(Ma2(ai2(e3)));
      }, zr2.prototype.slice = function(e3, t3) {
        e3 = du2(e3);
        var r4 = this;
        return r4.__filtered__ && (e3 > 0 || t3 < 0) ? new zr2(r4) : (e3 < 0 ? r4 = r4.takeRight(-e3) : e3 && (r4 = r4.drop(e3)), t3 !== o2 && (r4 = (t3 = du2(t3)) < 0 ? r4.dropRight(-t3) : r4.take(t3 - e3)), r4);
      }, zr2.prototype.takeRightWhile = function(e3) {
        return this.reverse().takeWhile(e3).reverse();
      }, zr2.prototype.toArray = function() {
        return this.take(d2);
      }, mn2(zr2.prototype, function(e3, t3) {
        var r4 = /^(?:filter|find|map|reject)|While$/.test(t3), n4 = /^(?:head|last)$/.test(t3), i3 = Lr2[n4 ? "take" + ("last" == t3 ? "Right" : "") : t3], a3 = n4 || /^find/.test(t3);
        i3 && (Lr2.prototype[t3] = function() {
          var t4 = this.__wrapped__, u3 = n4 ? [1] : arguments, s3 = t4 instanceof zr2, c3 = u3[0], l3 = s3 || Wa2(t4), f3 = function(e4) {
            var t5 = i3.apply(Lr2, Rt2([e4], u3));
            return n4 && h3 ? t5[0] : t5;
          };
          l3 && r4 && "function" == typeof c3 && 1 != c3.length && (s3 = l3 = false);
          var h3 = this.__chain__, d3 = !!this.__actions__.length, p4 = a3 && !h3, v5 = s3 && !d3;
          if (!a3 && l3) {
            t4 = v5 ? t4 : new zr2(this);
            var y4 = e3.apply(t4, u3);
            return y4.__actions__.push({ func: ha2, args: [f3], thisArg: o2 }), new Br2(y4, h3);
          }
          return p4 && v5 ? e3.apply(this, u3) : (y4 = this.thru(f3), p4 ? n4 ? y4.value()[0] : y4.value() : y4);
        });
      }), Pt2(["pop", "push", "shift", "sort", "splice", "unshift"], function(e3) {
        var t3 = Ce3[e3], r4 = /^(?:push|sort|unshift)$/.test(e3) ? "tap" : "thru", n4 = /^(?:pop|shift)$/.test(e3);
        Lr2.prototype[e3] = function() {
          var e4 = arguments;
          if (n4 && !this.__chain__) {
            var o3 = this.value();
            return t3.apply(Wa2(o3) ? o3 : [], e4);
          }
          return this[r4](function(r5) {
            return t3.apply(Wa2(r5) ? r5 : [], e4);
          });
        };
      }), mn2(zr2.prototype, function(e3, t3) {
        var r4 = Lr2[t3];
        if (r4) {
          var n4 = r4.name + "";
          Ie3.call(Cr2, n4) || (Cr2[n4] = []), Cr2[n4].push({ name: t3, func: r4 });
        }
      }), Cr2[Uo2(o2, 2).name] = [{ name: "wrapper", func: o2 }], zr2.prototype.clone = function() {
        var e3 = new zr2(this.__wrapped__);
        return e3.__actions__ = xo2(this.__actions__), e3.__dir__ = this.__dir__, e3.__filtered__ = this.__filtered__, e3.__iteratees__ = xo2(this.__iteratees__), e3.__takeCount__ = this.__takeCount__, e3.__views__ = xo2(this.__views__), e3;
      }, zr2.prototype.reverse = function() {
        if (this.__filtered__) {
          var e3 = new zr2(this);
          e3.__dir__ = -1, e3.__filtered__ = true;
        } else (e3 = this.clone()).__dir__ *= -1;
        return e3;
      }, zr2.prototype.value = function() {
        var e3 = this.__wrapped__.value(), t3 = this.__dir__, r4 = Wa2(e3), n4 = t3 < 0, o3 = r4 ? e3.length : 0, i3 = function(e4, t4, r5) {
          for (var n5 = -1, o4 = r5.length; ++n5 < o4; ) {
            var i4 = r5[n5], a4 = i4.size;
            switch (i4.type) {
              case "drop":
                e4 += a4;
                break;
              case "dropRight":
                t4 -= a4;
                break;
              case "take":
                t4 = yr2(t4, e4 + a4);
                break;
              case "takeRight":
                e4 = vr2(e4, t4 - a4);
            }
          }
          return { start: e4, end: t4 };
        }(0, o3, this.__views__), a3 = i3.start, u3 = i3.end, s3 = u3 - a3, c3 = n4 ? u3 : a3 - 1, l3 = this.__iteratees__, f3 = l3.length, h3 = 0, d3 = yr2(s3, this.__takeCount__);
        if (!r4 || !n4 && o3 == s3 && d3 == s3) return fo2(e3, this.__actions__);
        var p4 = [];
        e: for (; s3-- && h3 < d3; ) {
          for (var v5 = -1, y4 = e3[c3 += t3]; ++v5 < f3; ) {
            var b3 = l3[v5], m3 = b3.iteratee, g3 = b3.type, _3 = m3(y4);
            if (2 == g3) y4 = _3;
            else if (!_3) {
              if (1 == g3) continue e;
              break e;
            }
          }
          p4[h3++] = y4;
        }
        return p4;
      }, Lr2.prototype.at = da2, Lr2.prototype.chain = function() {
        return fa2(this);
      }, Lr2.prototype.commit = function() {
        return new Br2(this.value(), this.__chain__);
      }, Lr2.prototype.next = function() {
        this.__values__ === o2 && (this.__values__ = fu2(this.value()));
        var e3 = this.__index__ >= this.__values__.length;
        return { done: e3, value: e3 ? o2 : this.__values__[this.__index__++] };
      }, Lr2.prototype.plant = function(e3) {
        for (var t3, r4 = this; r4 instanceof Fr2; ) {
          var n4 = Ui2(r4);
          n4.__index__ = 0, n4.__values__ = o2, t3 ? i3.__wrapped__ = n4 : t3 = n4;
          var i3 = n4;
          r4 = r4.__wrapped__;
        }
        return i3.__wrapped__ = e3, t3;
      }, Lr2.prototype.reverse = function() {
        var e3 = this.__wrapped__;
        if (e3 instanceof zr2) {
          var t3 = e3;
          return this.__actions__.length && (t3 = new zr2(this)), (t3 = t3.reverse()).__actions__.push({ func: ha2, args: [Ji2], thisArg: o2 }), new Br2(t3, this.__chain__);
        }
        return this.thru(Ji2);
      }, Lr2.prototype.toJSON = Lr2.prototype.valueOf = Lr2.prototype.value = function() {
        return fo2(this.__wrapped__, this.__actions__);
      }, Lr2.prototype.first = Lr2.prototype.head, Ke3 && (Lr2.prototype[Ke3] = function() {
        return this;
      }), Lr2;
    }();
    ft2._ = dr2, (n2 = (function() {
      return dr2;
    }).call(t, r2, t, e)) === o2 || (e.exports = n2);
  }).call(this);
}, 5267: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true }), t.AsyncAction = void 0;
  var o2 = r2(4671), i2 = r2(5649), a2 = r2(7479), u2 = function(e2) {
    function t2(t3, r3) {
      var n3 = e2.call(this, t3, r3) || this;
      return n3.scheduler = t3, n3.work = r3, n3.pending = false, n3;
    }
    return n2(t2, e2), t2.prototype.schedule = function(e3, t3) {
      var r3;
      if (void 0 === t3 && (t3 = 0), this.closed) return this;
      this.state = e3;
      var n3 = this.id, o3 = this.scheduler;
      return null != n3 && (this.id = this.recycleAsyncId(o3, n3, t3)), this.pending = true, this.delay = t3, this.id = null !== (r3 = this.id) && void 0 !== r3 ? r3 : this.requestAsyncId(o3, this.id, t3), this;
    }, t2.prototype.requestAsyncId = function(e3, t3, r3) {
      return void 0 === r3 && (r3 = 0), i2.intervalProvider.setInterval(e3.flush.bind(e3, this), r3);
    }, t2.prototype.recycleAsyncId = function(e3, t3, r3) {
      if (void 0 === r3 && (r3 = 0), null != r3 && this.delay === r3 && false === this.pending) return t3;
      null != t3 && i2.intervalProvider.clearInterval(t3);
    }, t2.prototype.execute = function(e3, t3) {
      if (this.closed) return new Error("executing a cancelled action");
      this.pending = false;
      var r3 = this._execute(e3, t3);
      if (r3) return r3;
      false === this.pending && null != this.id && (this.id = this.recycleAsyncId(this.scheduler, this.id, null));
    }, t2.prototype._execute = function(e3, t3) {
      var r3, n3 = false;
      try {
        this.work(e3);
      } catch (e4) {
        n3 = true, r3 = e4 || new Error("Scheduled action threw falsy error");
      }
      if (n3) return this.unsubscribe(), r3;
    }, t2.prototype.unsubscribe = function() {
      if (!this.closed) {
        var t3 = this.id, r3 = this.scheduler, n3 = r3.actions;
        this.work = this.state = this.scheduler = null, this.pending = false, a2.arrRemove(n3, this), null != t3 && (this.id = this.recycleAsyncId(r3, t3, null)), this.delay = null, e2.prototype.unsubscribe.call(this);
      }
    }, t2;
  }(o2.Action);
  t.AsyncAction = u2;
}, 5319: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.alloc = void 0;
  var i2 = o2(r2(1048)), a2 = function(e2) {
    function t2(t3) {
      var r3 = this, n3 = function(e3) {
        return e3 instanceof i2.default.Buffer ? e3 : "number" == typeof e3 && "function" == typeof i2.default.Buffer.alloc ? i2.default.Buffer.alloc(e3) : new i2.default.Buffer(e3);
      }(t3);
      return (r3 = e2.call(this, n3.length) || this)._buffer = n3, r3;
    }
    return n2(t2, e2), t2.prototype.getUInt8 = function(e3) {
      return this._buffer.readUInt8(e3);
    }, t2.prototype.getInt8 = function(e3) {
      return this._buffer.readInt8(e3);
    }, t2.prototype.getFloat64 = function(e3) {
      return this._buffer.readDoubleBE(e3);
    }, t2.prototype.getVarInt = function(e3) {
      for (var t3 = 0, r3 = this._buffer.readInt8(e3 + t3), n3 = r3 % 128; r3 / 128 >= 1; ) t3 += 1, n3 += (r3 = this._buffer.readInt8(e3 + t3)) % 128;
      return { length: t3 + 1, value: n3 };
    }, t2.prototype.putUInt8 = function(e3, t3) {
      this._buffer.writeUInt8(t3, e3);
    }, t2.prototype.putInt8 = function(e3, t3) {
      this._buffer.writeInt8(t3, e3);
    }, t2.prototype.putFloat64 = function(e3, t3) {
      this._buffer.writeDoubleBE(t3, e3);
    }, t2.prototype.putBytes = function(r3, n3) {
      if (n3 instanceof t2) {
        var o3 = Math.min(n3.length - n3.position, this.length - r3);
        n3._buffer.copy(this._buffer, r3, n3.position, n3.position + o3), n3.position += o3;
      } else e2.prototype.putBytes.call(this, r3, n3);
    }, t2.prototype.getSlice = function(e3, r3) {
      return new t2(this._buffer.slice(e3, e3 + r3));
    }, t2;
  }(o2(r2(7174)).default);
  t.default = a2, t.alloc = function(e2) {
    return new a2(e2);
  };
}, 5337: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.fromEvent = void 0;
  var o2 = r2(9445), i2 = r2(4662), a2 = r2(983), u2 = r2(8046), s2 = r2(1018), c2 = r2(1251), l2 = ["addListener", "removeListener"], f2 = ["addEventListener", "removeEventListener"], h2 = ["on", "off"];
  function d2(e2, t2) {
    return function(r3) {
      return function(n3) {
        return e2[r3](t2, n3);
      };
    };
  }
  t.fromEvent = function e2(t2, r3, p3, v3) {
    if (s2.isFunction(p3) && (v3 = p3, p3 = void 0), v3) return e2(t2, r3, p3).pipe(c2.mapOneOrManyArgs(v3));
    var y3 = n2(function(e3) {
      return s2.isFunction(e3.addEventListener) && s2.isFunction(e3.removeEventListener);
    }(t2) ? f2.map(function(e3) {
      return function(n3) {
        return t2[e3](r3, n3, p3);
      };
    }) : function(e3) {
      return s2.isFunction(e3.addListener) && s2.isFunction(e3.removeListener);
    }(t2) ? l2.map(d2(t2, r3)) : function(e3) {
      return s2.isFunction(e3.on) && s2.isFunction(e3.off);
    }(t2) ? h2.map(d2(t2, r3)) : [], 2), b2 = y3[0], m2 = y3[1];
    if (!b2 && u2.isArrayLike(t2)) return a2.mergeMap(function(t3) {
      return e2(t3, r3, p3);
    })(o2.innerFrom(t2));
    if (!b2) throw new TypeError("Invalid event target");
    return new i2.Observable(function(e3) {
      var t3 = function() {
        for (var t4 = [], r4 = 0; r4 < arguments.length; r4++) t4[r4] = arguments[r4];
        return e3.next(1 < t4.length ? t4 : t4[0]);
      };
      return b2(t3), function() {
        return m2(t3);
      };
    });
  };
}, 5348: function(e, t, r2) {
  var n2 = this && this.__assign || function() {
    return n2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, n2.apply(this, arguments);
  }, o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = o2(r2(7521));
  t.default = n2({}, i2.default);
}, 5361: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.Unpacker = t.Packer = void 0;
  var n2 = r2(7452), o2 = r2(6781), i2 = r2(7665), a2 = r2(9305), u2 = a2.error.PROTOCOL_ERROR, s2 = function() {
    function e2(e3) {
      this._ch = e3, this._byteArraysSupported = true;
    }
    return e2.prototype.packable = function(e3, t2) {
      var r3, n3 = this;
      void 0 === t2 && (t2 = o2.functional.identity);
      try {
        e3 = t2(e3);
      } catch (e4) {
        return function() {
          throw e4;
        };
      }
      if (null === e3) return function() {
        return n3._ch.writeUInt8(192);
      };
      if (true === e3) return function() {
        return n3._ch.writeUInt8(195);
      };
      if (false === e3) return function() {
        return n3._ch.writeUInt8(194);
      };
      if ("number" == typeof e3) return function() {
        return n3.packFloat(e3);
      };
      if ("string" == typeof e3) return function() {
        return n3.packString(e3);
      };
      if ("bigint" == typeof e3) return function() {
        return n3.packInteger((0, a2.int)(e3));
      };
      if ((0, a2.isInt)(e3)) return function() {
        return n3.packInteger(e3);
      };
      if (e3 instanceof Int8Array) return function() {
        return n3.packBytes(e3);
      };
      if (e3 instanceof Array) return function() {
        n3.packListHeader(e3.length);
        for (var r4 = 0; r4 < e3.length; r4++) n3.packable(void 0 === e3[r4] ? null : e3[r4], t2)();
      };
      if (null != (r3 = e3) && "function" == typeof r3[Symbol.iterator]) return this.packableIterable(e3, t2);
      if (e3 instanceof i2.Structure) {
        for (var u3 = [], s3 = 0; s3 < e3.fields.length; s3++) u3[s3] = this.packable(e3.fields[s3], t2);
        return function() {
          return n3.packStruct(e3.signature, u3);
        };
      }
      return "object" == typeof e3 ? function() {
        for (var r4 = Object.keys(e3), o3 = 0, i3 = 0; i3 < r4.length; i3++) void 0 !== e3[r4[i3]] && o3++;
        for (n3.packMapHeader(o3), i3 = 0; i3 < r4.length; i3++) {
          var a3 = r4[i3];
          void 0 !== e3[a3] && (n3.packString(a3), n3.packable(e3[a3], t2)());
        }
      } : this._nonPackableValue("Unable to pack the given value: ".concat(e3));
    }, e2.prototype.packableIterable = function(e3, t2) {
      try {
        var r3 = Array.from(e3);
        return this.packable(r3, t2);
      } catch (t3) {
        throw (0, a2.newError)("Cannot pack given iterable, ".concat(t3.message, ": ").concat(e3));
      }
    }, e2.prototype.packStruct = function(e3, t2) {
      t2 = t2 || [], this.packStructHeader(t2.length, e3);
      for (var r3 = 0; r3 < t2.length; r3++) t2[r3]();
    }, e2.prototype.packInteger = function(e3) {
      var t2 = e3.high, r3 = e3.low;
      e3.greaterThanOrEqual(-16) && e3.lessThan(128) ? this._ch.writeInt8(r3) : e3.greaterThanOrEqual(-128) && e3.lessThan(-16) ? (this._ch.writeUInt8(200), this._ch.writeInt8(r3)) : e3.greaterThanOrEqual(-32768) && e3.lessThan(32768) ? (this._ch.writeUInt8(201), this._ch.writeInt16(r3)) : e3.greaterThanOrEqual(-2147483648) && e3.lessThan(2147483648) ? (this._ch.writeUInt8(202), this._ch.writeInt32(r3)) : (this._ch.writeUInt8(203), this._ch.writeInt32(t2), this._ch.writeInt32(r3));
    }, e2.prototype.packFloat = function(e3) {
      this._ch.writeUInt8(193), this._ch.writeFloat64(e3);
    }, e2.prototype.packString = function(e3) {
      var t2 = n2.utf8.encode(e3), r3 = t2.length;
      if (r3 < 16) this._ch.writeUInt8(128 | r3), this._ch.writeBytes(t2);
      else if (r3 < 256) this._ch.writeUInt8(208), this._ch.writeUInt8(r3), this._ch.writeBytes(t2);
      else if (r3 < 65536) this._ch.writeUInt8(209), this._ch.writeUInt8(r3 / 256 | 0), this._ch.writeUInt8(r3 % 256), this._ch.writeBytes(t2);
      else {
        if (!(r3 < 4294967296)) throw (0, a2.newError)("UTF-8 strings of size " + r3 + " are not supported");
        this._ch.writeUInt8(210), this._ch.writeUInt8((r3 / 16777216 | 0) % 256), this._ch.writeUInt8((r3 / 65536 | 0) % 256), this._ch.writeUInt8((r3 / 256 | 0) % 256), this._ch.writeUInt8(r3 % 256), this._ch.writeBytes(t2);
      }
    }, e2.prototype.packListHeader = function(e3) {
      if (e3 < 16) this._ch.writeUInt8(144 | e3);
      else if (e3 < 256) this._ch.writeUInt8(212), this._ch.writeUInt8(e3);
      else if (e3 < 65536) this._ch.writeUInt8(213), this._ch.writeUInt8((e3 / 256 | 0) % 256), this._ch.writeUInt8(e3 % 256);
      else {
        if (!(e3 < 4294967296)) throw (0, a2.newError)("Lists of size " + e3 + " are not supported");
        this._ch.writeUInt8(214), this._ch.writeUInt8((e3 / 16777216 | 0) % 256), this._ch.writeUInt8((e3 / 65536 | 0) % 256), this._ch.writeUInt8((e3 / 256 | 0) % 256), this._ch.writeUInt8(e3 % 256);
      }
    }, e2.prototype.packBytes = function(e3) {
      if (!this._byteArraysSupported) throw (0, a2.newError)("Byte arrays are not supported by the database this driver is connected to");
      this.packBytesHeader(e3.length);
      for (var t2 = 0; t2 < e3.length; t2++) this._ch.writeInt8(e3[t2]);
    }, e2.prototype.packBytesHeader = function(e3) {
      if (e3 < 256) this._ch.writeUInt8(204), this._ch.writeUInt8(e3);
      else if (e3 < 65536) this._ch.writeUInt8(205), this._ch.writeUInt8((e3 / 256 | 0) % 256), this._ch.writeUInt8(e3 % 256);
      else {
        if (!(e3 < 4294967296)) throw (0, a2.newError)("Byte arrays of size " + e3 + " are not supported");
        this._ch.writeUInt8(206), this._ch.writeUInt8((e3 / 16777216 | 0) % 256), this._ch.writeUInt8((e3 / 65536 | 0) % 256), this._ch.writeUInt8((e3 / 256 | 0) % 256), this._ch.writeUInt8(e3 % 256);
      }
    }, e2.prototype.packMapHeader = function(e3) {
      if (e3 < 16) this._ch.writeUInt8(160 | e3);
      else if (e3 < 256) this._ch.writeUInt8(216), this._ch.writeUInt8(e3);
      else if (e3 < 65536) this._ch.writeUInt8(217), this._ch.writeUInt8(e3 / 256 | 0), this._ch.writeUInt8(e3 % 256);
      else {
        if (!(e3 < 4294967296)) throw (0, a2.newError)("Maps of size " + e3 + " are not supported");
        this._ch.writeUInt8(218), this._ch.writeUInt8((e3 / 16777216 | 0) % 256), this._ch.writeUInt8((e3 / 65536 | 0) % 256), this._ch.writeUInt8((e3 / 256 | 0) % 256), this._ch.writeUInt8(e3 % 256);
      }
    }, e2.prototype.packStructHeader = function(e3, t2) {
      if (e3 < 16) this._ch.writeUInt8(176 | e3), this._ch.writeUInt8(t2);
      else if (e3 < 256) this._ch.writeUInt8(220), this._ch.writeUInt8(e3), this._ch.writeUInt8(t2);
      else {
        if (!(e3 < 65536)) throw (0, a2.newError)("Structures of size " + e3 + " are not supported");
        this._ch.writeUInt8(221), this._ch.writeUInt8(e3 / 256 | 0), this._ch.writeUInt8(e3 % 256);
      }
    }, e2.prototype.disableByteArrays = function() {
      this._byteArraysSupported = false;
    }, e2.prototype._nonPackableValue = function(e3) {
      return function() {
        throw (0, a2.newError)(e3, u2);
      };
    }, e2;
  }();
  t.Packer = s2;
  var c2 = function() {
    function e2(e3, t2) {
      void 0 === e3 && (e3 = false), void 0 === t2 && (t2 = false), this._disableLosslessIntegers = e3, this._useBigInt = t2;
    }
    return e2.prototype.unpack = function(e3, t2) {
      void 0 === t2 && (t2 = o2.functional.identity);
      var r3 = e3.readUInt8(), n3 = 240 & r3, i3 = 15 & r3;
      if (192 === r3) return null;
      var u3 = this._unpackBoolean(r3);
      if (null !== u3) return u3;
      var s3 = this._unpackNumberOrInteger(r3, e3);
      if (null !== s3) {
        if ((0, a2.isInt)(s3)) {
          if (this._useBigInt) return s3.toBigInt();
          if (this._disableLosslessIntegers) return s3.toNumberOrInfinity();
        }
        return s3;
      }
      var c3 = this._unpackString(r3, n3, i3, e3);
      if (null !== c3) return c3;
      var l2 = this._unpackList(r3, n3, i3, e3, t2);
      if (null !== l2) return l2;
      var f2 = this._unpackByteArray(r3, e3);
      if (null !== f2) return f2;
      var h2 = this._unpackMap(r3, n3, i3, e3, t2);
      if (null !== h2) return h2;
      var d2 = this._unpackStruct(r3, n3, i3, e3, t2);
      if (null !== d2) return d2;
      throw (0, a2.newError)("Unknown packed value with marker " + r3.toString(16));
    }, e2.prototype.unpackInteger = function(e3) {
      var t2 = e3.readUInt8(), r3 = this._unpackInteger(t2, e3);
      if (null == r3) throw (0, a2.newError)("Unable to unpack integer value with marker " + t2.toString(16));
      return r3;
    }, e2.prototype._unpackBoolean = function(e3) {
      return 195 === e3 || 194 !== e3 && null;
    }, e2.prototype._unpackNumberOrInteger = function(e3, t2) {
      return 193 === e3 ? t2.readFloat64() : this._unpackInteger(e3, t2);
    }, e2.prototype._unpackInteger = function(e3, t2) {
      if (e3 >= 0 && e3 < 128) return (0, a2.int)(e3);
      if (e3 >= 240 && e3 < 256) return (0, a2.int)(e3 - 256);
      if (200 === e3) return (0, a2.int)(t2.readInt8());
      if (201 === e3) return (0, a2.int)(t2.readInt16());
      if (202 === e3) {
        var r3 = t2.readInt32();
        return (0, a2.int)(r3);
      }
      if (203 === e3) {
        var n3 = t2.readInt32(), o3 = t2.readInt32();
        return new a2.Integer(o3, n3);
      }
      return null;
    }, e2.prototype._unpackString = function(e3, t2, r3, o3) {
      return 128 === t2 ? n2.utf8.decode(o3, r3) : 208 === e3 ? n2.utf8.decode(o3, o3.readUInt8()) : 209 === e3 ? n2.utf8.decode(o3, o3.readUInt16()) : 210 === e3 ? n2.utf8.decode(o3, o3.readUInt32()) : null;
    }, e2.prototype._unpackList = function(e3, t2, r3, n3, o3) {
      return 144 === t2 ? this._unpackListWithSize(r3, n3, o3) : 212 === e3 ? this._unpackListWithSize(n3.readUInt8(), n3, o3) : 213 === e3 ? this._unpackListWithSize(n3.readUInt16(), n3, o3) : 214 === e3 ? this._unpackListWithSize(n3.readUInt32(), n3, o3) : null;
    }, e2.prototype._unpackListWithSize = function(e3, t2, r3) {
      for (var n3 = [], o3 = 0; o3 < e3; o3++) n3.push(this.unpack(t2, r3));
      return n3;
    }, e2.prototype._unpackByteArray = function(e3, t2) {
      return 204 === e3 ? this._unpackByteArrayWithSize(t2.readUInt8(), t2) : 205 === e3 ? this._unpackByteArrayWithSize(t2.readUInt16(), t2) : 206 === e3 ? this._unpackByteArrayWithSize(t2.readUInt32(), t2) : null;
    }, e2.prototype._unpackByteArrayWithSize = function(e3, t2) {
      for (var r3 = new Int8Array(e3), n3 = 0; n3 < e3; n3++) r3[n3] = t2.readInt8();
      return r3;
    }, e2.prototype._unpackMap = function(e3, t2, r3, n3, o3) {
      return 160 === t2 ? this._unpackMapWithSize(r3, n3, o3) : 216 === e3 ? this._unpackMapWithSize(n3.readUInt8(), n3, o3) : 217 === e3 ? this._unpackMapWithSize(n3.readUInt16(), n3, o3) : 218 === e3 ? this._unpackMapWithSize(n3.readUInt32(), n3, o3) : null;
    }, e2.prototype._unpackMapWithSize = function(e3, t2, r3) {
      for (var n3 = {}, o3 = 0; o3 < e3; o3++) n3[this.unpack(t2, r3)] = this.unpack(t2, r3);
      return n3;
    }, e2.prototype._unpackStruct = function(e3, t2, r3, n3, o3) {
      return 176 === t2 ? this._unpackStructWithSize(r3, n3, o3) : 220 === e3 ? this._unpackStructWithSize(n3.readUInt8(), n3, o3) : 221 === e3 ? this._unpackStructWithSize(n3.readUInt16(), n3, o3) : null;
    }, e2.prototype._unpackStructWithSize = function(e3, t2, r3) {
      for (var n3 = t2.readUInt8(), o3 = new i2.Structure(n3, []), a3 = 0; a3 < e3; a3++) o3.fields.push(this.unpack(t2, r3));
      return r3(o3);
    }, e2;
  }();
  t.Unpacker = c2;
}, 5365: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.distinct = void 0;
  var n2 = r2(7843), o2 = r2(3111), i2 = r2(1342), a2 = r2(9445);
  t.distinct = function(e2, t2) {
    return n2.operate(function(r3, n3) {
      var u2 = /* @__PURE__ */ new Set();
      r3.subscribe(o2.createOperatorSubscriber(n3, function(t3) {
        var r4 = e2 ? e2(t3) : t3;
        u2.has(r4) || (u2.add(r4), n3.next(t3));
      })), t2 && a2.innerFrom(t2).subscribe(o2.createOperatorSubscriber(n3, function() {
        return u2.clear();
      }, i2.noop));
    });
  };
}, 5382: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.single = void 0;
  var n2 = r2(2823), o2 = r2(1505), i2 = r2(1759), a2 = r2(7843), u2 = r2(3111);
  t.single = function(e2) {
    return a2.operate(function(t2, r3) {
      var a3, s2 = false, c2 = false, l2 = 0;
      t2.subscribe(u2.createOperatorSubscriber(r3, function(n3) {
        c2 = true, e2 && !e2(n3, l2++, t2) || (s2 && r3.error(new o2.SequenceError("Too many matching values")), s2 = true, a3 = n3);
      }, function() {
        s2 ? (r3.next(a3), r3.complete()) : r3.error(c2 ? new i2.NotFoundError("No matching values") : new n2.EmptyError());
      }));
    });
  };
}, 5442: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, o2 = this && this.__spreadArray || function(e2, t2) {
    for (var r3 = 0, n3 = t2.length, o3 = e2.length; r3 < n3; r3++, o3++) e2[o3] = t2[r3];
    return e2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.withLatestFrom = void 0;
  var i2 = r2(7843), a2 = r2(3111), u2 = r2(9445), s2 = r2(6640), c2 = r2(1342), l2 = r2(1107);
  t.withLatestFrom = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    var r3 = l2.popResultSelector(e2);
    return i2.operate(function(t3, i3) {
      for (var l3 = e2.length, f2 = new Array(l3), h2 = e2.map(function() {
        return false;
      }), d2 = false, p3 = function(t4) {
        u2.innerFrom(e2[t4]).subscribe(a2.createOperatorSubscriber(i3, function(e3) {
          f2[t4] = e3, d2 || h2[t4] || (h2[t4] = true, (d2 = h2.every(s2.identity)) && (h2 = null));
        }, c2.noop));
      }, v3 = 0; v3 < l3; v3++) p3(v3);
      t3.subscribe(a2.createOperatorSubscriber(i3, function(e3) {
        if (d2) {
          var t4 = o2([e3], n2(f2));
          i3.next(r3 ? r3.apply(void 0, o2([], n2(t4))) : t4);
        }
      }));
    });
  };
}, 5459: function(e, t, r2) {
  var n2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3);
    var o3 = Object.getOwnPropertyDescriptor(t2, r3);
    o3 && !("get" in o3 ? !t2.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
      return t2[r3];
    } }), Object.defineProperty(e2, n3, o3);
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), o2 = this && this.__setModuleDefault || (Object.create ? function(e2, t2) {
    Object.defineProperty(e2, "default", { enumerable: true, value: t2 });
  } : function(e2, t2) {
    e2.default = t2;
  }), i2 = this && this.__importStar || function(e2) {
    if (e2 && e2.__esModule) return e2;
    var t2 = {};
    if (null != e2) for (var r3 in e2) "default" !== r3 && Object.prototype.hasOwnProperty.call(e2, r3) && n2(t2, e2, r3);
    return o2(t2, e2), t2;
  }, a2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.isDateTime = t.DateTime = t.isLocalDateTime = t.LocalDateTime = t.isDate = t.Date = t.isTime = t.Time = t.isLocalTime = t.LocalTime = t.isDuration = t.Duration = void 0;
  var u2 = i2(r2(5022)), s2 = r2(6587), c2 = r2(9691), l2 = i2(r2(3371)), f2 = { value: true, enumerable: false, configurable: false, writable: false }, h2 = "__isDuration__", d2 = "__isLocalTime__", p3 = "__isTime__", v3 = "__isDate__", y3 = "__isLocalDateTime__", b2 = "__isDateTime__", m2 = function() {
    function e2(e3, t2, r3, n3) {
      this.months = (0, s2.assertNumberOrInteger)(e3, "Months"), this.days = (0, s2.assertNumberOrInteger)(t2, "Days"), (0, s2.assertNumberOrInteger)(r3, "Seconds"), (0, s2.assertNumberOrInteger)(n3, "Nanoseconds"), this.seconds = u2.normalizeSecondsForDuration(r3, n3), this.nanoseconds = u2.normalizeNanosecondsForDuration(n3), Object.freeze(this);
    }
    return e2.prototype.toString = function() {
      return u2.durationToIsoString(this.months, this.days, this.seconds, this.nanoseconds);
    }, e2;
  }();
  t.Duration = m2, Object.defineProperty(m2.prototype, h2, f2), t.isDuration = function(e2) {
    return E2(e2, h2);
  };
  var g2 = function() {
    function e2(e3, t2, r3, n3) {
      this.hour = u2.assertValidHour(e3), this.minute = u2.assertValidMinute(t2), this.second = u2.assertValidSecond(r3), this.nanosecond = u2.assertValidNanosecond(n3), Object.freeze(this);
    }
    return e2.fromStandardDate = function(t2, r3) {
      T2(t2, r3);
      var n3 = u2.totalNanoseconds(t2, r3);
      return new e2(t2.getHours(), t2.getMinutes(), t2.getSeconds(), n3 instanceof l2.default ? n3.toInt() : "bigint" == typeof n3 ? (0, l2.int)(n3).toInt() : n3);
    }, e2.prototype.toString = function() {
      return u2.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond);
    }, e2;
  }();
  t.LocalTime = g2, Object.defineProperty(g2.prototype, d2, f2), t.isLocalTime = function(e2) {
    return E2(e2, d2);
  };
  var _2 = function() {
    function e2(e3, t2, r3, n3, o3) {
      this.hour = u2.assertValidHour(e3), this.minute = u2.assertValidMinute(t2), this.second = u2.assertValidSecond(r3), this.nanosecond = u2.assertValidNanosecond(n3), this.timeZoneOffsetSeconds = (0, s2.assertNumberOrInteger)(o3, "Time zone offset in seconds"), Object.freeze(this);
    }
    return e2.fromStandardDate = function(t2, r3) {
      return T2(t2, r3), new e2(t2.getHours(), t2.getMinutes(), t2.getSeconds(), (0, l2.toNumber)(u2.totalNanoseconds(t2, r3)), u2.timeZoneOffsetInSeconds(t2));
    }, e2.prototype.toString = function() {
      return u2.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond) + u2.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds);
    }, e2;
  }();
  t.Time = _2, Object.defineProperty(_2.prototype, p3, f2), t.isTime = function(e2) {
    return E2(e2, p3);
  };
  var w2 = function() {
    function e2(e3, t2, r3) {
      this.year = u2.assertValidYear(e3), this.month = u2.assertValidMonth(t2), this.day = u2.assertValidDay(r3), Object.freeze(this);
    }
    return e2.fromStandardDate = function(t2) {
      return T2(t2), new e2(t2.getFullYear(), t2.getMonth() + 1, t2.getDate());
    }, e2.prototype.toStandardDate = function() {
      return u2.isoStringToStandardDate(this.toString());
    }, e2.prototype.toString = function() {
      return u2.dateToIsoString(this.year, this.month, this.day);
    }, e2;
  }();
  t.Date = w2, Object.defineProperty(w2.prototype, v3, f2), t.isDate = function(e2) {
    return E2(e2, v3);
  };
  var O2 = function() {
    function e2(e3, t2, r3, n3, o3, i3, a3) {
      this.year = u2.assertValidYear(e3), this.month = u2.assertValidMonth(t2), this.day = u2.assertValidDay(r3), this.hour = u2.assertValidHour(n3), this.minute = u2.assertValidMinute(o3), this.second = u2.assertValidSecond(i3), this.nanosecond = u2.assertValidNanosecond(a3), Object.freeze(this);
    }
    return e2.fromStandardDate = function(t2, r3) {
      return T2(t2, r3), new e2(t2.getFullYear(), t2.getMonth() + 1, t2.getDate(), t2.getHours(), t2.getMinutes(), t2.getSeconds(), (0, l2.toNumber)(u2.totalNanoseconds(t2, r3)));
    }, e2.prototype.toStandardDate = function() {
      return u2.isoStringToStandardDate(this.toString());
    }, e2.prototype.toString = function() {
      return P2(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);
    }, e2;
  }();
  t.LocalDateTime = O2, Object.defineProperty(O2.prototype, y3, f2), t.isLocalDateTime = function(e2) {
    return E2(e2, y3);
  };
  var S2 = function() {
    function e2(e3, t2, r3, n3, o3, i3, l3, f3, h3) {
      this.year = u2.assertValidYear(e3), this.month = u2.assertValidMonth(t2), this.day = u2.assertValidDay(r3), this.hour = u2.assertValidHour(n3), this.minute = u2.assertValidMinute(o3), this.second = u2.assertValidSecond(i3), this.nanosecond = u2.assertValidNanosecond(l3);
      var d3 = a2(function(e4, t3) {
        var r4 = null != e4, n4 = null != t3 && "" !== t3;
        if (!r4 && !n4) throw (0, c2.newError)("Unable to create DateTime without either time zone offset or id. Please specify either of them. Given offset: ".concat(e4, " and id: ").concat(t3));
        var o4 = [void 0, void 0];
        return r4 && ((0, s2.assertNumberOrInteger)(e4, "Time zone offset in seconds"), o4[0] = e4), n4 && ((0, s2.assertString)(t3, "Time zone ID"), u2.assertValidZoneId("Time zone ID", t3), o4[1] = t3), o4;
      }(f3, h3), 2), p4 = d3[0], v5 = d3[1];
      this.timeZoneOffsetSeconds = p4, this.timeZoneId = null != v5 ? v5 : void 0, Object.freeze(this);
    }
    return e2.fromStandardDate = function(t2, r3) {
      return T2(t2, r3), new e2(t2.getFullYear(), t2.getMonth() + 1, t2.getDate(), t2.getHours(), t2.getMinutes(), t2.getSeconds(), (0, l2.toNumber)(u2.totalNanoseconds(t2, r3)), u2.timeZoneOffsetInSeconds(t2), null);
    }, e2.prototype.toStandardDate = function() {
      return u2.toStandardDate(this._toUTC());
    }, e2.prototype.toString = function() {
      var e3;
      return P2(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond) + (null != this.timeZoneOffsetSeconds ? u2.timeZoneOffsetToIsoString(null !== (e3 = this.timeZoneOffsetSeconds) && void 0 !== e3 ? e3 : 0) : "") + (null != this.timeZoneId ? "[".concat(this.timeZoneId, "]") : "");
    }, e2.prototype._toUTC = function() {
      var e3;
      if (void 0 === this.timeZoneOffsetSeconds) throw new Error("Requires DateTime created with time zone offset");
      var t2 = u2.localDateTimeToEpochSecond(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond).subtract(null !== (e3 = this.timeZoneOffsetSeconds) && void 0 !== e3 ? e3 : 0);
      return (0, l2.int)(t2).multiply(1e3).add((0, l2.int)(this.nanosecond).div(1e6)).toNumber();
    }, e2;
  }();
  function E2(e2, t2) {
    return null != e2 && true === e2[t2];
  }
  function P2(e2, t2, r3, n3, o3, i3, a3) {
    return u2.dateToIsoString(e2, t2, r3) + "T" + u2.timeToIsoString(n3, o3, i3, a3);
  }
  function T2(e2, t2) {
    (0, s2.assertValidDate)(e2, "Standard date"), null != t2 && (0, s2.assertNumberOrInteger)(t2, "Nanosecond");
  }
  t.DateTime = S2, Object.defineProperty(S2.prototype, b2, f2), t.isDateTime = function(e2) {
    return E2(e2, b2);
  };
}, 5471: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.map = void 0;
  var n2 = r2(7843), o2 = r2(3111);
  t.map = function(e2, t2) {
    return n2.operate(function(r3, n3) {
      var i2 = 0;
      r3.subscribe(o2.createOperatorSubscriber(n3, function(r4) {
        n3.next(e2.call(t2, r4, i2++));
      }));
    });
  };
}, 5477: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.window = void 0;
  var n2 = r2(2483), o2 = r2(7843), i2 = r2(3111), a2 = r2(1342), u2 = r2(9445);
  t.window = function(e2) {
    return o2.operate(function(t2, r3) {
      var o3 = new n2.Subject();
      r3.next(o3.asObservable());
      var s2 = function(e3) {
        o3.error(e3), r3.error(e3);
      };
      return t2.subscribe(i2.createOperatorSubscriber(r3, function(e3) {
        return null == o3 ? void 0 : o3.next(e3);
      }, function() {
        o3.complete(), r3.complete();
      }, s2)), u2.innerFrom(e2).subscribe(i2.createOperatorSubscriber(r3, function() {
        o3.complete(), r3.next(o3 = new n2.Subject());
      }, a2.noop, s2)), function() {
        null == o3 || o3.unsubscribe(), o3 = null;
      };
    });
  };
}, 5481: function(e, t, r2) {
  var n2 = this && this.__awaiter || function(e2, t2, r3, n3) {
    return new (r3 || (r3 = Promise))(function(o3, i3) {
      function a3(e3) {
        try {
          s3(n3.next(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function u3(e3) {
        try {
          s3(n3.throw(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function s3(e3) {
        var t3;
        e3.done ? o3(e3.value) : (t3 = e3.value, t3 instanceof r3 ? t3 : new r3(function(e4) {
          e4(t3);
        })).then(a3, u3);
      }
      s3((n3 = n3.apply(e2, t2 || [])).next());
    });
  }, o2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u3(0), throw: u3(1), return: u3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u3(u4) {
      return function(s3) {
        return function(u5) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; i3 && (i3 = 0, u5[0] && (a3 = 0)), a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & u5[0] ? n3.return : u5[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, u5[1])).done) return o3;
            switch (n3 = 0, o3 && (u5 = [2 & u5[0], o3.value]), u5[0]) {
              case 0:
              case 1:
                o3 = u5;
                break;
              case 4:
                return a3.label++, { value: u5[1], done: false };
              case 5:
                a3.label++, n3 = u5[1], u5 = [0];
                continue;
              case 7:
                u5 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== u5[0] && 2 !== u5[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === u5[0] && (!o3 || u5[1] > o3[0] && u5[1] < o3[3])) {
                  a3.label = u5[1];
                  break;
                }
                if (6 === u5[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = u5;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(u5);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            u5 = t2.call(e2, a3);
          } catch (e3) {
            u5 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & u5[0]) throw u5[1];
          return { value: u5[0] ? u5[1] : void 0, done: true };
        }([u4, s3]);
      };
    }
  }, i2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, a2 = this && this.__spreadArray || function(e2, t2, r3) {
    if (r3 || 2 === arguments.length) for (var n3, o3 = 0, i3 = t2.length; o3 < i3; o3++) !n3 && o3 in t2 || (n3 || (n3 = Array.prototype.slice.call(t2, 0, o3)), n3[o3] = t2[o3]);
    return e2.concat(n3 || Array.prototype.slice.call(t2));
  }, u2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var s2 = r2(2696), c2 = r2(6587), l2 = r2(326), f2 = r2(9691), h2 = u2(r2(9512)), d2 = r2(3618), p3 = r2(6189), v3 = r2(9730), y3 = r2(754), b2 = u2(r2(4569)), m2 = u2(r2(5909)), g2 = r2(6030), _2 = function() {
    function e2(e3) {
      var t2, r3 = e3.mode, n3 = e3.connectionProvider, o3 = e3.bookmarks, i3 = e3.database, a3 = e3.config, u3 = e3.reactive, s3 = e3.fetchSize, c3 = e3.impersonatedUser, f3 = e3.bookmarkManager, h3 = e3.notificationFilter, y4 = e3.auth, b3 = e3.log, m3 = e3.homeDatabaseCallback;
      this._mode = r3, this._database = i3, this._reactive = u3, this._fetchSize = s3, this._homeDatabaseCallback = m3, this._auth = y4, this._getConnectionAcquistionBookmarks = this._getConnectionAcquistionBookmarks.bind(this), this._readConnectionHolder = new d2.ConnectionHolder({ mode: l2.ACCESS_MODE_READ, auth: y4, database: i3, bookmarks: o3, connectionProvider: n3, impersonatedUser: c3, onDatabaseNameResolved: this._onDatabaseNameResolved.bind(this), getConnectionAcquistionBookmarks: this._getConnectionAcquistionBookmarks, log: b3 }), this._writeConnectionHolder = new d2.ConnectionHolder({ mode: l2.ACCESS_MODE_WRITE, auth: y4, database: i3, bookmarks: o3, connectionProvider: n3, impersonatedUser: c3, onDatabaseNameResolved: this._onDatabaseNameResolved.bind(this), getConnectionAcquistionBookmarks: this._getConnectionAcquistionBookmarks, log: b3 }), this._open = true, this._hasTx = false, this._impersonatedUser = c3, this._lastBookmarks = null != o3 ? o3 : v3.Bookmarks.empty(), this._configuredBookmarks = this._lastBookmarks, this._transactionExecutor = function(e4) {
        var t3, r4 = null !== (t3 = null == e4 ? void 0 : e4.maxTransactionRetryTime) && void 0 !== t3 ? t3 : null;
        return new p3.TransactionExecutor(r4);
      }(a3), this._databaseNameResolved = "" !== this._database;
      var g3 = this._calculateWatermaks();
      this._lowRecordWatermark = g3.low, this._highRecordWatermark = g3.high, this._results = [], this._bookmarkManager = f3, this._notificationFilter = h3, this._log = b3, this._databaseGuess = null == a3 ? void 0 : a3.cachedHomeDatabase, this._isRoutingSession = null !== (t2 = null == a3 ? void 0 : a3.routingDriver) && void 0 !== t2 && t2;
    }
    return e2.prototype.run = function(e3, t2, r3) {
      var i3 = this, a3 = (0, c2.validateQueryAndParameters)(e3, t2), u3 = a3.validatedQuery, s3 = a3.params, f3 = null != r3 ? new y3.TxConfig(r3, this._log) : y3.TxConfig.empty(), h3 = this._run(u3, s3, function(e4) {
        return n2(i3, void 0, void 0, function() {
          var t3, r4 = this;
          return o2(this, function(n3) {
            switch (n3.label) {
              case 0:
                return [4, this._bookmarks()];
              case 1:
                return t3 = n3.sent(), this._assertSessionIsOpen(), [2, e4.run(u3, s3, { bookmarks: t3, txConfig: f3, mode: this._mode, database: this._database, apiTelemetryConfig: { api: l2.TELEMETRY_APIS.AUTO_COMMIT_TRANSACTION }, impersonatedUser: this._impersonatedUser, afterComplete: function(e5) {
                  return r4._onCompleteCallback(e5, t3);
                }, reactive: this._reactive, fetchSize: this._fetchSize, lowRecordWatermark: this._lowRecordWatermark, highRecordWatermark: this._highRecordWatermark, notificationFilter: this._notificationFilter, onDb: this._onDatabaseNameResolved.bind(this) })];
            }
          });
        });
      });
      return this._results.push(h3), h3;
    }, e2.prototype._run = function(e3, t2, r3) {
      var n3 = this._acquireAndConsumeConnection(r3), o3 = n3.connectionHolder, i3 = n3.resultPromise.catch(function(e4) {
        return Promise.resolve(new s2.FailedObserver({ error: e4 }));
      }), a3 = { high: this._highRecordWatermark, low: this._lowRecordWatermark };
      return new h2.default(i3, e3, t2, o3, a3);
    }, e2.prototype._acquireConnection = function(e3) {
      var t2 = this, r3 = this._acquireAndConsumeConnection(e3), i3 = r3.connectionHolder;
      return r3.resultPromise.then(function(e4) {
        return n2(t2, void 0, void 0, function() {
          return o2(this, function(t3) {
            switch (t3.label) {
              case 0:
                return [4, i3.releaseConnection()];
              case 1:
                return t3.sent(), [2, e4];
            }
          });
        });
      });
    }, e2.prototype._acquireAndConsumeConnection = function(e3) {
      var t2, r3 = this._connectionHolderWithMode(this._mode);
      return t2 = this._open ? !this._hasTx && r3.initializeConnection(this._databaseGuess) ? r3.getConnection().then(function(t3) {
        return e3(t3);
      }) : Promise.reject((0, f2.newError)("Queries cannot be run directly on a session with an open transaction; either run from within the transaction or use a different session.")) : Promise.reject((0, f2.newError)("Cannot run query in a closed session.")), { connectionHolder: r3, resultPromise: t2 };
    }, e2.prototype.beginTransaction = function(e3) {
      var t2 = e3, r3 = y3.TxConfig.empty();
      return null != t2 && (r3 = new y3.TxConfig(t2, this._log)), this._beginTransaction(this._mode, r3, { api: l2.TELEMETRY_APIS.UNMANAGED_TRANSACTION });
    }, e2.prototype._beginTransaction = function(t2, r3, n3) {
      var o3 = this;
      if (!this._open) throw (0, f2.newError)("Cannot begin a transaction on a closed session.");
      if (this._hasTx) throw (0, f2.newError)("You cannot begin a transaction on a session with an open transaction; either run from within the transaction or use a different session.");
      var i3 = e2._validateSessionMode(t2), a3 = this._connectionHolderWithMode(i3);
      a3.initializeConnection(this._databaseGuess), this._hasTx = true;
      var u3 = new b2.default({ connectionHolder: a3, impersonatedUser: this._impersonatedUser, onClose: this._transactionClosed.bind(this), onBookmarks: function(e3, t3, r4) {
        return o3._updateBookmarks(e3, t3, r4);
      }, onConnection: this._assertSessionIsOpen.bind(this), reactive: this._reactive, fetchSize: this._fetchSize, lowRecordWatermark: this._lowRecordWatermark, highRecordWatermark: this._highRecordWatermark, notificationFilter: this._notificationFilter, apiTelemetryConfig: n3, onDbCallback: this._onDatabaseNameResolved.bind(this) });
      return u3._begin(function() {
        return o3._bookmarks();
      }, r3), u3;
    }, e2.prototype._assertSessionIsOpen = function() {
      if (!this._open) throw (0, f2.newError)("You cannot run more transactions on a closed session.");
    }, e2.prototype._transactionClosed = function() {
      this._hasTx = false;
    }, e2.prototype.lastBookmark = function() {
      return this.lastBookmarks();
    }, e2.prototype.lastBookmarks = function() {
      return this._lastBookmarks.values();
    }, e2.prototype._bookmarks = function() {
      var e3;
      return n2(this, void 0, void 0, function() {
        var t2;
        return o2(this, function(r3) {
          switch (r3.label) {
            case 0:
              return [4, null === (e3 = this._bookmarkManager) || void 0 === e3 ? void 0 : e3.getBookmarks()];
            case 1:
              return void 0 === (t2 = r3.sent()) ? [2, this._lastBookmarks] : [2, new v3.Bookmarks(a2(a2([], i2(t2), false), i2(this._configuredBookmarks), false))];
          }
        });
      });
    }, e2.prototype.readTransaction = function(e3, t2) {
      var r3 = new y3.TxConfig(t2, this._log);
      return this._runTransaction(l2.ACCESS_MODE_READ, r3, e3);
    }, e2.prototype.writeTransaction = function(e3, t2) {
      var r3 = new y3.TxConfig(t2, this._log);
      return this._runTransaction(l2.ACCESS_MODE_WRITE, r3, e3);
    }, e2.prototype._runTransaction = function(e3, t2, r3) {
      var n3 = this;
      return this._transactionExecutor.execute(function(r4) {
        return n3._beginTransaction(e3, t2, r4);
      }, r3);
    }, e2.prototype.executeRead = function(e3, t2) {
      var r3 = new y3.TxConfig(t2, this._log);
      return this._executeInTransaction(l2.ACCESS_MODE_READ, r3, e3);
    }, e2.prototype.executeWrite = function(e3, t2) {
      var r3 = new y3.TxConfig(t2, this._log);
      return this._executeInTransaction(l2.ACCESS_MODE_WRITE, r3, e3);
    }, e2.prototype._executeInTransaction = function(e3, t2, r3) {
      var n3 = this;
      return this._transactionExecutor.execute(function(r4) {
        return n3._beginTransaction(e3, t2, r4);
      }, r3, m2.default.fromTransaction);
    }, e2.prototype._onDatabaseNameResolved = function(e3) {
      if (this._isRoutingSession && (this._databaseGuess = e3, !this._databaseNameResolved)) {
        var t2 = null != e3 ? e3 : "";
        this._database = t2, this._readConnectionHolder.setDatabase(t2), this._writeConnectionHolder.setDatabase(t2), this._databaseNameResolved = true, null != this._homeDatabaseCallback && this._homeDatabaseCallback((0, g2.cacheKey)(this._auth, this._impersonatedUser), e3);
      }
    }, e2.prototype._getConnectionAcquistionBookmarks = function() {
      var e3;
      return n2(this, void 0, void 0, function() {
        var t2;
        return o2(this, function(r3) {
          switch (r3.label) {
            case 0:
              return [4, null === (e3 = this._bookmarkManager) || void 0 === e3 ? void 0 : e3.getBookmarks()];
            case 1:
              return void 0 === (t2 = r3.sent()) ? [2, this._lastBookmarks] : [2, new v3.Bookmarks(a2(a2([], i2(this._configuredBookmarks), false), i2(t2), false))];
          }
        });
      });
    }, e2.prototype._updateBookmarks = function(e3, t2, r3) {
      var n3, o3, i3;
      null == e3 || e3.isEmpty() || (null === (n3 = this._bookmarkManager) || void 0 === n3 || n3.updateBookmarks(null !== (o3 = null == t2 ? void 0 : t2.values()) && void 0 !== o3 ? o3 : [], null !== (i3 = null == e3 ? void 0 : e3.values()) && void 0 !== i3 ? i3 : []).catch(function() {
      }), this._lastBookmarks = e3, this._configuredBookmarks = v3.Bookmarks.empty());
    }, e2.prototype.close = function() {
      return n2(this, void 0, void 0, function() {
        return o2(this, function(e3) {
          switch (e3.label) {
            case 0:
              return this._open ? (this._open = false, this._results.forEach(function(e4) {
                return e4._cancel();
              }), this._transactionExecutor.close(), [4, this._readConnectionHolder.close(this._hasTx)]) : [3, 3];
            case 1:
              return e3.sent(), [4, this._writeConnectionHolder.close(this._hasTx)];
            case 2:
              e3.sent(), e3.label = 3;
            case 3:
              return [2];
          }
        });
      });
    }, e2.prototype[Symbol.asyncDispose] = function() {
      return this.close();
    }, e2.prototype._connectionHolderWithMode = function(e3) {
      if (e3 === l2.ACCESS_MODE_READ) return this._readConnectionHolder;
      if (e3 === l2.ACCESS_MODE_WRITE) return this._writeConnectionHolder;
      throw (0, f2.newError)("Unknown access mode: " + e3);
    }, e2.prototype._onCompleteCallback = function(e3, t2) {
      this._updateBookmarks(new v3.Bookmarks(e3.bookmark), t2, e3.db);
    }, e2.prototype._calculateWatermaks = function() {
      return this._fetchSize === l2.FETCH_ALL ? { low: Number.MAX_VALUE, high: Number.MAX_VALUE } : { low: 0.3 * this._fetchSize, high: 0.7 * this._fetchSize };
    }, e2.prototype._configureTransactionExecutor = function(e3, t2) {
      this._transactionExecutor.pipelineBegin = e3, this._transactionExecutor.telemetryApi = t2;
    }, e2._validateSessionMode = function(e3) {
      var t2 = null != e3 ? e3 : l2.ACCESS_MODE_WRITE;
      if (t2 !== l2.ACCESS_MODE_READ && t2 !== l2.ACCESS_MODE_WRITE) throw (0, f2.newError)("Illegal session mode " + t2);
      return t2;
    }, e2;
  }();
  t.default = _2;
}, 5510: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.every = void 0;
  var n2 = r2(7843), o2 = r2(3111);
  t.every = function(e2, t2) {
    return n2.operate(function(r3, n3) {
      var i2 = 0;
      r3.subscribe(o2.createOperatorSubscriber(n3, function(o3) {
        e2.call(t2, o3, i2++, r3) || (n3.next(false), n3.complete());
      }, function() {
        n3.next(true), n3.complete();
      }));
    });
  };
}, 5553: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true });
  var o2 = r2(7174), i2 = r2(5319), a2 = function(e2) {
    function t2(t3) {
      for (var r3 = this, n3 = 0, o3 = 0; o3 < t3.length; o3++) n3 += t3[o3].length;
      return (r3 = e2.call(this, n3) || this)._buffers = t3, r3;
    }
    return n2(t2, e2), t2.prototype.getUInt8 = function(e3) {
      for (var t3 = 0; t3 < this._buffers.length; t3++) {
        var r3 = this._buffers[t3];
        if (!(e3 >= r3.length)) return r3.getUInt8(e3);
        e3 -= r3.length;
      }
    }, t2.prototype.getInt8 = function(e3) {
      for (var t3 = 0; t3 < this._buffers.length; t3++) {
        var r3 = this._buffers[t3];
        if (!(e3 >= r3.length)) return r3.getInt8(e3);
        e3 -= r3.length;
      }
    }, t2.prototype.getFloat64 = function(e3) {
      for (var t3 = (0, i2.alloc)(8), r3 = 0; r3 < 8; r3++) t3.putUInt8(r3, this.getUInt8(e3 + r3));
      return t3.getFloat64(0);
    }, t2;
  }(o2.BaseBuffer);
  t.default = a2;
}, 5568: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.createErrorClass = void 0, t.createErrorClass = function(e2) {
    var t2 = e2(function(e3) {
      Error.call(e3), e3.stack = new Error().stack;
    });
    return t2.prototype = Object.create(Error.prototype), t2.prototype.constructor = t2, t2;
  };
}, 5572: function(e, t, r2) {
  var n2 = this && this.__values || function(e2) {
    var t2 = "function" == typeof Symbol && Symbol.iterator, r3 = t2 && e2[t2], n3 = 0;
    if (r3) return r3.call(e2);
    if (e2 && "number" == typeof e2.length) return { next: function() {
      return e2 && n3 >= e2.length && (e2 = void 0), { value: e2 && e2[n3++], done: !e2 };
    } };
    throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.bufferCount = void 0;
  var o2 = r2(7843), i2 = r2(3111), a2 = r2(7479);
  t.bufferCount = function(e2, t2) {
    return void 0 === t2 && (t2 = null), t2 = null != t2 ? t2 : e2, o2.operate(function(r3, o3) {
      var u2 = [], s2 = 0;
      r3.subscribe(i2.createOperatorSubscriber(o3, function(r4) {
        var i3, c2, l2, f2, h2 = null;
        s2++ % t2 === 0 && u2.push([]);
        try {
          for (var d2 = n2(u2), p3 = d2.next(); !p3.done; p3 = d2.next()) (b2 = p3.value).push(r4), e2 <= b2.length && (h2 = null != h2 ? h2 : []).push(b2);
        } catch (e3) {
          i3 = { error: e3 };
        } finally {
          try {
            p3 && !p3.done && (c2 = d2.return) && c2.call(d2);
          } finally {
            if (i3) throw i3.error;
          }
        }
        if (h2) try {
          for (var v3 = n2(h2), y3 = v3.next(); !y3.done; y3 = v3.next()) {
            var b2 = y3.value;
            a2.arrRemove(u2, b2), o3.next(b2);
          }
        } catch (e3) {
          l2 = { error: e3 };
        } finally {
          try {
            y3 && !y3.done && (f2 = v3.return) && f2.call(v3);
          } finally {
            if (l2) throw l2.error;
          }
        }
      }, function() {
        var e3, t3;
        try {
          for (var r4 = n2(u2), i3 = r4.next(); !i3.done; i3 = r4.next()) {
            var a3 = i3.value;
            o3.next(a3);
          }
        } catch (t4) {
          e3 = { error: t4 };
        } finally {
          try {
            i3 && !i3.done && (t3 = r4.return) && t3.call(r4);
          } finally {
            if (e3) throw e3.error;
          }
        }
        o3.complete();
      }, void 0, function() {
        u2 = null;
      }));
    });
  };
}, 5584: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.raceInit = t.race = void 0;
  var n2 = r2(4662), o2 = r2(9445), i2 = r2(8535), a2 = r2(3111);
  function u2(e2) {
    return function(t2) {
      for (var r3 = [], n3 = function(n4) {
        r3.push(o2.innerFrom(e2[n4]).subscribe(a2.createOperatorSubscriber(t2, function(e3) {
          if (r3) {
            for (var o3 = 0; o3 < r3.length; o3++) o3 !== n4 && r3[o3].unsubscribe();
            r3 = null;
          }
          t2.next(e3);
        })));
      }, i3 = 0; r3 && !t2.closed && i3 < e2.length; i3++) n3(i3);
    };
  }
  t.race = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    return 1 === (e2 = i2.argsOrArgArray(e2)).length ? o2.innerFrom(e2[0]) : new n2.Observable(u2(e2));
  }, t.raceInit = u2;
}, 5592: (e, t, r2) => {
  var n2 = r2(7192);
  n2 = n2.slice().filter(function(e2) {
    return !/^(gl\_|texture)/.test(e2);
  }), e.exports = n2.concat(["gl_VertexID", "gl_InstanceID", "gl_Position", "gl_PointSize", "gl_FragCoord", "gl_FrontFacing", "gl_FragDepth", "gl_PointCoord", "gl_MaxVertexAttribs", "gl_MaxVertexUniformVectors", "gl_MaxVertexOutputVectors", "gl_MaxFragmentInputVectors", "gl_MaxVertexTextureImageUnits", "gl_MaxCombinedTextureImageUnits", "gl_MaxTextureImageUnits", "gl_MaxFragmentUniformVectors", "gl_MaxDrawBuffers", "gl_MinProgramTexelOffset", "gl_MaxProgramTexelOffset", "gl_DepthRangeParameters", "gl_DepthRange", "trunc", "round", "roundEven", "isnan", "isinf", "floatBitsToInt", "floatBitsToUint", "intBitsToFloat", "uintBitsToFloat", "packSnorm2x16", "unpackSnorm2x16", "packUnorm2x16", "unpackUnorm2x16", "packHalf2x16", "unpackHalf2x16", "outerProduct", "transpose", "determinant", "inverse", "texture", "textureSize", "textureProj", "textureLod", "textureOffset", "texelFetch", "texelFetchOffset", "textureProjOffset", "textureLodOffset", "textureProjLod", "textureProjLodOffset", "textureGrad", "textureGradOffset", "textureProjGrad", "textureProjGradOffset"]);
}, 5600: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, o2 = this && this.__spreadArray || function(e2, t2) {
    for (var r3 = 0, n3 = t2.length, o3 = e2.length; r3 < n3; r3++, o3++) e2[o3] = t2[r3];
    return e2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.raceWith = void 0;
  var i2 = r2(5584), a2 = r2(7843), u2 = r2(6640);
  t.raceWith = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    return e2.length ? a2.operate(function(t3, r3) {
      i2.raceInit(o2([t3], n2(e2)))(r3);
    }) : u2.identity;
  };
}, 5636: (e, t, r2) => {
  var n2 = r2(1048), o2 = n2.Buffer;
  function i2(e2, t2) {
    for (var r3 in e2) t2[r3] = e2[r3];
  }
  function a2(e2, t2, r3) {
    return o2(e2, t2, r3);
  }
  o2.from && o2.alloc && o2.allocUnsafe && o2.allocUnsafeSlow ? e.exports = n2 : (i2(n2, t), t.Buffer = a2), a2.prototype = Object.create(o2.prototype), i2(o2, a2), a2.from = function(e2, t2, r3) {
    if ("number" == typeof e2) throw new TypeError("Argument must not be a number");
    return o2(e2, t2, r3);
  }, a2.alloc = function(e2, t2, r3) {
    if ("number" != typeof e2) throw new TypeError("Argument must be a number");
    var n3 = o2(e2);
    return void 0 !== t2 ? "string" == typeof r3 ? n3.fill(t2, r3) : n3.fill(t2) : n3.fill(0), n3;
  }, a2.allocUnsafe = function(e2) {
    if ("number" != typeof e2) throw new TypeError("Argument must be a number");
    return o2(e2);
  }, a2.allocUnsafeSlow = function(e2) {
    if ("number" != typeof e2) throw new TypeError("Argument must be a number");
    return n2.SlowBuffer(e2);
  };
}, 5642: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__assign || function() {
    return o2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, o2.apply(this, arguments);
  }, i2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var a2 = i2(r2(2857)), u2 = i2(r2(7021)), s2 = r2(397), c2 = r2(9014), l2 = i2(r2(1175)), f2 = i2(r2(3321)), h2 = r2(9305), d2 = (h2.internal.bookmarks.Bookmarks, h2.internal.constants.BOLT_PROTOCOL_V3), p3 = h2.internal.txConfig.TxConfig, v3 = "context", y3 = "CALL dbms.cluster.routing.getRoutingTable($".concat(v3, ")"), b2 = new c2.StreamObserver(), m2 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), Object.defineProperty(t2.prototype, "version", { get: function() {
      return d2;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "transformer", { get: function() {
      var e3 = this;
      return void 0 === this._transformer && (this._transformer = new f2.default(Object.values(l2.default).map(function(t3) {
        return t3(e3._config, e3._log);
      }))), this._transformer;
    }, enumerable: false, configurable: true }), t2.prototype.transformMetadata = function(e3) {
      return "t_first" in e3 && (e3.result_available_after = e3.t_first, delete e3.t_first), "t_last" in e3 && (e3.result_consumed_after = e3.t_last, delete e3.t_last), e3;
    }, t2.prototype.initialize = function(e3) {
      var t3 = this, r3 = void 0 === e3 ? {} : e3, n3 = r3.userAgent, o3 = (r3.boltAgent, r3.authToken), i3 = r3.notificationFilter, a3 = r3.onError, l3 = r3.onComplete, f3 = new c2.LoginObserver({ onError: function(e4) {
        return t3._onLoginError(e4, a3);
      }, onCompleted: function(e4) {
        return t3._onLoginCompleted(e4, o3, l3);
      } });
      return (0, s2.assertNotificationFilterIsEmpty)(i3, this._onProtocolError, f3), this.write(u2.default.hello(n3, o3), f3, true), f3;
    }, t2.prototype.prepareToClose = function() {
      this.write(u2.default.goodbye(), b2, true);
    }, t2.prototype.beginTransaction = function(e3) {
      var t3 = void 0 === e3 ? {} : e3, r3 = t3.bookmarks, n3 = t3.txConfig, o3 = t3.database, i3 = t3.impersonatedUser, a3 = t3.notificationFilter, l3 = t3.mode, f3 = t3.beforeError, h3 = t3.afterError, d3 = t3.beforeComplete, p4 = t3.afterComplete, v5 = new c2.ResultStreamObserver({ server: this._server, beforeError: f3, afterError: h3, beforeComplete: d3, afterComplete: p4 });
      return v5.prepareToHandleSingleResponse(), (0, s2.assertDatabaseIsEmpty)(o3, this._onProtocolError, v5), (0, s2.assertImpersonatedUserIsEmpty)(i3, this._onProtocolError, v5), (0, s2.assertNotificationFilterIsEmpty)(a3, this._onProtocolError, v5), this.write(u2.default.begin({ bookmarks: r3, txConfig: n3, mode: l3 }), v5, true), v5;
    }, t2.prototype.commitTransaction = function(e3) {
      var t3 = void 0 === e3 ? {} : e3, r3 = t3.beforeError, n3 = t3.afterError, o3 = t3.beforeComplete, i3 = t3.afterComplete, a3 = new c2.ResultStreamObserver({ server: this._server, beforeError: r3, afterError: n3, beforeComplete: o3, afterComplete: i3 });
      return a3.prepareToHandleSingleResponse(), this.write(u2.default.commit(), a3, true), a3;
    }, t2.prototype.rollbackTransaction = function(e3) {
      var t3 = void 0 === e3 ? {} : e3, r3 = t3.beforeError, n3 = t3.afterError, o3 = t3.beforeComplete, i3 = t3.afterComplete, a3 = new c2.ResultStreamObserver({ server: this._server, beforeError: r3, afterError: n3, beforeComplete: o3, afterComplete: i3 });
      return a3.prepareToHandleSingleResponse(), this.write(u2.default.rollback(), a3, true), a3;
    }, t2.prototype.run = function(e3, t3, r3) {
      var n3 = void 0 === r3 ? {} : r3, o3 = n3.bookmarks, i3 = n3.txConfig, a3 = n3.database, l3 = n3.impersonatedUser, f3 = n3.notificationFilter, h3 = n3.mode, d3 = n3.beforeKeys, p4 = n3.afterKeys, v5 = n3.beforeError, y4 = n3.afterError, b3 = n3.beforeComplete, m3 = n3.afterComplete, g2 = n3.flush, _2 = void 0 === g2 || g2, w2 = n3.highRecordWatermark, O2 = void 0 === w2 ? Number.MAX_VALUE : w2, S2 = n3.lowRecordWatermark, E2 = void 0 === S2 ? Number.MAX_VALUE : S2, P2 = new c2.ResultStreamObserver({ server: this._server, beforeKeys: d3, afterKeys: p4, beforeError: v5, afterError: y4, beforeComplete: b3, afterComplete: m3, highRecordWatermark: O2, lowRecordWatermark: E2 });
      return (0, s2.assertDatabaseIsEmpty)(a3, this._onProtocolError, P2), (0, s2.assertImpersonatedUserIsEmpty)(l3, this._onProtocolError, P2), (0, s2.assertNotificationFilterIsEmpty)(f3, this._onProtocolError, P2), this.write(u2.default.runWithMetadata(e3, t3, { bookmarks: o3, txConfig: i3, mode: h3 }), P2, false), this.write(u2.default.pullAll(), P2, _2), P2;
    }, t2.prototype.requestRoutingInformation = function(e3) {
      var t3, r3 = e3.routingContext, n3 = void 0 === r3 ? {} : r3, i3 = e3.sessionContext, a3 = void 0 === i3 ? {} : i3, u3 = e3.onError, s3 = e3.onCompleted, l3 = this.run(y3, ((t3 = {})[v3] = n3, t3), o2(o2({}, a3), { txConfig: p3.empty() }));
      return new c2.ProcedureRouteObserver({ resultObserver: l3, onProtocolError: this._onProtocolError, onError: u3, onCompleted: s3 });
    }, t2;
  }(a2.default);
  t.default = m2;
}, 5648: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true }), t.AsyncScheduler = void 0;
  var o2 = r2(8986), i2 = function(e2) {
    function t2(t3, r3) {
      void 0 === r3 && (r3 = o2.Scheduler.now);
      var n3 = e2.call(this, t3, r3) || this;
      return n3.actions = [], n3._active = false, n3;
    }
    return n2(t2, e2), t2.prototype.flush = function(e3) {
      var t3 = this.actions;
      if (this._active) t3.push(e3);
      else {
        var r3;
        this._active = true;
        do {
          if (r3 = e3.execute(e3.state, e3.delay)) break;
        } while (e3 = t3.shift());
        if (this._active = false, r3) {
          for (; e3 = t3.shift(); ) e3.unsubscribe();
          throw r3;
        }
      }
    }, t2;
  }(o2.Scheduler);
  t.AsyncScheduler = i2;
}, 5649: function(e, t) {
  var r2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o2, i2 = r3.call(e2), a2 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i2.next()).done; ) a2.push(n3.value);
    } catch (e3) {
      o2 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i2.return) && r3.call(i2);
      } finally {
        if (o2) throw o2.error;
      }
    }
    return a2;
  }, n2 = this && this.__spreadArray || function(e2, t2) {
    for (var r3 = 0, n3 = t2.length, o2 = e2.length; r3 < n3; r3++, o2++) e2[o2] = t2[r3];
    return e2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.intervalProvider = void 0, t.intervalProvider = { setInterval: function(e2, o2) {
    for (var i2 = [], a2 = 2; a2 < arguments.length; a2++) i2[a2 - 2] = arguments[a2];
    var u2 = t.intervalProvider.delegate;
    return (null == u2 ? void 0 : u2.setInterval) ? u2.setInterval.apply(u2, n2([e2, o2], r2(i2))) : setInterval.apply(void 0, n2([e2, o2], r2(i2)));
  }, clearInterval: function(e2) {
    var r3 = t.intervalProvider.delegate;
    return ((null == r3 ? void 0 : r3.clearInterval) || clearInterval)(e2);
  }, delegate: void 0 };
}, 5742: function(e, t, r2) {
  var n2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var o2 = r2(8813), i2 = n2(r2(3057)), a2 = (n2(r2(9305)), function() {
    function e2(e3) {
      this._txc = e3;
    }
    return e2.prototype.run = function(e3, t2) {
      var r3 = this;
      return new i2.default(new o2.Observable(function(n3) {
        try {
          n3.next(r3._txc.run(e3, t2)), n3.complete();
        } catch (e4) {
          n3.error(e4);
        }
        return function() {
        };
      }));
    }, e2.prototype.commit = function() {
      var e3 = this;
      return new o2.Observable(function(t2) {
        e3._txc.commit().then(function() {
          t2.complete();
        }).catch(function(e4) {
          return t2.error(e4);
        });
      });
    }, e2.prototype.rollback = function() {
      var e3 = this;
      return new o2.Observable(function(t2) {
        e3._txc.rollback().then(function() {
          t2.complete();
        }).catch(function(e4) {
          return t2.error(e4);
        });
      });
    }, e2.prototype.isOpen = function() {
      return this._txc.isOpen();
    }, e2.prototype.close = function() {
      var e3 = this;
      return new o2.Observable(function(t2) {
        e3._txc.close().then(function() {
          t2.complete();
        }).catch(function(e4) {
          return t2.error(e4);
        });
      });
    }, e2;
  }());
  t.default = a2;
}, 5788: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.UnsubscriptionError = void 0;
  var n2 = r2(5568);
  t.UnsubscriptionError = n2.createErrorClass(function(e2) {
    return function(t2) {
      e2(this), this.message = t2 ? t2.length + " errors occurred during unsubscription:\n" + t2.map(function(e3, t3) {
        return t3 + 1 + ") " + e3.toString();
      }).join("\n  ") : "", this.name = "UnsubscriptionError", this.errors = t2;
    };
  });
}, 5815: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__assign || function() {
    return o2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, o2.apply(this, arguments);
  }, i2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var a2 = i2(r2(9744)), u2 = i2(r2(9238)), s2 = i2(r2(3321)), c2 = i2(r2(7021)), l2 = r2(9014), f2 = r2(9305).internal.constants, h2 = f2.BOLT_PROTOCOL_V5_5, d2 = f2.FETCH_ALL, p3 = Object.freeze({ OPERATION: "", OPERATION_CODE: "0", CURRENT_SCHEMA: "/" }), v3 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), Object.defineProperty(t2.prototype, "version", { get: function() {
      return h2;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "transformer", { get: function() {
      var e3 = this;
      return void 0 === this._transformer && (this._transformer = new s2.default(Object.values(u2.default).map(function(t3) {
        return t3(e3._config, e3._log);
      }))), this._transformer;
    }, enumerable: false, configurable: true }), t2.prototype.initialize = function(e3) {
      var t3 = this, r3 = void 0 === e3 ? {} : e3, n3 = r3.userAgent, i3 = r3.boltAgent, a3 = r3.authToken, u3 = r3.notificationFilter, s3 = r3.onError, f3 = r3.onComplete, h3 = {}, d3 = new l2.LoginObserver({ onError: function(e4) {
        return t3._onLoginError(e4, s3);
      }, onCompleted: function(e4) {
        return h3.metadata = e4, t3._onLoginCompleted(e4);
      } });
      return this.write(c2.default.hello5x5(n3, i3, u3, this._serversideRouting), d3, false), this.logon({ authToken: a3, onComplete: function(e4) {
        return f3(o2(o2({}, e4), h3.metadata));
      }, onError: s3, flush: true });
    }, t2.prototype.beginTransaction = function(e3) {
      var t3 = void 0 === e3 ? {} : e3, r3 = t3.bookmarks, n3 = t3.txConfig, o3 = t3.database, i3 = t3.mode, a3 = t3.impersonatedUser, u3 = t3.notificationFilter, s3 = t3.beforeError, f3 = t3.afterError, h3 = t3.beforeComplete, d3 = t3.afterComplete, p4 = new l2.ResultStreamObserver({ server: this._server, beforeError: s3, afterError: f3, beforeComplete: h3, afterComplete: d3 });
      return p4.prepareToHandleSingleResponse(), this.write(c2.default.begin5x5({ bookmarks: r3, txConfig: n3, database: o3, mode: i3, impersonatedUser: a3, notificationFilter: u3 }), p4, true), p4;
    }, t2.prototype.run = function(e3, t3, r3) {
      var n3 = void 0 === r3 ? {} : r3, o3 = n3.bookmarks, i3 = n3.txConfig, a3 = n3.database, u3 = n3.mode, s3 = n3.impersonatedUser, f3 = n3.notificationFilter, h3 = n3.beforeKeys, p4 = n3.afterKeys, v5 = n3.beforeError, y3 = n3.afterError, b2 = n3.beforeComplete, m2 = n3.afterComplete, g2 = n3.flush, _2 = void 0 === g2 || g2, w2 = n3.reactive, O2 = void 0 !== w2 && w2, S2 = n3.fetchSize, E2 = void 0 === S2 ? d2 : S2, P2 = n3.highRecordWatermark, T2 = void 0 === P2 ? Number.MAX_VALUE : P2, x3 = n3.lowRecordWatermark, C2 = void 0 === x3 ? Number.MAX_VALUE : x3, j2 = new l2.ResultStreamObserver({ server: this._server, reactive: O2, fetchSize: E2, moreFunction: this._requestMore.bind(this), discardFunction: this._requestDiscard.bind(this), beforeKeys: h3, afterKeys: p4, beforeError: v5, afterError: y3, beforeComplete: b2, afterComplete: m2, highRecordWatermark: T2, lowRecordWatermark: C2, enrichMetadata: this._enrichMetadata }), A2 = O2;
      return this.write(c2.default.runWithMetadata5x5(e3, t3, { bookmarks: o3, txConfig: i3, database: a3, mode: u3, impersonatedUser: s3, notificationFilter: f3 }), j2, A2 && _2), O2 || this.write(c2.default.pull({ n: E2 }), j2, _2), j2;
    }, t2.prototype._enrichMetadata = function(e3) {
      return Array.isArray(e3.statuses) && (e3.statuses = e3.statuses.map(function(e4) {
        return o2(o2({}, e4), { description: null != e4.neo4j_code ? e4.status_description : e4.description, diagnostic_record: null !== e4.diagnostic_record ? o2(o2({}, p3), e4.diagnostic_record) : null });
      })), e3;
    }, t2;
  }(a2.default);
  t.default = v3;
}, 5837: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.fromVersion = void 0, t.fromVersion = function(e2, t2) {
    void 0 === t2 && (t2 = function() {
      return { get userAgent() {
      } };
    });
    var r2 = t2(), n2 = null != r2.userAgent ? r2.userAgent.split("(")[1].split(")")[0] : void 0, o2 = r2.userAgent || void 0;
    return { product: "neo4j-javascript/".concat(e2), platform: n2, languageDetails: o2 };
  };
}, 5880: function(e, t, r2) {
  var n2, o2;
  n2 = function() {
    var e2 = function() {
    }, t2 = "undefined", r3 = typeof window !== t2 && typeof window.navigator !== t2 && /Trident\/|MSIE /.test(window.navigator.userAgent), n3 = ["trace", "debug", "info", "warn", "error"], o3 = {}, i2 = null;
    function a2(e3, t3) {
      var r4 = e3[t3];
      if ("function" == typeof r4.bind) return r4.bind(e3);
      try {
        return Function.prototype.bind.call(r4, e3);
      } catch (t4) {
        return function() {
          return Function.prototype.apply.apply(r4, [e3, arguments]);
        };
      }
    }
    function u2() {
      console.log && (console.log.apply ? console.log.apply(console, arguments) : Function.prototype.apply.apply(console.log, [console, arguments])), console.trace && console.trace();
    }
    function s2() {
      for (var r4 = this.getLevel(), o4 = 0; o4 < n3.length; o4++) {
        var i3 = n3[o4];
        this[i3] = o4 < r4 ? e2 : this.methodFactory(i3, r4, this.name);
      }
      if (this.log = this.debug, typeof console === t2 && r4 < this.levels.SILENT) return "No console available for logging";
    }
    function c2(e3) {
      return function() {
        typeof console !== t2 && (s2.call(this), this[e3].apply(this, arguments));
      };
    }
    function l2(n4, o4, i3) {
      return function(n5) {
        return "debug" === n5 && (n5 = "log"), typeof console !== t2 && ("trace" === n5 && r3 ? u2 : void 0 !== console[n5] ? a2(console, n5) : void 0 !== console.log ? a2(console, "log") : e2);
      }(n4) || c2.apply(this, arguments);
    }
    function f2(e3, r4) {
      var a3, u3, c3, f3 = this, h3 = "loglevel";
      function d2() {
        var e4;
        if (typeof window !== t2 && h3) {
          try {
            e4 = window.localStorage[h3];
          } catch (e5) {
          }
          if (typeof e4 === t2) try {
            var r5 = window.document.cookie, n4 = encodeURIComponent(h3), o4 = r5.indexOf(n4 + "=");
            -1 !== o4 && (e4 = /^([^;]+)/.exec(r5.slice(o4 + n4.length + 1))[1]);
          } catch (e5) {
          }
          return void 0 === f3.levels[e4] && (e4 = void 0), e4;
        }
      }
      function p3(e4) {
        var t3 = e4;
        if ("string" == typeof t3 && void 0 !== f3.levels[t3.toUpperCase()] && (t3 = f3.levels[t3.toUpperCase()]), "number" == typeof t3 && t3 >= 0 && t3 <= f3.levels.SILENT) return t3;
        throw new TypeError("log.setLevel() called with invalid level: " + e4);
      }
      "string" == typeof e3 ? h3 += ":" + e3 : "symbol" == typeof e3 && (h3 = void 0), f3.name = e3, f3.levels = { TRACE: 0, DEBUG: 1, INFO: 2, WARN: 3, ERROR: 4, SILENT: 5 }, f3.methodFactory = r4 || l2, f3.getLevel = function() {
        return null != c3 ? c3 : null != u3 ? u3 : a3;
      }, f3.setLevel = function(e4, r5) {
        return c3 = p3(e4), false !== r5 && function(e5) {
          var r6 = (n3[e5] || "silent").toUpperCase();
          if (typeof window !== t2 && h3) {
            try {
              return void (window.localStorage[h3] = r6);
            } catch (e6) {
            }
            try {
              window.document.cookie = encodeURIComponent(h3) + "=" + r6 + ";";
            } catch (e6) {
            }
          }
        }(c3), s2.call(f3);
      }, f3.setDefaultLevel = function(e4) {
        u3 = p3(e4), d2() || f3.setLevel(e4, false);
      }, f3.resetLevel = function() {
        c3 = null, function() {
          if (typeof window !== t2 && h3) {
            try {
              window.localStorage.removeItem(h3);
            } catch (e4) {
            }
            try {
              window.document.cookie = encodeURIComponent(h3) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
            } catch (e4) {
            }
          }
        }(), s2.call(f3);
      }, f3.enableAll = function(e4) {
        f3.setLevel(f3.levels.TRACE, e4);
      }, f3.disableAll = function(e4) {
        f3.setLevel(f3.levels.SILENT, e4);
      }, f3.rebuild = function() {
        if (i2 !== f3 && (a3 = p3(i2.getLevel())), s2.call(f3), i2 === f3) for (var e4 in o3) o3[e4].rebuild();
      }, a3 = p3(i2 ? i2.getLevel() : "WARN");
      var v3 = d2();
      null != v3 && (c3 = p3(v3)), s2.call(f3);
    }
    (i2 = new f2()).getLogger = function(e3) {
      if ("symbol" != typeof e3 && "string" != typeof e3 || "" === e3) throw new TypeError("You must supply a name when creating a logger.");
      var t3 = o3[e3];
      return t3 || (t3 = o3[e3] = new f2(e3, i2.methodFactory)), t3;
    };
    var h2 = typeof window !== t2 ? window.log : void 0;
    return i2.noConflict = function() {
      return typeof window !== t2 && window.log === i2 && (window.log = h2), i2;
    }, i2.getLoggers = function() {
      return o3;
    }, i2.default = i2, i2;
  }, void 0 === (o2 = n2.call(t, r2, t, e)) || (e.exports = o2);
}, 5909: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true });
  var r2 = function() {
    function e2(e3) {
      var t2 = e3.run;
      this._run = t2;
    }
    return e2.fromTransaction = function(t2) {
      return new e2({ run: t2.run.bind(t2) });
    }, e2.prototype.run = function(e3, t2) {
      return this._run(e3, t2);
    }, e2;
  }();
  t.default = r2;
}, 5918: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, o2 = this && this.__spreadArray || function(e2, t2) {
    for (var r3 = 0, n3 = t2.length, o3 = e2.length; r3 < n3; r3++, o3++) e2[o3] = t2[r3];
    return e2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.zip = void 0;
  var i2 = r2(7286), a2 = r2(7843);
  t.zip = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    return a2.operate(function(t3, r3) {
      i2.zip.apply(void 0, o2([t3], n2(e2))).subscribe(r3);
    });
  };
}, 5973: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.epochSecondAndNanoToLocalDateTime = t.nanoOfDayToLocalTime = t.epochDayToDate = void 0;
  var n2 = r2(9305), o2 = n2.internal.temporalUtil, i2 = o2.DAYS_0000_TO_1970, a2 = o2.DAYS_PER_400_YEAR_CYCLE, u2 = o2.NANOS_PER_HOUR, s2 = o2.NANOS_PER_MINUTE, c2 = o2.NANOS_PER_SECOND, l2 = o2.SECONDS_PER_DAY, f2 = o2.floorDiv, h2 = o2.floorMod;
  function d2(e2) {
    var t2 = (e2 = (0, n2.int)(e2)).add(i2).subtract(60), r3 = (0, n2.int)(0);
    if (t2.lessThan(0)) {
      var o3 = t2.add(1).div(a2).subtract(1);
      r3 = o3.multiply(400), t2 = t2.add(o3.multiply(-a2));
    }
    var u3 = t2.multiply(400).add(591).div(a2), s3 = t2.subtract(u3.multiply(365).add(u3.div(4)).subtract(u3.div(100)).add(u3.div(400)));
    s3.lessThan(0) && (u3 = u3.subtract(1), s3 = t2.subtract(u3.multiply(365).add(u3.div(4)).subtract(u3.div(100)).add(u3.div(400)))), u3 = u3.add(r3);
    var c3 = s3, l3 = c3.multiply(5).add(2).div(153), f3 = l3.add(2).modulo(12).add(1), h3 = c3.subtract(l3.multiply(306).add(5).div(10)).add(1);
    return u3 = u3.add(l3.div(10)), new n2.Date(u3, f3, h3);
  }
  function p3(e2) {
    var t2 = (e2 = (0, n2.int)(e2)).div(u2), r3 = (e2 = e2.subtract(t2.multiply(u2))).div(s2), o3 = (e2 = e2.subtract(r3.multiply(s2))).div(c2), i3 = e2.subtract(o3.multiply(c2));
    return new n2.LocalTime(t2, r3, o3, i3);
  }
  t.epochDayToDate = d2, t.nanoOfDayToLocalTime = p3, t.epochSecondAndNanoToLocalDateTime = function(e2, t2) {
    var r3 = f2(e2, l2), o3 = h2(e2, l2).multiply(c2).add(t2), i3 = d2(r3), a3 = p3(o3);
    return new n2.LocalDateTime(i3.year, i3.month, i3.day, a3.hour, a3.minute, a3.second, a3.nanosecond);
  };
}, 6013: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.createObject = void 0, t.createObject = function(e2, t2) {
    return e2.reduce(function(e3, r2, n2) {
      return e3[r2] = t2[n2], e3;
    }, {});
  };
}, 6030: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.cacheKey = void 0;
  var n2 = r2(4027);
  t.cacheKey = function(e2, t2) {
    var r3;
    return null != t2 ? "basic:" + t2 : void 0 === e2 ? "DEFAULT" : "basic" === e2.scheme ? "basic:" + (null !== (r3 = e2.principal) && void 0 !== r3 ? r3 : "") : "kerberos" === e2.scheme ? "kerberos:" + e2.credentials : "bearer" === e2.scheme ? "bearer:" + e2.credentials : "none" === e2.scheme ? "none" : (0, n2.stringify)(e2, { sortedElements: true });
  };
}, 6033: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.Stats = t.QueryStatistics = t.ProfiledPlan = t.Plan = t.ServerInfo = t.queryType = void 0;
  var n2 = r2(6995), o2 = r2(1866), i2 = function() {
    function e2(e3, t2, r3, n3) {
      var i3, l3, f2;
      this.query = { text: e3, parameters: t2 }, this.queryType = r3.type, this.counters = new s2(null !== (i3 = r3.stats) && void 0 !== i3 ? i3 : {}), this.updateStatistics = this.counters, this.plan = (null != r3.plan || null != r3.profile) && new a2(null !== (l3 = r3.plan) && void 0 !== l3 ? l3 : r3.profile), this.profile = null != r3.profile && new u2(r3.profile), this.notifications = (0, o2.buildNotificationsFromMetadata)(r3), this.gqlStatusObjects = (0, o2.buildGqlStatusObjectFromMetadata)(r3), this.server = new c2(r3.server, n3), this.resultConsumedAfter = r3.result_consumed_after, this.resultAvailableAfter = r3.result_available_after, this.database = { name: null !== (f2 = r3.db) && void 0 !== f2 ? f2 : null };
    }
    return e2.prototype.hasPlan = function() {
      return this.plan instanceof a2;
    }, e2.prototype.hasProfile = function() {
      return this.profile instanceof u2;
    }, e2;
  }(), a2 = function e2(t2) {
    this.operatorType = t2.operatorType, this.identifiers = t2.identifiers, this.arguments = t2.args, this.children = null != t2.children ? t2.children.map(function(t3) {
      return new e2(t3);
    }) : [];
  };
  t.Plan = a2;
  var u2 = function() {
    function e2(t2) {
      this.operatorType = t2.operatorType, this.identifiers = t2.identifiers, this.arguments = t2.args, this.dbHits = l2("dbHits", t2), this.rows = l2("rows", t2), this.pageCacheMisses = l2("pageCacheMisses", t2), this.pageCacheHits = l2("pageCacheHits", t2), this.pageCacheHitRatio = l2("pageCacheHitRatio", t2), this.time = l2("time", t2), this.children = null != t2.children ? t2.children.map(function(t3) {
        return new e2(t3);
      }) : [];
    }
    return e2.prototype.hasPageCacheStats = function() {
      return this.pageCacheMisses > 0 || this.pageCacheHits > 0 || this.pageCacheHitRatio > 0;
    }, e2;
  }();
  t.ProfiledPlan = u2;
  t.Stats = function() {
    this.nodesCreated = 0, this.nodesDeleted = 0, this.relationshipsCreated = 0, this.relationshipsDeleted = 0, this.propertiesSet = 0, this.labelsAdded = 0, this.labelsRemoved = 0, this.indexesAdded = 0, this.indexesRemoved = 0, this.constraintsAdded = 0, this.constraintsRemoved = 0;
  };
  var s2 = function() {
    function e2(e3) {
      var t2 = this;
      this._stats = { nodesCreated: 0, nodesDeleted: 0, relationshipsCreated: 0, relationshipsDeleted: 0, propertiesSet: 0, labelsAdded: 0, labelsRemoved: 0, indexesAdded: 0, indexesRemoved: 0, constraintsAdded: 0, constraintsRemoved: 0 }, this._systemUpdates = 0, Object.keys(e3).forEach(function(r3) {
        var o3 = r3.replace(/(-\w)/g, function(e4) {
          return e4[1].toUpperCase();
        });
        o3 in t2._stats ? t2._stats[o3] = n2.util.toNumber(e3[r3]) : "systemUpdates" === o3 ? t2._systemUpdates = n2.util.toNumber(e3[r3]) : "containsSystemUpdates" === o3 ? t2._containsSystemUpdates = e3[r3] : "containsUpdates" === o3 && (t2._containsUpdates = e3[r3]);
      }), this._stats = Object.freeze(this._stats);
    }
    return e2.prototype.containsUpdates = function() {
      var e3 = this;
      return void 0 !== this._containsUpdates ? this._containsUpdates : Object.keys(this._stats).reduce(function(t2, r3) {
        return t2 + e3._stats[r3];
      }, 0) > 0;
    }, e2.prototype.updates = function() {
      return this._stats;
    }, e2.prototype.containsSystemUpdates = function() {
      return void 0 !== this._containsSystemUpdates ? this._containsSystemUpdates : this._systemUpdates > 0;
    }, e2.prototype.systemUpdates = function() {
      return this._systemUpdates;
    }, e2;
  }();
  t.QueryStatistics = s2;
  var c2 = function(e2, t2) {
    null != e2 && (this.address = e2.address, this.agent = e2.version), this.protocolVersion = t2;
  };
  function l2(e2, t2, r3) {
    if (void 0 === r3 && (r3 = 0), false !== t2 && e2 in t2) {
      var o3 = t2[e2];
      return n2.util.toNumber(o3);
    }
    return r3;
  }
  t.ServerInfo = c2, t.queryType = { READ_ONLY: "r", READ_WRITE: "rw", WRITE_ONLY: "w", SCHEMA_WRITE: "s" }, t.default = i2;
}, 6038: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true });
}, 6086: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.sampleTime = void 0;
  var n2 = r2(7961), o2 = r2(1731), i2 = r2(6472);
  t.sampleTime = function(e2, t2) {
    return void 0 === t2 && (t2 = n2.asyncScheduler), o2.sample(i2.interval(e2, t2));
  };
}, 6102: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.onErrorResumeNext = void 0;
  var n2 = r2(4662), o2 = r2(8535), i2 = r2(3111), a2 = r2(1342), u2 = r2(9445);
  t.onErrorResumeNext = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    var r3 = o2.argsOrArgArray(e2);
    return new n2.Observable(function(e3) {
      var t3 = 0, n3 = function() {
        if (t3 < r3.length) {
          var o3 = void 0;
          try {
            o3 = u2.innerFrom(r3[t3++]);
          } catch (e4) {
            return void n3();
          }
          var s2 = new i2.OperatorSubscriber(e3, void 0, a2.noop, a2.noop);
          o3.subscribe(s2), s2.add(n3);
        } else e3.complete();
      };
      n3();
    });
  };
}, 6106: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.publishLast = void 0;
  var n2 = r2(95), o2 = r2(8918);
  t.publishLast = function() {
    return function(e2) {
      var t2 = new n2.AsyncSubject();
      return new o2.ConnectableObservable(e2, function() {
        return t2;
      });
    };
  };
}, 6161: function(e, t, r2) {
  var n2 = this && this.__assign || function() {
    return n2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, n2.apply(this, arguments);
  }, o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = o2(r2(6248));
  t.default = n2({}, i2.default);
}, 6189: function(e, t, r2) {
  var n2 = this && this.__assign || function() {
    return n2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, n2.apply(this, arguments);
  }, o2 = this && this.__awaiter || function(e2, t2, r3, n3) {
    return new (r3 || (r3 = Promise))(function(o3, i3) {
      function a3(e3) {
        try {
          s3(n3.next(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function u3(e3) {
        try {
          s3(n3.throw(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function s3(e3) {
        var t3;
        e3.done ? o3(e3.value) : (t3 = e3.value, t3 instanceof r3 ? t3 : new r3(function(e4) {
          e4(t3);
        })).then(a3, u3);
      }
      s3((n3 = n3.apply(e2, t2 || [])).next());
    });
  }, i2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u3(0), throw: u3(1), return: u3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u3(u4) {
      return function(s3) {
        return function(u5) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; i3 && (i3 = 0, u5[0] && (a3 = 0)), a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & u5[0] ? n3.return : u5[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, u5[1])).done) return o3;
            switch (n3 = 0, o3 && (u5 = [2 & u5[0], o3.value]), u5[0]) {
              case 0:
              case 1:
                o3 = u5;
                break;
              case 4:
                return a3.label++, { value: u5[1], done: false };
              case 5:
                a3.label++, n3 = u5[1], u5 = [0];
                continue;
              case 7:
                u5 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== u5[0] && 2 !== u5[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === u5[0] && (!o3 || u5[1] > o3[0] && u5[1] < o3[3])) {
                  a3.label = u5[1];
                  break;
                }
                if (6 === u5[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = u5;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(u5);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            u5 = t2.call(e2, a3);
          } catch (e3) {
            u5 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & u5[0]) throw u5[1];
          return { value: u5[0] ? u5[1] : void 0, done: true };
        }([u4, s3]);
      };
    }
  }, a2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, u2 = this && this.__spreadArray || function(e2, t2, r3) {
    if (r3 || 2 === arguments.length) for (var n3, o3 = 0, i3 = t2.length; o3 < i3; o3++) !n3 && o3 in t2 || (n3 || (n3 = Array.prototype.slice.call(t2, 0, o3)), n3[o3] = t2[o3]);
    return e2.concat(n3 || Array.prototype.slice.call(t2));
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.TransactionExecutor = void 0;
  var s2 = r2(9691), c2 = r2(326);
  function l2(e2, t2) {
    for (var r3 = [], n3 = 2; n3 < arguments.length; n3++) r3[n3 - 2] = arguments[n3];
    return setTimeout.apply(void 0, u2([e2, t2], a2(r3), false));
  }
  function f2(e2) {
    return clearTimeout(e2);
  }
  var h2 = function() {
    function e2(e3, t2, r3, n3, o3) {
      void 0 === o3 && (o3 = { setTimeout: l2, clearTimeout: f2 }), this._maxRetryTimeMs = d2(e3, 3e4), this._initialRetryDelayMs = d2(t2, 1e3), this._multiplier = d2(r3, 2), this._jitterFactor = d2(n3, 0.2), this._setTimeout = o3.setTimeout, this._clearTimeout = o3.clearTimeout, this._inFlightTimeoutIds = [], this.pipelineBegin = false, this.telemetryApi = c2.TELEMETRY_APIS.MANAGED_TRANSACTION, this._verifyAfterConstruction();
    }
    return e2.prototype.execute = function(e3, t2, r3) {
      var n3 = this, o3 = { apiTransactionConfig: { api: this.telemetryApi, onTelemetrySuccess: function() {
        o3.apiTransactionConfig = void 0;
      } } };
      return new Promise(function(i3, a3) {
        n3._executeTransactionInsidePromise(e3, t2, i3, a3, r3, o3).catch(a3);
      }).catch(function(i3) {
        var a3 = Date.now(), u3 = n3._initialRetryDelayMs;
        return n3._retryTransactionPromise(e3, t2, i3, a3, u3, r3, o3);
      });
    }, e2.prototype.close = function() {
      var e3 = this;
      this._inFlightTimeoutIds.forEach(function(t2) {
        return e3._clearTimeout(t2);
      }), this._inFlightTimeoutIds = [];
    }, e2.prototype._retryTransactionPromise = function(e3, t2, r3, n3, o3, i3, a3) {
      var u3 = this;
      return Date.now() - n3 > this._maxRetryTimeMs || !(0, s2.isRetriableError)(r3) ? Promise.reject(r3) : new Promise(function(r4, n4) {
        var s3 = u3._computeDelayWithJitter(o3), c3 = u3._setTimeout(function() {
          u3._inFlightTimeoutIds = u3._inFlightTimeoutIds.filter(function(e4) {
            return e4 !== c3;
          }), u3._executeTransactionInsidePromise(e3, t2, r4, n4, i3, a3).catch(n4);
        }, s3);
        u3._inFlightTimeoutIds.push(c3);
      }).catch(function(r4) {
        var s3 = o3 * u3._multiplier;
        return u3._retryTransactionPromise(e3, t2, r4, n3, s3, i3, a3);
      });
    }, e2.prototype._executeTransactionInsidePromise = function(e3, t2, r3, a3, u3, s3) {
      return o2(this, void 0, void 0, function() {
        var o3, c3, l3, f3, h3, d3, p3 = this;
        return i2(this, function(i3) {
          switch (i3.label) {
            case 0:
              return i3.trys.push([0, 4, , 5]), c3 = e3(null != (null == s3 ? void 0 : s3.apiTransactionConfig) ? n2({}, null == s3 ? void 0 : s3.apiTransactionConfig) : void 0), this.pipelineBegin ? (l3 = c3, [3, 3]) : [3, 1];
            case 1:
              return [4, c3];
            case 2:
              l3 = i3.sent(), i3.label = 3;
            case 3:
              return o3 = l3, [3, 5];
            case 4:
              return f3 = i3.sent(), a3(f3), [2];
            case 5:
              return h3 = null != u3 ? u3 : function(e4) {
                return e4;
              }, d3 = h3(o3), this._safeExecuteTransactionWork(d3, t2).then(function(e4) {
                return p3._handleTransactionWorkSuccess(e4, o3, r3, a3);
              }).catch(function(e4) {
                return p3._handleTransactionWorkFailure(e4, o3, a3);
              }), [2];
          }
        });
      });
    }, e2.prototype._safeExecuteTransactionWork = function(e3, t2) {
      try {
        var r3 = t2(e3);
        return Promise.resolve(r3);
      } catch (e4) {
        return Promise.reject(e4);
      }
    }, e2.prototype._handleTransactionWorkSuccess = function(e3, t2, r3, n3) {
      t2.isOpen() ? t2.commit().then(function() {
        r3(e3);
      }).catch(function(e4) {
        n3(e4);
      }) : r3(e3);
    }, e2.prototype._handleTransactionWorkFailure = function(e3, t2, r3) {
      t2.isOpen() ? t2.rollback().catch(function(e4) {
      }).then(function() {
        return r3(e3);
      }).catch(r3) : r3(e3);
    }, e2.prototype._computeDelayWithJitter = function(e3) {
      var t2 = e3 * this._jitterFactor, r3 = e3 - t2, n3 = e3 + t2;
      return Math.random() * (n3 - r3) + r3;
    }, e2.prototype._verifyAfterConstruction = function() {
      if (this._maxRetryTimeMs < 0) throw (0, s2.newError)("Max retry time should be >= 0: " + this._maxRetryTimeMs.toString());
      if (this._initialRetryDelayMs < 0) throw (0, s2.newError)("Initial retry delay should >= 0: " + this._initialRetryDelayMs.toString());
      if (this._multiplier < 1) throw (0, s2.newError)("Multiplier should be >= 1.0: " + this._multiplier.toString());
      if (this._jitterFactor < 0 || this._jitterFactor > 1) throw (0, s2.newError)("Jitter factor should be in [0.0, 1.0]: " + this._jitterFactor.toFixed());
    }, e2;
  }();
  function d2(e2, t2) {
    return null != e2 ? e2 : t2;
  }
  t.TransactionExecutor = h2;
}, 6245: function(e, t, r2) {
  var n2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var o2 = n2(r2(5319)), i2 = r2(9305), a2 = i2.internal.util, u2 = a2.ENCRYPTION_OFF, s2 = a2.ENCRYPTION_ON, c2 = function() {
    function e2(e3, t2, r3) {
      void 0 === t2 && (t2 = l2), void 0 === r3 && (r3 = function(e4) {
        return new WebSocket(e4);
      });
      var n3 = this;
      this._open = true, this._pending = [], this._error = null, this._handleConnectionError = this._handleConnectionError.bind(this), this._config = e3, this._receiveTimeout = null, this._receiveTimeoutStarted = false, this._receiveTimeoutId = null, this._closingPromise = null;
      var a3 = function(e4, t3) {
        var r4 = function(e5) {
          return true === e5.encrypted || e5.encrypted === s2;
        }(e4), n4 = function(e5) {
          return false === e5.encrypted || e5.encrypted === u2;
        }(e4), o3 = e4.trust, a4 = function(e5) {
          var t4 = "function" == typeof e5 ? e5() : "";
          return t4 && t4.toLowerCase().indexOf("https") >= 0;
        }(t3);
        return function(e5, t4, r5) {
          null === r5 || (e5 && !r5 ? console.warn("Neo4j driver is configured to use secure WebSocket on a HTTP web page. WebSockets might not work in a mixed content environment. Please consider configuring driver to not use encryption.") : t4 && r5 && console.warn("Neo4j driver is configured to use insecure WebSocket on a HTTPS web page. WebSockets might not work in a mixed content environment. Please consider configuring driver to use encryption."));
        }(r4, n4, a4), n4 ? { scheme: "ws", error: null } : a4 ? { scheme: "wss", error: null } : r4 ? o3 && "TRUST_SYSTEM_CA_SIGNED_CERTIFICATES" !== o3 ? { scheme: null, error: (0, i2.newError)("The browser version of this driver only supports one trust strategy, 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES'. " + o3 + ' is not supported. Please either use TRUST_SYSTEM_CA_SIGNED_CERTIFICATES or disable encryption by setting `encrypted:"' + u2 + '"` in the driver configuration.') } : { scheme: "wss", error: null } : { scheme: "ws", error: null };
      }(e3, t2), c3 = a3.scheme, f2 = a3.error;
      if (f2) this._error = f2;
      else {
        this._ws = function(e4, t3, r4) {
          var n4 = e4 + "://" + t3.asHostPort();
          try {
            return r4(n4);
          } catch (n5) {
            if (function(e5, t4) {
              return "SyntaxError" === e5.name && ("[" === (r5 = t4.asHostPort()).charAt(0) && -1 !== r5.indexOf("]"));
              var r5;
            }(n5, t3)) {
              var o3 = function(e5, t4) {
                var r5 = t4.host().replace(/:/g, "-").replace("%", "s") + ".ipv6-literal.net";
                return "".concat(e5, "://").concat(r5, ":").concat(t4.port());
              }(e4, t3);
              return r4(o3);
            }
            throw n5;
          }
        }(c3, e3.address, r3), this._ws.binaryType = "arraybuffer";
        var h2 = this;
        this._ws.onclose = function(e4) {
          e4 && !e4.wasClean && h2._handleConnectionError(), h2._open = false;
        }, this._ws.onopen = function() {
          h2._clearConnectionTimeout();
          var e4 = h2._pending;
          h2._pending = null;
          for (var t3 = 0; t3 < e4.length; t3++) h2.write(e4[t3]);
        }, this._ws.onmessage = function(e4) {
          if (n3._resetTimeout(), h2.onmessage) {
            var t3 = new o2.default(e4.data);
            h2.onmessage(t3);
          }
        }, this._ws.onerror = this._handleConnectionError, this._connectionTimeoutFired = false, this._connectionTimeoutId = this._setupConnectionTimeout();
      }
    }
    return e2.prototype._handleConnectionError = function() {
      if (this._connectionTimeoutFired) return this._error = (0, i2.newError)("Failed to establish connection in ".concat(this._config.connectionTimeout, "ms"), this._config.connectionErrorCode), void (this.onerror && this.onerror(this._error));
      this._open && !this._timedout && (this._error = (0, i2.newError)("WebSocket connection failure. Due to security constraints in your web browser, the reason for the failure is not available to this Neo4j Driver. Please use your browsers development console to determine the root cause of the failure. Common reasons include the database being unavailable, using the wrong connection URL or temporary network problems. If you have enabled encryption, ensure your browser is configured to trust the certificate Neo4j is configured to use. WebSocket `readyState` is: " + this._ws.readyState, this._config.connectionErrorCode), this.onerror && this.onerror(this._error));
    }, e2.prototype.write = function(e3) {
      if (null !== this._pending) this._pending.push(e3);
      else {
        if (!(e3 instanceof o2.default)) throw (0, i2.newError)("Don't know how to send buffer: " + e3);
        try {
          this._ws.send(e3._buffer);
        } catch (e4) {
          if (1 === this._ws.readyState) throw e4;
          this._handleConnectionError();
        }
      }
    }, e2.prototype.close = function() {
      var e3 = this;
      return null === this._closingPromise && (this._closingPromise = new Promise(function(t2, r3) {
        e3._clearConnectionTimeout(), e3._ws && 3 !== e3._ws.readyState ? (e3._open = false, e3.stopReceiveTimeout(), e3._ws.onclose = function() {
          t2();
        }, e3._ws.close()) : t2();
      })), this._closingPromise;
    }, e2.prototype.setupReceiveTimeout = function(e3) {
      this._receiveTimeout = e3;
    }, e2.prototype.stopReceiveTimeout = function() {
      null !== this._receiveTimeout && this._receiveTimeoutStarted && (this._receiveTimeoutStarted = false, null != this._receiveTimeoutId && clearTimeout(this._receiveTimeoutId), this._receiveTimeoutId = null);
    }, e2.prototype.startReceiveTimeout = function() {
      this._open && null !== this._receiveTimeout && !this._receiveTimeoutStarted && (this._receiveTimeoutStarted = true, this._resetTimeout());
    }, e2.prototype._resetTimeout = function() {
      var e3 = this;
      this._receiveTimeoutStarted && (null !== this._receiveTimeoutId && clearTimeout(this._receiveTimeoutId), this._receiveTimeoutId = setTimeout(function() {
        e3._receiveTimeoutId = null, e3._timedout = true, e3.stopReceiveTimeout(), e3._error = (0, i2.newError)("Connection lost. Server didn't respond in ".concat(e3._receiveTimeout, "ms"), e3._config.connectionErrorCode), e3.close(), e3.onerror && e3.onerror(e3._error);
      }, this._receiveTimeout));
    }, e2.prototype._setupConnectionTimeout = function() {
      var e3 = this, t2 = this._config.connectionTimeout;
      if (t2) {
        var r3 = this._ws;
        return setTimeout(function() {
          1 !== r3.readyState && (e3._connectionTimeoutFired = true, r3.close());
        }, t2);
      }
      return null;
    }, e2.prototype._clearConnectionTimeout = function() {
      var e3 = this._connectionTimeoutId;
      (e3 || 0 === e3) && (this._connectionTimeoutFired = false, this._connectionTimeoutId = null, clearTimeout(e3));
    }, e2;
  }();
  function l2() {
    return "undefined" != typeof window && window.location ? window.location.protocol : null;
  }
  t.default = c2;
}, 6248: function(e, t, r2) {
  var n2 = this && this.__assign || function() {
    return n2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, n2.apply(this, arguments);
  }, o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = o2(r2(3399));
  t.default = n2({}, i2.default);
}, 6293: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, o2 = this && this.__spreadArray || function(e2, t2) {
    for (var r3 = 0, n3 = t2.length, o3 = e2.length; r3 < n3; r3++, o3++) e2[o3] = t2[r3];
    return e2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.immediateProvider = void 0;
  var i2 = r2(7245), a2 = i2.Immediate.setImmediate, u2 = i2.Immediate.clearImmediate;
  t.immediateProvider = { setImmediate: function() {
    for (var e2 = [], r3 = 0; r3 < arguments.length; r3++) e2[r3] = arguments[r3];
    var i3 = t.immediateProvider.delegate;
    return ((null == i3 ? void 0 : i3.setImmediate) || a2).apply(void 0, o2([], n2(e2)));
  }, clearImmediate: function(e2) {
    var r3 = t.immediateProvider.delegate;
    return ((null == r3 ? void 0 : r3.clearImmediate) || u2)(e2);
  }, delegate: void 0 };
}, 6345: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__assign || function() {
    return o2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, o2.apply(this, arguments);
  }, i2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var a2 = i2(r2(844)), u2 = r2(397), s2 = i2(r2(9994)), c2 = i2(r2(3321)), l2 = i2(r2(7021)), f2 = r2(9014), h2 = r2(9305).internal.constants.BOLT_PROTOCOL_V5_1, d2 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), Object.defineProperty(t2.prototype, "version", { get: function() {
      return h2;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "transformer", { get: function() {
      var e3 = this;
      return void 0 === this._transformer && (this._transformer = new c2.default(Object.values(s2.default).map(function(t3) {
        return t3(e3._config, e3._log);
      }))), this._transformer;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "supportsReAuth", { get: function() {
      return true;
    }, enumerable: false, configurable: true }), t2.prototype.initialize = function(e3) {
      var t3 = this, r3 = void 0 === e3 ? {} : e3, n3 = r3.userAgent, i3 = (r3.boltAgent, r3.authToken), a3 = r3.notificationFilter, s3 = r3.onError, c3 = r3.onComplete, h3 = {}, d3 = new f2.LoginObserver({ onError: function(e4) {
        return t3._onLoginError(e4, s3);
      }, onCompleted: function(e4) {
        return h3.metadata = e4, t3._onLoginCompleted(e4);
      } });
      return (0, u2.assertNotificationFilterIsEmpty)(a3, this._onProtocolError, d3), this.write(l2.default.hello5x1(n3, this._serversideRouting), d3, false), this.logon({ authToken: i3, onComplete: function(e4) {
        return c3(o2(o2({}, e4), h3.metadata));
      }, onError: s3, flush: true });
    }, t2.prototype.logon = function(e3) {
      var t3 = this, r3 = void 0 === e3 ? {} : e3, n3 = r3.authToken, o3 = r3.onComplete, i3 = r3.onError, a3 = r3.flush, u3 = new f2.LoginObserver({ onCompleted: function() {
        return t3._onLoginCompleted(null, n3, o3);
      }, onError: function(e4) {
        return t3._onLoginError(e4, i3);
      } });
      return this.write(l2.default.logon(n3), u3, a3), u3;
    }, t2.prototype.logoff = function(e3) {
      var t3 = void 0 === e3 ? {} : e3, r3 = t3.onComplete, n3 = t3.onError, o3 = t3.flush, i3 = new f2.LogoffObserver({ onCompleted: r3, onError: n3 });
      return this.write(l2.default.logoff(), i3, o3), i3;
    }, t2;
  }(a2.default);
  t.default = d2;
}, 6368: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.isIterable = void 0;
  var n2 = r2(1964), o2 = r2(1018);
  t.isIterable = function(e2) {
    return o2.isFunction(null == e2 ? void 0 : e2[n2.iterator]);
  };
}, 6377: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__assign || function() {
    return o2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, o2.apply(this, arguments);
  }, i2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var a2 = i2(r2(6890)), u2 = i2(r2(6248)), s2 = i2(r2(3321)), c2 = r2(9305).internal.constants.BOLT_PROTOCOL_V5_7, l2 = Object.freeze({ OPERATION: "", OPERATION_CODE: "0", CURRENT_SCHEMA: "/" }), f2 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), Object.defineProperty(t2.prototype, "version", { get: function() {
      return c2;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "transformer", { get: function() {
      var e3 = this;
      return void 0 === this._transformer && (this._transformer = new s2.default(Object.values(u2.default).map(function(t3) {
        return t3(e3._config, e3._log);
      }))), this._transformer;
    }, enumerable: false, configurable: true }), t2.prototype.enrichErrorMetadata = function(e3) {
      return o2(o2({}, e3), { cause: null !== e3.cause && void 0 !== e3.cause ? this.enrichErrorMetadata(e3.cause) : null, code: e3.neo4j_code, diagnostic_record: null !== e3.diagnostic_record ? o2(o2({}, l2), e3.diagnostic_record) : null });
    }, t2;
  }(a2.default);
  t.default = f2;
}, 6384: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.scanInternals = void 0;
  var n2 = r2(3111);
  t.scanInternals = function(e2, t2, r3, o2, i2) {
    return function(a2, u2) {
      var s2 = r3, c2 = t2, l2 = 0;
      a2.subscribe(n2.createOperatorSubscriber(u2, function(t3) {
        var r4 = l2++;
        c2 = s2 ? e2(c2, t3, r4) : (s2 = true, t3), o2 && u2.next(c2);
      }, i2 && function() {
        s2 && u2.next(c2), u2.complete();
      }));
    };
  };
}, 6385: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true }), r2(7666);
  var o2 = function(e2) {
    function t2(t3) {
      var r3 = e2.call(this) || this;
      return r3._errorHandler = t3, r3;
    }
    return n2(t2, e2), Object.defineProperty(t2.prototype, "id", { get: function() {
      throw new Error("not implemented");
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "databaseId", { get: function() {
      throw new Error("not implemented");
    }, set: function(e3) {
      throw new Error("not implemented");
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "authToken", { get: function() {
      throw new Error("not implemented");
    }, set: function(e3) {
      throw new Error("not implemented");
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "supportsReAuth", { get: function() {
      throw new Error("not implemented");
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "creationTimestamp", { get: function() {
      throw new Error("not implemented");
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "idleTimestamp", { get: function() {
      throw new Error("not implemented");
    }, set: function(e3) {
      throw new Error("not implemented");
    }, enumerable: false, configurable: true }), t2.prototype.protocol = function() {
      throw new Error("not implemented");
    }, Object.defineProperty(t2.prototype, "address", { get: function() {
      throw new Error("not implemented");
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "version", { get: function() {
      throw new Error("not implemented");
    }, set: function(e3) {
      throw new Error("not implemented");
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "server", { get: function() {
      throw new Error("not implemented");
    }, enumerable: false, configurable: true }), t2.prototype.connect = function(e3, t3, r3, n3) {
      throw new Error("not implemented");
    }, t2.prototype.write = function(e3, t3, r3) {
      throw new Error("not implemented");
    }, t2.prototype.close = function() {
      throw new Error("not implemented");
    }, t2.prototype.handleAndTransformError = function(e3, t3) {
      return this._errorHandler ? this._errorHandler.handleAndTransformError(e3, t3, this) : e3;
    }, t2;
  }(r2(9305).Connection);
  t.default = o2;
}, 6445: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = o2(r2(4596)), a2 = r2(9305), u2 = o2(r2(5348)), s2 = o2(r2(3321)), c2 = a2.internal.constants.BOLT_PROTOCOL_V4_2, l2 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), Object.defineProperty(t2.prototype, "version", { get: function() {
      return c2;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "transformer", { get: function() {
      var e3 = this;
      return void 0 === this._transformer && (this._transformer = new s2.default(Object.values(u2.default).map(function(t3) {
        return t3(e3._config, e3._log);
      }))), this._transformer;
    }, enumerable: false, configurable: true }), t2;
  }(i2.default);
  t.default = l2;
}, 6472: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.interval = void 0;
  var n2 = r2(7961), o2 = r2(4092);
  t.interval = function(e2, t2) {
    return void 0 === e2 && (e2 = 0), void 0 === t2 && (t2 = n2.asyncScheduler), e2 < 0 && (e2 = 0), o2.timer(e2, e2, t2);
  };
}, 6492: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.reuseOngoingRequest = t.identity = void 0;
  var n2 = r2(9305);
  t.identity = function(e2) {
    return e2;
  }, t.reuseOngoingRequest = function(e2, t2) {
    void 0 === t2 && (t2 = null);
    var r3 = /* @__PURE__ */ new Map();
    return function() {
      for (var o2 = [], i2 = 0; i2 < arguments.length; i2++) o2[i2] = arguments[i2];
      var a2 = n2.json.stringify(o2);
      if (r3.has(a2)) return r3.get(a2);
      var u2 = e2.apply(t2, o2);
      return r3.set(a2, u2), u2.finally(function() {
        r3.delete(a2);
      });
    };
  };
}, 6505: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.timestamp = void 0;
  var n2 = r2(9568), o2 = r2(5471);
  t.timestamp = function(e2) {
    return void 0 === e2 && (e2 = n2.dateTimestampProvider), o2.map(function(t2) {
      return { value: t2, timestamp: e2.now() };
    });
  };
}, 6544: function(e, t, r2) {
  var n2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var o2 = r2(9305), i2 = n2(r2(8320)), a2 = n2(r2(2857)), u2 = n2(r2(5642)), s2 = n2(r2(2539)), c2 = n2(r2(4596)), l2 = n2(r2(6445)), f2 = n2(r2(9054)), h2 = n2(r2(1711)), d2 = n2(r2(844)), p3 = n2(r2(6345)), v3 = n2(r2(934)), y3 = n2(r2(9125)), b2 = n2(r2(9744)), m2 = n2(r2(5815)), g2 = n2(r2(6890)), _2 = n2(r2(6377)), w2 = n2(r2(1092)), O2 = (r2(7452), n2(r2(2578)));
  t.default = function(e2) {
    var t2 = void 0 === e2 ? {} : e2, r3 = t2.version, n3 = t2.chunker, S2 = t2.dechunker, E2 = t2.channel, P2 = t2.disableLosslessIntegers, T2 = t2.useBigInt, x3 = t2.serversideRouting, C2 = t2.server, j2 = t2.log, A2 = t2.observer;
    return function(e3, t3, r4, n4, O3, S3, E3, P3) {
      switch (e3) {
        case 1:
          return new i2.default(t3, r4, n4, S3, P3, E3);
        case 2:
          return new a2.default(t3, r4, n4, S3, P3, E3);
        case 3:
          return new u2.default(t3, r4, n4, S3, P3, E3);
        case 4:
          return new s2.default(t3, r4, n4, S3, P3, E3);
        case 4.1:
          return new c2.default(t3, r4, n4, S3, P3, E3, O3);
        case 4.2:
          return new l2.default(t3, r4, n4, S3, P3, E3, O3);
        case 4.3:
          return new f2.default(t3, r4, n4, S3, P3, E3, O3);
        case 4.4:
          return new h2.default(t3, r4, n4, S3, P3, E3, O3);
        case 5:
          return new d2.default(t3, r4, n4, S3, P3, E3, O3);
        case 5.1:
          return new p3.default(t3, r4, n4, S3, P3, E3, O3);
        case 5.2:
          return new v3.default(t3, r4, n4, S3, P3, E3, O3);
        case 5.3:
          return new y3.default(t3, r4, n4, S3, P3, E3, O3);
        case 5.4:
          return new b2.default(t3, r4, n4, S3, P3, E3, O3);
        case 5.5:
          return new m2.default(t3, r4, n4, S3, P3, E3, O3);
        case 5.6:
          return new g2.default(t3, r4, n4, S3, P3, E3, O3);
        case 5.7:
          return new _2.default(t3, r4, n4, S3, P3, E3, O3);
        case 5.8:
          return new w2.default(t3, r4, n4, S3, P3, E3, O3);
        default:
          throw (0, o2.newError)("Unknown Bolt protocol version: " + e3);
      }
    }(r3, C2, n3, { disableLosslessIntegers: P2, useBigInt: T2 }, x3, function(e3) {
      var t3 = new O2.default({ transformMetadata: e3.transformMetadata.bind(e3), enrichErrorMetadata: e3.enrichErrorMetadata.bind(e3), log: j2, observer: A2 });
      return E2.onerror = A2.onError.bind(A2), E2.onmessage = function(e4) {
        return S2.write(e4);
      }, S2.onmessage = function(r4) {
        try {
          t3.handleResponse(e3.unpack(r4));
        } catch (e4) {
          return A2.onError(e4);
        }
      }, t3;
    }, A2.onProtocolError.bind(A2), j2);
  };
}, 6566: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.repeatWhen = void 0;
  var n2 = r2(9445), o2 = r2(2483), i2 = r2(7843), a2 = r2(3111);
  t.repeatWhen = function(e2) {
    return i2.operate(function(t2, r3) {
      var i3, u2, s2 = false, c2 = false, l2 = false, f2 = function() {
        return l2 && c2 && (r3.complete(), true);
      }, h2 = function() {
        l2 = false, i3 = t2.subscribe(a2.createOperatorSubscriber(r3, void 0, function() {
          l2 = true, !f2() && (u2 || (u2 = new o2.Subject(), n2.innerFrom(e2(u2)).subscribe(a2.createOperatorSubscriber(r3, function() {
            i3 ? h2() : s2 = true;
          }, function() {
            c2 = true, f2();
          }))), u2).next();
        })), s2 && (i3.unsubscribe(), i3 = null, s2 = false, h2());
      };
      h2();
    });
  };
}, 6586: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.mergeMapTo = void 0;
  var n2 = r2(983), o2 = r2(1018);
  t.mergeMapTo = function(e2, t2, r3) {
    return void 0 === r3 && (r3 = 1 / 0), o2.isFunction(t2) ? n2.mergeMap(function() {
      return e2;
    }, t2, r3) : ("number" == typeof t2 && (r3 = t2), n2.mergeMap(function() {
      return e2;
    }, r3));
  };
}, 6587: function(e, t, r2) {
  var n2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3);
    var o3 = Object.getOwnPropertyDescriptor(t2, r3);
    o3 && !("get" in o3 ? !t2.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
      return t2[r3];
    } }), Object.defineProperty(e2, n3, o3);
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), o2 = this && this.__setModuleDefault || (Object.create ? function(e2, t2) {
    Object.defineProperty(e2, "default", { enumerable: true, value: t2 });
  } : function(e2, t2) {
    e2.default = t2;
  }), i2 = this && this.__importStar || function(e2) {
    if (e2 && e2.__esModule) return e2;
    var t2 = {};
    if (null != e2) for (var r3 in e2) "default" !== r3 && Object.prototype.hasOwnProperty.call(e2, r3) && n2(t2, e2, r3);
    return o2(t2, e2), t2;
  }, a2 = this && this.__values || function(e2) {
    var t2 = "function" == typeof Symbol && Symbol.iterator, r3 = t2 && e2[t2], n3 = 0;
    if (r3) return r3.call(e2);
    if (e2 && "number" == typeof e2.length) return { next: function() {
      return e2 && n3 >= e2.length && (e2 = void 0), { value: e2 && e2[n3++], done: !e2 };
    } };
    throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.ENCRYPTION_OFF = t.ENCRYPTION_ON = t.equals = t.validateQueryAndParameters = t.toNumber = t.assertValidDate = t.assertNumberOrInteger = t.assertNumber = t.assertString = t.assertObject = t.isString = t.isObject = t.isEmptyObjectOrNull = void 0;
  var u2 = i2(r2(3371)), s2 = r2(4027);
  function c2(e2) {
    return "object" == typeof e2 && !Array.isArray(e2) && null !== e2;
  }
  function l2(e2, t2) {
    if (!f2(e2)) throw new TypeError((0, s2.stringify)(t2) + " expected to be string but was: " + (0, s2.stringify)(e2));
    return e2;
  }
  function f2(e2) {
    return "[object String]" === Object.prototype.toString.call(e2);
  }
  t.ENCRYPTION_ON = "ENCRYPTION_ON", t.ENCRYPTION_OFF = "ENCRYPTION_OFF", t.isEmptyObjectOrNull = function(e2) {
    if (null === e2) return true;
    if (!c2(e2)) return false;
    for (var t2 in e2) if (void 0 !== e2[t2]) return false;
    return true;
  }, t.isObject = c2, t.validateQueryAndParameters = function(e2, t2, r3) {
    var n3, o3, i3 = "", a3 = null != t2 ? t2 : {}, u3 = null !== (n3 = null == r3 ? void 0 : r3.skipAsserts) && void 0 !== n3 && n3;
    return "string" == typeof e2 ? i3 = e2 : e2 instanceof String ? i3 = e2.toString() : "object" == typeof e2 && null != e2.text && (i3 = e2.text, a3 = null !== (o3 = e2.parameters) && void 0 !== o3 ? o3 : {}), u3 || (function(e3) {
      if (l2(e3, "Cypher query"), 0 === e3.trim().length) throw new TypeError("Cypher query is expected to be a non-empty string.");
    }(i3), function(e3) {
      if (!c2(e3)) {
        var t3 = null != e3.constructor ? " " + e3.constructor.name : "";
        throw new TypeError("Query parameters are expected to either be undefined/null or an object, given:".concat(t3, " ").concat(JSON.stringify(e3)));
      }
    }(a3)), { validatedQuery: i3, params: a3 };
  }, t.assertObject = function(e2, t2) {
    if (!c2(e2)) throw new TypeError(t2 + " expected to be an object but was: " + (0, s2.stringify)(e2));
    return e2;
  }, t.assertString = l2, t.assertNumber = function(e2, t2) {
    if ("number" != typeof e2) throw new TypeError(t2 + " expected to be a number but was: " + (0, s2.stringify)(e2));
    return e2;
  }, t.assertNumberOrInteger = function(e2, t2) {
    if ("number" != typeof e2 && "bigint" != typeof e2 && !(0, u2.isInt)(e2)) throw new TypeError(t2 + " expected to be either a number or an Integer object but was: " + (0, s2.stringify)(e2));
    return e2;
  }, t.assertValidDate = function(e2, t2) {
    if ("[object Date]" !== Object.prototype.toString.call(e2)) throw new TypeError(t2 + " expected to be a standard JavaScript Date but was: " + (0, s2.stringify)(e2));
    if (Number.isNaN(e2.getTime())) throw new TypeError(t2 + " expected to be valid JavaScript Date but its time was NaN: " + (0, s2.stringify)(e2));
    return e2;
  }, t.isString = f2, t.equals = function e2(t2, r3) {
    var n3, o3;
    if (t2 === r3) return true;
    if (null === t2 || null === r3) return false;
    if ("object" == typeof t2 && "object" == typeof r3) {
      var i3 = Object.keys(t2), u3 = Object.keys(r3);
      if (i3.length !== u3.length) return false;
      try {
        for (var s3 = a2(i3), c3 = s3.next(); !c3.done; c3 = s3.next()) {
          var l3 = c3.value;
          if (!e2(t2[l3], r3[l3])) return false;
        }
      } catch (e3) {
        n3 = { error: e3 };
      } finally {
        try {
          c3 && !c3.done && (o3 = s3.return) && o3.call(s3);
        } finally {
          if (n3) throw n3.error;
        }
      }
      return true;
    }
    return false;
  }, t.toNumber = function(e2) {
    return e2 instanceof u2.default ? e2.toNumber() : "bigint" == typeof e2 ? (0, u2.int)(e2).toNumber() : e2;
  };
}, 6625: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.combineAll = void 0;
  var n2 = r2(6728);
  t.combineAll = n2.combineLatestAll;
}, 6637: function(e, t, r2) {
  var n2 = this && this.__values || function(e2) {
    var t2 = "function" == typeof Symbol && Symbol.iterator, r3 = t2 && e2[t2], n3 = 0;
    if (r3) return r3.call(e2);
    if (e2 && "number" == typeof e2.length) return { next: function() {
      return e2 && n3 >= e2.length && (e2 = void 0), { value: e2 && e2[n3++], done: !e2 };
    } };
    throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.windowToggle = void 0;
  var o2 = r2(2483), i2 = r2(8014), a2 = r2(7843), u2 = r2(9445), s2 = r2(3111), c2 = r2(1342), l2 = r2(7479);
  t.windowToggle = function(e2, t2) {
    return a2.operate(function(r3, a3) {
      var f2 = [], h2 = function(e3) {
        for (; 0 < f2.length; ) f2.shift().error(e3);
        a3.error(e3);
      };
      u2.innerFrom(e2).subscribe(s2.createOperatorSubscriber(a3, function(e3) {
        var r4 = new o2.Subject();
        f2.push(r4);
        var n3, d2 = new i2.Subscription();
        try {
          n3 = u2.innerFrom(t2(e3));
        } catch (e4) {
          return void h2(e4);
        }
        a3.next(r4.asObservable()), d2.add(n3.subscribe(s2.createOperatorSubscriber(a3, function() {
          l2.arrRemove(f2, r4), r4.complete(), d2.unsubscribe();
        }, c2.noop, h2)));
      }, c2.noop)), r3.subscribe(s2.createOperatorSubscriber(a3, function(e3) {
        var t3, r4, o3 = f2.slice();
        try {
          for (var i3 = n2(o3), a4 = i3.next(); !a4.done; a4 = i3.next()) a4.value.next(e3);
        } catch (e4) {
          t3 = { error: e4 };
        } finally {
          try {
            a4 && !a4.done && (r4 = i3.return) && r4.call(i3);
          } finally {
            if (t3) throw t3.error;
          }
        }
      }, function() {
        for (; 0 < f2.length; ) f2.shift().complete();
        a3.complete();
      }, h2, function() {
        for (; 0 < f2.length; ) f2.shift().unsubscribe();
      }));
    });
  };
}, 6640: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.identity = void 0, t.identity = function(e2) {
    return e2;
  };
}, 6661: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var o2 = r2(9305), i2 = r2(7168), a2 = r2(3321), u2 = o2.error.PROTOCOL_ERROR;
  t.default = { createNodeTransformer: function() {
    return new a2.TypeTransformer({ signature: 78, isTypeInstance: function(e2) {
      return e2 instanceof o2.Node;
    }, toStructure: function(e2) {
      throw (0, o2.newError)("It is not allowed to pass nodes in query parameters, given: ".concat(e2), u2);
    }, fromStructure: function(e2) {
      i2.structure.verifyStructSize("Node", 3, e2.size);
      var t2 = n2(e2.fields, 3), r3 = t2[0], a3 = t2[1], u3 = t2[2];
      return new o2.Node(r3, a3, u3);
    } });
  }, createRelationshipTransformer: function() {
    return new a2.TypeTransformer({ signature: 82, isTypeInstance: function(e2) {
      return e2 instanceof o2.Relationship;
    }, toStructure: function(e2) {
      throw (0, o2.newError)("It is not allowed to pass relationships in query parameters, given: ".concat(e2), u2);
    }, fromStructure: function(e2) {
      i2.structure.verifyStructSize("Relationship", 5, e2.size);
      var t2 = n2(e2.fields, 5), r3 = t2[0], a3 = t2[1], u3 = t2[2], s2 = t2[3], c2 = t2[4];
      return new o2.Relationship(r3, a3, u3, s2, c2);
    } });
  }, createUnboundRelationshipTransformer: function() {
    return new a2.TypeTransformer({ signature: 114, isTypeInstance: function(e2) {
      return e2 instanceof o2.UnboundRelationship;
    }, toStructure: function(e2) {
      throw (0, o2.newError)("It is not allowed to pass unbound relationships in query parameters, given: ".concat(e2), u2);
    }, fromStructure: function(e2) {
      i2.structure.verifyStructSize("UnboundRelationship", 3, e2.size);
      var t2 = n2(e2.fields, 3), r3 = t2[0], a3 = t2[1], u3 = t2[2];
      return new o2.UnboundRelationship(r3, a3, u3);
    } });
  }, createPathTransformer: function() {
    return new a2.TypeTransformer({ signature: 80, isTypeInstance: function(e2) {
      return e2 instanceof o2.Path;
    }, toStructure: function(e2) {
      throw (0, o2.newError)("It is not allowed to pass paths in query parameters, given: ".concat(e2), u2);
    }, fromStructure: function(e2) {
      i2.structure.verifyStructSize("Path", 3, e2.size);
      for (var t2 = n2(e2.fields, 3), r3 = t2[0], a3 = t2[1], u3 = t2[2], s2 = [], c2 = r3[0], l2 = 0; l2 < u3.length; l2 += 2) {
        var f2 = r3[u3[l2 + 1]], h2 = (0, o2.toNumber)(u3[l2]), d2 = void 0;
        h2 > 0 ? (d2 = a3[h2 - 1]) instanceof o2.UnboundRelationship && (a3[h2 - 1] = d2 = d2.bindTo(c2, f2)) : (d2 = a3[-h2 - 1]) instanceof o2.UnboundRelationship && (a3[-h2 - 1] = d2 = d2.bindTo(f2, c2)), s2.push(new o2.PathSegment(c2, d2, f2)), c2 = f2;
      }
      return new o2.Path(r3[0], r3[r3.length - 1], s2);
    } });
  } };
}, 6672: function(e, t, r2) {
  var n2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3);
    var o3 = Object.getOwnPropertyDescriptor(t2, r3);
    o3 && !("get" in o3 ? !t2.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
      return t2[r3];
    } }), Object.defineProperty(e2, n3, o3);
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), o2 = this && this.__setModuleDefault || (Object.create ? function(e2, t2) {
    Object.defineProperty(e2, "default", { enumerable: true, value: t2 });
  } : function(e2, t2) {
    e2.default = t2;
  }), i2 = this && this.__importStar || function(e2) {
    if (e2 && e2.__esModule) return e2;
    var t2 = {};
    if (null != e2) for (var r3 in e2) "default" !== r3 && Object.prototype.hasOwnProperty.call(e2, r3) && n2(t2, e2, r3);
    return o2(t2, e2), t2;
  }, a2 = this && this.__exportStar || function(e2, t2) {
    for (var r3 in e2) "default" === r3 || Object.prototype.hasOwnProperty.call(t2, r3) || n2(t2, e2, r3);
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.packstream = t.channel = t.buf = t.bolt = t.loadBalancing = void 0, t.loadBalancing = i2(r2(4455)), t.bolt = i2(r2(7666)), t.buf = i2(r2(7174)), t.channel = i2(r2(7452)), t.packstream = i2(r2(7168)), a2(r2(9689), t);
}, 6702: function(e, t) {
  var r2 = this && this.__values || function(e2) {
    var t2 = "function" == typeof Symbol && Symbol.iterator, r3 = t2 && e2[t2], n2 = 0;
    if (r3) return r3.call(e2);
    if (e2 && "number" == typeof e2.length) return { next: function() {
      return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
    } };
    throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.equals = void 0, t.equals = function(e2, t2) {
    var n2, o2;
    if (e2 === t2) return true;
    if (null === e2 || null === t2) return false;
    if ("object" == typeof e2 && "object" == typeof t2) {
      var i2 = Object.keys(e2), a2 = Object.keys(t2);
      if (i2.length !== a2.length) return false;
      try {
        for (var u2 = r2(i2), s2 = u2.next(); !s2.done; s2 = u2.next()) {
          var c2 = s2.value;
          if (e2[c2] !== t2[c2]) return false;
        }
      } catch (e3) {
        n2 = { error: e3 };
      } finally {
        try {
          s2 && !s2.done && (o2 = u2.return) && o2.call(u2);
        } finally {
          if (n2) throw n2.error;
        }
      }
      return true;
    }
    return false;
  };
}, 6728: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.combineLatestAll = void 0;
  var n2 = r2(3247), o2 = r2(3638);
  t.combineLatestAll = function(e2) {
    return o2.joinAllInternals(n2.combineLatest, e2);
  };
}, 6746: function(e, t, r2) {
  var n2 = this && this.__values || function(e2) {
    var t2 = "function" == typeof Symbol && Symbol.iterator, r3 = t2 && e2[t2], n3 = 0;
    if (r3) return r3.call(e2);
    if (e2 && "number" == typeof e2.length) return { next: function() {
      return e2 && n3 >= e2.length && (e2 = void 0), { value: e2 && e2[n3++], done: !e2 };
    } };
    throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.windowCount = void 0;
  var o2 = r2(2483), i2 = r2(7843), a2 = r2(3111);
  t.windowCount = function(e2, t2) {
    void 0 === t2 && (t2 = 0);
    var r3 = t2 > 0 ? t2 : e2;
    return i2.operate(function(t3, i3) {
      var u2 = [new o2.Subject()], s2 = 0;
      i3.next(u2[0].asObservable()), t3.subscribe(a2.createOperatorSubscriber(i3, function(t4) {
        var a3, c2;
        try {
          for (var l2 = n2(u2), f2 = l2.next(); !f2.done; f2 = l2.next()) f2.value.next(t4);
        } catch (e3) {
          a3 = { error: e3 };
        } finally {
          try {
            f2 && !f2.done && (c2 = l2.return) && c2.call(l2);
          } finally {
            if (a3) throw a3.error;
          }
        }
        var h2 = s2 - e2 + 1;
        if (h2 >= 0 && h2 % r3 === 0 && u2.shift().complete(), ++s2 % r3 === 0) {
          var d2 = new o2.Subject();
          u2.push(d2), i3.next(d2.asObservable());
        }
      }, function() {
        for (; u2.length > 0; ) u2.shift().complete();
        i3.complete();
      }, function(e3) {
        for (; u2.length > 0; ) u2.shift().error(e3);
        i3.error(e3);
      }, function() {
        u2 = null;
      }));
    });
  };
}, 6755: function(e, t) {
  var r2 = this && this.__awaiter || function(e2, t2, r3, n3) {
    return new (r3 || (r3 = Promise))(function(o3, i3) {
      function a3(e3) {
        try {
          s3(n3.next(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function u3(e3) {
        try {
          s3(n3.throw(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function s3(e3) {
        var t3;
        e3.done ? o3(e3.value) : (t3 = e3.value, t3 instanceof r3 ? t3 : new r3(function(e4) {
          e4(t3);
        })).then(a3, u3);
      }
      s3((n3 = n3.apply(e2, t2 || [])).next());
    });
  }, n2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u3(0), throw: u3(1), return: u3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u3(u4) {
      return function(s3) {
        return function(u5) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; i3 && (i3 = 0, u5[0] && (a3 = 0)), a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & u5[0] ? n3.return : u5[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, u5[1])).done) return o3;
            switch (n3 = 0, o3 && (u5 = [2 & u5[0], o3.value]), u5[0]) {
              case 0:
              case 1:
                o3 = u5;
                break;
              case 4:
                return a3.label++, { value: u5[1], done: false };
              case 5:
                a3.label++, n3 = u5[1], u5 = [0];
                continue;
              case 7:
                u5 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== u5[0] && 2 !== u5[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === u5[0] && (!o3 || u5[1] > o3[0] && u5[1] < o3[3])) {
                  a3.label = u5[1];
                  break;
                }
                if (6 === u5[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = u5;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(u5);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            u5 = t2.call(e2, a3);
          } catch (e3) {
            u5 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & u5[0]) throw u5[1];
          return { value: u5[0] ? u5[1] : void 0, done: true };
        }([u4, s3]);
      };
    }
  }, o2 = this && this.__values || function(e2) {
    var t2 = "function" == typeof Symbol && Symbol.iterator, r3 = t2 && e2[t2], n3 = 0;
    if (r3) return r3.call(e2);
    if (e2 && "number" == typeof e2.length) return { next: function() {
      return e2 && n3 >= e2.length && (e2 = void 0), { value: e2 && e2[n3++], done: !e2 };
    } };
    throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }, i2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, a2 = this && this.__spreadArray || function(e2, t2, r3) {
    if (r3 || 2 === arguments.length) for (var n3, o3 = 0, i3 = t2.length; o3 < i3; o3++) !n3 && o3 in t2 || (n3 || (n3 = Array.prototype.slice.call(t2, 0, o3)), n3[o3] = t2[o3]);
    return e2.concat(n3 || Array.prototype.slice.call(t2));
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.bookmarkManager = void 0;
  var u2 = function() {
    function e2() {
      throw new Error("Not implemented");
    }
    return e2.prototype.updateBookmarks = function(e3, t2) {
      return r2(this, void 0, void 0, function() {
        return n2(this, function(e4) {
          throw new Error("Not implemented");
        });
      });
    }, e2.prototype.getBookmarks = function() {
      return r2(this, void 0, void 0, function() {
        return n2(this, function(e3) {
          throw new Error("Not implemented");
        });
      });
    }, e2;
  }();
  t.default = u2, t.bookmarkManager = function(e2) {
    void 0 === e2 && (e2 = {});
    var t2 = new Set(e2.initialBookmarks);
    return new s2(t2, e2.bookmarksSupplier, e2.bookmarksConsumer);
  };
  var s2 = function() {
    function e2(e3, t2, r3) {
      this._bookmarks = e3, this._bookmarksSupplier = t2, this._bookmarksConsumer = r3;
    }
    return e2.prototype.updateBookmarks = function(e3, t2) {
      return r2(this, void 0, void 0, function() {
        var r3, u3, s3, c2, l2, f2, h2, d2, p3, v3;
        return n2(this, function(n3) {
          switch (n3.label) {
            case 0:
              r3 = this._bookmarks;
              try {
                for (u3 = o2(e3), s3 = u3.next(); !s3.done; s3 = u3.next()) f2 = s3.value, r3.delete(f2);
              } catch (e4) {
                h2 = { error: e4 };
              } finally {
                try {
                  s3 && !s3.done && (d2 = u3.return) && d2.call(u3);
                } finally {
                  if (h2) throw h2.error;
                }
              }
              try {
                for (c2 = o2(t2), l2 = c2.next(); !l2.done; l2 = c2.next()) f2 = l2.value, r3.add(f2);
              } catch (e4) {
                p3 = { error: e4 };
              } finally {
                try {
                  l2 && !l2.done && (v3 = c2.return) && v3.call(c2);
                } finally {
                  if (p3) throw p3.error;
                }
              }
              return "function" != typeof this._bookmarksConsumer ? [3, 2] : [4, this._bookmarksConsumer(a2([], i2(r3), false))];
            case 1:
              n3.sent(), n3.label = 2;
            case 2:
              return [2];
          }
        });
      });
    }, e2.prototype.getBookmarks = function() {
      var e3;
      return r2(this, void 0, void 0, function() {
        var t2, r3, u3, s3, c2, l2, f2;
        return n2(this, function(n3) {
          switch (n3.label) {
            case 0:
              return t2 = new Set(this._bookmarks), "function" != typeof this._bookmarksSupplier ? [3, 2] : [4, this._bookmarksSupplier()];
            case 1:
              r3 = null !== (e3 = n3.sent()) && void 0 !== e3 ? e3 : [];
              try {
                for (u3 = o2(r3), s3 = u3.next(); !s3.done; s3 = u3.next()) c2 = s3.value, t2.add(c2);
              } catch (e4) {
                l2 = { error: e4 };
              } finally {
                try {
                  s3 && !s3.done && (f2 = u3.return) && f2.call(u3);
                } finally {
                  if (l2) throw l2.error;
                }
              }
              n3.label = 2;
            case 2:
              return [2, a2([], i2(t2), false)];
          }
        });
      });
    }, e2;
  }();
}, 6781: function(e, t, r2) {
  var n2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3);
    var o3 = Object.getOwnPropertyDescriptor(t2, r3);
    o3 && !("get" in o3 ? !t2.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
      return t2[r3];
    } }), Object.defineProperty(e2, n3, o3);
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), o2 = this && this.__setModuleDefault || (Object.create ? function(e2, t2) {
    Object.defineProperty(e2, "default", { enumerable: true, value: t2 });
  } : function(e2, t2) {
    e2.default = t2;
  }), i2 = this && this.__importStar || function(e2) {
    if (e2 && e2.__esModule) return e2;
    var t2 = {};
    if (null != e2) for (var r3 in e2) "default" !== r3 && Object.prototype.hasOwnProperty.call(e2, r3) && n2(t2, e2, r3);
    return o2(t2, e2), t2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.object = t.functional = void 0, t.functional = i2(r2(6492)), t.object = i2(r2(6702));
}, 6804: (e) => {
  e.exports = function(e2, o2) {
    Array.isArray(o2) || (o2 = [o2]);
    var i2 = function(e3) {
      for (var t2 = -1, r3 = 0; r3 < e3.length; r3++) {
        var o3 = e3[r3];
        if ("preprocessor" === o3.type) /^#(extension|version)/.test(o3.data) && (t2 = Math.max(t2, r3));
        else if ("keyword" === o3.type && "precision" === o3.data) {
          var i3 = n2(e3, r3);
          if (-1 === i3) throw new Error("precision statement not followed by any semicolons!");
          t2 = Math.max(t2, i3);
        }
      }
      return t2 + 1;
    }(e2), a2 = i2 > 0 ? e2[i2 - 1] : null;
    a2 && r2.test(a2.data) && e2.splice(i2++, 0, t), e2.splice.apply(e2, [i2, 0].concat(o2));
    var u2 = i2 + o2.length;
    return e2[u2] && /[^\r\n]$/.test(e2[u2].data) && e2.splice(u2, 0, t), e2;
  };
  var t = { data: "\n", type: "whitespace" }, r2 = /[^\r\n]$/;
  function n2(e2, t2) {
    for (var r3 = t2; r3 < e2.length; r3++) if ("operator" === e2[r3].type && ";" === e2[r3].data) return r3;
    return -1;
  }
}, 6824: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.fromSubscribable = void 0;
  var n2 = r2(4662);
  t.fromSubscribable = function(e2) {
    return new n2.Observable(function(t2) {
      return e2.subscribe(t2);
    });
  };
}, 6842: function(e, t, r2) {
  var n2 = this && this.__awaiter || function(e2, t2, r3, n3) {
    return new (r3 || (r3 = Promise))(function(o3, i3) {
      function a3(e3) {
        try {
          s3(n3.next(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function u3(e3) {
        try {
          s3(n3.throw(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function s3(e3) {
        var t3;
        e3.done ? o3(e3.value) : (t3 = e3.value, t3 instanceof r3 ? t3 : new r3(function(e4) {
          e4(t3);
        })).then(a3, u3);
      }
      s3((n3 = n3.apply(e2, t2 || [])).next());
    });
  }, o2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u3(0), throw: u3(1), return: u3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u3(u4) {
      return function(s3) {
        return function(u5) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; i3 && (i3 = 0, u5[0] && (a3 = 0)), a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & u5[0] ? n3.return : u5[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, u5[1])).done) return o3;
            switch (n3 = 0, o3 && (u5 = [2 & u5[0], o3.value]), u5[0]) {
              case 0:
              case 1:
                o3 = u5;
                break;
              case 4:
                return a3.label++, { value: u5[1], done: false };
              case 5:
                a3.label++, n3 = u5[1], u5 = [0];
                continue;
              case 7:
                u5 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== u5[0] && 2 !== u5[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === u5[0] && (!o3 || u5[1] > o3[0] && u5[1] < o3[3])) {
                  a3.label = u5[1];
                  break;
                }
                if (6 === u5[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = u5;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(u5);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            u5 = t2.call(e2, a3);
          } catch (e3) {
            u5 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & u5[0]) throw u5[1];
          return { value: u5[0] ? u5[1] : void 0, done: true };
        }([u4, s3]);
      };
    }
  }, i2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var a2 = i2(r2(7589)), u2 = r2(9691), s2 = r2(4883), c2 = function() {
    function e2(e3) {
      var t2 = e3.create, r3 = void 0 === t2 ? function(e4, t3, r4) {
        return n2(w2, void 0, void 0, function() {
          return o2(this, function(e5) {
            switch (e5.label) {
              case 0:
                return [4, Promise.reject(new Error("Not implemented"))];
              case 1:
                return [2, e5.sent()];
            }
          });
        });
      } : t2, i3 = e3.destroy, u3 = void 0 === i3 ? function(e4) {
        return n2(w2, void 0, void 0, function() {
          return o2(this, function(e5) {
            switch (e5.label) {
              case 0:
                return [4, Promise.resolve()];
              case 1:
                return [2, e5.sent()];
            }
          });
        });
      } : i3, c3 = e3.validateOnAcquire, l3 = void 0 === c3 ? function(e4, t3) {
        return true;
      } : c3, f3 = e3.validateOnRelease, h3 = void 0 === f3 ? function(e4) {
        return true;
      } : f3, d3 = e3.installIdleObserver, p3 = void 0 === d3 ? function(e4, t3) {
      } : d3, v3 = e3.removeIdleObserver, y3 = void 0 === v3 ? function(e4) {
      } : v3, b2 = e3.config, m2 = void 0 === b2 ? a2.default.defaultConfig() : b2, g2 = e3.log, _2 = void 0 === g2 ? s2.Logger.noOp() : g2, w2 = this;
      this._create = r3, this._destroy = u3, this._validateOnAcquire = l3, this._validateOnRelease = h3, this._installIdleObserver = p3, this._removeIdleObserver = y3, this._maxSize = m2.maxSize, this._acquisitionTimeout = m2.acquisitionTimeout, this._pools = {}, this._pendingCreates = {}, this._acquireRequests = {}, this._activeResourceCounts = {}, this._release = this._release.bind(this), this._log = _2, this._closed = false;
    }
    return e2.prototype.acquire = function(e3, t2, r3) {
      return n2(this, void 0, void 0, function() {
        var n3, i3, a3 = this;
        return o2(this, function(o3) {
          switch (o3.label) {
            case 0:
              return n3 = t2.asKey(), null == (i3 = this._acquireRequests)[n3] && (i3[n3] = []), [4, new Promise(function(o4, s3) {
                var c3 = setTimeout(function() {
                  var e4 = i3[n3];
                  if (null != e4 && (i3[n3] = e4.filter(function(e5) {
                    return e5 !== l3;
                  })), l3.isCompleted()) ;
                  else {
                    var r4 = a3.activeResourceCount(t2), o5 = a3.has(t2) ? a3._pools[n3].length : 0;
                    l3.reject((0, u2.newError)("Connection acquisition timed out in ".concat(a3._acquisitionTimeout, " ms. Pool status: Active conn count = ").concat(r4, ", Idle conn count = ").concat(o5, ".")));
                  }
                }, a3._acquisitionTimeout);
                "object" == typeof c3 && c3.unref();
                var l3 = new h2(n3, e3, r3, o4, s3, c3, a3._log);
                i3[n3].push(l3), a3._processPendingAcquireRequests(t2);
              })];
            case 1:
              return [2, o3.sent()];
          }
        });
      });
    }, e2.prototype.purge = function(e3) {
      return n2(this, void 0, void 0, function() {
        return o2(this, function(t2) {
          switch (t2.label) {
            case 0:
              return [4, this._purgeKey(e3.asKey())];
            case 1:
              return [2, t2.sent()];
          }
        });
      });
    }, e2.prototype.apply = function(e3, t2) {
      var r3 = e3.asKey();
      r3 in this._pools && this._pools[r3].apply(t2);
    }, e2.prototype.close = function() {
      return n2(this, void 0, void 0, function() {
        var e3 = this;
        return o2(this, function(t2) {
          switch (t2.label) {
            case 0:
              return this._closed = true, [4, Promise.all(Object.keys(this._pools).map(function(t3) {
                return n2(e3, void 0, void 0, function() {
                  return o2(this, function(e4) {
                    switch (e4.label) {
                      case 0:
                        return [4, this._purgeKey(t3)];
                      case 1:
                        return [2, e4.sent()];
                    }
                  });
                });
              })).then()];
            case 1:
              return [2, t2.sent()];
          }
        });
      });
    }, e2.prototype.keepAll = function(e3) {
      return n2(this, void 0, void 0, function() {
        var t2, r3, i3, a3 = this;
        return o2(this, function(u3) {
          switch (u3.label) {
            case 0:
              return t2 = e3.map(function(e4) {
                return e4.asKey();
              }), r3 = Object.keys(this._pools), i3 = r3.filter(function(e4) {
                return !t2.includes(e4);
              }), [4, Promise.all(i3.map(function(e4) {
                return n2(a3, void 0, void 0, function() {
                  return o2(this, function(t3) {
                    switch (t3.label) {
                      case 0:
                        return [4, this._purgeKey(e4)];
                      case 1:
                        return [2, t3.sent()];
                    }
                  });
                });
              })).then()];
            case 1:
              return [2, u3.sent()];
          }
        });
      });
    }, e2.prototype.has = function(e3) {
      return e3.asKey() in this._pools;
    }, e2.prototype.activeResourceCount = function(e3) {
      var t2;
      return null !== (t2 = this._activeResourceCounts[e3.asKey()]) && void 0 !== t2 ? t2 : 0;
    }, e2.prototype._getOrInitializePoolFor = function(e3) {
      var t2 = this._pools[e3];
      return null == t2 && (t2 = new d2(), this._pools[e3] = t2, this._pendingCreates[e3] = 0), t2;
    }, e2.prototype._acquire = function(e3, t2, r3) {
      return n2(this, void 0, void 0, function() {
        var i3, a3, s3, c3, h3, d3, p3, v3 = this;
        return o2(this, function(y3) {
          switch (y3.label) {
            case 0:
              if (this._closed) throw (0, u2.newError)("Pool is closed, it is no more able to serve requests.");
              if (i3 = t2.asKey(), a3 = this._getOrInitializePoolFor(i3), r3) return [3, 10];
              y3.label = 1;
            case 1:
              if (!(a3.length > 0)) return [3, 10];
              if (null == (s3 = a3.pop())) return [3, 1];
              l2(i3, this._activeResourceCounts), null != this._removeIdleObserver && this._removeIdleObserver(s3), c3 = false, y3.label = 2;
            case 2:
              return y3.trys.push([2, 4, , 6]), [4, this._validateOnAcquire(e3, s3)];
            case 3:
              return c3 = y3.sent(), [3, 6];
            case 4:
              return h3 = y3.sent(), f2(i3, this._activeResourceCounts), a3.removeInUse(s3), [4, this._destroy(s3)];
            case 5:
              throw y3.sent(), h3;
            case 6:
              return c3 ? (this._log.isDebugEnabled() && this._log.debug("".concat(s3, " acquired from the pool ").concat(i3)), [2, { resource: s3, pool: a3 }]) : [3, 7];
            case 7:
              return f2(i3, this._activeResourceCounts), a3.removeInUse(s3), [4, this._destroy(s3)];
            case 8:
              y3.sent(), y3.label = 9;
            case 9:
              return [3, 1];
            case 10:
              if (this._maxSize > 0 && this.activeResourceCount(t2) + this._pendingCreates[i3] >= this._maxSize) return [2, { resource: null, pool: a3 }];
              this._pendingCreates[i3] = this._pendingCreates[i3] + 1, y3.label = 11;
            case 11:
              return y3.trys.push([11, , 15, 16]), this.activeResourceCount(t2) + a3.length >= this._maxSize && r3 ? null == (p3 = a3.pop()) ? [3, 13] : (null != this._removeIdleObserver && this._removeIdleObserver(p3), a3.removeInUse(p3), [4, this._destroy(p3)]) : [3, 13];
            case 12:
              y3.sent(), y3.label = 13;
            case 13:
              return [4, this._create(e3, t2, function(e4, t3) {
                return n2(v3, void 0, void 0, function() {
                  return o2(this, function(r4) {
                    switch (r4.label) {
                      case 0:
                        return [4, this._release(e4, t3, a3)];
                      case 1:
                        return [2, r4.sent()];
                    }
                  });
                });
              })];
            case 14:
              return d3 = y3.sent(), a3.pushInUse(d3), l2(i3, this._activeResourceCounts), this._log.isDebugEnabled() && this._log.debug("".concat(d3, " created for the pool ").concat(i3)), [3, 16];
            case 15:
              return this._pendingCreates[i3] = this._pendingCreates[i3] - 1, [7];
            case 16:
              return [2, { resource: d3, pool: a3 }];
          }
        });
      });
    }, e2.prototype._release = function(e3, t2, r3) {
      return n2(this, void 0, void 0, function() {
        var n3, i3 = this;
        return o2(this, function(o3) {
          switch (o3.label) {
            case 0:
              n3 = e3.asKey(), o3.label = 1;
            case 1:
              return o3.trys.push([1, , 9, 10]), r3.isActive() ? [4, this._validateOnRelease(t2)] : [3, 6];
            case 2:
              return o3.sent() ? [3, 4] : (this._log.isDebugEnabled() && this._log.debug("".concat(t2, " destroyed and can't be released to the pool ").concat(n3, " because it is not functional")), r3.removeInUse(t2), [4, this._destroy(t2)]);
            case 3:
              return o3.sent(), [3, 5];
            case 4:
              null != this._installIdleObserver && this._installIdleObserver(t2, { onError: function(e4) {
                i3._log.debug("Idle connection ".concat(t2, " destroyed because of error: ").concat(e4));
                var r4 = i3._pools[n3];
                null != r4 && (i3._pools[n3] = r4.filter(function(e5) {
                  return e5 !== t2;
                }), r4.removeInUse(t2)), i3._destroy(t2).catch(function() {
                });
              } }), r3.push(t2), this._log.isDebugEnabled() && this._log.debug("".concat(t2, " released to the pool ").concat(n3)), o3.label = 5;
            case 5:
              return [3, 8];
            case 6:
              return this._log.isDebugEnabled() && this._log.debug("".concat(t2, " destroyed and can't be released to the pool ").concat(n3, " because pool has been purged")), r3.removeInUse(t2), [4, this._destroy(t2)];
            case 7:
              o3.sent(), o3.label = 8;
            case 8:
              return [3, 10];
            case 9:
              return f2(n3, this._activeResourceCounts), this._processPendingAcquireRequests(e3), [7];
            case 10:
              return [2];
          }
        });
      });
    }, e2.prototype._purgeKey = function(e3) {
      return n2(this, void 0, void 0, function() {
        var t2, r3, n3;
        return o2(this, function(o3) {
          switch (o3.label) {
            case 0:
              if (t2 = this._pools[e3], r3 = [], null == t2) return [3, 2];
              for (; t2.length > 0; ) null != (n3 = t2.pop()) && (null != this._removeIdleObserver && this._removeIdleObserver(n3), r3.push(this._destroy(n3)));
              return t2.close(), delete this._pools[e3], [4, Promise.all(r3)];
            case 1:
              o3.sent(), o3.label = 2;
            case 2:
              return [2];
          }
        });
      });
    }, e2.prototype._processPendingAcquireRequests = function(e3) {
      var t2 = this, r3 = e3.asKey(), n3 = this._acquireRequests[r3];
      if (null != n3) {
        var o3 = n3.shift();
        null != o3 ? this._acquire(o3.context, e3, o3.requireNew).catch(function(e4) {
          return o3.reject(e4), { resource: null, pool: null };
        }).then(function(n4) {
          var i3 = n4.resource, a3 = n4.pool;
          null != i3 && null != a3 ? o3.isCompleted() ? t2._release(e3, i3, a3).catch(function(e4) {
            t2._log.isDebugEnabled() && t2._log.debug("".concat(i3, " could not be release back to the pool. Cause: ").concat(e4));
          }) : o3.resolve(i3) : o3.isCompleted() || (null == t2._acquireRequests[r3] && (t2._acquireRequests[r3] = []), t2._acquireRequests[r3].unshift(o3));
        }).catch(function(e4) {
          return o3.reject(e4);
        }) : delete this._acquireRequests[r3];
      }
    }, e2;
  }();
  function l2(e2, t2) {
    var r3, n3 = null !== (r3 = t2[e2]) && void 0 !== r3 ? r3 : 0;
    t2[e2] = n3 + 1;
  }
  function f2(e2, t2) {
    var r3, n3 = (null !== (r3 = t2[e2]) && void 0 !== r3 ? r3 : 0) - 1;
    n3 > 0 ? t2[e2] = n3 : delete t2[e2];
  }
  var h2 = function() {
    function e2(e3, t2, r3, n3, o3, i3, a3) {
      this._key = e3, this._context = t2, this._resolve = n3, this._reject = o3, this._timeoutId = i3, this._log = a3, this._completed = false, this._config = null != r3 ? r3 : {};
    }
    return Object.defineProperty(e2.prototype, "context", { get: function() {
      return this._context;
    }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "requireNew", { get: function() {
      var e3;
      return null !== (e3 = this._config.requireNew) && void 0 !== e3 && e3;
    }, enumerable: false, configurable: true }), e2.prototype.isCompleted = function() {
      return this._completed;
    }, e2.prototype.resolve = function(e3) {
      this._completed || (this._completed = true, clearTimeout(this._timeoutId), this._log.isDebugEnabled() && this._log.debug("".concat(e3, " acquired from the pool ").concat(this._key)), this._resolve(e3));
    }, e2.prototype.reject = function(e3) {
      this._completed || (this._completed = true, clearTimeout(this._timeoutId), this._reject(e3));
    }, e2;
  }(), d2 = function() {
    function e2() {
      this._active = true, this._elements = [], this._elementsInUse = /* @__PURE__ */ new Set();
    }
    return e2.prototype.isActive = function() {
      return this._active;
    }, e2.prototype.close = function() {
      this._active = false, this._elements = [], this._elementsInUse = /* @__PURE__ */ new Set();
    }, e2.prototype.filter = function(e3) {
      return this._elements = this._elements.filter(e3), this;
    }, e2.prototype.apply = function(e3) {
      this._elements.forEach(e3), this._elementsInUse.forEach(e3);
    }, Object.defineProperty(e2.prototype, "length", { get: function() {
      return this._elements.length;
    }, enumerable: false, configurable: true }), e2.prototype.pop = function() {
      var e3 = this._elements.pop();
      return null != e3 && this._elementsInUse.add(e3), e3;
    }, e2.prototype.push = function(e3) {
      return this._elementsInUse.delete(e3), this._elements.push(e3);
    }, e2.prototype.pushInUse = function(e3) {
      this._elementsInUse.add(e3);
    }, e2.prototype.removeInUse = function(e3) {
      this._elementsInUse.delete(e3);
    }, e2;
  }();
  t.default = c2;
}, 6872: function(e, t) {
  var r2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true }), t.InternalConfig = t.Config = void 0;
  var n2 = function() {
    this.encrypted = void 0, this.trust = void 0, this.trustedCertificates = [], this.maxConnectionPoolSize = 100, this.maxConnectionLifetime = 36e5, this.connectionAcquisitionTimeout = 6e4, this.maxTransactionRetryTime = 3e4, this.connectionLivenessCheckTimeout = void 0, this.connectionTimeout = 3e4, this.disableLosslessIntegers = false, this.useBigInt = false, this.logging = void 0, this.resolver = void 0, this.notificationFilter = void 0, this.userAgent = void 0, this.telemetryDisabled = false, this.clientCertificate = void 0;
  };
  t.Config = n2;
  var o2 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return r2(t2, e2), t2;
  }(n2);
  t.InternalConfig = o2;
}, 6890: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__assign || function() {
    return o2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, o2.apply(this, arguments);
  }, i2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var a2 = i2(r2(5815)), u2 = i2(r2(3399)), s2 = i2(r2(3321)), c2 = r2(9305).internal.constants.BOLT_PROTOCOL_V5_6, l2 = Object.freeze({ OPERATION: "", OPERATION_CODE: "0", CURRENT_SCHEMA: "/" }), f2 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), Object.defineProperty(t2.prototype, "version", { get: function() {
      return c2;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "transformer", { get: function() {
      var e3 = this;
      return void 0 === this._transformer && (this._transformer = new s2.default(Object.values(u2.default).map(function(t3) {
        return t3(e3._config, e3._log);
      }))), this._transformer;
    }, enumerable: false, configurable: true }), t2.prototype._enrichMetadata = function(e3) {
      return Array.isArray(e3.statuses) && (e3.statuses = e3.statuses.map(function(e4) {
        return o2(o2({}, e4), { diagnostic_record: null !== e4.diagnostic_record ? o2(o2({}, l2), e4.diagnostic_record) : null });
      })), e3;
    }, t2;
  }(a2.default);
  t.default = f2;
}, 6894: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.lastValueFrom = void 0;
  var n2 = r2(2823);
  t.lastValueFrom = function(e2, t2) {
    var r3 = "object" == typeof t2;
    return new Promise(function(o2, i2) {
      var a2, u2 = false;
      e2.subscribe({ next: function(e3) {
        a2 = e3, u2 = true;
      }, error: i2, complete: function() {
        u2 ? o2(a2) : r3 ? o2(t2.defaultValue) : i2(new n2.EmptyError());
      } });
    });
  };
}, 6902: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.flatMap = void 0;
  var n2 = r2(983);
  t.flatMap = n2.mergeMap;
}, 6931: (e) => {
  e.exports = { aliceblue: [240, 248, 255], antiquewhite: [250, 235, 215], aqua: [0, 255, 255], aquamarine: [127, 255, 212], azure: [240, 255, 255], beige: [245, 245, 220], bisque: [255, 228, 196], black: [0, 0, 0], blanchedalmond: [255, 235, 205], blue: [0, 0, 255], blueviolet: [138, 43, 226], brown: [165, 42, 42], burlywood: [222, 184, 135], cadetblue: [95, 158, 160], chartreuse: [127, 255, 0], chocolate: [210, 105, 30], coral: [255, 127, 80], cornflowerblue: [100, 149, 237], cornsilk: [255, 248, 220], crimson: [220, 20, 60], cyan: [0, 255, 255], darkblue: [0, 0, 139], darkcyan: [0, 139, 139], darkgoldenrod: [184, 134, 11], darkgray: [169, 169, 169], darkgreen: [0, 100, 0], darkgrey: [169, 169, 169], darkkhaki: [189, 183, 107], darkmagenta: [139, 0, 139], darkolivegreen: [85, 107, 47], darkorange: [255, 140, 0], darkorchid: [153, 50, 204], darkred: [139, 0, 0], darksalmon: [233, 150, 122], darkseagreen: [143, 188, 143], darkslateblue: [72, 61, 139], darkslategray: [47, 79, 79], darkslategrey: [47, 79, 79], darkturquoise: [0, 206, 209], darkviolet: [148, 0, 211], deeppink: [255, 20, 147], deepskyblue: [0, 191, 255], dimgray: [105, 105, 105], dimgrey: [105, 105, 105], dodgerblue: [30, 144, 255], firebrick: [178, 34, 34], floralwhite: [255, 250, 240], forestgreen: [34, 139, 34], fuchsia: [255, 0, 255], gainsboro: [220, 220, 220], ghostwhite: [248, 248, 255], gold: [255, 215, 0], goldenrod: [218, 165, 32], gray: [128, 128, 128], green: [0, 128, 0], greenyellow: [173, 255, 47], grey: [128, 128, 128], honeydew: [240, 255, 240], hotpink: [255, 105, 180], indianred: [205, 92, 92], indigo: [75, 0, 130], ivory: [255, 255, 240], khaki: [240, 230, 140], lavender: [230, 230, 250], lavenderblush: [255, 240, 245], lawngreen: [124, 252, 0], lemonchiffon: [255, 250, 205], lightblue: [173, 216, 230], lightcoral: [240, 128, 128], lightcyan: [224, 255, 255], lightgoldenrodyellow: [250, 250, 210], lightgray: [211, 211, 211], lightgreen: [144, 238, 144], lightgrey: [211, 211, 211], lightpink: [255, 182, 193], lightsalmon: [255, 160, 122], lightseagreen: [32, 178, 170], lightskyblue: [135, 206, 250], lightslategray: [119, 136, 153], lightslategrey: [119, 136, 153], lightsteelblue: [176, 196, 222], lightyellow: [255, 255, 224], lime: [0, 255, 0], limegreen: [50, 205, 50], linen: [250, 240, 230], magenta: [255, 0, 255], maroon: [128, 0, 0], mediumaquamarine: [102, 205, 170], mediumblue: [0, 0, 205], mediumorchid: [186, 85, 211], mediumpurple: [147, 112, 219], mediumseagreen: [60, 179, 113], mediumslateblue: [123, 104, 238], mediumspringgreen: [0, 250, 154], mediumturquoise: [72, 209, 204], mediumvioletred: [199, 21, 133], midnightblue: [25, 25, 112], mintcream: [245, 255, 250], mistyrose: [255, 228, 225], moccasin: [255, 228, 181], navajowhite: [255, 222, 173], navy: [0, 0, 128], oldlace: [253, 245, 230], olive: [128, 128, 0], olivedrab: [107, 142, 35], orange: [255, 165, 0], orangered: [255, 69, 0], orchid: [218, 112, 214], palegoldenrod: [238, 232, 170], palegreen: [152, 251, 152], paleturquoise: [175, 238, 238], palevioletred: [219, 112, 147], papayawhip: [255, 239, 213], peachpuff: [255, 218, 185], peru: [205, 133, 63], pink: [255, 192, 203], plum: [221, 160, 221], powderblue: [176, 224, 230], purple: [128, 0, 128], rebeccapurple: [102, 51, 153], red: [255, 0, 0], rosybrown: [188, 143, 143], royalblue: [65, 105, 225], saddlebrown: [139, 69, 19], salmon: [250, 128, 114], sandybrown: [244, 164, 96], seagreen: [46, 139, 87], seashell: [255, 245, 238], sienna: [160, 82, 45], silver: [192, 192, 192], skyblue: [135, 206, 235], slateblue: [106, 90, 205], slategray: [112, 128, 144], slategrey: [112, 128, 144], snow: [255, 250, 250], springgreen: [0, 255, 127], steelblue: [70, 130, 180], tan: [210, 180, 140], teal: [0, 128, 128], thistle: [216, 191, 216], tomato: [255, 99, 71], turquoise: [64, 224, 208], violet: [238, 130, 238], wheat: [245, 222, 179], white: [255, 255, 255], whitesmoke: [245, 245, 245], yellow: [255, 255, 0], yellowgreen: [154, 205, 50] };
}, 6985: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.scheduleArray = void 0;
  var n2 = r2(4662);
  t.scheduleArray = function(e2, t2) {
    return new n2.Observable(function(r3) {
      var n3 = 0;
      return t2.schedule(function() {
        n3 === e2.length ? r3.complete() : (r3.next(e2[n3++]), r3.closed || this.schedule());
      });
    });
  };
}, 6995: function(e, t, r2) {
  var n2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3);
    var o3 = Object.getOwnPropertyDescriptor(t2, r3);
    o3 && !("get" in o3 ? !t2.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
      return t2[r3];
    } }), Object.defineProperty(e2, n3, o3);
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), o2 = this && this.__setModuleDefault || (Object.create ? function(e2, t2) {
    Object.defineProperty(e2, "default", { enumerable: true, value: t2 });
  } : function(e2, t2) {
    e2.default = t2;
  }), i2 = this && this.__importStar || function(e2) {
    if (e2 && e2.__esModule) return e2;
    var t2 = {};
    if (null != e2) for (var r3 in e2) "default" !== r3 && Object.prototype.hasOwnProperty.call(e2, r3) && n2(t2, e2, r3);
    return o2(t2, e2), t2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.pool = t.boltAgent = t.objectUtil = t.resolver = t.serverAddress = t.urlUtil = t.logger = t.transactionExecutor = t.txConfig = t.connectionHolder = t.constants = t.bookmarks = t.observer = t.temporalUtil = t.util = void 0;
  var a2 = i2(r2(6587));
  t.util = a2;
  var u2 = i2(r2(5022));
  t.temporalUtil = u2;
  var s2 = i2(r2(2696));
  t.observer = s2;
  var c2 = i2(r2(9730));
  t.bookmarks = c2;
  var l2 = i2(r2(326));
  t.constants = l2;
  var f2 = i2(r2(3618));
  t.connectionHolder = f2;
  var h2 = i2(r2(754));
  t.txConfig = h2;
  var d2 = i2(r2(6189));
  t.transactionExecutor = d2;
  var p3 = i2(r2(4883));
  t.logger = p3;
  var v3 = i2(r2(407));
  t.urlUtil = v3;
  var y3 = i2(r2(7509));
  t.serverAddress = y3;
  var b2 = i2(r2(9470));
  t.resolver = b2;
  var m2 = i2(r2(93));
  t.objectUtil = m2;
  var g2 = i2(r2(3488));
  t.boltAgent = g2;
  var _2 = i2(r2(2906));
  t.pool = _2;
}, 7021: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.SIGNATURES = void 0;
  var n2 = r2(9305), o2 = n2.internal.constants, i2 = o2.ACCESS_MODE_READ, a2 = o2.FETCH_ALL, u2 = n2.internal.util.assertString, s2 = Object.freeze({ INIT: 1, RESET: 15, RUN: 16, PULL_ALL: 63, HELLO: 1, GOODBYE: 2, BEGIN: 17, COMMIT: 18, ROLLBACK: 19, TELEMETRY: 84, ROUTE: 102, LOGON: 106, LOGOFF: 107, DISCARD: 47, PULL: 63 });
  t.SIGNATURES = s2;
  var c2 = function() {
    function e2(e3, t2, r3) {
      this.signature = e3, this.fields = t2, this.toString = r3;
    }
    return e2.init = function(t2, r3) {
      return new e2(1, [t2, r3], function() {
        return "INIT ".concat(t2, " {...}");
      });
    }, e2.run = function(t2, r3) {
      return new e2(16, [t2, r3], function() {
        return "RUN ".concat(t2, " ").concat(n2.json.stringify(r3));
      });
    }, e2.pullAll = function() {
      return p3;
    }, e2.reset = function() {
      return v3;
    }, e2.hello = function(t2, r3, n3, o3) {
      void 0 === n3 && (n3 = null), void 0 === o3 && (o3 = null);
      var i3 = Object.assign({ user_agent: t2 }, r3);
      return n3 && (i3.routing = n3), o3 && (i3.patch_bolt = o3), new e2(1, [i3], function() {
        return "HELLO {user_agent: '".concat(t2, "', ...}");
      });
    }, e2.hello5x1 = function(t2, r3) {
      void 0 === r3 && (r3 = null);
      var n3 = { user_agent: t2 };
      return r3 && (n3.routing = r3), new e2(1, [n3], function() {
        return "HELLO {user_agent: '".concat(t2, "', ...}");
      });
    }, e2.hello5x2 = function(t2, r3, o3) {
      void 0 === r3 && (r3 = null), void 0 === o3 && (o3 = null);
      var i3 = { user_agent: t2 };
      return h2(i3, r3), o3 && (i3.routing = o3), new e2(1, [i3], function() {
        return "HELLO ".concat(n2.json.stringify(i3));
      });
    }, e2.hello5x3 = function(t2, r3, o3, i3) {
      void 0 === o3 && (o3 = null), void 0 === i3 && (i3 = null);
      var a3 = {};
      return t2 && (a3.user_agent = t2), r3 && (a3.bolt_agent = { product: r3.product, platform: r3.platform, language: r3.language, language_details: r3.languageDetails }), h2(a3, o3), i3 && (a3.routing = i3), new e2(1, [a3], function() {
        return "HELLO ".concat(n2.json.stringify(a3));
      });
    }, e2.hello5x5 = function(t2, r3, o3, i3) {
      void 0 === o3 && (o3 = null), void 0 === i3 && (i3 = null);
      var a3 = {};
      return t2 && (a3.user_agent = t2), r3 && (a3.bolt_agent = { product: r3.product, platform: r3.platform, language: r3.language, language_details: r3.languageDetails }), d2(a3, o3), i3 && (a3.routing = i3), new e2(1, [a3], function() {
        return "HELLO ".concat(n2.json.stringify(a3));
      });
    }, e2.logon = function(t2) {
      return new e2(106, [t2], function() {
        return "LOGON { ... }";
      });
    }, e2.logoff = function() {
      return new e2(107, [], function() {
        return "LOGOFF";
      });
    }, e2.begin = function(t2) {
      var r3 = void 0 === t2 ? {} : t2, o3 = l2(r3.bookmarks, r3.txConfig, r3.database, r3.mode, r3.impersonatedUser, r3.notificationFilter);
      return new e2(17, [o3], function() {
        return "BEGIN ".concat(n2.json.stringify(o3));
      });
    }, e2.begin5x5 = function(t2) {
      var r3 = void 0 === t2 ? {} : t2, o3 = l2(r3.bookmarks, r3.txConfig, r3.database, r3.mode, r3.impersonatedUser, r3.notificationFilter, { appendNotificationFilter: d2 });
      return new e2(17, [o3], function() {
        return "BEGIN ".concat(n2.json.stringify(o3));
      });
    }, e2.commit = function() {
      return y3;
    }, e2.rollback = function() {
      return b2;
    }, e2.runWithMetadata = function(t2, r3, o3) {
      var i3 = void 0 === o3 ? {} : o3, a3 = l2(i3.bookmarks, i3.txConfig, i3.database, i3.mode, i3.impersonatedUser, i3.notificationFilter);
      return new e2(16, [t2, r3, a3], function() {
        return "RUN ".concat(t2, " ").concat(n2.json.stringify(r3), " ").concat(n2.json.stringify(a3));
      });
    }, e2.runWithMetadata5x5 = function(t2, r3, o3) {
      var i3 = void 0 === o3 ? {} : o3, a3 = l2(i3.bookmarks, i3.txConfig, i3.database, i3.mode, i3.impersonatedUser, i3.notificationFilter, { appendNotificationFilter: d2 });
      return new e2(16, [t2, r3, a3], function() {
        return "RUN ".concat(t2, " ").concat(n2.json.stringify(r3), " ").concat(n2.json.stringify(a3));
      });
    }, e2.goodbye = function() {
      return m2;
    }, e2.pull = function(t2) {
      var r3 = void 0 === t2 ? {} : t2, o3 = r3.stmtId, i3 = void 0 === o3 ? -1 : o3, u3 = r3.n, s3 = f2(null == i3 ? -1 : i3, (void 0 === u3 ? a2 : u3) || a2);
      return new e2(63, [s3], function() {
        return "PULL ".concat(n2.json.stringify(s3));
      });
    }, e2.discard = function(t2) {
      var r3 = void 0 === t2 ? {} : t2, o3 = r3.stmtId, i3 = void 0 === o3 ? -1 : o3, u3 = r3.n, s3 = f2(null == i3 ? -1 : i3, (void 0 === u3 ? a2 : u3) || a2);
      return new e2(47, [s3], function() {
        return "DISCARD ".concat(n2.json.stringify(s3));
      });
    }, e2.telemetry = function(t2) {
      var r3 = t2.api, o3 = (0, n2.int)(r3);
      return new e2(84, [o3], function() {
        return "TELEMETRY ".concat(o3.toString());
      });
    }, e2.route = function(t2, r3, o3) {
      return void 0 === t2 && (t2 = {}), void 0 === r3 && (r3 = []), void 0 === o3 && (o3 = null), new e2(102, [t2, r3, o3], function() {
        return "ROUTE ".concat(n2.json.stringify(t2), " ").concat(n2.json.stringify(r3), " ").concat(o3);
      });
    }, e2.routeV4x4 = function(t2, r3, o3) {
      void 0 === t2 && (t2 = {}), void 0 === r3 && (r3 = []), void 0 === o3 && (o3 = {});
      var i3 = {};
      return o3.databaseName && (i3.db = o3.databaseName), o3.impersonatedUser && (i3.imp_user = o3.impersonatedUser), new e2(102, [t2, r3, i3], function() {
        return "ROUTE ".concat(n2.json.stringify(t2), " ").concat(n2.json.stringify(r3), " ").concat(n2.json.stringify(i3));
      });
    }, e2;
  }();
  function l2(e2, t2, r3, n3, o3, a3, s3) {
    var c3;
    void 0 === s3 && (s3 = {});
    var l3 = {};
    return e2.isEmpty() || (l3.bookmarks = e2.values()), null !== t2.timeout && (l3.tx_timeout = t2.timeout), t2.metadata && (l3.tx_metadata = t2.metadata), r3 && (l3.db = u2(r3, "database")), o3 && (l3.imp_user = u2(o3, "impersonatedUser")), n3 === i2 && (l3.mode = "r"), (null !== (c3 = s3.appendNotificationFilter) && void 0 !== c3 ? c3 : h2)(l3, a3), l3;
  }
  function f2(e2, t2) {
    var r3 = { n: (0, n2.int)(t2) };
    return -1 !== e2 && (r3.qid = (0, n2.int)(e2)), r3;
  }
  function h2(e2, t2) {
    t2 && (t2.minimumSeverityLevel && (e2.notifications_minimum_severity = t2.minimumSeverityLevel), t2.disabledCategories && (e2.notifications_disabled_categories = t2.disabledCategories), t2.disabledClassifications && (e2.notifications_disabled_categories = t2.disabledClassifications));
  }
  function d2(e2, t2) {
    t2 && (t2.minimumSeverityLevel && (e2.notifications_minimum_severity = t2.minimumSeverityLevel), t2.disabledCategories && (e2.notifications_disabled_classifications = t2.disabledCategories), t2.disabledClassifications && (e2.notifications_disabled_classifications = t2.disabledClassifications));
  }
  t.default = c2;
  var p3 = new c2(63, [], function() {
    return "PULL_ALL";
  }), v3 = new c2(15, [], function() {
    return "RESET";
  }), y3 = new c2(18, [], function() {
    return "COMMIT";
  }), b2 = new c2(19, [], function() {
    return "ROLLBACK";
  }), m2 = new c2(2, [], function() {
    return "GOODBYE";
  });
}, 7041: function(e, t, r2) {
  var n2 = this && this.__awaiter || function(e2, t2, r3, n3) {
    return new (r3 || (r3 = Promise))(function(o3, i3) {
      function a3(e3) {
        try {
          s2(n3.next(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function u2(e3) {
        try {
          s2(n3.throw(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function s2(e3) {
        var t3;
        e3.done ? o3(e3.value) : (t3 = e3.value, t3 instanceof r3 ? t3 : new r3(function(e4) {
          e4(t3);
        })).then(a3, u2);
      }
      s2((n3 = n3.apply(e2, t2 || [])).next());
    });
  }, o2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u2(0), throw: u2(1), return: u2(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u2(u3) {
      return function(s2) {
        return function(u4) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; i3 && (i3 = 0, u4[0] && (a3 = 0)), a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & u4[0] ? n3.return : u4[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, u4[1])).done) return o3;
            switch (n3 = 0, o3 && (u4 = [2 & u4[0], o3.value]), u4[0]) {
              case 0:
              case 1:
                o3 = u4;
                break;
              case 4:
                return a3.label++, { value: u4[1], done: false };
              case 5:
                a3.label++, n3 = u4[1], u4 = [0];
                continue;
              case 7:
                u4 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== u4[0] && 2 !== u4[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === u4[0] && (!o3 || u4[1] > o3[0] && u4[1] < o3[3])) {
                  a3.label = u4[1];
                  break;
                }
                if (6 === u4[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = u4;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(u4);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            u4 = t2.call(e2, a3);
          } catch (e3) {
            u4 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & u4[0]) throw u4[1];
          return { value: u4[0] ? u4[1] : void 0, done: true };
        }([u3, s2]);
      };
    }
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = r2(326), a2 = function() {
    function e2(e3) {
      this._createSession = e3;
    }
    return e2.prototype.execute = function(e3, t2, r3) {
      return n2(this, void 0, void 0, function() {
        var a3, u2, s2 = this;
        return o2(this, function(c2) {
          switch (c2.label) {
            case 0:
              a3 = this._createSession({ database: e3.database, bookmarkManager: e3.bookmarkManager, impersonatedUser: e3.impersonatedUser, auth: e3.auth }), l2 = e3.signal, f2 = "abort", h2 = function() {
                return n2(s2, void 0, void 0, function() {
                  return o2(this, function(e4) {
                    switch (e4.label) {
                      case 0:
                        return [4, a3.close()];
                      case 1:
                        return [2, e4.sent()];
                    }
                  });
                });
              }, "function" == typeof (null == l2 ? void 0 : l2.addEventListener) && l2.addEventListener(f2, h2), u2 = { uninstall: function() {
                "function" == typeof (null == l2 ? void 0 : l2.removeEventListener) && l2.removeEventListener(f2, h2);
              } }, a3._configureTransactionExecutor(true, i2.TELEMETRY_APIS.EXECUTE_QUERY), c2.label = 1;
            case 1:
              return c2.trys.push([1, , 3, 5]), [4, ("READ" === e3.routing ? a3.executeRead.bind(a3) : a3.executeWrite.bind(a3))(function(i3) {
                return n2(s2, void 0, void 0, function() {
                  var n3;
                  return o2(this, function(o3) {
                    switch (o3.label) {
                      case 0:
                        return n3 = i3.run(t2, r3), [4, e3.resultTransformer(n3)];
                      case 1:
                        return [2, o3.sent()];
                    }
                  });
                });
              }, e3.transactionConfig)];
            case 2:
              return [2, c2.sent()];
            case 3:
              return u2.uninstall(), [4, a3.close()];
            case 4:
              return c2.sent(), [7];
            case 5:
              return [2];
          }
          var l2, f2, h2;
        });
      });
    }, e2;
  }();
  t.default = a2;
}, 7045: (e, t, r2) => {
  var n2 = r2(3206);
  e.exports = function(e2, t2) {
    var r3 = n2(t2), o2 = [];
    return (o2 = o2.concat(r3(e2))).concat(r3(null));
  };
}, 7057: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.ArgumentOutOfRangeError = void 0;
  var n2 = r2(5568);
  t.ArgumentOutOfRangeError = n2.createErrorClass(function(e2) {
    return function() {
      e2(this), this.name = "ArgumentOutOfRangeError", this.message = "argument out of range";
    };
  });
}, 7093: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.isPoint = t.Point = void 0;
  var n2 = r2(6587), o2 = "__isPoint__", i2 = function() {
    function e2(e3, t2, r3, o3) {
      this.srid = (0, n2.assertNumberOrInteger)(e3, "SRID"), this.x = (0, n2.assertNumber)(t2, "X coordinate"), this.y = (0, n2.assertNumber)(r3, "Y coordinate"), this.z = null == o3 ? o3 : (0, n2.assertNumber)(o3, "Z coordinate"), Object.freeze(this);
    }
    return e2.prototype.toString = function() {
      return null == this.z || isNaN(this.z) ? "Point{srid=".concat(a2(this.srid), ", x=").concat(a2(this.x), ", y=").concat(a2(this.y), "}") : "Point{srid=".concat(a2(this.srid), ", x=").concat(a2(this.x), ", y=").concat(a2(this.y), ", z=").concat(a2(this.z), "}");
    }, e2;
  }();
  function a2(e2) {
    return Number.isInteger(e2) ? e2.toString() + ".0" : e2.toString();
  }
  t.Point = i2, Object.defineProperty(i2.prototype, o2, { value: true, enumerable: false, configurable: false, writable: false }), t.isPoint = function(e2) {
    return null != e2 && true === e2[o2];
  };
}, 7101: (e) => {
  e.exports = function(e2) {
    return !(!e2 || "string" == typeof e2) && (e2 instanceof Array || Array.isArray(e2) || e2.length >= 0 && (e2.splice instanceof Function || Object.getOwnPropertyDescriptor(e2, e2.length - 1) && "String" !== e2.constructor.name));
  };
}, 7110: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.executeSchedule = void 0, t.executeSchedule = function(e2, t2, r2, n2, o2) {
    void 0 === n2 && (n2 = 0), void 0 === o2 && (o2 = false);
    var i2 = t2.schedule(function() {
      r2(), o2 ? e2.add(this.schedule(null, n2)) : this.unsubscribe();
    }, n2);
    if (e2.add(i2), !o2) return i2;
  };
}, 7168: function(e, t, r2) {
  var n2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3);
    var o3 = Object.getOwnPropertyDescriptor(t2, r3);
    o3 && !("get" in o3 ? !t2.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
      return t2[r3];
    } }), Object.defineProperty(e2, n3, o3);
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), o2 = this && this.__setModuleDefault || (Object.create ? function(e2, t2) {
    Object.defineProperty(e2, "default", { enumerable: true, value: t2 });
  } : function(e2, t2) {
    e2.default = t2;
  }), i2 = this && this.__importStar || function(e2) {
    if (e2 && e2.__esModule) return e2;
    var t2 = {};
    if (null != e2) for (var r3 in e2) "default" !== r3 && Object.prototype.hasOwnProperty.call(e2, r3) && n2(t2, e2, r3);
    return o2(t2, e2), t2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.structure = t.v2 = t.v1 = void 0;
  var a2 = i2(r2(5361));
  t.v1 = a2;
  var u2 = i2(r2(2072));
  t.v2 = u2;
  var s2 = i2(r2(7665));
  t.structure = s2, t.default = u2;
}, 7174: function(e, t, r2) {
  var n2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.BaseBuffer = void 0;
  var o2 = n2(r2(45));
  t.BaseBuffer = o2.default, t.default = o2.default;
}, 7192: (e) => {
  e.exports = ["abs", "acos", "all", "any", "asin", "atan", "ceil", "clamp", "cos", "cross", "dFdx", "dFdy", "degrees", "distance", "dot", "equal", "exp", "exp2", "faceforward", "floor", "fract", "gl_BackColor", "gl_BackLightModelProduct", "gl_BackLightProduct", "gl_BackMaterial", "gl_BackSecondaryColor", "gl_ClipPlane", "gl_ClipVertex", "gl_Color", "gl_DepthRange", "gl_DepthRangeParameters", "gl_EyePlaneQ", "gl_EyePlaneR", "gl_EyePlaneS", "gl_EyePlaneT", "gl_Fog", "gl_FogCoord", "gl_FogFragCoord", "gl_FogParameters", "gl_FragColor", "gl_FragCoord", "gl_FragData", "gl_FragDepth", "gl_FragDepthEXT", "gl_FrontColor", "gl_FrontFacing", "gl_FrontLightModelProduct", "gl_FrontLightProduct", "gl_FrontMaterial", "gl_FrontSecondaryColor", "gl_LightModel", "gl_LightModelParameters", "gl_LightModelProducts", "gl_LightProducts", "gl_LightSource", "gl_LightSourceParameters", "gl_MaterialParameters", "gl_MaxClipPlanes", "gl_MaxCombinedTextureImageUnits", "gl_MaxDrawBuffers", "gl_MaxFragmentUniformComponents", "gl_MaxLights", "gl_MaxTextureCoords", "gl_MaxTextureImageUnits", "gl_MaxTextureUnits", "gl_MaxVaryingFloats", "gl_MaxVertexAttribs", "gl_MaxVertexTextureImageUnits", "gl_MaxVertexUniformComponents", "gl_ModelViewMatrix", "gl_ModelViewMatrixInverse", "gl_ModelViewMatrixInverseTranspose", "gl_ModelViewMatrixTranspose", "gl_ModelViewProjectionMatrix", "gl_ModelViewProjectionMatrixInverse", "gl_ModelViewProjectionMatrixInverseTranspose", "gl_ModelViewProjectionMatrixTranspose", "gl_MultiTexCoord0", "gl_MultiTexCoord1", "gl_MultiTexCoord2", "gl_MultiTexCoord3", "gl_MultiTexCoord4", "gl_MultiTexCoord5", "gl_MultiTexCoord6", "gl_MultiTexCoord7", "gl_Normal", "gl_NormalMatrix", "gl_NormalScale", "gl_ObjectPlaneQ", "gl_ObjectPlaneR", "gl_ObjectPlaneS", "gl_ObjectPlaneT", "gl_Point", "gl_PointCoord", "gl_PointParameters", "gl_PointSize", "gl_Position", "gl_ProjectionMatrix", "gl_ProjectionMatrixInverse", "gl_ProjectionMatrixInverseTranspose", "gl_ProjectionMatrixTranspose", "gl_SecondaryColor", "gl_TexCoord", "gl_TextureEnvColor", "gl_TextureMatrix", "gl_TextureMatrixInverse", "gl_TextureMatrixInverseTranspose", "gl_TextureMatrixTranspose", "gl_Vertex", "greaterThan", "greaterThanEqual", "inversesqrt", "length", "lessThan", "lessThanEqual", "log", "log2", "matrixCompMult", "max", "min", "mix", "mod", "normalize", "not", "notEqual", "pow", "radians", "reflect", "refract", "sign", "sin", "smoothstep", "sqrt", "step", "tan", "texture2D", "texture2DLod", "texture2DProj", "texture2DProjLod", "textureCube", "textureCubeLod", "texture2DLodEXT", "texture2DProjLodEXT", "textureCubeLodEXT", "texture2DGradEXT", "texture2DProjGradEXT", "textureCubeGradEXT"];
}, 7210: function(e, t, r2) {
  var n2 = this && this.__values || function(e2) {
    var t2 = "function" == typeof Symbol && Symbol.iterator, r3 = t2 && e2[t2], n3 = 0;
    if (r3) return r3.call(e2);
    if (e2 && "number" == typeof e2.length) return { next: function() {
      return e2 && n3 >= e2.length && (e2 = void 0), { value: e2 && e2[n3++], done: !e2 };
    } };
    throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.bufferTime = void 0;
  var o2 = r2(8014), i2 = r2(7843), a2 = r2(3111), u2 = r2(7479), s2 = r2(7961), c2 = r2(1107), l2 = r2(7110);
  t.bufferTime = function(e2) {
    for (var t2, r3, f2 = [], h2 = 1; h2 < arguments.length; h2++) f2[h2 - 1] = arguments[h2];
    var d2 = null !== (t2 = c2.popScheduler(f2)) && void 0 !== t2 ? t2 : s2.asyncScheduler, p3 = null !== (r3 = f2[0]) && void 0 !== r3 ? r3 : null, v3 = f2[1] || 1 / 0;
    return i2.operate(function(t3, r4) {
      var i3 = [], s3 = false, c3 = function(e3) {
        var t4 = e3.buffer;
        e3.subs.unsubscribe(), u2.arrRemove(i3, e3), r4.next(t4), s3 && f3();
      }, f3 = function() {
        if (i3) {
          var t4 = new o2.Subscription();
          r4.add(t4);
          var n3 = { buffer: [], subs: t4 };
          i3.push(n3), l2.executeSchedule(t4, d2, function() {
            return c3(n3);
          }, e2);
        }
      };
      null !== p3 && p3 >= 0 ? l2.executeSchedule(r4, d2, f3, p3, true) : s3 = true, f3();
      var h3 = a2.createOperatorSubscriber(r4, function(e3) {
        var t4, r5, o3 = i3.slice();
        try {
          for (var a3 = n2(o3), u3 = a3.next(); !u3.done; u3 = a3.next()) {
            var s4 = u3.value, l3 = s4.buffer;
            l3.push(e3), v3 <= l3.length && c3(s4);
          }
        } catch (e4) {
          t4 = { error: e4 };
        } finally {
          try {
            u3 && !u3.done && (r5 = a3.return) && r5.call(a3);
          } finally {
            if (t4) throw t4.error;
          }
        }
      }, function() {
        for (; null == i3 ? void 0 : i3.length; ) r4.next(i3.shift().buffer);
        null == h3 || h3.unsubscribe(), r4.complete(), r4.unsubscribe();
      }, void 0, function() {
        return i3 = null;
      });
      t3.subscribe(h3);
    });
  };
}, 7220: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.publishBehavior = void 0;
  var n2 = r2(1637), o2 = r2(8918);
  t.publishBehavior = function(e2) {
    return function(t2) {
      var r3 = new n2.BehaviorSubject(e2);
      return new o2.ConnectableObservable(t2, function() {
        return r3;
      });
    };
  };
}, 7245: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.TestTools = t.Immediate = void 0;
  var r2, n2 = 1, o2 = {};
  function i2(e2) {
    return e2 in o2 && (delete o2[e2], true);
  }
  t.Immediate = { setImmediate: function(e2) {
    var t2 = n2++;
    return o2[t2] = true, r2 || (r2 = Promise.resolve()), r2.then(function() {
      return i2(t2) && e2();
    }), t2;
  }, clearImmediate: function(e2) {
    i2(e2);
  } }, t.TestTools = { pending: function() {
    return Object.keys(o2).length;
  } };
}, 7264: function(e, t, r2) {
  var n2 = this && this.__assign || function() {
    return n2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, n2.apply(this, arguments);
  }, o2 = this && this.__awaiter || function(e2, t2, r3, n3) {
    return new (r3 || (r3 = Promise))(function(o3, i3) {
      function a3(e3) {
        try {
          s3(n3.next(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function u3(e3) {
        try {
          s3(n3.throw(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function s3(e3) {
        var t3;
        e3.done ? o3(e3.value) : (t3 = e3.value, t3 instanceof r3 ? t3 : new r3(function(e4) {
          e4(t3);
        })).then(a3, u3);
      }
      s3((n3 = n3.apply(e2, t2 || [])).next());
    });
  }, i2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u3(0), throw: u3(1), return: u3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u3(u4) {
      return function(s3) {
        return function(u5) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; i3 && (i3 = 0, u5[0] && (a3 = 0)), a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & u5[0] ? n3.return : u5[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, u5[1])).done) return o3;
            switch (n3 = 0, o3 && (u5 = [2 & u5[0], o3.value]), u5[0]) {
              case 0:
              case 1:
                o3 = u5;
                break;
              case 4:
                return a3.label++, { value: u5[1], done: false };
              case 5:
                a3.label++, n3 = u5[1], u5 = [0];
                continue;
              case 7:
                u5 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== u5[0] && 2 !== u5[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === u5[0] && (!o3 || u5[1] > o3[0] && u5[1] < o3[3])) {
                  a3.label = u5[1];
                  break;
                }
                if (6 === u5[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = u5;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(u5);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            u5 = t2.call(e2, a3);
          } catch (e3) {
            u5 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & u5[0]) throw u5[1];
          return { value: u5[0] ? u5[1] : void 0, done: true };
        }([u4, s3]);
      };
    }
  }, a2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.QueryConfig = t.SessionConfig = t.routing = t.WRITE = t.READ = t.Driver = void 0;
  var u2 = r2(9730), s2 = a2(r2(8341)), c2 = r2(326), l2 = r2(4883), f2 = a2(r2(5481)), h2 = r2(6587), d2 = r2(6755), p3 = a2(r2(1573)), v3 = a2(r2(7041)), y3 = r2(9691), b2 = a2(r2(3001)), m2 = r2(6030), g2 = c2.ACCESS_MODE_READ;
  t.READ = g2;
  var _2 = c2.ACCESS_MODE_WRITE;
  t.WRITE = _2;
  var w2 = 0;
  t.SessionConfig = function() {
    this.defaultAccessMode = _2, this.bookmarks = [], this.database = "", this.impersonatedUser = void 0, this.auth = void 0, this.fetchSize = void 0, this.bookmarkManager = void 0, this.notificationFilter = void 0;
  };
  var O2 = { WRITE: "WRITE", READ: "READ" };
  t.routing = O2, Object.freeze(O2);
  t.QueryConfig = function() {
    this.routing = O2.WRITE, this.resultTransformer = void 0, this.database = "", this.impersonatedUser = void 0, this.bookmarkManager = void 0, this.transactionConfig = void 0, this.auth = void 0, this.signal = void 0;
  };
  var S2 = function() {
    function e2(e3, t2, r3, n3, o3) {
      void 0 === t2 && (t2 = {}), void 0 === n3 && (n3 = function(e4) {
        return new f2.default(e4);
      }), void 0 === o3 && (o3 = function(e4) {
        return new v3.default(e4);
      }), function(e4) {
        e4.maxConnectionLifetime = E2(e4.maxConnectionLifetime, 36e5), e4.maxConnectionPoolSize = E2(e4.maxConnectionPoolSize, c2.DEFAULT_POOL_MAX_SIZE), e4.connectionAcquisitionTimeout = E2(e4.connectionAcquisitionTimeout, c2.DEFAULT_POOL_ACQUISITION_TIMEOUT), e4.fetchSize = P2(e4.fetchSize, 1e3), e4.connectionTimeout = function(e5) {
          var t3 = parseInt(e5.connectionTimeout, 10);
          return 0 === t3 || !isNaN(t3) && t3 < 0 ? null : isNaN(t3) ? c2.DEFAULT_CONNECTION_TIMEOUT_MILLIS : t3;
        }(e4), e4.connectionLivenessCheckTimeout = function(e5) {
          if (null != e5) {
            var t3 = parseInt(e5, 10);
            if (t3 < 0 || Number.isNaN(t3)) throw new Error("The connectionLivenessCheckTimeout can only be a positive value or 0 for always. However connectionLivenessCheckTimeout = ".concat(t3));
            return t3;
          }
        }(e4.connectionLivenessCheckTimeout);
      }(t2);
      var i3 = l2.Logger.create(t2);
      !function(e4, t3) {
        var r4, n4, o4 = e4.resolver;
        if (null != o4 && "function" != typeof o4) throw new TypeError("Configured resolver should be a function. Got: ".concat(typeof o4));
        if (e4.connectionAcquisitionTimeout < e4.connectionTimeout && t3.warn('Configuration for "connectionAcquisitionTimeout" should be greater than or equal to "connectionTimeout". Otherwise, the connection acquisition timeout will take precedence for over the connection timeout in scenarios where a new connection is created while it is acquired'), null != (null === (r4 = e4.notificationFilter) || void 0 === r4 ? void 0 : r4.disabledCategories) && null != (null === (n4 = e4.notificationFilter) || void 0 === n4 ? void 0 : n4.disabledClassifications)) throw new Error(`The notificationFilter can't have both "disabledCategories" and  "disabledClassifications" configured at the same time.`);
      }(t2, i3), this._id = w2++, this._meta = e3, this._config = t2, this._log = i3, this._createConnectionProvider = r3, this._createSession = n3, this._defaultExecuteQueryBookmarkManager = (0, d2.bookmarkManager)(), this._queryExecutor = o3(this.session.bind(this)), this._connectionProvider = null, this.homeDatabaseCache = new b2.default(1e4), this._afterConstruction();
    }
    return Object.defineProperty(e2.prototype, "executeQueryBookmarkManager", { get: function() {
      return this._defaultExecuteQueryBookmarkManager;
    }, enumerable: false, configurable: true }), e2.prototype.executeQuery = function(e3, t2, r3) {
      var n3, a3, u3;
      return void 0 === r3 && (r3 = {}), o2(this, void 0, void 0, function() {
        var o3, s3, c3;
        return i2(this, function(i3) {
          switch (i3.label) {
            case 0:
              if (o3 = null === r3.bookmarkManager ? void 0 : null !== (n3 = r3.bookmarkManager) && void 0 !== n3 ? n3 : this.executeQueryBookmarkManager, s3 = null !== (a3 = r3.resultTransformer) && void 0 !== a3 ? a3 : p3.default.eagerResultTransformer(), (c3 = null !== (u3 = r3.routing) && void 0 !== u3 ? u3 : O2.WRITE) !== O2.READ && c3 !== O2.WRITE) throw (0, y3.newError)('Illegal query routing config: "'.concat(c3, '"'));
              return [4, this._queryExecutor.execute({ resultTransformer: s3, bookmarkManager: o3, routing: c3, database: r3.database, impersonatedUser: r3.impersonatedUser, transactionConfig: r3.transactionConfig, auth: r3.auth, signal: r3.signal }, e3, t2)];
            case 1:
              return [2, i3.sent()];
          }
        });
      });
    }, e2.prototype.verifyConnectivity = function(e3) {
      var t2 = (void 0 === e3 ? {} : e3).database, r3 = void 0 === t2 ? "" : t2;
      return this._getOrCreateConnectionProvider().verifyConnectivityAndGetServerInfo({ database: r3, accessMode: g2 });
    }, e2.prototype.verifyAuthentication = function(e3) {
      var t2 = void 0 === e3 ? {} : e3, r3 = t2.database, n3 = t2.auth;
      return o2(this, void 0, void 0, function() {
        return i2(this, function(e4) {
          switch (e4.label) {
            case 0:
              return [4, this._getOrCreateConnectionProvider().verifyAuthentication({ database: null != r3 ? r3 : "system", auth: n3, accessMode: g2 })];
            case 1:
              return [2, e4.sent()];
          }
        });
      });
    }, e2.prototype.getServerInfo = function(e3) {
      var t2 = (void 0 === e3 ? {} : e3).database, r3 = void 0 === t2 ? "" : t2;
      return this._getOrCreateConnectionProvider().verifyConnectivityAndGetServerInfo({ database: r3, accessMode: g2 });
    }, e2.prototype.supportsMultiDb = function() {
      return this._getOrCreateConnectionProvider().supportsMultiDb();
    }, e2.prototype.supportsTransactionConfig = function() {
      return this._getOrCreateConnectionProvider().supportsTransactionConfig();
    }, e2.prototype.supportsUserImpersonation = function() {
      return this._getOrCreateConnectionProvider().supportsUserImpersonation();
    }, e2.prototype.supportsSessionAuth = function() {
      return this._getOrCreateConnectionProvider().supportsSessionAuth();
    }, e2.prototype.getNegotiatedProtocolVersion = function() {
      return this._getOrCreateConnectionProvider().getNegotiatedProtocolVersion();
    }, e2.prototype.isEncrypted = function() {
      return this._isEncrypted();
    }, e2.prototype._supportsRouting = function() {
      return this._meta.routing;
    }, e2.prototype._isEncrypted = function() {
      return this._config.encrypted === h2.ENCRYPTION_ON || true === this._config.encrypted;
    }, e2.prototype._getTrust = function() {
      return this._config.trust;
    }, e2.prototype.session = function(e3) {
      var t2 = void 0 === e3 ? {} : e3, r3 = t2.defaultAccessMode, n3 = void 0 === r3 ? _2 : r3, o3 = t2.bookmarks, i3 = t2.database, a3 = void 0 === i3 ? "" : i3, u3 = t2.impersonatedUser, s3 = t2.fetchSize, c3 = t2.bookmarkManager, l3 = t2.notificationFilter, f3 = t2.auth;
      return this._newSession({ defaultAccessMode: n3, bookmarkOrBookmarks: o3, database: a3, reactive: false, impersonatedUser: u3, fetchSize: P2(s3, this._config.fetchSize), bookmarkManager: c3, notificationFilter: l3, auth: f3 });
    }, e2.prototype.close = function() {
      return this._log.info("Driver ".concat(this._id, " closing")), null != this._connectionProvider ? this._connectionProvider.close() : Promise.resolve();
    }, e2.prototype[Symbol.asyncDispose] = function() {
      return this.close();
    }, e2.prototype._afterConstruction = function() {
      this._log.info("".concat(this._meta.typename, " driver ").concat(this._id, " created for server address ").concat(this._meta.address.toString()));
    }, e2.prototype._homeDatabaseCallback = function(e3, t2) {
      this.homeDatabaseCache.set(e3, t2);
    }, e2.prototype._newSession = function(e3) {
      var t2 = e3.defaultAccessMode, r3 = e3.bookmarkOrBookmarks, o3 = e3.database, i3 = e3.reactive, a3 = e3.impersonatedUser, s3 = e3.fetchSize, c3 = e3.bookmarkManager, l3 = e3.notificationFilter, h3 = e3.auth, d3 = f2.default._validateSessionMode(t2), p4 = this._getOrCreateConnectionProvider(), v5 = this.homeDatabaseCache.get((0, m2.cacheKey)(h3, a3)), y4 = this._homeDatabaseCallback.bind(this), b3 = null != r3 ? new u2.Bookmarks(r3) : u2.Bookmarks.empty();
      return this._createSession({ mode: d3, database: null != o3 ? o3 : "", connectionProvider: p4, bookmarks: b3, config: n2({ cachedHomeDatabase: v5, routingDriver: this._supportsRouting() }, this._config), reactive: i3, impersonatedUser: a3, fetchSize: s3, bookmarkManager: c3, notificationFilter: l3, auth: h3, log: this._log, homeDatabaseCallback: y4 });
    }, e2.prototype._getOrCreateConnectionProvider = function() {
      var e3;
      return null == this._connectionProvider && (this._connectionProvider = this._createConnectionProvider(this._id, this._config, this._log, (e3 = this._config, new s2.default(e3.resolver)))), this._connectionProvider;
    }, e2;
  }();
  function E2(e2, t2) {
    var r3 = parseInt(e2, 10);
    return r3 > 0 || 0 === r3 ? r3 : r3 < 0 ? Number.MAX_SAFE_INTEGER : t2;
  }
  function P2(e2, t2) {
    var r3 = parseInt(e2, 10);
    if (r3 > 0 || r3 === c2.FETCH_ALL) return r3;
    if (0 === r3 || r3 < 0) throw new Error("The fetch size can only be a positive value or ".concat(c2.FETCH_ALL, " for ALL. However fetchSize = ").concat(r3));
    return t2;
  }
  t.Driver = S2, t.default = S2;
}, 7286: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, o2 = this && this.__spreadArray || function(e2, t2) {
    for (var r3 = 0, n3 = t2.length, o3 = e2.length; r3 < n3; r3++, o3++) e2[o3] = t2[r3];
    return e2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.zip = void 0;
  var i2 = r2(4662), a2 = r2(9445), u2 = r2(8535), s2 = r2(8616), c2 = r2(3111), l2 = r2(1107);
  t.zip = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    var r3 = l2.popResultSelector(e2), f2 = u2.argsOrArgArray(e2);
    return f2.length ? new i2.Observable(function(e3) {
      var t3 = f2.map(function() {
        return [];
      }), i3 = f2.map(function() {
        return false;
      });
      e3.add(function() {
        t3 = i3 = null;
      });
      for (var u3 = function(u4) {
        a2.innerFrom(f2[u4]).subscribe(c2.createOperatorSubscriber(e3, function(a3) {
          if (t3[u4].push(a3), t3.every(function(e4) {
            return e4.length;
          })) {
            var s4 = t3.map(function(e4) {
              return e4.shift();
            });
            e3.next(r3 ? r3.apply(void 0, o2([], n2(s4))) : s4), t3.some(function(e4, t4) {
              return !e4.length && i3[t4];
            }) && e3.complete();
          }
        }, function() {
          i3[u4] = true, !t3[u4].length && e3.complete();
        }));
      }, s3 = 0; !e3.closed && s3 < f2.length; s3++) u3(s3);
      return function() {
        t3 = i3 = null;
      };
    }) : s2.EMPTY;
  };
}, 7302: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.mergeAll = void 0;
  var n2 = r2(983), o2 = r2(6640);
  t.mergeAll = function(e2) {
    return void 0 === e2 && (e2 = 1 / 0), n2.mergeMap(o2.identity, e2);
  };
}, 7315: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.reportUnhandledError = void 0;
  var n2 = r2(3413), o2 = r2(9155);
  t.reportUnhandledError = function(e2) {
    o2.timeoutProvider.setTimeout(function() {
      var t2 = n2.config.onUnhandledError;
      if (!t2) throw e2;
      t2(e2);
    });
  };
}, 7331: function(e, t, r2) {
  var n2 = this && this.__assign || function() {
    return n2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, n2.apply(this, arguments);
  }, o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = o2(r2(5348));
  t.default = n2({}, i2.default);
}, 7360: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.argsArgArrayOrObject = void 0;
  var r2 = Array.isArray, n2 = Object.getPrototypeOf, o2 = Object.prototype, i2 = Object.keys;
  t.argsArgArrayOrObject = function(e2) {
    if (1 === e2.length) {
      var t2 = e2[0];
      if (r2(t2)) return { args: t2, keys: null };
      if ((u2 = t2) && "object" == typeof u2 && n2(u2) === o2) {
        var a2 = i2(t2);
        return { args: a2.map(function(e3) {
          return t2[e3];
        }), keys: a2 };
      }
    }
    var u2;
    return { args: e2, keys: null };
  };
}, 7372: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.skipUntil = void 0;
  var n2 = r2(7843), o2 = r2(3111), i2 = r2(9445), a2 = r2(1342);
  t.skipUntil = function(e2) {
    return n2.operate(function(t2, r3) {
      var n3 = false, u2 = o2.createOperatorSubscriber(r3, function() {
        null == u2 || u2.unsubscribe(), n3 = true;
      }, a2.noop);
      i2.innerFrom(e2).subscribe(u2), t2.subscribe(o2.createOperatorSubscriber(r3, function(e3) {
        return n3 && r3.next(e3);
      }));
    });
  };
}, 7428: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__assign || function() {
    return o2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, o2.apply(this, arguments);
  }, i2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3);
    var o3 = Object.getOwnPropertyDescriptor(t2, r3);
    o3 && !("get" in o3 ? !t2.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
      return t2[r3];
    } }), Object.defineProperty(e2, n3, o3);
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), a2 = this && this.__setModuleDefault || (Object.create ? function(e2, t2) {
    Object.defineProperty(e2, "default", { enumerable: true, value: t2 });
  } : function(e2, t2) {
    e2.default = t2;
  }), u2 = this && this.__importStar || function(e2) {
    if (e2 && e2.__esModule) return e2;
    var t2 = {};
    if (null != e2) for (var r3 in e2) "default" !== r3 && Object.prototype.hasOwnProperty.call(e2, r3) && i2(t2, e2, r3);
    return a2(t2, e2), t2;
  }, s2 = this && this.__awaiter || function(e2, t2, r3, n3) {
    return new (r3 || (r3 = Promise))(function(o3, i3) {
      function a3(e3) {
        try {
          s3(n3.next(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function u3(e3) {
        try {
          s3(n3.throw(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function s3(e3) {
        var t3;
        e3.done ? o3(e3.value) : (t3 = e3.value, t3 instanceof r3 ? t3 : new r3(function(e4) {
          e4(t3);
        })).then(a3, u3);
      }
      s3((n3 = n3.apply(e2, t2 || [])).next());
    });
  }, c2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u3(0), throw: u3(1), return: u3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u3(u4) {
      return function(s3) {
        return function(u5) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; i3 && (i3 = 0, u5[0] && (a3 = 0)), a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & u5[0] ? n3.return : u5[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, u5[1])).done) return o3;
            switch (n3 = 0, o3 && (u5 = [2 & u5[0], o3.value]), u5[0]) {
              case 0:
              case 1:
                o3 = u5;
                break;
              case 4:
                return a3.label++, { value: u5[1], done: false };
              case 5:
                a3.label++, n3 = u5[1], u5 = [0];
                continue;
              case 7:
                u5 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== u5[0] && 2 !== u5[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === u5[0] && (!o3 || u5[1] > o3[0] && u5[1] < o3[3])) {
                  a3.label = u5[1];
                  break;
                }
                if (6 === u5[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = u5;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(u5);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            u5 = t2.call(e2, a3);
          } catch (e3) {
            u5 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & u5[0]) throw u5[1];
          return { value: u5[0] ? u5[1] : void 0, done: true };
        }([u4, s3]);
      };
    }
  }, l2 = this && this.__values || function(e2) {
    var t2 = "function" == typeof Symbol && Symbol.iterator, r3 = t2 && e2[t2], n3 = 0;
    if (r3) return r3.call(e2);
    if (e2 && "number" == typeof e2.length) return { next: function() {
      return e2 && n3 >= e2.length && (e2 = void 0), { value: e2 && e2[n3++], done: !e2 };
    } };
    throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }, f2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, h2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var d2 = r2(9305), p3 = u2(r2(206)), v3 = r2(7452), y3 = h2(r2(4132)), b2 = h2(r2(8987)), m2 = r2(4455), g2 = r2(7721), _2 = r2(6781), w2 = d2.error.SERVICE_UNAVAILABLE, O2 = d2.error.SESSION_EXPIRED, S2 = d2.internal.bookmarks.Bookmarks, E2 = d2.internal.constants, P2 = E2.ACCESS_MODE_READ, T2 = E2.ACCESS_MODE_WRITE, x3 = E2.BOLT_PROTOCOL_V3, C2 = E2.BOLT_PROTOCOL_V4_0, j2 = E2.BOLT_PROTOCOL_V4_4, A2 = E2.BOLT_PROTOCOL_V5_1, k2 = "Neo.ClientError.Database.DatabaseNotFound", R2 = "Neo.ClientError.Transaction.InvalidBookmark", I2 = "Neo.ClientError.Transaction.InvalidBookmarkMixture", M2 = "Neo.ClientError.Security.AuthorizationExpired", N2 = "Neo.ClientError.Statement.ArgumentError", D2 = "Neo.ClientError.Request.Invalid", L2 = "Neo.ClientError.Statement.TypeError", U2 = "N/A", F2 = null, B2 = (0, d2.int)(3e4), z2 = function(e2) {
    function t2(t3) {
      var r3 = t3.id, n3 = t3.address, i3 = t3.routingContext, a3 = t3.hostNameResolver, u3 = t3.config, l3 = t3.log, f3 = t3.userAgent, h3 = t3.boltAgent, y4 = t3.authTokenManager, b3 = t3.routingTablePurgeDelay, w3 = t3.newPool, O3 = e2.call(this, { id: r3, config: u3, log: l3, userAgent: f3, boltAgent: h3, authTokenManager: y4, newPool: w3 }, function(e3) {
        return s2(O3, void 0, void 0, function() {
          var t4, r4;
          return c2(this, function(n4) {
            switch (n4.label) {
              case 0:
                return t4 = g2.createChannelConnection, r4 = [e3, this._config, this._createConnectionErrorHandler(), this._log], [4, this._clientCertificateHolder.getClientCertificate()];
              case 1:
                return [2, t4.apply(void 0, r4.concat([n4.sent(), this._routingContext, this._channelSsrCallback.bind(this)]))];
            }
          });
        });
      }) || this;
      return O3._routingContext = o2(o2({}, i3), { address: n3.toString() }), O3._seedRouter = n3, O3._rediscovery = new p3.default(O3._routingContext), O3._loadBalancingStrategy = new m2.LeastConnectedLoadBalancingStrategy(O3._connectionPool), O3._hostNameResolver = a3, O3._dnsResolver = new v3.HostNameResolver(), O3._log = l3, O3._useSeedRouter = true, O3._routingTableRegistry = new V2(b3 ? (0, d2.int)(b3) : B2), O3._refreshRoutingTable = _2.functional.reuseOngoingRequest(O3._refreshRoutingTable, O3), O3._withSSR = 0, O3._withoutSSR = 0, O3;
    }
    return n2(t2, e2), t2.prototype._createConnectionErrorHandler = function() {
      return new g2.ConnectionErrorHandler(O2);
    }, t2.prototype._handleUnavailability = function(e3, t3, r3) {
      return this._log.warn("Routing driver ".concat(this._id, " will forget ").concat(t3, " for database '").concat(r3, "' because of an error ").concat(e3.code, " '").concat(e3.message, "'")), this.forget(t3, r3 || F2), e3;
    }, t2.prototype._handleSecurityError = function(t3, r3, n3, o3) {
      return this._log.warn("Routing driver ".concat(this._id, " will close connections to ").concat(r3, " for database '").concat(o3, "' because of an error ").concat(t3.code, " '").concat(t3.message, "'")), e2.prototype._handleSecurityError.call(this, t3, r3, n3, o3);
    }, t2.prototype._handleWriteFailure = function(e3, t3, r3) {
      return this._log.warn("Routing driver ".concat(this._id, " will forget writer ").concat(t3, " for database '").concat(r3, "' because of an error ").concat(e3.code, " '").concat(e3.message, "'")), this.forgetWriter(t3, r3 || F2), (0, d2.newError)("No longer possible to write to server at " + t3, O2, e3);
    }, t2.prototype.acquireConnection = function(e3) {
      var t3 = void 0 === e3 ? {} : e3, r3 = t3.accessMode, n3 = t3.database, o3 = t3.bookmarks, i3 = t3.impersonatedUser, a3 = t3.onDatabaseNameResolved, u3 = t3.auth, l3 = t3.homeDb;
      return s2(this, void 0, void 0, function() {
        var e4, t4, s3, f3, h3, d3 = this;
        return c2(this, function(c3) {
          switch (c3.label) {
            case 0:
              return e4 = { database: n3 || F2 }, t4 = new g2.ConnectionErrorHandler(O2, function(t5, r4) {
                return d3._handleUnavailability(t5, r4, e4.database);
              }, function(t5, r4) {
                return d3._handleWriteFailure(t5, r4, null != l3 ? l3 : e4.database);
              }, function(t5, r4, n4) {
                return d3._handleSecurityError(t5, r4, n4, e4.database);
              }), this.SSREnabled() && void 0 !== l3 && "" === n3 ? !(f3 = this._routingTableRegistry.get(l3, function() {
                return new p3.RoutingTable({ database: l3 });
              })) || f3.isStaleFor(r3) ? [3, 2] : [4, this.getConnectionFromRoutingTable(f3, u3, r3, t4)] : [3, 2];
            case 1:
              if (s3 = c3.sent(), this.SSREnabled()) return [2, s3];
              s3.release(), c3.label = 2;
            case 2:
              return [4, this._freshRoutingTable({ accessMode: r3, database: e4.database, bookmarks: o3, impersonatedUser: i3, auth: u3, onDatabaseNameResolved: function(t5) {
                e4.database = e4.database || t5, a3 && a3(t5);
              } })];
            case 3:
              return h3 = c3.sent(), [2, this.getConnectionFromRoutingTable(h3, u3, r3, t4)];
          }
        });
      });
    }, t2.prototype.getConnectionFromRoutingTable = function(e3, t3, r3, n3) {
      return s2(this, void 0, void 0, function() {
        var o3, i3, a3, u3;
        return c2(this, function(s3) {
          switch (s3.label) {
            case 0:
              if (r3 === P2) i3 = this._loadBalancingStrategy.selectReader(e3.readers), o3 = "read";
              else {
                if (r3 !== T2) throw (0, d2.newError)("Illegal mode " + r3);
                i3 = this._loadBalancingStrategy.selectWriter(e3.writers), o3 = "write";
              }
              if (!i3) throw (0, d2.newError)("Failed to obtain connection towards ".concat(o3, " server. Known routing table is: ").concat(e3), O2);
              s3.label = 1;
            case 1:
              return s3.trys.push([1, 5, , 6]), [4, this._connectionPool.acquire({ auth: t3 }, i3)];
            case 2:
              return a3 = s3.sent(), t3 ? [4, this._verifyStickyConnection({ auth: t3, connection: a3, address: i3 })] : [3, 4];
            case 3:
              return s3.sent(), [2, a3];
            case 4:
              return [2, new g2.DelegateConnection(a3, n3)];
            case 5:
              throw u3 = s3.sent(), n3.handleAndTransformError(u3, i3);
            case 6:
              return [2];
          }
        });
      });
    }, t2.prototype._hasProtocolVersion = function(e3) {
      return s2(this, void 0, void 0, function() {
        var t3, r3, n3, o3, i3, a3;
        return c2(this, function(u3) {
          switch (u3.label) {
            case 0:
              return [4, this._resolveSeedRouter(this._seedRouter)];
            case 1:
              t3 = u3.sent(), n3 = 0, u3.label = 2;
            case 2:
              if (!(n3 < t3.length)) return [3, 8];
              u3.label = 3;
            case 3:
              return u3.trys.push([3, 6, , 7]), [4, this._createChannelConnection(t3[n3])];
            case 4:
              return o3 = u3.sent(), i3 = o3.protocol() ? o3.protocol().version : null, [4, o3.close()];
            case 5:
              return u3.sent(), i3 ? [2, e3(i3)] : [2, false];
            case 6:
              return a3 = u3.sent(), r3 = a3, [3, 7];
            case 7:
              return n3++, [3, 2];
            case 8:
              if (r3) throw r3;
              return [2, false];
          }
        });
      });
    }, t2.prototype.supportsMultiDb = function() {
      return s2(this, void 0, void 0, function() {
        return c2(this, function(e3) {
          switch (e3.label) {
            case 0:
              return [4, this._hasProtocolVersion(function(e4) {
                return e4 >= C2;
              })];
            case 1:
              return [2, e3.sent()];
          }
        });
      });
    }, t2.prototype.supportsTransactionConfig = function() {
      return s2(this, void 0, void 0, function() {
        return c2(this, function(e3) {
          switch (e3.label) {
            case 0:
              return [4, this._hasProtocolVersion(function(e4) {
                return e4 >= x3;
              })];
            case 1:
              return [2, e3.sent()];
          }
        });
      });
    }, t2.prototype.supportsUserImpersonation = function() {
      return s2(this, void 0, void 0, function() {
        return c2(this, function(e3) {
          switch (e3.label) {
            case 0:
              return [4, this._hasProtocolVersion(function(e4) {
                return e4 >= j2;
              })];
            case 1:
              return [2, e3.sent()];
          }
        });
      });
    }, t2.prototype.supportsSessionAuth = function() {
      return s2(this, void 0, void 0, function() {
        return c2(this, function(e3) {
          switch (e3.label) {
            case 0:
              return [4, this._hasProtocolVersion(function(e4) {
                return e4 >= A2;
              })];
            case 1:
              return [2, e3.sent()];
          }
        });
      });
    }, t2.prototype.getNegotiatedProtocolVersion = function() {
      var e3 = this;
      return new Promise(function(t3, r3) {
        e3._hasProtocolVersion(t3).catch(r3);
      });
    }, t2.prototype.verifyAuthentication = function(e3) {
      var t3 = e3.database, r3 = e3.accessMode, n3 = e3.auth;
      return s2(this, void 0, void 0, function() {
        var e4 = this;
        return c2(this, function(o3) {
          return [2, this._verifyAuthentication({ auth: n3, getAddress: function() {
            return s2(e4, void 0, void 0, function() {
              var e5, o4, i3;
              return c2(this, function(a3) {
                switch (a3.label) {
                  case 0:
                    return e5 = { database: t3 || F2 }, [4, this._freshRoutingTable({ accessMode: r3, database: e5.database, auth: n3, onDatabaseNameResolved: function(t4) {
                      e5.database = e5.database || t4;
                    } })];
                  case 1:
                    if (o4 = a3.sent(), 0 === (i3 = r3 === T2 ? o4.writers : o4.readers).length) throw (0, d2.newError)("No servers available for database '".concat(e5.database, "' with access mode '").concat(r3, "'"), w2);
                    return [2, i3[0]];
                }
              });
            });
          } })];
        });
      });
    }, t2.prototype.verifyConnectivityAndGetServerInfo = function(e3) {
      var t3 = e3.database, r3 = e3.accessMode;
      return s2(this, void 0, void 0, function() {
        var e4, n3, o3, i3, a3, u3, s3, f3, h3, p4, v5;
        return c2(this, function(c3) {
          switch (c3.label) {
            case 0:
              return e4 = { database: t3 || F2 }, [4, this._freshRoutingTable({ accessMode: r3, database: e4.database, onDatabaseNameResolved: function(t4) {
                e4.database = e4.database || t4;
              } })];
            case 1:
              n3 = c3.sent(), o3 = r3 === T2 ? n3.writers : n3.readers, i3 = (0, d2.newError)("No servers available for database '".concat(e4.database, "' with access mode '").concat(r3, "'"), w2), c3.label = 2;
            case 2:
              c3.trys.push([2, 9, 10, 11]), a3 = l2(o3), u3 = a3.next(), c3.label = 3;
            case 3:
              if (u3.done) return [3, 8];
              s3 = u3.value, c3.label = 4;
            case 4:
              return c3.trys.push([4, 6, , 7]), [4, this._verifyConnectivityAndGetServerVersion({ address: s3 })];
            case 5:
              return [2, c3.sent()];
            case 6:
              return f3 = c3.sent(), i3 = f3, [3, 7];
            case 7:
              return u3 = a3.next(), [3, 3];
            case 8:
              return [3, 11];
            case 9:
              return h3 = c3.sent(), p4 = { error: h3 }, [3, 11];
            case 10:
              try {
                u3 && !u3.done && (v5 = a3.return) && v5.call(a3);
              } finally {
                if (p4) throw p4.error;
              }
              return [7];
            case 11:
              throw i3;
          }
        });
      });
    }, t2.prototype.forget = function(e3, t3) {
      this._routingTableRegistry.apply(t3, { applyWhenExists: function(t4) {
        return t4.forget(e3);
      } }), this._connectionPool.purge(e3).catch(function() {
      });
    }, t2.prototype.forgetWriter = function(e3, t3) {
      this._routingTableRegistry.apply(t3, { applyWhenExists: function(t4) {
        return t4.forgetWriter(e3);
      } });
    }, t2.prototype._freshRoutingTable = function(e3) {
      var t3 = void 0 === e3 ? {} : e3, r3 = t3.accessMode, n3 = t3.database, o3 = t3.bookmarks, i3 = t3.impersonatedUser, a3 = t3.onDatabaseNameResolved, u3 = t3.auth, s3 = this._routingTableRegistry.get(n3, function() {
        return new p3.RoutingTable({ database: n3 });
      });
      return s3.isStaleFor(r3) ? (this._log.info('Routing table is stale for database: "'.concat(n3, '" and access mode: "').concat(r3, '": ').concat(s3)), this._refreshRoutingTable(s3, o3, i3, u3).then(function(e4) {
        return a3(e4.database), e4;
      })) : s3;
    }, t2.prototype._refreshRoutingTable = function(e3, t3, r3, n3) {
      var o3 = e3.routers;
      return this._useSeedRouter ? this._fetchRoutingTableFromSeedRouterFallbackToKnownRouters(o3, e3, t3, r3, n3) : this._fetchRoutingTableFromKnownRoutersFallbackToSeedRouter(o3, e3, t3, r3, n3);
    }, t2.prototype._fetchRoutingTableFromSeedRouterFallbackToKnownRouters = function(e3, t3, r3, n3, o3) {
      return s2(this, void 0, void 0, function() {
        var i3, a3, u3, s3, l3, h3, d3;
        return c2(this, function(c3) {
          switch (c3.label) {
            case 0:
              return i3 = [], [4, this._fetchRoutingTableUsingSeedRouter(i3, this._seedRouter, t3, r3, n3, o3)];
            case 1:
              return a3 = f2.apply(void 0, [c3.sent(), 2]), u3 = a3[0], s3 = a3[1], u3 ? (this._useSeedRouter = false, [3, 4]) : [3, 2];
            case 2:
              return [4, this._fetchRoutingTableUsingKnownRouters(e3, t3, r3, n3, o3)];
            case 3:
              l3 = f2.apply(void 0, [c3.sent(), 2]), h3 = l3[0], d3 = l3[1], u3 = h3, s3 = d3 || s3, c3.label = 4;
            case 4:
              return [4, this._applyRoutingTableIfPossible(t3, u3, s3)];
            case 5:
              return [2, c3.sent()];
          }
        });
      });
    }, t2.prototype._fetchRoutingTableFromKnownRoutersFallbackToSeedRouter = function(e3, t3, r3, n3, o3) {
      return s2(this, void 0, void 0, function() {
        var i3, a3, u3, s3;
        return c2(this, function(c3) {
          switch (c3.label) {
            case 0:
              return [4, this._fetchRoutingTableUsingKnownRouters(e3, t3, r3, n3, o3)];
            case 1:
              return i3 = f2.apply(void 0, [c3.sent(), 2]), a3 = i3[0], u3 = i3[1], a3 ? [3, 3] : [4, this._fetchRoutingTableUsingSeedRouter(e3, this._seedRouter, t3, r3, n3, o3)];
            case 2:
              s3 = f2.apply(void 0, [c3.sent(), 2]), a3 = s3[0], u3 = s3[1], c3.label = 3;
            case 3:
              return [4, this._applyRoutingTableIfPossible(t3, a3, u3)];
            case 4:
              return [2, c3.sent()];
          }
        });
      });
    }, t2.prototype._fetchRoutingTableUsingKnownRouters = function(e3, r3, n3, o3, i3) {
      return s2(this, void 0, void 0, function() {
        var a3, u3, s3, l3;
        return c2(this, function(c3) {
          switch (c3.label) {
            case 0:
              return [4, this._fetchRoutingTable(e3, r3, n3, o3, i3)];
            case 1:
              return a3 = f2.apply(void 0, [c3.sent(), 2]), u3 = a3[0], s3 = a3[1], u3 ? [2, [u3, null]] : (l3 = e3.length - 1, t2._forgetRouter(r3, e3, l3), [2, [null, s3]]);
          }
        });
      });
    }, t2.prototype._fetchRoutingTableUsingSeedRouter = function(e3, t3, r3, n3, o3, i3) {
      return s2(this, void 0, void 0, function() {
        var a3, u3;
        return c2(this, function(s3) {
          switch (s3.label) {
            case 0:
              return [4, this._resolveSeedRouter(t3)];
            case 1:
              return a3 = s3.sent(), u3 = a3.filter(function(t4) {
                return e3.indexOf(t4) < 0;
              }), [4, this._fetchRoutingTable(u3, r3, n3, o3, i3)];
            case 2:
              return [2, s3.sent()];
          }
        });
      });
    }, t2.prototype._resolveSeedRouter = function(e3) {
      return s2(this, void 0, void 0, function() {
        var t3, r3, n3 = this;
        return c2(this, function(o3) {
          switch (o3.label) {
            case 0:
              return [4, this._hostNameResolver.resolve(e3)];
            case 1:
              return t3 = o3.sent(), [4, Promise.all(t3.map(function(e4) {
                return n3._dnsResolver.resolve(e4);
              }))];
            case 2:
              return r3 = o3.sent(), [2, [].concat.apply([], r3)];
          }
        });
      });
    }, t2.prototype._fetchRoutingTable = function(e3, r3, n3, o3, i3) {
      return s2(this, void 0, void 0, function() {
        var a3 = this;
        return c2(this, function(u3) {
          return [2, e3.reduce(function(u4, l3, h3) {
            return s2(a3, void 0, void 0, function() {
              var a4, s3, d3, p4, v5, y4, b3;
              return c2(this, function(c3) {
                switch (c3.label) {
                  case 0:
                    return [4, u4];
                  case 1:
                    return a4 = f2.apply(void 0, [c3.sent(), 1]), (s3 = a4[0]) ? [2, [s3, null]] : (d3 = h3 - 1, t2._forgetRouter(r3, e3, d3), [4, this._createSessionForRediscovery(l3, n3, o3, i3)]);
                  case 2:
                    if (p4 = f2.apply(void 0, [c3.sent(), 2]), v5 = p4[0], y4 = p4[1], !v5) return [3, 8];
                    c3.label = 3;
                  case 3:
                    return c3.trys.push([3, 5, 6, 7]), [4, this._rediscovery.lookupRoutingTableOnRouter(v5, r3.database, l3, o3)];
                  case 4:
                    return [2, [c3.sent(), null]];
                  case 5:
                    return b3 = c3.sent(), [2, this._handleRediscoveryError(b3, l3)];
                  case 6:
                    return v5.close(), [7];
                  case 7:
                    return [3, 9];
                  case 8:
                    return [2, [null, y4]];
                  case 9:
                    return [2];
                }
              });
            });
          }, Promise.resolve([null, null]))];
        });
      });
    }, t2.prototype._createSessionForRediscovery = function(e3, t3, r3, n3) {
      return s2(this, void 0, void 0, function() {
        var o3, i3, a3, u3, s3, l3 = this;
        return c2(this, function(c3) {
          switch (c3.label) {
            case 0:
              return c3.trys.push([0, 4, , 5]), [4, this._connectionPool.acquire({ auth: n3 }, e3)];
            case 1:
              return o3 = c3.sent(), n3 ? [4, this._verifyStickyConnection({ auth: n3, connection: o3, address: e3 })] : [3, 3];
            case 2:
              c3.sent(), c3.label = 3;
            case 3:
              return i3 = g2.ConnectionErrorHandler.create({ errorCode: O2, handleSecurityError: function(e4, t4, r4) {
                return l3._handleSecurityError(e4, t4, r4);
              } }), a3 = o3._sticky ? new g2.DelegateConnection(o3) : new g2.DelegateConnection(o3, i3), u3 = new y3.default(a3), o3.protocol().version < 4 ? [2, [new d2.Session({ mode: T2, bookmarks: S2.empty(), connectionProvider: u3 }), null]] : [2, [new d2.Session({ mode: P2, database: "system", bookmarks: t3, connectionProvider: u3, impersonatedUser: r3 }), null]];
            case 4:
              return s3 = c3.sent(), [2, this._handleRediscoveryError(s3, e3)];
            case 5:
              return [2];
          }
        });
      });
    }, t2.prototype._handleRediscoveryError = function(e3, t3) {
      if (function(e4) {
        return [k2, R2, I2, N2, D2, L2, U2].includes(e4.code);
      }(e3) || function(e4) {
        return e4.code.startsWith("Neo.ClientError.Security.") && ![M2].includes(e4.code);
      }(e3)) throw e3;
      if ("Neo.ClientError.Procedure.ProcedureNotFound" === e3.code) throw (0, d2.newError)("Server at ".concat(t3.asHostPort(), " can't perform routing. Make sure you are connecting to a causal cluster"), w2, e3);
      return this._log.warn("unable to fetch routing table because of an error ".concat(e3)), [null, e3];
    }, t2.prototype._applyRoutingTableIfPossible = function(e3, t3, r3) {
      return s2(this, void 0, void 0, function() {
        return c2(this, function(n3) {
          switch (n3.label) {
            case 0:
              if (!t3) throw (0, d2.newError)("Could not perform discovery. No routing servers available. Known routing table: ".concat(e3), w2, r3);
              return 0 === t3.writers.length && (this._useSeedRouter = true), [4, this._updateRoutingTable(t3)];
            case 1:
              return n3.sent(), [2, t3];
          }
        });
      });
    }, t2.prototype._updateRoutingTable = function(e3) {
      return s2(this, void 0, void 0, function() {
        return c2(this, function(t3) {
          switch (t3.label) {
            case 0:
              return [4, this._connectionPool.keepAll(e3.allServers())];
            case 1:
              return t3.sent(), this._routingTableRegistry.removeExpired(), this._routingTableRegistry.register(e3), this._log.info("Updated routing table ".concat(e3)), [2];
          }
        });
      });
    }, t2._forgetRouter = function(e3, t3, r3) {
      var n3 = t3[r3];
      e3 && n3 && e3.forgetRouter(n3);
    }, t2.prototype._channelSsrCallback = function(e3, t3) {
      if ("OPEN" === t3) true === e3 ? this._withSSR = this._withSSR + 1 : this._withoutSSR = this._withoutSSR + 1;
      else {
        if ("CLOSE" !== t3) throw (0, d2.newError)("Channel SSR Callback invoked with action other than 'OPEN' or 'CLOSE'");
        true === e3 ? this._withSSR = this._withSSR - 1 : this._withoutSSR = this._withoutSSR - 1;
      }
    }, t2.prototype.SSREnabled = function() {
      return this._withSSR > 0 && 0 === this._withoutSSR;
    }, t2;
  }(b2.default);
  t.default = z2;
  var V2 = function() {
    function e2(e3) {
      this._tables = /* @__PURE__ */ new Map(), this._routingTablePurgeDelay = e3;
    }
    return e2.prototype.register = function(e3) {
      return this._tables.set(e3.database, e3), this;
    }, e2.prototype.apply = function(e3, t2) {
      var r3 = void 0 === t2 ? {} : t2, n3 = r3.applyWhenExists, o3 = r3.applyWhenDontExists, i3 = void 0 === o3 ? function() {
      } : o3;
      return this._tables.has(e3) ? n3(this._tables.get(e3)) : "string" == typeof e3 || null === e3 ? i3() : this._forEach(n3), this;
    }, e2.prototype.get = function(e3, t2) {
      return this._tables.has(e3) ? this._tables.get(e3) : "function" == typeof t2 ? t2() : t2;
    }, e2.prototype.removeExpired = function() {
      var e3 = this;
      return this._removeIf(function(t2) {
        return t2.isExpiredFor(e3._routingTablePurgeDelay);
      });
    }, e2.prototype._forEach = function(e3) {
      var t2, r3;
      try {
        for (var n3 = l2(this._tables), o3 = n3.next(); !o3.done; o3 = n3.next()) e3(f2(o3.value, 2)[1]);
      } catch (e4) {
        t2 = { error: e4 };
      } finally {
        try {
          o3 && !o3.done && (r3 = n3.return) && r3.call(n3);
        } finally {
          if (t2) throw t2.error;
        }
      }
      return this;
    }, e2.prototype._remove = function(e3) {
      return this._tables.delete(e3), this;
    }, e2.prototype._removeIf = function(e3) {
      var t2, r3;
      try {
        for (var n3 = l2(this._tables), o3 = n3.next(); !o3.done; o3 = n3.next()) {
          var i3 = f2(o3.value, 2), a3 = i3[0];
          e3(i3[1]) && this._remove(a3);
        }
      } catch (e4) {
        t2 = { error: e4 };
      } finally {
        try {
          o3 && !o3.done && (r3 = n3.return) && r3.call(n3);
        } finally {
          if (t2) throw t2.error;
        }
      }
      return this;
    }, e2;
  }();
}, 7441: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.dematerialize = void 0;
  var n2 = r2(7800), o2 = r2(7843), i2 = r2(3111);
  t.dematerialize = function() {
    return o2.operate(function(e2, t2) {
      e2.subscribe(i2.createOperatorSubscriber(t2, function(e3) {
        return n2.observeNotification(e3, t2);
      }));
    });
  };
}, 7449: function(e, t, r2) {
  var n2 = this && this.__assign || function() {
    return n2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, n2.apply(this, arguments);
  }, o2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, i2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var a2 = r2(7168), u2 = r2(9305), s2 = i2(r2(7518)), c2 = i2(r2(5045));
  t.default = n2(n2(n2({}, s2.default), c2.default), { createNodeTransformer: function(e2) {
    return s2.default.createNodeTransformer(e2).extendsWith({ fromStructure: function(e3) {
      a2.structure.verifyStructSize("Node", 4, e3.size);
      var t2 = o2(e3.fields, 4), r3 = t2[0], n3 = t2[1], i3 = t2[2], s3 = t2[3];
      return new u2.Node(r3, n3, i3, s3);
    } });
  }, createRelationshipTransformer: function(e2) {
    return s2.default.createRelationshipTransformer(e2).extendsWith({ fromStructure: function(e3) {
      a2.structure.verifyStructSize("Relationship", 8, e3.size);
      var t2 = o2(e3.fields, 8), r3 = t2[0], n3 = t2[1], i3 = t2[2], s3 = t2[3], c3 = t2[4], l2 = t2[5], f2 = t2[6], h2 = t2[7];
      return new u2.Relationship(r3, n3, i3, s3, c3, l2, f2, h2);
    } });
  }, createUnboundRelationshipTransformer: function(e2) {
    return s2.default.createUnboundRelationshipTransformer(e2).extendsWith({ fromStructure: function(e3) {
      a2.structure.verifyStructSize("UnboundRelationship", 4, e3.size);
      var t2 = o2(e3.fields, 4), r3 = t2[0], n3 = t2[1], i3 = t2[2], s3 = t2[3];
      return new u2.UnboundRelationship(r3, n3, i3, s3);
    } });
  } });
}, 7452: function(e, t, r2) {
  var n2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3);
    var o3 = Object.getOwnPropertyDescriptor(t2, r3);
    o3 && !("get" in o3 ? !t2.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
      return t2[r3];
    } }), Object.defineProperty(e2, n3, o3);
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), o2 = this && this.__exportStar || function(e2, t2) {
    for (var r3 in e2) "default" === r3 || Object.prototype.hasOwnProperty.call(t2, r3) || n2(t2, e2, r3);
  }, i2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.utf8 = t.alloc = t.ChannelConfig = void 0, o2(r2(3951), t), o2(r2(373), t);
  var a2 = r2(2481);
  Object.defineProperty(t, "ChannelConfig", { enumerable: true, get: function() {
    return i2(a2).default;
  } });
  var u2 = r2(5319);
  Object.defineProperty(t, "alloc", { enumerable: true, get: function() {
    return u2.alloc;
  } });
  var s2 = r2(3473);
  Object.defineProperty(t, "utf8", { enumerable: true, get: function() {
    return i2(s2).default;
  } });
}, 7479: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.arrRemove = void 0, t.arrRemove = function(e2, t2) {
    if (e2) {
      var r2 = e2.indexOf(t2);
      0 <= r2 && e2.splice(r2, 1);
    }
  };
}, 7509: function(e, t, r2) {
  var n2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3);
    var o3 = Object.getOwnPropertyDescriptor(t2, r3);
    o3 && !("get" in o3 ? !t2.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
      return t2[r3];
    } }), Object.defineProperty(e2, n3, o3);
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), o2 = this && this.__setModuleDefault || (Object.create ? function(e2, t2) {
    Object.defineProperty(e2, "default", { enumerable: true, value: t2 });
  } : function(e2, t2) {
    e2.default = t2;
  }), i2 = this && this.__importStar || function(e2) {
    if (e2 && e2.__esModule) return e2;
    var t2 = {};
    if (null != e2) for (var r3 in e2) "default" !== r3 && Object.prototype.hasOwnProperty.call(e2, r3) && n2(t2, e2, r3);
    return o2(t2, e2), t2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.ServerAddress = void 0;
  var a2 = r2(6587), u2 = i2(r2(407)), s2 = function() {
    function e2(e3, t2, r3, n3) {
      this._host = (0, a2.assertString)(e3, "host"), this._resolved = null != t2 ? (0, a2.assertString)(t2, "resolved") : null, this._port = (0, a2.assertNumber)(r3, "port"), this._hostPort = n3, this._stringValue = null != t2 ? "".concat(n3, "(").concat(t2, ")") : "".concat(n3);
    }
    return e2.prototype.host = function() {
      return this._host;
    }, e2.prototype.resolvedHost = function() {
      return null != this._resolved ? this._resolved : this._host;
    }, e2.prototype.port = function() {
      return this._port;
    }, e2.prototype.resolveWith = function(t2) {
      return new e2(this._host, t2, this._port, this._hostPort);
    }, e2.prototype.asHostPort = function() {
      return this._hostPort;
    }, e2.prototype.asKey = function() {
      return this._hostPort;
    }, e2.prototype.toString = function() {
      return this._stringValue;
    }, e2.fromUrl = function(t2) {
      var r3 = u2.parseDatabaseUrl(t2);
      return new e2(r3.host, null, r3.port, r3.hostAndPort);
    }, e2;
  }();
  t.ServerAddress = s2;
}, 7518: function(e, t, r2) {
  var n2 = this && this.__assign || function() {
    return n2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, n2.apply(this, arguments);
  }, o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = o2(r2(7331));
  t.default = n2({}, i2.default);
}, 7521: function(e, t, r2) {
  var n2 = this && this.__assign || function() {
    return n2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, n2.apply(this, arguments);
  }, o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = o2(r2(2066));
  t.default = n2({}, i2.default);
}, 7561: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.refCount = void 0;
  var n2 = r2(7843), o2 = r2(3111);
  t.refCount = function() {
    return n2.operate(function(e2, t2) {
      var r3 = null;
      e2._refCount++;
      var n3 = o2.createOperatorSubscriber(t2, void 0, void 0, void 0, function() {
        if (!e2 || e2._refCount <= 0 || 0 < --e2._refCount) r3 = null;
        else {
          var n4 = e2._connection, o3 = r3;
          r3 = null, !n4 || o3 && n4 !== o3 || n4.unsubscribe(), t2.unsubscribe();
        }
      });
      e2.subscribe(n3), n3.closed || (r3 = e2.connect());
    });
  };
}, 7579: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.connectable = void 0;
  var n2 = r2(2483), o2 = r2(4662), i2 = r2(9353), a2 = { connector: function() {
    return new n2.Subject();
  }, resetOnDisconnect: true };
  t.connectable = function(e2, t2) {
    void 0 === t2 && (t2 = a2);
    var r3 = null, n3 = t2.connector, u2 = t2.resetOnDisconnect, s2 = void 0 === u2 || u2, c2 = n3(), l2 = new o2.Observable(function(e3) {
      return c2.subscribe(e3);
    });
    return l2.connect = function() {
      return r3 && !r3.closed || (r3 = i2.defer(function() {
        return e2;
      }).subscribe(c2), s2 && r3.add(function() {
        return c2 = n3();
      })), r3;
    }, l2;
  };
}, 7589: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.DEFAULT_ACQUISITION_TIMEOUT = t.DEFAULT_MAX_SIZE = void 0;
  var r2 = 100;
  t.DEFAULT_MAX_SIZE = r2;
  var n2 = 6e4;
  t.DEFAULT_ACQUISITION_TIMEOUT = n2;
  var o2 = function() {
    function e2(e3, t2) {
      this.maxSize = i2(e3, r2), this.acquisitionTimeout = i2(t2, n2);
    }
    return e2.defaultConfig = function() {
      return new e2(r2, n2);
    }, e2.fromDriverConfig = function(t2) {
      return new e2(a2(t2.maxConnectionPoolSize) ? t2.maxConnectionPoolSize : r2, a2(t2.connectionAcquisitionTimeout) ? t2.connectionAcquisitionTimeout : n2);
    }, e2;
  }();
  function i2(e2, t2) {
    return a2(e2) ? e2 : t2;
  }
  function a2(e2) {
    return 0 === e2 || null != e2;
  }
  t.default = o2;
}, 7601: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, o2 = this && this.__spreadArray || function(e2, t2) {
    for (var r3 = 0, n3 = t2.length, o3 = e2.length; r3 < n3; r3++, o3++) e2[o3] = t2[r3];
    return e2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.concat = void 0;
  var i2 = r2(7843), a2 = r2(8158), u2 = r2(1107), s2 = r2(4917);
  t.concat = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    var r3 = u2.popScheduler(e2);
    return i2.operate(function(t3, i3) {
      a2.concatAll()(s2.from(o2([t3], n2(e2)), r3)).subscribe(i3);
    });
  };
}, 7610: function(e, t, r2) {
  var n2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u3(0), throw: u3(1), return: u3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u3(i4) {
      return function(u4) {
        return function(i5) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & i5[0] ? n3.return : i5[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, i5[1])).done) return o3;
            switch (n3 = 0, o3 && (i5 = [2 & i5[0], o3.value]), i5[0]) {
              case 0:
              case 1:
                o3 = i5;
                break;
              case 4:
                return a3.label++, { value: i5[1], done: false };
              case 5:
                a3.label++, n3 = i5[1], i5 = [0];
                continue;
              case 7:
                i5 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== i5[0] && 2 !== i5[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === i5[0] && (!o3 || i5[1] > o3[0] && i5[1] < o3[3])) {
                  a3.label = i5[1];
                  break;
                }
                if (6 === i5[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = i5;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(i5);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            i5 = t2.call(e2, a3);
          } catch (e3) {
            i5 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & i5[0]) throw i5[1];
          return { value: i5[0] ? i5[1] : void 0, done: true };
        }([i4, u4]);
      };
    }
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.generate = void 0;
  var o2 = r2(6640), i2 = r2(8613), a2 = r2(9353), u2 = r2(8808);
  t.generate = function(e2, t2, r3, s2, c2) {
    var l2, f2, h2, d2;
    function p3() {
      var e3;
      return n2(this, function(n3) {
        switch (n3.label) {
          case 0:
            e3 = d2, n3.label = 1;
          case 1:
            return t2 && !t2(e3) ? [3, 4] : [4, h2(e3)];
          case 2:
            n3.sent(), n3.label = 3;
          case 3:
            return e3 = r3(e3), [3, 1];
          case 4:
            return [2];
        }
      });
    }
    return 1 === arguments.length ? (d2 = (l2 = e2).initialState, t2 = l2.condition, r3 = l2.iterate, f2 = l2.resultSelector, h2 = void 0 === f2 ? o2.identity : f2, c2 = l2.scheduler) : (d2 = e2, !s2 || i2.isScheduler(s2) ? (h2 = o2.identity, c2 = s2) : h2 = s2), a2.defer(c2 ? function() {
      return u2.scheduleIterable(p3(), c2);
    } : p3);
  };
}, 7614: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.createInvalidObservableTypeError = void 0, t.createInvalidObservableTypeError = function(e2) {
    return new TypeError("You provided " + (null !== e2 && "object" == typeof e2 ? "an invalid object" : "'" + e2 + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
  };
}, 7629: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.isPromise = void 0;
  var n2 = r2(1018);
  t.isPromise = function(e2) {
    return n2.isFunction(null == e2 ? void 0 : e2.then);
  };
}, 7640: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.throttleTime = void 0;
  var n2 = r2(7961), o2 = r2(8941), i2 = r2(4092);
  t.throttleTime = function(e2, t2, r3) {
    void 0 === t2 && (t2 = n2.asyncScheduler);
    var a2 = i2.timer(e2, t2);
    return o2.throttle(function() {
      return a2;
    }, r3);
  };
}, 7661: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.expand = void 0;
  var n2 = r2(7843), o2 = r2(1983);
  t.expand = function(e2, t2, r3) {
    return void 0 === t2 && (t2 = 1 / 0), t2 = (t2 || 0) < 1 ? 1 / 0 : t2, n2.operate(function(n3, i2) {
      return o2.mergeInternals(n3, i2, e2, t2, void 0, true, r3);
    });
  };
}, 7665: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.verifyStructSize = t.Structure = void 0;
  var n2 = r2(9305), o2 = n2.error.PROTOCOL_ERROR, i2 = function() {
    function e2(e3, t2) {
      this.signature = e3, this.fields = t2;
    }
    return Object.defineProperty(e2.prototype, "size", { get: function() {
      return this.fields.length;
    }, enumerable: false, configurable: true }), e2.prototype.toString = function() {
      for (var e3 = "", t2 = 0; t2 < this.fields.length; t2++) t2 > 0 && (e3 += ", "), e3 += this.fields[t2];
      return "Structure(" + this.signature + ", [" + e3 + "])";
    }, e2;
  }();
  t.Structure = i2, t.verifyStructSize = function(e2, t2, r3) {
    if (t2 !== r3) throw (0, n2.newError)("Wrong struct size for ".concat(e2, ", expected ").concat(t2, " but was ").concat(r3), o2);
  }, t.default = i2;
}, 7666: function(e, t, r2) {
  var n2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3);
    var o3 = Object.getOwnPropertyDescriptor(t2, r3);
    o3 && !("get" in o3 ? !t2.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
      return t2[r3];
    } }), Object.defineProperty(e2, n3, o3);
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), o2 = this && this.__exportStar || function(e2, t2) {
    for (var r3 in e2) "default" === r3 || Object.prototype.hasOwnProperty.call(t2, r3) || n2(t2, e2, r3);
  }, i2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.RawRoutingTable = t.BoltProtocol = void 0;
  var a2 = i2(r2(8731)), u2 = i2(r2(6544)), s2 = i2(r2(9054)), c2 = i2(r2(7790));
  o2(r2(9014), t), t.BoltProtocol = s2.default, t.RawRoutingTable = c2.default, t.default = { handshake: a2.default, create: u2.default };
}, 7714: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.createFind = t.find = void 0;
  var n2 = r2(7843), o2 = r2(3111);
  function i2(e2, t2, r3) {
    var n3 = "index" === r3;
    return function(r4, i3) {
      var a2 = 0;
      r4.subscribe(o2.createOperatorSubscriber(i3, function(o3) {
        var u2 = a2++;
        e2.call(t2, o3, u2, r4) && (i3.next(n3 ? u2 : o3), i3.complete());
      }, function() {
        i3.next(n3 ? -1 : void 0), i3.complete();
      }));
    };
  }
  t.find = function(e2, t2) {
    return n2.operate(i2(e2, t2, "value"));
  }, t.createFind = i2;
}, 7721: function(e, t, r2) {
  var n2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3);
    var o3 = Object.getOwnPropertyDescriptor(t2, r3);
    o3 && !("get" in o3 ? !t2.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
      return t2[r3];
    } }), Object.defineProperty(e2, n3, o3);
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), o2 = this && this.__setModuleDefault || (Object.create ? function(e2, t2) {
    Object.defineProperty(e2, "default", { enumerable: true, value: t2 });
  } : function(e2, t2) {
    e2.default = t2;
  }), i2 = this && this.__importStar || function(e2) {
    if (e2 && e2.__esModule) return e2;
    var t2 = {};
    if (null != e2) for (var r3 in e2) "default" !== r3 && Object.prototype.hasOwnProperty.call(e2, r3) && n2(t2, e2, r3);
    return o2(t2, e2), t2;
  }, a2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.createChannelConnection = t.ConnectionErrorHandler = t.DelegateConnection = t.ChannelConnection = t.Connection = void 0;
  var u2 = a2(r2(6385));
  t.Connection = u2.default;
  var s2 = i2(r2(8031));
  t.ChannelConnection = s2.default, Object.defineProperty(t, "createChannelConnection", { enumerable: true, get: function() {
    return s2.createChannelConnection;
  } });
  var c2 = a2(r2(9857));
  t.DelegateConnection = c2.default;
  var l2 = a2(r2(2363));
  t.ConnectionErrorHandler = l2.default, t.default = u2.default;
}, 7740: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.pairs = void 0;
  var n2 = r2(4917);
  t.pairs = function(e2, t2) {
    return n2.from(Object.entries(e2), t2);
  };
}, 7790: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true }), o2(r2(9305));
  var i2 = function() {
    function e2() {
    }
    return e2.ofRecord = function(t2) {
      return null === t2 ? e2.ofNull() : new s2(t2);
    }, e2.ofMessageResponse = function(t2) {
      return null === t2 ? e2.ofNull() : new a2(t2);
    }, e2.ofNull = function() {
      return new u2();
    }, Object.defineProperty(e2.prototype, "ttl", { get: function() {
      throw new Error("Not implemented");
    }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "db", { get: function() {
      throw new Error("Not implemented");
    }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "servers", { get: function() {
      throw new Error("Not implemented");
    }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "isNull", { get: function() {
      throw new Error("Not implemented");
    }, enumerable: false, configurable: true }), e2;
  }();
  t.default = i2;
  var a2 = function(e2) {
    function t2(t3) {
      var r3 = e2.call(this) || this;
      return r3._response = t3, r3;
    }
    return n2(t2, e2), Object.defineProperty(t2.prototype, "ttl", { get: function() {
      return this._response.rt.ttl;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "servers", { get: function() {
      return this._response.rt.servers;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "db", { get: function() {
      return this._response.rt.db;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "isNull", { get: function() {
      return null === this._response;
    }, enumerable: false, configurable: true }), t2;
  }(i2), u2 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), Object.defineProperty(t2.prototype, "isNull", { get: function() {
      return true;
    }, enumerable: false, configurable: true }), t2;
  }(i2), s2 = function(e2) {
    function t2(t3) {
      var r3 = e2.call(this) || this;
      return r3._record = t3, r3;
    }
    return n2(t2, e2), Object.defineProperty(t2.prototype, "ttl", { get: function() {
      return this._record.get("ttl");
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "servers", { get: function() {
      return this._record.get("servers");
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "db", { get: function() {
      return this._record.has("db") ? this._record.get("db") : null;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "isNull", { get: function() {
      return null === this._record;
    }, enumerable: false, configurable: true }), t2;
  }(i2);
}, 7800: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.observeNotification = t.Notification = t.NotificationKind = void 0;
  var n2, o2 = r2(8616), i2 = r2(1004), a2 = r2(1103), u2 = r2(1018);
  (n2 = t.NotificationKind || (t.NotificationKind = {})).NEXT = "N", n2.ERROR = "E", n2.COMPLETE = "C";
  var s2 = function() {
    function e2(e3, t2, r3) {
      this.kind = e3, this.value = t2, this.error = r3, this.hasValue = "N" === e3;
    }
    return e2.prototype.observe = function(e3) {
      return c2(this, e3);
    }, e2.prototype.do = function(e3, t2, r3) {
      var n3 = this, o3 = n3.kind, i3 = n3.value, a3 = n3.error;
      return "N" === o3 ? null == e3 ? void 0 : e3(i3) : "E" === o3 ? null == t2 ? void 0 : t2(a3) : null == r3 ? void 0 : r3();
    }, e2.prototype.accept = function(e3, t2, r3) {
      var n3;
      return u2.isFunction(null === (n3 = e3) || void 0 === n3 ? void 0 : n3.next) ? this.observe(e3) : this.do(e3, t2, r3);
    }, e2.prototype.toObservable = function() {
      var e3 = this, t2 = e3.kind, r3 = e3.value, n3 = e3.error, u3 = "N" === t2 ? i2.of(r3) : "E" === t2 ? a2.throwError(function() {
        return n3;
      }) : "C" === t2 ? o2.EMPTY : 0;
      if (!u3) throw new TypeError("Unexpected notification kind " + t2);
      return u3;
    }, e2.createNext = function(t2) {
      return new e2("N", t2);
    }, e2.createError = function(t2) {
      return new e2("E", void 0, t2);
    }, e2.createComplete = function() {
      return e2.completeNotification;
    }, e2.completeNotification = new e2("C"), e2;
  }();
  function c2(e2, t2) {
    var r3, n3, o3, i3 = e2, a3 = i3.kind, u3 = i3.value, s3 = i3.error;
    if ("string" != typeof a3) throw new TypeError('Invalid notification, missing "kind"');
    "N" === a3 ? null === (r3 = t2.next) || void 0 === r3 || r3.call(t2, u3) : "E" === a3 ? null === (n3 = t2.error) || void 0 === n3 || n3.call(t2, s3) : null === (o3 = t2.complete) || void 0 === o3 || o3.call(t2);
  }
  t.Notification = s2, t.observeNotification = c2;
}, 7815: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.groupBy = void 0;
  var n2 = r2(4662), o2 = r2(9445), i2 = r2(2483), a2 = r2(7843), u2 = r2(3111);
  t.groupBy = function(e2, t2, r3, s2) {
    return a2.operate(function(a3, c2) {
      var l2;
      t2 && "function" != typeof t2 ? (r3 = t2.duration, l2 = t2.element, s2 = t2.connector) : l2 = t2;
      var f2 = /* @__PURE__ */ new Map(), h2 = function(e3) {
        f2.forEach(e3), e3(c2);
      }, d2 = function(e3) {
        return h2(function(t3) {
          return t3.error(e3);
        });
      }, p3 = 0, v3 = false, y3 = new u2.OperatorSubscriber(c2, function(t3) {
        try {
          var a4 = e2(t3), h3 = f2.get(a4);
          if (!h3) {
            f2.set(a4, h3 = s2 ? s2() : new i2.Subject());
            var b2 = (g2 = a4, _2 = h3, (w2 = new n2.Observable(function(e3) {
              p3++;
              var t4 = _2.subscribe(e3);
              return function() {
                t4.unsubscribe(), 0 === --p3 && v3 && y3.unsubscribe();
              };
            })).key = g2, w2);
            if (c2.next(b2), r3) {
              var m2 = u2.createOperatorSubscriber(h3, function() {
                h3.complete(), null == m2 || m2.unsubscribe();
              }, void 0, void 0, function() {
                return f2.delete(a4);
              });
              y3.add(o2.innerFrom(r3(b2)).subscribe(m2));
            }
          }
          h3.next(l2 ? l2(t3) : t3);
        } catch (e3) {
          d2(e3);
        }
        var g2, _2, w2;
      }, function() {
        return h2(function(e3) {
          return e3.complete();
        });
      }, d2, function() {
        return f2.clear();
      }, function() {
        return v3 = true, 0 === p3;
      });
      a3.subscribe(y3);
    });
  };
}, 7835: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.retry = void 0;
  var n2 = r2(7843), o2 = r2(3111), i2 = r2(6640), a2 = r2(4092), u2 = r2(9445);
  t.retry = function(e2) {
    var t2;
    void 0 === e2 && (e2 = 1 / 0);
    var r3 = (t2 = e2 && "object" == typeof e2 ? e2 : { count: e2 }).count, s2 = void 0 === r3 ? 1 / 0 : r3, c2 = t2.delay, l2 = t2.resetOnSuccess, f2 = void 0 !== l2 && l2;
    return s2 <= 0 ? i2.identity : n2.operate(function(e3, t3) {
      var r4, n3 = 0, i3 = function() {
        var l3 = false;
        r4 = e3.subscribe(o2.createOperatorSubscriber(t3, function(e4) {
          f2 && (n3 = 0), t3.next(e4);
        }, void 0, function(e4) {
          if (n3++ < s2) {
            var f3 = function() {
              r4 ? (r4.unsubscribe(), r4 = null, i3()) : l3 = true;
            };
            if (null != c2) {
              var h2 = "number" == typeof c2 ? a2.timer(c2) : u2.innerFrom(c2(e4, n3)), d2 = o2.createOperatorSubscriber(t3, function() {
                d2.unsubscribe(), f3();
              }, function() {
                t3.complete();
              });
              h2.subscribe(d2);
            } else f3();
          } else t3.error(e4);
        })), l3 && (r4.unsubscribe(), r4 = null, i3());
      };
      i3();
    });
  };
}, 7843: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.operate = t.hasLift = void 0;
  var n2 = r2(1018);
  function o2(e2) {
    return n2.isFunction(null == e2 ? void 0 : e2.lift);
  }
  t.hasLift = o2, t.operate = function(e2) {
    return function(t2) {
      if (o2(t2)) return t2.lift(function(t3) {
        try {
          return e2(t3, this);
        } catch (e3) {
          this.error(e3);
        }
      });
      throw new TypeError("Unable to lift unknown Observable type");
    };
  };
}, 7853: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.using = void 0;
  var n2 = r2(4662), o2 = r2(9445), i2 = r2(8616);
  t.using = function(e2, t2) {
    return new n2.Observable(function(r3) {
      var n3 = e2(), a2 = t2(n3);
      return (a2 ? o2.innerFrom(a2) : i2.EMPTY).subscribe(r3), function() {
        n3 && n3.unsubscribe();
      };
    });
  };
}, 7857: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.WRITE = t.READ = t.Driver = void 0;
  var i2 = r2(9305), a2 = o2(r2(3466)), u2 = i2.internal.constants.FETCH_ALL, s2 = i2.driver.READ, c2 = i2.driver.WRITE;
  t.READ = s2, t.WRITE = c2;
  var l2 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), t2.prototype.rxSession = function(e3) {
      var t3 = void 0 === e3 ? {} : e3, r3 = t3.defaultAccessMode, n3 = void 0 === r3 ? c2 : r3, o3 = t3.bookmarks, i3 = t3.database, u3 = void 0 === i3 ? "" : i3, s3 = t3.fetchSize, l3 = t3.impersonatedUser, h2 = t3.bookmarkManager, d2 = t3.notificationFilter, p3 = t3.auth;
      return new a2.default({ session: this._newSession({ defaultAccessMode: n3, bookmarkOrBookmarks: o3, database: u3, impersonatedUser: l3, auth: p3, reactive: false, fetchSize: f2(s3, this._config.fetchSize), bookmarkManager: h2, notificationFilter: d2, log: this._log }), config: this._config, log: this._log });
    }, t2;
  }(i2.Driver);
  function f2(e2, t2) {
    var r3 = parseInt(e2, 10);
    if (r3 > 0 || r3 === u2) return r3;
    if (0 === r3 || r3 < 0) throw new Error("The fetch size can only be a positive value or ".concat(u2, " for ALL. However fetchSize = ").concat(r3));
    return t2;
  }
  t.Driver = l2, t.default = l2;
}, 7961: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.async = t.asyncScheduler = void 0;
  var n2 = r2(5267), o2 = r2(5648);
  t.asyncScheduler = new o2.AsyncScheduler(n2.AsyncAction), t.async = t.asyncScheduler;
}, 7991: (e, t) => {
  t.byteLength = function(e2) {
    var t2 = u2(e2), r3 = t2[0], n3 = t2[1];
    return 3 * (r3 + n3) / 4 - n3;
  }, t.toByteArray = function(e2) {
    var t2, r3, i3 = u2(e2), a3 = i3[0], s3 = i3[1], c3 = new o2(function(e3, t3, r4) {
      return 3 * (t3 + r4) / 4 - r4;
    }(0, a3, s3)), l2 = 0, f2 = s3 > 0 ? a3 - 4 : a3;
    for (r3 = 0; r3 < f2; r3 += 4) t2 = n2[e2.charCodeAt(r3)] << 18 | n2[e2.charCodeAt(r3 + 1)] << 12 | n2[e2.charCodeAt(r3 + 2)] << 6 | n2[e2.charCodeAt(r3 + 3)], c3[l2++] = t2 >> 16 & 255, c3[l2++] = t2 >> 8 & 255, c3[l2++] = 255 & t2;
    return 2 === s3 && (t2 = n2[e2.charCodeAt(r3)] << 2 | n2[e2.charCodeAt(r3 + 1)] >> 4, c3[l2++] = 255 & t2), 1 === s3 && (t2 = n2[e2.charCodeAt(r3)] << 10 | n2[e2.charCodeAt(r3 + 1)] << 4 | n2[e2.charCodeAt(r3 + 2)] >> 2, c3[l2++] = t2 >> 8 & 255, c3[l2++] = 255 & t2), c3;
  }, t.fromByteArray = function(e2) {
    for (var t2, n3 = e2.length, o3 = n3 % 3, i3 = [], a3 = 16383, u3 = 0, s3 = n3 - o3; u3 < s3; u3 += a3) i3.push(c2(e2, u3, u3 + a3 > s3 ? s3 : u3 + a3));
    return 1 === o3 ? (t2 = e2[n3 - 1], i3.push(r2[t2 >> 2] + r2[t2 << 4 & 63] + "==")) : 2 === o3 && (t2 = (e2[n3 - 2] << 8) + e2[n3 - 1], i3.push(r2[t2 >> 10] + r2[t2 >> 4 & 63] + r2[t2 << 2 & 63] + "=")), i3.join("");
  };
  for (var r2 = [], n2 = [], o2 = "undefined" != typeof Uint8Array ? Uint8Array : Array, i2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", a2 = 0; a2 < 64; ++a2) r2[a2] = i2[a2], n2[i2.charCodeAt(a2)] = a2;
  function u2(e2) {
    var t2 = e2.length;
    if (t2 % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    var r3 = e2.indexOf("=");
    return -1 === r3 && (r3 = t2), [r3, r3 === t2 ? 0 : 4 - r3 % 4];
  }
  function s2(e2) {
    return r2[e2 >> 18 & 63] + r2[e2 >> 12 & 63] + r2[e2 >> 6 & 63] + r2[63 & e2];
  }
  function c2(e2, t2, r3) {
    for (var n3, o3 = [], i3 = t2; i3 < r3; i3 += 3) n3 = (e2[i3] << 16 & 16711680) + (e2[i3 + 1] << 8 & 65280) + (255 & e2[i3 + 2]), o3.push(s2(n3));
    return o3.join("");
  }
  n2["-".charCodeAt(0)] = 62, n2["_".charCodeAt(0)] = 63;
}, 8014: function(e, t, r2) {
  var n2 = this && this.__values || function(e2) {
    var t2 = "function" == typeof Symbol && Symbol.iterator, r3 = t2 && e2[t2], n3 = 0;
    if (r3) return r3.call(e2);
    if (e2 && "number" == typeof e2.length) return { next: function() {
      return e2 && n3 >= e2.length && (e2 = void 0), { value: e2 && e2[n3++], done: !e2 };
    } };
    throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }, o2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, i2 = this && this.__spreadArray || function(e2, t2) {
    for (var r3 = 0, n3 = t2.length, o3 = e2.length; r3 < n3; r3++, o3++) e2[o3] = t2[r3];
    return e2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.isSubscription = t.EMPTY_SUBSCRIPTION = t.Subscription = void 0;
  var a2 = r2(1018), u2 = r2(5788), s2 = r2(7479), c2 = function() {
    function e2(e3) {
      this.initialTeardown = e3, this.closed = false, this._parentage = null, this._finalizers = null;
    }
    var t2;
    return e2.prototype.unsubscribe = function() {
      var e3, t3, r3, s3, c3;
      if (!this.closed) {
        this.closed = true;
        var f2 = this._parentage;
        if (f2) if (this._parentage = null, Array.isArray(f2)) try {
          for (var h2 = n2(f2), d2 = h2.next(); !d2.done; d2 = h2.next()) d2.value.remove(this);
        } catch (t4) {
          e3 = { error: t4 };
        } finally {
          try {
            d2 && !d2.done && (t3 = h2.return) && t3.call(h2);
          } finally {
            if (e3) throw e3.error;
          }
        }
        else f2.remove(this);
        var p3 = this.initialTeardown;
        if (a2.isFunction(p3)) try {
          p3();
        } catch (e4) {
          c3 = e4 instanceof u2.UnsubscriptionError ? e4.errors : [e4];
        }
        var v3 = this._finalizers;
        if (v3) {
          this._finalizers = null;
          try {
            for (var y3 = n2(v3), b2 = y3.next(); !b2.done; b2 = y3.next()) {
              var m2 = b2.value;
              try {
                l2(m2);
              } catch (e4) {
                c3 = null != c3 ? c3 : [], e4 instanceof u2.UnsubscriptionError ? c3 = i2(i2([], o2(c3)), o2(e4.errors)) : c3.push(e4);
              }
            }
          } catch (e4) {
            r3 = { error: e4 };
          } finally {
            try {
              b2 && !b2.done && (s3 = y3.return) && s3.call(y3);
            } finally {
              if (r3) throw r3.error;
            }
          }
        }
        if (c3) throw new u2.UnsubscriptionError(c3);
      }
    }, e2.prototype.add = function(t3) {
      var r3;
      if (t3 && t3 !== this) if (this.closed) l2(t3);
      else {
        if (t3 instanceof e2) {
          if (t3.closed || t3._hasParent(this)) return;
          t3._addParent(this);
        }
        (this._finalizers = null !== (r3 = this._finalizers) && void 0 !== r3 ? r3 : []).push(t3);
      }
    }, e2.prototype._hasParent = function(e3) {
      var t3 = this._parentage;
      return t3 === e3 || Array.isArray(t3) && t3.includes(e3);
    }, e2.prototype._addParent = function(e3) {
      var t3 = this._parentage;
      this._parentage = Array.isArray(t3) ? (t3.push(e3), t3) : t3 ? [t3, e3] : e3;
    }, e2.prototype._removeParent = function(e3) {
      var t3 = this._parentage;
      t3 === e3 ? this._parentage = null : Array.isArray(t3) && s2.arrRemove(t3, e3);
    }, e2.prototype.remove = function(t3) {
      var r3 = this._finalizers;
      r3 && s2.arrRemove(r3, t3), t3 instanceof e2 && t3._removeParent(this);
    }, e2.EMPTY = ((t2 = new e2()).closed = true, t2), e2;
  }();
  function l2(e2) {
    a2.isFunction(e2) ? e2() : e2.unsubscribe();
  }
  t.Subscription = c2, t.EMPTY_SUBSCRIPTION = c2.EMPTY, t.isSubscription = function(e2) {
    return e2 instanceof c2 || e2 && "closed" in e2 && a2.isFunction(e2.remove) && a2.isFunction(e2.add) && a2.isFunction(e2.unsubscribe);
  };
}, 8015: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.buffer = void 0;
  var n2 = r2(7843), o2 = r2(1342), i2 = r2(3111), a2 = r2(9445);
  t.buffer = function(e2) {
    return n2.operate(function(t2, r3) {
      var n3 = [];
      return t2.subscribe(i2.createOperatorSubscriber(r3, function(e3) {
        return n3.push(e3);
      }, function() {
        r3.next(n3), r3.complete();
      })), a2.innerFrom(e2).subscribe(i2.createOperatorSubscriber(r3, function() {
        var e3 = n3;
        n3 = [], r3.next(e3);
      }, o2.noop)), function() {
        n3 = null;
      };
    });
  };
}, 8031: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__awaiter || function(e2, t2, r3, n3) {
    return new (r3 || (r3 = Promise))(function(o3, i3) {
      function a3(e3) {
        try {
          s3(n3.next(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function u3(e3) {
        try {
          s3(n3.throw(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function s3(e3) {
        var t3;
        e3.done ? o3(e3.value) : (t3 = e3.value, t3 instanceof r3 ? t3 : new r3(function(e4) {
          e4(t3);
        })).then(a3, u3);
      }
      s3((n3 = n3.apply(e2, t2 || [])).next());
    });
  }, i2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u3(0), throw: u3(1), return: u3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u3(u4) {
      return function(s3) {
        return function(u5) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; i3 && (i3 = 0, u5[0] && (a3 = 0)), a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & u5[0] ? n3.return : u5[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, u5[1])).done) return o3;
            switch (n3 = 0, o3 && (u5 = [2 & u5[0], o3.value]), u5[0]) {
              case 0:
              case 1:
                o3 = u5;
                break;
              case 4:
                return a3.label++, { value: u5[1], done: false };
              case 5:
                a3.label++, n3 = u5[1], u5 = [0];
                continue;
              case 7:
                u5 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== u5[0] && 2 !== u5[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === u5[0] && (!o3 || u5[1] > o3[0] && u5[1] < o3[3])) {
                  a3.label = u5[1];
                  break;
                }
                if (6 === u5[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = u5;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(u5);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            u5 = t2.call(e2, a3);
          } catch (e3) {
            u5 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & u5[0]) throw u5[1];
          return { value: u5[0] ? u5[1] : void 0, done: true };
        }([u4, s3]);
      };
    }
  }, a2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.createChannelConnection = void 0;
  var u2 = r2(7452), s2 = r2(9305), c2 = a2(r2(6385)), l2 = a2(r2(7666)), f2 = s2.error.PROTOCOL_ERROR, h2 = s2.internal.logger.Logger, d2 = 0;
  t.createChannelConnection = function(e2, t2, r3, n3, o3, i3, a3, s3) {
    void 0 === i3 && (i3 = null), void 0 === s3 && (s3 = function(e3) {
      return new u2.Channel(e3);
    });
    var c3 = s3(new u2.ChannelConfig(e2, t2, r3.errorCode(), o3));
    return l2.default.handshake(c3, n3).then(function(o4) {
      var s4 = o4.protocolVersion, f3 = o4.consumeRemainingBuffer, h3 = new u2.Chunker(c3), d3 = new u2.Dechunker(), v3 = new p3(c3, r3, e2, n3, t2.disableLosslessIntegers, i3, h3, t2.notificationFilter, function(e3) {
        return l2.default.create({ version: s4, channel: c3, chunker: h3, dechunker: d3, disableLosslessIntegers: t2.disableLosslessIntegers, useBigInt: t2.useBigInt, serversideRouting: i3, server: e3.server, log: e3.logger, observer: { onObserversCountChange: e3._handleOngoingRequestsNumberChange.bind(e3), onError: e3._handleFatalError.bind(e3), onFailure: e3._resetOnFailure.bind(e3), onProtocolError: e3._handleProtocolError.bind(e3), onErrorApplyTransformation: function(t3) {
          return e3.handleAndTransformError(t3, e3._address);
        } } });
      }, t2.telemetryDisabled, a3);
      return f3(function(e3) {
        return d3.write(e3);
      }), v3;
    }).catch(function(e3) {
      return c3.close().then(function() {
        throw e3;
      });
    });
  };
  var p3 = function(e2) {
    function t2(t3, r3, n3, o3, i3, a3, u3, s3, c3, l3, f3) {
      void 0 === i3 && (i3 = false), void 0 === a3 && (a3 = null), void 0 === f3 && (f3 = function(e3) {
      });
      var p4, v3, y3 = e2.call(this, r3) || this;
      return y3._authToken = null, y3._idle = false, y3._reseting = false, y3._resetObservers = [], y3._id = d2++, y3._address = n3, y3._server = { address: n3.asHostPort() }, y3._creationTimestamp = Date.now(), y3._disableLosslessIntegers = i3, y3._ch = t3, y3._chunker = u3, y3._log = (p4 = y3, new h2((v3 = o3)._level, function(e3, t4) {
        return v3._loggerFunction(e3, "".concat(p4, " ").concat(t4));
      })), y3._serversideRouting = a3, y3._notificationFilter = s3, y3._telemetryDisabledDriverConfig = true === l3, y3._telemetryDisabledConnection = true, y3._ssrCallback = f3, y3._dbConnectionId = null, y3._protocol = c3(y3), y3._isBroken = false, y3._log.isDebugEnabled() && y3._log.debug("created towards ".concat(n3)), y3;
    }
    return n2(t2, e2), t2.prototype.beginTransaction = function(e3) {
      return this._sendTelemetryIfEnabled(e3), this._protocol.beginTransaction(e3);
    }, t2.prototype.run = function(e3, t3, r3) {
      return this._sendTelemetryIfEnabled(r3), this._protocol.run(e3, t3, r3);
    }, t2.prototype._sendTelemetryIfEnabled = function(e3) {
      this._telemetryDisabledConnection || this._telemetryDisabledDriverConfig || null == e3 || null == e3.apiTelemetryConfig || this._protocol.telemetry({ api: e3.apiTelemetryConfig.api }, { onCompleted: e3.apiTelemetryConfig.onTelemetrySuccess, onError: e3.beforeError });
    }, t2.prototype.commitTransaction = function(e3) {
      return this._protocol.commitTransaction(e3);
    }, t2.prototype.rollbackTransaction = function(e3) {
      return this._protocol.rollbackTransaction(e3);
    }, t2.prototype.getProtocolVersion = function() {
      return this._protocol.version;
    }, Object.defineProperty(t2.prototype, "authToken", { get: function() {
      return this._authToken;
    }, set: function(e3) {
      this._authToken = e3;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "supportsReAuth", { get: function() {
      return this._protocol.supportsReAuth;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "id", { get: function() {
      return this._id;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "databaseId", { get: function() {
      return this._dbConnectionId;
    }, set: function(e3) {
      this._dbConnectionId = e3;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "idleTimestamp", { get: function() {
      return this._idleTimestamp;
    }, set: function(e3) {
      this._idleTimestamp = e3;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "creationTimestamp", { get: function() {
      return this._creationTimestamp;
    }, enumerable: false, configurable: true }), t2.prototype.connect = function(e3, t3, r3, n3) {
      return o2(this, void 0, void 0, function() {
        var o3 = this;
        return i2(this, function(i3) {
          switch (i3.label) {
            case 0:
              if (this._protocol.initialized && !this._protocol.supportsReAuth) throw (0, s2.newError)("Connection does not support re-auth");
              return this._authToken = r3, this._protocol.initialized ? [3, 2] : [4, this._initialize(e3, t3, r3)];
            case 1:
            case 3:
              return [2, i3.sent()];
            case 2:
              return n3 ? [4, new Promise(function(e4, t4) {
                o3._protocol.logoff({ onError: t4 }), o3._protocol.logon({ authToken: r3, onError: t4, onComplete: function() {
                  return e4(o3);
                }, flush: true });
              })] : [3, 4];
            case 4:
              return this._protocol.logoff(), this._protocol.logon({ authToken: r3, flush: true }), [2, this];
          }
        });
      });
    }, t2.prototype._initialize = function(e3, t3, r3) {
      var n3 = this, o3 = this;
      return new Promise(function(i3, a3) {
        n3._protocol.initialize({ userAgent: e3, boltAgent: t3, authToken: r3, notificationFilter: n3._notificationFilter, onError: function(e4) {
          return a3(e4);
        }, onComplete: function(e4) {
          var t4;
          if (e4) {
            var r4 = e4.server;
            n3.version && !r4 || (n3.version = r4);
            var a4 = e4.connection_id;
            if (n3.databaseId || (n3.databaseId = a4), e4.hints) {
              var u3 = e4.hints["connection.recv_timeout_seconds"];
              if (null != u3) {
                var c3 = (0, s2.toNumber)(u3);
                Number.isInteger(c3) && c3 > 0 ? n3._ch.setupReceiveTimeout(1e3 * c3) : n3._log.info("Server located at ".concat(n3._address, " supplied an invalid connection receive timeout value (").concat(c3, "). ") + "Please, verify the server configuration and status because this can be the symptom of a bigger issue.");
              }
              true === e4.hints["telemetry.enabled"] && (n3._telemetryDisabledConnection = false), n3.SSREnabledHint = e4.hints["ssr.enabled"];
            }
            n3._ssrCallback(null !== (t4 = n3.SSREnabledHint) && void 0 !== t4 && t4, "OPEN");
          }
          i3(o3);
        } });
      });
    }, t2.prototype.protocol = function() {
      return this._protocol;
    }, Object.defineProperty(t2.prototype, "address", { get: function() {
      return this._address;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "version", { get: function() {
      return this._server.version;
    }, set: function(e3) {
      this._server.version = e3;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "server", { get: function() {
      return this._server;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "logger", { get: function() {
      return this._log;
    }, enumerable: false, configurable: true }), t2.prototype._handleFatalError = function(e3) {
      this._isBroken = true, this._error = this.handleAndTransformError(this._protocol.currentFailure || e3, this._address), this._log.isErrorEnabled() && this._log.error("experienced a fatal error caused by ".concat(this._error, " (").concat(s2.json.stringify(this._error), ")")), this._protocol.notifyFatalError(this._error);
    }, t2.prototype._setIdle = function(e3) {
      this._idle = true, this._ch.stopReceiveTimeout(), this._protocol.queueObserverIfProtocolIsNotBroken(e3);
    }, t2.prototype._unsetIdle = function() {
      this._idle = false, this._updateCurrentObserver();
    }, t2.prototype._queueObserver = function(e3) {
      return this._protocol.queueObserverIfProtocolIsNotBroken(e3);
    }, t2.prototype.hasOngoingObservableRequests = function() {
      return !this._idle && this._protocol.hasOngoingObservableRequests();
    }, t2.prototype.resetAndFlush = function() {
      var e3 = this;
      return new Promise(function(t3, r3) {
        e3._reset({ onError: function(t4) {
          if (e3._isBroken) r3(t4);
          else {
            var n3 = e3._handleProtocolError("Received FAILURE as a response for RESET: ".concat(t4));
            r3(n3);
          }
        }, onComplete: function() {
          t3();
        } });
      });
    }, t2.prototype._resetOnFailure = function() {
      var e3 = this;
      this.isOpen() && this._reset({ onError: function() {
        e3._protocol.resetFailure();
      }, onComplete: function() {
        e3._protocol.resetFailure();
      } });
    }, t2.prototype._reset = function(e3) {
      var t3 = this;
      if (this._reseting) this._protocol.isLastMessageReset() ? this._resetObservers.push(e3) : this._protocol.reset({ onError: function(t4) {
        e3.onError(t4);
      }, onComplete: function() {
        e3.onComplete();
      } });
      else {
        this._resetObservers.push(e3), this._reseting = true;
        var r3 = function(e4) {
          t3._reseting = false;
          var r4 = t3._resetObservers;
          t3._resetObservers = [], r4.forEach(e4);
        };
        this._protocol.reset({ onError: function(e4) {
          r3(function(t4) {
            return t4.onError(e4);
          });
        }, onComplete: function() {
          r3(function(e4) {
            return e4.onComplete();
          });
        } });
      }
    }, t2.prototype._updateCurrentObserver = function() {
      this._protocol.updateCurrentObserver();
    }, t2.prototype.isOpen = function() {
      return !this._isBroken && this._ch._open;
    }, t2.prototype._handleOngoingRequestsNumberChange = function(e3) {
      this._idle || (0 === e3 ? this._ch.stopReceiveTimeout() : this._ch.startReceiveTimeout());
    }, t2.prototype.close = function() {
      var e3;
      return o2(this, void 0, void 0, function() {
        return i2(this, function(t3) {
          switch (t3.label) {
            case 0:
              return this._ssrCallback(null !== (e3 = this.SSREnabledHint) && void 0 !== e3 && e3, "CLOSE"), this._log.isDebugEnabled() && this._log.debug("closing"), this._protocol && this.isOpen() && this._protocol.prepareToClose(), [4, this._ch.close()];
            case 1:
              return t3.sent(), this._log.isDebugEnabled() && this._log.debug("closed"), [2];
          }
        });
      });
    }, t2.prototype.toString = function() {
      return "Connection [".concat(this.id, "][").concat(this.databaseId || "", "]");
    }, t2.prototype._handleProtocolError = function(e3) {
      this._protocol.resetFailure(), this._updateCurrentObserver();
      var t3 = (0, s2.newError)(e3, f2);
      return this._handleFatalError(t3), t3;
    }, t2;
  }(c2.default);
  t.default = p3;
}, 8046: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.isArrayLike = void 0, t.isArrayLike = function(e2) {
    return e2 && "number" == typeof e2.length && "function" != typeof e2;
  };
}, 8079: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.debounceTime = void 0;
  var n2 = r2(7961), o2 = r2(7843), i2 = r2(3111);
  t.debounceTime = function(e2, t2) {
    return void 0 === t2 && (t2 = n2.asyncScheduler), o2.operate(function(r3, n3) {
      var o3 = null, a2 = null, u2 = null, s2 = function() {
        if (o3) {
          o3.unsubscribe(), o3 = null;
          var e3 = a2;
          a2 = null, n3.next(e3);
        }
      };
      function c2() {
        var r4 = u2 + e2, i3 = t2.now();
        if (i3 < r4) return o3 = this.schedule(void 0, r4 - i3), void n3.add(o3);
        s2();
      }
      r3.subscribe(i2.createOperatorSubscriber(n3, function(r4) {
        a2 = r4, u2 = t2.now(), o3 || (o3 = t2.schedule(c2, e2), n3.add(o3));
      }, function() {
        s2(), n3.complete();
      }, void 0, function() {
        a2 = o3 = null;
      }));
    });
  };
}, 8118: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.catchError = void 0;
  var n2 = r2(9445), o2 = r2(3111), i2 = r2(7843);
  t.catchError = function e2(t2) {
    return i2.operate(function(r3, i3) {
      var a2, u2 = null, s2 = false;
      u2 = r3.subscribe(o2.createOperatorSubscriber(i3, void 0, void 0, function(o3) {
        a2 = n2.innerFrom(t2(o3, e2(t2)(r3))), u2 ? (u2.unsubscribe(), u2 = null, a2.subscribe(i3)) : s2 = true;
      })), s2 && (u2.unsubscribe(), u2 = null, a2.subscribe(i3));
    });
  };
}, 8157: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.publishReplay = void 0;
  var n2 = r2(1242), o2 = r2(9247), i2 = r2(1018);
  t.publishReplay = function(e2, t2, r3, a2) {
    r3 && !i2.isFunction(r3) && (a2 = r3);
    var u2 = i2.isFunction(r3) ? r3 : void 0;
    return function(r4) {
      return o2.multicast(new n2.ReplaySubject(e2, t2, a2), u2)(r4);
    };
  };
}, 8158: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.concatAll = void 0;
  var n2 = r2(7302);
  t.concatAll = function() {
    return n2.mergeAll(1);
  };
}, 8208: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.windowTime = void 0;
  var n2 = r2(2483), o2 = r2(7961), i2 = r2(8014), a2 = r2(7843), u2 = r2(3111), s2 = r2(7479), c2 = r2(1107), l2 = r2(7110);
  t.windowTime = function(e2) {
    for (var t2, r3, f2 = [], h2 = 1; h2 < arguments.length; h2++) f2[h2 - 1] = arguments[h2];
    var d2 = null !== (t2 = c2.popScheduler(f2)) && void 0 !== t2 ? t2 : o2.asyncScheduler, p3 = null !== (r3 = f2[0]) && void 0 !== r3 ? r3 : null, v3 = f2[1] || 1 / 0;
    return a2.operate(function(t3, r4) {
      var o3 = [], a3 = false, c3 = function(e3) {
        var t4 = e3.window, r5 = e3.subs;
        t4.complete(), r5.unsubscribe(), s2.arrRemove(o3, e3), a3 && f3();
      }, f3 = function() {
        if (o3) {
          var t4 = new i2.Subscription();
          r4.add(t4);
          var a4 = new n2.Subject(), u3 = { window: a4, subs: t4, seen: 0 };
          o3.push(u3), r4.next(a4.asObservable()), l2.executeSchedule(t4, d2, function() {
            return c3(u3);
          }, e2);
        }
      };
      null !== p3 && p3 >= 0 ? l2.executeSchedule(r4, d2, f3, p3, true) : a3 = true, f3();
      var h3 = function(e3) {
        return o3.slice().forEach(e3);
      }, y3 = function(e3) {
        h3(function(t4) {
          var r5 = t4.window;
          return e3(r5);
        }), e3(r4), r4.unsubscribe();
      };
      return t3.subscribe(u2.createOperatorSubscriber(r4, function(e3) {
        h3(function(t4) {
          t4.window.next(e3), v3 <= ++t4.seen && c3(t4);
        });
      }, function() {
        return y3(function(e3) {
          return e3.complete();
        });
      }, function(e3) {
        return y3(function(t4) {
          return t4.error(e3);
        });
      })), function() {
        o3 = null;
      };
    });
  };
}, 8239: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a2 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a2.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a2;
  }, o2 = this && this.__spreadArray || function(e2, t2) {
    for (var r3 = 0, n3 = t2.length, o3 = e2.length; r3 < n3; r3++, o3++) e2[o3] = t2[r3];
    return e2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.combineLatestWith = void 0;
  var i2 = r2(2551);
  t.combineLatestWith = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    return i2.combineLatest.apply(void 0, o2([], n2(e2)));
  };
}, 8253: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a2 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a2.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a2;
  }, o2 = this && this.__spreadArray || function(e2, t2) {
    for (var r3 = 0, n3 = t2.length, o3 = e2.length; r3 < n3; r3++, o3++) e2[o3] = t2[r3];
    return e2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.mergeWith = void 0;
  var i2 = r2(361);
  t.mergeWith = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    return i2.merge.apply(void 0, o2([], n2(e2)));
  };
}, 8264: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__assign || function() {
    return o2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, o2.apply(this, arguments);
  }, i2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3);
    var o3 = Object.getOwnPropertyDescriptor(t2, r3);
    o3 && !("get" in o3 ? !t2.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
      return t2[r3];
    } }), Object.defineProperty(e2, n3, o3);
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), a2 = this && this.__setModuleDefault || (Object.create ? function(e2, t2) {
    Object.defineProperty(e2, "default", { enumerable: true, value: t2 });
  } : function(e2, t2) {
    e2.default = t2;
  }), u2 = this && this.__importStar || function(e2) {
    if (e2 && e2.__esModule) return e2;
    var t2 = {};
    if (null != e2) for (var r3 in e2) "default" !== r3 && Object.prototype.hasOwnProperty.call(e2, r3) && i2(t2, e2, r3);
    return a2(t2, e2), t2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.resolveCertificateProvider = t.clientCertificateProviders = t.RotatingClientCertificateProvider = t.ClientCertificateProvider = void 0;
  var s2 = u2(r2(4027));
  t.default = function() {
    this.certfile = "", this.keyfile = "", this.password = void 0;
  };
  var c2 = function() {
    function e2() {
    }
    return e2.prototype.hasUpdate = function() {
      throw new Error("Not Implemented");
    }, e2.prototype.getClientCertificate = function() {
      throw new Error("Not Implemented");
    }, e2;
  }();
  t.ClientCertificateProvider = c2;
  var l2 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), t2.prototype.updateCertificate = function(e3) {
      throw new Error("Not implemented");
    }, t2;
  }(c2);
  t.RotatingClientCertificateProvider = l2;
  var f2 = new (function() {
    function e2() {
    }
    return e2.prototype.rotating = function(e3) {
      var t2 = e3.initialCertificate;
      if (null == t2 || !h2(t2)) throw new TypeError("initialCertificate should be ClientCertificate, but got ".concat(s2.stringify(t2)));
      var r3 = o2({}, t2);
      return new y3(r3);
    }, e2;
  }())();
  function h2(e2) {
    return null != e2 && "object" == typeof e2 && "certfile" in e2 && (d2(t2 = e2.certfile) || p3(t2, d2)) && "keyfile" in e2 && function(e3) {
      function t3(e4) {
        return "string" == typeof e4 || null != e4 && "object" == typeof e4 && "path" in e4 && "string" == typeof e4.path && v3("password", e4);
      }
      return t3(e3) || p3(e3, t3);
    }(e2.keyfile) && v3("password", e2);
    var t2;
  }
  function d2(e2) {
    return "string" == typeof e2;
  }
  function p3(e2, t2, r3) {
    return void 0 === r3 && (r3 = false), Array.isArray(e2) && (r3 || e2.length > 0) && e2.filter(t2).length === e2.length;
  }
  function v3(e2, t2) {
    return !(e2 in t2) || null == t2[e2] || "string" == typeof t2[e2];
  }
  t.clientCertificateProviders = f2, Object.freeze(f2), t.resolveCertificateProvider = function(e2) {
    if (null != e2) {
      if ("object" == typeof e2 && "hasUpdate" in e2 && "getClientCertificate" in e2 && "function" == typeof e2.getClientCertificate && "function" == typeof e2.hasUpdate) return e2;
      if (h2(e2)) {
        var t2 = o2({}, e2);
        return { getClientCertificate: function() {
          return t2;
        }, hasUpdate: function() {
          return false;
        } };
      }
      throw new TypeError("clientCertificate should be configured with ClientCertificate or ClientCertificateProvider, but got ".concat(s2.stringify(e2)));
    }
  };
  var y3 = function() {
    function e2(e3, t2) {
      void 0 === t2 && (t2 = false), this._certificate = e3, this._updated = t2;
    }
    return e2.prototype.hasUpdate = function() {
      try {
        return this._updated;
      } finally {
        this._updated = false;
      }
    }, e2.prototype.getClientCertificate = function() {
      return this._certificate;
    }, e2.prototype.updateCertificate = function(e3) {
      if (!h2(e3)) throw new TypeError("certificate should be ClientCertificate, but got ".concat(s2.stringify(e3)));
      this._certificate = o2({}, e3), this._updated = true;
    }, e2;
  }();
}, 8275: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.first = void 0;
  var n2 = r2(2823), o2 = r2(783), i2 = r2(846), a2 = r2(378), u2 = r2(4869), s2 = r2(6640);
  t.first = function(e2, t2) {
    var r3 = arguments.length >= 2;
    return function(c2) {
      return c2.pipe(e2 ? o2.filter(function(t3, r4) {
        return e2(t3, r4, c2);
      }) : s2.identity, i2.take(1), r3 ? a2.defaultIfEmpty(t2) : u2.throwIfEmpty(function() {
        return new n2.EmptyError();
      }));
    };
  };
}, 8320: function(e, t, r2) {
  var n2 = this && this.__assign || function() {
    return n2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, n2.apply(this, arguments);
  }, o2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3);
    var o3 = Object.getOwnPropertyDescriptor(t2, r3);
    o3 && !("get" in o3 ? !t2.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
      return t2[r3];
    } }), Object.defineProperty(e2, n3, o3);
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), i2 = this && this.__setModuleDefault || (Object.create ? function(e2, t2) {
    Object.defineProperty(e2, "default", { enumerable: true, value: t2 });
  } : function(e2, t2) {
    e2.default = t2;
  }), a2 = this && this.__importStar || function(e2) {
    if (e2 && e2.__esModule) return e2;
    var t2 = {};
    if (null != e2) for (var r3 in e2) "default" !== r3 && Object.prototype.hasOwnProperty.call(e2, r3) && o2(t2, e2, r3);
    return i2(t2, e2), t2;
  }, u2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var s2 = r2(397), c2 = (r2(7452), r2(7168)), l2 = a2(r2(7021)), f2 = r2(9014), h2 = r2(9305), d2 = u2(r2(6661)), p3 = u2(r2(3321)), v3 = h2.internal.bookmarks.Bookmarks, y3 = h2.internal.constants, b2 = y3.ACCESS_MODE_WRITE, m2 = y3.BOLT_PROTOCOL_V1, g2 = (h2.internal.logger.Logger, h2.internal.txConfig.TxConfig), _2 = Object.freeze({ OPERATION: "", OPERATION_CODE: "0", CURRENT_SCHEMA: "/" }), w2 = function() {
    function e2(e3, t2, r3, n3, o3, i3) {
      var a3 = void 0 === r3 ? {} : r3, u3 = a3.disableLosslessIntegers, s3 = a3.useBigInt;
      void 0 === n3 && (n3 = function() {
        return null;
      }), this._server = e3 || {}, this._chunker = t2, this._packer = this._createPacker(t2), this._unpacker = this._createUnpacker(u3, s3), this._responseHandler = n3(this), this._log = o3, this._onProtocolError = i3, this._fatalError = null, this._lastMessageSignature = null, this._config = { disableLosslessIntegers: u3, useBigInt: s3 };
    }
    return Object.defineProperty(e2.prototype, "transformer", { get: function() {
      var e3 = this;
      return void 0 === this._transformer && (this._transformer = new p3.default(Object.values(d2.default).map(function(t2) {
        return t2(e3._config, e3._log);
      }))), this._transformer;
    }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "version", { get: function() {
      return m2;
    }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "supportsReAuth", { get: function() {
      return false;
    }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "initialized", { get: function() {
      return !!this._initialized;
    }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "authToken", { get: function() {
      return this._authToken;
    }, enumerable: false, configurable: true }), e2.prototype.packer = function() {
      return this._packer;
    }, e2.prototype.packable = function(e3) {
      return this._packer.packable(e3, this.transformer.toStructure);
    }, e2.prototype.unpacker = function() {
      return this._unpacker;
    }, e2.prototype.unpack = function(e3) {
      return this._unpacker.unpack(e3, this.transformer.fromStructure);
    }, e2.prototype.transformMetadata = function(e3) {
      return e3;
    }, e2.prototype.enrichErrorMetadata = function(e3) {
      return n2(n2({}, e3), { diagnostic_record: null !== e3.diagnostic_record ? n2(n2({}, _2), e3.diagnostic_record) : null });
    }, e2.prototype.initialize = function(e3) {
      var t2 = this, r3 = void 0 === e3 ? {} : e3, n3 = r3.userAgent, o3 = (r3.boltAgent, r3.authToken), i3 = r3.notificationFilter, a3 = r3.onError, u3 = r3.onComplete, c3 = new f2.LoginObserver({ onError: function(e4) {
        return t2._onLoginError(e4, a3);
      }, onCompleted: function(e4) {
        return t2._onLoginCompleted(e4, u3);
      } });
      return (0, s2.assertNotificationFilterIsEmpty)(i3, this._onProtocolError, c3), this.write(l2.default.init(n3, o3), c3, true), c3;
    }, e2.prototype.logoff = function(e3) {
      var t2 = void 0 === e3 ? {} : e3, r3 = t2.onComplete, n3 = t2.onError, o3 = (t2.flush, new f2.LogoffObserver({ onCompleted: r3, onError: n3 })), i3 = (0, h2.newError)("Driver is connected to a database that does not support logoff. Please upgrade to Neo4j 5.5.0 or later in order to use this functionality.");
      throw this._onProtocolError(i3.message), o3.onError(i3), i3;
    }, e2.prototype.logon = function(e3) {
      var t2 = this, r3 = void 0 === e3 ? {} : e3, n3 = r3.authToken, o3 = r3.onComplete, i3 = r3.onError, a3 = (r3.flush, new f2.LoginObserver({ onCompleted: function() {
        return t2._onLoginCompleted({}, n3, o3);
      }, onError: function(e4) {
        return t2._onLoginError(e4, i3);
      } })), u3 = (0, h2.newError)("Driver is connected to a database that does not support logon. Please upgrade to Neo4j 5.5.0 or later in order to use this functionality.");
      throw this._onProtocolError(u3.message), a3.onError(u3), u3;
    }, e2.prototype.prepareToClose = function() {
    }, e2.prototype.beginTransaction = function(e3) {
      var t2 = void 0 === e3 ? {} : e3, r3 = t2.bookmarks, n3 = t2.txConfig, o3 = t2.database, i3 = t2.mode, a3 = t2.impersonatedUser, u3 = t2.notificationFilter, s3 = t2.beforeError, c3 = t2.afterError, l3 = t2.beforeComplete, f3 = t2.afterComplete;
      return this.run("BEGIN", r3 ? r3.asBeginTransactionParameters() : {}, { bookmarks: r3, txConfig: n3, database: o3, mode: i3, impersonatedUser: a3, notificationFilter: u3, beforeError: s3, afterError: c3, beforeComplete: l3, afterComplete: f3, flush: false });
    }, e2.prototype.commitTransaction = function(e3) {
      var t2 = void 0 === e3 ? {} : e3, r3 = t2.beforeError, n3 = t2.afterError, o3 = t2.beforeComplete, i3 = t2.afterComplete;
      return this.run("COMMIT", {}, { bookmarks: v3.empty(), txConfig: g2.empty(), mode: b2, beforeError: r3, afterError: n3, beforeComplete: o3, afterComplete: i3 });
    }, e2.prototype.rollbackTransaction = function(e3) {
      var t2 = void 0 === e3 ? {} : e3, r3 = t2.beforeError, n3 = t2.afterError, o3 = t2.beforeComplete, i3 = t2.afterComplete;
      return this.run("ROLLBACK", {}, { bookmarks: v3.empty(), txConfig: g2.empty(), mode: b2, beforeError: r3, afterError: n3, beforeComplete: o3, afterComplete: i3 });
    }, e2.prototype.run = function(e3, t2, r3) {
      var n3 = void 0 === r3 ? {} : r3, o3 = (n3.bookmarks, n3.txConfig), i3 = n3.database, a3 = (n3.mode, n3.impersonatedUser), u3 = n3.notificationFilter, c3 = n3.beforeKeys, h3 = n3.afterKeys, d3 = n3.beforeError, p4 = n3.afterError, v5 = n3.beforeComplete, y4 = n3.afterComplete, b3 = n3.flush, m3 = void 0 === b3 || b3, g3 = n3.highRecordWatermark, _3 = void 0 === g3 ? Number.MAX_VALUE : g3, w3 = n3.lowRecordWatermark, O2 = void 0 === w3 ? Number.MAX_VALUE : w3, S2 = new f2.ResultStreamObserver({ server: this._server, beforeKeys: c3, afterKeys: h3, beforeError: d3, afterError: p4, beforeComplete: v5, afterComplete: y4, highRecordWatermark: _3, lowRecordWatermark: O2 });
      return (0, s2.assertTxConfigIsEmpty)(o3, this._onProtocolError, S2), (0, s2.assertDatabaseIsEmpty)(i3, this._onProtocolError, S2), (0, s2.assertImpersonatedUserIsEmpty)(a3, this._onProtocolError, S2), (0, s2.assertNotificationFilterIsEmpty)(u3, this._onProtocolError, S2), this.write(l2.default.run(e3, t2), S2, false), this.write(l2.default.pullAll(), S2, m3), S2;
    }, Object.defineProperty(e2.prototype, "currentFailure", { get: function() {
      return this._responseHandler.currentFailure;
    }, enumerable: false, configurable: true }), e2.prototype.reset = function(e3) {
      var t2 = void 0 === e3 ? {} : e3, r3 = t2.onError, n3 = t2.onComplete, o3 = new f2.ResetObserver({ onProtocolError: this._onProtocolError, onError: r3, onComplete: n3 });
      return this.write(l2.default.reset(), o3, true), o3;
    }, e2.prototype.telemetry = function(e3, t2) {
      e3.api;
      var r3 = void 0 === t2 ? {} : t2, n3 = (r3.onError, r3.onCompleted), o3 = new f2.CompletedObserver();
      return n3 && n3(), o3;
    }, e2.prototype._createPacker = function(e3) {
      return new c2.v1.Packer(e3);
    }, e2.prototype._createUnpacker = function(e3, t2) {
      return new c2.v1.Unpacker(e3, t2);
    }, e2.prototype.write = function(e3, t2, r3) {
      if (this.queueObserverIfProtocolIsNotBroken(t2)) {
        this._log.isDebugEnabled() && this._log.debug("C: ".concat(e3)), this._lastMessageSignature = e3.signature;
        var n3 = new c2.structure.Structure(e3.signature, e3.fields);
        this.packable(n3)(), this._chunker.messageBoundary(), r3 && this._chunker.flush();
      }
    }, e2.prototype.isLastMessageLogon = function() {
      return this._lastMessageSignature === l2.SIGNATURES.HELLO || this._lastMessageSignature === l2.SIGNATURES.LOGON;
    }, e2.prototype.isLastMessageReset = function() {
      return this._lastMessageSignature === l2.SIGNATURES.RESET;
    }, e2.prototype.notifyFatalError = function(e3) {
      return this._fatalError = e3, this._responseHandler._notifyErrorToObservers(e3);
    }, e2.prototype.updateCurrentObserver = function() {
      return this._responseHandler._updateCurrentObserver();
    }, e2.prototype.hasOngoingObservableRequests = function() {
      return this._responseHandler.hasOngoingObservableRequests();
    }, e2.prototype.queueObserverIfProtocolIsNotBroken = function(e3) {
      return this.isBroken() ? (this.notifyFatalErrorToObserver(e3), false) : this._responseHandler._queueObserver(e3);
    }, e2.prototype.isBroken = function() {
      return !!this._fatalError;
    }, e2.prototype.notifyFatalErrorToObserver = function(e3) {
      e3 && e3.onError && e3.onError(this._fatalError);
    }, e2.prototype.resetFailure = function() {
      this._responseHandler._resetFailure();
    }, e2.prototype._onLoginCompleted = function(e3, t2, r3) {
      if (this._initialized = true, this._authToken = t2, e3) {
        var n3 = e3.server;
        this._server.version || (this._server.version = n3);
      }
      r3 && r3(e3);
    }, e2.prototype._onLoginError = function(e3, t2) {
      this._onProtocolError(e3.message), t2 && t2(e3);
    }, e2;
  }();
  t.default = w2;
}, 8330: function(e, t, r2) {
  var n2 = this && this.__values || function(e2) {
    var t2 = "function" == typeof Symbol && Symbol.iterator, r3 = t2 && e2[t2], n3 = 0;
    if (r3) return r3.call(e2);
    if (e2 && "number" == typeof e2.length) return { next: function() {
      return e2 && n3 >= e2.length && (e2 = void 0), { value: e2 && e2[n3++], done: !e2 };
    } };
    throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.takeLast = void 0;
  var o2 = r2(8616), i2 = r2(7843), a2 = r2(3111);
  t.takeLast = function(e2) {
    return e2 <= 0 ? function() {
      return o2.EMPTY;
    } : i2.operate(function(t2, r3) {
      var o3 = [];
      t2.subscribe(a2.createOperatorSubscriber(r3, function(t3) {
        o3.push(t3), e2 < o3.length && o3.shift();
      }, function() {
        var e3, t3;
        try {
          for (var i3 = n2(o3), a3 = i3.next(); !a3.done; a3 = i3.next()) {
            var u2 = a3.value;
            r3.next(u2);
          }
        } catch (t4) {
          e3 = { error: t4 };
        } finally {
          try {
            a3 && !a3.done && (t3 = i3.return) && t3.call(i3);
          } finally {
            if (e3) throw e3.error;
          }
        }
        r3.complete();
      }, void 0, function() {
        o3 = null;
      }));
    });
  };
}, 8341: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true });
  var n2 = r2(7509);
  function o2(e2) {
    return Promise.resolve([e2]);
  }
  var i2 = function() {
    function e2(e3) {
      this._resolverFunction = null != e3 ? e3 : o2;
    }
    return e2.prototype.resolve = function(e3) {
      var t2 = this;
      return new Promise(function(r3) {
        return r3(t2._resolverFunction(e3.asHostPort()));
      }).then(function(e4) {
        if (!Array.isArray(e4)) throw new TypeError("Configured resolver function should either return an array of addresses or a Promise resolved with an array of addresses." + "Each address is '<host>:<port>'. Got: ".concat(e4));
        return e4.map(function(e5) {
          return n2.ServerAddress.fromUrl(e5);
        });
      });
    }, e2;
  }();
  t.default = i2;
}, 8522: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.repeat = void 0;
  var n2 = r2(8616), o2 = r2(7843), i2 = r2(3111), a2 = r2(9445), u2 = r2(4092);
  t.repeat = function(e2) {
    var t2, r3, s2 = 1 / 0;
    return null != e2 && ("object" == typeof e2 ? (t2 = e2.count, s2 = void 0 === t2 ? 1 / 0 : t2, r3 = e2.delay) : s2 = e2), s2 <= 0 ? function() {
      return n2.EMPTY;
    } : o2.operate(function(e3, t3) {
      var n3, o3 = 0, c2 = function() {
        if (null == n3 || n3.unsubscribe(), n3 = null, null != r3) {
          var e4 = "number" == typeof r3 ? u2.timer(r3) : a2.innerFrom(r3(o3)), s3 = i2.createOperatorSubscriber(t3, function() {
            s3.unsubscribe(), l2();
          });
          e4.subscribe(s3);
        } else l2();
      }, l2 = function() {
        var r4 = false;
        n3 = e3.subscribe(i2.createOperatorSubscriber(t3, void 0, function() {
          ++o3 < s2 ? n3 ? c2() : r4 = true : t3.complete();
        })), r4 && c2();
      };
      l2();
    });
  };
}, 8535: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.argsOrArgArray = void 0;
  var r2 = Array.isArray;
  t.argsOrArgArray = function(e2) {
    return 1 === e2.length && r2(e2[0]) ? e2[0] : e2;
  };
}, 8538: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a2 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a2.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a2;
  }, o2 = this && this.__spreadArray || function(e2, t2) {
    for (var r3 = 0, n3 = t2.length, o3 = e2.length; r3 < n3; r3++, o3++) e2[o3] = t2[r3];
    return e2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.zipWith = void 0;
  var i2 = r2(5918);
  t.zipWith = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    return i2.zip.apply(void 0, o2([], n2(e2)));
  };
}, 8561: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.bindNodeCallback = void 0;
  var n2 = r2(1439);
  t.bindNodeCallback = function(e2, t2, r3) {
    return n2.bindCallbackInternals(true, e2, t2, r3);
  };
}, 8613: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.isScheduler = void 0;
  var n2 = r2(1018);
  t.isScheduler = function(e2) {
    return e2 && n2.isFunction(e2.schedule);
  };
}, 8616: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.empty = t.EMPTY = void 0;
  var n2 = r2(4662);
  t.EMPTY = new n2.Observable(function(e2) {
    return e2.complete();
  }), t.empty = function(e2) {
    return e2 ? function(e3) {
      return new n2.Observable(function(t2) {
        return e3.schedule(function() {
          return t2.complete();
        });
      });
    }(e2) : t.EMPTY;
  };
}, 8624: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.scan = void 0;
  var n2 = r2(7843), o2 = r2(6384);
  t.scan = function(e2, t2) {
    return n2.operate(o2.scanInternals(e2, t2, arguments.length >= 2, true));
  };
}, 8655: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.never = t.NEVER = void 0;
  var n2 = r2(4662), o2 = r2(1342);
  t.NEVER = new n2.Observable(o2.noop), t.never = function() {
    return t.NEVER;
  };
}, 8669: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.last = void 0;
  var n2 = r2(2823), o2 = r2(783), i2 = r2(8330), a2 = r2(4869), u2 = r2(378), s2 = r2(6640);
  t.last = function(e2, t2) {
    var r3 = arguments.length >= 2;
    return function(c2) {
      return c2.pipe(e2 ? o2.filter(function(t3, r4) {
        return e2(t3, r4, c2);
      }) : s2.identity, i2.takeLast(1), r3 ? u2.defaultIfEmpty(t2) : a2.throwIfEmpty(function() {
        return new n2.EmptyError();
      }));
    };
  };
}, 8712: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.switchScan = void 0;
  var n2 = r2(3879), o2 = r2(7843);
  t.switchScan = function(e2, t2) {
    return o2.operate(function(r3, o3) {
      var i2 = t2;
      return n2.switchMap(function(t3, r4) {
        return e2(i2, t3, r4);
      }, function(e3, t3) {
        return i2 = t3, t3;
      })(r3).subscribe(o3), function() {
        i2 = null;
      };
    });
  };
}, 8731: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true });
  var n2 = r2(7452), o2 = r2(9305), i2 = ["5.8", "5.7", "5.6", "5.4", "5.3", "5.2", "5.1", "5.0", "4.4", "4.3", "4.2", "3.0"];
  function a2(e2, t2) {
    return { major: e2, minor: t2 };
  }
  function u2(e2) {
    for (var t2 = [], r3 = e2[3], n3 = e2[2], o3 = 0; o3 <= e2[1]; o3++) t2.push({ major: r3, minor: n3 - o3 });
    return t2;
  }
  t.default = function(e2, t2) {
    return function(e3, t3) {
      var r3 = this;
      return new Promise(function(i3, u3) {
        var s2 = function(e4) {
          u3(e4);
        };
        e3.onerror = s2.bind(r3), e3._error && s2(e3._error), e3.onmessage = function(e4) {
          try {
            var r4 = function(e5, t4) {
              var r5 = [e5.readUInt8(), e5.readUInt8(), e5.readUInt8(), e5.readUInt8()];
              if (72 === r5[0] && 84 === r5[1] && 84 === r5[2] && 80 === r5[3]) throw t4.error("Handshake failed since server responded with HTTP."), (0, o2.newError)("Server responded HTTP. Make sure you are not trying to connect to the http endpoint (HTTP defaults to port 7474 whereas BOLT defaults to port 7687)");
              return Number(r5[3] + "." + r5[2]);
            }(e4, t3);
            i3({ protocolVersion: r4, capabilites: 0, buffer: e4, consumeRemainingBuffer: function(t4) {
              e4.hasRemaining() && t4(e4.readSlice(e4.remaining()));
            } });
          } catch (e5) {
            u3(e5);
          }
        }, e3.write(function(e4) {
          if (e4.length > 4) throw (0, o2.newError)("It should not have more than 4 versions of the protocol");
          var t4 = (0, n2.alloc)(20);
          return t4.writeInt32(1616949271), e4.forEach(function(e5) {
            if (e5 instanceof Array) {
              var r4 = e5[0], n3 = r4.major, o3 = (i4 = r4.minor) - e5[1].minor;
              t4.writeInt32(o3 << 16 | i4 << 8 | n3);
            } else {
              n3 = e5.major;
              var i4 = e5.minor;
              t4.writeInt32(i4 << 8 | n3);
            }
          }), t4.reset(), t4;
        }([a2(255, 1), [a2(5, 8), a2(5, 0)], [a2(4, 4), a2(4, 2)], a2(3, 0)]));
      });
    }(e2, t2).then(function(t3) {
      return 255.1 === t3.protocolVersion ? function(e3, t4) {
        for (var r3 = t4.readVarInt(), o3 = [], a3 = 0; a3 < r3; a3++) {
          var s2 = [t4.readUInt8(), t4.readUInt8(), t4.readUInt8(), t4.readUInt8()];
          o3 = o3.concat(u2(s2));
        }
        t4.readVarInt();
        var c2 = 0, l2 = 0;
        for (o3.sort(function(e4, t5) {
          return Number(e4.major) !== Number(t5.major) ? Number(t5.major) - Number(e4.major) : Number(t5.minor) - Number(e4.minor);
        }), a3 = 0; a3 < o3.length; a3++) {
          var f2 = o3[a3];
          if (i2.includes(f2.major + "." + f2.minor)) {
            c2 = f2.major, l2 = f2.minor;
            break;
          }
        }
        return new Promise(function(r4, o4) {
          try {
            var i3 = (0, n2.alloc)(5);
            i3.writeInt32(l2 << 8 | c2), i3.writeVarInt(0), e3.write(i3), r4({ protocolVersion: Number(c2 + "." + l2), capabilites: 0, consumeRemainingBuffer: function(e4) {
              t4.hasRemaining() && e4(t4.readSlice(t4.remaining()));
            } });
          } catch (e4) {
            o4(e4);
          }
        });
      }(e2, t3.buffer) : t3;
    });
  };
}, 8766: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.delayWhen = void 0;
  var n2 = r2(3865), o2 = r2(846), i2 = r2(490), a2 = r2(3218), u2 = r2(983), s2 = r2(9445);
  t.delayWhen = function e2(t2, r3) {
    return r3 ? function(a3) {
      return n2.concat(r3.pipe(o2.take(1), i2.ignoreElements()), a3.pipe(e2(t2)));
    } : u2.mergeMap(function(e3, r4) {
      return s2.innerFrom(t2(e3, r4)).pipe(o2.take(1), a2.mapTo(e3));
    });
  };
}, 8774: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.switchAll = void 0;
  var n2 = r2(3879), o2 = r2(6640);
  t.switchAll = function() {
    return n2.switchMap(o2.identity);
  };
}, 8784: (e, t, r2) => {
  var n2 = r2(4704);
  e.exports = n2.slice().concat(["layout", "centroid", "smooth", "case", "mat2x2", "mat2x3", "mat2x4", "mat3x2", "mat3x3", "mat3x4", "mat4x2", "mat4x3", "mat4x4", "uvec2", "uvec3", "uvec4", "samplerCubeShadow", "sampler2DArray", "sampler2DArrayShadow", "isampler2D", "isampler3D", "isamplerCube", "isampler2DArray", "usampler2D", "usampler3D", "usamplerCube", "usampler2DArray", "coherent", "restrict", "readonly", "writeonly", "resource", "atomic_uint", "noperspective", "patch", "sample", "subroutine", "common", "partition", "active", "filter", "image1D", "image2D", "image3D", "imageCube", "iimage1D", "iimage2D", "iimage3D", "iimageCube", "uimage1D", "uimage2D", "uimage3D", "uimageCube", "image1DArray", "image2DArray", "iimage1DArray", "iimage2DArray", "uimage1DArray", "uimage2DArray", "image1DShadow", "image2DShadow", "image1DArrayShadow", "image2DArrayShadow", "imageBuffer", "iimageBuffer", "uimageBuffer", "sampler1DArray", "sampler1DArrayShadow", "isampler1D", "isampler1DArray", "usampler1D", "usampler1DArray", "isampler2DRect", "usampler2DRect", "samplerBuffer", "isamplerBuffer", "usamplerBuffer", "sampler2DMS", "isampler2DMS", "usampler2DMS", "sampler2DMSArray", "isampler2DMSArray", "usampler2DMSArray"]);
}, 8808: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.scheduleIterable = void 0;
  var n2 = r2(4662), o2 = r2(1964), i2 = r2(1018), a2 = r2(7110);
  t.scheduleIterable = function(e2, t2) {
    return new n2.Observable(function(r3) {
      var n3;
      return a2.executeSchedule(r3, t2, function() {
        n3 = e2[o2.iterator](), a2.executeSchedule(r3, t2, function() {
          var e3, t3, o3;
          try {
            t3 = (e3 = n3.next()).value, o3 = e3.done;
          } catch (e4) {
            return void r3.error(e4);
          }
          o3 ? r3.complete() : r3.next(t3);
        }, 0, true);
      }), function() {
        return i2.isFunction(null == n3 ? void 0 : n3.return) && n3.return();
      };
    });
  };
}, 8813: function(e, t, r2) {
  var n2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), Object.defineProperty(e2, n3, { enumerable: true, get: function() {
      return t2[r3];
    } });
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), o2 = this && this.__exportStar || function(e2, t2) {
    for (var r3 in e2) "default" === r3 || Object.prototype.hasOwnProperty.call(t2, r3) || n2(t2, e2, r3);
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.interval = t.iif = t.generate = t.fromEventPattern = t.fromEvent = t.from = t.forkJoin = t.empty = t.defer = t.connectable = t.concat = t.combineLatest = t.bindNodeCallback = t.bindCallback = t.UnsubscriptionError = t.TimeoutError = t.SequenceError = t.ObjectUnsubscribedError = t.NotFoundError = t.EmptyError = t.ArgumentOutOfRangeError = t.firstValueFrom = t.lastValueFrom = t.isObservable = t.identity = t.noop = t.pipe = t.NotificationKind = t.Notification = t.Subscriber = t.Subscription = t.Scheduler = t.VirtualAction = t.VirtualTimeScheduler = t.animationFrameScheduler = t.animationFrame = t.queueScheduler = t.queue = t.asyncScheduler = t.async = t.asapScheduler = t.asap = t.AsyncSubject = t.ReplaySubject = t.BehaviorSubject = t.Subject = t.animationFrames = t.observable = t.ConnectableObservable = t.Observable = void 0, t.filter = t.expand = t.exhaustMap = t.exhaustAll = t.exhaust = t.every = t.endWith = t.elementAt = t.distinctUntilKeyChanged = t.distinctUntilChanged = t.distinct = t.dematerialize = t.delayWhen = t.delay = t.defaultIfEmpty = t.debounceTime = t.debounce = t.count = t.connect = t.concatWith = t.concatMapTo = t.concatMap = t.concatAll = t.combineLatestWith = t.combineLatestAll = t.combineAll = t.catchError = t.bufferWhen = t.bufferToggle = t.bufferTime = t.bufferCount = t.buffer = t.auditTime = t.audit = t.config = t.NEVER = t.EMPTY = t.scheduled = t.zip = t.using = t.timer = t.throwError = t.range = t.race = t.partition = t.pairs = t.onErrorResumeNext = t.of = t.never = t.merge = void 0, t.switchMap = t.switchAll = t.subscribeOn = t.startWith = t.skipWhile = t.skipUntil = t.skipLast = t.skip = t.single = t.shareReplay = t.share = t.sequenceEqual = t.scan = t.sampleTime = t.sample = t.refCount = t.retryWhen = t.retry = t.repeatWhen = t.repeat = t.reduce = t.raceWith = t.publishReplay = t.publishLast = t.publishBehavior = t.publish = t.pluck = t.pairwise = t.onErrorResumeNextWith = t.observeOn = t.multicast = t.min = t.mergeWith = t.mergeScan = t.mergeMapTo = t.mergeMap = t.flatMap = t.mergeAll = t.max = t.materialize = t.mapTo = t.map = t.last = t.isEmpty = t.ignoreElements = t.groupBy = t.first = t.findIndex = t.find = t.finalize = void 0, t.zipWith = t.zipAll = t.withLatestFrom = t.windowWhen = t.windowToggle = t.windowTime = t.windowCount = t.window = t.toArray = t.timestamp = t.timeoutWith = t.timeout = t.timeInterval = t.throwIfEmpty = t.throttleTime = t.throttle = t.tap = t.takeWhile = t.takeUntil = t.takeLast = t.take = t.switchScan = t.switchMapTo = void 0;
  var i2 = r2(4662);
  Object.defineProperty(t, "Observable", { enumerable: true, get: function() {
    return i2.Observable;
  } });
  var a2 = r2(8918);
  Object.defineProperty(t, "ConnectableObservable", { enumerable: true, get: function() {
    return a2.ConnectableObservable;
  } });
  var u2 = r2(3327);
  Object.defineProperty(t, "observable", { enumerable: true, get: function() {
    return u2.observable;
  } });
  var s2 = r2(3110);
  Object.defineProperty(t, "animationFrames", { enumerable: true, get: function() {
    return s2.animationFrames;
  } });
  var c2 = r2(2483);
  Object.defineProperty(t, "Subject", { enumerable: true, get: function() {
    return c2.Subject;
  } });
  var l2 = r2(1637);
  Object.defineProperty(t, "BehaviorSubject", { enumerable: true, get: function() {
    return l2.BehaviorSubject;
  } });
  var f2 = r2(1242);
  Object.defineProperty(t, "ReplaySubject", { enumerable: true, get: function() {
    return f2.ReplaySubject;
  } });
  var h2 = r2(95);
  Object.defineProperty(t, "AsyncSubject", { enumerable: true, get: function() {
    return h2.AsyncSubject;
  } });
  var d2 = r2(3692);
  Object.defineProperty(t, "asap", { enumerable: true, get: function() {
    return d2.asap;
  } }), Object.defineProperty(t, "asapScheduler", { enumerable: true, get: function() {
    return d2.asapScheduler;
  } });
  var p3 = r2(7961);
  Object.defineProperty(t, "async", { enumerable: true, get: function() {
    return p3.async;
  } }), Object.defineProperty(t, "asyncScheduler", { enumerable: true, get: function() {
    return p3.asyncScheduler;
  } });
  var v3 = r2(2886);
  Object.defineProperty(t, "queue", { enumerable: true, get: function() {
    return v3.queue;
  } }), Object.defineProperty(t, "queueScheduler", { enumerable: true, get: function() {
    return v3.queueScheduler;
  } });
  var y3 = r2(3862);
  Object.defineProperty(t, "animationFrame", { enumerable: true, get: function() {
    return y3.animationFrame;
  } }), Object.defineProperty(t, "animationFrameScheduler", { enumerable: true, get: function() {
    return y3.animationFrameScheduler;
  } });
  var b2 = r2(182);
  Object.defineProperty(t, "VirtualTimeScheduler", { enumerable: true, get: function() {
    return b2.VirtualTimeScheduler;
  } }), Object.defineProperty(t, "VirtualAction", { enumerable: true, get: function() {
    return b2.VirtualAction;
  } });
  var m2 = r2(8986);
  Object.defineProperty(t, "Scheduler", { enumerable: true, get: function() {
    return m2.Scheduler;
  } });
  var g2 = r2(8014);
  Object.defineProperty(t, "Subscription", { enumerable: true, get: function() {
    return g2.Subscription;
  } });
  var _2 = r2(5);
  Object.defineProperty(t, "Subscriber", { enumerable: true, get: function() {
    return _2.Subscriber;
  } });
  var w2 = r2(7800);
  Object.defineProperty(t, "Notification", { enumerable: true, get: function() {
    return w2.Notification;
  } }), Object.defineProperty(t, "NotificationKind", { enumerable: true, get: function() {
    return w2.NotificationKind;
  } });
  var O2 = r2(2706);
  Object.defineProperty(t, "pipe", { enumerable: true, get: function() {
    return O2.pipe;
  } });
  var S2 = r2(1342);
  Object.defineProperty(t, "noop", { enumerable: true, get: function() {
    return S2.noop;
  } });
  var E2 = r2(6640);
  Object.defineProperty(t, "identity", { enumerable: true, get: function() {
    return E2.identity;
  } });
  var P2 = r2(1751);
  Object.defineProperty(t, "isObservable", { enumerable: true, get: function() {
    return P2.isObservable;
  } });
  var T2 = r2(6894);
  Object.defineProperty(t, "lastValueFrom", { enumerable: true, get: function() {
    return T2.lastValueFrom;
  } });
  var x3 = r2(9060);
  Object.defineProperty(t, "firstValueFrom", { enumerable: true, get: function() {
    return x3.firstValueFrom;
  } });
  var C2 = r2(7057);
  Object.defineProperty(t, "ArgumentOutOfRangeError", { enumerable: true, get: function() {
    return C2.ArgumentOutOfRangeError;
  } });
  var j2 = r2(2823);
  Object.defineProperty(t, "EmptyError", { enumerable: true, get: function() {
    return j2.EmptyError;
  } });
  var A2 = r2(1759);
  Object.defineProperty(t, "NotFoundError", { enumerable: true, get: function() {
    return A2.NotFoundError;
  } });
  var k2 = r2(9686);
  Object.defineProperty(t, "ObjectUnsubscribedError", { enumerable: true, get: function() {
    return k2.ObjectUnsubscribedError;
  } });
  var R2 = r2(1505);
  Object.defineProperty(t, "SequenceError", { enumerable: true, get: function() {
    return R2.SequenceError;
  } });
  var I2 = r2(1554);
  Object.defineProperty(t, "TimeoutError", { enumerable: true, get: function() {
    return I2.TimeoutError;
  } });
  var M2 = r2(5788);
  Object.defineProperty(t, "UnsubscriptionError", { enumerable: true, get: function() {
    return M2.UnsubscriptionError;
  } });
  var N2 = r2(2713);
  Object.defineProperty(t, "bindCallback", { enumerable: true, get: function() {
    return N2.bindCallback;
  } });
  var D2 = r2(8561);
  Object.defineProperty(t, "bindNodeCallback", { enumerable: true, get: function() {
    return D2.bindNodeCallback;
  } });
  var L2 = r2(3247);
  Object.defineProperty(t, "combineLatest", { enumerable: true, get: function() {
    return L2.combineLatest;
  } });
  var U2 = r2(3865);
  Object.defineProperty(t, "concat", { enumerable: true, get: function() {
    return U2.concat;
  } });
  var F2 = r2(7579);
  Object.defineProperty(t, "connectable", { enumerable: true, get: function() {
    return F2.connectable;
  } });
  var B2 = r2(9353);
  Object.defineProperty(t, "defer", { enumerable: true, get: function() {
    return B2.defer;
  } });
  var z2 = r2(8616);
  Object.defineProperty(t, "empty", { enumerable: true, get: function() {
    return z2.empty;
  } });
  var V2 = r2(9105);
  Object.defineProperty(t, "forkJoin", { enumerable: true, get: function() {
    return V2.forkJoin;
  } });
  var W2 = r2(4917);
  Object.defineProperty(t, "from", { enumerable: true, get: function() {
    return W2.from;
  } });
  var q2 = r2(5337);
  Object.defineProperty(t, "fromEvent", { enumerable: true, get: function() {
    return q2.fromEvent;
  } });
  var G2 = r2(347);
  Object.defineProperty(t, "fromEventPattern", { enumerable: true, get: function() {
    return G2.fromEventPattern;
  } });
  var H2 = r2(7610);
  Object.defineProperty(t, "generate", { enumerable: true, get: function() {
    return H2.generate;
  } });
  var Y2 = r2(4209);
  Object.defineProperty(t, "iif", { enumerable: true, get: function() {
    return Y2.iif;
  } });
  var X2 = r2(6472);
  Object.defineProperty(t, "interval", { enumerable: true, get: function() {
    return X2.interval;
  } });
  var K3 = r2(2833);
  Object.defineProperty(t, "merge", { enumerable: true, get: function() {
    return K3.merge;
  } });
  var Z2 = r2(8655);
  Object.defineProperty(t, "never", { enumerable: true, get: function() {
    return Z2.never;
  } });
  var $3 = r2(1004);
  Object.defineProperty(t, "of", { enumerable: true, get: function() {
    return $3.of;
  } });
  var Q2 = r2(6102);
  Object.defineProperty(t, "onErrorResumeNext", { enumerable: true, get: function() {
    return Q2.onErrorResumeNext;
  } });
  var J2 = r2(7740);
  Object.defineProperty(t, "pairs", { enumerable: true, get: function() {
    return J2.pairs;
  } });
  var ee2 = r2(1699);
  Object.defineProperty(t, "partition", { enumerable: true, get: function() {
    return ee2.partition;
  } });
  var te2 = r2(5584);
  Object.defineProperty(t, "race", { enumerable: true, get: function() {
    return te2.race;
  } });
  var re2 = r2(9376);
  Object.defineProperty(t, "range", { enumerable: true, get: function() {
    return re2.range;
  } });
  var ne2 = r2(1103);
  Object.defineProperty(t, "throwError", { enumerable: true, get: function() {
    return ne2.throwError;
  } });
  var oe2 = r2(4092);
  Object.defineProperty(t, "timer", { enumerable: true, get: function() {
    return oe2.timer;
  } });
  var ie2 = r2(7853);
  Object.defineProperty(t, "using", { enumerable: true, get: function() {
    return ie2.using;
  } });
  var ae2 = r2(7286);
  Object.defineProperty(t, "zip", { enumerable: true, get: function() {
    return ae2.zip;
  } });
  var ue2 = r2(1656);
  Object.defineProperty(t, "scheduled", { enumerable: true, get: function() {
    return ue2.scheduled;
  } });
  var se2 = r2(8616);
  Object.defineProperty(t, "EMPTY", { enumerable: true, get: function() {
    return se2.EMPTY;
  } });
  var ce2 = r2(8655);
  Object.defineProperty(t, "NEVER", { enumerable: true, get: function() {
    return ce2.NEVER;
  } }), o2(r2(6038), t);
  var le2 = r2(3413);
  Object.defineProperty(t, "config", { enumerable: true, get: function() {
    return le2.config;
  } });
  var fe2 = r2(3146);
  Object.defineProperty(t, "audit", { enumerable: true, get: function() {
    return fe2.audit;
  } });
  var he2 = r2(3231);
  Object.defineProperty(t, "auditTime", { enumerable: true, get: function() {
    return he2.auditTime;
  } });
  var de2 = r2(8015);
  Object.defineProperty(t, "buffer", { enumerable: true, get: function() {
    return de2.buffer;
  } });
  var pe2 = r2(5572);
  Object.defineProperty(t, "bufferCount", { enumerable: true, get: function() {
    return pe2.bufferCount;
  } });
  var ve2 = r2(7210);
  Object.defineProperty(t, "bufferTime", { enumerable: true, get: function() {
    return ve2.bufferTime;
  } });
  var ye2 = r2(8995);
  Object.defineProperty(t, "bufferToggle", { enumerable: true, get: function() {
    return ye2.bufferToggle;
  } });
  var be2 = r2(8831);
  Object.defineProperty(t, "bufferWhen", { enumerable: true, get: function() {
    return be2.bufferWhen;
  } });
  var me2 = r2(8118);
  Object.defineProperty(t, "catchError", { enumerable: true, get: function() {
    return me2.catchError;
  } });
  var ge2 = r2(6625);
  Object.defineProperty(t, "combineAll", { enumerable: true, get: function() {
    return ge2.combineAll;
  } });
  var _e2 = r2(6728);
  Object.defineProperty(t, "combineLatestAll", { enumerable: true, get: function() {
    return _e2.combineLatestAll;
  } });
  var we2 = r2(8239);
  Object.defineProperty(t, "combineLatestWith", { enumerable: true, get: function() {
    return we2.combineLatestWith;
  } });
  var Oe2 = r2(8158);
  Object.defineProperty(t, "concatAll", { enumerable: true, get: function() {
    return Oe2.concatAll;
  } });
  var Se2 = r2(9135);
  Object.defineProperty(t, "concatMap", { enumerable: true, get: function() {
    return Se2.concatMap;
  } });
  var Ee2 = r2(9938);
  Object.defineProperty(t, "concatMapTo", { enumerable: true, get: function() {
    return Ee2.concatMapTo;
  } });
  var Pe2 = r2(9669);
  Object.defineProperty(t, "concatWith", { enumerable: true, get: function() {
    return Pe2.concatWith;
  } });
  var Te2 = r2(1483);
  Object.defineProperty(t, "connect", { enumerable: true, get: function() {
    return Te2.connect;
  } });
  var xe2 = r2(1038);
  Object.defineProperty(t, "count", { enumerable: true, get: function() {
    return xe2.count;
  } });
  var Ce2 = r2(4461);
  Object.defineProperty(t, "debounce", { enumerable: true, get: function() {
    return Ce2.debounce;
  } });
  var je2 = r2(8079);
  Object.defineProperty(t, "debounceTime", { enumerable: true, get: function() {
    return je2.debounceTime;
  } });
  var Ae2 = r2(378);
  Object.defineProperty(t, "defaultIfEmpty", { enumerable: true, get: function() {
    return Ae2.defaultIfEmpty;
  } });
  var ke2 = r2(914);
  Object.defineProperty(t, "delay", { enumerable: true, get: function() {
    return ke2.delay;
  } });
  var Re2 = r2(8766);
  Object.defineProperty(t, "delayWhen", { enumerable: true, get: function() {
    return Re2.delayWhen;
  } });
  var Ie2 = r2(7441);
  Object.defineProperty(t, "dematerialize", { enumerable: true, get: function() {
    return Ie2.dematerialize;
  } });
  var Me2 = r2(5365);
  Object.defineProperty(t, "distinct", { enumerable: true, get: function() {
    return Me2.distinct;
  } });
  var Ne2 = r2(8937);
  Object.defineProperty(t, "distinctUntilChanged", { enumerable: true, get: function() {
    return Ne2.distinctUntilChanged;
  } });
  var De2 = r2(9612);
  Object.defineProperty(t, "distinctUntilKeyChanged", { enumerable: true, get: function() {
    return De2.distinctUntilKeyChanged;
  } });
  var Le2 = r2(4520);
  Object.defineProperty(t, "elementAt", { enumerable: true, get: function() {
    return Le2.elementAt;
  } });
  var Ue2 = r2(1776);
  Object.defineProperty(t, "endWith", { enumerable: true, get: function() {
    return Ue2.endWith;
  } });
  var Fe2 = r2(5510);
  Object.defineProperty(t, "every", { enumerable: true, get: function() {
    return Fe2.every;
  } });
  var Be2 = r2(1551);
  Object.defineProperty(t, "exhaust", { enumerable: true, get: function() {
    return Be2.exhaust;
  } });
  var ze2 = r2(2752);
  Object.defineProperty(t, "exhaustAll", { enumerable: true, get: function() {
    return ze2.exhaustAll;
  } });
  var Ve2 = r2(4753);
  Object.defineProperty(t, "exhaustMap", { enumerable: true, get: function() {
    return Ve2.exhaustMap;
  } });
  var We2 = r2(7661);
  Object.defineProperty(t, "expand", { enumerable: true, get: function() {
    return We2.expand;
  } });
  var qe2 = r2(783);
  Object.defineProperty(t, "filter", { enumerable: true, get: function() {
    return qe2.filter;
  } });
  var Ge2 = r2(3555);
  Object.defineProperty(t, "finalize", { enumerable: true, get: function() {
    return Ge2.finalize;
  } });
  var He2 = r2(7714);
  Object.defineProperty(t, "find", { enumerable: true, get: function() {
    return He2.find;
  } });
  var Ye2 = r2(9756);
  Object.defineProperty(t, "findIndex", { enumerable: true, get: function() {
    return Ye2.findIndex;
  } });
  var Xe2 = r2(8275);
  Object.defineProperty(t, "first", { enumerable: true, get: function() {
    return Xe2.first;
  } });
  var Ke2 = r2(7815);
  Object.defineProperty(t, "groupBy", { enumerable: true, get: function() {
    return Ke2.groupBy;
  } });
  var Ze2 = r2(490);
  Object.defineProperty(t, "ignoreElements", { enumerable: true, get: function() {
    return Ze2.ignoreElements;
  } });
  var $e2 = r2(9356);
  Object.defineProperty(t, "isEmpty", { enumerable: true, get: function() {
    return $e2.isEmpty;
  } });
  var Qe2 = r2(8669);
  Object.defineProperty(t, "last", { enumerable: true, get: function() {
    return Qe2.last;
  } });
  var Je2 = r2(5471);
  Object.defineProperty(t, "map", { enumerable: true, get: function() {
    return Je2.map;
  } });
  var et2 = r2(3218);
  Object.defineProperty(t, "mapTo", { enumerable: true, get: function() {
    return et2.mapTo;
  } });
  var tt2 = r2(2360);
  Object.defineProperty(t, "materialize", { enumerable: true, get: function() {
    return tt2.materialize;
  } });
  var rt2 = r2(1415);
  Object.defineProperty(t, "max", { enumerable: true, get: function() {
    return rt2.max;
  } });
  var nt2 = r2(7302);
  Object.defineProperty(t, "mergeAll", { enumerable: true, get: function() {
    return nt2.mergeAll;
  } });
  var ot2 = r2(6902);
  Object.defineProperty(t, "flatMap", { enumerable: true, get: function() {
    return ot2.flatMap;
  } });
  var it2 = r2(983);
  Object.defineProperty(t, "mergeMap", { enumerable: true, get: function() {
    return it2.mergeMap;
  } });
  var at2 = r2(6586);
  Object.defineProperty(t, "mergeMapTo", { enumerable: true, get: function() {
    return at2.mergeMapTo;
  } });
  var ut2 = r2(4408);
  Object.defineProperty(t, "mergeScan", { enumerable: true, get: function() {
    return ut2.mergeScan;
  } });
  var st2 = r2(8253);
  Object.defineProperty(t, "mergeWith", { enumerable: true, get: function() {
    return st2.mergeWith;
  } });
  var ct2 = r2(2669);
  Object.defineProperty(t, "min", { enumerable: true, get: function() {
    return ct2.min;
  } });
  var lt2 = r2(9247);
  Object.defineProperty(t, "multicast", { enumerable: true, get: function() {
    return lt2.multicast;
  } });
  var ft2 = r2(5184);
  Object.defineProperty(t, "observeOn", { enumerable: true, get: function() {
    return ft2.observeOn;
  } });
  var ht2 = r2(1226);
  Object.defineProperty(t, "onErrorResumeNextWith", { enumerable: true, get: function() {
    return ht2.onErrorResumeNextWith;
  } });
  var dt2 = r2(1518);
  Object.defineProperty(t, "pairwise", { enumerable: true, get: function() {
    return dt2.pairwise;
  } });
  var pt2 = r2(4912);
  Object.defineProperty(t, "pluck", { enumerable: true, get: function() {
    return pt2.pluck;
  } });
  var vt2 = r2(766);
  Object.defineProperty(t, "publish", { enumerable: true, get: function() {
    return vt2.publish;
  } });
  var yt2 = r2(7220);
  Object.defineProperty(t, "publishBehavior", { enumerable: true, get: function() {
    return yt2.publishBehavior;
  } });
  var bt2 = r2(6106);
  Object.defineProperty(t, "publishLast", { enumerable: true, get: function() {
    return bt2.publishLast;
  } });
  var mt2 = r2(8157);
  Object.defineProperty(t, "publishReplay", { enumerable: true, get: function() {
    return mt2.publishReplay;
  } });
  var gt2 = r2(5600);
  Object.defineProperty(t, "raceWith", { enumerable: true, get: function() {
    return gt2.raceWith;
  } });
  var _t2 = r2(9139);
  Object.defineProperty(t, "reduce", { enumerable: true, get: function() {
    return _t2.reduce;
  } });
  var wt2 = r2(8522);
  Object.defineProperty(t, "repeat", { enumerable: true, get: function() {
    return wt2.repeat;
  } });
  var Ot2 = r2(6566);
  Object.defineProperty(t, "repeatWhen", { enumerable: true, get: function() {
    return Ot2.repeatWhen;
  } });
  var St2 = r2(7835);
  Object.defineProperty(t, "retry", { enumerable: true, get: function() {
    return St2.retry;
  } });
  var Et2 = r2(9843);
  Object.defineProperty(t, "retryWhen", { enumerable: true, get: function() {
    return Et2.retryWhen;
  } });
  var Pt2 = r2(7561);
  Object.defineProperty(t, "refCount", { enumerable: true, get: function() {
    return Pt2.refCount;
  } });
  var Tt2 = r2(1731);
  Object.defineProperty(t, "sample", { enumerable: true, get: function() {
    return Tt2.sample;
  } });
  var xt2 = r2(6086);
  Object.defineProperty(t, "sampleTime", { enumerable: true, get: function() {
    return xt2.sampleTime;
  } });
  var Ct2 = r2(8624);
  Object.defineProperty(t, "scan", { enumerable: true, get: function() {
    return Ct2.scan;
  } });
  var jt2 = r2(582);
  Object.defineProperty(t, "sequenceEqual", { enumerable: true, get: function() {
    return jt2.sequenceEqual;
  } });
  var At2 = r2(8977);
  Object.defineProperty(t, "share", { enumerable: true, get: function() {
    return At2.share;
  } });
  var kt2 = r2(3133);
  Object.defineProperty(t, "shareReplay", { enumerable: true, get: function() {
    return kt2.shareReplay;
  } });
  var Rt2 = r2(5382);
  Object.defineProperty(t, "single", { enumerable: true, get: function() {
    return Rt2.single;
  } });
  var It2 = r2(3982);
  Object.defineProperty(t, "skip", { enumerable: true, get: function() {
    return It2.skip;
  } });
  var Mt2 = r2(9098);
  Object.defineProperty(t, "skipLast", { enumerable: true, get: function() {
    return Mt2.skipLast;
  } });
  var Nt2 = r2(7372);
  Object.defineProperty(t, "skipUntil", { enumerable: true, get: function() {
    return Nt2.skipUntil;
  } });
  var Dt2 = r2(4721);
  Object.defineProperty(t, "skipWhile", { enumerable: true, get: function() {
    return Dt2.skipWhile;
  } });
  var Lt2 = r2(269);
  Object.defineProperty(t, "startWith", { enumerable: true, get: function() {
    return Lt2.startWith;
  } });
  var Ut2 = r2(8960);
  Object.defineProperty(t, "subscribeOn", { enumerable: true, get: function() {
    return Ut2.subscribeOn;
  } });
  var Ft2 = r2(8774);
  Object.defineProperty(t, "switchAll", { enumerable: true, get: function() {
    return Ft2.switchAll;
  } });
  var Bt2 = r2(3879);
  Object.defineProperty(t, "switchMap", { enumerable: true, get: function() {
    return Bt2.switchMap;
  } });
  var zt2 = r2(3274);
  Object.defineProperty(t, "switchMapTo", { enumerable: true, get: function() {
    return zt2.switchMapTo;
  } });
  var Vt2 = r2(8712);
  Object.defineProperty(t, "switchScan", { enumerable: true, get: function() {
    return Vt2.switchScan;
  } });
  var Wt2 = r2(846);
  Object.defineProperty(t, "take", { enumerable: true, get: function() {
    return Wt2.take;
  } });
  var qt2 = r2(8330);
  Object.defineProperty(t, "takeLast", { enumerable: true, get: function() {
    return qt2.takeLast;
  } });
  var Gt2 = r2(4780);
  Object.defineProperty(t, "takeUntil", { enumerable: true, get: function() {
    return Gt2.takeUntil;
  } });
  var Ht2 = r2(2129);
  Object.defineProperty(t, "takeWhile", { enumerable: true, get: function() {
    return Ht2.takeWhile;
  } });
  var Yt2 = r2(3964);
  Object.defineProperty(t, "tap", { enumerable: true, get: function() {
    return Yt2.tap;
  } });
  var Xt2 = r2(8941);
  Object.defineProperty(t, "throttle", { enumerable: true, get: function() {
    return Xt2.throttle;
  } });
  var Kt2 = r2(7640);
  Object.defineProperty(t, "throttleTime", { enumerable: true, get: function() {
    return Kt2.throttleTime;
  } });
  var Zt2 = r2(4869);
  Object.defineProperty(t, "throwIfEmpty", { enumerable: true, get: function() {
    return Zt2.throwIfEmpty;
  } });
  var $t2 = r2(489);
  Object.defineProperty(t, "timeInterval", { enumerable: true, get: function() {
    return $t2.timeInterval;
  } });
  var Qt2 = r2(1554);
  Object.defineProperty(t, "timeout", { enumerable: true, get: function() {
    return Qt2.timeout;
  } });
  var Jt2 = r2(4862);
  Object.defineProperty(t, "timeoutWith", { enumerable: true, get: function() {
    return Jt2.timeoutWith;
  } });
  var er2 = r2(6505);
  Object.defineProperty(t, "timestamp", { enumerable: true, get: function() {
    return er2.timestamp;
  } });
  var tr2 = r2(2343);
  Object.defineProperty(t, "toArray", { enumerable: true, get: function() {
    return tr2.toArray;
  } });
  var rr2 = r2(5477);
  Object.defineProperty(t, "window", { enumerable: true, get: function() {
    return rr2.window;
  } });
  var nr2 = r2(6746);
  Object.defineProperty(t, "windowCount", { enumerable: true, get: function() {
    return nr2.windowCount;
  } });
  var or2 = r2(8208);
  Object.defineProperty(t, "windowTime", { enumerable: true, get: function() {
    return or2.windowTime;
  } });
  var ir2 = r2(6637);
  Object.defineProperty(t, "windowToggle", { enumerable: true, get: function() {
    return ir2.windowToggle;
  } });
  var ar2 = r2(1141);
  Object.defineProperty(t, "windowWhen", { enumerable: true, get: function() {
    return ar2.windowWhen;
  } });
  var ur2 = r2(5442);
  Object.defineProperty(t, "withLatestFrom", { enumerable: true, get: function() {
    return ur2.withLatestFrom;
  } });
  var sr2 = r2(187);
  Object.defineProperty(t, "zipAll", { enumerable: true, get: function() {
    return sr2.zipAll;
  } });
  var cr2 = r2(8538);
  Object.defineProperty(t, "zipWith", { enumerable: true, get: function() {
    return cr2.zipWith;
  } });
}, 8831: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.bufferWhen = void 0;
  var n2 = r2(7843), o2 = r2(1342), i2 = r2(3111), a2 = r2(9445);
  t.bufferWhen = function(e2) {
    return n2.operate(function(t2, r3) {
      var n3 = null, u2 = null, s2 = function() {
        null == u2 || u2.unsubscribe();
        var t3 = n3;
        n3 = [], t3 && r3.next(t3), a2.innerFrom(e2()).subscribe(u2 = i2.createOperatorSubscriber(r3, s2, o2.noop));
      };
      s2(), t2.subscribe(i2.createOperatorSubscriber(r3, function(e3) {
        return null == n3 ? void 0 : n3.push(e3);
      }, function() {
        n3 && r3.next(n3), r3.complete();
      }, void 0, function() {
        return n3 = u2 = null;
      }));
    });
  };
}, 8888: (e, t, r2) => {
  var n2 = r2(5636).Buffer, o2 = n2.isEncoding || function(e2) {
    switch ((e2 = "" + e2) && e2.toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
      case "raw":
        return true;
      default:
        return false;
    }
  };
  function i2(e2) {
    var t2;
    switch (this.encoding = function(e3) {
      var t3 = function(e4) {
        if (!e4) return "utf8";
        for (var t4; ; ) switch (e4) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return e4;
          default:
            if (t4) return;
            e4 = ("" + e4).toLowerCase(), t4 = true;
        }
      }(e3);
      if ("string" != typeof t3 && (n2.isEncoding === o2 || !o2(e3))) throw new Error("Unknown encoding: " + e3);
      return t3 || e3;
    }(e2), this.encoding) {
      case "utf16le":
        this.text = s2, this.end = c2, t2 = 4;
        break;
      case "utf8":
        this.fillLast = u2, t2 = 4;
        break;
      case "base64":
        this.text = l2, this.end = f2, t2 = 3;
        break;
      default:
        return this.write = h2, void (this.end = d2);
    }
    this.lastNeed = 0, this.lastTotal = 0, this.lastChar = n2.allocUnsafe(t2);
  }
  function a2(e2) {
    return e2 <= 127 ? 0 : e2 >> 5 == 6 ? 2 : e2 >> 4 == 14 ? 3 : e2 >> 3 == 30 ? 4 : e2 >> 6 == 2 ? -1 : -2;
  }
  function u2(e2) {
    var t2 = this.lastTotal - this.lastNeed, r3 = function(e3, t3) {
      if (128 != (192 & t3[0])) return e3.lastNeed = 0, "�";
      if (e3.lastNeed > 1 && t3.length > 1) {
        if (128 != (192 & t3[1])) return e3.lastNeed = 1, "�";
        if (e3.lastNeed > 2 && t3.length > 2 && 128 != (192 & t3[2])) return e3.lastNeed = 2, "�";
      }
    }(this, e2);
    return void 0 !== r3 ? r3 : this.lastNeed <= e2.length ? (e2.copy(this.lastChar, t2, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal)) : (e2.copy(this.lastChar, t2, 0, e2.length), void (this.lastNeed -= e2.length));
  }
  function s2(e2, t2) {
    if ((e2.length - t2) % 2 == 0) {
      var r3 = e2.toString("utf16le", t2);
      if (r3) {
        var n3 = r3.charCodeAt(r3.length - 1);
        if (n3 >= 55296 && n3 <= 56319) return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = e2[e2.length - 2], this.lastChar[1] = e2[e2.length - 1], r3.slice(0, -1);
      }
      return r3;
    }
    return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = e2[e2.length - 1], e2.toString("utf16le", t2, e2.length - 1);
  }
  function c2(e2) {
    var t2 = e2 && e2.length ? this.write(e2) : "";
    if (this.lastNeed) {
      var r3 = this.lastTotal - this.lastNeed;
      return t2 + this.lastChar.toString("utf16le", 0, r3);
    }
    return t2;
  }
  function l2(e2, t2) {
    var r3 = (e2.length - t2) % 3;
    return 0 === r3 ? e2.toString("base64", t2) : (this.lastNeed = 3 - r3, this.lastTotal = 3, 1 === r3 ? this.lastChar[0] = e2[e2.length - 1] : (this.lastChar[0] = e2[e2.length - 2], this.lastChar[1] = e2[e2.length - 1]), e2.toString("base64", t2, e2.length - r3));
  }
  function f2(e2) {
    var t2 = e2 && e2.length ? this.write(e2) : "";
    return this.lastNeed ? t2 + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : t2;
  }
  function h2(e2) {
    return e2.toString(this.encoding);
  }
  function d2(e2) {
    return e2 && e2.length ? this.write(e2) : "";
  }
  t.StringDecoder = i2, i2.prototype.write = function(e2) {
    if (0 === e2.length) return "";
    var t2, r3;
    if (this.lastNeed) {
      if (void 0 === (t2 = this.fillLast(e2))) return "";
      r3 = this.lastNeed, this.lastNeed = 0;
    } else r3 = 0;
    return r3 < e2.length ? t2 ? t2 + this.text(e2, r3) : this.text(e2, r3) : t2 || "";
  }, i2.prototype.end = function(e2) {
    var t2 = e2 && e2.length ? this.write(e2) : "";
    return this.lastNeed ? t2 + "�" : t2;
  }, i2.prototype.text = function(e2, t2) {
    var r3 = function(e3, t3, r4) {
      var n4 = t3.length - 1;
      if (n4 < r4) return 0;
      var o3 = a2(t3[n4]);
      return o3 >= 0 ? (o3 > 0 && (e3.lastNeed = o3 - 1), o3) : --n4 < r4 || -2 === o3 ? 0 : (o3 = a2(t3[n4])) >= 0 ? (o3 > 0 && (e3.lastNeed = o3 - 2), o3) : --n4 < r4 || -2 === o3 ? 0 : (o3 = a2(t3[n4])) >= 0 ? (o3 > 0 && (2 === o3 ? o3 = 0 : e3.lastNeed = o3 - 3), o3) : 0;
    }(this, e2, t2);
    if (!this.lastNeed) return e2.toString("utf8", t2);
    this.lastTotal = r3;
    var n3 = e2.length - (r3 - this.lastNeed);
    return e2.copy(this.lastChar, 0, n3), e2.toString("utf8", t2, n3);
  }, i2.prototype.fillLast = function(e2) {
    if (this.lastNeed <= e2.length) return e2.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
    e2.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, e2.length), this.lastNeed -= e2.length;
  };
}, 8917: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true });
  t.default = function(e2, t2, r2) {
    this.keys = e2, this.records = t2, this.summary = r2;
  };
}, 8918: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }();
  Object.defineProperty(t, "__esModule", { value: true }), t.ConnectableObservable = void 0;
  var o2 = r2(4662), i2 = r2(8014), a2 = r2(7561), u2 = r2(3111), s2 = r2(7843), c2 = function(e2) {
    function t2(t3, r3) {
      var n3 = e2.call(this) || this;
      return n3.source = t3, n3.subjectFactory = r3, n3._subject = null, n3._refCount = 0, n3._connection = null, s2.hasLift(t3) && (n3.lift = t3.lift), n3;
    }
    return n2(t2, e2), t2.prototype._subscribe = function(e3) {
      return this.getSubject().subscribe(e3);
    }, t2.prototype.getSubject = function() {
      var e3 = this._subject;
      return e3 && !e3.isStopped || (this._subject = this.subjectFactory()), this._subject;
    }, t2.prototype._teardown = function() {
      this._refCount = 0;
      var e3 = this._connection;
      this._subject = this._connection = null, null == e3 || e3.unsubscribe();
    }, t2.prototype.connect = function() {
      var e3 = this, t3 = this._connection;
      if (!t3) {
        t3 = this._connection = new i2.Subscription();
        var r3 = this.getSubject();
        t3.add(this.source.subscribe(u2.createOperatorSubscriber(r3, void 0, function() {
          e3._teardown(), r3.complete();
        }, function(t4) {
          e3._teardown(), r3.error(t4);
        }, function() {
          return e3._teardown();
        }))), t3.closed && (this._connection = null, t3 = i2.Subscription.EMPTY);
      }
      return t3;
    }, t2.prototype.refCount = function() {
      return a2.refCount()(this);
    }, t2;
  }(o2.Observable);
  t.ConnectableObservable = c2;
}, 8937: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.distinctUntilChanged = void 0;
  var n2 = r2(6640), o2 = r2(7843), i2 = r2(3111);
  function a2(e2, t2) {
    return e2 === t2;
  }
  t.distinctUntilChanged = function(e2, t2) {
    return void 0 === t2 && (t2 = n2.identity), e2 = null != e2 ? e2 : a2, o2.operate(function(r3, n3) {
      var o3, a3 = true;
      r3.subscribe(i2.createOperatorSubscriber(n3, function(r4) {
        var i3 = t2(r4);
        !a3 && e2(o3, i3) || (a3 = false, o3 = i3, n3.next(r4));
      }));
    });
  };
}, 8941: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.throttle = void 0;
  var n2 = r2(7843), o2 = r2(3111), i2 = r2(9445);
  t.throttle = function(e2, t2) {
    return n2.operate(function(r3, n3) {
      var a2 = null != t2 ? t2 : {}, u2 = a2.leading, s2 = void 0 === u2 || u2, c2 = a2.trailing, l2 = void 0 !== c2 && c2, f2 = false, h2 = null, d2 = null, p3 = false, v3 = function() {
        null == d2 || d2.unsubscribe(), d2 = null, l2 && (m2(), p3 && n3.complete());
      }, y3 = function() {
        d2 = null, p3 && n3.complete();
      }, b2 = function(t3) {
        return d2 = i2.innerFrom(e2(t3)).subscribe(o2.createOperatorSubscriber(n3, v3, y3));
      }, m2 = function() {
        if (f2) {
          f2 = false;
          var e3 = h2;
          h2 = null, n3.next(e3), !p3 && b2(e3);
        }
      };
      r3.subscribe(o2.createOperatorSubscriber(n3, function(e3) {
        f2 = true, h2 = e3, (!d2 || d2.closed) && (s2 ? m2() : b2(e3));
      }, function() {
        p3 = true, (!(l2 && f2 && d2) || d2.closed) && n3.complete();
      }));
    });
  };
}, 8960: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.subscribeOn = void 0;
  var n2 = r2(7843);
  t.subscribeOn = function(e2, t2) {
    return void 0 === t2 && (t2 = 0), n2.operate(function(r3, n3) {
      n3.add(e2.schedule(function() {
        return r3.subscribe(n3);
      }, t2));
    });
  };
}, 8977: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, o2 = this && this.__spreadArray || function(e2, t2) {
    for (var r3 = 0, n3 = t2.length, o3 = e2.length; r3 < n3; r3++, o3++) e2[o3] = t2[r3];
    return e2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.share = void 0;
  var i2 = r2(9445), a2 = r2(2483), u2 = r2(5), s2 = r2(7843);
  function c2(e2, t2) {
    for (var r3 = [], a3 = 2; a3 < arguments.length; a3++) r3[a3 - 2] = arguments[a3];
    if (true !== t2) {
      if (false !== t2) {
        var s3 = new u2.SafeSubscriber({ next: function() {
          s3.unsubscribe(), e2();
        } });
        return i2.innerFrom(t2.apply(void 0, o2([], n2(r3)))).subscribe(s3);
      }
    } else e2();
  }
  t.share = function(e2) {
    void 0 === e2 && (e2 = {});
    var t2 = e2.connector, r3 = void 0 === t2 ? function() {
      return new a2.Subject();
    } : t2, n3 = e2.resetOnError, o3 = void 0 === n3 || n3, l2 = e2.resetOnComplete, f2 = void 0 === l2 || l2, h2 = e2.resetOnRefCountZero, d2 = void 0 === h2 || h2;
    return function(e3) {
      var t3, n4, a3, l3 = 0, h3 = false, p3 = false, v3 = function() {
        null == n4 || n4.unsubscribe(), n4 = void 0;
      }, y3 = function() {
        v3(), t3 = a3 = void 0, h3 = p3 = false;
      }, b2 = function() {
        var e4 = t3;
        y3(), null == e4 || e4.unsubscribe();
      };
      return s2.operate(function(e4, s3) {
        l3++, p3 || h3 || v3();
        var m2 = a3 = null != a3 ? a3 : r3();
        s3.add(function() {
          0 !== --l3 || p3 || h3 || (n4 = c2(b2, d2));
        }), m2.subscribe(s3), !t3 && l3 > 0 && (t3 = new u2.SafeSubscriber({ next: function(e5) {
          return m2.next(e5);
        }, error: function(e5) {
          p3 = true, v3(), n4 = c2(y3, o3, e5), m2.error(e5);
        }, complete: function() {
          h3 = true, v3(), n4 = c2(y3, f2), m2.complete();
        } }), i2.innerFrom(e4).subscribe(t3));
      })(e3);
    };
  };
}, 8986: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.Scheduler = void 0;
  var n2 = r2(9568), o2 = function() {
    function e2(t2, r3) {
      void 0 === r3 && (r3 = e2.now), this.schedulerActionCtor = t2, this.now = r3;
    }
    return e2.prototype.schedule = function(e3, t2, r3) {
      return void 0 === t2 && (t2 = 0), new this.schedulerActionCtor(this, e3).schedule(r3, t2);
    }, e2.now = n2.dateTimestampProvider.now, e2;
  }();
  t.Scheduler = o2;
}, 8987: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__awaiter || function(e2, t2, r3, n3) {
    return new (r3 || (r3 = Promise))(function(o3, i3) {
      function a3(e3) {
        try {
          s3(n3.next(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function u3(e3) {
        try {
          s3(n3.throw(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function s3(e3) {
        var t3;
        e3.done ? o3(e3.value) : (t3 = e3.value, t3 instanceof r3 ? t3 : new r3(function(e4) {
          e4(t3);
        })).then(a3, u3);
      }
      s3((n3 = n3.apply(e2, t2 || [])).next());
    });
  }, i2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u3(0), throw: u3(1), return: u3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u3(u4) {
      return function(s3) {
        return function(u5) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; i3 && (i3 = 0, u5[0] && (a3 = 0)), a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & u5[0] ? n3.return : u5[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, u5[1])).done) return o3;
            switch (n3 = 0, o3 && (u5 = [2 & u5[0], o3.value]), u5[0]) {
              case 0:
              case 1:
                o3 = u5;
                break;
              case 4:
                return a3.label++, { value: u5[1], done: false };
              case 5:
                a3.label++, n3 = u5[1], u5 = [0];
                continue;
              case 7:
                u5 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== u5[0] && 2 !== u5[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === u5[0] && (!o3 || u5[1] > o3[0] && u5[1] < o3[3])) {
                  a3.label = u5[1];
                  break;
                }
                if (6 === u5[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = u5;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(u5);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            u5 = t2.call(e2, a3);
          } catch (e3) {
            u5 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & u5[0]) throw u5[1];
          return { value: u5[0] ? u5[1] : void 0, done: true };
        }([u4, s3]);
      };
    }
  }, a2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, u2 = this && this.__spreadArray || function(e2, t2, r3) {
    if (r3 || 2 === arguments.length) for (var n3, o3 = 0, i3 = t2.length; o3 < i3; o3++) !n3 && o3 in t2 || (n3 || (n3 = Array.prototype.slice.call(t2, 0, o3)), n3[o3] = t2[o3]);
    return e2.concat(n3 || Array.prototype.slice.call(t2));
  }, s2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var c2 = r2(7721), l2 = r2(9305), f2 = s2(r2(1839)), h2 = r2(6781), d2 = s2(r2(4531)), p3 = s2(r2(4271)), v3 = l2.error.SERVICE_UNAVAILABLE, y3 = ["Neo.ClientError.Security.CredentialsExpired", "Neo.ClientError.Security.Forbidden", "Neo.ClientError.Security.TokenExpired", "Neo.ClientError.Security.Unauthorized"], b2 = l2.internal.pool, m2 = b2.Pool, g2 = b2.PoolConfig, _2 = function(e2) {
    function t2(r3, n3) {
      var s3 = r3.id, l3 = r3.config, h3 = r3.log, v5 = r3.userAgent, y4 = r3.boltAgent, b3 = r3.authTokenManager, _3 = r3.newPool, w2 = void 0 === _3 ? function() {
        for (var e3 = [], t3 = 0; t3 < arguments.length; t3++) e3[t3] = arguments[t3];
        return new (m2.bind.apply(m2, u2([void 0], a2(e3), false)))();
      } : _3;
      void 0 === n3 && (n3 = null);
      var O2 = e2.call(this) || this;
      return O2._id = s3, O2._config = l3, O2._log = h3, O2._clientCertificateHolder = new p3.default({ clientCertificateProvider: O2._config.clientCertificate }), O2._authenticationProvider = new f2.default({ authTokenManager: b3, userAgent: v5, boltAgent: y4 }), O2._livenessCheckProvider = new d2.default({ connectionLivenessCheckTimeout: l3.connectionLivenessCheckTimeout }), O2._userAgent = v5, O2._boltAgent = y4, O2._createChannelConnection = n3 || function(e3) {
        return o2(O2, void 0, void 0, function() {
          var t3, r4;
          return i2(this, function(n4) {
            switch (n4.label) {
              case 0:
                return t3 = c2.createChannelConnection, r4 = [e3, this._config, this._createConnectionErrorHandler(), this._log], [4, this._clientCertificateHolder.getClientCertificate()];
              case 1:
                return [2, t3.apply(void 0, r4.concat([n4.sent()]))];
            }
          });
        });
      }, O2._connectionPool = w2({ create: O2._createConnection.bind(O2), destroy: O2._destroyConnection.bind(O2), validateOnAcquire: O2._validateConnectionOnAcquire.bind(O2), validateOnRelease: O2._validateConnectionOnRelease.bind(O2), installIdleObserver: t2._installIdleObserverOnConnection.bind(O2), removeIdleObserver: t2._removeIdleObserverOnConnection.bind(O2), config: g2.fromDriverConfig(l3), log: O2._log }), O2._openConnections = {}, O2;
    }
    return n2(t2, e2), t2.prototype._createConnectionErrorHandler = function() {
      return new c2.ConnectionErrorHandler(v3);
    }, t2.prototype._getClientCertificate = function() {
      return o2(this, void 0, void 0, function() {
        return i2(this, function(e3) {
          return [2, this._config.clientCertificate.getClientCertificate()];
        });
      });
    }, t2.prototype._createConnection = function(e3, t3, r3) {
      var n3 = this, o3 = e3.auth;
      return this._createChannelConnection(t3).then(function(e4) {
        return e4.release = function() {
          return e4.idleTimestamp = Date.now(), r3(t3, e4);
        }, n3._openConnections[e4.id] = e4, n3._authenticationProvider.authenticate({ connection: e4, auth: o3 }).catch(function(t4) {
          throw n3._destroyConnection(e4), t4;
        });
      });
    }, t2.prototype._validateConnectionOnAcquire = function(e3, t3) {
      var r3 = e3.auth, n3 = e3.skipReAuth;
      return o2(this, void 0, void 0, function() {
        var e4, o3;
        return i2(this, function(i3) {
          switch (i3.label) {
            case 0:
              if (!this._validateConnection(t3)) return [2, false];
              i3.label = 1;
            case 1:
              return i3.trys.push([1, 3, , 4]), [4, this._livenessCheckProvider.check(t3)];
            case 2:
              return i3.sent(), [3, 4];
            case 3:
              return e4 = i3.sent(), this._log.debug("The connection ".concat(t3.id, " is not alive because of an error ").concat(e4.code, " '").concat(e4.message, "'")), [2, false];
            case 4:
              return i3.trys.push([4, 6, , 7]), [4, this._authenticationProvider.authenticate({ connection: t3, auth: r3, skipReAuth: n3 })];
            case 5:
              return i3.sent(), [2, true];
            case 6:
              return o3 = i3.sent(), this._log.debug("The connection ".concat(t3.id, " is not valid because of an error ").concat(o3.code, " '").concat(o3.message, "'")), [2, false];
            case 7:
              return [2];
          }
        });
      });
    }, t2.prototype._validateConnectionOnRelease = function(e3) {
      return true !== e3._sticky && this._validateConnection(e3);
    }, t2.prototype._validateConnection = function(e3) {
      if (!e3.isOpen()) return false;
      var t3 = this._config.maxConnectionLifetime;
      return !(Date.now() - e3.creationTimestamp > t3);
    }, t2.prototype._destroyConnection = function(e3) {
      return delete this._openConnections[e3.id], e3.close();
    }, t2.prototype._verifyConnectivityAndGetServerVersion = function(e3) {
      var t3 = e3.address;
      return o2(this, void 0, void 0, function() {
        var e4, r3;
        return i2(this, function(n3) {
          switch (n3.label) {
            case 0:
              return [4, this._connectionPool.acquire({}, t3)];
            case 1:
              e4 = n3.sent(), r3 = new l2.ServerInfo(e4.server, e4.protocol().version), n3.label = 2;
            case 2:
              return n3.trys.push([2, , 5, 7]), e4.protocol().isLastMessageLogon() ? [3, 4] : [4, e4.resetAndFlush()];
            case 3:
              n3.sent(), n3.label = 4;
            case 4:
              return [3, 7];
            case 5:
              return [4, e4.release()];
            case 6:
              return n3.sent(), [7];
            case 7:
              return [2, r3];
          }
        });
      });
    }, t2.prototype._verifyAuthentication = function(e3) {
      var t3 = e3.getAddress, r3 = e3.auth;
      return o2(this, void 0, void 0, function() {
        var e4, n3, o3, a3, u3, s3;
        return i2(this, function(i3) {
          switch (i3.label) {
            case 0:
              e4 = [], i3.label = 1;
            case 1:
              return i3.trys.push([1, 8, 9, 11]), [4, t3()];
            case 2:
              return n3 = i3.sent(), [4, this._connectionPool.acquire({ auth: r3, skipReAuth: true }, n3)];
            case 3:
              if (o3 = i3.sent(), e4.push(o3), a3 = !o3.protocol().isLastMessageLogon(), !o3.supportsReAuth) throw (0, l2.newError)("Driver is connected to a database that does not support user switch.");
              return a3 && o3.supportsReAuth ? [4, this._authenticationProvider.authenticate({ connection: o3, auth: r3, waitReAuth: true, forceReAuth: true })] : [3, 5];
            case 4:
              return i3.sent(), [3, 7];
            case 5:
              return !a3 || o3.supportsReAuth ? [3, 7] : [4, this._connectionPool.acquire({ auth: r3 }, n3, { requireNew: true })];
            case 6:
              (u3 = i3.sent())._sticky = true, e4.push(u3), i3.label = 7;
            case 7:
              return [2, true];
            case 8:
              if (s3 = i3.sent(), y3.includes(s3.code)) return [2, false];
              throw s3;
            case 9:
              return [4, Promise.all(e4.map(function(e5) {
                return e5.release();
              }))];
            case 10:
              return i3.sent(), [7];
            case 11:
              return [2];
          }
        });
      });
    }, t2.prototype._verifyStickyConnection = function(e3) {
      var t3 = e3.auth, r3 = e3.connection;
      return e3.address, o2(this, void 0, void 0, function() {
        var e4, n3;
        return i2(this, function(o3) {
          switch (o3.label) {
            case 0:
              return e4 = h2.object.equals(t3, r3.authToken), n3 = !e4, r3._sticky = e4 && !r3.supportsReAuth, n3 || r3._sticky ? [4, r3.release()] : [3, 2];
            case 1:
              throw o3.sent(), (0, l2.newError)("Driver is connected to a database that does not support user switch.");
            case 2:
              return [2];
          }
        });
      });
    }, t2.prototype.close = function() {
      return o2(this, void 0, void 0, function() {
        return i2(this, function(e3) {
          switch (e3.label) {
            case 0:
              return [4, this._connectionPool.close()];
            case 1:
              return e3.sent(), [4, Promise.all(Object.values(this._openConnections).map(function(e4) {
                return e4.close();
              }))];
            case 2:
              return e3.sent(), [2];
          }
        });
      });
    }, t2._installIdleObserverOnConnection = function(e3, t3) {
      e3._setIdle(t3);
    }, t2._removeIdleObserverOnConnection = function(e3) {
      e3._unsetIdle();
    }, t2.prototype._handleSecurityError = function(e3, t3, r3) {
      return this._authenticationProvider.handleError({ connection: r3, code: e3.code }) && (e3.retriable = true), "Neo.ClientError.Security.AuthorizationExpired" === e3.code && this._connectionPool.apply(t3, function(e4) {
        e4.authToken = null;
      }), r3 && r3.close().catch(function() {
      }), e3;
    }, t2;
  }(l2.ConnectionProvider);
  t.default = _2;
}, 8995: function(e, t, r2) {
  var n2 = this && this.__values || function(e2) {
    var t2 = "function" == typeof Symbol && Symbol.iterator, r3 = t2 && e2[t2], n3 = 0;
    if (r3) return r3.call(e2);
    if (e2 && "number" == typeof e2.length) return { next: function() {
      return e2 && n3 >= e2.length && (e2 = void 0), { value: e2 && e2[n3++], done: !e2 };
    } };
    throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.bufferToggle = void 0;
  var o2 = r2(8014), i2 = r2(7843), a2 = r2(9445), u2 = r2(3111), s2 = r2(1342), c2 = r2(7479);
  t.bufferToggle = function(e2, t2) {
    return i2.operate(function(r3, i3) {
      var l2 = [];
      a2.innerFrom(e2).subscribe(u2.createOperatorSubscriber(i3, function(e3) {
        var r4 = [];
        l2.push(r4);
        var n3 = new o2.Subscription();
        n3.add(a2.innerFrom(t2(e3)).subscribe(u2.createOperatorSubscriber(i3, function() {
          c2.arrRemove(l2, r4), i3.next(r4), n3.unsubscribe();
        }, s2.noop)));
      }, s2.noop)), r3.subscribe(u2.createOperatorSubscriber(i3, function(e3) {
        var t3, r4;
        try {
          for (var o3 = n2(l2), i4 = o3.next(); !i4.done; i4 = o3.next()) i4.value.push(e3);
        } catch (e4) {
          t3 = { error: e4 };
        } finally {
          try {
            i4 && !i4.done && (r4 = o3.return) && r4.call(o3);
          } finally {
            if (t3) throw t3.error;
          }
        }
      }, function() {
        for (; l2.length > 0; ) i3.next(l2.shift());
        i3.complete();
      }));
    });
  };
}, 9014: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.TelemetryObserver = t.ProcedureRouteObserver = t.RouteObserver = t.CompletedObserver = t.FailedObserver = t.ResetObserver = t.LogoffObserver = t.LoginObserver = t.ResultStreamObserver = t.StreamObserver = void 0;
  var i2 = r2(9305), a2 = o2(r2(7790)), u2 = r2(6781), s2 = i2.internal.constants.FETCH_ALL, c2 = i2.error.PROTOCOL_ERROR, l2 = function() {
    function e2() {
    }
    return e2.prototype.onNext = function(e3) {
    }, e2.prototype.onError = function(e3) {
    }, e2.prototype.onCompleted = function(e3) {
    }, e2;
  }();
  t.StreamObserver = l2;
  var f2 = function(e2) {
    function t2(t3) {
      var r3 = void 0 === t3 ? {} : t3, n3 = r3.reactive, o3 = void 0 !== n3 && n3, i3 = r3.moreFunction, a3 = r3.discardFunction, c3 = r3.fetchSize, l3 = void 0 === c3 ? s2 : c3, f3 = r3.beforeError, h3 = r3.afterError, d3 = r3.beforeKeys, p4 = r3.afterKeys, v5 = r3.beforeComplete, y4 = r3.afterComplete, b3 = r3.server, m3 = r3.highRecordWatermark, g3 = void 0 === m3 ? Number.MAX_VALUE : m3, w2 = r3.lowRecordWatermark, O2 = void 0 === w2 ? Number.MAX_VALUE : w2, S2 = r3.enrichMetadata, E2 = r3.onDb, P2 = e2.call(this) || this;
      return P2._fieldKeys = null, P2._fieldLookup = null, P2._head = null, P2._queuedRecords = [], P2._tail = null, P2._error = null, P2._observers = [], P2._meta = {}, P2._server = b3, P2._beforeError = f3, P2._afterError = h3, P2._beforeKeys = d3, P2._afterKeys = p4, P2._beforeComplete = v5, P2._afterComplete = y4, P2._enrichMetadata = S2 || u2.functional.identity, P2._queryId = null, P2._moreFunction = i3, P2._discardFunction = a3, P2._discard = false, P2._fetchSize = l3, P2._lowRecordWatermark = O2, P2._highRecordWatermark = g3, P2._setState(o3 ? _2.READY : _2.READY_STREAMING), P2._setupAutoPull(), P2._paused = false, P2._pulled = !o3, P2._haveRecordStreamed = false, P2._onDb = E2, P2;
    }
    return n2(t2, e2), t2.prototype.pause = function() {
      this._paused = true;
    }, t2.prototype.resume = function() {
      this._paused = false, this._setupAutoPull(true), this._state.pull(this);
    }, t2.prototype.onNext = function(e3) {
      this._haveRecordStreamed = true;
      var t3 = new i2.Record(this._fieldKeys, e3, this._fieldLookup);
      this._observers.some(function(e4) {
        return e4.onNext;
      }) ? this._observers.forEach(function(e4) {
        e4.onNext && e4.onNext(t3);
      }) : (this._queuedRecords.push(t3), this._queuedRecords.length > this._highRecordWatermark && (this._autoPull = false));
    }, t2.prototype.onCompleted = function(e3) {
      this._state.onSuccess(this, e3);
    }, t2.prototype.onError = function(e3) {
      this._state.onError(this, e3);
    }, t2.prototype.cancel = function() {
      this._discard = true;
    }, t2.prototype.prepareToHandleSingleResponse = function() {
      this._head = [], this._fieldKeys = [], this._setState(_2.STREAMING);
    }, t2.prototype.markCompleted = function() {
      this._head = [], this._fieldKeys = [], this._tail = {}, this._setState(_2.SUCCEEDED);
    }, t2.prototype.subscribe = function(e3) {
      if (this._head && e3.onKeys && e3.onKeys(this._head), this._queuedRecords.length > 0 && e3.onNext) for (var t3 = 0; t3 < this._queuedRecords.length; t3++) e3.onNext(this._queuedRecords[t3]), this._queuedRecords.length - t3 - 1 <= this._lowRecordWatermark && (this._autoPull = true, this._state === _2.READY && this._handleStreaming());
      this._tail && e3.onCompleted && e3.onCompleted(this._tail), this._error && e3.onError(this._error), this._observers.push(e3), this._state === _2.READY && this._handleStreaming();
    }, t2.prototype._handleHasMore = function(e3) {
      this._setState(_2.READY), this._handleStreaming(), delete e3.has_more;
    }, t2.prototype._handlePullSuccess = function(e3) {
      var t3 = this, r3 = this._enrichMetadata(Object.assign(this._server ? { server: this._server } : {}, this._meta, { stream_summary: { have_records_streamed: this._haveRecordStreamed, pulled: this._pulled, has_keys: this._fieldKeys.length > 0 } }, e3));
      if ([void 0, null, "r", "w", "rw", "s"].includes(r3.type)) {
        this._setState(_2.SUCCEEDED);
        var n3 = null;
        this._beforeComplete && (n3 = this._beforeComplete(r3));
        var o3 = function() {
          t3._tail = r3, t3._observers.some(function(e4) {
            return e4.onCompleted;
          }) && t3._observers.forEach(function(e4) {
            e4.onCompleted && e4.onCompleted(r3);
          }), t3._afterComplete && t3._afterComplete(r3);
        };
        n3 ? Promise.resolve(n3).then(function() {
          return o3();
        }) : o3();
      } else this.onError((0, i2.newError)(`Server returned invalid query type. Expected one of [undefined, null, "r", "w", "rw", "s"] but got '`.concat(r3.type, "'"), c2));
    }, t2.prototype._handleRunSuccess = function(e3, t3) {
      var r3 = this;
      if (null === this._fieldKeys) {
        if (this._fieldKeys = [], this._fieldLookup = {}, e3.fields && e3.fields.length > 0) {
          this._fieldKeys = e3.fields;
          for (var n3 = 0; n3 < e3.fields.length; n3++) this._fieldLookup[e3.fields[n3]] = n3;
        }
        null !== e3.db && void 0 !== this._onDb && this._onDb(e3.db), null != e3.fields && delete e3.fields, null !== e3.qid && void 0 !== e3.qid && (this._queryId = e3.qid, delete e3.qid), this._storeMetadataForCompletion(e3);
        var o3 = null;
        this._beforeKeys && (o3 = this._beforeKeys(this._fieldKeys));
        var i3 = function() {
          r3._head = r3._fieldKeys, r3._observers.some(function(e4) {
            return e4.onKeys;
          }) && r3._observers.forEach(function(e4) {
            e4.onKeys && e4.onKeys(r3._fieldKeys);
          }), r3._afterKeys && r3._afterKeys(r3._fieldKeys), t3();
        };
        o3 ? Promise.resolve(o3).then(function() {
          return i3();
        }) : i3();
      }
    }, t2.prototype._handleError = function(e3) {
      var t3 = this;
      this._setState(_2.FAILED), this._error = e3;
      var r3 = null;
      this._beforeError && (r3 = this._beforeError(e3));
      var n3 = function() {
        t3._observers.some(function(e4) {
          return e4.onError;
        }) && t3._observers.forEach(function(t4) {
          t4.onError && t4.onError(e3);
        }), t3._afterError && t3._afterError(e3);
      };
      r3 ? Promise.resolve(r3).then(function() {
        return n3();
      }) : n3();
    }, t2.prototype._handleStreaming = function() {
      this._head && this._observers.some(function(e3) {
        return e3.onNext || e3.onCompleted;
      }) && (this._paused || !this._discard && !this._autoPull || this._more());
    }, t2.prototype._more = function() {
      this._discard ? this._discardFunction(this._queryId, this) : (this._pulled = true, this._moreFunction(this._queryId, this._fetchSize, this)), this._setState(_2.STREAMING);
    }, t2.prototype._storeMetadataForCompletion = function(e3) {
      for (var t3 = Object.keys(e3), r3 = t3.length, n3 = ""; r3--; ) n3 = t3[r3], this._meta[n3] = e3[n3];
    }, t2.prototype._setState = function(e3) {
      this._state = e3;
    }, t2.prototype._setupAutoPull = function() {
      this._autoPull = true;
    }, t2;
  }(l2);
  t.ResultStreamObserver = f2;
  var h2 = function(e2) {
    function t2(t3) {
      var r3 = void 0 === t3 ? {} : t3, n3 = r3.onError, o3 = r3.onCompleted, i3 = e2.call(this) || this;
      return i3._onError = n3, i3._onCompleted = o3, i3;
    }
    return n2(t2, e2), t2.prototype.onNext = function(e3) {
      this.onError((0, i2.newError)("Received RECORD when initializing " + i2.json.stringify(e3)));
    }, t2.prototype.onError = function(e3) {
      this._onError && this._onError(e3);
    }, t2.prototype.onCompleted = function(e3) {
      this._onCompleted && this._onCompleted(e3);
    }, t2;
  }(l2);
  t.LoginObserver = h2;
  var d2 = function(e2) {
    function t2(t3) {
      var r3 = void 0 === t3 ? {} : t3, n3 = r3.onError, o3 = r3.onCompleted, i3 = e2.call(this) || this;
      return i3._onError = n3, i3._onCompleted = o3, i3;
    }
    return n2(t2, e2), t2.prototype.onNext = function(e3) {
      this.onError((0, i2.newError)("Received RECORD when logging off " + i2.json.stringify(e3)));
    }, t2.prototype.onError = function(e3) {
      this._onError && this._onError(e3);
    }, t2.prototype.onCompleted = function(e3) {
      this._onCompleted && this._onCompleted(e3);
    }, t2;
  }(l2);
  t.LogoffObserver = d2;
  var p3 = function(e2) {
    function t2(t3) {
      var r3 = void 0 === t3 ? {} : t3, n3 = r3.onProtocolError, o3 = r3.onError, i3 = r3.onComplete, a3 = e2.call(this) || this;
      return a3._onProtocolError = n3, a3._onError = o3, a3._onComplete = i3, a3;
    }
    return n2(t2, e2), t2.prototype.onNext = function(e3) {
      this.onError((0, i2.newError)("Received RECORD when resetting: received record is: " + i2.json.stringify(e3), c2));
    }, t2.prototype.onError = function(e3) {
      e3.code === c2 && this._onProtocolError && this._onProtocolError(e3.message), this._onError && this._onError(e3);
    }, t2.prototype.onCompleted = function(e3) {
      this._onComplete && this._onComplete(e3);
    }, t2;
  }(l2);
  t.ResetObserver = p3;
  var v3 = function(e2) {
    function t2(t3) {
      var r3 = void 0 === t3 ? {} : t3, n3 = r3.onError, o3 = r3.onCompleted, i3 = e2.call(this) || this;
      return i3._onError = n3, i3._onCompleted = o3, i3;
    }
    return n2(t2, e2), t2.prototype.onNext = function(e3) {
      this.onError((0, i2.newError)("Received RECORD when sending telemetry " + i2.json.stringify(e3), c2));
    }, t2.prototype.onError = function(e3) {
      this._onError && this._onError(e3);
    }, t2.prototype.onCompleted = function(e3) {
      this._onCompleted && this._onCompleted(e3);
    }, t2;
  }(f2);
  t.TelemetryObserver = v3;
  var y3 = function(e2) {
    function t2(t3) {
      var r3 = t3.error, n3 = t3.onError, o3 = e2.call(this, { beforeError: n3 }) || this;
      return o3.onError(r3), o3;
    }
    return n2(t2, e2), t2;
  }(f2);
  t.FailedObserver = y3;
  var b2 = function(e2) {
    function t2() {
      var t3 = e2.call(this) || this;
      return e2.prototype.markCompleted.call(t3), t3;
    }
    return n2(t2, e2), t2;
  }(f2);
  t.CompletedObserver = b2;
  var m2 = function(e2) {
    function t2(t3) {
      var r3 = t3.resultObserver, n3 = t3.onProtocolError, o3 = t3.onError, i3 = t3.onCompleted, a3 = e2.call(this) || this;
      return a3._resultObserver = r3, a3._onError = o3, a3._onCompleted = i3, a3._records = [], a3._onProtocolError = n3, r3.subscribe(a3), a3;
    }
    return n2(t2, e2), t2.prototype.onNext = function(e3) {
      this._records.push(e3);
    }, t2.prototype.onError = function(e3) {
      e3.code === c2 && this._onProtocolError && this._onProtocolError(e3.message), this._onError && this._onError(e3);
    }, t2.prototype.onCompleted = function() {
      null === this._records || 1 === this._records.length ? this._onCompleted && this._onCompleted(a2.default.ofRecord(this._records[0])) : this.onError((0, i2.newError)("Illegal response from router. Received " + this._records.length + " records but expected only one.\n" + i2.json.stringify(this._records), c2));
    }, t2;
  }(l2);
  t.ProcedureRouteObserver = m2;
  var g2 = function(e2) {
    function t2(t3) {
      var r3 = void 0 === t3 ? {} : t3, n3 = r3.onProtocolError, o3 = r3.onError, i3 = r3.onCompleted, a3 = e2.call(this) || this;
      return a3._onProtocolError = n3, a3._onError = o3, a3._onCompleted = i3, a3;
    }
    return n2(t2, e2), t2.prototype.onNext = function(e3) {
      this.onError((0, i2.newError)("Received RECORD when resetting: received record is: " + i2.json.stringify(e3), c2));
    }, t2.prototype.onError = function(e3) {
      e3.code === c2 && this._onProtocolError && this._onProtocolError(e3.message), this._onError && this._onError(e3);
    }, t2.prototype.onCompleted = function(e3) {
      this._onCompleted && this._onCompleted(a2.default.ofMessageResponse(e3));
    }, t2;
  }(l2);
  t.RouteObserver = g2;
  var _2 = { READY_STREAMING: { onSuccess: function(e2, t2) {
    e2._handleRunSuccess(t2, function() {
      e2._setState(_2.STREAMING);
    });
  }, onError: function(e2, t2) {
    e2._handleError(t2);
  }, name: function() {
    return "READY_STREAMING";
  }, pull: function() {
  } }, READY: { onSuccess: function(e2, t2) {
    e2._handleRunSuccess(t2, function() {
      return e2._handleStreaming();
    });
  }, onError: function(e2, t2) {
    e2._handleError(t2);
  }, name: function() {
    return "READY";
  }, pull: function(e2) {
    return e2._more();
  } }, STREAMING: { onSuccess: function(e2, t2) {
    t2.has_more ? e2._handleHasMore(t2) : e2._handlePullSuccess(t2);
  }, onError: function(e2, t2) {
    e2._handleError(t2);
  }, name: function() {
    return "STREAMING";
  }, pull: function() {
  } }, FAILED: { onError: function(e2) {
  }, name: function() {
    return "FAILED";
  }, pull: function() {
  } }, SUCCEEDED: { name: function() {
    return "SUCCEEDED";
  }, pull: function() {
  } } };
}, 9018: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, o2 = this && this.__spreadArray || function(e2, t2, r3) {
    if (r3 || 2 === arguments.length) for (var n3, o3 = 0, i3 = t2.length; o3 < i3; o3++) !n3 && o3 in t2 || (n3 || (n3 = Array.prototype.slice.call(t2, 0, o3)), n3[o3] = t2[o3]);
    return e2.concat(n3 || Array.prototype.slice.call(t2));
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.createValidRoutingTable = void 0;
  var i2 = r2(9305), a2 = i2.internal.constants, u2 = a2.ACCESS_MODE_WRITE, s2 = a2.ACCESS_MODE_READ, c2 = i2.internal.serverAddress.ServerAddress, l2 = i2.error.PROTOCOL_ERROR, f2 = function() {
    function e2(e3) {
      var t2 = void 0 === e3 ? {} : e3, r3 = t2.database, n3 = t2.routers, o3 = t2.readers, a3 = t2.writers, u3 = t2.expirationTime, s3 = t2.ttl;
      this.database = r3 || null, this.databaseName = r3 || "default database", this.routers = n3 || [], this.readers = o3 || [], this.writers = a3 || [], this.expirationTime = u3 || (0, i2.int)(0), this.ttl = s3;
    }
    return e2.fromRawRoutingTable = function(e3, t2, r3) {
      return d2(e3, t2, r3);
    }, e2.prototype.forget = function(e3) {
      this.readers = h2(this.readers, e3), this.writers = h2(this.writers, e3);
    }, e2.prototype.forgetRouter = function(e3) {
      this.routers = h2(this.routers, e3);
    }, e2.prototype.forgetWriter = function(e3) {
      this.writers = h2(this.writers, e3);
    }, e2.prototype.isStaleFor = function(e3) {
      return this.expirationTime.lessThan(Date.now()) || this.routers.length < 1 || e3 === s2 && 0 === this.readers.length || e3 === u2 && 0 === this.writers.length;
    }, e2.prototype.isExpiredFor = function(e3) {
      return this.expirationTime.add(e3).lessThan(Date.now());
    }, e2.prototype.allServers = function() {
      return o2(o2(o2([], n2(this.routers), false), n2(this.readers), false), n2(this.writers), false);
    }, e2.prototype.toString = function() {
      return "RoutingTable[" + "database=".concat(this.databaseName, ", ") + "expirationTime=".concat(this.expirationTime, ", ") + "currentTime=".concat(Date.now(), ", ") + "routers=[".concat(this.routers, "], ") + "readers=[".concat(this.readers, "], ") + "writers=[".concat(this.writers, "]]");
    }, e2;
  }();
  function h2(e2, t2) {
    return e2.filter(function(e3) {
      return e3.asKey() !== t2.asKey();
    });
  }
  function d2(e2, t2, r3) {
    var n3 = r3.ttl, o3 = function(e3, t3) {
      try {
        var r4 = (0, i2.int)(Date.now()), n4 = (0, i2.int)(e3.ttl).multiply(1e3).add(r4);
        return n4.lessThan(r4) ? i2.Integer.MAX_VALUE : n4;
      } catch (r5) {
        throw (0, i2.newError)("Unable to parse TTL entry from router ".concat(t3, " from raw routing table:\n").concat(i2.json.stringify(e3), "\nError message: ").concat(r5.message), l2);
      }
    }(r3, t2), a3 = function(e3, t3) {
      try {
        var r4 = [], n4 = [], o4 = [];
        return e3.servers.forEach(function(e4) {
          var t4 = e4.role, i3 = e4.addresses;
          "ROUTE" === t4 ? r4 = v3(i3).map(function(e5) {
            return c2.fromUrl(e5);
          }) : "WRITE" === t4 ? o4 = v3(i3).map(function(e5) {
            return c2.fromUrl(e5);
          }) : "READ" === t4 && (n4 = v3(i3).map(function(e5) {
            return c2.fromUrl(e5);
          }));
        }), { routers: r4, readers: n4, writers: o4 };
      } catch (r5) {
        throw (0, i2.newError)("Unable to parse servers entry from router ".concat(t3, " from addresses:\n").concat(i2.json.stringify(e3.servers), "\nError message: ").concat(r5.message), l2);
      }
    }(r3, t2), u3 = a3.routers, s3 = a3.readers, h3 = a3.writers;
    return p3(u3, "routers", t2), p3(s3, "readers", t2), new f2({ database: e2 || r3.db, routers: u3, readers: s3, writers: h3, expirationTime: o3, ttl: n3 });
  }
  function p3(e2, t2, r3) {
    if (0 === e2.length) throw (0, i2.newError)("Received no " + t2 + " from router " + r3, l2);
  }
  function v3(e2) {
    if (!Array.isArray(e2)) throw new TypeError("Array expected but got: " + e2);
    return Array.from(e2);
  }
  t.default = f2, t.createValidRoutingTable = d2;
}, 9052: (e, t) => {
  function r2(e2, t2, r3) {
    return { kind: e2, value: t2, error: r3 };
  }
  Object.defineProperty(t, "__esModule", { value: true }), t.createNotification = t.nextNotification = t.errorNotification = t.COMPLETE_NOTIFICATION = void 0, t.COMPLETE_NOTIFICATION = r2("C", void 0, void 0), t.errorNotification = function(e2) {
    return r2("E", void 0, e2);
  }, t.nextNotification = function(e2) {
    return r2("N", e2, void 0);
  }, t.createNotification = r2;
}, 9054: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__assign || function() {
    return o2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, o2.apply(this, arguments);
  }, i2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var a2 = i2(r2(6445)), u2 = i2(r2(7021)), s2 = r2(9014), c2 = r2(397), l2 = i2(r2(7331)), f2 = i2(r2(5045)), h2 = i2(r2(3321)), d2 = r2(9305), p3 = d2.internal.bookmarks.Bookmarks, v3 = d2.internal.constants.BOLT_PROTOCOL_V4_3, y3 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), Object.defineProperty(t2.prototype, "version", { get: function() {
      return v3;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "transformer", { get: function() {
      var e3 = this;
      return void 0 === this._transformer && (this._transformer = new h2.default(Object.values(l2.default).map(function(t3) {
        return t3(e3._config, e3._log);
      }))), this._transformer;
    }, enumerable: false, configurable: true }), t2.prototype.requestRoutingInformation = function(e3) {
      var t3 = e3.routingContext, r3 = void 0 === t3 ? {} : t3, n3 = e3.databaseName, o3 = void 0 === n3 ? null : n3, i3 = e3.sessionContext, a3 = void 0 === i3 ? {} : i3, c3 = e3.onError, l3 = e3.onCompleted, f3 = new s2.RouteObserver({ onProtocolError: this._onProtocolError, onError: c3, onCompleted: l3 }), h3 = a3.bookmarks || p3.empty();
      return this.write(u2.default.route(r3, h3.values(), o3), f3, true), f3;
    }, t2.prototype.initialize = function(e3) {
      var t3 = this, r3 = void 0 === e3 ? {} : e3, n3 = r3.userAgent, o3 = (r3.boltAgent, r3.authToken), i3 = r3.notificationFilter, a3 = r3.onError, l3 = r3.onComplete, f3 = new s2.LoginObserver({ onError: function(e4) {
        return t3._onLoginError(e4, a3);
      }, onCompleted: function(e4) {
        return void 0 !== e4.patch_bolt && t3._applyPatches(e4.patch_bolt), t3._onLoginCompleted(e4, o3, l3);
      } });
      return (0, c2.assertNotificationFilterIsEmpty)(i3, this._onProtocolError, f3), this.write(u2.default.hello(n3, o3, this._serversideRouting, ["utc"]), f3, true), f3;
    }, t2.prototype._applyPatches = function(e3) {
      e3.includes("utc") && this._applyUtcPatch();
    }, t2.prototype._applyUtcPatch = function() {
      var e3 = this;
      this._transformer = new h2.default(Object.values(o2(o2({}, l2.default), f2.default)).map(function(t3) {
        return t3(e3._config, e3._log);
      }));
    }, t2;
  }(a2.default);
  t.default = y3;
}, 9060: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.firstValueFrom = void 0;
  var n2 = r2(2823), o2 = r2(5);
  t.firstValueFrom = function(e2, t2) {
    var r3 = "object" == typeof t2;
    return new Promise(function(i2, a2) {
      var u2 = new o2.SafeSubscriber({ next: function(e3) {
        i2(e3), u2.unsubscribe();
      }, error: a2, complete: function() {
        r3 ? i2(t2.defaultValue) : a2(new n2.EmptyError());
      } });
      e2.subscribe(u2);
    });
  };
}, 9098: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.skipLast = void 0;
  var n2 = r2(6640), o2 = r2(7843), i2 = r2(3111);
  t.skipLast = function(e2) {
    return e2 <= 0 ? n2.identity : o2.operate(function(t2, r3) {
      var n3 = new Array(e2), o3 = 0;
      return t2.subscribe(i2.createOperatorSubscriber(r3, function(t3) {
        var i3 = o3++;
        if (i3 < e2) n3[i3] = t3;
        else {
          var a2 = i3 % e2, u2 = n3[a2];
          n3[a2] = t3, r3.next(u2);
        }
      })), function() {
        n3 = null;
      };
    });
  };
}, 9105: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.forkJoin = void 0;
  var n2 = r2(4662), o2 = r2(7360), i2 = r2(9445), a2 = r2(1107), u2 = r2(3111), s2 = r2(1251), c2 = r2(6013);
  t.forkJoin = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    var r3 = a2.popResultSelector(e2), l2 = o2.argsArgArrayOrObject(e2), f2 = l2.args, h2 = l2.keys, d2 = new n2.Observable(function(e3) {
      var t3 = f2.length;
      if (t3) for (var r4 = new Array(t3), n3 = t3, o3 = t3, a3 = function(t4) {
        var a4 = false;
        i2.innerFrom(f2[t4]).subscribe(u2.createOperatorSubscriber(e3, function(e4) {
          a4 || (a4 = true, o3--), r4[t4] = e4;
        }, function() {
          return n3--;
        }, void 0, function() {
          n3 && a4 || (o3 || e3.next(h2 ? c2.createObject(h2, r4) : r4), e3.complete());
        }));
      }, s3 = 0; s3 < t3; s3++) a3(s3);
      else e3.complete();
    });
    return r3 ? d2.pipe(s2.mapOneOrManyArgs(r3)) : d2;
  };
}, 9125: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__assign || function() {
    return o2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, o2.apply(this, arguments);
  }, i2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var a2 = i2(r2(934)), u2 = i2(r2(2204)), s2 = i2(r2(3321)), c2 = i2(r2(7021)), l2 = r2(9014), f2 = r2(9305).internal.constants.BOLT_PROTOCOL_V5_3, h2 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), Object.defineProperty(t2.prototype, "version", { get: function() {
      return f2;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "transformer", { get: function() {
      var e3 = this;
      return void 0 === this._transformer && (this._transformer = new s2.default(Object.values(u2.default).map(function(t3) {
        return t3(e3._config, e3._log);
      }))), this._transformer;
    }, enumerable: false, configurable: true }), t2.prototype.initialize = function(e3) {
      var t3 = this, r3 = void 0 === e3 ? {} : e3, n3 = r3.userAgent, i3 = r3.boltAgent, a3 = r3.authToken, u3 = r3.notificationFilter, s3 = r3.onError, f3 = r3.onComplete, h3 = {}, d2 = new l2.LoginObserver({ onError: function(e4) {
        return t3._onLoginError(e4, s3);
      }, onCompleted: function(e4) {
        return h3.metadata = e4, t3._onLoginCompleted(e4);
      } });
      return this.write(c2.default.hello5x3(n3, i3, u3, this._serversideRouting), d2, false), this.logon({ authToken: a3, onComplete: function(e4) {
        return f3(o2(o2({}, e4), h3.metadata));
      }, onError: s3, flush: true });
    }, t2;
  }(a2.default);
  t.default = h2;
}, 9135: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.concatMap = void 0;
  var n2 = r2(983), o2 = r2(1018);
  t.concatMap = function(e2, t2) {
    return o2.isFunction(t2) ? n2.mergeMap(e2, t2, 1) : n2.mergeMap(e2, 1);
  };
}, 9137: function(e, t, r2) {
  var n2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u2(0), throw: u2(1), return: u2(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u2(i4) {
      return function(u3) {
        return function(i5) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & i5[0] ? n3.return : i5[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, i5[1])).done) return o3;
            switch (n3 = 0, o3 && (i5 = [2 & i5[0], o3.value]), i5[0]) {
              case 0:
              case 1:
                o3 = i5;
                break;
              case 4:
                return a3.label++, { value: i5[1], done: false };
              case 5:
                a3.label++, n3 = i5[1], i5 = [0];
                continue;
              case 7:
                i5 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== i5[0] && 2 !== i5[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === i5[0] && (!o3 || i5[1] > o3[0] && i5[1] < o3[3])) {
                  a3.label = i5[1];
                  break;
                }
                if (6 === i5[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = i5;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(i5);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            i5 = t2.call(e2, a3);
          } catch (e3) {
            i5 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & i5[0]) throw i5[1];
          return { value: i5[0] ? i5[1] : void 0, done: true };
        }([i4, u3]);
      };
    }
  }, o2 = this && this.__await || function(e2) {
    return this instanceof o2 ? (this.v = e2, this) : new o2(e2);
  }, i2 = this && this.__asyncGenerator || function(e2, t2, r3) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var n3, i3 = r3.apply(e2, t2 || []), a3 = [];
    return n3 = {}, u2("next"), u2("throw"), u2("return"), n3[Symbol.asyncIterator] = function() {
      return this;
    }, n3;
    function u2(e3) {
      i3[e3] && (n3[e3] = function(t3) {
        return new Promise(function(r4, n4) {
          a3.push([e3, t3, r4, n4]) > 1 || s2(e3, t3);
        });
      });
    }
    function s2(e3, t3) {
      try {
        (r4 = i3[e3](t3)).value instanceof o2 ? Promise.resolve(r4.value.v).then(c2, l2) : f2(a3[0][2], r4);
      } catch (e4) {
        f2(a3[0][3], e4);
      }
      var r4;
    }
    function c2(e3) {
      s2("next", e3);
    }
    function l2(e3) {
      s2("throw", e3);
    }
    function f2(e3, t3) {
      e3(t3), a3.shift(), a3.length && s2(a3[0][0], a3[0][1]);
    }
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.isReadableStreamLike = t.readableStreamLikeToAsyncGenerator = void 0;
  var a2 = r2(1018);
  t.readableStreamLikeToAsyncGenerator = function(e2) {
    return i2(this, arguments, function() {
      var t2, r3, i3;
      return n2(this, function(n3) {
        switch (n3.label) {
          case 0:
            t2 = e2.getReader(), n3.label = 1;
          case 1:
            n3.trys.push([1, , 9, 10]), n3.label = 2;
          case 2:
            return [4, o2(t2.read())];
          case 3:
            return r3 = n3.sent(), i3 = r3.value, r3.done ? [4, o2(void 0)] : [3, 5];
          case 4:
            return [2, n3.sent()];
          case 5:
            return [4, o2(i3)];
          case 6:
            return [4, n3.sent()];
          case 7:
            return n3.sent(), [3, 2];
          case 8:
            return [3, 10];
          case 9:
            return t2.releaseLock(), [7];
          case 10:
            return [2];
        }
      });
    });
  }, t.isReadableStreamLike = function(e2) {
    return a2.isFunction(null == e2 ? void 0 : e2.getReader);
  };
}, 9139: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.reduce = void 0;
  var n2 = r2(6384), o2 = r2(7843);
  t.reduce = function(e2, t2) {
    return o2.operate(n2.scanInternals(e2, t2, arguments.length >= 2, false, true));
  };
}, 9155: function(e, t) {
  var r2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o2, i2 = r3.call(e2), a2 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i2.next()).done; ) a2.push(n3.value);
    } catch (e3) {
      o2 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i2.return) && r3.call(i2);
      } finally {
        if (o2) throw o2.error;
      }
    }
    return a2;
  }, n2 = this && this.__spreadArray || function(e2, t2) {
    for (var r3 = 0, n3 = t2.length, o2 = e2.length; r3 < n3; r3++, o2++) e2[o2] = t2[r3];
    return e2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.timeoutProvider = void 0, t.timeoutProvider = { setTimeout: function(e2, o2) {
    for (var i2 = [], a2 = 2; a2 < arguments.length; a2++) i2[a2 - 2] = arguments[a2];
    var u2 = t.timeoutProvider.delegate;
    return (null == u2 ? void 0 : u2.setTimeout) ? u2.setTimeout.apply(u2, n2([e2, o2], r2(i2))) : setTimeout.apply(void 0, n2([e2, o2], r2(i2)));
  }, clearTimeout: function(e2) {
    var r3 = t.timeoutProvider.delegate;
    return ((null == r3 ? void 0 : r3.clearTimeout) || clearTimeout)(e2);
  }, delegate: void 0 };
}, 9223: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.captureError = t.errorContext = void 0;
  var n2 = r2(3413), o2 = null;
  t.errorContext = function(e2) {
    if (n2.config.useDeprecatedSynchronousErrorHandling) {
      var t2 = !o2;
      if (t2 && (o2 = { errorThrown: false, error: null }), e2(), t2) {
        var r3 = o2, i2 = r3.errorThrown, a2 = r3.error;
        if (o2 = null, i2) throw a2;
      }
    } else e2();
  }, t.captureError = function(e2) {
    n2.config.useDeprecatedSynchronousErrorHandling && o2 && (o2.errorThrown = true, o2.error = e2);
  };
}, 9238: function(e, t, r2) {
  var n2 = this && this.__assign || function() {
    return n2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, n2.apply(this, arguments);
  }, o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = o2(r2(4325));
  t.default = n2({}, i2.default);
}, 9247: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.multicast = void 0;
  var n2 = r2(8918), o2 = r2(1018), i2 = r2(1483);
  t.multicast = function(e2, t2) {
    var r3 = o2.isFunction(e2) ? e2 : function() {
      return e2;
    };
    return o2.isFunction(t2) ? i2.connect(t2, { connector: r3 }) : function(e3) {
      return new n2.ConnectableObservable(e3, r3);
    };
  };
}, 9305: function(e, t, r2) {
  var n2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3);
    var o3 = Object.getOwnPropertyDescriptor(t2, r3);
    o3 && !("get" in o3 ? !t2.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
      return t2[r3];
    } }), Object.defineProperty(e2, n3, o3);
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), o2 = this && this.__setModuleDefault || (Object.create ? function(e2, t2) {
    Object.defineProperty(e2, "default", { enumerable: true, value: t2 });
  } : function(e2, t2) {
    e2.default = t2;
  }), i2 = this && this.__importStar || function(e2) {
    if (e2 && e2.__esModule) return e2;
    var t2 = {};
    if (null != e2) for (var r3 in e2) "default" !== r3 && Object.prototype.hasOwnProperty.call(e2, r3) && n2(t2, e2, r3);
    return o2(t2, e2), t2;
  }, a2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.EagerResult = t.Result = t.Stats = t.QueryStatistics = t.ProfiledPlan = t.Plan = t.GqlStatusObject = t.Notification = t.ServerInfo = t.queryType = t.ResultSummary = t.Record = t.isPathSegment = t.PathSegment = t.isPath = t.Path = t.isUnboundRelationship = t.UnboundRelationship = t.isRelationship = t.Relationship = t.isNode = t.Node = t.Time = t.LocalTime = t.LocalDateTime = t.isTime = t.isLocalTime = t.isLocalDateTime = t.isDuration = t.isDateTime = t.isDate = t.Duration = t.DateTime = t.Date = t.Point = t.isPoint = t.internal = t.toString = t.toNumber = t.inSafeRange = t.isInt = t.int = t.Integer = t.error = t.isRetriableError = t.GQLError = t.newGQLError = t.Neo4jError = t.newError = t.authTokenManagers = void 0, t.resolveCertificateProvider = t.clientCertificateProviders = t.notificationFilterMinimumSeverityLevel = t.notificationFilterDisabledClassification = t.notificationFilterDisabledCategory = t.notificationSeverityLevel = t.notificationClassification = t.notificationCategory = t.resultTransformers = t.routing = t.staticAuthTokenManager = t.bookmarkManager = t.auth = t.json = t.driver = t.types = t.Driver = t.Session = t.TransactionPromise = t.ManagedTransaction = t.Transaction = t.Connection = t.Releasable = t.ConnectionProvider = void 0;
  var u2 = r2(9691);
  Object.defineProperty(t, "newError", { enumerable: true, get: function() {
    return u2.newError;
  } }), Object.defineProperty(t, "Neo4jError", { enumerable: true, get: function() {
    return u2.Neo4jError;
  } }), Object.defineProperty(t, "newGQLError", { enumerable: true, get: function() {
    return u2.newGQLError;
  } }), Object.defineProperty(t, "GQLError", { enumerable: true, get: function() {
    return u2.GQLError;
  } }), Object.defineProperty(t, "isRetriableError", { enumerable: true, get: function() {
    return u2.isRetriableError;
  } });
  var s2 = i2(r2(3371));
  t.Integer = s2.default, Object.defineProperty(t, "int", { enumerable: true, get: function() {
    return s2.int;
  } }), Object.defineProperty(t, "isInt", { enumerable: true, get: function() {
    return s2.isInt;
  } }), Object.defineProperty(t, "inSafeRange", { enumerable: true, get: function() {
    return s2.inSafeRange;
  } }), Object.defineProperty(t, "toNumber", { enumerable: true, get: function() {
    return s2.toNumber;
  } }), Object.defineProperty(t, "toString", { enumerable: true, get: function() {
    return s2.toString;
  } });
  var c2 = r2(5459);
  Object.defineProperty(t, "Date", { enumerable: true, get: function() {
    return c2.Date;
  } }), Object.defineProperty(t, "DateTime", { enumerable: true, get: function() {
    return c2.DateTime;
  } }), Object.defineProperty(t, "Duration", { enumerable: true, get: function() {
    return c2.Duration;
  } }), Object.defineProperty(t, "isDate", { enumerable: true, get: function() {
    return c2.isDate;
  } }), Object.defineProperty(t, "isDateTime", { enumerable: true, get: function() {
    return c2.isDateTime;
  } }), Object.defineProperty(t, "isDuration", { enumerable: true, get: function() {
    return c2.isDuration;
  } }), Object.defineProperty(t, "isLocalDateTime", { enumerable: true, get: function() {
    return c2.isLocalDateTime;
  } }), Object.defineProperty(t, "isLocalTime", { enumerable: true, get: function() {
    return c2.isLocalTime;
  } }), Object.defineProperty(t, "isTime", { enumerable: true, get: function() {
    return c2.isTime;
  } }), Object.defineProperty(t, "LocalDateTime", { enumerable: true, get: function() {
    return c2.LocalDateTime;
  } }), Object.defineProperty(t, "LocalTime", { enumerable: true, get: function() {
    return c2.LocalTime;
  } }), Object.defineProperty(t, "Time", { enumerable: true, get: function() {
    return c2.Time;
  } });
  var l2 = r2(1517);
  Object.defineProperty(t, "Node", { enumerable: true, get: function() {
    return l2.Node;
  } }), Object.defineProperty(t, "isNode", { enumerable: true, get: function() {
    return l2.isNode;
  } }), Object.defineProperty(t, "Relationship", { enumerable: true, get: function() {
    return l2.Relationship;
  } }), Object.defineProperty(t, "isRelationship", { enumerable: true, get: function() {
    return l2.isRelationship;
  } }), Object.defineProperty(t, "UnboundRelationship", { enumerable: true, get: function() {
    return l2.UnboundRelationship;
  } }), Object.defineProperty(t, "isUnboundRelationship", { enumerable: true, get: function() {
    return l2.isUnboundRelationship;
  } }), Object.defineProperty(t, "Path", { enumerable: true, get: function() {
    return l2.Path;
  } }), Object.defineProperty(t, "isPath", { enumerable: true, get: function() {
    return l2.isPath;
  } }), Object.defineProperty(t, "PathSegment", { enumerable: true, get: function() {
    return l2.PathSegment;
  } }), Object.defineProperty(t, "isPathSegment", { enumerable: true, get: function() {
    return l2.isPathSegment;
  } });
  var f2 = a2(r2(4820));
  t.Record = f2.default;
  var h2 = r2(7093);
  Object.defineProperty(t, "isPoint", { enumerable: true, get: function() {
    return h2.isPoint;
  } }), Object.defineProperty(t, "Point", { enumerable: true, get: function() {
    return h2.Point;
  } });
  var d2 = i2(r2(6033));
  t.ResultSummary = d2.default, Object.defineProperty(t, "queryType", { enumerable: true, get: function() {
    return d2.queryType;
  } }), Object.defineProperty(t, "ServerInfo", { enumerable: true, get: function() {
    return d2.ServerInfo;
  } }), Object.defineProperty(t, "Plan", { enumerable: true, get: function() {
    return d2.Plan;
  } }), Object.defineProperty(t, "ProfiledPlan", { enumerable: true, get: function() {
    return d2.ProfiledPlan;
  } }), Object.defineProperty(t, "QueryStatistics", { enumerable: true, get: function() {
    return d2.QueryStatistics;
  } }), Object.defineProperty(t, "Stats", { enumerable: true, get: function() {
    return d2.Stats;
  } });
  var p3 = i2(r2(1866));
  t.Notification = p3.default, Object.defineProperty(t, "GqlStatusObject", { enumerable: true, get: function() {
    return p3.GqlStatusObject;
  } }), Object.defineProperty(t, "notificationCategory", { enumerable: true, get: function() {
    return p3.notificationCategory;
  } }), Object.defineProperty(t, "notificationClassification", { enumerable: true, get: function() {
    return p3.notificationClassification;
  } }), Object.defineProperty(t, "notificationSeverityLevel", { enumerable: true, get: function() {
    return p3.notificationSeverityLevel;
  } });
  var v3 = r2(1985);
  Object.defineProperty(t, "notificationFilterDisabledCategory", { enumerable: true, get: function() {
    return v3.notificationFilterDisabledCategory;
  } }), Object.defineProperty(t, "notificationFilterDisabledClassification", { enumerable: true, get: function() {
    return v3.notificationFilterDisabledClassification;
  } }), Object.defineProperty(t, "notificationFilterMinimumSeverityLevel", { enumerable: true, get: function() {
    return v3.notificationFilterMinimumSeverityLevel;
  } });
  var y3 = a2(r2(9512));
  t.Result = y3.default;
  var b2 = a2(r2(8917));
  t.EagerResult = b2.default;
  var m2 = i2(r2(2007));
  t.ConnectionProvider = m2.default, Object.defineProperty(t, "Releasable", { enumerable: true, get: function() {
    return m2.Releasable;
  } });
  var g2 = a2(r2(1409));
  t.Connection = g2.default;
  var _2 = a2(r2(9473));
  t.Transaction = _2.default;
  var w2 = a2(r2(5909));
  t.ManagedTransaction = w2.default;
  var O2 = a2(r2(4569));
  t.TransactionPromise = O2.default;
  var S2 = a2(r2(5481));
  t.Session = S2.default;
  var E2 = i2(r2(7264)), P2 = E2;
  t.Driver = E2.default, t.driver = P2;
  var T2 = a2(r2(1967));
  t.auth = T2.default;
  var x3 = r2(6755);
  Object.defineProperty(t, "bookmarkManager", { enumerable: true, get: function() {
    return x3.bookmarkManager;
  } });
  var C2 = r2(2069);
  Object.defineProperty(t, "authTokenManagers", { enumerable: true, get: function() {
    return C2.authTokenManagers;
  } }), Object.defineProperty(t, "staticAuthTokenManager", { enumerable: true, get: function() {
    return C2.staticAuthTokenManager;
  } });
  var j2 = r2(7264);
  Object.defineProperty(t, "routing", { enumerable: true, get: function() {
    return j2.routing;
  } });
  var A2 = i2(r2(6872));
  t.types = A2;
  var k2 = i2(r2(4027));
  t.json = k2;
  var R2 = a2(r2(1573));
  t.resultTransformers = R2.default;
  var I2 = r2(8264);
  Object.defineProperty(t, "clientCertificateProviders", { enumerable: true, get: function() {
    return I2.clientCertificateProviders;
  } }), Object.defineProperty(t, "resolveCertificateProvider", { enumerable: true, get: function() {
    return I2.resolveCertificateProvider;
  } });
  var M2 = i2(r2(6995));
  t.internal = M2;
  var N2 = { SERVICE_UNAVAILABLE: u2.SERVICE_UNAVAILABLE, SESSION_EXPIRED: u2.SESSION_EXPIRED, PROTOCOL_ERROR: u2.PROTOCOL_ERROR };
  t.error = N2;
  var D2 = { authTokenManagers: C2.authTokenManagers, newError: u2.newError, Neo4jError: u2.Neo4jError, newGQLError: u2.newGQLError, GQLError: u2.GQLError, isRetriableError: u2.isRetriableError, error: N2, Integer: s2.default, int: s2.int, isInt: s2.isInt, inSafeRange: s2.inSafeRange, toNumber: s2.toNumber, toString: s2.toString, internal: M2, isPoint: h2.isPoint, Point: h2.Point, Date: c2.Date, DateTime: c2.DateTime, Duration: c2.Duration, isDate: c2.isDate, isDateTime: c2.isDateTime, isDuration: c2.isDuration, isLocalDateTime: c2.isLocalDateTime, isLocalTime: c2.isLocalTime, isTime: c2.isTime, LocalDateTime: c2.LocalDateTime, LocalTime: c2.LocalTime, Time: c2.Time, Node: l2.Node, isNode: l2.isNode, Relationship: l2.Relationship, isRelationship: l2.isRelationship, UnboundRelationship: l2.UnboundRelationship, isUnboundRelationship: l2.isUnboundRelationship, Path: l2.Path, isPath: l2.isPath, PathSegment: l2.PathSegment, isPathSegment: l2.isPathSegment, Record: f2.default, ResultSummary: d2.default, queryType: d2.queryType, ServerInfo: d2.ServerInfo, Notification: p3.default, GqlStatusObject: p3.GqlStatusObject, Plan: d2.Plan, ProfiledPlan: d2.ProfiledPlan, QueryStatistics: d2.QueryStatistics, Stats: d2.Stats, Result: y3.default, EagerResult: b2.default, Transaction: _2.default, ManagedTransaction: w2.default, TransactionPromise: O2.default, Session: S2.default, Driver: E2.default, Connection: g2.default, Releasable: m2.Releasable, types: A2, driver: P2, json: k2, auth: T2.default, bookmarkManager: x3.bookmarkManager, routing: j2.routing, resultTransformers: R2.default, notificationCategory: p3.notificationCategory, notificationClassification: p3.notificationClassification, notificationSeverityLevel: p3.notificationSeverityLevel, notificationFilterDisabledCategory: v3.notificationFilterDisabledCategory, notificationFilterDisabledClassification: v3.notificationFilterDisabledClassification, notificationFilterMinimumSeverityLevel: v3.notificationFilterMinimumSeverityLevel, clientCertificateProviders: I2.clientCertificateProviders, resolveCertificateProvider: I2.resolveCertificateProvider };
  t.default = D2;
}, 9318: (e, t) => {
  t.read = function(e2, t2, r2, n2, o2) {
    var i2, a2, u2 = 8 * o2 - n2 - 1, s2 = (1 << u2) - 1, c2 = s2 >> 1, l2 = -7, f2 = r2 ? o2 - 1 : 0, h2 = r2 ? -1 : 1, d2 = e2[t2 + f2];
    for (f2 += h2, i2 = d2 & (1 << -l2) - 1, d2 >>= -l2, l2 += u2; l2 > 0; i2 = 256 * i2 + e2[t2 + f2], f2 += h2, l2 -= 8) ;
    for (a2 = i2 & (1 << -l2) - 1, i2 >>= -l2, l2 += n2; l2 > 0; a2 = 256 * a2 + e2[t2 + f2], f2 += h2, l2 -= 8) ;
    if (0 === i2) i2 = 1 - c2;
    else {
      if (i2 === s2) return a2 ? NaN : 1 / 0 * (d2 ? -1 : 1);
      a2 += Math.pow(2, n2), i2 -= c2;
    }
    return (d2 ? -1 : 1) * a2 * Math.pow(2, i2 - n2);
  }, t.write = function(e2, t2, r2, n2, o2, i2) {
    var a2, u2, s2, c2 = 8 * i2 - o2 - 1, l2 = (1 << c2) - 1, f2 = l2 >> 1, h2 = 23 === o2 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, d2 = n2 ? 0 : i2 - 1, p3 = n2 ? 1 : -1, v3 = t2 < 0 || 0 === t2 && 1 / t2 < 0 ? 1 : 0;
    for (t2 = Math.abs(t2), isNaN(t2) || t2 === 1 / 0 ? (u2 = isNaN(t2) ? 1 : 0, a2 = l2) : (a2 = Math.floor(Math.log(t2) / Math.LN2), t2 * (s2 = Math.pow(2, -a2)) < 1 && (a2--, s2 *= 2), (t2 += a2 + f2 >= 1 ? h2 / s2 : h2 * Math.pow(2, 1 - f2)) * s2 >= 2 && (a2++, s2 /= 2), a2 + f2 >= l2 ? (u2 = 0, a2 = l2) : a2 + f2 >= 1 ? (u2 = (t2 * s2 - 1) * Math.pow(2, o2), a2 += f2) : (u2 = t2 * Math.pow(2, f2 - 1) * Math.pow(2, o2), a2 = 0)); o2 >= 8; e2[r2 + d2] = 255 & u2, d2 += p3, u2 /= 256, o2 -= 8) ;
    for (a2 = a2 << o2 | u2, c2 += o2; c2 > 0; e2[r2 + d2] = 255 & a2, d2 += p3, a2 /= 256, c2 -= 8) ;
    e2[r2 + d2 - p3] |= 128 * v3;
  };
}, 9353: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.defer = void 0;
  var n2 = r2(4662), o2 = r2(9445);
  t.defer = function(e2) {
    return new n2.Observable(function(t2) {
      o2.innerFrom(e2()).subscribe(t2);
    });
  };
}, 9356: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.isEmpty = void 0;
  var n2 = r2(7843), o2 = r2(3111);
  t.isEmpty = function() {
    return n2.operate(function(e2, t2) {
      e2.subscribe(o2.createOperatorSubscriber(t2, function() {
        t2.next(false), t2.complete();
      }, function() {
        t2.next(true), t2.complete();
      }));
    });
  };
}, 9376: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.range = void 0;
  var n2 = r2(4662), o2 = r2(8616);
  t.range = function(e2, t2, r3) {
    if (null == t2 && (t2 = e2, e2 = 0), t2 <= 0) return o2.EMPTY;
    var i2 = t2 + e2;
    return new n2.Observable(r3 ? function(t3) {
      var n3 = e2;
      return r3.schedule(function() {
        n3 < i2 ? (t3.next(n3++), this.schedule()) : t3.complete();
      });
    } : function(t3) {
      for (var r4 = e2; r4 < i2 && !t3.closed; ) t3.next(r4++);
      t3.complete();
    });
  };
}, 9419: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.mergeAll = t.merge = t.max = t.materialize = t.mapTo = t.map = t.last = t.isEmpty = t.ignoreElements = t.groupBy = t.first = t.findIndex = t.find = t.finalize = t.filter = t.expand = t.exhaustMap = t.exhaustAll = t.exhaust = t.every = t.endWith = t.elementAt = t.distinctUntilKeyChanged = t.distinctUntilChanged = t.distinct = t.dematerialize = t.delayWhen = t.delay = t.defaultIfEmpty = t.debounceTime = t.debounce = t.count = t.connect = t.concatWith = t.concatMapTo = t.concatMap = t.concatAll = t.concat = t.combineLatestWith = t.combineLatest = t.combineLatestAll = t.combineAll = t.catchError = t.bufferWhen = t.bufferToggle = t.bufferTime = t.bufferCount = t.buffer = t.auditTime = t.audit = void 0, t.timeInterval = t.throwIfEmpty = t.throttleTime = t.throttle = t.tap = t.takeWhile = t.takeUntil = t.takeLast = t.take = t.switchScan = t.switchMapTo = t.switchMap = t.switchAll = t.subscribeOn = t.startWith = t.skipWhile = t.skipUntil = t.skipLast = t.skip = t.single = t.shareReplay = t.share = t.sequenceEqual = t.scan = t.sampleTime = t.sample = t.refCount = t.retryWhen = t.retry = t.repeatWhen = t.repeat = t.reduce = t.raceWith = t.race = t.publishReplay = t.publishLast = t.publishBehavior = t.publish = t.pluck = t.partition = t.pairwise = t.onErrorResumeNext = t.observeOn = t.multicast = t.min = t.mergeWith = t.mergeScan = t.mergeMapTo = t.mergeMap = t.flatMap = void 0, t.zipWith = t.zipAll = t.zip = t.withLatestFrom = t.windowWhen = t.windowToggle = t.windowTime = t.windowCount = t.window = t.toArray = t.timestamp = t.timeoutWith = t.timeout = void 0;
  var n2 = r2(3146);
  Object.defineProperty(t, "audit", { enumerable: true, get: function() {
    return n2.audit;
  } });
  var o2 = r2(3231);
  Object.defineProperty(t, "auditTime", { enumerable: true, get: function() {
    return o2.auditTime;
  } });
  var i2 = r2(8015);
  Object.defineProperty(t, "buffer", { enumerable: true, get: function() {
    return i2.buffer;
  } });
  var a2 = r2(5572);
  Object.defineProperty(t, "bufferCount", { enumerable: true, get: function() {
    return a2.bufferCount;
  } });
  var u2 = r2(7210);
  Object.defineProperty(t, "bufferTime", { enumerable: true, get: function() {
    return u2.bufferTime;
  } });
  var s2 = r2(8995);
  Object.defineProperty(t, "bufferToggle", { enumerable: true, get: function() {
    return s2.bufferToggle;
  } });
  var c2 = r2(8831);
  Object.defineProperty(t, "bufferWhen", { enumerable: true, get: function() {
    return c2.bufferWhen;
  } });
  var l2 = r2(8118);
  Object.defineProperty(t, "catchError", { enumerable: true, get: function() {
    return l2.catchError;
  } });
  var f2 = r2(6625);
  Object.defineProperty(t, "combineAll", { enumerable: true, get: function() {
    return f2.combineAll;
  } });
  var h2 = r2(6728);
  Object.defineProperty(t, "combineLatestAll", { enumerable: true, get: function() {
    return h2.combineLatestAll;
  } });
  var d2 = r2(2551);
  Object.defineProperty(t, "combineLatest", { enumerable: true, get: function() {
    return d2.combineLatest;
  } });
  var p3 = r2(8239);
  Object.defineProperty(t, "combineLatestWith", { enumerable: true, get: function() {
    return p3.combineLatestWith;
  } });
  var v3 = r2(7601);
  Object.defineProperty(t, "concat", { enumerable: true, get: function() {
    return v3.concat;
  } });
  var y3 = r2(8158);
  Object.defineProperty(t, "concatAll", { enumerable: true, get: function() {
    return y3.concatAll;
  } });
  var b2 = r2(9135);
  Object.defineProperty(t, "concatMap", { enumerable: true, get: function() {
    return b2.concatMap;
  } });
  var m2 = r2(9938);
  Object.defineProperty(t, "concatMapTo", { enumerable: true, get: function() {
    return m2.concatMapTo;
  } });
  var g2 = r2(9669);
  Object.defineProperty(t, "concatWith", { enumerable: true, get: function() {
    return g2.concatWith;
  } });
  var _2 = r2(1483);
  Object.defineProperty(t, "connect", { enumerable: true, get: function() {
    return _2.connect;
  } });
  var w2 = r2(1038);
  Object.defineProperty(t, "count", { enumerable: true, get: function() {
    return w2.count;
  } });
  var O2 = r2(4461);
  Object.defineProperty(t, "debounce", { enumerable: true, get: function() {
    return O2.debounce;
  } });
  var S2 = r2(8079);
  Object.defineProperty(t, "debounceTime", { enumerable: true, get: function() {
    return S2.debounceTime;
  } });
  var E2 = r2(378);
  Object.defineProperty(t, "defaultIfEmpty", { enumerable: true, get: function() {
    return E2.defaultIfEmpty;
  } });
  var P2 = r2(914);
  Object.defineProperty(t, "delay", { enumerable: true, get: function() {
    return P2.delay;
  } });
  var T2 = r2(8766);
  Object.defineProperty(t, "delayWhen", { enumerable: true, get: function() {
    return T2.delayWhen;
  } });
  var x3 = r2(7441);
  Object.defineProperty(t, "dematerialize", { enumerable: true, get: function() {
    return x3.dematerialize;
  } });
  var C2 = r2(5365);
  Object.defineProperty(t, "distinct", { enumerable: true, get: function() {
    return C2.distinct;
  } });
  var j2 = r2(8937);
  Object.defineProperty(t, "distinctUntilChanged", { enumerable: true, get: function() {
    return j2.distinctUntilChanged;
  } });
  var A2 = r2(9612);
  Object.defineProperty(t, "distinctUntilKeyChanged", { enumerable: true, get: function() {
    return A2.distinctUntilKeyChanged;
  } });
  var k2 = r2(4520);
  Object.defineProperty(t, "elementAt", { enumerable: true, get: function() {
    return k2.elementAt;
  } });
  var R2 = r2(1776);
  Object.defineProperty(t, "endWith", { enumerable: true, get: function() {
    return R2.endWith;
  } });
  var I2 = r2(5510);
  Object.defineProperty(t, "every", { enumerable: true, get: function() {
    return I2.every;
  } });
  var M2 = r2(1551);
  Object.defineProperty(t, "exhaust", { enumerable: true, get: function() {
    return M2.exhaust;
  } });
  var N2 = r2(2752);
  Object.defineProperty(t, "exhaustAll", { enumerable: true, get: function() {
    return N2.exhaustAll;
  } });
  var D2 = r2(4753);
  Object.defineProperty(t, "exhaustMap", { enumerable: true, get: function() {
    return D2.exhaustMap;
  } });
  var L2 = r2(7661);
  Object.defineProperty(t, "expand", { enumerable: true, get: function() {
    return L2.expand;
  } });
  var U2 = r2(783);
  Object.defineProperty(t, "filter", { enumerable: true, get: function() {
    return U2.filter;
  } });
  var F2 = r2(3555);
  Object.defineProperty(t, "finalize", { enumerable: true, get: function() {
    return F2.finalize;
  } });
  var B2 = r2(7714);
  Object.defineProperty(t, "find", { enumerable: true, get: function() {
    return B2.find;
  } });
  var z2 = r2(9756);
  Object.defineProperty(t, "findIndex", { enumerable: true, get: function() {
    return z2.findIndex;
  } });
  var V2 = r2(8275);
  Object.defineProperty(t, "first", { enumerable: true, get: function() {
    return V2.first;
  } });
  var W2 = r2(7815);
  Object.defineProperty(t, "groupBy", { enumerable: true, get: function() {
    return W2.groupBy;
  } });
  var q2 = r2(490);
  Object.defineProperty(t, "ignoreElements", { enumerable: true, get: function() {
    return q2.ignoreElements;
  } });
  var G2 = r2(9356);
  Object.defineProperty(t, "isEmpty", { enumerable: true, get: function() {
    return G2.isEmpty;
  } });
  var H2 = r2(8669);
  Object.defineProperty(t, "last", { enumerable: true, get: function() {
    return H2.last;
  } });
  var Y2 = r2(5471);
  Object.defineProperty(t, "map", { enumerable: true, get: function() {
    return Y2.map;
  } });
  var X2 = r2(3218);
  Object.defineProperty(t, "mapTo", { enumerable: true, get: function() {
    return X2.mapTo;
  } });
  var K3 = r2(2360);
  Object.defineProperty(t, "materialize", { enumerable: true, get: function() {
    return K3.materialize;
  } });
  var Z2 = r2(1415);
  Object.defineProperty(t, "max", { enumerable: true, get: function() {
    return Z2.max;
  } });
  var $3 = r2(361);
  Object.defineProperty(t, "merge", { enumerable: true, get: function() {
    return $3.merge;
  } });
  var Q2 = r2(7302);
  Object.defineProperty(t, "mergeAll", { enumerable: true, get: function() {
    return Q2.mergeAll;
  } });
  var J2 = r2(6902);
  Object.defineProperty(t, "flatMap", { enumerable: true, get: function() {
    return J2.flatMap;
  } });
  var ee2 = r2(983);
  Object.defineProperty(t, "mergeMap", { enumerable: true, get: function() {
    return ee2.mergeMap;
  } });
  var te2 = r2(6586);
  Object.defineProperty(t, "mergeMapTo", { enumerable: true, get: function() {
    return te2.mergeMapTo;
  } });
  var re2 = r2(4408);
  Object.defineProperty(t, "mergeScan", { enumerable: true, get: function() {
    return re2.mergeScan;
  } });
  var ne2 = r2(8253);
  Object.defineProperty(t, "mergeWith", { enumerable: true, get: function() {
    return ne2.mergeWith;
  } });
  var oe2 = r2(2669);
  Object.defineProperty(t, "min", { enumerable: true, get: function() {
    return oe2.min;
  } });
  var ie2 = r2(9247);
  Object.defineProperty(t, "multicast", { enumerable: true, get: function() {
    return ie2.multicast;
  } });
  var ae2 = r2(5184);
  Object.defineProperty(t, "observeOn", { enumerable: true, get: function() {
    return ae2.observeOn;
  } });
  var ue2 = r2(1226);
  Object.defineProperty(t, "onErrorResumeNext", { enumerable: true, get: function() {
    return ue2.onErrorResumeNext;
  } });
  var se2 = r2(1518);
  Object.defineProperty(t, "pairwise", { enumerable: true, get: function() {
    return se2.pairwise;
  } });
  var ce2 = r2(2171);
  Object.defineProperty(t, "partition", { enumerable: true, get: function() {
    return ce2.partition;
  } });
  var le2 = r2(4912);
  Object.defineProperty(t, "pluck", { enumerable: true, get: function() {
    return le2.pluck;
  } });
  var fe2 = r2(766);
  Object.defineProperty(t, "publish", { enumerable: true, get: function() {
    return fe2.publish;
  } });
  var he2 = r2(7220);
  Object.defineProperty(t, "publishBehavior", { enumerable: true, get: function() {
    return he2.publishBehavior;
  } });
  var de2 = r2(6106);
  Object.defineProperty(t, "publishLast", { enumerable: true, get: function() {
    return de2.publishLast;
  } });
  var pe2 = r2(8157);
  Object.defineProperty(t, "publishReplay", { enumerable: true, get: function() {
    return pe2.publishReplay;
  } });
  var ve2 = r2(4440);
  Object.defineProperty(t, "race", { enumerable: true, get: function() {
    return ve2.race;
  } });
  var ye2 = r2(5600);
  Object.defineProperty(t, "raceWith", { enumerable: true, get: function() {
    return ye2.raceWith;
  } });
  var be2 = r2(9139);
  Object.defineProperty(t, "reduce", { enumerable: true, get: function() {
    return be2.reduce;
  } });
  var me2 = r2(8522);
  Object.defineProperty(t, "repeat", { enumerable: true, get: function() {
    return me2.repeat;
  } });
  var ge2 = r2(6566);
  Object.defineProperty(t, "repeatWhen", { enumerable: true, get: function() {
    return ge2.repeatWhen;
  } });
  var _e2 = r2(7835);
  Object.defineProperty(t, "retry", { enumerable: true, get: function() {
    return _e2.retry;
  } });
  var we2 = r2(9843);
  Object.defineProperty(t, "retryWhen", { enumerable: true, get: function() {
    return we2.retryWhen;
  } });
  var Oe2 = r2(7561);
  Object.defineProperty(t, "refCount", { enumerable: true, get: function() {
    return Oe2.refCount;
  } });
  var Se2 = r2(1731);
  Object.defineProperty(t, "sample", { enumerable: true, get: function() {
    return Se2.sample;
  } });
  var Ee2 = r2(6086);
  Object.defineProperty(t, "sampleTime", { enumerable: true, get: function() {
    return Ee2.sampleTime;
  } });
  var Pe2 = r2(8624);
  Object.defineProperty(t, "scan", { enumerable: true, get: function() {
    return Pe2.scan;
  } });
  var Te2 = r2(582);
  Object.defineProperty(t, "sequenceEqual", { enumerable: true, get: function() {
    return Te2.sequenceEqual;
  } });
  var xe2 = r2(8977);
  Object.defineProperty(t, "share", { enumerable: true, get: function() {
    return xe2.share;
  } });
  var Ce2 = r2(3133);
  Object.defineProperty(t, "shareReplay", { enumerable: true, get: function() {
    return Ce2.shareReplay;
  } });
  var je2 = r2(5382);
  Object.defineProperty(t, "single", { enumerable: true, get: function() {
    return je2.single;
  } });
  var Ae2 = r2(3982);
  Object.defineProperty(t, "skip", { enumerable: true, get: function() {
    return Ae2.skip;
  } });
  var ke2 = r2(9098);
  Object.defineProperty(t, "skipLast", { enumerable: true, get: function() {
    return ke2.skipLast;
  } });
  var Re2 = r2(7372);
  Object.defineProperty(t, "skipUntil", { enumerable: true, get: function() {
    return Re2.skipUntil;
  } });
  var Ie2 = r2(4721);
  Object.defineProperty(t, "skipWhile", { enumerable: true, get: function() {
    return Ie2.skipWhile;
  } });
  var Me2 = r2(269);
  Object.defineProperty(t, "startWith", { enumerable: true, get: function() {
    return Me2.startWith;
  } });
  var Ne2 = r2(8960);
  Object.defineProperty(t, "subscribeOn", { enumerable: true, get: function() {
    return Ne2.subscribeOn;
  } });
  var De2 = r2(8774);
  Object.defineProperty(t, "switchAll", { enumerable: true, get: function() {
    return De2.switchAll;
  } });
  var Le2 = r2(3879);
  Object.defineProperty(t, "switchMap", { enumerable: true, get: function() {
    return Le2.switchMap;
  } });
  var Ue2 = r2(3274);
  Object.defineProperty(t, "switchMapTo", { enumerable: true, get: function() {
    return Ue2.switchMapTo;
  } });
  var Fe2 = r2(8712);
  Object.defineProperty(t, "switchScan", { enumerable: true, get: function() {
    return Fe2.switchScan;
  } });
  var Be2 = r2(846);
  Object.defineProperty(t, "take", { enumerable: true, get: function() {
    return Be2.take;
  } });
  var ze2 = r2(8330);
  Object.defineProperty(t, "takeLast", { enumerable: true, get: function() {
    return ze2.takeLast;
  } });
  var Ve2 = r2(4780);
  Object.defineProperty(t, "takeUntil", { enumerable: true, get: function() {
    return Ve2.takeUntil;
  } });
  var We2 = r2(2129);
  Object.defineProperty(t, "takeWhile", { enumerable: true, get: function() {
    return We2.takeWhile;
  } });
  var qe2 = r2(3964);
  Object.defineProperty(t, "tap", { enumerable: true, get: function() {
    return qe2.tap;
  } });
  var Ge2 = r2(8941);
  Object.defineProperty(t, "throttle", { enumerable: true, get: function() {
    return Ge2.throttle;
  } });
  var He2 = r2(7640);
  Object.defineProperty(t, "throttleTime", { enumerable: true, get: function() {
    return He2.throttleTime;
  } });
  var Ye2 = r2(4869);
  Object.defineProperty(t, "throwIfEmpty", { enumerable: true, get: function() {
    return Ye2.throwIfEmpty;
  } });
  var Xe2 = r2(489);
  Object.defineProperty(t, "timeInterval", { enumerable: true, get: function() {
    return Xe2.timeInterval;
  } });
  var Ke2 = r2(1554);
  Object.defineProperty(t, "timeout", { enumerable: true, get: function() {
    return Ke2.timeout;
  } });
  var Ze2 = r2(4862);
  Object.defineProperty(t, "timeoutWith", { enumerable: true, get: function() {
    return Ze2.timeoutWith;
  } });
  var $e2 = r2(6505);
  Object.defineProperty(t, "timestamp", { enumerable: true, get: function() {
    return $e2.timestamp;
  } });
  var Qe2 = r2(2343);
  Object.defineProperty(t, "toArray", { enumerable: true, get: function() {
    return Qe2.toArray;
  } });
  var Je2 = r2(5477);
  Object.defineProperty(t, "window", { enumerable: true, get: function() {
    return Je2.window;
  } });
  var et2 = r2(6746);
  Object.defineProperty(t, "windowCount", { enumerable: true, get: function() {
    return et2.windowCount;
  } });
  var tt2 = r2(8208);
  Object.defineProperty(t, "windowTime", { enumerable: true, get: function() {
    return tt2.windowTime;
  } });
  var rt2 = r2(6637);
  Object.defineProperty(t, "windowToggle", { enumerable: true, get: function() {
    return rt2.windowToggle;
  } });
  var nt2 = r2(1141);
  Object.defineProperty(t, "windowWhen", { enumerable: true, get: function() {
    return nt2.windowWhen;
  } });
  var ot2 = r2(5442);
  Object.defineProperty(t, "withLatestFrom", { enumerable: true, get: function() {
    return ot2.withLatestFrom;
  } });
  var it2 = r2(5918);
  Object.defineProperty(t, "zip", { enumerable: true, get: function() {
    return it2.zip;
  } });
  var at2 = r2(187);
  Object.defineProperty(t, "zipAll", { enumerable: true, get: function() {
    return at2.zipAll;
  } });
  var ut2 = r2(8538);
  Object.defineProperty(t, "zipWith", { enumerable: true, get: function() {
    return ut2.zipWith;
  } });
}, 9445: function(e, t, r2) {
  var n2 = this && this.__awaiter || function(e2, t2, r3, n3) {
    return new (r3 || (r3 = Promise))(function(o3, i3) {
      function a3(e3) {
        try {
          s3(n3.next(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function u3(e3) {
        try {
          s3(n3.throw(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function s3(e3) {
        var t3;
        e3.done ? o3(e3.value) : (t3 = e3.value, t3 instanceof r3 ? t3 : new r3(function(e4) {
          e4(t3);
        })).then(a3, u3);
      }
      s3((n3 = n3.apply(e2, t2 || [])).next());
    });
  }, o2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u3(0), throw: u3(1), return: u3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u3(i4) {
      return function(u4) {
        return function(i5) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & i5[0] ? n3.return : i5[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, i5[1])).done) return o3;
            switch (n3 = 0, o3 && (i5 = [2 & i5[0], o3.value]), i5[0]) {
              case 0:
              case 1:
                o3 = i5;
                break;
              case 4:
                return a3.label++, { value: i5[1], done: false };
              case 5:
                a3.label++, n3 = i5[1], i5 = [0];
                continue;
              case 7:
                i5 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== i5[0] && 2 !== i5[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === i5[0] && (!o3 || i5[1] > o3[0] && i5[1] < o3[3])) {
                  a3.label = i5[1];
                  break;
                }
                if (6 === i5[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = i5;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(i5);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            i5 = t2.call(e2, a3);
          } catch (e3) {
            i5 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & i5[0]) throw i5[1];
          return { value: i5[0] ? i5[1] : void 0, done: true };
        }([i4, u4]);
      };
    }
  }, i2 = this && this.__asyncValues || function(e2) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var t2, r3 = e2[Symbol.asyncIterator];
    return r3 ? r3.call(e2) : (e2 = "function" == typeof a2 ? a2(e2) : e2[Symbol.iterator](), t2 = {}, n3("next"), n3("throw"), n3("return"), t2[Symbol.asyncIterator] = function() {
      return this;
    }, t2);
    function n3(r4) {
      t2[r4] = e2[r4] && function(t3) {
        return new Promise(function(n4, o3) {
          !function(e3, t4, r5, n5) {
            Promise.resolve(n5).then(function(t5) {
              e3({ value: t5, done: r5 });
            }, t4);
          }(n4, o3, (t3 = e2[r4](t3)).done, t3.value);
        });
      };
    }
  }, a2 = this && this.__values || function(e2) {
    var t2 = "function" == typeof Symbol && Symbol.iterator, r3 = t2 && e2[t2], n3 = 0;
    if (r3) return r3.call(e2);
    if (e2 && "number" == typeof e2.length) return { next: function() {
      return e2 && n3 >= e2.length && (e2 = void 0), { value: e2 && e2[n3++], done: !e2 };
    } };
    throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.fromReadableStreamLike = t.fromAsyncIterable = t.fromIterable = t.fromPromise = t.fromArrayLike = t.fromInteropObservable = t.innerFrom = void 0;
  var u2 = r2(8046), s2 = r2(7629), c2 = r2(4662), l2 = r2(1116), f2 = r2(1358), h2 = r2(7614), d2 = r2(6368), p3 = r2(9137), v3 = r2(1018), y3 = r2(7315), b2 = r2(3327);
  function m2(e2) {
    return new c2.Observable(function(t2) {
      var r3 = e2[b2.observable]();
      if (v3.isFunction(r3.subscribe)) return r3.subscribe(t2);
      throw new TypeError("Provided object does not correctly implement Symbol.observable");
    });
  }
  function g2(e2) {
    return new c2.Observable(function(t2) {
      for (var r3 = 0; r3 < e2.length && !t2.closed; r3++) t2.next(e2[r3]);
      t2.complete();
    });
  }
  function _2(e2) {
    return new c2.Observable(function(t2) {
      e2.then(function(e3) {
        t2.closed || (t2.next(e3), t2.complete());
      }, function(e3) {
        return t2.error(e3);
      }).then(null, y3.reportUnhandledError);
    });
  }
  function w2(e2) {
    return new c2.Observable(function(t2) {
      var r3, n3;
      try {
        for (var o3 = a2(e2), i3 = o3.next(); !i3.done; i3 = o3.next()) {
          var u3 = i3.value;
          if (t2.next(u3), t2.closed) return;
        }
      } catch (e3) {
        r3 = { error: e3 };
      } finally {
        try {
          i3 && !i3.done && (n3 = o3.return) && n3.call(o3);
        } finally {
          if (r3) throw r3.error;
        }
      }
      t2.complete();
    });
  }
  function O2(e2) {
    return new c2.Observable(function(t2) {
      (function(e3, t3) {
        var r3, a3, u3, s3;
        return n2(this, void 0, void 0, function() {
          var n3, c3;
          return o2(this, function(o3) {
            switch (o3.label) {
              case 0:
                o3.trys.push([0, 5, 6, 11]), r3 = i2(e3), o3.label = 1;
              case 1:
                return [4, r3.next()];
              case 2:
                if ((a3 = o3.sent()).done) return [3, 4];
                if (n3 = a3.value, t3.next(n3), t3.closed) return [2];
                o3.label = 3;
              case 3:
                return [3, 1];
              case 4:
                return [3, 11];
              case 5:
                return c3 = o3.sent(), u3 = { error: c3 }, [3, 11];
              case 6:
                return o3.trys.push([6, , 9, 10]), a3 && !a3.done && (s3 = r3.return) ? [4, s3.call(r3)] : [3, 8];
              case 7:
                o3.sent(), o3.label = 8;
              case 8:
                return [3, 10];
              case 9:
                if (u3) throw u3.error;
                return [7];
              case 10:
                return [7];
              case 11:
                return t3.complete(), [2];
            }
          });
        });
      })(e2, t2).catch(function(e3) {
        return t2.error(e3);
      });
    });
  }
  function S2(e2) {
    return O2(p3.readableStreamLikeToAsyncGenerator(e2));
  }
  t.innerFrom = function(e2) {
    if (e2 instanceof c2.Observable) return e2;
    if (null != e2) {
      if (l2.isInteropObservable(e2)) return m2(e2);
      if (u2.isArrayLike(e2)) return g2(e2);
      if (s2.isPromise(e2)) return _2(e2);
      if (f2.isAsyncIterable(e2)) return O2(e2);
      if (d2.isIterable(e2)) return w2(e2);
      if (p3.isReadableStreamLike(e2)) return S2(e2);
    }
    throw h2.createInvalidObservableTypeError(e2);
  }, t.fromInteropObservable = m2, t.fromArrayLike = g2, t.fromPromise = _2, t.fromIterable = w2, t.fromAsyncIterable = O2, t.fromReadableStreamLike = S2;
}, 9470: function(e, t, r2) {
  var n2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.ConfiguredCustomResolver = t.BaseHostNameResolver = void 0;
  var o2 = n2(r2(3389));
  t.BaseHostNameResolver = o2.default;
  var i2 = n2(r2(8341));
  t.ConfiguredCustomResolver = i2.default;
}, 9473: function(e, t, r2) {
  var n2 = this && this.__awaiter || function(e2, t2, r3, n3) {
    return new (r3 || (r3 = Promise))(function(o3, i3) {
      function a3(e3) {
        try {
          s3(n3.next(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function u3(e3) {
        try {
          s3(n3.throw(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function s3(e3) {
        var t3;
        e3.done ? o3(e3.value) : (t3 = e3.value, t3 instanceof r3 ? t3 : new r3(function(e4) {
          e4(t3);
        })).then(a3, u3);
      }
      s3((n3 = n3.apply(e2, t2 || [])).next());
    });
  }, o2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u3(0), throw: u3(1), return: u3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u3(u4) {
      return function(s3) {
        return function(u5) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; i3 && (i3 = 0, u5[0] && (a3 = 0)), a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & u5[0] ? n3.return : u5[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, u5[1])).done) return o3;
            switch (n3 = 0, o3 && (u5 = [2 & u5[0], o3.value]), u5[0]) {
              case 0:
              case 1:
                o3 = u5;
                break;
              case 4:
                return a3.label++, { value: u5[1], done: false };
              case 5:
                a3.label++, n3 = u5[1], u5 = [0];
                continue;
              case 7:
                u5 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== u5[0] && 2 !== u5[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === u5[0] && (!o3 || u5[1] > o3[0] && u5[1] < o3[3])) {
                  a3.label = u5[1];
                  break;
                }
                if (6 === u5[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = u5;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(u5);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            u5 = t2.call(e2, a3);
          } catch (e3) {
            u5 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & u5[0]) throw u5[1];
          return { value: u5[0] ? u5[1] : void 0, done: true };
        }([u4, s3]);
      };
    }
  }, i2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var a2 = r2(6587), u2 = r2(3618), s2 = r2(9730), c2 = r2(754), l2 = r2(2696), f2 = r2(9691), h2 = i2(r2(9512)), d2 = function() {
    function e2(e3) {
      var t2 = e3.connectionHolder, r3 = e3.onClose, n3 = e3.onBookmarks, o3 = e3.onConnection, i3 = e3.reactive, a3 = e3.fetchSize, u3 = e3.impersonatedUser, c3 = e3.highRecordWatermark, l3 = e3.lowRecordWatermark, f3 = e3.notificationFilter, h3 = e3.apiTelemetryConfig, d3 = this;
      this._connectionHolder = t2, this._reactive = i3, this._state = p3.ACTIVE, this._onClose = r3, this._onBookmarks = n3, this._onConnection = o3, this._onError = this._onErrorCallback.bind(this), this._fetchSize = a3, this._onComplete = this._onCompleteCallback.bind(this), this._results = [], this._impersonatedUser = u3, this._lowRecordWatermak = l3, this._highRecordWatermark = c3, this._bookmarks = s2.Bookmarks.empty(), this._notificationFilter = f3, this._apiTelemetryConfig = h3, this._acceptActive = function() {
      }, this._activePromise = new Promise(function(e4, t3) {
        d3._acceptActive = e4;
      });
    }
    return e2.prototype._begin = function(e3, t2, r3) {
      var i3 = this;
      this._connectionHolder.getConnection().then(function(a3) {
        return n2(i3, void 0, void 0, function() {
          var n3, i4 = this;
          return o2(this, function(o3) {
            switch (o3.label) {
              case 0:
                return this._onConnection(), null == a3 ? [3, 2] : (n3 = this, [4, e3()]);
              case 1:
                return n3._bookmarks = o3.sent(), [2, a3.beginTransaction({ bookmarks: this._bookmarks, txConfig: t2, mode: this._connectionHolder.mode(), database: this._connectionHolder.database(), impersonatedUser: this._impersonatedUser, notificationFilter: this._notificationFilter, apiTelemetryConfig: this._apiTelemetryConfig, beforeError: function(e4) {
                  null != r3 && r3.onError(e4), i4._onError(e4).catch(function() {
                  });
                }, afterComplete: function(e4) {
                  null != r3 && r3.onComplete(e4), void 0 !== e4.db && null != (null == r3 ? void 0 : r3.onDB) && r3.onDB(e4.db), i4._onComplete(e4);
                } })];
              case 2:
                throw (0, f2.newError)("No connection available");
            }
          });
        });
      }).catch(function(e4) {
        null != r3 && r3.onError(e4), i3._onError(e4).catch(function() {
        });
      }).finally(function() {
        return i3._acceptActive();
      });
    }, e2.prototype.run = function(e3, t2) {
      var r3 = (0, a2.validateQueryAndParameters)(e3, t2), n3 = r3.validatedQuery, o3 = r3.params, i3 = this._state.run(n3, o3, { connectionHolder: this._connectionHolder, onError: this._onError, onComplete: this._onComplete, onConnection: this._onConnection, reactive: this._reactive, fetchSize: this._fetchSize, highRecordWatermark: this._highRecordWatermark, lowRecordWatermark: this._lowRecordWatermak, preparationJob: this._activePromise });
      return this._results.push(i3), i3;
    }, e2.prototype.commit = function() {
      var e3 = this, t2 = this._state.commit({ connectionHolder: this._connectionHolder, onError: this._onError, onComplete: function(t3) {
        return e3._onCompleteCallback(t3, e3._bookmarks);
      }, onConnection: this._onConnection, pendingResults: this._results, preparationJob: this._activePromise });
      return this._state = t2.state, this._onClose(), new Promise(function(e4, r3) {
        t2.result.subscribe({ onCompleted: function() {
          return e4();
        }, onError: function(e5) {
          return r3(e5);
        } });
      });
    }, e2.prototype.rollback = function() {
      var e3 = this._state.rollback({ connectionHolder: this._connectionHolder, onError: this._onError, onComplete: this._onComplete, onConnection: this._onConnection, pendingResults: this._results, preparationJob: this._activePromise });
      return this._state = e3.state, this._onClose(), new Promise(function(t2, r3) {
        e3.result.subscribe({ onCompleted: function() {
          return t2();
        }, onError: function(e4) {
          return r3(e4);
        } });
      });
    }, e2.prototype.isOpen = function() {
      return this._state === p3.ACTIVE;
    }, e2.prototype.close = function() {
      return n2(this, void 0, void 0, function() {
        return o2(this, function(e3) {
          switch (e3.label) {
            case 0:
              return this.isOpen() ? [4, this.rollback()] : [3, 2];
            case 1:
              e3.sent(), e3.label = 2;
            case 2:
              return [2];
          }
        });
      });
    }, e2.prototype[Symbol.asyncDispose] = function() {
      return this.close();
    }, e2.prototype._onErrorCallback = function(e3) {
      return this._state === p3.FAILED ? Promise.resolve(null) : (this._state = p3.FAILED, this._onClose(), this._results.forEach(function(t2) {
        t2.isOpen() && t2._streamObserverPromise.then(function(t3) {
          return t3.onError(e3);
        }).catch(function(e4) {
        });
      }), this._connectionHolder.releaseConnection());
    }, e2.prototype._onCompleteCallback = function(e3, t2) {
      this._onBookmarks(new s2.Bookmarks(null == e3 ? void 0 : e3.bookmark), null != t2 ? t2 : s2.Bookmarks.empty(), null == e3 ? void 0 : e3.db);
    }, e2;
  }(), p3 = { ACTIVE: { commit: function(e2) {
    return { result: v3(true, e2.connectionHolder, e2.onError, e2.onComplete, e2.onConnection, e2.pendingResults, e2.preparationJob), state: p3.SUCCEEDED };
  }, rollback: function(e2) {
    return { result: v3(false, e2.connectionHolder, e2.onError, e2.onComplete, e2.onConnection, e2.pendingResults, e2.preparationJob), state: p3.ROLLED_BACK };
  }, run: function(e2, t2, r3) {
    var n3 = r3.connectionHolder, o3 = r3.onError, i3 = r3.onComplete, a3 = r3.onConnection, u3 = r3.reactive, h3 = r3.fetchSize, d3 = r3.highRecordWatermark, p4 = r3.lowRecordWatermark, v5 = r3.preparationJob, b2 = null != v5 ? v5 : Promise.resolve();
    return y3(n3.getConnection().then(function(e3) {
      return b2.then(function() {
        return e3;
      });
    }).then(function(r4) {
      if (a3(), null != r4) return r4.run(e2, t2, { bookmarks: s2.Bookmarks.empty(), txConfig: c2.TxConfig.empty(), beforeError: o3, afterComplete: i3, reactive: u3, fetchSize: h3, highRecordWatermark: d3, lowRecordWatermark: p4 });
      throw (0, f2.newError)("No connection available");
    }).catch(function(e3) {
      return new l2.FailedObserver({ error: e3, onError: o3 });
    }), e2, t2, n3, d3, p4);
  } }, FAILED: { commit: function(e2) {
    var t2 = e2.connectionHolder, r3 = e2.onError;
    return e2.onComplete, { result: y3(new l2.FailedObserver({ error: (0, f2.newError)("Cannot commit this transaction, because it has been rolled back either because of an error or explicit termination."), onError: r3 }), "COMMIT", {}, t2, 0, 0), state: p3.FAILED };
  }, rollback: function(e2) {
    var t2 = e2.connectionHolder;
    return e2.onError, e2.onComplete, { result: y3(new l2.CompletedObserver(), "ROLLBACK", {}, t2, 0, 0), state: p3.FAILED };
  }, run: function(e2, t2, r3) {
    var n3 = r3.connectionHolder, o3 = r3.onError;
    return r3.onComplete, y3(new l2.FailedObserver({ error: (0, f2.newError)("Cannot run query in this transaction, because it has been rolled back either because of an error or explicit termination."), onError: o3 }), e2, t2, n3, 0, 0);
  } }, SUCCEEDED: { commit: function(e2) {
    var t2 = e2.connectionHolder, r3 = e2.onError;
    return e2.onComplete, { result: y3(new l2.FailedObserver({ error: (0, f2.newError)("Cannot commit this transaction, because it has already been committed."), onError: r3 }), "COMMIT", {}, u2.EMPTY_CONNECTION_HOLDER, 0, 0), state: p3.SUCCEEDED, connectionHolder: t2 };
  }, rollback: function(e2) {
    var t2 = e2.connectionHolder, r3 = e2.onError;
    return e2.onComplete, { result: y3(new l2.FailedObserver({ error: (0, f2.newError)("Cannot rollback this transaction, because it has already been committed."), onError: r3 }), "ROLLBACK", {}, u2.EMPTY_CONNECTION_HOLDER, 0, 0), state: p3.SUCCEEDED, connectionHolder: t2 };
  }, run: function(e2, t2, r3) {
    var n3 = r3.connectionHolder, o3 = r3.onError;
    return r3.onComplete, y3(new l2.FailedObserver({ error: (0, f2.newError)("Cannot run query in this transaction, because it has already been committed."), onError: o3 }), e2, t2, n3, 0, 0);
  } }, ROLLED_BACK: { commit: function(e2) {
    var t2 = e2.connectionHolder, r3 = e2.onError;
    return e2.onComplete, { result: y3(new l2.FailedObserver({ error: (0, f2.newError)("Cannot commit this transaction, because it has already been rolled back."), onError: r3 }), "COMMIT", {}, t2, 0, 0), state: p3.ROLLED_BACK };
  }, rollback: function(e2) {
    var t2 = e2.connectionHolder;
    return e2.onError, e2.onComplete, { result: y3(new l2.FailedObserver({ error: (0, f2.newError)("Cannot rollback this transaction, because it has already been rolled back.") }), "ROLLBACK", {}, t2, 0, 0), state: p3.ROLLED_BACK };
  }, run: function(e2, t2, r3) {
    var n3 = r3.connectionHolder, o3 = r3.onError;
    return r3.onComplete, y3(new l2.FailedObserver({ error: (0, f2.newError)("Cannot run query in this transaction, because it has already been rolled back."), onError: o3 }), e2, t2, n3, 0, 0);
  } } };
  function v3(e2, t2, r3, n3, o3, i3, a3) {
    var u3 = null != a3 ? a3 : Promise.resolve(), s3 = t2.getConnection().then(function(e3) {
      return u3.then(function() {
        return e3;
      });
    }).then(function(t3) {
      return o3(), i3.forEach(function(e3) {
        return e3._cancel();
      }), Promise.all(i3.map(function(e3) {
        return e3.summary();
      })).then(function(o4) {
        if (null != t3) return e2 ? t3.commitTransaction({ beforeError: r3, afterComplete: n3 }) : t3.rollbackTransaction({ beforeError: r3, afterComplete: n3 });
        throw (0, f2.newError)("No connection available");
      });
    }).catch(function(e3) {
      return new l2.FailedObserver({ error: e3, onError: r3 });
    });
    return new h2.default(s3, e2 ? "COMMIT" : "ROLLBACK", {}, t2, { high: Number.MAX_VALUE, low: Number.MAX_VALUE });
  }
  function y3(e2, t2, r3, n3, o3, i3) {
    return void 0 === n3 && (n3 = u2.EMPTY_CONNECTION_HOLDER), new h2.default(Promise.resolve(e2), t2, r3, new u2.ReadOnlyConnectionHolder(null != n3 ? n3 : u2.EMPTY_CONNECTION_HOLDER), { low: i3, high: o3 });
  }
  t.default = d2;
}, 9507: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a2 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a2.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a2;
  }, o2 = this && this.__spreadArray || function(e2, t2) {
    for (var r3 = 0, n3 = t2.length, o3 = e2.length; r3 < n3; r3++, o3++) e2[o3] = t2[r3];
    return e2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.animationFrameProvider = void 0;
  var i2 = r2(8014);
  t.animationFrameProvider = { schedule: function(e2) {
    var r3 = requestAnimationFrame, n3 = cancelAnimationFrame, o3 = t.animationFrameProvider.delegate;
    o3 && (r3 = o3.requestAnimationFrame, n3 = o3.cancelAnimationFrame);
    var a2 = r3(function(t2) {
      n3 = void 0, e2(t2);
    });
    return new i2.Subscription(function() {
      return null == n3 ? void 0 : n3(a2);
    });
  }, requestAnimationFrame: function() {
    for (var e2 = [], r3 = 0; r3 < arguments.length; r3++) e2[r3] = arguments[r3];
    var i3 = t.animationFrameProvider.delegate;
    return ((null == i3 ? void 0 : i3.requestAnimationFrame) || requestAnimationFrame).apply(void 0, o2([], n2(e2)));
  }, cancelAnimationFrame: function() {
    for (var e2 = [], r3 = 0; r3 < arguments.length; r3++) e2[r3] = arguments[r3];
    var i3 = t.animationFrameProvider.delegate;
    return ((null == i3 ? void 0 : i3.cancelAnimationFrame) || cancelAnimationFrame).apply(void 0, o2([], n2(e2)));
  }, delegate: void 0 };
}, 9512: function(e, t, r2) {
  var n2, o2 = this && this.__awaiter || function(e2, t2, r3, n3) {
    return new (r3 || (r3 = Promise))(function(o3, i3) {
      function a3(e3) {
        try {
          s3(n3.next(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function u3(e3) {
        try {
          s3(n3.throw(e3));
        } catch (e4) {
          i3(e4);
        }
      }
      function s3(e3) {
        var t3;
        e3.done ? o3(e3.value) : (t3 = e3.value, t3 instanceof r3 ? t3 : new r3(function(e4) {
          e4(t3);
        })).then(a3, u3);
      }
      s3((n3 = n3.apply(e2, t2 || [])).next());
    });
  }, i2 = this && this.__generator || function(e2, t2) {
    var r3, n3, o3, i3, a3 = { label: 0, sent: function() {
      if (1 & o3[0]) throw o3[1];
      return o3[1];
    }, trys: [], ops: [] };
    return i3 = { next: u3(0), throw: u3(1), return: u3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
      return this;
    }), i3;
    function u3(u4) {
      return function(s3) {
        return function(u5) {
          if (r3) throw new TypeError("Generator is already executing.");
          for (; i3 && (i3 = 0, u5[0] && (a3 = 0)), a3; ) try {
            if (r3 = 1, n3 && (o3 = 2 & u5[0] ? n3.return : u5[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, u5[1])).done) return o3;
            switch (n3 = 0, o3 && (u5 = [2 & u5[0], o3.value]), u5[0]) {
              case 0:
              case 1:
                o3 = u5;
                break;
              case 4:
                return a3.label++, { value: u5[1], done: false };
              case 5:
                a3.label++, n3 = u5[1], u5 = [0];
                continue;
              case 7:
                u5 = a3.ops.pop(), a3.trys.pop();
                continue;
              default:
                if (!((o3 = (o3 = a3.trys).length > 0 && o3[o3.length - 1]) || 6 !== u5[0] && 2 !== u5[0])) {
                  a3 = 0;
                  continue;
                }
                if (3 === u5[0] && (!o3 || u5[1] > o3[0] && u5[1] < o3[3])) {
                  a3.label = u5[1];
                  break;
                }
                if (6 === u5[0] && a3.label < o3[1]) {
                  a3.label = o3[1], o3 = u5;
                  break;
                }
                if (o3 && a3.label < o3[2]) {
                  a3.label = o3[2], a3.ops.push(u5);
                  break;
                }
                o3[2] && a3.ops.pop(), a3.trys.pop();
                continue;
            }
            u5 = t2.call(e2, a3);
          } catch (e3) {
            u5 = [6, e3], n3 = 0;
          } finally {
            r3 = o3 = 0;
          }
          if (5 & u5[0]) throw u5[1];
          return { value: u5[0] ? u5[1] : void 0, done: true };
        }([u4, s3]);
      };
    }
  }, a2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var u2 = a2(r2(6033)), s2 = r2(6995), c2 = r2(9691), l2 = s2.connectionHolder.EMPTY_CONNECTION_HOLDER, f2 = function(e2) {
    console.log("Uncaught error when processing result: " + e2);
  }, h2 = function(e2) {
  }, d2 = function(e2) {
  }, p3 = function() {
    function e2(e3, t2, r3, o3, i3) {
      var a3;
      void 0 === i3 && (i3 = { high: Number.MAX_VALUE, low: Number.MAX_VALUE }), this[n2] = "Result", this._stack = null != (a3 = new Error("")).stack ? a3.stack.replace(/^Error(\n\r)*/, "") : null, this._streamObserverPromise = e3, this._p = null, this._query = t2, this._parameters = null != r3 ? r3 : {}, this._connectionHolder = null != o3 ? o3 : l2, this._keys = null, this._summary = null, this._error = null, this._watermarks = i3;
    }
    return e2.prototype.keys = function() {
      var e3 = this;
      return null !== this._keys ? Promise.resolve(this._keys) : null !== this._error ? Promise.reject(this._error) : new Promise(function(t2, r3) {
        e3._streamObserverPromise.then(function(n3) {
          return n3.subscribe(e3._decorateObserver({ onKeys: function(e4) {
            return t2(e4);
          }, onError: function(e4) {
            return r3(e4);
          } }));
        }).catch(r3);
      });
    }, e2.prototype.summary = function() {
      var e3 = this;
      return null !== this._summary ? Promise.resolve(this._summary) : null !== this._error ? Promise.reject(this._error) : new Promise(function(t2, r3) {
        e3._streamObserverPromise.then(function(n3) {
          n3.cancel(), n3.subscribe(e3._decorateObserver({ onCompleted: function(e4) {
            return t2(e4);
          }, onError: function(e4) {
            return r3(e4);
          } }));
        }).catch(r3);
      });
    }, e2.prototype._getOrCreatePromise = function() {
      var e3 = this;
      return null == this._p && (this._p = new Promise(function(t2, r3) {
        var n3 = [], o3 = { onNext: function(e4) {
          n3.push(e4);
        }, onCompleted: function(e4) {
          t2({ records: n3, summary: e4 });
        }, onError: function(e4) {
          r3(e4);
        } };
        e3.subscribe(o3);
      })), this._p;
    }, e2.prototype[Symbol.asyncIterator] = function() {
      var e3 = this;
      if (!this.isOpen()) {
        var t2 = (0, c2.newError)("Result is already consumed");
        return { next: function() {
          return Promise.reject(t2);
        }, peek: function() {
          return Promise.reject(t2);
        } };
      }
      var r3 = { paused: true, firstRun: true, finished: false }, n3 = function() {
        var t3, n4;
        if (null != r3.streaming) {
          var o3 = null !== (n4 = null === (t3 = r3.queuedObserver) || void 0 === t3 ? void 0 : t3.size) && void 0 !== n4 ? n4 : 0, i3 = o3 >= e3._watermarks.high, a4 = o3 <= e3._watermarks.low;
          i3 && !r3.paused ? (r3.paused = true, r3.streaming.pause()) : (a4 && r3.paused || r3.firstRun && !i3) && (r3.firstRun = false, r3.paused = false, r3.streaming.resume());
        }
      }, a3 = function() {
        return o2(e3, void 0, void 0, function() {
          var e4;
          return i2(this, function(t3) {
            switch (t3.label) {
              case 0:
                return void 0 !== r3.queuedObserver ? [3, 2] : (r3.queuedObserver = this._createQueuedResultObserver(n3), e4 = r3, [4, this._subscribe(r3.queuedObserver, true).catch(function() {
                })]);
              case 1:
                e4.streaming = t3.sent(), n3(), t3.label = 2;
              case 2:
                return [2, r3.queuedObserver];
            }
          });
        });
      }, u3 = function(e4) {
        if (void 0 === e4) throw (0, c2.newError)("InvalidState: Result stream finished without Summary", c2.PROTOCOL_ERROR);
        return true;
      };
      return { next: function() {
        return o2(e3, void 0, void 0, function() {
          var e4;
          return i2(this, function(t3) {
            switch (t3.label) {
              case 0:
                return r3.finished && u3(r3.summary) ? [2, { done: true, value: r3.summary }] : [4, a3()];
              case 1:
                return [4, t3.sent().dequeue()];
              case 2:
                return true === (e4 = t3.sent()).done && (r3.finished = e4.done, r3.summary = e4.value), [2, e4];
            }
          });
        });
      }, return: function(t3) {
        return o2(e3, void 0, void 0, function() {
          var e4, n4;
          return i2(this, function(o3) {
            switch (o3.label) {
              case 0:
                return r3.finished && u3(r3.summary) ? [2, { done: true, value: null != t3 ? t3 : r3.summary }] : (null === (n4 = r3.streaming) || void 0 === n4 || n4.cancel(), [4, a3()]);
              case 1:
                return [4, o3.sent().dequeueUntilDone()];
              case 2:
                return e4 = o3.sent(), r3.finished = true, e4.value = null != t3 ? t3 : e4.value, r3.summary = e4.value, [2, e4];
            }
          });
        });
      }, peek: function() {
        return o2(e3, void 0, void 0, function() {
          return i2(this, function(e4) {
            switch (e4.label) {
              case 0:
                return r3.finished && u3(r3.summary) ? [2, { done: true, value: r3.summary }] : [4, a3()];
              case 1:
                return [4, e4.sent().head()];
              case 2:
                return [2, e4.sent()];
            }
          });
        });
      } };
    }, e2.prototype.then = function(e3, t2) {
      return this._getOrCreatePromise().then(e3, t2);
    }, e2.prototype.catch = function(e3) {
      return this._getOrCreatePromise().catch(e3);
    }, e2.prototype.finally = function(e3) {
      return this._getOrCreatePromise().finally(e3);
    }, e2.prototype.subscribe = function(e3) {
      this._subscribe(e3).catch(function() {
      });
    }, e2.prototype.isOpen = function() {
      return null === this._summary && null === this._error;
    }, e2.prototype._subscribe = function(e3, t2) {
      void 0 === t2 && (t2 = false);
      var r3 = this._decorateObserver(e3);
      return this._streamObserverPromise.then(function(e4) {
        return t2 && e4.pause(), e4.subscribe(r3), e4;
      }).catch(function(e4) {
        return null != r3.onError && r3.onError(e4), Promise.reject(e4);
      });
    }, e2.prototype._decorateObserver = function(e3) {
      var t2, r3, n3, o3 = this, i3 = null !== (t2 = e3.onCompleted) && void 0 !== t2 ? t2 : h2, a3 = null !== (r3 = e3.onError) && void 0 !== r3 ? r3 : f2, u3 = null !== (n3 = e3.onKeys) && void 0 !== n3 ? n3 : d2;
      return { onNext: null != e3.onNext ? e3.onNext.bind(e3) : void 0, onKeys: function(t3) {
        return o3._keys = t3, u3.call(e3, t3);
      }, onCompleted: function(t3) {
        o3._releaseConnectionAndGetSummary(t3).then(function(t4) {
          return null !== o3._summary ? i3.call(e3, o3._summary) : (o3._summary = t4, i3.call(e3, t4));
        }).catch(a3);
      }, onError: function(t3) {
        o3._connectionHolder.releaseConnection().then(function() {
          !function(e4, t4) {
            null != t4 && (e4.stack = e4.toString() + "\n" + t4);
          }(t3, o3._stack), o3._error = t3, a3.call(e3, t3);
        }).catch(a3);
      } };
    }, e2.prototype._cancel = function() {
      null === this._summary && null === this._error && this._streamObserverPromise.then(function(e3) {
        return e3.cancel();
      }).catch(function() {
      });
    }, e2.prototype._releaseConnectionAndGetSummary = function(e3) {
      var t2 = s2.util.validateQueryAndParameters(this._query, this._parameters, { skipAsserts: true }), r3 = t2.validatedQuery, n3 = t2.params, o3 = this._connectionHolder;
      return o3.getConnection().then(function(e4) {
        return o3.releaseConnection().then(function() {
          return null == e4 ? void 0 : e4.getProtocolVersion();
        });
      }, function(e4) {
      }).then(function(t3) {
        return new u2.default(r3, n3, e3, t3);
      });
    }, e2.prototype._createQueuedResultObserver = function(e3) {
      var t2 = this;
      function r3() {
        var e4 = {};
        return e4.promise = new Promise(function(t3, r4) {
          e4.resolve = t3, e4.reject = r4;
        }), e4;
      }
      function n3(e4) {
        return e4 instanceof Error;
      }
      function a3() {
        var t3;
        return o2(this, void 0, void 0, function() {
          var o3;
          return i2(this, function(i3) {
            switch (i3.label) {
              case 0:
                if (u3.length > 0) {
                  if (o3 = null !== (t3 = u3.shift()) && void 0 !== t3 ? t3 : (0, c2.newError)("Unexpected empty buffer", c2.PROTOCOL_ERROR), e3(), n3(o3)) throw o3;
                  return [2, o3];
                }
                return s3.resolvable = r3(), [4, s3.resolvable.promise];
              case 1:
                return [2, i3.sent()];
            }
          });
        });
      }
      var u3 = [], s3 = { resolvable: null }, l3 = { onNext: function(e4) {
        l3._push({ done: false, value: e4 });
      }, onCompleted: function(e4) {
        l3._push({ done: true, value: e4 });
      }, onError: function(e4) {
        l3._push(e4);
      }, _push: function(t3) {
        if (null !== s3.resolvable) {
          var r4 = s3.resolvable;
          s3.resolvable = null, n3(t3) ? r4.reject(t3) : r4.resolve(t3);
        } else u3.push(t3), e3();
      }, dequeue: a3, dequeueUntilDone: function() {
        return o2(t2, void 0, void 0, function() {
          var e4;
          return i2(this, function(t3) {
            switch (t3.label) {
              case 0:
                return [4, a3()];
              case 1:
                return true === (e4 = t3.sent()).done ? [2, e4] : [3, 0];
              case 2:
                return [2];
            }
          });
        });
      }, head: function() {
        return o2(t2, void 0, void 0, function() {
          var t3, o3;
          return i2(this, function(i3) {
            switch (i3.label) {
              case 0:
                if (u3.length > 0) {
                  if (n3(t3 = u3[0])) throw t3;
                  return [2, t3];
                }
                s3.resolvable = r3(), i3.label = 1;
              case 1:
                return i3.trys.push([1, 3, 4, 5]), [4, s3.resolvable.promise];
              case 2:
                return t3 = i3.sent(), u3.unshift(t3), [2, t3];
              case 3:
                throw o3 = i3.sent(), u3.unshift(o3), o3;
              case 4:
                return e3(), [7];
              case 5:
                return [2];
            }
          });
        });
      }, get size() {
        return u3.length;
      } };
      return l3;
    }, e2;
  }();
  n2 = Symbol.toStringTag, t.default = p3;
}, 9567: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.scheduleObservable = void 0;
  var n2 = r2(9445), o2 = r2(5184), i2 = r2(8960);
  t.scheduleObservable = function(e2, t2) {
    return n2.innerFrom(e2).pipe(i2.subscribeOn(t2), o2.observeOn(t2));
  };
}, 9568: (e, t) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.dateTimestampProvider = void 0, t.dateTimestampProvider = { now: function() {
    return (t.dateTimestampProvider.delegate || Date).now();
  }, delegate: void 0 };
}, 9589: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.schedulePromise = void 0;
  var n2 = r2(9445), o2 = r2(5184), i2 = r2(8960);
  t.schedulePromise = function(e2, t2) {
    return n2.innerFrom(e2).pipe(i2.subscribeOn(t2), o2.observeOn(t2));
  };
}, 9612: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.distinctUntilKeyChanged = void 0;
  var n2 = r2(8937);
  t.distinctUntilKeyChanged = function(e2, t2) {
    return n2.distinctUntilChanged(function(r3, n3) {
      return t2 ? t2(r3[e2], n3[e2]) : r3[e2] === n3[e2];
    });
  };
}, 9669: function(e, t, r2) {
  var n2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a2 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a2.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a2;
  }, o2 = this && this.__spreadArray || function(e2, t2) {
    for (var r3 = 0, n3 = t2.length, o3 = e2.length; r3 < n3; r3++, o3++) e2[o3] = t2[r3];
    return e2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.concatWith = void 0;
  var i2 = r2(7601);
  t.concatWith = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    return i2.concat.apply(void 0, o2([], n2(e2)));
  };
}, 9686: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.ObjectUnsubscribedError = void 0;
  var n2 = r2(5568);
  t.ObjectUnsubscribedError = n2.createErrorClass(function(e2) {
    return function() {
      e2(this), this.name = "ObjectUnsubscribedError", this.message = "object unsubscribed";
    };
  });
}, 9689: function(e, t, r2) {
  var n2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.RoutingConnectionProvider = t.DirectConnectionProvider = t.PooledConnectionProvider = t.SingleConnectionProvider = void 0;
  var o2 = r2(4132);
  Object.defineProperty(t, "SingleConnectionProvider", { enumerable: true, get: function() {
    return n2(o2).default;
  } });
  var i2 = r2(8987);
  Object.defineProperty(t, "PooledConnectionProvider", { enumerable: true, get: function() {
    return n2(i2).default;
  } });
  var a2 = r2(3545);
  Object.defineProperty(t, "DirectConnectionProvider", { enumerable: true, get: function() {
    return n2(a2).default;
  } });
  var u2 = r2(7428);
  Object.defineProperty(t, "RoutingConnectionProvider", { enumerable: true, get: function() {
    return n2(u2).default;
  } });
}, 9691: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3);
    var o3 = Object.getOwnPropertyDescriptor(t2, r3);
    o3 && !("get" in o3 ? !t2.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
      return t2[r3];
    } }), Object.defineProperty(e2, n3, o3);
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), i2 = this && this.__setModuleDefault || (Object.create ? function(e2, t2) {
    Object.defineProperty(e2, "default", { enumerable: true, value: t2 });
  } : function(e2, t2) {
    e2.default = t2;
  }), a2 = this && this.__importStar || function(e2) {
    if (e2 && e2.__esModule) return e2;
    var t2 = {};
    if (null != e2) for (var r3 in e2) "default" !== r3 && Object.prototype.hasOwnProperty.call(e2, r3) && o2(t2, e2, r3);
    return i2(t2, e2), t2;
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.PROTOCOL_ERROR = t.SESSION_EXPIRED = t.SERVICE_UNAVAILABLE = t.GQLError = t.Neo4jError = t.isRetriableError = t.newGQLError = t.newError = void 0;
  var u2 = a2(r2(4027)), s2 = r2(1053), c2 = { DATABASE_ERROR: "DATABASE_ERROR", CLIENT_ERROR: "CLIENT_ERROR", TRANSIENT_ERROR: "TRANSIENT_ERROR", UNKNOWN: "UNKNOWN" };
  Object.freeze(c2);
  var l2 = Object.values(c2), f2 = "ServiceUnavailable";
  t.SERVICE_UNAVAILABLE = f2;
  var h2 = "SessionExpired";
  t.SESSION_EXPIRED = h2, t.PROTOCOL_ERROR = "ProtocolError";
  var d2 = function(e2) {
    function t2(r3, n3, o3, i3, a3) {
      var u3, s3 = this;
      return (s3 = e2.call(this, r3, null != a3 ? { cause: a3 } : void 0) || this).constructor = t2, s3.__proto__ = t2.prototype, s3.cause = null != a3 ? a3 : void 0, s3.gqlStatus = n3, s3.gqlStatusDescription = o3, s3.diagnosticRecord = i3, s3.classification = function(e3) {
        return void 0 === e3 || void 0 === e3._classification ? "UNKNOWN" : l2.includes(e3._classification) ? null == e3 ? void 0 : e3._classification : "UNKNOWN";
      }(s3.diagnosticRecord), s3.rawClassification = null !== (u3 = null == i3 ? void 0 : i3._classification) && void 0 !== u3 ? u3 : void 0, s3.name = "GQLError", s3;
    }
    return n2(t2, e2), Object.defineProperty(t2.prototype, "diagnosticRecordAsJsonString", { get: function() {
      return u2.stringify(this.diagnosticRecord, { useCustomToString: true });
    }, enumerable: false, configurable: true }), t2;
  }(Error);
  t.GQLError = d2;
  var p3 = function(e2) {
    function t2(r3, n3, o3, i3, a3, u3) {
      var s3 = e2.call(this, r3, o3, i3, a3, u3) || this;
      return s3.constructor = t2, s3.__proto__ = t2.prototype, s3.code = n3, s3.name = "Neo4jError", s3.retriable = function(e3) {
        return e3 === f2 || e3 === h2 || /* @__PURE__ */ function(e4) {
          return "Neo.ClientError.Security.AuthorizationExpired" === e4;
        }(e3) || function(e4) {
          return true === (null == e4 ? void 0 : e4.includes("TransientError"));
        }(e3);
      }(n3), s3;
    }
    return n2(t2, e2), t2.isRetriable = function(e3) {
      return null != e3 && e3 instanceof t2 && e3.retriable;
    }, t2;
  }(d2);
  t.Neo4jError = p3, t.newError = function(e2, t2, r3, n3, o3, i3) {
    return new p3(e2, null != t2 ? t2 : "N/A", null != n3 ? n3 : "50N42", null != o3 ? o3 : "error: general processing exception - unexpected error. " + e2, null != i3 ? i3 : s2.rawPolyfilledDiagnosticRecord, r3);
  }, t.newGQLError = function(e2, t2, r3, n3, o3) {
    return new d2(e2, null != r3 ? r3 : "50N42", null != n3 ? n3 : "error: general processing exception - unexpected error. " + e2, null != o3 ? o3 : s2.rawPolyfilledDiagnosticRecord, t2);
  };
  var v3 = p3.isRetriable;
  t.isRetriableError = v3;
}, 9730: function(e, t, r2) {
  var n2 = this && this.__createBinding || (Object.create ? function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3);
    var o3 = Object.getOwnPropertyDescriptor(t2, r3);
    o3 && !("get" in o3 ? !t2.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
      return t2[r3];
    } }), Object.defineProperty(e2, n3, o3);
  } : function(e2, t2, r3, n3) {
    void 0 === n3 && (n3 = r3), e2[n3] = t2[r3];
  }), o2 = this && this.__setModuleDefault || (Object.create ? function(e2, t2) {
    Object.defineProperty(e2, "default", { enumerable: true, value: t2 });
  } : function(e2, t2) {
    e2.default = t2;
  }), i2 = this && this.__importStar || function(e2) {
    if (e2 && e2.__esModule) return e2;
    var t2 = {};
    if (null != e2) for (var r3 in e2) "default" !== r3 && Object.prototype.hasOwnProperty.call(e2, r3) && n2(t2, e2, r3);
    return o2(t2, e2), t2;
  }, a2 = this && this.__read || function(e2, t2) {
    var r3 = "function" == typeof Symbol && e2[Symbol.iterator];
    if (!r3) return e2;
    var n3, o3, i3 = r3.call(e2), a3 = [];
    try {
      for (; (void 0 === t2 || t2-- > 0) && !(n3 = i3.next()).done; ) a3.push(n3.value);
    } catch (e3) {
      o3 = { error: e3 };
    } finally {
      try {
        n3 && !n3.done && (r3 = i3.return) && r3.call(i3);
      } finally {
        if (o3) throw o3.error;
      }
    }
    return a3;
  }, u2 = this && this.__spreadArray || function(e2, t2, r3) {
    if (r3 || 2 === arguments.length) for (var n3, o3 = 0, i3 = t2.length; o3 < i3; o3++) !n3 && o3 in t2 || (n3 || (n3 = Array.prototype.slice.call(t2, 0, o3)), n3[o3] = t2[o3]);
    return e2.concat(n3 || Array.prototype.slice.call(t2));
  };
  Object.defineProperty(t, "__esModule", { value: true }), t.Bookmarks = void 0;
  var s2 = i2(r2(6587)), c2 = function() {
    function e2(e3) {
      this._values = function(e4) {
        if (null == e4 || "" === e4) return [];
        if (s2.isString(e4)) return [e4];
        if (Array.isArray(e4)) {
          for (var t2 = /* @__PURE__ */ new Set(), r3 = f2(e4), n3 = 0; n3 < r3.length; n3++) {
            var o3 = r3[n3];
            if (null != o3) {
              if (!s2.isString(o3)) throw new TypeError("Bookmark value should be a string, given: '".concat(o3, "'"));
              t2.add(o3);
            }
          }
          return u2([], a2(t2), false);
        }
        throw new TypeError("Bookmarks should either be a string or a string array, given: '".concat(e4, "'"));
      }(e3);
    }
    return e2.empty = function() {
      return l2;
    }, e2.prototype.isEmpty = function() {
      return 0 === this._values.length;
    }, e2.prototype.values = function() {
      return this._values;
    }, e2.prototype[Symbol.iterator] = function() {
      return this._values[Symbol.iterator]();
    }, e2.prototype.asBeginTransactionParameters = function() {
      var e3;
      return this.isEmpty() ? {} : ((e3 = {}).bookmarks = this._values, e3);
    }, e2;
  }();
  t.Bookmarks = c2;
  var l2 = new c2(null);
  function f2(e2) {
    return e2.reduce(function(e3, t2) {
      return Array.isArray(t2) ? e3.concat(f2(t2)) : e3.concat(t2);
    }, []);
  }
}, 9744: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = o2(r2(9125)), a2 = o2(r2(4325)), u2 = o2(r2(7021)), s2 = r2(9014), c2 = o2(r2(3321)), l2 = r2(9305).internal.constants.BOLT_PROTOCOL_V5_4, f2 = function(e2) {
    function t2() {
      return null !== e2 && e2.apply(this, arguments) || this;
    }
    return n2(t2, e2), Object.defineProperty(t2.prototype, "version", { get: function() {
      return l2;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "transformer", { get: function() {
      var e3 = this;
      return void 0 === this._transformer && (this._transformer = new c2.default(Object.values(a2.default).map(function(t3) {
        return t3(e3._config, e3._log);
      }))), this._transformer;
    }, enumerable: false, configurable: true }), t2.prototype.telemetry = function(e3, t3) {
      var r3 = e3.api, n3 = void 0 === t3 ? {} : t3, o3 = n3.onError, i3 = n3.onCompleted, a3 = new s2.TelemetryObserver({ onCompleted: i3, onError: o3 });
      return this.write(u2.default.telemetry({ api: r3 }), a3, false), a3;
    }, t2;
  }(i2.default);
  t.default = f2;
}, 9756: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.findIndex = void 0;
  var n2 = r2(7843), o2 = r2(7714);
  t.findIndex = function(e2, t2) {
    return n2.operate(o2.createFind(e2, t2, "index"));
  };
}, 9792: (e, t, r2) => {
  var n2 = r2(7045), o2 = r2(4360), i2 = r2(6804);
  e.exports = function(e2, t2) {
    if (!t2) return e2;
    var r3 = Object.keys(t2);
    if (0 === r3.length) return e2;
    for (var a2 = n2(e2), u2 = r3.length - 1; u2 >= 0; u2--) {
      var s2 = r3[u2], c2 = String(t2[s2]);
      c2 && (c2 = " " + c2), i2(a2, { type: "preprocessor", data: "#define " + s2 + c2 });
    }
    return o2(a2);
  };
}, 9823: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true });
  var n2 = r2(9305), o2 = r2(8813), i2 = r2(9419), a2 = (n2.internal.logger.Logger, n2.error.SERVICE_UNAVAILABLE), u2 = function() {
    function e2(e3) {
      var t2 = void 0 === e3 ? {} : e3, r3 = t2.maxRetryTimeout, n3 = void 0 === r3 ? 3e4 : r3, o3 = t2.initialDelay, i3 = void 0 === o3 ? 1e3 : o3, a3 = t2.delayMultiplier, u3 = void 0 === a3 ? 2 : a3, c2 = t2.delayJitter, l2 = void 0 === c2 ? 0.2 : c2, f2 = t2.logger, h2 = void 0 === f2 ? null : f2;
      this._maxRetryTimeout = s2(n3, 3e4), this._initialDelay = s2(i3, 1e3), this._delayMultiplier = s2(u3, 2), this._delayJitter = s2(l2, 0.2), this._logger = h2;
    }
    return e2.prototype.retry = function(e3) {
      var t2 = this;
      return e3.pipe((0, i2.retryWhen)(function(e4) {
        var r3 = [], u3 = Date.now(), s3 = 1, c2 = t2._initialDelay;
        return e4.pipe((0, i2.mergeMap)(function(e5) {
          if (!(0, n2.isRetriableError)(e5)) return (0, o2.throwError)(function() {
            return e5;
          });
          if (r3.push(e5), s3 >= 2 && Date.now() - u3 >= t2._maxRetryTimeout) {
            var l2 = (0, n2.newError)("Failed after retried for ".concat(s3, " times in ").concat(t2._maxRetryTimeout, " ms. Make sure that your database is online and retry again."), a2);
            return l2.seenErrors = r3, (0, o2.throwError)(function() {
              return l2;
            });
          }
          var f2 = t2._computeNextDelay(c2);
          return c2 *= t2._delayMultiplier, s3++, t2._logger && t2._logger.warn("Transaction failed and will be retried in ".concat(f2)), (0, o2.of)(1).pipe((0, i2.delay)(f2));
        }));
      }));
    }, e2.prototype._computeNextDelay = function(e3) {
      var t2 = e3 * this._delayJitter;
      return e3 - t2 + 2 * t2 * Math.random();
    }, e2;
  }();
  function s2(e2, t2) {
    return e2 || 0 === e2 ? e2 : t2;
  }
  t.default = u2;
}, 9843: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.retryWhen = void 0;
  var n2 = r2(9445), o2 = r2(2483), i2 = r2(7843), a2 = r2(3111);
  t.retryWhen = function(e2) {
    return i2.operate(function(t2, r3) {
      var i3, u2, s2 = false, c2 = function() {
        i3 = t2.subscribe(a2.createOperatorSubscriber(r3, void 0, void 0, function(t3) {
          u2 || (u2 = new o2.Subject(), n2.innerFrom(e2(u2)).subscribe(a2.createOperatorSubscriber(r3, function() {
            return i3 ? c2() : s2 = true;
          }))), u2 && u2.next(t3);
        })), s2 && (i3.unsubscribe(), i3 = null, s2 = false, c2());
      };
      c2();
    });
  };
}, 9857: function(e, t, r2) {
  var n2 = this && this.__extends || /* @__PURE__ */ function() {
    var e2 = function(t2, r3) {
      return e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r4 in t3) Object.prototype.hasOwnProperty.call(t3, r4) && (e3[r4] = t3[r4]);
      }, e2(t2, r3);
    };
    return function(t2, r3) {
      if ("function" != typeof r3 && null !== r3) throw new TypeError("Class extends value " + String(r3) + " is not a constructor or null");
      function n3() {
        this.constructor = t2;
      }
      e2(t2, r3), t2.prototype = null === r3 ? Object.create(r3) : (n3.prototype = r3.prototype, new n3());
    };
  }(), o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = function(e2) {
    function t2(t3, r3) {
      var n3 = e2.call(this, r3) || this;
      return r3 && (n3._originalErrorHandler = t3._errorHandler, t3._errorHandler = n3._errorHandler), n3._delegate = t3, n3;
    }
    return n2(t2, e2), t2.prototype.beginTransaction = function(e3) {
      return this._delegate.beginTransaction(e3);
    }, t2.prototype.run = function(e3, t3, r3) {
      return this._delegate.run(e3, t3, r3);
    }, t2.prototype.commitTransaction = function(e3) {
      return this._delegate.commitTransaction(e3);
    }, t2.prototype.rollbackTransaction = function(e3) {
      return this._delegate.rollbackTransaction(e3);
    }, t2.prototype.getProtocolVersion = function() {
      return this._delegate.getProtocolVersion();
    }, Object.defineProperty(t2.prototype, "id", { get: function() {
      return this._delegate.id;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "databaseId", { get: function() {
      return this._delegate.databaseId;
    }, set: function(e3) {
      this._delegate.databaseId = e3;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "server", { get: function() {
      return this._delegate.server;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "authToken", { get: function() {
      return this._delegate.authToken;
    }, set: function(e3) {
      this._delegate.authToken = e3;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "supportsReAuth", { get: function() {
      return this._delegate.supportsReAuth;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "address", { get: function() {
      return this._delegate.address;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "version", { get: function() {
      return this._delegate.version;
    }, set: function(e3) {
      this._delegate.version = e3;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "creationTimestamp", { get: function() {
      return this._delegate.creationTimestamp;
    }, enumerable: false, configurable: true }), Object.defineProperty(t2.prototype, "idleTimestamp", { get: function() {
      return this._delegate.idleTimestamp;
    }, set: function(e3) {
      this._delegate.idleTimestamp = e3;
    }, enumerable: false, configurable: true }), t2.prototype.isOpen = function() {
      return this._delegate.isOpen();
    }, t2.prototype.protocol = function() {
      return this._delegate.protocol();
    }, t2.prototype.connect = function(e3, t3, r3, n3) {
      return this._delegate.connect(e3, t3, r3, n3);
    }, t2.prototype.write = function(e3, t3, r3) {
      return this._delegate.write(e3, t3, r3);
    }, t2.prototype.resetAndFlush = function() {
      return this._delegate.resetAndFlush();
    }, t2.prototype.hasOngoingObservableRequests = function() {
      return this._delegate.hasOngoingObservableRequests();
    }, t2.prototype.close = function() {
      return this._delegate.close();
    }, t2.prototype.release = function() {
      return this._originalErrorHandler && (this._delegate._errorHandler = this._originalErrorHandler), this._delegate.release();
    }, t2;
  }(o2(r2(6385)).default);
  t.default = i2;
}, 9938: (e, t, r2) => {
  Object.defineProperty(t, "__esModule", { value: true }), t.concatMapTo = void 0;
  var n2 = r2(9135), o2 = r2(1018);
  t.concatMapTo = function(e2, t2) {
    return o2.isFunction(t2) ? n2.concatMap(function() {
      return e2;
    }, t2) : n2.concatMap(function() {
      return e2;
    });
  };
}, 9975: (e, t, r2) => {
  var n2 = r2(7101), o2 = Array.prototype.concat, i2 = Array.prototype.slice, a2 = e.exports = function(e2) {
    for (var t2 = [], r3 = 0, a3 = e2.length; r3 < a3; r3++) {
      var u2 = e2[r3];
      n2(u2) ? t2 = o2.call(t2, i2.call(u2)) : t2.push(u2);
    }
    return t2;
  };
  a2.wrap = function(e2) {
    return function() {
      return e2(a2(arguments));
    };
  };
}, 9994: function(e, t, r2) {
  var n2 = this && this.__assign || function() {
    return n2 = Object.assign || function(e2) {
      for (var t2, r3 = 1, n3 = arguments.length; r3 < n3; r3++) for (var o3 in t2 = arguments[r3]) Object.prototype.hasOwnProperty.call(t2, o3) && (e2[o3] = t2[o3]);
      return e2;
    }, n2.apply(this, arguments);
  }, o2 = this && this.__importDefault || function(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  };
  Object.defineProperty(t, "__esModule", { value: true });
  var i2 = o2(r2(7449));
  t.default = n2({}, i2.default);
} };
var n = {};
function o(e) {
  var t = n[e];
  if (void 0 !== t) return t.exports;
  var i2 = n[e] = { id: e, loaded: false, exports: {} };
  return r[e].call(i2.exports, i2, i2.exports, o), i2.loaded = true, i2.exports;
}
o.n = (e) => {
  var t = e && e.__esModule ? () => e.default : () => e;
  return o.d(t, { a: t }), t;
}, o.d = (e, t) => {
  for (var r2 in t) o.o(t, r2) && !o.o(e, r2) && Object.defineProperty(e, r2, { enumerable: true, get: t[r2] });
}, o.g = function() {
  if ("object" == typeof globalThis) return globalThis;
  try {
    return this || new Function("return this")();
  } catch (e) {
    if ("object" == typeof window) return window;
  }
}(), o.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t), o.nmd = (e) => (e.paths = [], e.children || (e.children = []), e);
var i = o(5250);
var a = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e, t) {
  e.__proto__ = t;
} || function(e, t) {
  for (var r2 in t) t.hasOwnProperty(r2) && (e[r2] = t[r2]);
};
function u(e, t) {
  function r2() {
    this.constructor = e;
  }
  a(e, t), e.prototype = null === t ? Object.create(t) : (r2.prototype = t.prototype, new r2());
}
var s = function() {
  function e(e2) {
    void 0 === e2 && (e2 = "Atom@" + Je()), this.name = e2, this.isPendingUnobservation = true, this.observers = [], this.observersIndexes = {}, this.diffValue = 0, this.lastAccessedBy = 0, this.lowestObserverState = wt.NOT_TRACKING;
  }
  return e.prototype.onBecomeUnobserved = function() {
  }, e.prototype.reportObserved = function() {
    Vt(this);
  }, e.prototype.reportChanged = function() {
    Bt(), function(e2) {
      if (e2.lowestObserverState !== wt.STALE) {
        e2.lowestObserverState = wt.STALE;
        for (var t = e2.observers, r2 = t.length; r2--; ) {
          var n2 = t[r2];
          n2.dependenciesState === wt.UP_TO_DATE && (n2.isTracing !== Ot.NONE && Wt(n2, e2), n2.onBecomeStale()), n2.dependenciesState = wt.STALE;
        }
      }
    }(this), zt();
  }, e.prototype.toString = function() {
    return this.name;
  }, e;
}();
var c = function(e) {
  function t(t2, r2, n2) {
    void 0 === t2 && (t2 = "Atom@" + Je()), void 0 === r2 && (r2 = it), void 0 === n2 && (n2 = it);
    var o2 = e.call(this, t2) || this;
    return o2.name = t2, o2.onBecomeObservedHandler = r2, o2.onBecomeUnobservedHandler = n2, o2.isPendingUnobservation = false, o2.isBeingTracked = false, o2;
  }
  return u(t, e), t.prototype.reportObserved = function() {
    return Bt(), e.prototype.reportObserved.call(this), this.isBeingTracked || (this.isBeingTracked = true, this.onBecomeObservedHandler()), zt(), !!Pt.trackingDerivation;
  }, t.prototype.onBecomeUnobserved = function() {
    this.isBeingTracked = false, this.onBecomeUnobservedHandler();
  }, t;
}(s);
var l = bt("Atom", s);
function f(e) {
  return e.interceptors && e.interceptors.length > 0;
}
function h(e, t) {
  var r2 = e.interceptors || (e.interceptors = []);
  return r2.push(t), ot(function() {
    var e2 = r2.indexOf(t);
    -1 !== e2 && r2.splice(e2, 1);
  });
}
function d(e, t) {
  var r2 = Jt();
  try {
    var n2 = e.interceptors;
    if (n2) for (var o2 = 0, i2 = n2.length; o2 < i2 && (tt(!(t = n2[o2](t)) || t.type, "Intercept handlers should return nothing or a change object"), t); o2++) ;
    return t;
  } finally {
    er(r2);
  }
}
function p2(e) {
  return e.changeListeners && e.changeListeners.length > 0;
}
function v(e, t) {
  var r2 = e.changeListeners || (e.changeListeners = []);
  return r2.push(t), ot(function() {
    var e2 = r2.indexOf(t);
    -1 !== e2 && r2.splice(e2, 1);
  });
}
function y2(e, t) {
  var r2 = Jt(), n2 = e.changeListeners;
  if (n2) {
    for (var o2 = 0, i2 = (n2 = n2.slice()).length; o2 < i2; o2++) n2[o2](t);
    er(r2);
  }
}
function b() {
  return !!Pt.spyListeners.length;
}
function m(e) {
  if (Pt.spyListeners.length) for (var t = Pt.spyListeners, r2 = 0, n2 = t.length; r2 < n2; r2++) t[r2](e);
}
function g(e) {
  m(lt({}, e, { spyReportStart: true }));
}
var _ = { spyReportEnd: true };
function w(e) {
  m(e ? lt({}, e, _) : _);
}
function O(e) {
  return Pt.spyListeners.push(e), ot(function() {
    var t = Pt.spyListeners.indexOf(e);
    -1 !== t && Pt.spyListeners.splice(t, 1);
  });
}
var S = "__$$iterating";
function E(e) {
  tt(true !== e[S], "Illegal state: cannot recycle array as iterator"), pt(e, S, true);
  var t = -1;
  return pt(e, "next", function() {
    return { done: ++t >= this.length, value: t < this.length ? this[t] : void 0 };
  }), e;
}
function P(e, t) {
  pt(e, "function" == typeof Symbol && Symbol.iterator || "@@iterator", t);
}
var T;
var x2;
var C = function() {
  var e = false, t = {};
  return Object.defineProperty(t, "0", { set: function() {
    e = true;
  } }), Object.create(t)[0] = 1, false === e;
}();
var j = 0;
var A = function() {
};
T = A, x2 = Array.prototype, void 0 !== Object.setPrototypeOf ? Object.setPrototypeOf(T.prototype, x2) : void 0 !== T.prototype.__proto__ ? T.prototype.__proto__ = x2 : T.prototype = x2, Object.isFrozen(Array) && ["constructor", "push", "shift", "concat", "pop", "unshift", "replace", "find", "findIndex", "splice", "reverse", "sort"].forEach(function(e) {
  Object.defineProperty(A.prototype, e, { configurable: true, writable: true, value: Array.prototype[e] });
});
var k = function() {
  function e(e2, t, r2, n2) {
    this.array = r2, this.owned = n2, this.values = [], this.lastKnownLength = 0, this.interceptors = null, this.changeListeners = null, this.atom = new s(e2 || "ObservableArray@" + Je()), this.enhancer = function(r3, n3) {
      return t(r3, n3, e2 + "[..]");
    };
  }
  return e.prototype.dehanceValue = function(e2) {
    return void 0 !== this.dehancer ? this.dehancer(e2) : e2;
  }, e.prototype.dehanceValues = function(e2) {
    return void 0 !== this.dehancer ? e2.map(this.dehancer) : e2;
  }, e.prototype.intercept = function(e2) {
    return h(this, e2);
  }, e.prototype.observe = function(e2, t) {
    return void 0 === t && (t = false), t && e2({ object: this.array, type: "splice", index: 0, added: this.values.slice(), addedCount: this.values.length, removed: [], removedCount: 0 }), v(this, e2);
  }, e.prototype.getArrayLength = function() {
    return this.atom.reportObserved(), this.values.length;
  }, e.prototype.setArrayLength = function(e2) {
    if ("number" != typeof e2 || e2 < 0) throw new Error("[mobx.array] Out of range: " + e2);
    var t = this.values.length;
    if (e2 !== t) if (e2 > t) {
      for (var r2 = new Array(e2 - t), n2 = 0; n2 < e2 - t; n2++) r2[n2] = void 0;
      this.spliceWithArray(t, 0, r2);
    } else this.spliceWithArray(e2, t - e2);
  }, e.prototype.updateArrayLength = function(e2, t) {
    if (e2 !== this.lastKnownLength) throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed. Did you use peek() to change it?");
    this.lastKnownLength += t, t > 0 && e2 + t + 1 > j && D(e2 + t + 1);
  }, e.prototype.spliceWithArray = function(e2, t, r2) {
    var n2 = this;
    Kt(this.atom);
    var o2 = this.values.length;
    if (void 0 === e2 ? e2 = 0 : e2 > o2 ? e2 = o2 : e2 < 0 && (e2 = Math.max(0, o2 + e2)), t = 1 === arguments.length ? o2 - e2 : null == t ? 0 : Math.max(0, Math.min(t, o2 - e2)), void 0 === r2 && (r2 = []), f(this)) {
      var i2 = d(this, { object: this.array, type: "splice", index: e2, removedCount: t, added: r2 });
      if (!i2) return $e;
      t = i2.removedCount, r2 = i2.added;
    }
    var a2 = (r2 = r2.map(function(e3) {
      return n2.enhancer(e3, void 0);
    })).length - t;
    this.updateArrayLength(o2, a2);
    var u2 = this.spliceItemsIntoValues(e2, t, r2);
    return 0 === t && 0 === r2.length || this.notifyArraySplice(e2, r2, u2), this.dehanceValues(u2);
  }, e.prototype.spliceItemsIntoValues = function(e2, t, r2) {
    if (r2.length < 1e4) return (n2 = this.values).splice.apply(n2, [e2, t].concat(r2));
    var n2, o2 = this.values.slice(e2, e2 + t);
    return this.values = this.values.slice(0, e2).concat(r2, this.values.slice(e2 + t)), o2;
  }, e.prototype.notifyArrayChildUpdate = function(e2, t, r2) {
    var n2 = !this.owned && b(), o2 = p2(this), i2 = o2 || n2 ? { object: this.array, type: "update", index: e2, newValue: t, oldValue: r2 } : null;
    n2 && g(i2), this.atom.reportChanged(), o2 && y2(this, i2), n2 && w();
  }, e.prototype.notifyArraySplice = function(e2, t, r2) {
    var n2 = !this.owned && b(), o2 = p2(this), i2 = o2 || n2 ? { object: this.array, type: "splice", index: e2, removed: r2, added: t, removedCount: r2.length, addedCount: t.length } : null;
    n2 && g(i2), this.atom.reportChanged(), o2 && y2(this, i2), n2 && w();
  }, e;
}();
var R = function(e) {
  function t(t2, r2, n2, o2) {
    void 0 === n2 && (n2 = "ObservableArray@" + Je()), void 0 === o2 && (o2 = false);
    var i2 = e.call(this) || this, a2 = new k(n2, r2, i2, o2);
    return pt(i2, "$mobx", a2), t2 && t2.length && i2.spliceWithArray(0, 0, t2), C && Object.defineProperty(a2.array, "0", I), i2;
  }
  return u(t, e), t.prototype.intercept = function(e2) {
    return this.$mobx.intercept(e2);
  }, t.prototype.observe = function(e2, t2) {
    return void 0 === t2 && (t2 = false), this.$mobx.observe(e2, t2);
  }, t.prototype.clear = function() {
    return this.splice(0);
  }, t.prototype.concat = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    return this.$mobx.atom.reportObserved(), Array.prototype.concat.apply(this.peek(), e2.map(function(e3) {
      return U(e3) ? e3.peek() : e3;
    }));
  }, t.prototype.replace = function(e2) {
    return this.$mobx.spliceWithArray(0, this.$mobx.values.length, e2);
  }, t.prototype.toJS = function() {
    return this.slice();
  }, t.prototype.toJSON = function() {
    return this.toJS();
  }, t.prototype.peek = function() {
    return this.$mobx.atom.reportObserved(), this.$mobx.dehanceValues(this.$mobx.values);
  }, t.prototype.find = function(e2, t2, r2) {
    void 0 === r2 && (r2 = 0);
    var n2 = this.findIndex.apply(this, arguments);
    return -1 === n2 ? void 0 : this.get(n2);
  }, t.prototype.findIndex = function(e2, t2, r2) {
    void 0 === r2 && (r2 = 0);
    for (var n2 = this.peek(), o2 = n2.length, i2 = r2; i2 < o2; i2++) if (e2.call(t2, n2[i2], i2, this)) return i2;
    return -1;
  }, t.prototype.splice = function(e2, t2) {
    for (var r2 = [], n2 = 2; n2 < arguments.length; n2++) r2[n2 - 2] = arguments[n2];
    switch (arguments.length) {
      case 0:
        return [];
      case 1:
        return this.$mobx.spliceWithArray(e2);
      case 2:
        return this.$mobx.spliceWithArray(e2, t2);
    }
    return this.$mobx.spliceWithArray(e2, t2, r2);
  }, t.prototype.spliceWithArray = function(e2, t2, r2) {
    return this.$mobx.spliceWithArray(e2, t2, r2);
  }, t.prototype.push = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    var r2 = this.$mobx;
    return r2.spliceWithArray(r2.values.length, 0, e2), r2.values.length;
  }, t.prototype.pop = function() {
    return this.splice(Math.max(this.$mobx.values.length - 1, 0), 1)[0];
  }, t.prototype.shift = function() {
    return this.splice(0, 1)[0];
  }, t.prototype.unshift = function() {
    for (var e2 = [], t2 = 0; t2 < arguments.length; t2++) e2[t2] = arguments[t2];
    var r2 = this.$mobx;
    return r2.spliceWithArray(0, 0, e2), r2.values.length;
  }, t.prototype.reverse = function() {
    var e2 = this.slice();
    return e2.reverse.apply(e2, arguments);
  }, t.prototype.sort = function(e2) {
    var t2 = this.slice();
    return t2.sort.apply(t2, arguments);
  }, t.prototype.remove = function(e2) {
    var t2 = this.$mobx.dehanceValues(this.$mobx.values).indexOf(e2);
    return t2 > -1 && (this.splice(t2, 1), true);
  }, t.prototype.move = function(e2, t2) {
    function r2(e3) {
      if (e3 < 0) throw new Error("[mobx.array] Index out of bounds: " + e3 + " is negative");
      var t3 = this.$mobx.values.length;
      if (e3 >= t3) throw new Error("[mobx.array] Index out of bounds: " + e3 + " is not smaller than " + t3);
    }
    if (r2.call(this, e2), r2.call(this, t2), e2 !== t2) {
      var n2, o2 = this.$mobx.values;
      n2 = e2 < t2 ? o2.slice(0, e2).concat(o2.slice(e2 + 1, t2 + 1), [o2[e2]], o2.slice(t2 + 1)) : o2.slice(0, t2).concat([o2[e2]], o2.slice(t2, e2), o2.slice(e2 + 1)), this.replace(n2);
    }
  }, t.prototype.get = function(e2) {
    var t2 = this.$mobx;
    if (t2) {
      if (e2 < t2.values.length) return t2.atom.reportObserved(), t2.dehanceValue(t2.values[e2]);
      console.warn("[mobx.array] Attempt to read an array index (" + e2 + ") that is out of bounds (" + t2.values.length + "). Please check length first. Out of bound indices will not be tracked by MobX");
    }
  }, t.prototype.set = function(e2, t2) {
    var r2 = this.$mobx, n2 = r2.values;
    if (e2 < n2.length) {
      Kt(r2.atom);
      var o2 = n2[e2];
      if (f(r2)) {
        var i2 = d(r2, { type: "update", object: this, index: e2, newValue: t2 });
        if (!i2) return;
        t2 = i2.newValue;
      }
      (t2 = r2.enhancer(t2, o2)) !== o2 && (n2[e2] = t2, r2.notifyArrayChildUpdate(e2, t2, o2));
    } else {
      if (e2 !== n2.length) throw new Error("[mobx.array] Index out of bounds, " + e2 + " is larger than " + n2.length);
      r2.spliceWithArray(e2, 0, [t2]);
    }
  }, t;
}(A);
P(R.prototype, function() {
  return E(this.slice());
}), Object.defineProperty(R.prototype, "length", { enumerable: false, configurable: true, get: function() {
  return this.$mobx.getArrayLength();
}, set: function(e) {
  this.$mobx.setArrayLength(e);
} }), ["every", "filter", "forEach", "indexOf", "join", "lastIndexOf", "map", "reduce", "reduceRight", "slice", "some", "toString", "toLocaleString"].forEach(function(e) {
  var t = Array.prototype[e];
  tt("function" == typeof t, "Base function not defined on Array prototype: '" + e + "'"), dt(R.prototype, e, function() {
    return t.apply(this.peek(), arguments);
  });
}), function(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) dt(e, t[r2], e[t[r2]]);
}(R.prototype, ["constructor", "intercept", "observe", "clear", "concat", "get", "replace", "toJS", "toJSON", "peek", "find", "findIndex", "splice", "spliceWithArray", "push", "pop", "set", "shift", "unshift", "reverse", "sort", "remove", "move", "toString", "toLocaleString"]);
var I = M(0);
function M(e) {
  return { enumerable: false, configurable: false, get: function() {
    return this.get(e);
  }, set: function(t) {
    this.set(e, t);
  } };
}
function N(e) {
  Object.defineProperty(R.prototype, "" + e, M(e));
}
function D(e) {
  for (var t = j; t < e; t++) N(t);
  j = e;
}
D(1e3);
var L = bt("ObservableArrayAdministration", k);
function U(e) {
  return st(e) && L(e.$mobx);
}
var F = {};
var B = function(e) {
  function t(t2, r2, n2, o2) {
    void 0 === n2 && (n2 = "ObservableValue@" + Je()), void 0 === o2 && (o2 = true);
    var i2 = e.call(this, n2) || this;
    return i2.enhancer = r2, i2.hasUnreportedChange = false, i2.dehancer = void 0, i2.value = r2(t2, void 0, n2), o2 && b() && m({ type: "create", object: i2, newValue: i2.value }), i2;
  }
  return u(t, e), t.prototype.dehanceValue = function(e2) {
    return void 0 !== this.dehancer ? this.dehancer(e2) : e2;
  }, t.prototype.set = function(e2) {
    var t2 = this.value;
    if ((e2 = this.prepareNewValue(e2)) !== F) {
      var r2 = b();
      r2 && g({ type: "update", object: this, newValue: e2, oldValue: t2 }), this.setNewValue(e2), r2 && w();
    }
  }, t.prototype.prepareNewValue = function(e2) {
    if (Kt(this), f(this)) {
      var t2 = d(this, { object: this, type: "update", newValue: e2 });
      if (!t2) return F;
      e2 = t2.newValue;
    }
    return e2 = this.enhancer(e2, this.value, this.name), this.value !== e2 ? e2 : F;
  }, t.prototype.setNewValue = function(e2) {
    var t2 = this.value;
    this.value = e2, this.reportChanged(), p2(this) && y2(this, { type: "update", object: this, newValue: e2, oldValue: t2 });
  }, t.prototype.get = function() {
    return this.reportObserved(), this.dehanceValue(this.value);
  }, t.prototype.intercept = function(e2) {
    return h(this, e2);
  }, t.prototype.observe = function(e2, t2) {
    return t2 && e2({ object: this, type: "update", newValue: this.value, oldValue: void 0 }), v(this, e2);
  }, t.prototype.toJSON = function() {
    return this.get();
  }, t.prototype.toString = function() {
    return this.name + "[" + this.value + "]";
  }, t.prototype.valueOf = function() {
    return _t(this.get());
  }, t;
}(s);
B.prototype[gt()] = B.prototype.valueOf;
var z = bt("ObservableValue", B);
var V = { m001: "It is not allowed to assign new values to @action fields", m002: "`runInAction` expects a function", m003: "`runInAction` expects a function without arguments", m004: "autorun expects a function", m005: "Warning: attempted to pass an action to autorun. Actions are untracked and will not trigger on state changes. Use `reaction` or wrap only your state modification code in an action.", m006: "Warning: attempted to pass an action to autorunAsync. Actions are untracked and will not trigger on state changes. Use `reaction` or wrap only your state modification code in an action.", m007: "reaction only accepts 2 or 3 arguments. If migrating from MobX 2, please provide an options object", m008: "wrapping reaction expression in `asReference` is no longer supported, use options object instead", m009: "@computed can only be used on getter functions, like: '@computed get myProps() { return ...; }'. It looks like it was used on a property.", m010: "@computed can only be used on getter functions, like: '@computed get myProps() { return ...; }'", m011: "First argument to `computed` should be an expression. If using computed as decorator, don't pass it arguments", m012: "computed takes one or two arguments if used as function", m013: "[mobx.expr] 'expr' should only be used inside other reactive functions.", m014: "extendObservable expected 2 or more arguments", m015: "extendObservable expects an object as first argument", m016: "extendObservable should not be used on maps, use map.merge instead", m017: "all arguments of extendObservable should be objects", m018: "extending an object with another observable (object) is not supported. Please construct an explicit propertymap, using `toJS` if need. See issue #540", m019: "[mobx.isObservable] isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.", m020: "modifiers can only be used for individual object properties", m021: "observable expects zero or one arguments", m022: "@observable can not be used on getters, use @computed instead", m024: "whyRun() can only be used if a derivation is active, or by passing an computed value / reaction explicitly. If you invoked whyRun from inside a computation; the computation is currently suspended but re-evaluating because somebody requested its value.", m025: "whyRun can only be used on reactions and computed values", m026: "`action` can only be invoked on functions", m028: "It is not allowed to set `useStrict` when a derivation is running", m029: "INTERNAL ERROR only onBecomeUnobserved shouldn't be called twice in a row", m030a: "Since strict-mode is enabled, changing observed observable values outside actions is not allowed. Please wrap the code in an `action` if this change is intended. Tried to modify: ", m030b: "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, the render function of a React component? Tried to modify: ", m031: "Computed values are not allowed to cause side effects by changing observables that are already being observed. Tried to modify: ", m032: "* This computation is suspended (not in use by any reaction) and won't run automatically.\n	Didn't expect this computation to be suspended at this point?\n	  1. Make sure this computation is used by a reaction (reaction, autorun, observer).\n	  2. Check whether you are using this computation synchronously (in the same stack as they reaction that needs it).", m033: "`observe` doesn't support the fire immediately property for observable maps.", m034: "`mobx.map` is deprecated, use `new ObservableMap` or `mobx.observable.map` instead", m035: "Cannot make the designated object observable; it is not extensible", m036: "It is not possible to get index atoms from arrays", m037: 'Hi there! I\'m sorry you have just run into an exception.\nIf your debugger ends up here, know that some reaction (like the render() of an observer component, autorun or reaction)\nthrew an exception and that mobx caught it, to avoid that it brings the rest of your application down.\nThe original cause of the exception (the code that caused this reaction to run (again)), is still in the stack.\n\nHowever, more interesting is the actual stack trace of the error itself.\nHopefully the error is an instanceof Error, because in that case you can inspect the original stack of the error from where it was thrown.\nSee `error.stack` property, or press the very subtle "(...)" link you see near the console.error message that probably brought you here.\nThat stack is more interesting than the stack of this console.error itself.\n\nIf the exception you see is an exception you created yourself, make sure to use `throw new Error("Oops")` instead of `throw "Oops"`,\nbecause the javascript environment will only preserve the original stack trace in the first form.\n\nYou can also make sure the debugger pauses the next time this very same exception is thrown by enabling "Pause on caught exception".\n(Note that it might pause on many other, unrelated exception as well).\n\nIf that all doesn\'t help you out, feel free to open an issue https://github.com/mobxjs/mobx/issues!\n', m038: "Missing items in this list?\n    1. Check whether all used values are properly marked as observable (use isObservable to verify)\n    2. Make sure you didn't dereference values too early. MobX observes props, not primitives. E.g: use 'person.name' instead of 'name' in your computation.\n" };
function W(e) {
  return V[e];
}
function q(e, t) {
  tt("function" == typeof t, W("m026")), tt("string" == typeof e && e.length > 0, "actions should have valid names, got: '" + e + "'");
  var r2 = function() {
    return G(e, t, this, arguments);
  };
  return r2.originalFn = t, r2.isMobxAction = true, r2;
}
function G(e, t, r2, n2) {
  var o2 = function(e2, t2, r3, n3) {
    var o3 = b() && !!e2, i2 = 0;
    if (o3) {
      i2 = Date.now();
      var a2 = n3 && n3.length || 0, u2 = new Array(a2);
      if (a2 > 0) for (var s2 = 0; s2 < a2; s2++) u2[s2] = n3[s2];
      g({ type: "action", name: e2, fn: t2, object: r3, arguments: u2 });
    }
    var c2 = Jt();
    return Bt(), { prevDerivation: c2, prevAllowStateChanges: Y(true), notifySpy: o3, startTime: i2 };
  }(e, t, r2, n2);
  try {
    return t.apply(r2, n2);
  } finally {
    !function(e2) {
      X(e2.prevAllowStateChanges), zt(), er(e2.prevDerivation), e2.notifySpy && w({ time: Date.now() - e2.startTime });
    }(o2);
  }
}
function H(e) {
  tt(null === Pt.trackingDerivation, W("m028")), Pt.strictMode = e, Pt.allowStateChanges = !e;
}
function Y(e) {
  var t = Pt.allowStateChanges;
  return Pt.allowStateChanges = e, t;
}
function X(e) {
  Pt.allowStateChanges = e;
}
function K2(e, t, r2, n2, o2) {
  function i2(i3, a2, u2, s2, c2) {
    if (void 0 === c2 && (c2 = 0), tt(o2 || Q(arguments), "This function is a decorator, but it wasn't invoked like a decorator"), u2) {
      ht(i3, "__mobxLazyInitializers") || dt(i3, "__mobxLazyInitializers", i3.__mobxLazyInitializers && i3.__mobxLazyInitializers.slice() || []);
      var l2 = u2.value, f2 = u2.initializer;
      return i3.__mobxLazyInitializers.push(function(t2) {
        e(t2, a2, f2 ? f2.call(t2) : l2, s2, u2);
      }), { enumerable: n2, configurable: true, get: function() {
        return true !== this.__mobxDidRunLazyInitializers && $2(this), t.call(this, a2);
      }, set: function(e2) {
        true !== this.__mobxDidRunLazyInitializers && $2(this), r2.call(this, a2, e2);
      } };
    }
    var h2 = { enumerable: n2, configurable: true, get: function() {
      return this.__mobxInitializedProps && true === this.__mobxInitializedProps[a2] || Z(this, a2, void 0, e, s2, u2), t.call(this, a2);
    }, set: function(t2) {
      this.__mobxInitializedProps && true === this.__mobxInitializedProps[a2] ? r2.call(this, a2, t2) : Z(this, a2, t2, e, s2, u2);
    } };
    return (arguments.length < 3 || 5 === arguments.length && c2 < 3) && Object.defineProperty(i3, a2, h2), h2;
  }
  return o2 ? function() {
    if (Q(arguments)) return i2.apply(null, arguments);
    var e2 = arguments, t2 = arguments.length;
    return function(r3, n3, o3) {
      return i2(r3, n3, o3, e2, t2);
    };
  } : i2;
}
function Z(e, t, r2, n2, o2, i2) {
  ht(e, "__mobxInitializedProps") || dt(e, "__mobxInitializedProps", {}), e.__mobxInitializedProps[t] = true, n2(e, t, r2, o2, i2);
}
function $2(e) {
  true !== e.__mobxDidRunLazyInitializers && e.__mobxLazyInitializers && (dt(e, "__mobxDidRunLazyInitializers", true), e.__mobxDidRunLazyInitializers && e.__mobxLazyInitializers.forEach(function(t) {
    return t(e);
  }));
}
function Q(e) {
  return (2 === e.length || 3 === e.length) && "string" == typeof e[1];
}
var J = K2(function(e, t, r2, n2, o2) {
  var i2 = n2 && 1 === n2.length ? n2[0] : r2.name || t || "<unnamed action>";
  dt(e, t, te(i2, r2));
}, function(e) {
  return this[e];
}, function() {
  tt(false, W("m001"));
}, false, true);
var ee = K2(function(e, t, r2) {
  oe(e, t, r2);
}, function(e) {
  return this[e];
}, function() {
  tt(false, W("m001"));
}, false, false);
var te = function(e, t, r2, n2) {
  return 1 === arguments.length && "function" == typeof e ? q(e.name || "<unnamed action>", e) : 2 === arguments.length && "function" == typeof t ? q(e, t) : 1 === arguments.length && "string" == typeof e ? re(e) : re(t).apply(null, arguments);
};
function re(e) {
  return function(t, r2, n2) {
    if (n2 && "function" == typeof n2.value) return n2.value = q(e, n2.value), n2.enumerable = false, n2.configurable = true, n2;
    if (void 0 !== n2 && void 0 !== n2.get) throw new Error("[mobx] action is not expected to be used with getters");
    return J(e).apply(this, arguments);
  };
}
function ne(e) {
  return "function" == typeof e && true === e.isMobxAction;
}
function oe(e, t, r2) {
  var n2 = function() {
    return G(t, r2, e, arguments);
  };
  n2.isMobxAction = true, dt(e, t, n2);
}
te.bound = function(e, t, r2) {
  if ("function" == typeof e) {
    var n2 = q("<not yet bound action>", e);
    return n2.autoBind = true, n2;
  }
  return ee.apply(null, arguments);
};
var ie = Object.prototype.toString;
function ae(e, t) {
  return ue(e, t);
}
function ue(e, t, r2, n2) {
  if (e === t) return 0 !== e || 1 / e == 1 / t;
  if (null == e || null == t) return false;
  if (e != e) return t != t;
  var o2 = typeof e;
  return ("function" === o2 || "object" === o2 || "object" == typeof t) && function(e2, t2, r3, n3) {
    e2 = se(e2), t2 = se(t2);
    var o3 = ie.call(e2);
    if (o3 !== ie.call(t2)) return false;
    switch (o3) {
      case "[object RegExp]":
      case "[object String]":
        return "" + e2 == "" + t2;
      case "[object Number]":
        return +e2 != +e2 ? +t2 != +t2 : 0 === +e2 ? 1 / +e2 == 1 / t2 : +e2 === +t2;
      case "[object Date]":
      case "[object Boolean]":
        return +e2 === +t2;
      case "[object Symbol]":
        return "undefined" != typeof Symbol && Symbol.valueOf.call(e2) === Symbol.valueOf.call(t2);
    }
    var i2 = "[object Array]" === o3;
    if (!i2) {
      if ("object" != typeof e2 || "object" != typeof t2) return false;
      var a2 = e2.constructor, u2 = t2.constructor;
      if (a2 !== u2 && !("function" == typeof a2 && a2 instanceof a2 && "function" == typeof u2 && u2 instanceof u2) && "constructor" in e2 && "constructor" in t2) return false;
    }
    n3 = n3 || [];
    for (var s2 = (r3 = r3 || []).length; s2--; ) if (r3[s2] === e2) return n3[s2] === t2;
    if (r3.push(e2), n3.push(t2), i2) {
      if ((s2 = e2.length) !== t2.length) return false;
      for (; s2--; ) if (!ue(e2[s2], t2[s2], r3, n3)) return false;
    } else {
      var c2, l2 = Object.keys(e2);
      if (s2 = l2.length, Object.keys(t2).length !== s2) return false;
      for (; s2--; ) if (!ce(t2, c2 = l2[s2]) || !ue(e2[c2], t2[c2], r3, n3)) return false;
    }
    return r3.pop(), n3.pop(), true;
  }(e, t, r2, n2);
}
function se(e) {
  return U(e) ? e.peek() : Ze(e) ? e.entries() : mt(e) ? function(e2) {
    for (var t = []; ; ) {
      var r2 = e2.next();
      if (r2.done) break;
      t.push(r2.value);
    }
    return t;
  }(e.entries()) : e;
}
function ce(e, t) {
  return Object.prototype.hasOwnProperty.call(e, t);
}
function le(e, t) {
  return e === t;
}
var fe = { identity: le, structural: function(e, t) {
  return ae(e, t);
}, default: function(e, t) {
  return function(e2, t2) {
    return "number" == typeof e2 && "number" == typeof t2 && isNaN(e2) && isNaN(t2);
  }(e, t) || le(e, t);
} };
function he(e, t, r2) {
  var n2, o2, i2;
  "string" == typeof e ? (n2 = e, o2 = t, i2 = r2) : (n2 = e.name || "Autorun@" + Je(), o2 = e, i2 = t), tt("function" == typeof o2, W("m004")), tt(false === ne(o2), W("m005")), i2 && (o2 = o2.bind(i2));
  var a2 = new or(n2, function() {
    this.track(u2);
  });
  function u2() {
    o2(a2);
  }
  return a2.schedule(), a2.getDisposer();
}
function de(e, t, r2) {
  var n2;
  arguments.length > 3 && et(W("m007")), Be(e) && et(W("m008")), (n2 = "object" == typeof r2 ? r2 : {}).name = n2.name || e.name || t.name || "Reaction@" + Je(), n2.fireImmediately = true === r2 || true === n2.fireImmediately, n2.delay = n2.delay || 0, n2.compareStructural = n2.compareStructural || n2.struct || false, t = te(n2.name, n2.context ? t.bind(n2.context) : t), n2.context && (e = e.bind(n2.context));
  var o2, i2 = true, a2 = false, u2 = n2.equals ? n2.equals : n2.compareStructural || n2.struct ? fe.structural : fe.default, s2 = new or(n2.name, function() {
    i2 || n2.delay < 1 ? c2() : a2 || (a2 = true, setTimeout(function() {
      a2 = false, c2();
    }, n2.delay));
  });
  function c2() {
    if (!s2.isDisposed) {
      var r3 = false;
      s2.track(function() {
        var t2 = e(s2);
        r3 = i2 || !u2(o2, t2), o2 = t2;
      }), i2 && n2.fireImmediately && t(o2, s2), i2 || true !== r3 || t(o2, s2), i2 && (i2 = false);
    }
  }
  return s2.schedule(), s2.getDisposer();
}
var pe = function() {
  function e(e2, t, r2, n2, o2) {
    this.derivation = e2, this.scope = t, this.equals = r2, this.dependenciesState = wt.NOT_TRACKING, this.observing = [], this.newObserving = null, this.isPendingUnobservation = false, this.observers = [], this.observersIndexes = {}, this.diffValue = 0, this.runId = 0, this.lastAccessedBy = 0, this.lowestObserverState = wt.UP_TO_DATE, this.unboundDepsCount = 0, this.__mapid = "#" + Je(), this.value = new Gt(null), this.isComputing = false, this.isRunningSetter = false, this.isTracing = Ot.NONE, this.name = n2 || "ComputedValue@" + Je(), o2 && (this.setter = q(n2 + "-setter", o2));
  }
  return e.prototype.onBecomeStale = function() {
    !function(e2) {
      if (e2.lowestObserverState === wt.UP_TO_DATE) {
        e2.lowestObserverState = wt.POSSIBLY_STALE;
        for (var t = e2.observers, r2 = t.length; r2--; ) {
          var n2 = t[r2];
          n2.dependenciesState === wt.UP_TO_DATE && (n2.dependenciesState = wt.POSSIBLY_STALE, n2.isTracing !== Ot.NONE && Wt(n2, e2), n2.onBecomeStale());
        }
      }
    }(this);
  }, e.prototype.onBecomeUnobserved = function() {
    $t(this), this.value = void 0;
  }, e.prototype.get = function() {
    tt(!this.isComputing, "Cycle detected in computation " + this.name, this.derivation), 0 === Pt.inBatch ? (Bt(), Yt(this) && (this.isTracing !== Ot.NONE && console.log("[mobx.trace] '" + this.name + "' is being read outside a reactive context and doing a full recompute"), this.value = this.computeValue(false)), zt()) : (Vt(this), Yt(this) && this.trackAndCompute() && function(e3) {
      if (e3.lowestObserverState !== wt.STALE) {
        e3.lowestObserverState = wt.STALE;
        for (var t = e3.observers, r2 = t.length; r2--; ) {
          var n2 = t[r2];
          n2.dependenciesState === wt.POSSIBLY_STALE ? n2.dependenciesState = wt.STALE : n2.dependenciesState === wt.UP_TO_DATE && (e3.lowestObserverState = wt.UP_TO_DATE);
        }
      }
    }(this));
    var e2 = this.value;
    if (Ht(e2)) throw e2.cause;
    return e2;
  }, e.prototype.peek = function() {
    var e2 = this.computeValue(false);
    if (Ht(e2)) throw e2.cause;
    return e2;
  }, e.prototype.set = function(e2) {
    if (this.setter) {
      tt(!this.isRunningSetter, "The setter of computed value '" + this.name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?"), this.isRunningSetter = true;
      try {
        this.setter.call(this.scope, e2);
      } finally {
        this.isRunningSetter = false;
      }
    } else tt(false, "[ComputedValue '" + this.name + "'] It is not possible to assign a new value to a computed value.");
  }, e.prototype.trackAndCompute = function() {
    b() && m({ object: this.scope, type: "compute", fn: this.derivation });
    var e2 = this.value, t = this.dependenciesState === wt.NOT_TRACKING, r2 = this.value = this.computeValue(true);
    return t || Ht(e2) || Ht(r2) || !this.equals(e2, r2);
  }, e.prototype.computeValue = function(e2) {
    var t;
    if (this.isComputing = true, Pt.computationDepth++, e2) t = Zt(this, this.derivation, this.scope);
    else try {
      t = this.derivation.call(this.scope);
    } catch (e3) {
      t = new Gt(e3);
    }
    return Pt.computationDepth--, this.isComputing = false, t;
  }, e.prototype.observe = function(e2, t) {
    var r2 = this, n2 = true, o2 = void 0;
    return he(function() {
      var i2 = r2.get();
      if (!n2 || t) {
        var a2 = Jt();
        e2({ type: "update", object: r2, newValue: i2, oldValue: o2 }), er(a2);
      }
      n2 = false, o2 = i2;
    });
  }, e.prototype.toJSON = function() {
    return this.get();
  }, e.prototype.toString = function() {
    return this.name + "[" + this.derivation.toString() + "]";
  }, e.prototype.valueOf = function() {
    return _t(this.get());
  }, e.prototype.whyRun = function() {
    var e2 = Boolean(Pt.trackingDerivation), t = at(this.isComputing ? this.newObserving : this.observing).map(function(e3) {
      return e3.name;
    }), r2 = at(Dt(this).map(function(e3) {
      return e3.name;
    }));
    return "\nWhyRun? computation '" + this.name + "':\n * Running because: " + (e2 ? "[active] the value of this computation is needed by a reaction" : this.isComputing ? "[get] The value of this computed was requested outside a reaction" : "[idle] not running at the moment") + "\n" + (this.dependenciesState === wt.NOT_TRACKING ? W("m032") : " * This computation will re-run if any of the following observables changes:\n    " + ut(t) + "\n    " + (this.isComputing && e2 ? " (... or any observable accessed during the remainder of the current run)" : "") + "\n    " + W("m038") + "\n\n  * If the outcome of this computation changes, the following observers will be re-run:\n    " + ut(r2) + "\n");
  }, e;
}();
pe.prototype[gt()] = pe.prototype.valueOf;
var ve = bt("ComputedValue", pe);
var ye = function() {
  function e(e2, t) {
    this.target = e2, this.name = t, this.values = {}, this.changeListeners = null, this.interceptors = null;
  }
  return e.prototype.observe = function(e2, t) {
    return tt(true !== t, "`observe` doesn't support the fire immediately property for observable objects."), v(this, e2);
  }, e.prototype.intercept = function(e2) {
    return h(this, e2);
  }, e;
}();
function be(e, t) {
  if (Te(e) && e.hasOwnProperty("$mobx")) return e.$mobx;
  tt(Object.isExtensible(e), W("m035")), ct(e) || (t = (e.constructor.name || "ObservableObject") + "@" + Je()), t || (t = "ObservableObject@" + Je());
  var r2 = new ye(e, t);
  return pt(e, "$mobx", r2), r2;
}
function me(e, t, r2, n2) {
  if (e.values[t] && !ve(e.values[t])) return tt("value" in r2, "The property " + t + " in " + e.name + " is already observable, cannot redefine it as computed property"), void (e.target[t] = r2.value);
  if ("value" in r2) if (Be(r2.value)) {
    var o2 = r2.value;
    ge(e, t, o2.initialValue, o2.enhancer);
  } else ne(r2.value) && true === r2.value.autoBind ? oe(e.target, t, r2.value.originalFn) : ve(r2.value) ? function(e2, t2, r3) {
    var n3 = e2.name + "." + t2;
    r3.name = n3, r3.scope || (r3.scope = e2.target), e2.values[t2] = r3, Object.defineProperty(e2.target, t2, Se(t2));
  }(e, t, r2.value) : ge(e, t, r2.value, n2);
  else _e(e, t, r2.get, r2.set, fe.default, true);
}
function ge(e, t, r2, n2) {
  if (yt(e.target, t), f(e)) {
    var o2 = d(e, { object: e.target, name: t, type: "add", newValue: r2 });
    if (!o2) return;
    r2 = o2.newValue;
  }
  r2 = (e.values[t] = new B(r2, n2, e.name + "." + t, false)).value, Object.defineProperty(e.target, t, function(e2) {
    return we[e2] || (we[e2] = { configurable: true, enumerable: true, get: function() {
      return this.$mobx.values[e2].get();
    }, set: function(t2) {
      Ee(this, e2, t2);
    } });
  }(t)), function(e2, t2, r3, n3) {
    var o3 = p2(e2), i2 = b(), a2 = o3 || i2 ? { type: "add", object: t2, name: r3, newValue: n3 } : null;
    i2 && g(a2), o3 && y2(e2, a2), i2 && w();
  }(e, e.target, t, r2);
}
function _e(e, t, r2, n2, o2, i2) {
  i2 && yt(e.target, t), e.values[t] = new pe(r2, e.target, o2, e.name + "." + t, n2), i2 && Object.defineProperty(e.target, t, Se(t));
}
var we = {};
var Oe = {};
function Se(e) {
  return Oe[e] || (Oe[e] = { configurable: true, enumerable: false, get: function() {
    return this.$mobx.values[e].get();
  }, set: function(t) {
    return this.$mobx.values[e].set(t);
  } });
}
function Ee(e, t, r2) {
  var n2 = e.$mobx, o2 = n2.values[t];
  if (f(n2)) {
    if (!(u2 = d(n2, { type: "update", object: e, name: t, newValue: r2 }))) return;
    r2 = u2.newValue;
  }
  if ((r2 = o2.prepareNewValue(r2)) !== F) {
    var i2 = p2(n2), a2 = b(), u2 = i2 || a2 ? { type: "update", object: e, oldValue: o2.value, name: t, newValue: r2 } : null;
    a2 && g(u2), o2.setNewValue(r2), i2 && y2(n2, u2), a2 && w();
  }
}
var Pe = bt("ObservableObjectAdministration", ye);
function Te(e) {
  return !!st(e) && ($2(e), Pe(e.$mobx));
}
function xe(e, t) {
  if (null == e) return false;
  if (void 0 !== t) {
    if (U(e) || Ze(e)) throw new Error(W("m019"));
    if (Te(e)) {
      var r2 = e.$mobx;
      return r2.values && !!r2.values[t];
    }
    return false;
  }
  return Te(e) || !!e.$mobx || l(e) || lr(e) || ve(e);
}
function Ce(e) {
  return tt(!!e, ":("), K2(function(t, r2, n2, o2, i2) {
    yt(t, r2), tt(!i2 || !i2.get, W("m022")), ge(be(t, void 0), r2, n2, e);
  }, function(e2) {
    var t = this.$mobx.values[e2];
    if (void 0 !== t) return t.get();
  }, function(e2, t) {
    Ee(this, e2, t);
  }, true, false);
}
function je(e) {
  for (var t = [], r2 = 1; r2 < arguments.length; r2++) t[r2 - 1] = arguments[r2];
  return ke(e, Ve, t);
}
function Ae(e) {
  for (var t = [], r2 = 1; r2 < arguments.length; r2++) t[r2 - 1] = arguments[r2];
  return ke(e, qe, t);
}
function ke(e, t, r2) {
  tt(arguments.length >= 2, W("m014")), tt("object" == typeof e, W("m015")), tt(!Ze(e), W("m016")), r2.forEach(function(e2) {
    tt("object" == typeof e2, W("m017")), tt(!xe(e2), W("m018"));
  });
  for (var n2 = be(e), o2 = {}, i2 = r2.length - 1; i2 >= 0; i2--) {
    var a2 = r2[i2];
    for (var u2 in a2) if (true !== o2[u2] && ht(a2, u2)) {
      if (o2[u2] = true, e === a2 && !vt(e, u2)) continue;
      me(n2, u2, Object.getOwnPropertyDescriptor(a2, u2), t);
    }
  }
  return e;
}
var Re = Ce(Ve);
var Ie = Ce(We);
var Me = Ce(qe);
var Ne = Ce(Ge);
var De = Ce(He);
var Le = { box: function(e, t) {
  return arguments.length > 2 && Fe("box"), new B(e, Ve, t);
}, shallowBox: function(e, t) {
  return arguments.length > 2 && Fe("shallowBox"), new B(e, qe, t);
}, array: function(e, t) {
  return arguments.length > 2 && Fe("array"), new R(e, Ve, t);
}, shallowArray: function(e, t) {
  return arguments.length > 2 && Fe("shallowArray"), new R(e, qe, t);
}, map: function(e, t) {
  return arguments.length > 2 && Fe("map"), new Ke(e, Ve, t);
}, shallowMap: function(e, t) {
  return arguments.length > 2 && Fe("shallowMap"), new Ke(e, qe, t);
}, object: function(e, t) {
  arguments.length > 2 && Fe("object");
  var r2 = {};
  return be(r2, t), je(r2, e), r2;
}, shallowObject: function(e, t) {
  arguments.length > 2 && Fe("shallowObject");
  var r2 = {};
  return be(r2, t), Ae(r2, e), r2;
}, ref: function() {
  return arguments.length < 2 ? ze(qe, arguments[0]) : Me.apply(null, arguments);
}, shallow: function() {
  return arguments.length < 2 ? ze(We, arguments[0]) : Ie.apply(null, arguments);
}, deep: function() {
  return arguments.length < 2 ? ze(Ve, arguments[0]) : Re.apply(null, arguments);
}, struct: function() {
  return arguments.length < 2 ? ze(Ge, arguments[0]) : Ne.apply(null, arguments);
} };
var Ue = function(e) {
  if (void 0 === e && (e = void 0), "string" == typeof arguments[1]) return Re.apply(null, arguments);
  if (tt(arguments.length <= 1, W("m021")), tt(!Be(e), W("m020")), xe(e)) return e;
  var t = Ve(e, 0, void 0);
  return t !== e ? t : Ue.box(e);
};
function Fe(e) {
  et("Expected one or two arguments to observable." + e + ". Did you accidentally try to use observable." + e + " as decorator?");
}
function Be(e) {
  return "object" == typeof e && null !== e && true === e.isMobxModifierDescriptor;
}
function ze(e, t) {
  return tt(!Be(t), "Modifiers cannot be nested"), { isMobxModifierDescriptor: true, initialValue: t, enhancer: e };
}
function Ve(e, t, r2) {
  return Be(e) && et("You tried to assign a modifier wrapped value to a collection, please define modifiers when creating the collection, not when modifying it"), xe(e) ? e : Array.isArray(e) ? Ue.array(e, r2) : ct(e) ? Ue.object(e, r2) : mt(e) ? Ue.map(e, r2) : e;
}
function We(e, t, r2) {
  return Be(e) && et("You tried to assign a modifier wrapped value to a collection, please define modifiers when creating the collection, not when modifying it"), null == e || Te(e) || U(e) || Ze(e) ? e : Array.isArray(e) ? Ue.shallowArray(e, r2) : ct(e) ? Ue.shallowObject(e, r2) : mt(e) ? Ue.shallowMap(e, r2) : et("The shallow modifier / decorator can only used in combination with arrays, objects and maps");
}
function qe(e) {
  return e;
}
function Ge(e, t, r2) {
  if (ae(e, t)) return t;
  if (xe(e)) return e;
  if (Array.isArray(e)) return new R(e, Ge, r2);
  if (mt(e)) return new Ke(e, Ge, r2);
  if (ct(e)) {
    var n2 = {};
    return be(n2, r2), ke(n2, Ge, [e]), n2;
  }
  return e;
}
function He(e, t, r2) {
  return ae(e, t) ? t : e;
}
function Ye(e, t) {
  void 0 === t && (t = void 0), Bt();
  try {
    return e.apply(t);
  } finally {
    zt();
  }
}
Object.keys(Le).forEach(function(e) {
  return Ue[e] = Le[e];
}), Ue.deep.struct = Ue.struct, Ue.ref.struct = function() {
  return arguments.length < 2 ? ze(He, arguments[0]) : De.apply(null, arguments);
};
var Xe = {};
var Ke = function() {
  function e(e2, t, r2) {
    void 0 === t && (t = Ve), void 0 === r2 && (r2 = "ObservableMap@" + Je()), this.enhancer = t, this.name = r2, this.$mobx = Xe, this._data = /* @__PURE__ */ Object.create(null), this._hasMap = /* @__PURE__ */ Object.create(null), this._keys = new R(void 0, qe, this.name + ".keys()", true), this.interceptors = null, this.changeListeners = null, this.dehancer = void 0, this.merge(e2);
  }
  return e.prototype._has = function(e2) {
    return void 0 !== this._data[e2];
  }, e.prototype.has = function(e2) {
    return !!this.isValidKey(e2) && (e2 = "" + e2, this._hasMap[e2] ? this._hasMap[e2].get() : this._updateHasMapEntry(e2, false).get());
  }, e.prototype.set = function(e2, t) {
    this.assertValidKey(e2), e2 = "" + e2;
    var r2 = this._has(e2);
    if (f(this)) {
      var n2 = d(this, { type: r2 ? "update" : "add", object: this, newValue: t, name: e2 });
      if (!n2) return this;
      t = n2.newValue;
    }
    return r2 ? this._updateValue(e2, t) : this._addValue(e2, t), this;
  }, e.prototype.delete = function(e2) {
    var t = this;
    if (this.assertValidKey(e2), e2 = "" + e2, f(this) && !(o2 = d(this, { type: "delete", object: this, name: e2 }))) return false;
    if (this._has(e2)) {
      var r2 = b(), n2 = p2(this), o2 = n2 || r2 ? { type: "delete", object: this, oldValue: this._data[e2].value, name: e2 } : null;
      return r2 && g(o2), Ye(function() {
        t._keys.remove(e2), t._updateHasMapEntry(e2, false), t._data[e2].setNewValue(void 0), t._data[e2] = void 0;
      }), n2 && y2(this, o2), r2 && w(), true;
    }
    return false;
  }, e.prototype._updateHasMapEntry = function(e2, t) {
    var r2 = this._hasMap[e2];
    return r2 ? r2.setNewValue(t) : r2 = this._hasMap[e2] = new B(t, qe, this.name + "." + e2 + "?", false), r2;
  }, e.prototype._updateValue = function(e2, t) {
    var r2 = this._data[e2];
    if ((t = r2.prepareNewValue(t)) !== F) {
      var n2 = b(), o2 = p2(this), i2 = o2 || n2 ? { type: "update", object: this, oldValue: r2.value, name: e2, newValue: t } : null;
      n2 && g(i2), r2.setNewValue(t), o2 && y2(this, i2), n2 && w();
    }
  }, e.prototype._addValue = function(e2, t) {
    var r2 = this;
    Ye(function() {
      var n3 = r2._data[e2] = new B(t, r2.enhancer, r2.name + "." + e2, false);
      t = n3.value, r2._updateHasMapEntry(e2, true), r2._keys.push(e2);
    });
    var n2 = b(), o2 = p2(this), i2 = o2 || n2 ? { type: "add", object: this, name: e2, newValue: t } : null;
    n2 && g(i2), o2 && y2(this, i2), n2 && w();
  }, e.prototype.get = function(e2) {
    return e2 = "" + e2, this.has(e2) ? this.dehanceValue(this._data[e2].get()) : this.dehanceValue(void 0);
  }, e.prototype.dehanceValue = function(e2) {
    return void 0 !== this.dehancer ? this.dehancer(e2) : e2;
  }, e.prototype.keys = function() {
    return E(this._keys.slice());
  }, e.prototype.values = function() {
    return E(this._keys.map(this.get, this));
  }, e.prototype.entries = function() {
    var e2 = this;
    return E(this._keys.map(function(t) {
      return [t, e2.get(t)];
    }));
  }, e.prototype.forEach = function(e2, t) {
    var r2 = this;
    this.keys().forEach(function(n2) {
      return e2.call(t, r2.get(n2), n2, r2);
    });
  }, e.prototype.merge = function(e2) {
    var t = this;
    return Ze(e2) && (e2 = e2.toJS()), Ye(function() {
      ct(e2) ? Object.keys(e2).forEach(function(r2) {
        return t.set(r2, e2[r2]);
      }) : Array.isArray(e2) ? e2.forEach(function(e3) {
        var r2 = e3[0], n2 = e3[1];
        return t.set(r2, n2);
      }) : mt(e2) ? e2.forEach(function(e3, r2) {
        return t.set(r2, e3);
      }) : null != e2 && et("Cannot initialize map from " + e2);
    }), this;
  }, e.prototype.clear = function() {
    var e2 = this;
    Ye(function() {
      Qt(function() {
        e2.keys().forEach(e2.delete, e2);
      });
    });
  }, e.prototype.replace = function(e2) {
    var t = this;
    return Ye(function() {
      var r2, n2 = ct(r2 = e2) ? Object.keys(r2) : Array.isArray(r2) ? r2.map(function(e3) {
        return e3[0];
      }) : mt(r2) ? Array.from(r2.keys()) : Ze(r2) ? r2.keys() : et("Cannot get keys from " + r2);
      t.keys().filter(function(e3) {
        return -1 === n2.indexOf(e3);
      }).forEach(function(e3) {
        return t.delete(e3);
      }), t.merge(e2);
    }), this;
  }, Object.defineProperty(e.prototype, "size", { get: function() {
    return this._keys.length;
  }, enumerable: true, configurable: true }), e.prototype.toJS = function() {
    var e2 = this, t = {};
    return this.keys().forEach(function(r2) {
      return t[r2] = e2.get(r2);
    }), t;
  }, e.prototype.toJSON = function() {
    return this.toJS();
  }, e.prototype.isValidKey = function(e2) {
    return null != e2 && ("string" == typeof e2 || "number" == typeof e2 || "boolean" == typeof e2);
  }, e.prototype.assertValidKey = function(e2) {
    if (!this.isValidKey(e2)) throw new Error("[mobx.map] Invalid key: '" + e2 + "', only strings, numbers and booleans are accepted as key in observable maps.");
  }, e.prototype.toString = function() {
    var e2 = this;
    return this.name + "[{ " + this.keys().map(function(t) {
      return t + ": " + e2.get(t);
    }).join(", ") + " }]";
  }, e.prototype.observe = function(e2, t) {
    return tt(true !== t, W("m033")), v(this, e2);
  }, e.prototype.intercept = function(e2) {
    return h(this, e2);
  }, e;
}();
P(Ke.prototype, function() {
  return this.entries();
});
var Ze = bt("ObservableMap", Ke);
var $e = [];
function Qe() {
  return "undefined" != typeof window ? window : o.g;
}
function Je() {
  return ++Pt.mobxGuid;
}
function et(e, t) {
  throw tt(false, e, t), "X";
}
function tt(e, t, r2) {
  if (!e) throw new Error("[mobx] Invariant failed: " + t + (r2 ? " in '" + r2 + "'" : ""));
}
Object.freeze($e);
var rt = [];
function nt(e) {
  return -1 === rt.indexOf(e) && (rt.push(e), console.error("[mobx] Deprecated: " + e), true);
}
function ot(e) {
  var t = false;
  return function() {
    if (!t) return t = true, e.apply(this, arguments);
  };
}
var it = function() {
};
function at(e) {
  var t = [];
  return e.forEach(function(e2) {
    -1 === t.indexOf(e2) && t.push(e2);
  }), t;
}
function ut(e, t, r2) {
  return void 0 === t && (t = 100), void 0 === r2 && (r2 = " - "), e ? e.slice(0, t).join(r2) + (e.length > t ? " (... and " + (e.length - t) + "more)" : "") : "";
}
function st(e) {
  return null !== e && "object" == typeof e;
}
function ct(e) {
  if (null === e || "object" != typeof e) return false;
  var t = Object.getPrototypeOf(e);
  return t === Object.prototype || null === t;
}
function lt() {
  for (var e = arguments[0], t = 1, r2 = arguments.length; t < r2; t++) {
    var n2 = arguments[t];
    for (var o2 in n2) ht(n2, o2) && (e[o2] = n2[o2]);
  }
  return e;
}
var ft = Object.prototype.hasOwnProperty;
function ht(e, t) {
  return ft.call(e, t);
}
function dt(e, t, r2) {
  Object.defineProperty(e, t, { enumerable: false, writable: true, configurable: true, value: r2 });
}
function pt(e, t, r2) {
  Object.defineProperty(e, t, { enumerable: false, writable: false, configurable: true, value: r2 });
}
function vt(e, t) {
  var r2 = Object.getOwnPropertyDescriptor(e, t);
  return !r2 || false !== r2.configurable && false !== r2.writable;
}
function yt(e, t) {
  tt(vt(e, t), "Cannot make property '" + t + "' observable, it is not configurable and writable in the target object");
}
function bt(e, t) {
  var r2 = "isMobX" + e;
  return t.prototype[r2] = true, function(e2) {
    return st(e2) && true === e2[r2];
  };
}
function mt(e) {
  return void 0 !== Qe().Map && e instanceof Qe().Map;
}
function gt() {
  return "function" == typeof Symbol && Symbol.toPrimitive || "@@toPrimitive";
}
function _t(e) {
  return null === e ? null : "object" == typeof e ? "" + e : e;
}
var wt;
var Ot;
var St = ["mobxGuid", "resetId", "spyListeners", "strictMode", "runId"];
var Et = function() {
  this.version = 5, this.trackingDerivation = null, this.computationDepth = 0, this.runId = 0, this.mobxGuid = 0, this.inBatch = 0, this.pendingUnobservations = [], this.pendingReactions = [], this.isRunningReactions = false, this.allowStateChanges = true, this.strictMode = false, this.resetId = 0, this.spyListeners = [], this.globalReactionErrorHandlers = [];
};
var Pt = new Et();
var Tt = false;
var xt = false;
var Ct = false;
var jt = Qe();
function At(e, t) {
  if ("object" == typeof e && null !== e) {
    if (U(e)) return tt(void 0 === t, W("m036")), e.$mobx.atom;
    if (Ze(e)) {
      var r2 = e;
      return void 0 === t ? At(r2._keys) : (tt(!!(n2 = r2._data[t] || r2._hasMap[t]), "the entry '" + t + "' does not exist in the observable map '" + Rt(e) + "'"), n2);
    }
    var n2;
    if ($2(e), t && !e.$mobx && e[t], Te(e)) return t ? (tt(!!(n2 = e.$mobx.values[t]), "no observable property '" + t + "' found on the observable object '" + Rt(e) + "'"), n2) : et("please specify a property");
    if (l(e) || ve(e) || lr(e)) return e;
  } else if ("function" == typeof e && lr(e.$mobx)) return e.$mobx;
  return et("Cannot obtain atom from " + e);
}
function kt(e, t) {
  return tt(e, "Expecting some object"), void 0 !== t ? kt(At(e, t)) : l(e) || ve(e) || lr(e) || Ze(e) ? e : ($2(e), e.$mobx ? e.$mobx : void tt(false, "Cannot obtain administration from " + e));
}
function Rt(e, t) {
  return (void 0 !== t ? At(e, t) : Te(e) || Ze(e) ? kt(e) : At(e)).name;
}
function It(e, t) {
  return Mt(At(e, t));
}
function Mt(e) {
  var t = { name: e.name };
  return e.observing && e.observing.length > 0 && (t.dependencies = at(e.observing).map(Mt)), t;
}
function Nt(e) {
  var t = { name: e.name };
  return function(e2) {
    return e2.observers && e2.observers.length > 0;
  }(e) && (t.observers = Dt(e).map(Nt)), t;
}
function Dt(e) {
  return e.observers;
}
function Lt(e, t) {
  var r2 = e.observers.length;
  r2 && (e.observersIndexes[t.__mapid] = r2), e.observers[r2] = t, e.lowestObserverState > t.dependenciesState && (e.lowestObserverState = t.dependenciesState);
}
function Ut(e, t) {
  if (1 === e.observers.length) e.observers.length = 0, Ft(e);
  else {
    var r2 = e.observers, n2 = e.observersIndexes, o2 = r2.pop();
    if (o2 !== t) {
      var i2 = n2[t.__mapid] || 0;
      i2 ? n2[o2.__mapid] = i2 : delete n2[o2.__mapid], r2[i2] = o2;
    }
    delete n2[t.__mapid];
  }
}
function Ft(e) {
  e.isPendingUnobservation || (e.isPendingUnobservation = true, Pt.pendingUnobservations.push(e));
}
function Bt() {
  Pt.inBatch++;
}
function zt() {
  if (0 === --Pt.inBatch) {
    sr();
    for (var e = Pt.pendingUnobservations, t = 0; t < e.length; t++) {
      var r2 = e[t];
      r2.isPendingUnobservation = false, 0 === r2.observers.length && r2.onBecomeUnobserved();
    }
    Pt.pendingUnobservations = [];
  }
}
function Vt(e) {
  var t = Pt.trackingDerivation;
  null !== t ? t.runId !== e.lastAccessedBy && (e.lastAccessedBy = t.runId, t.newObserving[t.unboundDepsCount++] = e) : 0 === e.observers.length && Ft(e);
}
function Wt(e, t) {
  if (console.log("[mobx.trace] '" + e.name + "' is invalidated due to a change in: '" + t.name + "'"), e.isTracing === Ot.BREAK) {
    var r2 = [];
    qt(It(e), r2, 1), new Function("debugger;\n/*\nTracing '" + e.name + "'\n\nYou are entering this break point because derivation '" + e.name + "' is being traced and '" + t.name + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (e instanceof pe ? e.derivation.toString() : "") + "\n\nThe dependencies for this derivation are:\n\n" + r2.join("\n") + "\n*/\n    ")();
  }
}
function qt(e, t, r2) {
  t.length >= 1e3 ? t.push("(and many more)") : (t.push("" + new Array(r2).join("	") + e.name), e.dependencies && e.dependencies.forEach(function(e2) {
    return qt(e2, t, r2 + 1);
  }));
}
jt.__mobxInstanceCount ? (jt.__mobxInstanceCount++, setTimeout(function() {
  Tt || xt || Ct || (Ct = true, console.warn("[mobx] Warning: there are multiple mobx instances active. This might lead to unexpected results. See https://github.com/mobxjs/mobx/issues/1082 for details."));
}, 1)) : jt.__mobxInstanceCount = 1, function(e) {
  e[e.NOT_TRACKING = -1] = "NOT_TRACKING", e[e.UP_TO_DATE = 0] = "UP_TO_DATE", e[e.POSSIBLY_STALE = 1] = "POSSIBLY_STALE", e[e.STALE = 2] = "STALE";
}(wt || (wt = {})), function(e) {
  e[e.NONE = 0] = "NONE", e[e.LOG = 1] = "LOG", e[e.BREAK = 2] = "BREAK";
}(Ot || (Ot = {}));
var Gt = function(e) {
  this.cause = e;
};
function Ht(e) {
  return e instanceof Gt;
}
function Yt(e) {
  switch (e.dependenciesState) {
    case wt.UP_TO_DATE:
      return false;
    case wt.NOT_TRACKING:
    case wt.STALE:
      return true;
    case wt.POSSIBLY_STALE:
      for (var t = Jt(), r2 = e.observing, n2 = r2.length, o2 = 0; o2 < n2; o2++) {
        var i2 = r2[o2];
        if (ve(i2)) {
          try {
            i2.get();
          } catch (e2) {
            return er(t), true;
          }
          if (e.dependenciesState === wt.STALE) return er(t), true;
        }
      }
      return tr(e), er(t), false;
  }
}
function Xt() {
  return null !== Pt.trackingDerivation;
}
function Kt(e) {
  var t = e.observers.length > 0;
  Pt.computationDepth > 0 && t && et(W("m031") + e.name), !Pt.allowStateChanges && t && et(W(Pt.strictMode ? "m030a" : "m030b") + e.name);
}
function Zt(e, t, r2) {
  tr(e), e.newObserving = new Array(e.observing.length + 100), e.unboundDepsCount = 0, e.runId = ++Pt.runId;
  var n2, o2 = Pt.trackingDerivation;
  Pt.trackingDerivation = e;
  try {
    n2 = t.call(r2);
  } catch (e2) {
    n2 = new Gt(e2);
  }
  return Pt.trackingDerivation = o2, function(e2) {
    for (var t2 = e2.observing, r3 = e2.observing = e2.newObserving, n3 = wt.UP_TO_DATE, o3 = 0, i2 = e2.unboundDepsCount, a2 = 0; a2 < i2; a2++) 0 === (u2 = r3[a2]).diffValue && (u2.diffValue = 1, o3 !== a2 && (r3[o3] = u2), o3++), u2.dependenciesState > n3 && (n3 = u2.dependenciesState);
    for (r3.length = o3, e2.newObserving = null, i2 = t2.length; i2--; ) 0 === (u2 = t2[i2]).diffValue && Ut(u2, e2), u2.diffValue = 0;
    for (; o3--; ) {
      var u2;
      1 === (u2 = r3[o3]).diffValue && (u2.diffValue = 0, Lt(u2, e2));
    }
    n3 !== wt.UP_TO_DATE && (e2.dependenciesState = n3, e2.onBecomeStale());
  }(e), n2;
}
function $t(e) {
  var t = e.observing;
  e.observing = [];
  for (var r2 = t.length; r2--; ) Ut(t[r2], e);
  e.dependenciesState = wt.NOT_TRACKING;
}
function Qt(e) {
  var t = Jt(), r2 = e();
  return er(t), r2;
}
function Jt() {
  var e = Pt.trackingDerivation;
  return Pt.trackingDerivation = null, e;
}
function er(e) {
  Pt.trackingDerivation = e;
}
function tr(e) {
  if (e.dependenciesState !== wt.UP_TO_DATE) {
    e.dependenciesState = wt.UP_TO_DATE;
    for (var t = e.observing, r2 = t.length; r2--; ) t[r2].lowestObserverState = wt.UP_TO_DATE;
  }
}
function rr(e) {
  return console.log(e), e;
}
function nr(e) {
  switch (e.length) {
    case 0:
      return Pt.trackingDerivation;
    case 1:
      return At(e[0]);
    case 2:
      return At(e[0], e[1]);
  }
}
var or = function() {
  function e(e2, t) {
    void 0 === e2 && (e2 = "Reaction@" + Je()), this.name = e2, this.onInvalidate = t, this.observing = [], this.newObserving = [], this.dependenciesState = wt.NOT_TRACKING, this.diffValue = 0, this.runId = 0, this.unboundDepsCount = 0, this.__mapid = "#" + Je(), this.isDisposed = false, this._isScheduled = false, this._isTrackPending = false, this._isRunning = false, this.isTracing = Ot.NONE;
  }
  return e.prototype.onBecomeStale = function() {
    this.schedule();
  }, e.prototype.schedule = function() {
    this._isScheduled || (this._isScheduled = true, Pt.pendingReactions.push(this), sr());
  }, e.prototype.isScheduled = function() {
    return this._isScheduled;
  }, e.prototype.runReaction = function() {
    this.isDisposed || (Bt(), this._isScheduled = false, Yt(this) && (this._isTrackPending = true, this.onInvalidate(), this._isTrackPending && b() && m({ object: this, type: "scheduled-reaction" })), zt());
  }, e.prototype.track = function(e2) {
    Bt();
    var t, r2 = b();
    r2 && (t = Date.now(), g({ object: this, type: "reaction", fn: e2 })), this._isRunning = true;
    var n2 = Zt(this, e2, void 0);
    this._isRunning = false, this._isTrackPending = false, this.isDisposed && $t(this), Ht(n2) && this.reportExceptionInDerivation(n2.cause), r2 && w({ time: Date.now() - t }), zt();
  }, e.prototype.reportExceptionInDerivation = function(e2) {
    var t = this;
    if (this.errorHandler) this.errorHandler(e2, this);
    else {
      var r2 = "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this, n2 = W("m037");
      console.error(r2 || n2, e2), b() && m({ type: "error", message: r2, error: e2, object: this }), Pt.globalReactionErrorHandlers.forEach(function(r3) {
        return r3(e2, t);
      });
    }
  }, e.prototype.dispose = function() {
    this.isDisposed || (this.isDisposed = true, this._isRunning || (Bt(), $t(this), zt()));
  }, e.prototype.getDisposer = function() {
    var e2 = this.dispose.bind(this);
    return e2.$mobx = this, e2.onError = ir, e2;
  }, e.prototype.toString = function() {
    return "Reaction[" + this.name + "]";
  }, e.prototype.whyRun = function() {
    var e2 = at(this._isRunning ? this.newObserving : this.observing).map(function(e3) {
      return e3.name;
    });
    return "\nWhyRun? reaction '" + this.name + "':\n * Status: [" + (this.isDisposed ? "stopped" : this._isRunning ? "running" : this.isScheduled() ? "scheduled" : "idle") + "]\n * This reaction will re-run if any of the following observables changes:\n    " + ut(e2) + "\n    " + (this._isRunning ? " (... or any observable accessed during the remainder of the current run)" : "") + "\n	" + W("m038") + "\n";
  }, e.prototype.trace = function(e2) {
    void 0 === e2 && (e2 = false), function() {
      for (var e3 = [], t = 0; t < arguments.length; t++) e3[t] = arguments[t];
      var r2 = false;
      "boolean" == typeof e3[e3.length - 1] && (r2 = e3.pop());
      var n2 = nr(e3);
      if (!n2) return et("'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");
      n2.isTracing === Ot.NONE && console.log("[mobx.trace] '" + n2.name + "' tracing enabled"), n2.isTracing = r2 ? Ot.BREAK : Ot.LOG;
    }(this, e2);
  }, e;
}();
function ir(e) {
  tt(this && this.$mobx && lr(this.$mobx), "Invalid `this`"), tt(!this.$mobx.errorHandler, "Only one onErrorHandler can be registered"), this.$mobx.errorHandler = e;
}
var ar = 100;
var ur = function(e) {
  return e();
};
function sr() {
  Pt.inBatch > 0 || Pt.isRunningReactions || ur(cr);
}
function cr() {
  Pt.isRunningReactions = true;
  for (var e = Pt.pendingReactions, t = 0; e.length > 0; ) {
    ++t === ar && (console.error("Reaction doesn't converge to a stable state after " + ar + " iterations. Probably there is a cycle in the reactive function: " + e[0]), e.splice(0));
    for (var r2 = e.splice(0), n2 = 0, o2 = r2.length; n2 < o2; n2++) r2[n2].runReaction();
  }
  Pt.isRunningReactions = false;
}
var lr = bt("Reaction", or);
function fr(e) {
  return K2(function(t, r2, n2, o2, i2) {
    tt(void 0 !== i2, W("m009")), tt("function" == typeof i2.get, W("m010")), _e(be(t, ""), r2, i2.get, i2.set, e, false);
  }, function(e2) {
    var t = this.$mobx.values[e2];
    if (void 0 !== t) return t.get();
  }, function(e2, t) {
    this.$mobx.values[e2].set(t);
  }, false, false);
}
var hr = fr(fe.default);
var dr = fr(fe.structural);
var pr = function(e, t, r2) {
  if ("string" == typeof t) return hr.apply(null, arguments);
  tt("function" == typeof e, W("m011")), tt(arguments.length < 3, W("m012"));
  var n2 = "object" == typeof t ? t : {};
  n2.setter = "function" == typeof t ? t : n2.setter;
  var o2 = n2.equals ? n2.equals : n2.compareStructural || n2.struct ? fe.structural : fe.default;
  return new pe(e, n2.context, o2, n2.name || e.name || "", n2.setter);
};
function vr(e, t, r2) {
  function n2(n3) {
    return t && r2.push([e, n3]), n3;
  }
  if (void 0 === t && (t = true), void 0 === r2 && (r2 = []), xe(e)) {
    if (t && null === r2 && (r2 = []), t && null !== e && "object" == typeof e) {
      for (var o2 = 0, i2 = r2.length; o2 < i2; o2++) if (r2[o2][0] === e) return r2[o2][1];
    }
    if (U(e)) {
      var a2 = n2([]), u2 = e.map(function(e2) {
        return vr(e2, t, r2);
      });
      for (a2.length = u2.length, o2 = 0, i2 = u2.length; o2 < i2; o2++) a2[o2] = u2[o2];
      return a2;
    }
    if (Te(e)) {
      for (var s2 in a2 = n2({}), e) a2[s2] = vr(e[s2], t, r2);
      return a2;
    }
    if (Ze(e)) {
      var c2 = n2({});
      return e.forEach(function(e2, n3) {
        return c2[n3] = vr(e2, t, r2);
      }), c2;
    }
    if (z(e)) return vr(e.get(), t, r2);
  }
  return e;
}
pr.struct = dr, pr.equals = fr;
var yr = { allowStateChanges: function(e, t) {
  var r2, n2 = Y(e);
  try {
    r2 = t();
  } finally {
    X(n2);
  }
  return r2;
}, deepEqual: ae, getAtom: At, getDebugName: Rt, getDependencyTree: It, getAdministration: kt, getGlobalState: function() {
  return Pt;
}, getObserverTree: function(e, t) {
  return Nt(At(e, t));
}, interceptReads: function(e, t, r2) {
  var n2;
  if (Ze(e) || U(e) || z(e)) n2 = kt(e);
  else {
    if (!Te(e)) return et("Expected observable map, object or array as first array");
    if ("string" != typeof t) return et("InterceptReads can only be used with a specific property, not with an object in general");
    n2 = kt(e, t);
  }
  return void 0 !== n2.dehancer ? et("An intercept reader was already established") : (n2.dehancer = "function" == typeof t ? t : r2, function() {
    n2.dehancer = void 0;
  });
}, isComputingDerivation: Xt, isSpyEnabled: b, onReactionError: function(e) {
  return Pt.globalReactionErrorHandlers.push(e), function() {
    var t = Pt.globalReactionErrorHandlers.indexOf(e);
    t >= 0 && Pt.globalReactionErrorHandlers.splice(t, 1);
  };
}, reserveArrayBuffer: D, resetGlobalState: function() {
  Pt.resetId++;
  var e = new Et();
  for (var t in e) -1 === St.indexOf(t) && (Pt[t] = e[t]);
  Pt.allowStateChanges = !Pt.strictMode;
}, isolateGlobalState: function() {
  xt = true, Qe().__mobxInstanceCount--;
}, shareGlobalState: function() {
  nt("Using `shareGlobalState` is not recommended, use peer dependencies instead. See https://github.com/mobxjs/mobx/issues/1082 for details."), Tt = true;
  var e = Qe(), t = Pt;
  if (e.__mobservableTrackingStack || e.__mobservableViewStack) throw new Error("[mobx] An incompatible version of mobservable is already loaded.");
  if (e.__mobxGlobal && e.__mobxGlobal.version !== t.version) throw new Error("[mobx] An incompatible version of mobx is already loaded.");
  e.__mobxGlobal ? Pt = e.__mobxGlobal : e.__mobxGlobal = t;
}, spyReport: m, spyReportEnd: w, spyReportStart: g, setReactionScheduler: function(e) {
  var t = ur;
  ur = function(r2) {
    return e(function() {
      return t(r2);
    });
  };
} };
var br = { Reaction: or, untracked: Qt, Atom: c, BaseAtom: s, useStrict: H, isStrictModeEnabled: function() {
  return Pt.strictMode;
}, spy: O, comparer: fe, asReference: function(e) {
  return nt("asReference is deprecated, use observable.ref instead"), Ue.ref(e);
}, asFlat: function(e) {
  return nt("asFlat is deprecated, use observable.shallow instead"), Ue.shallow(e);
}, asStructure: function(e) {
  return nt("asStructure is deprecated. Use observable.struct, computed.struct or reaction options instead."), Ue.struct(e);
}, asMap: function(e) {
  return nt("asMap is deprecated, use observable.map or observable.shallowMap instead"), Ue.map(e || {});
}, isModifierDescriptor: Be, isObservableObject: Te, isBoxedObservable: z, isObservableArray: U, ObservableMap: Ke, isObservableMap: Ze, map: function(e) {
  return nt("`mobx.map` is deprecated, use `new ObservableMap` or `mobx.observable.map` instead"), Ue.map(e);
}, transaction: Ye, observable: Ue, computed: pr, isObservable: xe, isComputed: function(e, t) {
  if (null == e) return false;
  if (void 0 !== t) {
    if (false === Te(e)) return false;
    if (!e.$mobx.values[t]) return false;
    var r2 = At(e, t);
    return ve(r2);
  }
  return ve(e);
}, extendObservable: je, extendShallowObservable: Ae, observe: function(e, t, r2, n2) {
  return "function" == typeof r2 ? function(e2, t2, r3, n3) {
    return kt(e2, t2).observe(r3, n3);
  }(e, t, r2, n2) : function(e2, t2, r3) {
    return kt(e2).observe(t2, r3);
  }(e, t, r2);
}, intercept: function(e, t, r2) {
  return "function" == typeof r2 ? function(e2, t2, r3) {
    return kt(e2, t2).intercept(r3);
  }(e, t, r2) : function(e2, t2) {
    return kt(e2).intercept(t2);
  }(e, t);
}, autorun: he, autorunAsync: function(e, t, r2, n2) {
  var o2, i2, a2, u2;
  "string" == typeof e ? (o2 = e, i2 = t, a2 = r2, u2 = n2) : (o2 = e.name || "AutorunAsync@" + Je(), i2 = e, a2 = t, u2 = r2), tt(false === ne(i2), W("m006")), void 0 === a2 && (a2 = 1), u2 && (i2 = i2.bind(u2));
  var s2 = false, c2 = new or(o2, function() {
    s2 || (s2 = true, setTimeout(function() {
      s2 = false, c2.isDisposed || c2.track(l2);
    }, a2));
  });
  function l2() {
    i2(c2);
  }
  return c2.schedule(), c2.getDisposer();
}, when: function(e, t, r2, n2) {
  var o2, i2, a2, u2;
  return "string" == typeof e ? (o2 = e, i2 = t, a2 = r2, u2 = n2) : (o2 = "When@" + Je(), i2 = e, a2 = t, u2 = r2), he(o2, function(e2) {
    if (i2.call(u2)) {
      e2.dispose();
      var t2 = Jt();
      a2.call(u2), er(t2);
    }
  });
}, reaction: de, action: te, isAction: ne, runInAction: function(e, t, r2) {
  var n2 = "string" == typeof e ? e : e.name || "<unnamed action>", o2 = "function" == typeof e ? e : t, i2 = "function" == typeof e ? t : r2;
  return tt("function" == typeof o2, W("m002")), tt(0 === o2.length, W("m003")), tt("string" == typeof n2 && n2.length > 0, "actions should have valid names, got: '" + n2 + "'"), G(n2, o2, i2, void 0);
}, expr: function(e, t) {
  return Xt() || console.warn(W("m013")), pr(e, { context: t }).get();
}, toJS: vr, createTransformer: function(e, t) {
  tt("function" == typeof e && e.length < 2, "createTransformer expects a function that accepts one argument");
  var r2 = {}, n2 = Pt.resetId, o2 = function(n3) {
    function o3(t2, r3) {
      var o4 = n3.call(this, function() {
        return e(r3);
      }, void 0, fe.default, "Transformer-" + e.name + "-" + t2, void 0) || this;
      return o4.sourceIdentifier = t2, o4.sourceObject = r3, o4;
    }
    return u(o3, n3), o3.prototype.onBecomeUnobserved = function() {
      var e2 = this.value;
      n3.prototype.onBecomeUnobserved.call(this), delete r2[this.sourceIdentifier], t && t(e2, this.sourceObject);
    }, o3;
  }(pe);
  return function(e2) {
    n2 !== Pt.resetId && (r2 = {}, n2 = Pt.resetId);
    var t2 = function(e3) {
      if ("string" == typeof e3 || "number" == typeof e3) return e3;
      if (null === e3 || "object" != typeof e3) throw new Error("[mobx] transform expected some kind of object or primitive value, got: " + e3);
      var t3 = e3.$transformId;
      return void 0 === t3 && dt(e3, "$transformId", t3 = Je()), t3;
    }(e2), i2 = r2[t2];
    return i2 ? i2.get() : (i2 = r2[t2] = new o2(t2, e2)).get();
  };
}, whyRun: function(e, t) {
  return nt("`whyRun` is deprecated in favor of `trace`"), (e = nr(arguments)) ? ve(e) || lr(e) ? rr(e.whyRun()) : et(W("m025")) : rr(W("m024"));
}, isArrayLike: function(e) {
  return Array.isArray(e) || U(e);
}, extras: yr };
var mr = false;
var gr = function(e) {
  var t = br[e];
  Object.defineProperty(br, e, { get: function() {
    return mr || (mr = true, console.warn("Using default export (`import mobx from 'mobx'`) is deprecated and won’t work in mobx@4.0.0\nUse `import * as mobx from 'mobx'` instead")), t;
  } });
};
for (_r in br) gr(_r);
var _r;
function wr(e) {
  return wr = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, wr(e);
}
function Or(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, Sr(n2.key), n2);
  }
}
function Sr(e) {
  var t = function(e2) {
    if ("object" != wr(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != wr(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == wr(t) ? t : t + "";
}
"object" == typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ && __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({ spy: O, extras: yr });
var Er = ["onLayoutDone", "onLayoutStep", "onError", "onInitialization", "onLayoutComputing", "onWebGLContextLost", "onZoomTransitionDone", "restart"];
var Pr = function() {
  return e = function e2() {
    var t2, r2, n2, o2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    !function(e3, t3) {
      if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    }(this, e2), t2 = this, n2 = void 0, (r2 = Sr(r2 = "callbacks")) in t2 ? Object.defineProperty(t2, r2, { value: n2, enumerable: true, configurable: true, writable: true }) : t2[r2] = n2, this.callbacks = o2;
  }, t = [{ key: "onInitialization", value: function() {
    this.isValidFunction(this.callbacks.onInitialization) && this.callbacks.onInitialization();
  } }, { key: "onZoomTransitionDone", value: function() {
    this.isValidFunction(this.callbacks.onZoomTransitionDone) && this.callbacks.onZoomTransitionDone();
  } }, { key: "onLayoutDone", value: function() {
    this.isValidFunction(this.callbacks.onLayoutDone) && this.callbacks.onLayoutDone();
  } }, { key: "onLayoutStep", value: function(e2) {
    this.isValidFunction(this.callbacks.onLayoutStep) && this.callbacks.onLayoutStep(e2);
  } }, { key: "onLayoutComputing", value: function(e2) {
    this.isValidFunction(this.callbacks.onLayoutComputing) && this.callbacks.onLayoutComputing(e2);
  } }, { key: "onError", value: function(e2) {
    this.isValidFunction(this.callbacks.onError) && this.callbacks.onError(e2);
  } }, { key: "onWebGLContextLost", value: function(e2) {
    this.isValidFunction(this.callbacks.onWebGLContextLost) && this.callbacks.onWebGLContextLost(e2);
  } }, { key: "isValidFunction", value: function(e2) {
    return void 0 !== e2 && "function" == typeof e2;
  } }], t && Or(e.prototype, t), Object.defineProperty(e, "prototype", { writable: false }), e;
  var e, t;
}();
var Tr = o(1803);
var xr = o.n(Tr);
var Cr = { value: () => {
} };
function jr() {
  for (var e, t = 0, r2 = arguments.length, n2 = {}; t < r2; ++t) {
    if (!(e = arguments[t] + "") || e in n2 || /[\s.]/.test(e)) throw new Error("illegal type: " + e);
    n2[e] = [];
  }
  return new Ar(n2);
}
function Ar(e) {
  this._ = e;
}
function kr(e, t) {
  for (var r2, n2 = 0, o2 = e.length; n2 < o2; ++n2) if ((r2 = e[n2]).name === t) return r2.value;
}
function Rr(e, t, r2) {
  for (var n2 = 0, o2 = e.length; n2 < o2; ++n2) if (e[n2].name === t) {
    e[n2] = Cr, e = e.slice(0, n2).concat(e.slice(n2 + 1));
    break;
  }
  return null != r2 && e.push({ name: t, value: r2 }), e;
}
Ar.prototype = jr.prototype = { constructor: Ar, on: function(e, t) {
  var r2, n2, o2 = this._, i2 = (n2 = o2, (e + "").trim().split(/^|\s+/).map(function(e2) {
    var t2 = "", r3 = e2.indexOf(".");
    if (r3 >= 0 && (t2 = e2.slice(r3 + 1), e2 = e2.slice(0, r3)), e2 && !n2.hasOwnProperty(e2)) throw new Error("unknown type: " + e2);
    return { type: e2, name: t2 };
  })), a2 = -1, u2 = i2.length;
  if (!(arguments.length < 2)) {
    if (null != t && "function" != typeof t) throw new Error("invalid callback: " + t);
    for (; ++a2 < u2; ) if (r2 = (e = i2[a2]).type) o2[r2] = Rr(o2[r2], e.name, t);
    else if (null == t) for (r2 in o2) o2[r2] = Rr(o2[r2], e.name, null);
    return this;
  }
  for (; ++a2 < u2; ) if ((r2 = (e = i2[a2]).type) && (r2 = kr(o2[r2], e.name))) return r2;
}, copy: function() {
  var e = {}, t = this._;
  for (var r2 in t) e[r2] = t[r2].slice();
  return new Ar(e);
}, call: function(e, t) {
  if ((r2 = arguments.length - 2) > 0) for (var r2, n2, o2 = new Array(r2), i2 = 0; i2 < r2; ++i2) o2[i2] = arguments[i2 + 2];
  if (!this._.hasOwnProperty(e)) throw new Error("unknown type: " + e);
  for (i2 = 0, r2 = (n2 = this._[e]).length; i2 < r2; ++i2) n2[i2].value.apply(t, o2);
}, apply: function(e, t, r2) {
  if (!this._.hasOwnProperty(e)) throw new Error("unknown type: " + e);
  for (var n2 = this._[e], o2 = 0, i2 = n2.length; o2 < i2; ++o2) n2[o2].value.apply(t, r2);
} };
var Ir = jr;
var Mr;
var Nr;
var Dr = 0;
var Lr = 0;
var Ur = 0;
var Fr = 0;
var Br = 0;
var zr = 0;
var Vr = "object" == typeof performance && performance.now ? performance : Date;
var Wr = "object" == typeof window && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(e) {
  setTimeout(e, 17);
};
function qr() {
  return Br || (Wr(Gr), Br = Vr.now() + zr);
}
function Gr() {
  Br = 0;
}
function Hr() {
  this._call = this._time = this._next = null;
}
function Yr(e, t, r2) {
  var n2 = new Hr();
  return n2.restart(e, t, r2), n2;
}
function Xr() {
  Br = (Fr = Vr.now()) + zr, Dr = Lr = 0;
  try {
    !function() {
      qr(), ++Dr;
      for (var e, t = Mr; t; ) (e = Br - t._time) >= 0 && t._call.call(void 0, e), t = t._next;
      --Dr;
    }();
  } finally {
    Dr = 0, function() {
      for (var e, t, r2 = Mr, n2 = 1 / 0; r2; ) r2._call ? (n2 > r2._time && (n2 = r2._time), e = r2, r2 = r2._next) : (t = r2._next, r2._next = null, r2 = e ? e._next = t : Mr = t);
      Nr = e, Zr(n2);
    }(), Br = 0;
  }
}
function Kr() {
  var e = Vr.now(), t = e - Fr;
  t > 1e3 && (zr -= t, Fr = e);
}
function Zr(e) {
  Dr || (Lr && (Lr = clearTimeout(Lr)), e - Br > 24 ? (e < 1 / 0 && (Lr = setTimeout(Xr, e - Vr.now() - zr)), Ur && (Ur = clearInterval(Ur))) : (Ur || (Fr = Vr.now(), Ur = setInterval(Kr, 1e3)), Dr = 1, Wr(Xr)));
}
Hr.prototype = Yr.prototype = { constructor: Hr, restart: function(e, t, r2) {
  if ("function" != typeof e) throw new TypeError("callback is not a function");
  r2 = (null == r2 ? qr() : +r2) + (null == t ? 0 : +t), this._next || Nr === this || (Nr ? Nr._next = this : Mr = this, Nr = this), this._call = e, this._time = r2, Zr();
}, stop: function() {
  this._call && (this._call = null, this._time = 1 / 0, Zr());
} };
var $r = 4294967296;
function Qr(e) {
  return e.x;
}
function Jr(e) {
  return e.y;
}
var en = Math.PI * (3 - Math.sqrt(5));
function tn(e, t, r2, n2) {
  if (isNaN(t) || isNaN(r2)) return e;
  var o2, i2, a2, u2, s2, c2, l2, f2, h2, d2 = e._root, p3 = { data: n2 }, v3 = e._x0, y3 = e._y0, b2 = e._x1, m2 = e._y1;
  if (!d2) return e._root = p3, e;
  for (; d2.length; ) if ((c2 = t >= (i2 = (v3 + b2) / 2)) ? v3 = i2 : b2 = i2, (l2 = r2 >= (a2 = (y3 + m2) / 2)) ? y3 = a2 : m2 = a2, o2 = d2, !(d2 = d2[f2 = l2 << 1 | c2])) return o2[f2] = p3, e;
  if (u2 = +e._x.call(null, d2.data), s2 = +e._y.call(null, d2.data), t === u2 && r2 === s2) return p3.next = d2, o2 ? o2[f2] = p3 : e._root = p3, e;
  do {
    o2 = o2 ? o2[f2] = new Array(4) : e._root = new Array(4), (c2 = t >= (i2 = (v3 + b2) / 2)) ? v3 = i2 : b2 = i2, (l2 = r2 >= (a2 = (y3 + m2) / 2)) ? y3 = a2 : m2 = a2;
  } while ((f2 = l2 << 1 | c2) == (h2 = (s2 >= a2) << 1 | u2 >= i2));
  return o2[h2] = d2, o2[f2] = p3, e;
}
function rn(e, t, r2, n2, o2) {
  this.node = e, this.x0 = t, this.y0 = r2, this.x1 = n2, this.y1 = o2;
}
function nn(e) {
  return e[0];
}
function on3(e) {
  return e[1];
}
function an(e, t, r2) {
  var n2 = new un(null == t ? nn : t, null == r2 ? on3 : r2, NaN, NaN, NaN, NaN);
  return null == e ? n2 : n2.addAll(e);
}
function un(e, t, r2, n2, o2, i2) {
  this._x = e, this._y = t, this._x0 = r2, this._y0 = n2, this._x1 = o2, this._y1 = i2, this._root = void 0;
}
function sn(e) {
  for (var t = { data: e.data }, r2 = t; e = e.next; ) r2 = r2.next = { data: e.data };
  return t;
}
var cn = an.prototype = un.prototype;
function ln(e) {
  return function() {
    return e;
  };
}
function fn3(e) {
  return 1e-6 * (e() - 0.5);
}
function hn() {
  var e, t, r2, n2, o2, i2 = ln(-30), a2 = 1, u2 = 1 / 0, s2 = 0.81;
  function c2(r3) {
    var o3, i3 = e.length, a3 = an(e, Qr, Jr).visitAfter(f2);
    for (n2 = r3, o3 = 0; o3 < i3; ++o3) t = e[o3], a3.visit(h2);
  }
  function l2() {
    if (e) {
      var t2, r3, n3 = e.length;
      for (o2 = new Array(n3), t2 = 0; t2 < n3; ++t2) r3 = e[t2], o2[r3.index] = +i2(r3, t2, e);
    }
  }
  function f2(e2) {
    var t2, r3, n3, i3, a3, u3 = 0, s3 = 0;
    if (e2.length) {
      for (n3 = i3 = a3 = 0; a3 < 4; ++a3) (t2 = e2[a3]) && (r3 = Math.abs(t2.value)) && (u3 += t2.value, s3 += r3, n3 += r3 * t2.x, i3 += r3 * t2.y);
      e2.x = n3 / s3, e2.y = i3 / s3;
    } else {
      (t2 = e2).x = t2.data.x, t2.y = t2.data.y;
      do {
        u3 += o2[t2.data.index];
      } while (t2 = t2.next);
    }
    e2.value = u3;
  }
  function h2(e2, i3, c3, l3) {
    if (!e2.value) return true;
    var f3 = e2.x - t.x, h3 = e2.y - t.y, d2 = l3 - i3, p3 = f3 * f3 + h3 * h3;
    if (d2 * d2 / s2 < p3) return p3 < u2 && (0 === f3 && (p3 += (f3 = fn3(r2)) * f3), 0 === h3 && (p3 += (h3 = fn3(r2)) * h3), p3 < a2 && (p3 = Math.sqrt(a2 * p3)), t.vx += f3 * e2.value * n2 / p3, t.vy += h3 * e2.value * n2 / p3), true;
    if (!(e2.length || p3 >= u2)) {
      (e2.data !== t || e2.next) && (0 === f3 && (p3 += (f3 = fn3(r2)) * f3), 0 === h3 && (p3 += (h3 = fn3(r2)) * h3), p3 < a2 && (p3 = Math.sqrt(a2 * p3)));
      do {
        e2.data !== t && (d2 = o2[e2.data.index] * n2 / p3, t.vx += f3 * d2, t.vy += h3 * d2);
      } while (e2 = e2.next);
    }
  }
  return c2.initialize = function(t2, n3) {
    e = t2, r2 = n3, l2();
  }, c2.strength = function(e2) {
    return arguments.length ? (i2 = "function" == typeof e2 ? e2 : ln(+e2), l2(), c2) : i2;
  }, c2.distanceMin = function(e2) {
    return arguments.length ? (a2 = e2 * e2, c2) : Math.sqrt(a2);
  }, c2.distanceMax = function(e2) {
    return arguments.length ? (u2 = e2 * e2, c2) : Math.sqrt(u2);
  }, c2.theta = function(e2) {
    return arguments.length ? (s2 = e2 * e2, c2) : Math.sqrt(s2);
  }, c2;
}
function dn(e) {
  return e.x + e.vx;
}
function pn(e) {
  return e.y + e.vy;
}
function vn(e) {
  return e.index;
}
function yn(e, t) {
  var r2 = e.get(t);
  if (!r2) throw new Error("node not found: " + t);
  return r2;
}
cn.copy = function() {
  var e, t, r2 = new un(this._x, this._y, this._x0, this._y0, this._x1, this._y1), n2 = this._root;
  if (!n2) return r2;
  if (!n2.length) return r2._root = sn(n2), r2;
  for (e = [{ source: n2, target: r2._root = new Array(4) }]; n2 = e.pop(); ) for (var o2 = 0; o2 < 4; ++o2) (t = n2.source[o2]) && (t.length ? e.push({ source: t, target: n2.target[o2] = new Array(4) }) : n2.target[o2] = sn(t));
  return r2;
}, cn.add = function(e) {
  const t = +this._x.call(null, e), r2 = +this._y.call(null, e);
  return tn(this.cover(t, r2), t, r2, e);
}, cn.addAll = function(e) {
  var t, r2, n2, o2, i2 = e.length, a2 = new Array(i2), u2 = new Array(i2), s2 = 1 / 0, c2 = 1 / 0, l2 = -1 / 0, f2 = -1 / 0;
  for (r2 = 0; r2 < i2; ++r2) isNaN(n2 = +this._x.call(null, t = e[r2])) || isNaN(o2 = +this._y.call(null, t)) || (a2[r2] = n2, u2[r2] = o2, n2 < s2 && (s2 = n2), n2 > l2 && (l2 = n2), o2 < c2 && (c2 = o2), o2 > f2 && (f2 = o2));
  if (s2 > l2 || c2 > f2) return this;
  for (this.cover(s2, c2).cover(l2, f2), r2 = 0; r2 < i2; ++r2) tn(this, a2[r2], u2[r2], e[r2]);
  return this;
}, cn.cover = function(e, t) {
  if (isNaN(e = +e) || isNaN(t = +t)) return this;
  var r2 = this._x0, n2 = this._y0, o2 = this._x1, i2 = this._y1;
  if (isNaN(r2)) o2 = (r2 = Math.floor(e)) + 1, i2 = (n2 = Math.floor(t)) + 1;
  else {
    for (var a2, u2, s2 = o2 - r2 || 1, c2 = this._root; r2 > e || e >= o2 || n2 > t || t >= i2; ) switch (u2 = (t < n2) << 1 | e < r2, (a2 = new Array(4))[u2] = c2, c2 = a2, s2 *= 2, u2) {
      case 0:
        o2 = r2 + s2, i2 = n2 + s2;
        break;
      case 1:
        r2 = o2 - s2, i2 = n2 + s2;
        break;
      case 2:
        o2 = r2 + s2, n2 = i2 - s2;
        break;
      case 3:
        r2 = o2 - s2, n2 = i2 - s2;
    }
    this._root && this._root.length && (this._root = c2);
  }
  return this._x0 = r2, this._y0 = n2, this._x1 = o2, this._y1 = i2, this;
}, cn.data = function() {
  var e = [];
  return this.visit(function(t) {
    if (!t.length) do {
      e.push(t.data);
    } while (t = t.next);
  }), e;
}, cn.extent = function(e) {
  return arguments.length ? this.cover(+e[0][0], +e[0][1]).cover(+e[1][0], +e[1][1]) : isNaN(this._x0) ? void 0 : [[this._x0, this._y0], [this._x1, this._y1]];
}, cn.find = function(e, t, r2) {
  var n2, o2, i2, a2, u2, s2, c2, l2 = this._x0, f2 = this._y0, h2 = this._x1, d2 = this._y1, p3 = [], v3 = this._root;
  for (v3 && p3.push(new rn(v3, l2, f2, h2, d2)), null == r2 ? r2 = 1 / 0 : (l2 = e - r2, f2 = t - r2, h2 = e + r2, d2 = t + r2, r2 *= r2); s2 = p3.pop(); ) if (!(!(v3 = s2.node) || (o2 = s2.x0) > h2 || (i2 = s2.y0) > d2 || (a2 = s2.x1) < l2 || (u2 = s2.y1) < f2)) if (v3.length) {
    var y3 = (o2 + a2) / 2, b2 = (i2 + u2) / 2;
    p3.push(new rn(v3[3], y3, b2, a2, u2), new rn(v3[2], o2, b2, y3, u2), new rn(v3[1], y3, i2, a2, b2), new rn(v3[0], o2, i2, y3, b2)), (c2 = (t >= b2) << 1 | e >= y3) && (s2 = p3[p3.length - 1], p3[p3.length - 1] = p3[p3.length - 1 - c2], p3[p3.length - 1 - c2] = s2);
  } else {
    var m2 = e - +this._x.call(null, v3.data), g2 = t - +this._y.call(null, v3.data), _2 = m2 * m2 + g2 * g2;
    if (_2 < r2) {
      var w2 = Math.sqrt(r2 = _2);
      l2 = e - w2, f2 = t - w2, h2 = e + w2, d2 = t + w2, n2 = v3.data;
    }
  }
  return n2;
}, cn.remove = function(e) {
  if (isNaN(i2 = +this._x.call(null, e)) || isNaN(a2 = +this._y.call(null, e))) return this;
  var t, r2, n2, o2, i2, a2, u2, s2, c2, l2, f2, h2, d2 = this._root, p3 = this._x0, v3 = this._y0, y3 = this._x1, b2 = this._y1;
  if (!d2) return this;
  if (d2.length) for (; ; ) {
    if ((c2 = i2 >= (u2 = (p3 + y3) / 2)) ? p3 = u2 : y3 = u2, (l2 = a2 >= (s2 = (v3 + b2) / 2)) ? v3 = s2 : b2 = s2, t = d2, !(d2 = d2[f2 = l2 << 1 | c2])) return this;
    if (!d2.length) break;
    (t[f2 + 1 & 3] || t[f2 + 2 & 3] || t[f2 + 3 & 3]) && (r2 = t, h2 = f2);
  }
  for (; d2.data !== e; ) if (n2 = d2, !(d2 = d2.next)) return this;
  return (o2 = d2.next) && delete d2.next, n2 ? (o2 ? n2.next = o2 : delete n2.next, this) : t ? (o2 ? t[f2] = o2 : delete t[f2], (d2 = t[0] || t[1] || t[2] || t[3]) && d2 === (t[3] || t[2] || t[1] || t[0]) && !d2.length && (r2 ? r2[h2] = d2 : this._root = d2), this) : (this._root = o2, this);
}, cn.removeAll = function(e) {
  for (var t = 0, r2 = e.length; t < r2; ++t) this.remove(e[t]);
  return this;
}, cn.root = function() {
  return this._root;
}, cn.size = function() {
  var e = 0;
  return this.visit(function(t) {
    if (!t.length) do {
      ++e;
    } while (t = t.next);
  }), e;
}, cn.visit = function(e) {
  var t, r2, n2, o2, i2, a2, u2 = [], s2 = this._root;
  for (s2 && u2.push(new rn(s2, this._x0, this._y0, this._x1, this._y1)); t = u2.pop(); ) if (!e(s2 = t.node, n2 = t.x0, o2 = t.y0, i2 = t.x1, a2 = t.y1) && s2.length) {
    var c2 = (n2 + i2) / 2, l2 = (o2 + a2) / 2;
    (r2 = s2[3]) && u2.push(new rn(r2, c2, l2, i2, a2)), (r2 = s2[2]) && u2.push(new rn(r2, n2, l2, c2, a2)), (r2 = s2[1]) && u2.push(new rn(r2, c2, o2, i2, l2)), (r2 = s2[0]) && u2.push(new rn(r2, n2, o2, c2, l2));
  }
  return this;
}, cn.visitAfter = function(e) {
  var t, r2 = [], n2 = [];
  for (this._root && r2.push(new rn(this._root, this._x0, this._y0, this._x1, this._y1)); t = r2.pop(); ) {
    var o2 = t.node;
    if (o2.length) {
      var i2, a2 = t.x0, u2 = t.y0, s2 = t.x1, c2 = t.y1, l2 = (a2 + s2) / 2, f2 = (u2 + c2) / 2;
      (i2 = o2[0]) && r2.push(new rn(i2, a2, u2, l2, f2)), (i2 = o2[1]) && r2.push(new rn(i2, l2, u2, s2, f2)), (i2 = o2[2]) && r2.push(new rn(i2, a2, f2, l2, c2)), (i2 = o2[3]) && r2.push(new rn(i2, l2, f2, s2, c2));
    }
    n2.push(t);
  }
  for (; t = n2.pop(); ) e(t.node, t.x0, t.y0, t.x1, t.y1);
  return this;
}, cn.x = function(e) {
  return arguments.length ? (this._x = e, this) : this._x;
}, cn.y = function(e) {
  return arguments.length ? (this._y = e, this) : this._y;
};
var bn = 256;
var mn = 4096;
var gn = 25;
var _n = "#FFDF81";
var wn = "#818790";
var On = "#EDEDED";
var Sn = "#CFD1D4";
var En = "#F5F6F6";
var Pn = "#8FE3E8";
var Tn = "#1A1B1D";
var xn = { position: "absolute", top: 0, bottom: 0, left: 0, right: 0 };
var Cn = 1 / 0.38;
var jn = function() {
  return window.devicePixelRatio || 1;
};
var An = ["NVL_basic-wrapper", "NVL_interactive-wrapper"];
function kn(e, t) {
  var r2 = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
  if (!r2) {
    if (Array.isArray(e) || (r2 = function(e2, t2) {
      if (e2) {
        if ("string" == typeof e2) return Rn(e2, t2);
        var r3 = {}.toString.call(e2).slice(8, -1);
        return "Object" === r3 && e2.constructor && (r3 = e2.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(e2) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? Rn(e2, t2) : void 0;
      }
    }(e)) || t && e && "number" == typeof e.length) {
      r2 && (e = r2);
      var n2 = 0, o2 = function() {
      };
      return { s: o2, n: function() {
        return n2 >= e.length ? { done: true } : { done: false, value: e[n2++] };
      }, e: function(e2) {
        throw e2;
      }, f: o2 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var i2, a2 = true, u2 = false;
  return { s: function() {
    r2 = r2.call(e);
  }, n: function() {
    var e2 = r2.next();
    return a2 = e2.done, e2;
  }, e: function(e2) {
    u2 = true, i2 = e2;
  }, f: function() {
    try {
      a2 || null == r2.return || r2.return();
    } finally {
      if (u2) throw i2;
    }
  } };
}
function Rn(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var r2 = 0, n2 = Array(t); r2 < t; r2++) n2[r2] = e[r2];
  return n2;
}
var In = function(e, t) {
  var r2 = [e, t].sort();
  return "".concat(r2[0], ".").concat(r2[1]);
};
var Mn = function(e) {
  var t = /* @__PURE__ */ new Set();
  return e.forEach(function(e2) {
    var r2 = e2.from, n2 = e2.to, o2 = In(r2, n2);
    t.has(o2) || t.add(o2);
  }), t;
};
var Nn = function(e) {
  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : On, r2 = /* @__PURE__ */ new Map();
  return e.forEach(function(e2) {
    var t2 = e2.id, n2 = e2.from, o2 = e2.to, i2 = e2.color, a2 = e2.width, u2 = e2.disabled, s2 = In(n2, o2), c2 = r2.get(s2);
    c2 ? c2.bundledRels.push({ id: t2, color: null != i2 ? i2 : void 0, disabled: null != u2 && u2, width: null != a2 ? a2 : 1 }) : r2.set(s2, { bundledRels: [{ id: t2, color: null != i2 ? i2 : void 0, disabled: null != u2 && u2, width: null != a2 ? a2 : 1 }], key: s2, from: n2, to: o2, color: null != i2 ? i2 : void 0, disabled: null != u2 && u2, width: 0 });
  }), r2.forEach(function(e2) {
    var r3 = (0, i.uniqBy)(e2.bundledRels, "disabled"), n2 = 1 === r3.length && true === r3[0].disabled, o2 = 1 === r3.length && true !== r3[0].disabled;
    if (n2) e2.color = t, e2.width = 1;
    else {
      var a2 = e2.bundledRels.filter(function(e3) {
        return true !== e3.disabled;
      }), u2 = (0, i.uniqBy)(a2, "color");
      o2 ? (e2.color = u2.length > 1 ? void 0 : e2.bundledRels[0].color, e2.bundledRels.forEach(function(t2) {
        e2.width += t2.width;
      })) : (e2.color = 1 === u2.length ? u2[0].color : void 0, e2.disabled = false, e2.bundledRels.forEach(function(t2) {
        e2.width += true !== t2.disabled ? t2.width : 0;
      }));
    }
    e2.width = Math.min(e2.width, 20);
  }), Array.from(r2.values());
};
var Dn = function() {
  return void 0 !== (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : []).find(function(e) {
    return "size" in e;
  });
};
function Ln(e) {
  return Ln = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, Ln(e);
}
var Un = function(e) {
  var t, r2;
  return "number" == typeof e.source || "number" == typeof e.target || "string" == typeof e.source || "string" == typeof e.target ? 45 * devicePixelRatio : (null !== (t = e.source.size) && void 0 !== t ? t : gn) + (null !== (r2 = e.target.size) && void 0 !== r2 ? r2 : gn) + 90 * devicePixelRatio;
};
function Fn(e) {
  return "object" === Ln(e);
}
var Bn = function(e) {
  var t;
  return (null !== (t = e.size) && void 0 !== t ? t : gn) + 25 * devicePixelRatio;
};
var zn = function() {
  return -400 * Math.pow(devicePixelRatio, 2);
};
var Vn = function() {
  return 2 * zn();
};
function Wn(e) {
  return Wn = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, Wn(e);
}
function qn(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var r2 = 0, n2 = Array(t); r2 < t; r2++) n2[r2] = e[r2];
  return n2;
}
function Gn(e, t) {
  var r2 = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e);
    t && (n2 = n2.filter(function(t2) {
      return Object.getOwnPropertyDescriptor(e, t2).enumerable;
    })), r2.push.apply(r2, n2);
  }
  return r2;
}
function Hn(e, t, r2) {
  return (t = Xn(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
function Yn(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, Xn(n2.key), n2);
  }
}
function Xn(e) {
  var t = function(e2) {
    if ("object" != Wn(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != Wn(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == Wn(t) ? t : t + "";
}
var Kn = "d3ForceLayout";
var Zn = function(e) {
  return e ? vr(e) : e;
};
var $n = function() {
  return e = function e2(t2) {
    var r2 = this;
    !function(e3, t3) {
      if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    }(this, e2);
    var n2 = t2.state;
    this.state = n2, this.d3Nodes = {}, this.d3RelList = {}, this.computing = false, this.center = { x: 0, y: 0 }, this.nodeRelCount = [];
    var o2 = this.state, i2 = o2.nodes, a2 = o2.rels;
    i2.addChannel(Kn), a2.addChannel(Kn), this.simulation = function(e3) {
      var t3, r3 = 1, n3 = 1e-3, o3 = 1 - Math.pow(n3, 1 / 300), i3 = 0, a3 = 0.6, u2 = /* @__PURE__ */ new Map(), s2 = Yr(f2), c2 = Ir("tick", "end"), l2 = /* @__PURE__ */ function() {
        let e4 = 1;
        return () => (e4 = (1664525 * e4 + 1013904223) % $r) / $r;
      }();
      function f2() {
        h2(), c2.call("tick", t3), r3 < n3 && (s2.stop(), c2.call("end", t3));
      }
      function h2(n4) {
        var s3, c3, l3 = e3.length;
        void 0 === n4 && (n4 = 1);
        for (var f3 = 0; f3 < n4; ++f3) for (r3 += (i3 - r3) * o3, u2.forEach(function(e4) {
          e4(r3);
        }), s3 = 0; s3 < l3; ++s3) null == (c3 = e3[s3]).fx ? c3.x += c3.vx *= a3 : (c3.x = c3.fx, c3.vx = 0), null == c3.fy ? c3.y += c3.vy *= a3 : (c3.y = c3.fy, c3.vy = 0);
        return t3;
      }
      function d2() {
        for (var t4, r4 = 0, n4 = e3.length; r4 < n4; ++r4) {
          if ((t4 = e3[r4]).index = r4, null != t4.fx && (t4.x = t4.fx), null != t4.fy && (t4.y = t4.fy), isNaN(t4.x) || isNaN(t4.y)) {
            var o4 = 10 * Math.sqrt(0.5 + r4), i4 = r4 * en;
            t4.x = o4 * Math.cos(i4), t4.y = o4 * Math.sin(i4);
          }
          (isNaN(t4.vx) || isNaN(t4.vy)) && (t4.vx = t4.vy = 0);
        }
      }
      function p3(t4) {
        return t4.initialize && t4.initialize(e3, l2), t4;
      }
      return null == e3 && (e3 = []), d2(), t3 = { tick: h2, restart: function() {
        return s2.restart(f2), t3;
      }, stop: function() {
        return s2.stop(), t3;
      }, nodes: function(r4) {
        return arguments.length ? (e3 = r4, d2(), u2.forEach(p3), t3) : e3;
      }, alpha: function(e4) {
        return arguments.length ? (r3 = +e4, t3) : r3;
      }, alphaMin: function(e4) {
        return arguments.length ? (n3 = +e4, t3) : n3;
      }, alphaDecay: function(e4) {
        return arguments.length ? (o3 = +e4, t3) : +o3;
      }, alphaTarget: function(e4) {
        return arguments.length ? (i3 = +e4, t3) : i3;
      }, velocityDecay: function(e4) {
        return arguments.length ? (a3 = 1 - e4, t3) : 1 - a3;
      }, randomSource: function(e4) {
        return arguments.length ? (l2 = e4, u2.forEach(p3), t3) : l2;
      }, force: function(e4, r4) {
        return arguments.length > 1 ? (null == r4 ? u2.delete(e4) : u2.set(e4, p3(r4)), t3) : u2.get(e4);
      }, find: function(t4, r4, n4) {
        var o4, i4, a4, u3, s3, c3 = 0, l3 = e3.length;
        for (null == n4 ? n4 = 1 / 0 : n4 *= n4, c3 = 0; c3 < l3; ++c3) (a4 = (o4 = t4 - (u3 = e3[c3]).x) * o4 + (i4 = r4 - u3.y) * i4) < n4 && (s3 = u3, n4 = a4);
        return s3;
      }, on: function(e4, r4) {
        return arguments.length > 1 ? (c2.on(e4, r4), t3) : c2.on(e4);
      } };
    }().velocityDecay(0.4).force("charge", hn().strength(zn)).force("centerX", function(e3) {
      var t3, r3, n3, o3 = ln(0.1);
      function i3(e4) {
        for (var o4, i4 = 0, a4 = t3.length; i4 < a4; ++i4) (o4 = t3[i4]).vx += (n3[i4] - o4.x) * r3[i4] * e4;
      }
      function a3() {
        if (t3) {
          var i4, a4 = t3.length;
          for (r3 = new Array(a4), n3 = new Array(a4), i4 = 0; i4 < a4; ++i4) r3[i4] = isNaN(n3[i4] = +e3(t3[i4], i4, t3)) ? 0 : +o3(t3[i4], i4, t3);
        }
      }
      return "function" != typeof e3 && (e3 = ln(null == e3 ? 0 : +e3)), i3.initialize = function(e4) {
        t3 = e4, a3();
      }, i3.strength = function(e4) {
        return arguments.length ? (o3 = "function" == typeof e4 ? e4 : ln(+e4), a3(), i3) : o3;
      }, i3.x = function(t4) {
        return arguments.length ? (e3 = "function" == typeof t4 ? t4 : ln(+t4), a3(), i3) : e3;
      }, i3;
    }(0).strength(0.03)).force("centerY", function(e3) {
      var t3, r3, n3, o3 = ln(0.1);
      function i3(e4) {
        for (var o4, i4 = 0, a4 = t3.length; i4 < a4; ++i4) (o4 = t3[i4]).vy += (n3[i4] - o4.y) * r3[i4] * e4;
      }
      function a3() {
        if (t3) {
          var i4, a4 = t3.length;
          for (r3 = new Array(a4), n3 = new Array(a4), i4 = 0; i4 < a4; ++i4) r3[i4] = isNaN(n3[i4] = +e3(t3[i4], i4, t3)) ? 0 : +o3(t3[i4], i4, t3);
        }
      }
      return "function" != typeof e3 && (e3 = ln(null == e3 ? 0 : +e3)), i3.initialize = function(e4) {
        t3 = e4, a3();
      }, i3.strength = function(e4) {
        return arguments.length ? (o3 = "function" == typeof e4 ? e4 : ln(+e4), a3(), i3) : o3;
      }, i3.y = function(t4) {
        return arguments.length ? (e3 = "function" == typeof t4 ? t4 : ln(+t4), a3(), i3) : e3;
      }, i3;
    }(0).strength(0.03)).alpha(1).alphaMin(0.05).on("end", function() {
      r2.simulationStopped = true, r2.shouldUpdate = false, r2.shouldReheatNodes = false, r2.shouldCountNodeRels = false;
    }).stop(), this.simulationStopped = true, this.shouldUpdate = true, this.shouldReheatNodes = false, this.shouldCountNodeRels = true, this.stateDisposers = [], this.stateDisposers.push(this.state.reaction(function() {
      return r2.state.graphUpdates;
    }, function() {
      var e3 = i2.channels[Kn];
      if (void 0 !== i2.version && e3) {
        var t3 = Object.values(e3.adds).length > 0, n3 = Object.values(e3.removes).length > 0, o3 = Object.values(e3.updates), u2 = Dn(o3);
        t3 || n3 || u2 ? (r2.shouldUpdate = true, r2.shouldReheatNodes = true, r2.shouldCountNodeRels = true) : r2.shouldReheatNodes = false;
      }
      var s2 = a2.channels[Kn];
      if (void 0 !== a2.version && s2) {
        var c2 = Object.values(s2.adds).length > 0, l2 = Object.values(s2.removes).length > 0;
        (c2 || l2) && (r2.shouldUpdate = true, r2.shouldReheatNodes = true, r2.shouldCountNodeRels = true);
      }
    }));
  }, t = [{ key: "setOptions", value: function(e2) {
  } }, { key: "updateNodes", value: function(e2) {
    var t2 = this;
    e2.forEach(function(e3) {
      void 0 === t2.d3Nodes[e3.id] && (t2.d3Nodes[e3.id] = { id: e3.id }), null != e3 && e3.pinned ? (t2.d3Nodes[e3.id].fx = e3.x, t2.d3Nodes[e3.id].fy = e3.y) : (t2.d3Nodes[e3.id].x = e3.x, t2.d3Nodes[e3.id].y = e3.y), t2.d3Nodes[e3.id].vy = 0, t2.d3Nodes[e3.id].vx = 0;
    }), this.shouldUpdate = true, this.simulation.tick().alpha(0.2);
  } }, { key: "update", value: function() {
    var e2, t2 = this, r2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
    if (this.shouldUpdate || r2) {
      var n2 = this.state, o2 = n2.nodes, i2 = n2.rels, a2 = o2.channels[Kn], u2 = i2.channels[Kn], s2 = Object.values(a2.adds).length > 0, c2 = Object.values(u2.adds).length > 0, l2 = Object.values(a2.removes).length > 0, f2 = Object.values(u2.removes).length > 0, h2 = Object.values(a2.updates).length > 0;
      if (s2 || c2 || l2 || f2 || h2) {
        var d2 = s2 && 0 === Object.keys(this.d3Nodes).length, p3 = Zn(a2.removes);
        Object.keys(p3).forEach(function(e3) {
          delete t2.d3Nodes[e3];
        });
        var v3 = Zn(a2.adds);
        if (Object.keys(v3).forEach(function(e3) {
          t2.d3Nodes[e3] = function(e4) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var r3 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? Gn(Object(r3), true).forEach(function(t4) {
                Hn(e4, t4, r3[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e4, Object.getOwnPropertyDescriptors(r3)) : Gn(Object(r3)).forEach(function(t4) {
                Object.defineProperty(e4, t4, Object.getOwnPropertyDescriptor(r3, t4));
              });
            }
            return e4;
          }({}, v3[e3]);
        }), h2 && Object.values(a2.updates).forEach(function(e3) {
          true === e3.pinned ? (t2.d3Nodes[e3.id].fx = t2.d3Nodes[e3.id].x, t2.d3Nodes[e3.id].fy = t2.d3Nodes[e3.id].y) : false === e3.pinned && (t2.d3Nodes[e3.id].fx = null, t2.d3Nodes[e3.id].fy = null), void 0 !== e3.size && (t2.d3Nodes[e3.id].size = e3.size);
        }), (c2 || f2) && (this.d3RelList = Nn(Zn(i2.items)).filter(function(e3) {
          return e3.from !== e3.to;
        }).map(function(e3, t3) {
          return { source: e3.from, target: e3.to, index: t3 };
        })), d2) {
          var y3 = Object.values(this.d3Nodes);
          !function(e3, t3, r3) {
            var n3 = e3.filter(function(e4) {
              return void 0 === e4.x && void 0 === e4.y;
            });
            n3.forEach(function(e4, o3) {
              e4.x = t3.x + r3 * Math.sin(2 * Math.PI * o3 / n3.length), e4.y = t3.y + r3 * Math.cos(2 * Math.PI * o3 / n3.length);
            });
          }(y3, this.center, (e2 = y3.length, 45 * e2 / (2 * Math.PI)));
        }
        this.layout(o2.items, i2.items, d2);
      }
      o2.clearChannel(Kn), i2.clearChannel(Kn), this.shouldUpdate = false, this.simulation.alpha() > this.simulation.alphaMin() && (this.shouldUpdate = true, this.simulationStopped && (this.simulation.restart(), this.simulationStopped = false));
    }
  } }, { key: "layout", value: function(e2, t2, r2) {
    var n2 = this;
    if (!(0, i.isEmpty)(this.d3Nodes)) {
      if (this.simulation.stop(), this.simulation.nodes(Object.values(this.d3Nodes)).force("collide", function(e3) {
        var t3, r3, n3, o3 = 1, i2 = 1;
        function a3() {
          for (var e4, a4, s3, c2, l2, f2, h2, d2 = t3.length, p3 = 0; p3 < i2; ++p3) for (a4 = an(t3, dn, pn).visitAfter(u3), e4 = 0; e4 < d2; ++e4) s3 = t3[e4], f2 = r3[s3.index], h2 = f2 * f2, c2 = s3.x + s3.vx, l2 = s3.y + s3.vy, a4.visit(v3);
          function v3(e5, t4, r4, i3, a5) {
            var u4 = e5.data, d3 = e5.r, p4 = f2 + d3;
            if (!u4) return t4 > c2 + p4 || i3 < c2 - p4 || r4 > l2 + p4 || a5 < l2 - p4;
            if (u4.index > s3.index) {
              var v5 = c2 - u4.x - u4.vx, y3 = l2 - u4.y - u4.vy, b2 = v5 * v5 + y3 * y3;
              b2 < p4 * p4 && (0 === v5 && (b2 += (v5 = fn3(n3)) * v5), 0 === y3 && (b2 += (y3 = fn3(n3)) * y3), b2 = (p4 - (b2 = Math.sqrt(b2))) / b2 * o3, s3.vx += (v5 *= b2) * (p4 = (d3 *= d3) / (h2 + d3)), s3.vy += (y3 *= b2) * p4, u4.vx -= v5 * (p4 = 1 - p4), u4.vy -= y3 * p4);
            }
          }
        }
        function u3(e4) {
          if (e4.data) return e4.r = r3[e4.data.index];
          for (var t4 = e4.r = 0; t4 < 4; ++t4) e4[t4] && e4[t4].r > e4.r && (e4.r = e4[t4].r);
        }
        function s2() {
          if (t3) {
            var n4, o4, i3 = t3.length;
            for (r3 = new Array(i3), n4 = 0; n4 < i3; ++n4) o4 = t3[n4], r3[o4.index] = +e3(o4, n4, t3);
          }
        }
        return "function" != typeof e3 && (e3 = ln(null == e3 ? 1 : +e3)), a3.initialize = function(e4, r4) {
          t3 = e4, n3 = r4, s2();
        }, a3.iterations = function(e4) {
          return arguments.length ? (i2 = +e4, a3) : i2;
        }, a3.strength = function(e4) {
          return arguments.length ? (o3 = +e4, a3) : o3;
        }, a3.radius = function(t4) {
          return arguments.length ? (e3 = "function" == typeof t4 ? t4 : ln(+t4), s2(), a3) : e3;
        }, a3;
      }().radius(Bn)), this.shouldCountNodeRels && (this.nodeRelCount = this.countNodeRels()), this.simulation.force("link", function(e3) {
        var t3, r3, n3, o3, i2, a3, u3 = vn, s2 = function(e4) {
          return 1 / Math.min(o3[e4.source.index], o3[e4.target.index]);
        }, c2 = ln(30), l2 = 1;
        function f2(n4) {
          for (var o4 = 0, u4 = e3.length; o4 < l2; ++o4) for (var s3, c3, f3, h3, d3, p4, v3, y3 = 0; y3 < u4; ++y3) c3 = (s3 = e3[y3]).source, h3 = (f3 = s3.target).x + f3.vx - c3.x - c3.vx || fn3(a3), d3 = f3.y + f3.vy - c3.y - c3.vy || fn3(a3), h3 *= p4 = ((p4 = Math.sqrt(h3 * h3 + d3 * d3)) - r3[y3]) / p4 * n4 * t3[y3], d3 *= p4, f3.vx -= h3 * (v3 = i2[y3]), f3.vy -= d3 * v3, c3.vx += h3 * (v3 = 1 - v3), c3.vy += d3 * v3;
        }
        function h2() {
          if (n3) {
            var a4, s3, c3 = n3.length, l3 = e3.length, f3 = new Map(n3.map((e4, t4) => [u3(e4, t4, n3), e4]));
            for (a4 = 0, o3 = new Array(c3); a4 < l3; ++a4) (s3 = e3[a4]).index = a4, "object" != typeof s3.source && (s3.source = yn(f3, s3.source)), "object" != typeof s3.target && (s3.target = yn(f3, s3.target)), o3[s3.source.index] = (o3[s3.source.index] || 0) + 1, o3[s3.target.index] = (o3[s3.target.index] || 0) + 1;
            for (a4 = 0, i2 = new Array(l3); a4 < l3; ++a4) s3 = e3[a4], i2[a4] = o3[s3.source.index] / (o3[s3.source.index] + o3[s3.target.index]);
            t3 = new Array(l3), d2(), r3 = new Array(l3), p3();
          }
        }
        function d2() {
          if (n3) for (var r4 = 0, o4 = e3.length; r4 < o4; ++r4) t3[r4] = +s2(e3[r4], r4, e3);
        }
        function p3() {
          if (n3) for (var t4 = 0, o4 = e3.length; t4 < o4; ++t4) r3[t4] = +c2(e3[t4], t4, e3);
        }
        return null == e3 && (e3 = []), f2.initialize = function(e4, t4) {
          n3 = e4, a3 = t4, h2();
        }, f2.links = function(t4) {
          return arguments.length ? (e3 = t4, h2(), f2) : e3;
        }, f2.id = function(e4) {
          return arguments.length ? (u3 = e4, f2) : u3;
        }, f2.iterations = function(e4) {
          return arguments.length ? (l2 = +e4, f2) : l2;
        }, f2.strength = function(e4) {
          return arguments.length ? (s2 = "function" == typeof e4 ? e4 : ln(+e4), d2(), f2) : s2;
        }, f2.distance = function(e4) {
          return arguments.length ? (c2 = "function" == typeof e4 ? e4 : ln(+e4), p3(), f2) : c2;
        }, f2;
      }(this.d3RelList).id(function(e3) {
        return e3.id;
      }).distance(Un).strength(function(e3) {
        return function(e4, t3) {
          if (!Fn(e4.source) || !Fn(e4.target)) return 1;
          var r3 = 1.2 / (Math.min(t3[e4.source.index], t3[e4.target.index]) + (Math.max(t3[e4.source.index], t3[e4.target.index]) - 1) / 100);
          return Math.max(Math.min(r3, 1), 0.06);
        }(e3, n2.nodeRelCount);
      })), r2) {
        this.computing = true;
        var o2 = 0;
        this.simulation.force("charge", hn().strength(Vn));
        for (var a2 = performance.now(); performance.now() - a2 < 300 && o2 < 200; ) this.simulation.alpha(1), this.simulation.tick(1), o2 += 1;
        this.simulation.force("charge", hn().strength(zn));
        for (var u2 = performance.now(); performance.now() - u2 < 100 && this.simulation.alpha() >= this.simulation.alphaMin(); ) this.simulation.tick(1);
        return requestAnimationFrame(function() {
          n2.computing = false;
        }), void this.simulation.restart();
      }
      this.shouldReheatNodes ? this.simulation.alpha(1).restart() : this.simulation.restart();
    }
  } }, { key: "getNodePositions", value: function(e2) {
    var t2, r2 = [], n2 = function(e3, t3) {
      var r3 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
      if (!r3) {
        if (Array.isArray(e3) || (r3 = function(e4, t4) {
          if (e4) {
            if ("string" == typeof e4) return qn(e4, t4);
            var r4 = {}.toString.call(e4).slice(8, -1);
            return "Object" === r4 && e4.constructor && (r4 = e4.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(e4) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? qn(e4, t4) : void 0;
          }
        }(e3)) || t3 && e3 && "number" == typeof e3.length) {
          r3 && (e3 = r3);
          var n3 = 0, o3 = function() {
          };
          return { s: o3, n: function() {
            return n3 >= e3.length ? { done: true } : { done: false, value: e3[n3++] };
          }, e: function(e4) {
            throw e4;
          }, f: o3 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var i3, a3 = true, u2 = false;
      return { s: function() {
        r3 = r3.call(e3);
      }, n: function() {
        var e4 = r3.next();
        return a3 = e4.done, e4;
      }, e: function(e4) {
        u2 = true, i3 = e4;
      }, f: function() {
        try {
          a3 || null == r3.return || r3.return();
        } finally {
          if (u2) throw i3;
        }
      } };
    }(e2);
    try {
      for (n2.s(); !(t2 = n2.n()).done; ) {
        var o2 = t2.value, i2 = this.d3Nodes[o2.id];
        if (void 0 !== i2) {
          var a2 = { id: i2.id, x: i2.x, y: i2.y };
          r2.push(a2);
        }
      }
    } catch (e3) {
      n2.e(e3);
    } finally {
      n2.f();
    }
    return r2;
  } }, { key: "getShouldUpdate", value: function() {
    return this.shouldUpdate;
  } }, { key: "getComputing", value: function() {
    return this.computing;
  } }, { key: "terminateUpdate", value: function() {
    this.simulation.alpha(this.simulation.alphaMin()).stop(), this.simulationStopped = true;
  } }, { key: "destroy", value: function() {
    this.stateDisposers.forEach(function(e2) {
      e2();
    }), this.state.nodes.removeChannel(Kn), this.state.rels.removeChannel(Kn), this.simulation.stop();
  } }, { key: "setAlpha", value: function(e2) {
    this.simulation.alpha(e2), this.simulation.restart(), this.simulation.shouldUpdate = true;
  } }, { key: "countNodeRels", value: function() {
    for (var e2 = new Map(Object.entries(this.d3Nodes)), t2 = Object.values(this.d3RelList), r2 = new Array(e2.length), n2 = 0; n2 < t2.length; ++n2) {
      var o2 = t2[n2];
      o2.index = n2, "object" !== Wn(o2.source) && (o2.source = e2.get(o2.source)), "object" !== Wn(o2.target) && (o2.target = e2.get(o2.target)), r2[o2.source.index] = (r2[o2.source.index] || 0) + 1, r2[o2.target.index] = (r2[o2.target.index] || 0) + 1;
    }
    return r2;
  } }], t && Yn(e.prototype, t), Object.defineProperty(e, "prototype", { writable: false }), e;
  var e, t;
}();
var Qn = o(5880);
var Jn = o.n(Qn);
var eo = Jn().getLogger("NVL");
var to = lib_exports;
var ro = { CoseBilkentLayout: { standard: "createCoseBilkentLayoutWorker", fallback: "coseBilkentLayoutFallbackWorker" }, HierarchicalLayout: { standard: "createHierarchicalLayoutWorker", fallback: "hierarchicalLayoutFallbackWorker" } };
var no = function(e) {
  var t, r2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n2 = ro[e], o2 = n2.standard, i2 = n2.fallback;
  if (r2) t = to[i2];
  else try {
    t = to[o2]();
  } catch (r3) {
    console.warn("Failed to initialise ".concat(e, ' worker: "').concat(JSON.stringify(r3), '". Falling back to syncronous code.')), t = to[i2];
  }
  if (void 0 === t) throw new Error("".concat(e, " code could not be initialized."));
  return t.port.start(), t;
};
function oo(e) {
  return oo = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, oo(e);
}
function io(e, t) {
  var r2 = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e);
    t && (n2 = n2.filter(function(t2) {
      return Object.getOwnPropertyDescriptor(e, t2).enumerable;
    })), r2.push.apply(r2, n2);
  }
  return r2;
}
function ao(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r2 = null != arguments[t] ? arguments[t] : {};
    t % 2 ? io(Object(r2), true).forEach(function(t2) {
      lo(e, t2, r2[t2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r2)) : io(Object(r2)).forEach(function(t2) {
      Object.defineProperty(e, t2, Object.getOwnPropertyDescriptor(r2, t2));
    });
  }
  return e;
}
function uo(e, t) {
  var r2 = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
  if (!r2) {
    if (Array.isArray(e) || (r2 = function(e2, t2) {
      if (e2) {
        if ("string" == typeof e2) return so(e2, t2);
        var r3 = {}.toString.call(e2).slice(8, -1);
        return "Object" === r3 && e2.constructor && (r3 = e2.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(e2) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? so(e2, t2) : void 0;
      }
    }(e)) || t && e && "number" == typeof e.length) {
      r2 && (e = r2);
      var n2 = 0, o2 = function() {
      };
      return { s: o2, n: function() {
        return n2 >= e.length ? { done: true } : { done: false, value: e[n2++] };
      }, e: function(e2) {
        throw e2;
      }, f: o2 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var i2, a2 = true, u2 = false;
  return { s: function() {
    r2 = r2.call(e);
  }, n: function() {
    var e2 = r2.next();
    return a2 = e2.done, e2;
  }, e: function(e2) {
    u2 = true, i2 = e2;
  }, f: function() {
    try {
      a2 || null == r2.return || r2.return();
    } finally {
      if (u2) throw i2;
    }
  } };
}
function so(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var r2 = 0, n2 = Array(t); r2 < t; r2++) n2[r2] = e[r2];
  return n2;
}
function co(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, fo(n2.key), n2);
  }
}
function lo(e, t, r2) {
  return (t = fo(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
function fo(e) {
  var t = function(e2) {
    if ("object" != oo(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != oo(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == oo(t) ? t : t + "";
}
var ho = function(e, t, r2) {
  return e + (t - e) * function(e2) {
    return e2 * e2 * (3 - 2 * e2);
  }(r2);
};
var po = function() {
  return e = function e2(t2) {
    !function(e3, t3) {
      if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    }(this, e2), lo(this, "positions", void 0), lo(this, "oldPositions", void 0), lo(this, "startTime", void 0), lo(this, "t", void 0), lo(this, "currentT", void 0), lo(this, "state", void 0), lo(this, "shouldUpdateAnimator", void 0), lo(this, "parents", void 0), lo(this, "animationCompleteCallback", void 0), lo(this, "shouldUpdate", void 0);
    var r2 = t2.state;
    this.positions = {}, this.oldPositions = {}, this.startTime = 0, this.t = 1, this.currentT = 1, this.state = r2, this.shouldUpdateAnimator = false, this.parents = {}, this.animationCompleteCallback = t2.animationCompleteCallback;
  }, t = [{ key: "getPositionMapFromState", value: function() {
    var e2, t2 = this.state.nodes, r2 = t2.idToPosition, n2 = {}, o2 = uo(t2.items);
    try {
      for (o2.s(); !(e2 = o2.n()).done; ) {
        var i2 = e2.value, a2 = r2[i2.id];
        void 0 !== a2 && (n2[i2.id] = { id: i2.id, x: a2.x, y: a2.y });
      }
    } catch (e3) {
      o2.e(e3);
    } finally {
      o2.f();
    }
    return n2;
  } }, { key: "updatePositionsFromState", value: function() {
    this.positions = ao({}, this.getPositionMapFromState());
  } }, { key: "updateOldPositionFromState", value: function() {
    this.oldPositions = ao({}, this.getPositionMapFromState());
  } }, { key: "startAnimation", value: function() {
    this.updateOldPositionFromState(), this.startTime = Date.now(), this.t = 0, this.currentT = 0, this.shouldUpdateAnimator = true;
  } }, { key: "update", value: function() {
    var e2 = this.shouldUpdateAnimator, t2 = (Date.now() - this.startTime) / 400;
    this.t = Math.min(t2, 1), this.currentT < 1 ? this.shouldUpdateAnimator = true : (this.shouldUpdateAnimator = false, e2 && !this.shouldUpdateAnimator && void 0 !== this.animationCompleteCallback && this.animationCompleteCallback(), this.shouldUpdateAnimator || this.updatePositionsFromState());
  } }, { key: "updateNodes", value: function(e2) {
    var t2, r2 = uo(e2);
    try {
      for (r2.s(); !(t2 = r2.n()).done; ) {
        var n2 = t2.value;
        void 0 !== n2.x && void 0 !== n2.y && (this.positions[n2.id] = { id: n2.id, x: n2.x, y: n2.y }), this.shouldUpdate = true;
      }
    } catch (e3) {
      r2.e(e3);
    } finally {
      r2.f();
    }
  } }, { key: "getNodePositions", value: function(e2) {
    var t2, r2 = this.parents, n2 = this.state.nodes.idToPosition, o2 = function(e3, t3) {
      for (var r3 = { x: 0, y: 0 }, n3 = e3.length, o3 = 0, i3 = 0; i3 < n3; i3++) {
        var a3 = t3[e3[i3].id];
        void 0 === a3 || isNaN(a3.x) || isNaN(a3.y) || 0 === a3.x || 0 === a3.y || (r3.x += a3.x, r3.y += a3.y, o3 += 1);
      }
      return o3 > 0 ? [r3.x / o3, r3.y / o3] : [0, 0];
    }(e2, n2), i2 = { x: o2[0], y: o2[1] }, a2 = [], u2 = uo(e2);
    try {
      for (u2.s(); !(t2 = u2.n()).done; ) {
        var s2 = t2.value, c2 = this.positions[s2.id], l2 = n2[s2.id], f2 = { id: s2.id };
        if (void 0 !== c2) {
          for (var h2, d2, p3, v3 = s2.id, y3 = null !== (h2 = this.oldPositions[s2.id]) && void 0 !== h2 ? h2 : ao({}, i2); void 0 === y3 && void 0 !== r2[v3]; ) v3 = r2[v3], y3 = this.oldPositions[v3];
          y3.x = null !== (d2 = y3.x) && void 0 !== d2 ? d2 : i2.x, y3.y = null !== (p3 = y3.y) && void 0 !== p3 ? p3 : i2.y, f2.x = ho(y3.x, c2.x, this.t), f2.y = ho(y3.y, c2.y, this.t);
        } else void 0 !== l2 && (f2.x = l2.x || i2.x, f2.y = l2.y || i2.y);
        a2.push(f2);
      }
    } catch (e3) {
      u2.e(e3);
    } finally {
      u2.f();
    }
    return this.currentT = this.t, a2;
  } }], t && co(e.prototype, t), Object.defineProperty(e, "prototype", { writable: false }), e;
  var e, t;
}();
function vo(e) {
  return vo = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, vo(e);
}
function yo(e, t) {
  var r2 = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e);
    t && (n2 = n2.filter(function(t2) {
      return Object.getOwnPropertyDescriptor(e, t2).enumerable;
    })), r2.push.apply(r2, n2);
  }
  return r2;
}
function bo(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r2 = null != arguments[t] ? arguments[t] : {};
    t % 2 ? yo(Object(r2), true).forEach(function(t2) {
      xo(e, t2, r2[t2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r2)) : yo(Object(r2)).forEach(function(t2) {
      Object.defineProperty(e, t2, Object.getOwnPropertyDescriptor(r2, t2));
    });
  }
  return e;
}
function mo(e, t) {
  return function(e2) {
    if (Array.isArray(e2)) return e2;
  }(e) || function(e2, t2) {
    var r2 = null == e2 ? null : "undefined" != typeof Symbol && e2[Symbol.iterator] || e2["@@iterator"];
    if (null != r2) {
      var n2, o2, i2, a2, u2 = [], s2 = true, c2 = false;
      try {
        if (i2 = (r2 = r2.call(e2)).next, 0 === t2) {
          if (Object(r2) !== r2) return;
          s2 = false;
        } else for (; !(s2 = (n2 = i2.call(r2)).done) && (u2.push(n2.value), u2.length !== t2); s2 = true) ;
      } catch (e3) {
        c2 = true, o2 = e3;
      } finally {
        try {
          if (!s2 && null != r2.return && (a2 = r2.return(), Object(a2) !== a2)) return;
        } finally {
          if (c2) throw o2;
        }
      }
      return u2;
    }
  }(e, t) || _o(e, t) || function() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }();
}
function go(e) {
  return function(e2) {
    if (Array.isArray(e2)) return wo(e2);
  }(e) || function(e2) {
    if ("undefined" != typeof Symbol && null != e2[Symbol.iterator] || null != e2["@@iterator"]) return Array.from(e2);
  }(e) || _o(e) || function() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }();
}
function _o(e, t) {
  if (e) {
    if ("string" == typeof e) return wo(e, t);
    var r2 = {}.toString.call(e).slice(8, -1);
    return "Object" === r2 && e.constructor && (r2 = e.constructor.name), "Map" === r2 || "Set" === r2 ? Array.from(e) : "Arguments" === r2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r2) ? wo(e, t) : void 0;
  }
}
function wo(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var r2 = 0, n2 = Array(t); r2 < t; r2++) n2[r2] = e[r2];
  return n2;
}
function Oo(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, Co(n2.key), n2);
  }
}
function So() {
  try {
    var e = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (e2) {
  }
  return (So = function() {
    return !!e;
  })();
}
function Eo() {
  return Eo = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function(e, t, r2) {
    var n2 = function(e2, t2) {
      for (; !{}.hasOwnProperty.call(e2, t2) && null !== (e2 = Po(e2)); ) ;
      return e2;
    }(e, t);
    if (n2) {
      var o2 = Object.getOwnPropertyDescriptor(n2, t);
      return o2.get ? o2.get.call(arguments.length < 3 ? e : r2) : o2.value;
    }
  }, Eo.apply(null, arguments);
}
function Po(e) {
  return Po = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e2) {
    return e2.__proto__ || Object.getPrototypeOf(e2);
  }, Po(e);
}
function To(e, t) {
  return To = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e2, t2) {
    return e2.__proto__ = t2, e2;
  }, To(e, t);
}
function xo(e, t, r2) {
  return (t = Co(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
function Co(e) {
  var t = function(e2) {
    if ("object" != vo(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != vo(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == vo(t) ? t : t + "";
}
var jo = function(e) {
  return void 0 !== e ? vr(e) : e;
};
var Ao = function() {
  function e(t2) {
    var r3;
    return function(e2, t3) {
      if (!(e2 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    }(this, e), xo(r3 = function(e2, t3, r4) {
      return t3 = Po(t3), function(e3, t4) {
        if (t4 && ("object" == vo(t4) || "function" == typeof t4)) return t4;
        if (void 0 !== t4) throw new TypeError("Derived constructors may only return object or undefined");
        return function(e4) {
          if (void 0 === e4) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return e4;
        }(e3);
      }(e2, So() ? Reflect.construct(t3, r4 || [], Po(e2).constructor) : t3.apply(e2, r4));
    }(this, e, [t2]), "stateDisposers", void 0), xo(r3, "cytoCompleteCallback", void 0), xo(r3, "computing", void 0), xo(r3, "pendingLayoutData", void 0), xo(r3, "worker", void 0), xo(r3, "workersDisabled", void 0), r3.stateDisposers = [], r3.stateDisposers.push(r3.state.reaction(function() {
      return r3.state.graphUpdates;
    }, function() {
      void 0 !== r3.state.nodes.version && (r3.shouldUpdate = true), void 0 !== r3.state.rels.version && (r3.shouldUpdate = true);
    })), r3.cytoCompleteCallback = t2.cytoCompleteCallback, r3.shouldUpdate = true, r3.computing = false, r3.workersDisabled = t2.state.disableWebWorkers, r3.setOptions(), r3.worker = no("CoseBilkentLayout", r3.workersDisabled), r3.pendingLayoutData = null, r3;
  }
  return function(e2, t2) {
    if ("function" != typeof t2 && null !== t2) throw new TypeError("Super expression must either be null or a function");
    e2.prototype = Object.create(t2 && t2.prototype, { constructor: { value: e2, writable: true, configurable: true } }), Object.defineProperty(e2, "prototype", { writable: false }), t2 && To(e2, t2);
  }(e, po), t = e, r2 = [{ key: "setOptions", value: function() {
    this.shouldUpdate = true;
  } }, { key: "update", value: function() {
    var t2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], r3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [];
    if (this.shouldUpdate || t2) {
      var o2 = jo(r3), i2 = jo(n2);
      (o2.length > 0 || i2.length > 0) && (this.updatePositionsFromState(), this.layout(o2, i2));
    }
    !function(e2, t3, r4) {
      var n3 = Eo(Po(e2.prototype), "update", r4);
      return "function" == typeof n3 ? function(e3) {
        return n3.apply(r4, e3);
      } : n3;
    }(e, 0, this)([]), this.shouldUpdate = false;
  } }, { key: "getShouldUpdate", value: function() {
    return this.shouldUpdate || this.shouldUpdateAnimator;
  } }, { key: "getComputing", value: function() {
    return this.computing;
  } }, { key: "layout", value: function(e2, t2) {
    var r3 = this;
    if (this.worker) {
      if (e2.length) {
        var n2 = e2.map(function(e3) {
          return { group: "nodes", data: { id: e3.id } };
        }), o2 = t2.map(function(e3) {
          return { group: "edges", data: { id: "rel".concat(e3.id), source: e3.from, target: e3.to } };
        }), i2 = { elements: [].concat(go(n2), go(o2)), spacingFactor: e2.reduce(function(e3, t3) {
          var r4;
          return e3 + (null !== (r4 = t3.size) && void 0 !== r4 ? r4 : gn);
        }, 0) / e2.length * 4.5 / 50 * jn() };
        this.computing ? this.pendingLayoutData = i2 : (this.computing = true, this.worker.port.onmessage = function(e3) {
          var t3 = e3.data.positions;
          if (r3.computing) {
            for (var n3 = 0, o3 = Object.entries(t3); n3 < o3.length; n3++) {
              var i3 = mo(o3[n3], 2), a2 = i3[0], u2 = i3[1];
              r3.positions[a2] = bo({ id: a2 }, u2);
            }
            r3.cytoCompleteCallback(), r3.startAnimation();
          }
          r3.computing = false, r3.shouldUpdate = true;
        }, setTimeout(function() {
          r3.computing && r3.worker.port.postMessage(i2);
        }, 0));
      }
    } else eo.info("Cose-Bilkent layout code not yet initialised.");
  } }, { key: "terminateUpdate", value: function() {
    this.computing = false;
  } }, { key: "destroy", value: function() {
    var e2;
    this.stateDisposers.forEach(function(e3) {
      e3();
    }), null === (e2 = this.worker) || void 0 === e2 || e2.port.close();
  } }], r2 && Oo(t.prototype, r2), Object.defineProperty(t, "prototype", { writable: false }), t;
  var t, r2;
}();
var ko = "undefined" != typeof Float32Array ? Float32Array : Array;
function Ro() {
  var e = new ko(16);
  return ko != Float32Array && (e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0), e[0] = 1, e[5] = 1, e[10] = 1, e[15] = 1, e;
}
Math.random, Math.PI, Math.hypot || (Math.hypot = function() {
  for (var e = 0, t = arguments.length; t--; ) e += arguments[t] * arguments[t];
  return Math.sqrt(e);
});
var Io = function(e, t, r2, n2, o2, i2, a2) {
  var u2 = 1 / (t - r2), s2 = 1 / (n2 - o2), c2 = 1 / (i2 - a2);
  return e[0] = -2 * u2, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = -2 * s2, e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[10] = 2 * c2, e[11] = 0, e[12] = (t + r2) * u2, e[13] = (o2 + n2) * s2, e[14] = (a2 + i2) * c2, e[15] = 1, e;
};
var Mo = o(9792);
var No = o.n(Mo);
function Do(e) {
  return Do = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, Do(e);
}
function Lo(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, Fo(n2.key), n2);
  }
}
function Uo(e, t, r2) {
  return (t = Fo(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
function Fo(e) {
  var t = function(e2) {
    if ("object" != Do(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != Do(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == Do(t) ? t : t + "";
}
var Bo = function() {
  return e = function e2(t2, r2, n2) {
    var o2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
    !function(e3, t3) {
      if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    }(this, e2), Uo(this, "shaderProgram", void 0), Uo(this, "gl", void 0), Uo(this, "curTexture", void 0), Uo(this, "attributeInfo", void 0), Uo(this, "uniformInfo", void 0);
    var a2 = t2.createShader(t2.FRAGMENT_SHADER);
    if (!t2.isShader(a2)) throw new Error("Could not create shader object");
    var u2 = No()(n2, o2);
    t2.shaderSource(a2, u2), t2.compileShader(a2), (0, i.isNil)(t2.getShaderParameter(a2, t2.COMPILE_STATUS)) && eo.info(t2.getShaderInfoLog(a2));
    var s2 = t2.createShader(t2.VERTEX_SHADER);
    if (!t2.isShader(s2)) throw new Error("Could not create shader object");
    var c2 = No()(r2, o2);
    if (t2.shaderSource(s2, c2), t2.compileShader(s2), (0, i.isNil)(t2.getShaderParameter(s2, t2.COMPILE_STATUS)) && eo.info(t2.getShaderInfoLog(s2)), this.shaderProgram = t2.createProgram(), t2.attachShader(this.shaderProgram, a2), t2.attachShader(this.shaderProgram, s2), t2.linkProgram(this.shaderProgram), (0, i.isNil)(t2.getProgramParameter(this.shaderProgram, t2.LINK_STATUS))) throw new Error("Could not initialise shader");
    this.gl = t2, this.curTexture = 0, this.scanUniforms(), this.scanAttributes();
  }, t = [{ key: "setUniform", value: function(e2, t2) {
    var r2 = this.gl, n2 = this.uniformInfo[e2];
    if (void 0 === n2) throw new Error("Shader.setUniform - Uniform ".concat(e2, " not found in shader"));
    switch (n2.type) {
      case r2.INT:
        r2.uniform1i(n2.location, t2);
        break;
      case r2.INT_VEC2:
        r2.uniform2iv(n2.location, t2);
        break;
      case r2.INT_VEC3:
        r2.uniform3iv(n2.location, t2);
        break;
      case r2.INT_VEC4:
        r2.uniform4iv(n2.location, t2);
        break;
      case r2.SAMPLER_2D:
        r2.activeTexture(r2.TEXTURE0 + n2.texture), r2.bindTexture(r2.TEXTURE_2D, t2), r2.uniform1i(n2.location, n2.texture);
        break;
      case r2.SAMPLER_CUBE:
      case r2.FLOAT:
        r2.uniform1f(n2.location, t2);
        break;
      case r2.FLOAT_VEC2:
        r2.uniform2fv(n2.location, t2);
        break;
      case r2.FLOAT_VEC3:
        r2.uniform3fv(n2.location, t2);
        break;
      case r2.FLOAT_VEC4:
        r2.uniform4fv(n2.location, t2);
        break;
      case r2.FLOAT_MAT2:
        r2.uniformMatrix2fv(n2.location, false, t2);
        break;
      case r2.FLOAT_MAT3:
        r2.uniformMatrix3fv(n2.location, false, t2);
        break;
      case r2.FLOAT_MAT4:
        r2.uniformMatrix4fv(n2.location, false, t2);
    }
  } }, { key: "setAttributePointer", value: function(e2, t2, r2, n2) {
    var o2 = this.gl, i2 = this.attributeInfo[e2], a2 = r2 * Float32Array.BYTES_PER_ELEMENT, u2 = n2 * Float32Array.BYTES_PER_ELEMENT;
    o2.enableVertexAttribArray(i2.position), o2.vertexAttribPointer(i2.position, t2, o2.FLOAT, false, u2, a2);
  } }, { key: "setAttributePointerFloat", value: function(e2, t2, r2, n2) {
    var o2 = this.gl, i2 = this.attributeInfo[e2];
    o2.enableVertexAttribArray(i2.position), o2.vertexAttribPointer(i2.position, t2, o2.FLOAT, false, n2, r2);
  } }, { key: "setAttributePointerUShort", value: function(e2, t2, r2, n2) {
    var o2 = this.gl, i2 = this.attributeInfo[e2];
    o2.enableVertexAttribArray(i2.position), o2.vertexAttribPointer(i2.position, t2, o2.UNSIGNED_SHORT, false, n2, r2);
  } }, { key: "setAttributePointerByteNorm", value: function(e2, t2, r2, n2) {
    var o2 = this.gl, i2 = this.attributeInfo[e2];
    o2.enableVertexAttribArray(i2.position), o2.vertexAttribPointer(i2.position, t2, o2.UNSIGNED_BYTE, true, n2, r2);
  } }, { key: "setAttributePointerByte", value: function(e2, t2, r2, n2) {
    var o2 = this.gl, i2 = this.attributeInfo[e2];
    o2.enableVertexAttribArray(i2.position), o2.vertexAttribPointer(i2.position, t2, o2.UNSIGNED_BYTE, false, n2, r2);
  } }, { key: "use", value: function() {
    this.gl.useProgram(this.shaderProgram);
  } }, { key: "remove", value: function() {
    this.gl.deleteProgram(this.shaderProgram);
  } }, { key: "scanAttributes", value: function() {
    var e2 = this.gl;
    this.attributeInfo = {};
    for (var t2, r2, n2 = e2.getProgramParameter(this.shaderProgram, e2.ACTIVE_ATTRIBUTES), o2 = 0; o2 < n2; o2++) t2 = e2.getActiveAttrib(this.shaderProgram, o2), r2 = e2.getAttribLocation(this.shaderProgram, t2.name), this.attributeInfo[t2.name] = { type: t2.type, position: r2 };
  } }, { key: "scanUniforms", value: function() {
    var e2 = this.gl;
    this.uniformInfo = {};
    for (var t2, r2 = e2.getProgramParameter(this.shaderProgram, e2.ACTIVE_UNIFORMS), n2 = 0; n2 < r2; n2++) {
      t2 = e2.getActiveUniform(this.shaderProgram, n2);
      var o2 = e2.getUniformLocation(this.shaderProgram, t2.name), i2 = { type: t2.type, location: o2 };
      t2.type === e2.SAMPLER_2D && (i2.texture = this.curTexture, this.curTexture += 1), this.uniformInfo[t2.name] = i2;
    }
  } }], t && Lo(e.prototype, t), Object.defineProperty(e, "prototype", { writable: false }), e;
  var e, t;
}();
function zo(e) {
  return zo = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, zo(e);
}
function Vo(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, Wo(n2.key), n2);
  }
}
function Wo(e) {
  var t = function(e2) {
    if ("object" != zo(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != zo(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == zo(t) ? t : t + "";
}
function qo(e) {
  var t = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
  return qo = function(e2) {
    if (null === e2 || !function(e3) {
      try {
        return -1 !== Function.toString.call(e3).indexOf("[native code]");
      } catch (t2) {
        return "function" == typeof e3;
      }
    }(e2)) return e2;
    if ("function" != typeof e2) throw new TypeError("Super expression must either be null or a function");
    if (void 0 !== t) {
      if (t.has(e2)) return t.get(e2);
      t.set(e2, r2);
    }
    function r2() {
      return function(e3, t2, r3) {
        if (Go()) return Reflect.construct.apply(null, arguments);
        var n2 = [null];
        n2.push.apply(n2, t2);
        var o2 = new (e3.bind.apply(e3, n2))();
        return r3 && Ho(o2, r3.prototype), o2;
      }(e2, arguments, Yo(this).constructor);
    }
    return r2.prototype = Object.create(e2.prototype, { constructor: { value: r2, enumerable: false, writable: true, configurable: true } }), Ho(r2, e2);
  }, qo(e);
}
function Go() {
  try {
    var e = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (e2) {
  }
  return (Go = function() {
    return !!e;
  })();
}
function Ho(e, t) {
  return Ho = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e2, t2) {
    return e2.__proto__ = t2, e2;
  }, Ho(e, t);
}
function Yo(e) {
  return Yo = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e2) {
    return e2.__proto__ || Object.getPrototypeOf(e2);
  }, Yo(e);
}
var Xo = function() {
  function e() {
    return function(e2, t2) {
      if (!(e2 instanceof t2)) throw new TypeError("Cannot call a class as a function");
    }(this, e), function(e2, t2, r3) {
      return t2 = Yo(t2), function(e3, t3) {
        if (t3 && ("object" == zo(t3) || "function" == typeof t3)) return t3;
        if (void 0 !== t3) throw new TypeError("Derived constructors may only return object or undefined");
        return function(e4) {
          if (void 0 === e4) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return e4;
        }(e3);
      }(e2, Go() ? Reflect.construct(t2, r3 || [], Yo(e2).constructor) : t2.apply(e2, r3));
    }(this, e, arguments);
  }
  return function(e2, t2) {
    if ("function" != typeof t2 && null !== t2) throw new TypeError("Super expression must either be null or a function");
    e2.prototype = Object.create(t2 && t2.prototype, { constructor: { value: e2, writable: true, configurable: true } }), Object.defineProperty(e2, "prototype", { writable: false }), t2 && Ho(e2, t2);
  }(e, qo(Error)), t = e, (r2 = [{ key: "toString", value: function() {
    return this.message;
  } }]) && Vo(t.prototype, r2), Object.defineProperty(t, "prototype", { writable: false }), t;
  var t, r2;
}();
var Ko = "uniform mat4 u_projection;\n\nattribute vec2 a_position;\n//attribute float a_index;\n\n//varying highp float index;\n\nvoid main() {\n//  index = a_index;\n  gl_Position = u_projection * vec4(a_position, 0.0, 1.0);\n}";
function Zo(e) {
  return Zo = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, Zo(e);
}
function $o(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, Qo(n2.key), n2);
  }
}
function Qo(e) {
  var t = function(e2) {
    if ("object" != Zo(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != Zo(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == Zo(t) ? t : t + "";
}
var Jo = function() {
  return e = function e2(t2, r2) {
    !function(e3, t3) {
      if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    }(this, e2), this.graph = this.constructGraphObjects(t2, r2), this.subGraphs = [], this.sunMap = {};
  }, t = [{ key: "constructGraphObjects", value: function(e2, t2) {
    var r2 = new Array(e2.nodes.length), n2 = new Array(e2.rels.length), o2 = {}, i2 = [];
    return e2.nodes.forEach(function(e3, t3) {
      r2[t3] = [], n2[t3] = [], i2.push(e3);
    }), e2.rels.forEach(function(e3) {
      var i3 = t2[e3.from], a2 = t2[e3.to];
      void 0 !== i3 && void 0 !== a2 && (r2[i3].push(a2), r2[a2].push(i3), n2[i3].push(e3.id), n2[a2].push(e3.id), o2[e3.id] = e3);
    }), this.relIdMap = n2, { nodes: i2, relationships: r2, idToRel: o2 };
  } }, { key: "coarsenTo", value: function(e2) {
    for (var t2 = this.graph, r2 = t2.nodes.length, n2 = 0; t2.nodes.length > e2 && t2.relationships.some(function(e3) {
      return e3.length > 0;
    }); ) {
      var o2 = this.coarsen(t2, 0 === n2);
      if (0 === n2 && (this.nodeSortMap = o2.nodeSortMap), this.subGraphs.push(o2.sortedInput), 0 === (t2 = o2.output).relationships.length || t2.relationships.every(function(e3) {
        return 0 === e3.length;
      }) || r2 === t2.nodes.length) break;
      r2 = t2.nodes.length, n2 += 1;
    }
    return this.subGraphs.push(t2), t2;
  } }, { key: "coarsenBy", value: function(e2) {
    for (var t2 = e2, r2 = this.graph, n2 = r2.nodes.length, o2 = t2; t2 > 0; ) {
      var i2 = this.coarsen(r2, t2 === o2);
      if (this.subGraphs.push(i2.sortedInput), 0 === (r2 = i2.output).relationships.length || r2.relationships.every(function(e3) {
        return 0 === e3.length;
      }) || n2 === r2.nodes.length) break;
      n2 = r2.nodes.length, t2 -= 1;
    }
    return this.subGraphs.push(r2), r2;
  } }, { key: "coarsen", value: function(e2, t2) {
    var r2 = this, n2 = e2.nodes, o2 = e2.relationships, i2 = n2.map(function(e3, t3) {
      return t3;
    }), a2 = {}, u2 = {};
    n2.forEach(function(e3, t3) {
      a2[t3] = e3, u2[e3.id] = t3;
    });
    for (var s2 = o2.map(function(e3) {
      return e3.slice();
    }), c2 = { suns: {}, planets: {}, moons: {} }, l2 = [], f2 = [], h2 = function() {
      var e3 = i2[0];
      i2.splice(i2.indexOf(e3), 1), o2[e3].forEach(function(t3) {
        var r4 = i2.indexOf(t3);
        r4 >= 0 && i2.splice(r4, 1);
        var n4 = -1, o3 = s2[t3];
        o3.forEach(function(t4, r5) {
          var o4 = i2.indexOf(t4);
          o4 >= 0 ? i2.splice(o4, 1) : t4 === e3 && (n4 = r5);
        }), o3.splice(n4, 1);
      });
      var r3 = { id: e3 };
      if (t2) r3.originalId = a2[e3].id;
      else {
        var n3 = a2[e3];
        r3.finestIndex = n3.finestIndex, r3.originalId = n3.originalId;
      }
      l2.push(r3), c2.suns[e3] = r3;
    }; i2.length > 0; ) h2();
    l2.forEach(function(e3, t3) {
      f2[t3] = [];
    }), l2.forEach(function(e3, r3) {
      var n3 = {}, i3 = [];
      o2[e3.id].forEach(function(o3) {
        if (o3 !== e3.id && !n3[o3]) {
          var u3 = { id: o3, parent: e3, sunId: r3, moons: [] }, s3 = a2[o3];
          u3.size = function() {
            return u3.moons.length + 1;
          }, u3.weight = s3.weight || 1, u3.children = function() {
            return u3.moons;
          }, t2 ? u3.originalId = s3.id : (u3.finestIndex = s3.finestIndex, u3.originalId = s3.originalId), i3.push(u3), n3[o3] = true;
        }
      }), i3.forEach(function(e4) {
        c2.planets[e4.id] = e4;
      }), e3.planets = i3, e3.children = function() {
        return e3.planets;
      }, e3.weight = e3.planets.reduce(function(e4, t3) {
        return e4 + (t3.weight || 1);
      }, 0) + (a2[e3.id].weight || 1), e3.size = function() {
        return e3.planets.reduce(function(e4, t3) {
          return e4 + t3.size();
        }, 0) + 1;
      };
    });
    var d2 = n2.filter(function(e3, t3) {
      return !l2.find(function(e4) {
        return e4.id === t3;
      }) && !c2.planets[t3];
    }), p3 = [];
    d2.forEach(function(e3) {
      for (var r3 = u2[e3.id], n3 = s2[r3], o3 = null, i3 = -1, l3 = 0; l3 < n3.length; l3++) {
        var f3 = n3[l3];
        if (f3 !== r3 && (o3 = c2.planets[f3])) {
          i3 = l3;
          break;
        }
      }
      if (n3.splice(i3, 1), o3) {
        var h3 = { id: r3, size: function() {
          return 0;
        } };
        h3.weight = a2[r3].weight || 1, h3.parent = o3, h3.sunId = o3.sunId, t2 ? h3.originalId = e3.id : (h3.finestIndex = e3.finestIndex, h3.originalId = e3.originalId), c2.moons[r3] = h3, o3.moons.push(h3), o3.weight += h3.weight, o3.parent.weight += h3.weight;
        var d3 = s2[o3.id];
        d3.splice(d3.indexOf(r3), 1);
      } else p3.push(e3);
    }), s2.forEach(function(e3, t3) {
      if (!c2.suns[t3]) {
        var r3 = c2.planets[t3] || c2.moons[t3];
        s2[t3].forEach(function(e4) {
          var t4 = c2.planets[e4];
          if (t4 || (t4 = c2.moons[e4]), r3.sunId !== t4.sunId) {
            var n3 = f2[r3.sunId];
            n3.includes(t4.sunId) || n3.push(t4.sunId);
          }
        });
      }
    });
    var v3 = [], y3 = 0, b2 = {};
    l2.forEach(function(e3, o3) {
      var i3 = n2[e3.id];
      b2[e3.id] = y3, e3.previousIndex = o3, e3.id = y3, y3 += 1, t2 && (i3.finestIndex = e3.id, e3.finestIndex = e3.id), v3.push(i3), e3.planets.forEach(function(o4) {
        var i4 = n2[o4.id];
        b2[o4.id] = y3, o4.id = y3, y3 += 1, o4.sunId = e3.id, t2 && (i4.finestIndex = o4.id), r2.sunMap[o4.originalId] = e3.originalId, v3.push(i4), o4.moons.forEach(function(o5) {
          var i5 = n2[o5.id];
          b2[o5.id] = y3, o5.id = y3, y3 += 1, o5.sunId = e3.id, t2 && (i5.finestIndex = o5.id), r2.sunMap[o5.originalId] = e3.originalId, v3.push(i5);
        });
      });
    });
    var m2 = [], g2 = [];
    return o2.forEach(function(e3, n3) {
      var o3 = b2[n3];
      m2[o3] = e3.map(function(e4) {
        return b2[e4];
      }), t2 && (g2[o3] = e3.map(function(e4, t3) {
        return r2.relIdMap[n3][t3];
      }));
    }), g2 && g2.length > 0 && (this.relIdMap = g2), { output: { nodes: l2, relationships: f2 }, sortedInput: { nodes: v3, relationships: m2 }, nodeSortMap: b2 };
  } }], t && $o(e.prototype, t), Object.defineProperty(e, "prototype", { writable: false }), e;
  var e, t;
}();
var ei = function(e, t, r2) {
  for (var n2 = 2 * Math.PI / r2, o2 = [], i2 = 0; i2 < r2; i2++) {
    var a2 = n2 * i2;
    o2.push({ x: e.x + t * Math.cos(a2), y: e.y + t * Math.sin(a2) });
  }
  return o2;
};
function ti(e) {
  return ti = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, ti(e);
}
function ri(e, t) {
  var r2 = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
  if (!r2) {
    if (Array.isArray(e) || (r2 = function(e2, t2) {
      if (e2) {
        if ("string" == typeof e2) return ni(e2, t2);
        var r3 = {}.toString.call(e2).slice(8, -1);
        return "Object" === r3 && e2.constructor && (r3 = e2.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(e2) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? ni(e2, t2) : void 0;
      }
    }(e)) || t && e && "number" == typeof e.length) {
      r2 && (e = r2);
      var n2 = 0, o2 = function() {
      };
      return { s: o2, n: function() {
        return n2 >= e.length ? { done: true } : { done: false, value: e[n2++] };
      }, e: function(e2) {
        throw e2;
      }, f: o2 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var i2, a2 = true, u2 = false;
  return { s: function() {
    r2 = r2.call(e);
  }, n: function() {
    var e2 = r2.next();
    return a2 = e2.done, e2;
  }, e: function(e2) {
    u2 = true, i2 = e2;
  }, f: function() {
    try {
      a2 || null == r2.return || r2.return();
    } finally {
      if (u2) throw i2;
    }
  } };
}
function ni(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var r2 = 0, n2 = Array(t); r2 < t; r2++) n2[r2] = e[r2];
  return n2;
}
function oi(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, ai(n2.key), n2);
  }
}
function ii(e, t, r2) {
  return (t = ai(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
function ai(e) {
  var t = function(e2) {
    if ("object" != ti(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != ti(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == ti(t) ? t : t + "";
}
var ui = "PhysLayout";
var si = new Float32Array(4);
var ci = 256;
var li = function(e) {
  for (var t = {}, r2 = {}, n2 = 0; n2 < e.length; n2++) t[e[n2].id] = n2, r2[n2] = e[n2].id;
  return { nodeIdToIndex: t, nodeIndexToId: r2 };
};
var fi = function() {
  return e = function e2(t2) {
    var r2 = this;
    !function(e3, t3) {
      if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    }(this, e2), ii(this, "physVbo", void 0), ii(this, "physSmallVbo", void 0), ii(this, "physProjection", void 0), ii(this, "physSmallProjection", void 0), ii(this, "gl", void 0), ii(this, "useReadpixelWorkaround", void 0), ii(this, "averageNodeSize", void 0), ii(this, "shouldUpdate", void 0), ii(this, "iterationCount", void 0), ii(this, "lastSpeedValues", void 0), ii(this, "rollingAvgGraphSpeed", void 0), ii(this, "nodeVariation", void 0), ii(this, "nodeCenterPoint", void 0), ii(this, "peakIterationMultiplier", void 0), ii(this, "stateDisposers", void 0), ii(this, "state", void 0), ii(this, "dpr", void 0), ii(this, "intelWorkaround", void 0), ii(this, "simulationStopVelocitySquared", void 0), ii(this, "gravity", void 0), ii(this, "force", void 0), ii(this, "nodeIdToIndex", void 0), ii(this, "nodeIndexToId", void 0), ii(this, "flatRelationshipKeys", void 0), ii(this, "numNodes", void 0), ii(this, "solarMerger", void 0), ii(this, "subGraphs", void 0), ii(this, "nodeSortMap", void 0), ii(this, "firstUpdate", void 0), ii(this, "curPhysData", void 0), ii(this, "apprxRepForceShader", void 0), ii(this, "levelsClusterTexture", void 0), ii(this, "levelsFinestIndexTexture", void 0), ii(this, "initalLevelTexture", void 0), ii(this, "levelsData", void 0), ii(this, "collisionDetectionMultiplier", void 0), ii(this, "physShader", void 0), ii(this, "physData", void 0), ii(this, "workaroundData", void 0), ii(this, "pinData", void 0), ii(this, "updateData", void 0), ii(this, "updateShader", void 0), ii(this, "workaroundShader", void 0), ii(this, "physPositions", void 0), ii(this, "springTexture", void 0), ii(this, "sizeTexture", void 0), ii(this, "offsetTexture", void 0), ii(this, "pinTexture", void 0), ii(this, "addedNodes", void 0), ii(this, "updateTexture", void 0), ii(this, "enableVerlet", void 0);
    var n2 = t2.state, o2 = t2.webGLContext;
    if (eo.info("layout - webGLContext", Boolean(o2)), void 0 === t2.webGLContext) throw new Error("PhysLayout missing options: webGLContext - webgl context");
    if (void 0 === t2.state) throw new Error("PhysLayout missing options: state - state object");
    var i2 = o2;
    this.checkCompatibility(i2), this.printGlStats(i2), this.physVbo = i2.createBuffer(), i2.bindBuffer(i2.ARRAY_BUFFER, this.physVbo);
    var a2 = new Float32Array([0, 0, bn, 0, 0, bn, bn, bn]);
    i2.bufferData(i2.ARRAY_BUFFER, a2, i2.STATIC_DRAW), this.physSmallVbo = i2.createBuffer(), i2.bindBuffer(i2.ARRAY_BUFFER, this.physSmallVbo);
    var u2 = new Float32Array([0, 0, ci, 0, 0, ci, ci, ci]);
    i2.bufferData(i2.ARRAY_BUFFER, u2, i2.STATIC_DRAW), this.physProjection = Ro(), Io(this.physProjection, 0, bn, bn, 0, 0, 1e6), this.physSmallProjection = Ro(), Io(this.physSmallProjection, 0, ci, ci, 0, 0, 1e6), i2.disable(i2.DEPTH_TEST), this.gl = i2, this.useReadpixelWorkaround && this.setupReadpixelWorkaround(), this.setupUpdates(), this.averageNodeSize = gn, this.shouldUpdate = true, this.iterationCount = 0, this.lastSpeedValues = [], this.rollingAvgGraphSpeed = 0, this.nodeVariation = 0, this.nodeCenterPoint = [0, 0], this.peakIterationMultiplier = 160, this.setOptions(t2, true), this.definePhysicsArrays(), this.flatRelationshipKeys = /* @__PURE__ */ new Set();
    var s2 = n2.nodes, c2 = n2.rels;
    s2.addChannel(ui), c2.addChannel(ui), this.stateDisposers = [], this.stateDisposers.push(n2.reaction(function() {
      return n2.graphUpdates;
    }, function() {
      var e3 = s2.channels[ui];
      if (void 0 !== s2.version && e3) {
        var t3 = Object.values(e3.adds).length > 0, n3 = Object.values(e3.removes).length > 0, o3 = Object.values(e3.updates), i3 = Dn(o3);
        (t3 || n3 || i3) && (r2.shouldUpdate = true, r2.checkForUpdates());
      }
      var a3 = c2.channels[ui];
      if (void 0 !== c2.version && a3) {
        var u3 = Object.values(a3.adds).length > 0, l2 = Object.values(a3.removes).length > 0;
        (u3 || l2) && (r2.shouldUpdate = true, r2.checkForUpdates());
      }
    })), this.setData({ nodes: s2.items, rels: c2.items }), this.state = n2, this.dpr = window.devicePixelRatio || 1;
  }, t = [{ key: "setOptions", value: function(e2) {
    var t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
    if (e2) {
      var r2 = e2.intelWorkaround, n2 = e2.enableVerlet, o2 = void 0 === n2 || n2;
      t2 && (this.intelWorkaround = r2, this.enableVerlet = o2);
      var i2 = this.enableVerlet ? 0.25 : 100;
      this.simulationStopVelocitySquared = i2 * i2, this.gravity = 100, this.force = 0;
    }
  } }, { key: "setData", value: function(e2) {
    var t2 = li(e2.nodes), r2 = t2.nodeIdToIndex, n2 = t2.nodeIndexToId;
    return this.nodeIdToIndex = r2, this.nodeIndexToId = n2, this.numNodes = e2.nodes.length, this.flatRelationshipKeys = Mn(e2.rels), this.solarMerger = new Jo(e2, r2), this.solarMerger.coarsenTo(1), this.subGraphs = this.solarMerger.subGraphs, this.nodeSortMap = this.solarMerger.nodeSortMap, this.setupSprings(this.subGraphs[0]), this.setupSize(this.subGraphs[0]), this.setupPhysics(), this.firstUpdate = true, this.curPhysData = 0, this.shouldUpdate = true, this.iterationCount = 0, this.subGraphs[0];
  } }, { key: "update", value: function() {
    var e2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], t2 = this.gl;
    if (this.checkForUpdates(e2), !this.shouldUpdate) return t2.bindFramebuffer(t2.FRAMEBUFFER, this.getPhysData(0).frameBuffer), t2.readPixels(0, 0, bn, bn, t2.RGBA, t2.FLOAT, this.physPositions), false;
    t2.disable(t2.BLEND);
    for (var r2 = this.nodeVariation / (this.numNodes || 1) > 0.3, n2 = this.getScaleNumber(this.iterationCount), o2 = this.subGraphs ? this.subGraphs.length : 0, i2 = this.getPhysData(0).texture, a2 = o2 - 1; a2 > 0; a2--) {
      var u2 = this.subGraphs[a2].nodes.length, s2 = a2 === o2 - 1;
      this.apprxRepForceShader.use(), this.apprxRepForceShader.setUniform("u_physData", i2), this.apprxRepForceShader.setUniform("u_clusterData", this.levelsClusterTexture[a2]), this.apprxRepForceShader.setUniform("u_finestIndexes", this.levelsFinestIndexTexture[a2]), this.apprxRepForceShader.setUniform("u_prevForce", s2 ? this.initalLevelTexture : this.levelsData[a2 + 1].texture), this.apprxRepForceShader.setUniform("u_numNodes", u2), this.apprxRepForceShader.setUniform("u_iterationMultiplier", n2), this.apprxRepForceShader.setUniform("u_baseLength", this.getBaseLength(u2)), this.apprxRepForceShader.setUniform("u_isTopLevel", s2 ? 1 : 0), t2.bindBuffer(t2.ARRAY_BUFFER, this.physSmallVbo), this.apprxRepForceShader.setAttributePointer("a_position", 2, 0, 2), t2.bindFramebuffer(t2.FRAMEBUFFER, this.levelsData[a2].frameBuffer), t2.viewport(0, 0, ci, ci), t2.drawArrays(t2.TRIANGLE_STRIP, 0, 4);
    }
    if (this.collisionDetectionMultiplier = 0, this.collisionDetectionMultiplier = r2 ? Math.min(this.iterationCount / Math.min(this.numNodes, 300), 1) : 1, this.force = o2 <= 1 ? this.initalLevelTexture : this.levelsData[1].texture, this.physShader.use(), this.physShader.setUniform("u_prevForce", o2 <= 1 ? this.initalLevelTexture : this.levelsData[1].texture), this.physShader.setUniform("u_connections", this.springTexture), this.physShader.setUniform("u_sizeTexture", this.sizeTexture), this.physShader.setUniform("u_connectionOffsets", this.offsetTexture), this.physShader.setUniform("u_physData", i2), this.physShader.setUniform("u_pinnedNodes", this.pinTexture), this.physShader.setUniform("u_iterationMultiplier", n2), this.physShader.setUniform("u_curIteration", this.iterationCount), this.physShader.setUniform("u_numNodes", this.numNodes), this.physShader.setUniform("u_clusterData", this.levelsClusterTexture[0]), this.physShader.setUniform("u_collisionMultiplier", this.collisionDetectionMultiplier), this.physShader.setUniform("u_baseLength", this.getBaseLength()), this.firstUpdate = false, t2.bindBuffer(t2.ARRAY_BUFFER, this.physVbo), this.physShader.setAttributePointer("a_position", 2, 0, 2), t2.bindFramebuffer(t2.FRAMEBUFFER, this.getPhysData(1).frameBuffer), t2.viewport(0, 0, bn, bn), t2.drawArrays(t2.TRIANGLE_STRIP, 0, 4), this.useReadpixelWorkaround ? this.doReadpixelWorkaround() : (t2.bindFramebuffer(t2.FRAMEBUFFER, this.getPhysData(0).frameBuffer), t2.readPixels(0, 0, bn, bn, t2.RGBA, t2.FLOAT, this.physPositions)), this.curPhysData = (this.curPhysData + 1) % this.physData.length, this.iterationCount += 1, this.numNodes < 2) this.shouldUpdate = false, this.iterationCount = 0;
    else if (this.iterationCount % 5 == 0) {
      var c2 = this.iterationCount < 300, l2 = c2 ? this.getMaxSpeedSquared() : this.getMedianSpeedSquared(this.addedNodes);
      this.lastSpeedValues.push(l2), this.rollingAvgGraphSpeed = this.lastSpeedValues.reduce(function(e3, t3) {
        return e3 + t3;
      }, 0) / this.lastSpeedValues.length;
      var f2 = c2 && l2 >= this.rollingAvgGraphSpeed, h2 = this.simulationStopVelocitySquared && this.rollingAvgGraphSpeed < this.simulationStopVelocitySquared;
      this.lastSpeedValues.length > 20 && this.lastSpeedValues.shift(), !f2 && true === h2 && this.iterationCount > 2 && this.terminateUpdate();
    }
    return this.shouldUpdate;
  } }, { key: "terminateUpdate", value: function() {
    eo.info("Cooling down after ".concat(this.iterationCount, " iterations at graph speed of ").concat(Math.sqrt(this.rollingAvgGraphSpeed))), this.shouldUpdate = false, this.iterationCount = 0, this.rollingAvgGraphSpeed = 0, this.lastSpeedValues = [], this.addedNodes = null, this.nodeVariation = 0;
  } }, { key: "getShouldUpdate", value: function() {
    return this.shouldUpdate;
  } }, { key: "getComputing", value: function() {
    return false;
  } }, { key: "getNodePositions", value: function(e2) {
    var t2 = [];
    if (this.useReadpixelWorkaround) {
      var r2, n2 = ri(e2);
      try {
        for (n2.s(); !(r2 = n2.n()).done; ) {
          var o2 = r2.value, i2 = this.nodeIdToIndex[o2.id], a2 = o2.id, u2 = void 0, s2 = void 0;
          void 0 !== i2 && (u2 = this.workaroundData[0].dataFloat[i2], s2 = this.workaroundData[1].dataFloat[i2]), t2.push({ id: a2, x: u2, y: s2 });
        }
      } catch (e3) {
        n2.e(e3);
      } finally {
        n2.f();
      }
    } else {
      var c2, l2 = ri(e2);
      try {
        for (l2.s(); !(c2 = l2.n()).done; ) {
          var f2 = c2.value, h2 = this.nodeIdToIndex[f2.id], d2 = f2.id, p3 = void 0, v3 = void 0;
          void 0 !== h2 && (p3 = this.physPositions[4 * h2 + 0], v3 = this.physPositions[4 * h2 + 1]), t2.push({ id: d2, x: p3, y: v3 });
        }
      } catch (e3) {
        l2.e(e3);
      } finally {
        l2.f();
      }
    }
    return t2;
  } }, { key: "reheat", value: function(e2) {
    this.setupSize(this.subGraphs[0]), this.shouldUpdate = true, this.iterationCount = 0, this.nodeVariation = e2.nodes.length;
  } }, { key: "updateNodes", value: function(e2) {
    var t2 = this.gl, r2 = /* @__PURE__ */ new Set();
    t2.bindTexture(t2.TEXTURE_2D, this.getPhysData().texture);
    var n2, o2 = ri(e2);
    try {
      for (o2.s(); !(n2 = o2.n()).done; ) {
        var i2 = n2.value, a2 = this.nodeIdToIndex[i2.id];
        if (void 0 !== i2.x && void 0 !== i2.y) {
          si[0] = i2.x, si[1] = i2.y, si[2] = 0, si[3] = 0;
          var u2 = a2 % bn, s2 = (a2 - u2) / bn;
          t2.texSubImage2D(t2.TEXTURE_2D, 0, u2, s2, 1, 1, t2.RGBA, t2.FLOAT, si), this.useReadpixelWorkaround ? (this.workaroundData[0].dataFloat[a2] = i2.x, this.workaroundData[1].dataFloat[a2] = i2.y) : (this.physPositions[4 * a2 + 0] = i2.x, this.physPositions[4 * a2 + 1] = i2.y);
        }
        void 0 !== i2.pinned && (this.pinData[a2] = i2.pinned ? 255 : 0), Object.keys(i2).forEach(function(e3) {
          return r2.add(e3);
        });
      }
    } catch (e3) {
      o2.e(e3);
    } finally {
      o2.f();
    }
    r2.has("pinned") && (t2.bindTexture(t2.TEXTURE_2D, this.pinTexture), t2.texImage2D(t2.TEXTURE_2D, 0, t2.ALPHA, bn, bn, 0, t2.ALPHA, t2.UNSIGNED_BYTE, this.pinData)), (r2.has("x") || r2.has("y") || r2.has("size")) && (this.shouldUpdate = true, this.iterationCount = 0);
  } }, { key: "addRemoveData", value: function(e2, t2, r2) {
    var n2 = this.gl;
    this.numNodes = e2.nodes.length, this.physShader.use(), this.physShader.setUniform("u_numNodes", this.numNodes), this.physShader.setUniform("u_baseLength", this.getBaseLength());
    var o2 = li(e2.nodes).nodeIdToIndex, i2 = new Jo(e2, o2);
    i2.coarsenTo(1);
    var a2 = i2.subGraphs[0], u2 = this.subGraphs[0], s2 = function(e3) {
      return u2.nodes.findIndex(function(t3) {
        return t3.id === e3;
      });
    }, c2 = Object.values(t2.adds), l2 = Object.values(t2.removes);
    this.addedNodes = c2.length > 0 ? {} : null, this.nodeVariation = c2.length + l2.length;
    for (var f2 = function(e3) {
      return Boolean(t2.adds[e3]);
    }, h2 = 3 * Math.sqrt(e2.nodes.length), d2 = { x: 0, y: 0 }, p3 = a2.nodes.length, v3 = new Uint8Array(65536), y3 = 0; y3 < p3; y3++) {
      var b2 = 0, m2 = 0, g2 = a2.nodes[y3];
      if (f2(g2.id)) {
        if (this.addedNodes[y3] = g2.id, b2 = g2.position ? g2.position.x : void 0, m2 = g2.position ? g2.position.y : void 0, void 0 === b2 || void 0 === m2) {
          var _2 = i2.sunMap, w2 = void 0;
          for (w2 = _2[g2.id]; void 0 !== w2; w2 = _2[w2]) {
            var O2 = s2(w2);
            if (-1 !== O2) {
              var S2 = this.getNodePosition(O2);
              b2 = S2.x + 10 * (Math.random() - 0.5), m2 = S2.y + 10 * (Math.random() - 0.5);
              break;
            }
          }
          void 0 === w2 && (b2 = this.nodeCenterPoint[0] + h2 * (Math.random() - 0.5), m2 = this.nodeCenterPoint[1] + h2 * (Math.random() - 0.5));
        }
        this.updateData[2 * y3] = b2, this.updateData[2 * y3 + 1] = m2, v3[y3] = g2.pinned ? 255 : 0;
      } else {
        var E2 = s2(g2.id), P2 = this.getNodePosition(E2);
        b2 = P2.x, m2 = P2.y, this.updateData[2 * y3] = E2, this.updateData[2 * y3 + 1] = 999999, v3[y3] = this.pinData[E2];
      }
      d2.x += b2 || 0, d2.y += m2 || 0;
    }
    this.nodeCenterPoint = p3 ? [d2.x / p3, d2.y / p3] : [0, 0], this.pinData = v3, this.subGraphs = i2.subGraphs, this.nodeSortMap = i2.nodeSortMap, this.setupSprings(this.subGraphs[0]), this.setupSize(this.subGraphs[0]);
    var T2 = li(this.subGraphs[0].nodes), x3 = T2.nodeIdToIndex, C2 = T2.nodeIndexToId;
    this.nodeIdToIndex = x3, this.nodeIndexToId = C2, n2.bindTexture(n2.TEXTURE_2D, this.updateTexture), n2.texImage2D(n2.TEXTURE_2D, 0, n2.ALPHA, bn, bn, 0, n2.ALPHA, n2.FLOAT, this.updateData), eo.info("Setting gravity center to ", this.nodeCenterPoint), this.physShader.setUniform("u_gravityCenter", this.nodeCenterPoint), this.updateShader.use(), this.updateShader.setUniform("u_numNodesNew", a2.nodes.length), this.updateShader.setUniform("u_physData", this.getPhysData(0).texture), this.updateShader.setUniform("u_updateData", this.updateTexture), n2.disable(n2.BLEND), n2.bindBuffer(n2.ARRAY_BUFFER, this.physVbo), this.updateShader.setAttributePointer("a_position", 2, 0, 2), n2.bindFramebuffer(n2.FRAMEBUFFER, this.getPhysData(1).frameBuffer), n2.viewport(0, 0, bn, bn), n2.drawArrays(n2.TRIANGLE_STRIP, 0, 4), this.curPhysData = (this.curPhysData + 1) % this.physData.length, this.useReadpixelWorkaround ? this.doReadpixelWorkaround() : (n2.bindFramebuffer(n2.FRAMEBUFFER, this.getPhysData().frameBuffer), n2.readPixels(0, 0, bn, bn, n2.RGBA, n2.FLOAT, this.physPositions)), (c2.length > 0 || l2.length > 0) && (n2.bindTexture(n2.TEXTURE_2D, this.pinTexture), n2.texImage2D(n2.TEXTURE_2D, 0, n2.ALPHA, bn, bn, 0, n2.ALPHA, n2.UNSIGNED_BYTE, this.pinData));
    var j2 = Mn(e2.rels), A2 = this.hasRelationshipFlatMapChanged(j2, r2);
    return this.shouldUpdate = this.nodeVariation > 0 || A2, this.iterationCount = 0, this.flatRelationshipKeys = j2, this.setupPhysicsForCoarse(), this.subGraphs[0];
  } }, { key: "destroy", value: function() {
    var e2 = this;
    this.gl.deleteBuffer(this.physVbo), this.gl.deleteBuffer(this.physSmallVbo), this.physData.forEach(function(t2) {
      e2.gl.deleteFramebuffer(t2.frameBuffer), e2.gl.deleteTexture(t2.texture);
    }), this.levelsData.forEach(function(t2) {
      e2.gl.deleteFramebuffer(t2.frameBuffer), e2.gl.deleteTexture(t2.texture);
    }), this.levelsClusterTexture.forEach(function(t2) {
      e2.gl.deleteTexture(t2);
    }), this.levelsFinestIndexTexture.forEach(function(t2) {
      e2.gl.deleteTexture(t2);
    }), this.gl.deleteTexture(this.initalLevelTexture), this.gl.deleteTexture(this.sizeTexture), this.gl.deleteTexture(this.offsetTexture), this.gl.deleteTexture(this.springTexture), this.gl.deleteTexture(this.pinTexture), this.gl.deleteTexture(this.updateTexture), void 0 !== this.apprxRepForceShader && this.apprxRepForceShader.remove(), void 0 !== this.updateShader && this.updateShader.remove(), void 0 !== this.physShader && this.physShader.remove(), this.physPositions = null, this.gl = null, this.stateDisposers.forEach(function(e3) {
      e3();
    }), this.state.nodes.removeChannel(ui), this.state.rels.removeChannel(ui);
  } }, { key: "hasRelationshipFlatMapChanged", value: function(e2, t2) {
    if (e2.size !== this.flatRelationshipKeys.size) return true;
    var r2 = false, n2 = Object.values(t2.adds), o2 = Object.values(t2.removes);
    if (n2.length > 0 || o2.length > 0) {
      var i2, a2 = ri(Mn(n2));
      try {
        for (a2.s(); !(i2 = a2.n()).done; ) {
          var u2 = i2.value;
          if (!this.flatRelationshipKeys.has(u2)) {
            r2 = true;
            break;
          }
        }
      } catch (e3) {
        a2.e(e3);
      } finally {
        a2.f();
      }
      if (!r2) {
        var s2, c2 = ri(Mn(o2));
        try {
          for (c2.s(); !(s2 = c2.n()).done; ) {
            var l2 = s2.value;
            if (!e2.has(l2)) {
              r2 = true;
              break;
            }
          }
        } catch (e3) {
          c2.e(e3);
        } finally {
          c2.f();
        }
      }
    }
    return r2;
  } }, { key: "dumpTexture", value: function(e2, t2, r2) {
    var n2 = this.gl;
    eo.info("--- Dumping texture ", r2), n2.bindFramebuffer(n2.FRAMEBUFFER, e2), n2.readPixels(0, 0, bn, bn, n2.RGBA, n2.FLOAT, this.physPositions);
    for (var o2 = 0; o2 < t2; o2++) eo.info(o2, ": ", this.physPositions[4 * o2 + 0], this.physPositions[4 * o2 + 1], this.physPositions[4 * o2 + 2], this.physPositions[4 * o2 + 3]);
  } }, { key: "getScaleNumber", value: function(e2) {
    var t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : function(e3, t3, r2) {
      return r2 + Math.pow(10, 6) * Math.pow(e3 - 120, -1.7);
    };
    return 0 === e2 ? 0 : e2 < 300 ? 200 + -1 / Math.pow(10, 5) * 3 * Math.pow(Math.abs(e2 - 200 + 12), 3) : t2(e2, 200, 10);
  } }, { key: "getBaseLength", value: function(e2) {
    if (void 0 === e2 || e2 === this.numNodes) return 100 * this.dpr;
    var t2 = Math.pow(this.averageNodeSize / 2, 2) * Math.PI, r2 = this.numNodes / e2 * t2;
    return (100 + Math.sqrt(r2 / Math.PI) / 2 / e2) * this.dpr;
  } }, { key: "checkForUpdates", value: function() {
    var e2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], t2 = this.state, r2 = t2.nodes, n2 = t2.rels, o2 = { nodes: r2.items, rels: n2.items }, i2 = Object.values(r2.channels[ui].adds).length > 0, a2 = Object.values(n2.channels[ui].adds).length > 0, u2 = Object.values(r2.channels[ui].removes).length > 0, s2 = Object.values(n2.channels[ui].removes).length > 0, c2 = Object.values(r2.channels[ui].updates);
    (i2 || a2 || u2 || s2) && this.addRemoveData(o2, { adds: r2.channels[ui].adds, removes: r2.channels[ui].removes }, { adds: n2.channels[ui].adds, removes: n2.channels[ui].removes }), e2 ? (this.updateNodes(o2.nodes), this.reheat(o2)) : c2.length > 0 && (this.updateNodes(c2), Dn(c2) && this.reheat(o2)), r2.clearChannel(ui), n2.clearChannel(ui);
  } }, { key: "getNodePosition", value: function(e2) {
    return this.useReadpixelWorkaround ? { x: this.workaroundData[0].dataFloat[e2], y: this.workaroundData[1].dataFloat[e2] } : { x: this.physPositions[4 * e2 + 0], y: this.physPositions[4 * e2 + 1] };
  } }, { key: "getMaxSpeedSquared", value: function() {
    var e2 = 0;
    if (this.useReadpixelWorkaround) for (var t2 = 0; t2 < this.numNodes; t2++) {
      var r2 = this.workaroundData[2].dataFloat[t2], n2 = this.workaroundData[3].dataFloat[t2], o2 = r2 * r2 + n2 * n2;
      o2 > e2 && (e2 = o2);
    }
    else for (var i2 = 0; i2 < this.numNodes; i2++) {
      var a2 = this.physPositions[4 * i2 + 2], u2 = this.physPositions[4 * i2 + 3], s2 = a2 * a2 + u2 * u2;
      s2 > e2 && (e2 = s2);
    }
    return e2;
  } }, { key: "getMedianSpeedSquared", value: function(e2) {
    var t2 = [];
    if (this.useReadpixelWorkaround) for (var r2 = 0; r2 < this.numNodes; r2++) {
      var n2 = this.workaroundData[2].dataFloat[r2], o2 = this.workaroundData[3].dataFloat[r2], i2 = n2 * n2 + o2 * o2;
      t2[r2] = i2;
    }
    else for (var a2 = 0; a2 < this.numNodes; a2++) if (!e2 || e2[a2]) {
      var u2 = this.physPositions[4 * a2 + 2], s2 = this.physPositions[4 * a2 + 3], c2 = u2 * u2 + s2 * s2;
      t2.push(c2);
    }
    return t2.sort(function(e3, t3) {
      return e3 - t3;
    }), t2[Math.floor(t2.length / 2)];
  } }, { key: "getPhysData", value: function() {
    var e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
    return this.physData[(this.curPhysData + e2) % this.physData.length];
  } }, { key: "newTexture", value: function(e2, t2, r2) {
    var n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : e2.FLOAT, o2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : e2.RGBA, i2 = e2.createTexture();
    return e2.bindTexture(e2.TEXTURE_2D, i2), e2.texParameteri(e2.TEXTURE_2D, e2.TEXTURE_MIN_FILTER, e2.NEAREST), e2.texParameteri(e2.TEXTURE_2D, e2.TEXTURE_MAG_FILTER, e2.NEAREST), e2.texParameteri(e2.TEXTURE_2D, e2.TEXTURE_WRAP_S, e2.CLAMP_TO_EDGE), e2.texParameteri(e2.TEXTURE_2D, e2.TEXTURE_WRAP_T, e2.CLAMP_TO_EDGE), e2.texImage2D(e2.TEXTURE_2D, 0, o2, r2, r2, 0, o2, n2, t2), i2;
  } }, { key: "newFramebuffer", value: function(e2, t2) {
    var r2 = e2.createFramebuffer();
    return e2.bindFramebuffer(e2.FRAMEBUFFER, r2), e2.framebufferTexture2D(e2.FRAMEBUFFER, e2.COLOR_ATTACHMENT0, e2.TEXTURE_2D, t2, 0), r2;
  } }, { key: "checkCompatibility", value: function(e2) {
    function t2(e3) {
      throw new Xo(e3);
    }
    e2 || t2("Could not initialize WebGL"), 0 === e2.getParameter(e2.MAX_VERTEX_TEXTURE_IMAGE_UNITS) && t2("Vertex shader texture access not available"), e2.getExtension("OES_texture_float") || t2("OES_texture_float extension not available"), e2.getExtension("WEBGL_color_buffer_float") || (eo.info("gl.readPixels doesnt work for float texture, activating workaround"), this.useReadpixelWorkaround = true);
    var r2 = e2.getParameter(e2.MAX_TEXTURE_SIZE), n2 = Math.max(bn, mn);
    if (r2 < n2 && t2("Need larger WebGL texture support. Avaliable: ".concat(r2, " needed: ").concat(n2)), !this.useReadpixelWorkaround) {
      var o2 = new Float32Array(4), i2 = this.newTexture(e2, o2, 1), a2 = this.newFramebuffer(e2, i2);
      e2.bindFramebuffer(e2.FRAMEBUFFER, a2), e2.readPixels(0, 0, 1, 1, e2.RGBA, e2.FLOAT, o2), e2.getError() !== e2.NO_ERROR && (eo.info("gl.readPixels doesnt work for float texture, activating workaround"), this.useReadpixelWorkaround = true), e2.bindFramebuffer(e2.FRAMEBUFFER, null), e2.deleteFramebuffer(a2), e2.deleteTexture(i2);
    }
  } }, { key: "printGlStats", value: function(e2) {
    var t2 = "?", r2 = "?";
    if (e2.getParameter(e2.RENDERER)) r2 = e2.getParameter(e2.RENDERER), t2 = e2.getParameter(e2.VENDOR);
    else {
      var n2 = e2.getExtension("WEBGL_debug_renderer_info");
      n2 && (t2 = e2.getParameter(n2.UNMASKED_VENDOR_WEBGL), r2 = e2.getParameter(n2.UNMASKED_RENDERER_WEBGL));
    }
    eo.trace("Vendor: ".concat(t2)), eo.trace("Renderer: ".concat(r2));
    var o2 = e2.getParameter(e2.ALIASED_LINE_WIDTH_RANGE);
    eo.trace("Line width range: ".concat(o2));
    var i2 = e2.getSupportedExtensions();
    eo.trace("Extentions:"), i2.length > 0 && i2.forEach(function(e3) {
      return eo.trace(e3);
    });
  } }, { key: "adjustToGlSize", value: function(e2) {
    return e2 * this.dpr * 2.5;
  } }, { key: "setupSize", value: function() {
    for (var e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : { nodes: [] }, t2 = new Float32Array(65536), r2 = e2.nodes, n2 = r2.length, o2 = 0, i2 = 0; i2 < n2; i2++) {
      var a2, u2 = parseInt(null !== (a2 = r2[i2].size) && void 0 !== a2 ? a2 : gn, 10);
      t2[i2] = this.adjustToGlSize(u2), o2 += u2;
    }
    this.averageNodeSize = n2 ? o2 / n2 : gn;
    var s2 = this.gl;
    void 0 === this.sizeTexture && (this.sizeTexture = s2.createTexture()), s2.bindTexture(s2.TEXTURE_2D, this.sizeTexture), s2.texImage2D(s2.TEXTURE_2D, 0, s2.ALPHA, bn, bn, 0, s2.ALPHA, s2.FLOAT, t2), s2.texParameteri(s2.TEXTURE_2D, s2.TEXTURE_MAG_FILTER, s2.NEAREST), s2.texParameteri(s2.TEXTURE_2D, s2.TEXTURE_MIN_FILTER, s2.NEAREST), s2.texParameteri(s2.TEXTURE_2D, s2.TEXTURE_WRAP_S, s2.CLAMP_TO_EDGE), s2.texParameteri(s2.TEXTURE_2D, s2.TEXTURE_WRAP_T, s2.CLAMP_TO_EDGE);
  } }, { key: "setupSprings", value: function(e2) {
    var t2, r2, n2 = this.gl, o2 = e2.relationships, i2 = new Float32Array(16777216), a2 = new Float32Array(65536), u2 = 0;
    for (t2 = 0; t2 < e2.nodes.length; t2++) for (a2[t2] = u2, i2[u2] = o2[t2].length, u2 += 1, r2 = 0; r2 < o2[t2].length; r2++) i2[u2] = o2[t2][r2], u2 += 1;
    for (r2 = u2; r2 < i2.length; r2++) i2[r2] = 1;
    for (r2 = t2; r2 < a2.length; r2++) a2[r2] = 0;
    void 0 === this.offsetTexture && (this.offsetTexture = n2.createTexture()), n2.bindTexture(n2.TEXTURE_2D, this.offsetTexture), n2.texImage2D(n2.TEXTURE_2D, 0, n2.ALPHA, bn, bn, 0, n2.ALPHA, n2.FLOAT, a2), n2.texParameteri(n2.TEXTURE_2D, n2.TEXTURE_MAG_FILTER, n2.NEAREST), n2.texParameteri(n2.TEXTURE_2D, n2.TEXTURE_MIN_FILTER, n2.NEAREST), n2.texParameteri(n2.TEXTURE_2D, n2.TEXTURE_WRAP_S, n2.CLAMP_TO_EDGE), n2.texParameteri(n2.TEXTURE_2D, n2.TEXTURE_WRAP_T, n2.CLAMP_TO_EDGE), void 0 === this.springTexture && (this.springTexture = n2.createTexture()), n2.bindTexture(n2.TEXTURE_2D, this.springTexture), n2.texImage2D(n2.TEXTURE_2D, 0, n2.ALPHA, mn, mn, 0, n2.ALPHA, n2.FLOAT, i2), n2.texParameteri(n2.TEXTURE_2D, n2.TEXTURE_MAG_FILTER, n2.NEAREST), n2.texParameteri(n2.TEXTURE_2D, n2.TEXTURE_MIN_FILTER, n2.NEAREST), n2.texParameteri(n2.TEXTURE_2D, n2.TEXTURE_WRAP_S, n2.CLAMP_TO_EDGE), n2.texParameteri(n2.TEXTURE_2D, n2.TEXTURE_WRAP_T, n2.CLAMP_TO_EDGE);
  } }, { key: "setupPhysics", value: function() {
    this.setupPhysicsForCoarse(), this.setupPhysicsForNodes(), this.physPositions = new Float32Array(262144), this.setupPinData();
  } }, { key: "setupPhysicsForNodes", value: function() {
    var e2 = this.gl, t2 = this.subGraphs.length, r2 = this.subGraphs[0].nodes, n2 = 3 * Math.sqrt(r2.length), o2 = new Float32Array(262144), i2 = new Float32Array(262144);
    this.numNodes = r2.length;
    for (var a2 = 0; a2 < 262144; a2++) o2[a2] = 0, i2[a2] = 0;
    for (var u2 = function(e3, t3, r3, n3) {
      n3[4 * e3 + 0] = t3, n3[4 * e3 + 1] = r3, n3[4 * e3 + 2] = 0, n3[4 * e3 + 3] = 0;
    }, s2 = t2 - 1; s2 >= 0; s2--) {
      var c2 = s2 === t2 - 1 ? [] : this.subGraphs[s2 + 1].nodes;
      0 === c2.length ? this.subGraphs[s2].nodes.forEach(function(e3, t3) {
        var r3 = e3.placement ? e3.placement.x : n2 * (Math.random() - 0.5), i3 = e3.placement ? e3.placement.y : n2 * (Math.random() - 0.5);
        u2(void 0 === e3.finestIndex ? t3 : e3.finestIndex, r3, i3, o2);
      }) : c2.forEach(function(e3) {
        var t3 = e3.finestIndex, r3 = o2[4 * e3.finestIndex], n3 = o2[4 * e3.finestIndex + 1], i3 = ei({ x: r3, y: n3 }, 10, e3.planets.length + 1);
        t3 += 1, e3.planets.forEach(function(e4, r4) {
          var n4 = i3[r4];
          u2(t3 += 1, n4.x, n4.y, o2);
          var a3 = ei({ x: n4.x, y: n4.y }, 10, e4.moons.length + 1);
          e4.moons.forEach(function(e5, r5) {
            var n5 = a3[r5];
            u2(t3 += 1, n5.x, n5.y, o2);
          });
        });
      });
    }
    this.physData = [];
    for (var l2 = 0; l2 < 2; l2++) {
      var f2 = this.newTexture(e2, 0 === l2 ? o2 : i2, bn), h2 = this.newFramebuffer(e2, f2);
      this.physData.push({ texture: f2, frameBuffer: h2 });
    }
    var d2 = this.enableVerlet ? "precision mediump float;\n\nuniform sampler2D u_physData;\nuniform sampler2D u_connections;\nuniform sampler2D u_connectionOffsets;\nuniform sampler2D u_pinnedNodes;\nuniform sampler2D u_sizeTexture;\nuniform float u_baseLength;\nuniform float u_curIteration;\nuniform float u_iterationMultiplier;\nuniform vec2 u_gravityCenter;\nuniform float u_numNodes;\nuniform float u_gravity;\n\nuniform sampler2D u_clusterData;\nuniform sampler2D u_prevForce;\nuniform float u_collisionMultiplier;\n\n\nfloat DAMP = 0.6;\nfloat COOL = 0.99998;\nfloat TEMP = max(0.02, pow(COOL, u_curIteration));\nfloat TIMESTEP = 1.0 / 30.0;\nfloat VELOCITYDECAY = 0.6;\nfloat accLimitLow = 500000.0;\nfloat accLimitHigh = 750000.0;\nfloat accLimitPosHigh = 10000000.0;\n\nconst float denseNodeThreshold = 1000.0;\nconst float MIN_DISTANCE = 0.00000001;\nconst float MAX_DISTANCE = 1000000000.0;\nconst float MAX_ACCELERATION = 50000.0;\n\nvec4 getTextureData(sampler2D texture, float index, float base) {\n  float x = mod(index, base);\n  float y = (index - x) / base;\n  return texture2D(texture, vec2(x + 0.5, y + 0.5) / base);\n}\n\nbool isNan(float val) {\n  return (val < 0.0 || 0.0 < val || val == 0.0) ? false : true;\n}\n\nconst float BIG_NUMBER = 999999999999999999.0;\nbool isInf(float val) {\n  return val > BIG_NUMBER || val < -BIG_NUMBER;\n}\n\nvec2 getDelta(vec2 v1, vec2 v2) {\n  vec2 delta = v1 - v2;\n  float dist = length(delta);\n  if (dist < MIN_DISTANCE || isNan(dist)) {\n    return vec2(MIN_DISTANCE, MIN_DISTANCE);\n  }\n  if (dist > MAX_DISTANCE) {\n    vec2 normDelta = delta / dist;\n    return normDelta * MAX_DISTANCE;\n  }\n  return delta;\n}\n\nvec4 getOtherNodePosition(float i) {\n  return getTextureData(u_physData, i, 256.0);\n}\n\nfloat getCombinedNodeSize(float i, float nodeSize) {\n  float otherNodeSize = getTextureData(u_sizeTexture, i, 256.0).a;\n  return nodeSize + otherNodeSize;\n}\n\nvec2 getSpringForce(float curConnection, float numConnections, float springFScale, vec4 myPosition, float i) {\n  float curSpring = getTextureData(u_connections, curConnection + i, 4096.0).a;\n\n  vec4 otherPosition = getTextureData(u_physData, curSpring, 256.0);\n  float otherDataPosition = getTextureData(u_connectionOffsets, curSpring, 256.0).a;\n  float avgDegree;\n#if INTEL_WORKAROUND\n    avgDegree = max(numConnections, 4.0);\n#else\n    float otherNumConnections = getTextureData(u_connections, otherDataPosition, 4096.0).a;\n    avgDegree = max((otherNumConnections + numConnections * 3.0) / 4.0, 4.0);\n#endif\n\n  vec2 delta = getDelta(myPosition.xy, otherPosition.xy);\n  float dist = length(delta);\n\n  float F = (dist * dist * springFScale) / (u_baseLength * avgDegree);\n  if (u_collisionMultiplier > 0.0) {\n    F *= u_collisionMultiplier;\n  }\n  return (-delta / dist) * F;\n}\n\nvec2 getCollisionForce(float combinedNodeSize, float dist, float fScale, vec2 delta) {\n  float collisionForce = (combinedNodeSize - dist) / (dist);\n  if (u_collisionMultiplier > 0.0) {\n    collisionForce *= u_collisionMultiplier;\n  }\n  return (delta * collisionForce * fScale * combinedNodeSize) / (combinedNodeSize + 1.0);\n}\n\nvec2 getRepulsionForce(float dist, float fScale, vec2 delta) {\n  float F = (u_baseLength * u_baseLength * fScale) / (dist);\n  return (delta / dist) * F * 0.05;\n}\n\nvoid main(void) {\n  float textureSide = 256.0; //#TEXTURE_SIDE#;\n  float index = (gl_FragCoord.x - 0.5) + (gl_FragCoord.y - 0.5) * textureSide;\n\n  if (index >= u_numNodes) {\n    discard;\n  }\n\n  vec4 clusterData = getTextureData(u_clusterData, index, 256.0);\n\n  float clusterIndex = clusterData.x;\n  float clusterStartIndex = clusterData.y;\n  float clusterSize = clusterData.z;\n  float clusterWeight = clusterData.w;\n\n  vec4 myPosition = getTextureData(u_physData, index, 256.0);\n  vec4 previousForce = getTextureData(u_prevForce, clusterIndex, 256.0);\n\n  vec2 acceleration = previousForce.xy;\n\n  float isPinned = getTextureData(u_pinnedNodes, index, 256.0).a;\n  float nodeSize = getTextureData(u_sizeTexture, index, 256.0).a;\n\n  if (isPinned > 0.5) {\n    gl_FragColor = vec4(myPosition.xy, 0.0, 0.0);\n    return;\n  }\n\n  float curConnection = getTextureData(u_connectionOffsets, index, 256.0).a;\n  float numConnections = getTextureData(u_connections, curConnection, 4096.0).a;\n\n  float fScale = 1.0 + sqrt(u_iterationMultiplier);\n  float springFScale = fScale;\n\n  if (numConnections > denseNodeThreshold) {\n    springFScale = sqrt(fScale);\n  }\n\n  float numOfRels = 0.0;\n\n  // Springs\n  for (float i = 1.0; i <= 256.0 * 256.0; i++) {\n    if (numOfRels >= numConnections) {\n      break;\n    }\n    acceleration += getSpringForce(curConnection, numConnections, springFScale, myPosition, i);\n    numOfRels += 1.0;\n  }\n\n  // Repulsion && collision detection\n  if (u_collisionMultiplier > 0.0) {\n    float number_of_collisions = 0.0;\n    for (float i = 0.0; i < 256.0 * 256.0; i++) {\n      if (i >= u_numNodes) {\n        break;\n      }\n\n      if (i == index) {\n        continue;\n      }\n\n      vec4 otherPosition = getOtherNodePosition(i);\n      vec2 delta = getDelta(myPosition.xy, otherPosition.xy);\n      float dist = length(delta);\n      float combinedNodeSize = getCombinedNodeSize(i, nodeSize) * 2.0;\n\n      if (dist < combinedNodeSize && number_of_collisions < 40.0) {\n        number_of_collisions++;\n        acceleration += getCollisionForce(combinedNodeSize, dist, fScale, delta);\n      }\n\n      if (i >= clusterStartIndex && i < clusterStartIndex + clusterSize) {\n        acceleration += getRepulsionForce(dist, fScale, delta);\n      }\n    }\n  } else {\n    for (float i = 0.0; i < 256.0 * 256.0; i++) {\n      if (i >= clusterStartIndex + clusterSize || i >= u_numNodes) {\n        break;\n      }\n\n      if (i < clusterStartIndex || i == index) {\n        continue;\n      }\n\n      vec4 otherPosition = getOtherNodePosition(i);\n      vec2 delta = getDelta(myPosition.xy, otherPosition.xy);\n      float dist = length(delta);\n      float combinedNodeSize = getCombinedNodeSize(i, nodeSize);\n\n      if (dist < combinedNodeSize) {\n        acceleration += getCollisionForce(combinedNodeSize, dist, fScale, delta);\n      }\n\n      acceleration += getRepulsionForce(dist, fScale, delta);\n    }\n  }\n\n  // Gravity\n  vec2 delta = getDelta(u_gravityCenter, myPosition.xy);\n  float dist = length(delta);\n\n  vec2 grav = (delta / dist) * u_gravity * fScale;\n  acceleration += grav * smoothstep(0.0, 500.0, dist);\n\n  float accMagnitude = length(acceleration);\n  acceleration *= min(MAX_ACCELERATION, accMagnitude) / accMagnitude;\n\n  float iterationFrictionThreshold = 1000.0;\n\n  if (u_curIteration > iterationFrictionThreshold) {\n    float friction = 1.0 + pow((u_curIteration - iterationFrictionThreshold), 2.0) / 100.0;\n    acceleration *= 1.0 / friction;\n  }\n\n  if (u_curIteration == 0.0) {\n    gl_FragColor = vec4(myPosition.xy, myPosition.zw);\n  } else {\n    vec2 prevVelocity = myPosition.zw;\n    vec2 currentPos = myPosition.xy;\n    vec2 prevPos = currentPos - prevVelocity;\n\n    vec2 newPos = currentPos + TEMP * ( DAMP * (prevVelocity) + acceleration * TIMESTEP * TIMESTEP);\n    vec2 newVelocity = newPos - currentPos;\n    gl_FragColor = vec4(newPos, newVelocity);\n  }\n}" : "precision mediump float;\n\nuniform sampler2D u_physData;\nuniform sampler2D u_connections;\nuniform sampler2D u_connectionOffsets;\nuniform sampler2D u_pinnedNodes;\nuniform sampler2D u_sizeTexture;\nuniform float u_baseLength;\nuniform float u_curIteration;\nuniform float u_iterationMultiplier;\nuniform vec2 u_gravityCenter;\nuniform float u_numNodes;\nuniform float u_gravity;\n\nuniform sampler2D u_clusterData;\nuniform sampler2D u_prevForce;\nuniform float u_collisionMultiplier;\n\nfloat TIMESTEP = 1.0 / 30.0;\nfloat VELOCITYDECAY = 0.6;\nfloat accLimitLow = 500000.0;\nfloat accLimitHigh = 750000.0;\nfloat accLimitPosHigh = 10000000.0;\n\nconst float denseNodeThreshold = 1000.0;\nconst float MIN_DISTANCE = 0.00000001;\nconst float MAX_DISTANCE = 1000000000.0;\nconst float MAX_ACCELERATION = 500000.0;\n\nvec4 getTextureData(sampler2D texture, float index, float base) {\n  float x = mod(index, base);\n  float y = (index - x) / base;\n  return texture2D(texture, vec2(x + 0.5, y + 0.5) / base);\n}\n\nbool isNan(float val) {\n  return (val < 0.0 || 0.0 < val || val == 0.0) ? false : true;\n}\n\nconst float BIG_NUMBER = 999999999999999999.0;\nbool isInf(float val) {\n  return val > BIG_NUMBER || val < -BIG_NUMBER;\n}\n\nvec2 getDelta(vec2 v1, vec2 v2) {\n  vec2 delta = v1 - v2;\n  float dist = length(delta);\n  if (dist < MIN_DISTANCE || isNan(dist)) {\n    return vec2(MIN_DISTANCE, MIN_DISTANCE);\n  }\n  if (dist > MAX_DISTANCE) {\n    vec2 normDelta = delta / dist;\n    return normDelta * MAX_DISTANCE;\n  }\n  return delta;\n}\n\nvec4 getOtherNodePosition(float i) {\n  return getTextureData(u_physData, i, 256.0);\n}\n\nfloat getCombinedNodeSize(float i, float nodeSize) {\n  float otherNodeSize = getTextureData(u_sizeTexture, i, 256.0).a;\n  return nodeSize + otherNodeSize;\n}\n\nvec2 getSpringForce(float curConnection,  float numConnections, float springFScale, vec4 myPosition, float i) {\n  float curSpring = getTextureData(u_connections, curConnection + i, 4096.0).a;\n\n  vec4 otherPosition = getTextureData(u_physData, curSpring, 256.0);\n  float otherDataPosition = getTextureData(u_connectionOffsets, curSpring, 256.0).a;\n  float avgDegree;\n#if INTEL_WORKAROUND\n    avgDegree = max(numConnections, 4.0);\n#else\n    float otherNumConnections = getTextureData(u_connections, otherDataPosition, 4096.0).a;\n    avgDegree = max((otherNumConnections + numConnections * 3.0) / 4.0, 4.0);\n#endif\n\n  vec2 delta = getDelta(myPosition.xy, otherPosition.xy);\n  float dist = length(delta);\n\n  float F = (dist * dist * springFScale) / (u_baseLength * avgDegree);\n  if (u_collisionMultiplier > 0.0) {\n    F *= u_collisionMultiplier;\n  }\n  return (-delta / dist) * F;\n}\n\nvec2 getCollisionForce(float combinedNodeSize, float dist, float fScale, vec2 delta) {\n  float collisionForce = ((combinedNodeSize - dist) / dist);\n  if (u_collisionMultiplier > 0.0) {\n    collisionForce *= u_collisionMultiplier;\n  }\n  return (delta * collisionForce * fScale * combinedNodeSize) / (combinedNodeSize + 1.0);\n}\n\nvec2 getRepulsionForce(float dist, float fScale, vec2 delta) {\n  float F = (u_baseLength * u_baseLength * (fScale / 1.5)) / dist;\n  return (delta / dist) * F * 0.05;\n}\n\nvoid main(void) {\n  float textureSide = 256.0; //#TEXTURE_SIDE#;\n  float index = (gl_FragCoord.x - 0.5) + (gl_FragCoord.y - 0.5) * textureSide;\n\n  if (index >= u_numNodes) {\n    discard;\n  }\n\n  vec4 clusterData = getTextureData(u_clusterData, index, 256.0);\n\n  float clusterIndex = clusterData.x;\n  float clusterStartIndex = clusterData.y;\n  float clusterSize = clusterData.z;\n  float clusterWeight = clusterData.w;\n\n  vec4 myPosition = getTextureData(u_physData, index, 256.0);\n  vec4 previousForce = getTextureData(u_prevForce, clusterIndex, 256.0);\n\n  vec2 acceleration = previousForce.xy;\n\n  float isPinned = getTextureData(u_pinnedNodes, index, 256.0).a;\n  float nodeSize = getTextureData(u_sizeTexture, index, 256.0).a;\n\n  if (isPinned > 0.5) {\n    gl_FragColor = vec4(myPosition.xy, 0.0, 0.0);\n    return;\n  }\n\n  float curConnection = getTextureData(u_connectionOffsets, index, 256.0).a;\n  float numConnections = getTextureData(u_connections, curConnection, 4096.0).a;\n\n  float fScale = 1.0 + sqrt(u_iterationMultiplier);\n  float springFScale = fScale;\n\n  if (numConnections > denseNodeThreshold) {\n    springFScale = sqrt(fScale);\n  }\n\n  float numOfRels = 0.0;\n\n  // Springs\n  for (float i = 1.0; i <= 256.0 * 256.0; i++) {\n    if (numOfRels >= numConnections) {\n      break;\n    }\n    acceleration += getSpringForce(curConnection, numConnections, springFScale, myPosition, i);\n    numOfRels += 1.0;\n  }\n\n  // Repulsion && collision detection\n  if (u_collisionMultiplier > 0.0) {\n    float number_of_collisions = 0.0;\n    for (float i = 0.0; i < 256.0 * 256.0; i++) {\n      if (i >= u_numNodes) {\n        break;\n      }\n\n      if (i == index) {\n        continue;\n      }\n\n      vec4 otherPosition = getOtherNodePosition(i);\n      vec2 delta = getDelta(myPosition.xy, otherPosition.xy);\n      float dist = length(delta);\n      float combinedNodeSize = getCombinedNodeSize(i, nodeSize) * 2.0;\n\n      if (dist < combinedNodeSize && number_of_collisions < 40.0) {\n        number_of_collisions++;\n        acceleration += getCollisionForce(combinedNodeSize, dist, fScale, delta);\n      }\n\n      if (i >= clusterStartIndex && i < clusterStartIndex + clusterSize) {\n        acceleration += getRepulsionForce(dist, fScale, delta);\n      }\n    }\n  } else {\n    for (float i = 0.0; i < 256.0 * 256.0; i++) {\n      if (i >= clusterStartIndex + clusterSize || i >= u_numNodes) {\n        break;\n      }\n\n      if (i < clusterStartIndex || i == index) {\n        continue;\n      }\n\n      vec4 otherPosition = getOtherNodePosition(i);\n      vec2 delta = getDelta(myPosition.xy, otherPosition.xy);\n      float dist = length(delta);\n      float combinedNodeSize = getCombinedNodeSize(i, nodeSize);\n\n      if (dist < combinedNodeSize) {\n        acceleration += getCollisionForce(combinedNodeSize, dist, fScale, delta);\n      }\n\n      acceleration += getRepulsionForce(dist, fScale, delta);\n    }\n  }\n\n  // Gravity\n  vec2 delta = getDelta(u_gravityCenter, myPosition.xy);\n  float dist = length(delta);\n\n  vec2 grav = (delta / dist) * u_gravity * fScale;\n  acceleration += grav * smoothstep(0.0, 500.0, dist);\n\n  float accMagnitude = length(acceleration);\n  acceleration *= min(MAX_ACCELERATION, accMagnitude) / accMagnitude;\n\n  float iterationFrictionThreshold = 1000.0;\n\n  if (u_curIteration > iterationFrictionThreshold) {\n    float friction = 1.0 + pow((u_curIteration - iterationFrictionThreshold), 2.0) / 100.0;\n    acceleration *= 1.0 / friction;\n  }\n\n  if (u_curIteration == 0.0) {\n    gl_FragColor = vec4(myPosition.xy, acceleration * TIMESTEP * 0.5);\n  } else {\n    myPosition.zw = myPosition.zw * VELOCITYDECAY;\n    gl_FragColor = vec4(myPosition.xy + myPosition.zw * TIMESTEP, myPosition.zw + acceleration * TIMESTEP);\n  }\n}";
    this.physShader = new Bo(e2, Ko, d2, { INTEL_WORKAROUND: this.intelWorkaround ? 1 : 0 }), this.physShader.use(), this.physShader.setUniform("u_projection", this.physProjection), this.physShader.setUniform("u_baseLength", this.getBaseLength()), this.physShader.setUniform("u_connections", this.springTexture), this.physShader.setUniform("u_sizeTexture", this.sizeTexture), this.physShader.setUniform("u_connectionOffsets", this.offsetTexture), this.physShader.setUniform("u_pinnedNodes", this.pinTexture), this.physShader.setUniform("u_gravityCenter", this.nodeCenterPoint), this.physShader.setUniform("u_numNodes", this.numNodes), this.physShader.setUniform("u_gravity", this.gravity);
  } }, { key: "setupPhysicsForCoarse", value: function() {
    var e2 = this, t2 = this.gl;
    this.levelsData = [], this.levelsClusterTexture = [], this.levelsFinestIndexTexture = [];
    var r2, n2, o2 = this.subGraphs.length, i2 = function(e3, t3, n3, o3, i3) {
      r2[4 * e3 + 0] = t3, r2[4 * e3 + 1] = n3, r2[4 * e3 + 2] = i3.size(), r2[4 * e3 + 3] = o3 || 1;
    };
    if (1 === o2) {
      r2 = new Float32Array(262144);
      var a2 = this.subGraphs[0].nodes;
      a2.forEach(function(e3, t3) {
        i2(t3, 0, 0, e3.weight, { size: function() {
          return a2.length;
        } });
      }), this.levelsClusterTexture[0] = this.newTexture(t2, r2, ci);
    } else for (var u2 = function() {
      var o3 = e2.subGraphs[s2].nodes, a3 = s2 === e2.subGraphs.length - 1 ? [] : e2.subGraphs[s2 + 1].nodes;
      r2 = new Float32Array(262144), n2 = new Float32Array(65536);
      var u3 = 0;
      if (a3.length > 0) {
        var c3 = a3.slice();
        c3.sort(function(e3, t3) {
          return e3.previousIndex - t3.previousIndex;
        }), c3.forEach(function(e3, t3) {
          var r3 = u3, s3 = a3.indexOf(e3);
          i2(u3, s3, r3, o3[e3.id].weight, e3), n2[u3] = o3[u3].finestIndex, u3 += 1, e3.planets.forEach(function(t4) {
            i2(u3, s3, r3, t4.weight, e3), n2[u3] = o3[u3].finestIndex, u3 += 1, t4.moons.forEach(function(t5) {
              i2(u3, s3, r3, t5.weight, e3), n2[u3] = o3[u3].finestIndex, u3 += 1;
            });
          });
        });
      } else o3.forEach(function(e3, t3) {
        i2(t3, 0, 0, e3.weight, { size: function() {
          return o3.length;
        } }), n2[t3] = o3[t3].finestIndex;
      });
      var l3 = e2.newTexture(t2, null, ci), f3 = e2.newFramebuffer(t2, l3);
      e2.levelsData[s2] = { texture: l3, frameBuffer: f3 }, e2.levelsClusterTexture[s2] = e2.newTexture(t2, r2, ci), e2.levelsFinestIndexTexture[s2] = e2.newTexture(t2, n2, bn, t2.FLOAT, t2.ALPHA);
    }, s2 = this.subGraphs.length - 1; s2 >= 0; s2--) u2();
    for (var c2 = new Float32Array(262144), l2 = 0; l2 < c2.length; l2++) c2[l2] = 0;
    this.initalLevelTexture = this.newTexture(t2, c2, ci);
    var f2 = this.enableVerlet ? "precision mediump float;\nuniform sampler2D u_physData;\nuniform sampler2D u_clusterData;\nuniform sampler2D u_finestIndexes;\nuniform sampler2D u_prevForce;\n\nuniform float u_baseLength;\nuniform float u_numNodes;\nuniform float u_iterationMultiplier;\nuniform float u_isTopLevel;\n\nfloat PI = 3.1415926535897932384626433832795;\nfloat TIMESTEP = 1.0 / 30.0;\nfloat VELOCITYDECAY = 1.0;\n\nvec4 getTextureData(sampler2D texture, float index, float base) {\n  float x = mod(index, base);\n  float y = (index - x) / base;\n  return texture2D(texture, vec2(x + 0.5, y + 0.5) / base);\n}\n\nfloat getSquaredLogClusterWeight(float value) {\n  return pow(log(value), 2.0);\n}\n\nvoid main(void) {\n  float index = (gl_FragCoord.x - 0.5) + (gl_FragCoord.y - 0.5) * 256.0;\n\n  if (index >= u_numNodes) {\n    discard;\n  }\n\n  vec4 clusterData = getTextureData(u_clusterData, index, 256.0);\n\n  float clusterIndex = clusterData.x;\n  float clusterStartIndex = clusterData.y;\n  float clusterSize = clusterData.z;\n  float clusterArea = pow(clusterSize + u_baseLength * 2.0, 2.0);\n\n  float finestIndex = getTextureData(u_finestIndexes, index, 256.0).a;\n  vec4 myPosition = getTextureData(u_physData, finestIndex, 256.0);\n  vec4 previousForce = getTextureData(u_prevForce, clusterIndex, 256.0);\n  float fScale = 1.0 + sqrt(u_iterationMultiplier);\n\n  vec2 acceleration = previousForce.xy;\n\n  // Repulsion & Collision Detection\n  for (float i = 0.0; i < 256.0 * 256.0; i++) {\n    if (i >= clusterStartIndex + clusterSize || i >= u_numNodes) {\n      break;\n    }\n    if (i < clusterStartIndex || i == index) {\n      continue;\n    }\n\n    vec4 otherClusterData = getTextureData(u_clusterData, i, 256.0);\n    float otherClusterWeight = getSquaredLogClusterWeight(otherClusterData.w);\n\n    float otherFinestIndex = getTextureData(u_finestIndexes, i, 256.0).a;\n    vec4 otherPosition = getTextureData(u_physData, otherFinestIndex, 256.0);\n\n    vec2 delta = myPosition.xy - otherPosition.xy;\n    float dist = max(length(delta), 0.0000001);\n    float maxDist = 25.0;\n    float repulsionForceScale = 0.1;\n\n    float F = (clusterArea * fScale) / (dist * dist);\n\n    if (u_isTopLevel == 1.0) {\n      repulsionForceScale = 0.2;\n    }\n\n    acceleration += ((delta / sqrt(dist)) * F) * repulsionForceScale * otherClusterWeight;\n\n    if (dist < maxDist) {\n      float collide = (maxDist - dist) / (dist * dist);\n      acceleration += delta * collide * fScale * maxDist / (maxDist + 1.0);\n    }\n  }\n\n  gl_FragColor = vec4(acceleration, vec2(finestIndex, 0));\n}" : "precision mediump float;\nuniform sampler2D u_physData;\nuniform sampler2D u_clusterData;\nuniform sampler2D u_finestIndexes;\nuniform sampler2D u_prevForce;\n\nuniform float u_baseLength;\nuniform float u_numNodes;\nuniform float u_iterationMultiplier;\nuniform float u_isTopLevel;\n\nfloat TIMESTEP = 1.0 / 30.0;\nfloat VELOCITYDECAY = 0.6;\n\nvec4 getTextureData(sampler2D texture, float index, float base) {\n  float x = mod(index, base);\n  float y = (index - x) / base;\n  return texture2D(texture, vec2(x + 0.5, y + 0.5) / base);\n}\n\nfloat getLogClusterWeight(float value) {\n  return value / max(log(value), 1.0);\n}\n\nvoid main(void) {\n  float index = (gl_FragCoord.x - 0.5) + (gl_FragCoord.y - 0.5) * 256.0;\n\n  if (index >= u_numNodes) {\n    discard;\n  }\n\n  vec4 clusterData = getTextureData(u_clusterData, index, 256.0);\n\n  float clusterIndex = clusterData.x;\n  float clusterStartIndex = clusterData.y;\n  float clusterSize = clusterData.z;\n\n  float finestIndex = getTextureData(u_finestIndexes, index, 256.0).a;\n  vec4 myPosition = getTextureData(u_physData, finestIndex, 256.0);\n  vec4 previousForce = getTextureData(u_prevForce, clusterIndex, 256.0);\n  float fScale = 1.0 + sqrt(u_iterationMultiplier);\n\n  vec2 acceleration = previousForce.xy;\n\n  // Repulsion & Collision Detection\n  for (float i = 0.0; i < 256.0 * 256.0; i++) {\n    if (i >= clusterStartIndex + clusterSize || i >= u_numNodes) {\n      break;\n    }\n    if (i < clusterStartIndex || i == index) {\n      continue;\n    }\n\n    vec4 otherClusterData = getTextureData(u_clusterData, i, 256.0);\n    float otherClusterWeight = getLogClusterWeight(otherClusterData.w);\n\n    float otherFinestIndex = getTextureData(u_finestIndexes, i, 256.0).a;\n    vec4 otherPosition = getTextureData(u_physData, otherFinestIndex, 256.0);\n\n    vec2 delta = myPosition.xy - otherPosition.xy;\n    float dist = max(length(delta), 0.0000001);\n    float maxDist = 25.0;\n    float repulsionForceScale = 0.1;\n\n    float F = ((u_baseLength * u_baseLength) * (fScale / 1.5)) / dist;\n\n    if (u_isTopLevel == 1.0) {\n      repulsionForceScale = 0.3;\n    }\n\n    acceleration += ((delta / dist) * F) * repulsionForceScale * otherClusterWeight;\n\n    if (dist < maxDist) {\n      float collide = (maxDist - dist) / dist;\n      acceleration += delta * collide * fScale * maxDist / (maxDist + 1.0);\n    }\n  }\n\n  gl_FragColor = vec4(acceleration, vec2(finestIndex, 0));\n}";
    this.apprxRepForceShader = new Bo(t2, Ko, f2), this.apprxRepForceShader.use(), this.apprxRepForceShader.setUniform("u_projection", this.physSmallProjection);
  } }, { key: "setupPinData", value: function() {
    var e2 = this.gl;
    this.pinTexture = e2.createTexture(), this.pinData = new Uint8Array(65536);
    for (var t2 = 0; t2 < 65536; t2++) this.pinData[t2] = 0;
    e2.bindTexture(e2.TEXTURE_2D, this.pinTexture), e2.texImage2D(e2.TEXTURE_2D, 0, e2.ALPHA, bn, bn, 0, e2.ALPHA, e2.UNSIGNED_BYTE, this.pinData), e2.texParameteri(e2.TEXTURE_2D, e2.TEXTURE_MAG_FILTER, e2.NEAREST), e2.texParameteri(e2.TEXTURE_2D, e2.TEXTURE_MIN_FILTER, e2.NEAREST), e2.texParameteri(e2.TEXTURE_2D, e2.TEXTURE_WRAP_S, e2.CLAMP_TO_EDGE), e2.texParameteri(e2.TEXTURE_2D, e2.TEXTURE_WRAP_T, e2.CLAMP_TO_EDGE);
  } }, { key: "setupUpdates", value: function() {
    var e2 = this.gl;
    this.updateData = new Float32Array(65536), this.updateTexture = e2.createTexture(), e2.bindTexture(e2.TEXTURE_2D, this.updateTexture), e2.texImage2D(e2.TEXTURE_2D, 0, e2.ALPHA, bn, bn, 0, e2.ALPHA, e2.FLOAT, this.updateData), e2.texParameteri(e2.TEXTURE_2D, e2.TEXTURE_MAG_FILTER, e2.NEAREST), e2.texParameteri(e2.TEXTURE_2D, e2.TEXTURE_MIN_FILTER, e2.NEAREST), e2.texParameteri(e2.TEXTURE_2D, e2.TEXTURE_WRAP_S, e2.CLAMP_TO_EDGE), e2.texParameteri(e2.TEXTURE_2D, e2.TEXTURE_WRAP_T, e2.CLAMP_TO_EDGE), this.updateShader = new Bo(e2, Ko, "precision mediump float;\n\nuniform sampler2D u_physData;\nuniform sampler2D u_updateData;\nuniform float u_numNodesNew;\n\nconst float INDEX_FLAG = 999999.0;\n\nvec4 getTextureData(sampler2D texture, float index, float base) {\n  float x = mod(index, base);\n  float y = (index - x) / base;\n  return texture2D(texture, vec2(x + 0.5, y + 0.5) / base);\n}\n\nvoid main(void) {\n  float textureSide = 256.0; //#TEXTURE_SIDE#;\n  float index = (gl_FragCoord.x - 0.5) + (gl_FragCoord.y - 0.5)*textureSide;\n\n  if (index >= u_numNodesNew) {\n    discard;\n  }\n\n  float firstValue = getTextureData(u_updateData, index * 2.0, 256.0).a;\n  float secondValue = getTextureData(u_updateData, index * 2.0 + 1.0, 256.0).a;\n\n  if (secondValue == INDEX_FLAG) {\n    vec4 myPosition = getTextureData(u_physData, firstValue, 256.0);\n    gl_FragColor = myPosition;\n  } else {\n    gl_FragColor = vec4(firstValue, secondValue, 0.0, 0.0);\n  }\n}\n"), this.updateShader.use(), this.updateShader.setUniform("u_projection", this.physProjection);
  } }, { key: "setupReadpixelWorkaround", value: function() {
    var e2 = this.gl;
    this.workaroundShader = new Bo(e2, Ko, "precision lowp float;\n\nuniform sampler2D u_physData;\nuniform float u_index;\n\nfloat shift_right (float v, float amt) { \n    v = floor(v) + 0.5; \n    return floor(v / exp2(amt)); \n}\n\nfloat shift_left (float v, float amt) { \n    return floor(v * exp2(amt) + 0.5); \n}\n\nfloat mask_last (float v, float bits) { \n    return mod(v, shift_left(1.0, bits)); \n}\n\nfloat extract_bits (float num, float from, float to) { \n    from = floor(from + 0.5); to = floor(to + 0.5); \n    return mask_last(shift_right(num, from), to - from); \n}\n\n// From https://stackoverflow.com/questions/17981163/webgl-read-pixels-from-floating-point-render-target\nvec4 encode_float (float val) { \n    if (val == 0.0) return vec4(0, 0, 0, 0); \n    float sign = val > 0.0 ? 0.0 : 1.0; \n    val = abs(val); \n    float exponent = floor(log2(val)); \n    float biased_exponent = exponent + 127.0; \n    float fraction = ((val / exp2(exponent)) - 1.0) * 8388608.0; \n    float t = biased_exponent / 2.0; \n    float last_bit_of_biased_exponent = fract(t) * 2.0; \n    float remaining_bits_of_biased_exponent = floor(t); \n    float byte4 = extract_bits(fraction, 0.0, 8.0) / 255.0; \n    float byte3 = extract_bits(fraction, 8.0, 16.0) / 255.0; \n    float byte2 = (last_bit_of_biased_exponent * 128.0 + extract_bits(fraction, 16.0, 23.0)) / 255.0; \n    float byte1 = (sign * 128.0 + remaining_bits_of_biased_exponent) / 255.0; \n    return vec4(byte4, byte3, byte2, byte1); \n}\n\nvoid main(void) {\n  vec4 texData = texture2D(u_physData, gl_FragCoord.xy / 255.0);\n  float data;\n  if (u_index == 0.0) {\n    data = texData.x;\n  } else if (u_index == 1.0) {\n    data = texData.y;\n  } else if (u_index == 2.0) {\n    data = texData.z;\n  } else if (u_index == 3.0) {\n    data = texData.w;\n  }\n\n  gl_FragColor = encode_float(data);\n}\n"), this.workaroundShader.use(), this.workaroundShader.setUniform("u_projection", this.physProjection), this.workaroundData = [];
    for (var t2 = 0; t2 < 4; t2++) {
      var r2 = new Uint8Array(262144), n2 = this.newTexture(e2, null, bn, e2.UNSIGNED_BYTE), o2 = this.newFramebuffer(e2, n2);
      this.workaroundData.push({ dataByte: r2, dataFloat: new Float32Array(r2.buffer), texture: n2, frameBuffer: o2 });
    }
  } }, { key: "doReadpixelWorkaround", value: function() {
    for (var e2 = this.gl, t2 = 0; t2 < 4; t2++) {
      var r2 = this.workaroundData[t2];
      e2.bindFramebuffer(e2.FRAMEBUFFER, r2.frameBuffer), e2.viewport(0, 0, bn, bn), this.workaroundShader.use(), this.workaroundShader.setUniform("u_index", t2), this.workaroundShader.setUniform("u_physData", this.getPhysData(0).texture), e2.bindBuffer(e2.ARRAY_BUFFER, this.physVbo), this.workaroundShader.setAttributePointer("a_position", 2, 0, 2), e2.drawArrays(e2.TRIANGLE_STRIP, 0, 4), e2.readPixels(0, 0, bn, bn, e2.RGBA, e2.UNSIGNED_BYTE, r2.dataByte);
    }
  } }, { key: "definePhysicsArrays", value: function() {
    this.physData = [], this.levelsData = [], this.levelsClusterTexture = [], this.levelsFinestIndexTexture = [];
  } }], t && oi(e.prototype, t), Object.defineProperty(e, "prototype", { writable: false }), e;
  var e, t;
}();
function hi(e) {
  return hi = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, hi(e);
}
function di(e) {
  return function(e2) {
    if (Array.isArray(e2)) return pi(e2);
  }(e) || function(e2) {
    if ("undefined" != typeof Symbol && null != e2[Symbol.iterator] || null != e2["@@iterator"]) return Array.from(e2);
  }(e) || function(e2, t) {
    if (e2) {
      if ("string" == typeof e2) return pi(e2, t);
      var r2 = {}.toString.call(e2).slice(8, -1);
      return "Object" === r2 && e2.constructor && (r2 = e2.constructor.name), "Map" === r2 || "Set" === r2 ? Array.from(e2) : "Arguments" === r2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r2) ? pi(e2, t) : void 0;
    }
  }(e) || function() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }();
}
function pi(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var r2 = 0, n2 = Array(t); r2 < t; r2++) n2[r2] = e[r2];
  return n2;
}
function vi(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, bi(n2.key), n2);
  }
}
function yi(e, t, r2) {
  return (t = bi(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
function bi(e) {
  var t = function(e2) {
    if ("object" != hi(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != hi(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == hi(t) ? t : t + "";
}
var mi = "ForceCytoLayout";
var gi = "forceDirected";
var _i = "coseBilkent";
var wi = function() {
  return e = function e2(t2) {
    var r2 = this;
    !function(e3, t3) {
      if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    }(this, e2), yi(this, "physLayout", void 0), yi(this, "coseBilkentLayout", void 0), yi(this, "state", void 0), yi(this, "currentLayoutType", void 0), yi(this, "enableCytoscape", void 0), yi(this, "currentLayout", void 0);
    var n2 = t2.state, o2 = t2.enableCytoscape;
    this.enableCytoscape = null == o2 || o2, this.physLayout = new fi(t2), this.coseBilkentLayout = new Ao({ state: n2, cytoCompleteCallback: function() {
      for (r2.physLayout.update(true), r2.copyLayoutPositions(r2.state.nodes.items, r2.coseBilkentLayout, r2.physLayout); r2.physLayout.update(false); ) ;
      r2.copyLayoutPositions(r2.state.nodes.items, r2.physLayout, r2.coseBilkentLayout);
    }, animationCompleteCallback: function() {
      r2.currentLayoutType === _i && setTimeout(function() {
        return r2.setLayout(gi);
      }, 50);
    } }), this.currentLayout = this.physLayout, this.currentLayoutType = gi;
    var i2 = n2.nodes, a2 = n2.rels;
    i2.addChannel(mi), a2.addChannel(mi), this.state = n2;
  }, t = [{ key: "setOptions", value: function(e2) {
    void 0 !== e2 && (this.currentLayout.setOptions(e2), this.enableCytoscape = e2.enableCytoscape);
  } }, { key: "getLayout", value: function(e2) {
    return e2 === _i ? this.coseBilkentLayout : this.physLayout;
  } }, { key: "setLayout", value: function(e2) {
    if (e2 !== this.currentLayoutType) {
      eo.info("Switching to layout: ".concat(e2, " in ForceCyto"));
      var t2 = this.getLayout(e2);
      this.currentLayout = t2, this.currentLayoutType = e2;
    }
  } }, { key: "copyLayoutPositions", value: function(e2, t2, r2) {
    var n2 = t2.getNodePositions(e2);
    r2.updateNodes(n2);
  } }, { key: "update", value: function() {
    var e2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], t2 = this.state, r2 = t2.nodes, n2 = t2.rels, o2 = r2.channels[mi], i2 = n2.channels[mi], a2 = Object.values(o2.adds).length, u2 = Object.values(i2.adds).length, s2 = Object.values(o2.adds).map(function(e3) {
      return e3.id;
    }), c2 = Object.values(i2.adds).map(function(e3) {
      return e3.id;
    }), l2 = new Set(Object.keys(o2.adds)), f2 = new Set(Object.keys(i2.adds));
    if (r2.clearChannel(mi), n2.clearChannel(mi), this.currentLayoutType === gi && this.enableCytoscape && r2.items.length <= 100 && a2 < 100 && a2 > 0 && u2 > 0) {
      var h2 = r2.items.map(function(e3) {
        return e3.id;
      }), d2 = new Set([].concat(di(h2), di(s2))), p3 = n2.items.map(function(e3) {
        return e3.id;
      }), v3 = new Set([].concat(di(p3), di(c2)));
      if (d2.size <= 100 && v3.size <= 300) {
        var y3 = function(e3, t3, r3, n3) {
          var o3, i3 = new Set(e3), a3 = kn(new Set(t3));
          try {
            for (a3.s(); !(o3 = a3.n()).done; ) {
              var u3 = o3.value, s3 = n3.idToItem[u3];
              if (s3) {
                var c3 = s3.from, l3 = s3.to;
                i3.add(c3), i3.add(l3);
              }
            }
          } catch (e4) {
            a3.e(e4);
          } finally {
            a3.f();
          }
          var f3, h3 = function(e4) {
            var t4, r4 = {}, n4 = {}, o4 = kn(e4);
            try {
              for (o4.s(); !(t4 = o4.n()).done; ) {
                for (var i4 = t4.value, a4 = i4.from, u4 = i4.to, s4 = "".concat(a4, "-").concat(u4), c4 = "".concat(u4, "-").concat(a4), l4 = 0, f4 = [s4, c4]; l4 < f4.length; l4++) {
                  var h4 = f4[l4];
                  void 0 !== n4[h4] ? n4[h4].push(i4) : n4[h4] = [i4];
                }
                r4[a4] || (r4[a4] = /* @__PURE__ */ new Set()), r4[u4] || (r4[u4] = /* @__PURE__ */ new Set()), r4[a4].add(u4), r4[u4].add(a4);
              }
            } catch (e5) {
              o4.e(e5);
            } finally {
              o4.f();
            }
            return { adjNodesMap: r4, relMap: n4 };
          }(n3.items), d3 = h3.adjNodesMap, p4 = h3.relMap, v5 = {}, y4 = {}, b3 = function(e4) {
            var t4 = [];
            for (v5[e4] || t4.push(e4); t4.length > 0; ) {
              var n4 = t4.shift();
              if (v5[n4] = r3.idToItem[n4], void 0 !== d3[n4]) {
                var o4, i4 = kn(d3[n4]);
                try {
                  for (i4.s(); !(o4 = i4.n()).done; ) {
                    var a4 = o4.value;
                    if (!v5[a4]) {
                      t4.push(a4);
                      var u4 = p4["".concat(n4, "-").concat(a4)];
                      if (u4) {
                        var s4, c4 = kn(u4);
                        try {
                          for (c4.s(); !(s4 = c4.n()).done; ) {
                            var l4 = s4.value;
                            y4[l4.id] || (y4[l4.id] = l4);
                          }
                        } catch (e5) {
                          c4.e(e5);
                        } finally {
                          c4.f();
                        }
                      }
                    }
                  }
                } catch (e5) {
                  i4.e(e5);
                } finally {
                  i4.f();
                }
              }
            }
          }, m3 = kn(i3);
          try {
            for (m3.s(); !(f3 = m3.n()).done; ) b3(f3.value);
          } catch (e4) {
            m3.e(e4);
          } finally {
            m3.f();
          }
          return { connectedNodes: v5, connectedRels: y4 };
        }(l2, f2, r2, n2), b2 = y3.connectedNodes, m2 = y3.connectedRels, g2 = Object.values(b2), _2 = Object.values(m2), w2 = g2.length, O2 = _2.length;
        w2 === l2.size && O2 === f2.size && (f2.size > 0 || l2.size > 0) ? (this.setLayout(_i), this.coseBilkentLayout.update(true, r2.items, n2.items)) : O2 > 0 && f2.size / O2 > 0.25 && (this.setLayout(_i), this.coseBilkentLayout.update(true, g2, _2));
      }
    }
    this.physLayout.update(e2), this.coseBilkentLayout.update(e2);
  } }, { key: "getShouldUpdate", value: function() {
    return this.currentLayout.getShouldUpdate();
  } }, { key: "getComputing", value: function() {
    return this.currentLayout.getComputing();
  } }, { key: "updateNodes", value: function(e2) {
    this.setLayout(gi), this.physLayout.updateNodes(e2);
  } }, { key: "getNodePositions", value: function(e2) {
    return this.currentLayout.getNodePositions(e2);
  } }, { key: "terminateUpdate", value: function() {
    this.physLayout.terminateUpdate(), this.coseBilkentLayout.terminateUpdate();
  } }, { key: "destroy", value: function() {
    this.physLayout.destroy(), this.coseBilkentLayout.destroy();
  } }], t && vi(e.prototype, t), Object.defineProperty(e, "prototype", { writable: false }), e;
  var e, t;
}();
function Oi(e) {
  return Oi = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, Oi(e);
}
function Si(e, t) {
  var r2 = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e);
    t && (n2 = n2.filter(function(t2) {
      return Object.getOwnPropertyDescriptor(e, t2).enumerable;
    })), r2.push.apply(r2, n2);
  }
  return r2;
}
function Ei(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r2 = null != arguments[t] ? arguments[t] : {};
    t % 2 ? Si(Object(r2), true).forEach(function(t2) {
      Ci(e, t2, r2[t2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r2)) : Si(Object(r2)).forEach(function(t2) {
      Object.defineProperty(e, t2, Object.getOwnPropertyDescriptor(r2, t2));
    });
  }
  return e;
}
function Pi(e, t) {
  var r2 = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
  if (!r2) {
    if (Array.isArray(e) || (r2 = function(e2, t2) {
      if (e2) {
        if ("string" == typeof e2) return Ti(e2, t2);
        var r3 = {}.toString.call(e2).slice(8, -1);
        return "Object" === r3 && e2.constructor && (r3 = e2.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(e2) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? Ti(e2, t2) : void 0;
      }
    }(e)) || t && e && "number" == typeof e.length) {
      r2 && (e = r2);
      var n2 = 0, o2 = function() {
      };
      return { s: o2, n: function() {
        return n2 >= e.length ? { done: true } : { done: false, value: e[n2++] };
      }, e: function(e2) {
        throw e2;
      }, f: o2 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var i2, a2 = true, u2 = false;
  return { s: function() {
    r2 = r2.call(e);
  }, n: function() {
    var e2 = r2.next();
    return a2 = e2.done, e2;
  }, e: function(e2) {
    u2 = true, i2 = e2;
  }, f: function() {
    try {
      a2 || null == r2.return || r2.return();
    } finally {
      if (u2) throw i2;
    }
  } };
}
function Ti(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var r2 = 0, n2 = Array(t); r2 < t; r2++) n2[r2] = e[r2];
  return n2;
}
function xi(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, ji(n2.key), n2);
  }
}
function Ci(e, t, r2) {
  return (t = ji(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
function ji(e) {
  var t = function(e2) {
    if ("object" != Oi(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != Oi(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == Oi(t) ? t : t + "";
}
var Ai = "FreeLayout";
var ki = function() {
  return e = function e2(t2) {
    var r2 = this;
    !function(e3, t3) {
      if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    }(this, e2), Ci(this, "state", void 0), Ci(this, "positions", void 0), Ci(this, "shouldUpdate", void 0), Ci(this, "stateDisposers", void 0);
    var n2 = t2.state;
    this.state = n2, this.positions = {}, this.stateDisposers = [], this.stateDisposers.push(this.state.reaction(function() {
      return r2.state.graphUpdates;
    }, function() {
      void 0 !== r2.state.nodes.version && (r2.shouldUpdate = true), void 0 !== r2.state.rels.version && (r2.shouldUpdate = true);
    }));
    var o2 = this.state, i2 = o2.nodes, a2 = o2.rels;
    i2.addChannel(Ai), a2.addChannel(Ai), this.shouldUpdate = true, this.setOptions(), this.layout(i2.items, i2.idToItem, i2.idToPosition);
  }, t = [{ key: "setOptions", value: function() {
  } }, { key: "updateNodes", value: function(e2) {
    var t2, r2 = Pi(e2);
    try {
      for (r2.s(); !(t2 = r2.n()).done; ) {
        var n2 = t2.value;
        void 0 !== n2.x && void 0 !== n2.y && (this.positions[n2.id] = { x: n2.x, y: n2.y }), this.shouldUpdate = true;
      }
    } catch (e3) {
      r2.e(e3);
    } finally {
      r2.f();
    }
  } }, { key: "update", value: function() {
    var e2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
    if (this.shouldUpdate || e2) {
      var t2 = this.state, r2 = t2.nodes, n2 = t2.rels, o2 = Object.values(r2.channels[Ai].adds).length > 0, i2 = Object.values(n2.channels[Ai].adds).length > 0, a2 = Object.values(r2.channels[Ai].removes).length > 0, u2 = Object.values(n2.channels[Ai].removes).length > 0;
      (o2 || i2 || a2 || u2) && this.layout(r2.items, r2.idToItem, r2.idToPosition), r2.clearChannel(Ai), n2.clearChannel(Ai);
    }
    this.shouldUpdate = false;
  } }, { key: "layout", value: function(e2, t2, r2) {
    var n2, o2 = void 0 !== (n2 = e2) ? vr(n2) : n2;
    if (!(0, i.isEmpty)(o2)) {
      for (var a2 = {}, u2 = 0; u2 < o2.length; ++u2) {
        var s2, c2 = o2[u2].id, l2 = null !== (s2 = r2[c2]) && void 0 !== s2 ? s2 : {}, f2 = l2.x, h2 = void 0 === f2 ? 0 : f2, d2 = l2.y, p3 = void 0 === d2 ? 0 : d2;
        a2[c2] = { id: c2, x: h2, y: p3 };
      }
      this.positions = a2, this.shouldUpdate = false;
    }
  } }, { key: "setNodePositions", value: function(e2) {
    this.positions = e2;
  } }, { key: "getNodePositions", value: function(e2) {
    var t2, r2 = [], n2 = Pi(e2);
    try {
      for (n2.s(); !(t2 = n2.n()).done; ) {
        var o2 = t2.value, i2 = this.positions[o2.id], a2 = Ei({ id: o2.id }, i2);
        r2.push(a2);
      }
    } catch (e3) {
      n2.e(e3);
    } finally {
      n2.f();
    }
    return r2;
  } }, { key: "getShouldUpdate", value: function() {
    return this.shouldUpdate;
  } }, { key: "getComputing", value: function() {
    return false;
  } }, { key: "terminateUpdate", value: function() {
  } }, { key: "destroy", value: function() {
    this.state.nodes.removeChannel(Ai), this.state.rels.removeChannel(Ai);
  } }], t && xi(e.prototype, t), Object.defineProperty(e, "prototype", { writable: false }), e;
  var e, t;
}();
function Ri(e) {
  return Ri = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, Ri(e);
}
function Ii(e, t) {
  var r2 = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e);
    t && (n2 = n2.filter(function(t2) {
      return Object.getOwnPropertyDescriptor(e, t2).enumerable;
    })), r2.push.apply(r2, n2);
  }
  return r2;
}
function Mi(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r2 = null != arguments[t] ? arguments[t] : {};
    t % 2 ? Ii(Object(r2), true).forEach(function(t2) {
      Ni(e, t2, r2[t2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r2)) : Ii(Object(r2)).forEach(function(t2) {
      Object.defineProperty(e, t2, Object.getOwnPropertyDescriptor(r2, t2));
    });
  }
  return e;
}
function Ni(e, t, r2) {
  return (t = Fi(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
function Di(e, t) {
  var r2 = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
  if (!r2) {
    if (Array.isArray(e) || (r2 = function(e2, t2) {
      if (e2) {
        if ("string" == typeof e2) return Li(e2, t2);
        var r3 = {}.toString.call(e2).slice(8, -1);
        return "Object" === r3 && e2.constructor && (r3 = e2.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(e2) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? Li(e2, t2) : void 0;
      }
    }(e)) || t && e && "number" == typeof e.length) {
      r2 && (e = r2);
      var n2 = 0, o2 = function() {
      };
      return { s: o2, n: function() {
        return n2 >= e.length ? { done: true } : { done: false, value: e[n2++] };
      }, e: function(e2) {
        throw e2;
      }, f: o2 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var i2, a2 = true, u2 = false;
  return { s: function() {
    r2 = r2.call(e);
  }, n: function() {
    var e2 = r2.next();
    return a2 = e2.done, e2;
  }, e: function(e2) {
    u2 = true, i2 = e2;
  }, f: function() {
    try {
      a2 || null == r2.return || r2.return();
    } finally {
      if (u2) throw i2;
    }
  } };
}
function Li(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var r2 = 0, n2 = Array(t); r2 < t; r2++) n2[r2] = e[r2];
  return n2;
}
function Ui(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, Fi(n2.key), n2);
  }
}
function Fi(e) {
  var t = function(e2) {
    if ("object" != Ri(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != Ri(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == Ri(t) ? t : t + "";
}
var Bi = "GridLayout";
var zi = function() {
  return e = function e2(t2) {
    var r2 = this;
    !function(e3, t3) {
      if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    }(this, e2);
    var n2 = t2.state;
    this.state = n2, this.positions = {}, this.stateDisposers = [], this.stateDisposers.push(this.state.reaction(function() {
      return r2.state.graphUpdates;
    }, function() {
      void 0 !== r2.state.nodes.version && (r2.shouldUpdate = true), void 0 !== r2.state.rels.version && (r2.shouldUpdate = true);
    }));
    var o2 = this.state, i2 = o2.nodes, a2 = o2.rels;
    i2.addChannel(Bi), a2.addChannel(Bi), this.shouldUpdate = true, this.setOptions(t2), this.layout(i2.items, i2.idToItem, i2.idToPosition, a2.items);
  }, t = [{ key: "setOptions", value: function(e2) {
  } }, { key: "updateNodes", value: function(e2) {
    var t2, r2 = Di(e2);
    try {
      for (r2.s(); !(t2 = r2.n()).done; ) {
        var n2 = t2.value;
        void 0 !== n2.x && void 0 !== n2.y && (this.positions[n2.id] = { x: n2.x, y: n2.y }), this.shouldUpdate = true;
      }
    } catch (e3) {
      r2.e(e3);
    } finally {
      r2.f();
    }
  } }, { key: "update", value: function() {
    var e2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
    if (this.shouldUpdate || e2) {
      var t2 = this.state, r2 = t2.nodes, n2 = t2.rels, o2 = Object.values(r2.channels[Bi].adds).length > 0, i2 = Object.values(n2.channels[Bi].adds).length > 0, a2 = Object.values(r2.channels[Bi].removes).length > 0, u2 = Object.values(n2.channels[Bi].removes).length > 0;
      (o2 || i2 || a2 || u2) && (this.layout(r2.items, r2.idToItem, r2.idToPosition, n2.items), r2.idToPosition = this.positions), r2.clearChannel(Bi), n2.clearChannel(Bi);
    }
    this.shouldUpdate = false;
  } }, { key: "layout", value: function(e2, t2, r2, n2) {
    var o2, a2 = (o2 = e2) ? vr(o2) : o2;
    if (!(0, i.isEmpty)(a2)) {
      for (var u2 = a2.length, s2 = Math.ceil(Math.sqrt(u2)), c2 = new Array(u2), l2 = 0, f2 = 0; f2 < s2; ++f2) {
        for (var h2 = 0; h2 < s2 && (c2[l2] = { y: 0 + 150 * f2, x: 0 + 150 * h2 }, (l2 += 1) !== u2); ++h2) ;
        if (l2 === u2) break;
      }
      for (var d2 = a2.sort(), p3 = {}, v3 = 0; v3 < u2; ++v3) {
        var y3 = d2[v3], b2 = c2[v3];
        y3.x === b2.x && y3.y === b2.y || (p3[y3.id] = Mi({ id: y3.id }, b2));
      }
      this.positions = p3, this.shouldUpdate = false;
    }
  } }, { key: "getNodePositions", value: function(e2) {
    var t2, r2 = [], n2 = Di(e2);
    try {
      for (n2.s(); !(t2 = n2.n()).done; ) {
        var o2 = t2.value, i2 = this.positions[o2.id], a2 = Mi({ id: o2.id }, i2);
        r2.push(a2);
      }
    } catch (e3) {
      n2.e(e3);
    } finally {
      n2.f();
    }
    return r2;
  } }, { key: "getShouldUpdate", value: function() {
    return this.shouldUpdate;
  } }, { key: "getComputing", value: function() {
    return false;
  } }, { key: "terminateUpdate", value: function() {
    this.shouldUpdate = false;
  } }, { key: "destroy", value: function() {
    this.state.nodes.removeChannel(Bi), this.state.rels.removeChannel(Bi);
  } }], t && Ui(e.prototype, t), Object.defineProperty(e, "prototype", { writable: false }), e;
  var e, t;
}();
var Vi = /* @__PURE__ */ new Set(["direction", "packing"]);
var Wi = "forceDirected";
var qi = "hierarchical";
var Gi = "grid";
var Hi = "free";
var Yi = "d3Force";
var Xi = "canvas";
function Ki(e) {
  return Ki = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, Ki(e);
}
function Zi(e, t, r2) {
  return (t = function(e2) {
    var t2 = function(e3) {
      if ("object" != Ki(e3) || !e3) return e3;
      var t3 = e3[Symbol.toPrimitive];
      if (void 0 !== t3) {
        var r3 = t3.call(e3, "string");
        if ("object" != Ki(r3)) return r3;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return String(e3);
    }(e2);
    return "symbol" == Ki(t2) ? t2 : t2 + "";
  }(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
var $i = "down";
var Qi = Zi(Zi(Zi(Zi({}, "up", "BT"), $i, "TB"), "left", "RL"), "right", "LR");
var Ji = "bin";
var ea = [Ji, "stack"];
var ta = ["html"];
var ra = ["html"];
var na = ["captionHtml"];
function oa(e) {
  return oa = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, oa(e);
}
function ia(e, t) {
  if (null == e) return {};
  var r2, n2, o2 = function(e2, t2) {
    if (null == e2) return {};
    var r3 = {};
    for (var n3 in e2) if ({}.hasOwnProperty.call(e2, n3)) {
      if (-1 !== t2.indexOf(n3)) continue;
      r3[n3] = e2[n3];
    }
    return r3;
  }(e, t);
  if (Object.getOwnPropertySymbols) {
    var i2 = Object.getOwnPropertySymbols(e);
    for (n2 = 0; n2 < i2.length; n2++) r2 = i2[n2], -1 === t.indexOf(r2) && {}.propertyIsEnumerable.call(e, r2) && (o2[r2] = e[r2]);
  }
  return o2;
}
function aa(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, ha(n2.key), n2);
  }
}
function ua() {
  try {
    var e = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (e2) {
  }
  return (ua = function() {
    return !!e;
  })();
}
function sa() {
  return sa = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function(e, t, r2) {
    var n2 = function(e2, t2) {
      for (; !{}.hasOwnProperty.call(e2, t2) && null !== (e2 = ca(e2)); ) ;
      return e2;
    }(e, t);
    if (n2) {
      var o2 = Object.getOwnPropertyDescriptor(n2, t);
      return o2.get ? o2.get.call(arguments.length < 3 ? e : r2) : o2.value;
    }
  }, sa.apply(null, arguments);
}
function ca(e) {
  return ca = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e2) {
    return e2.__proto__ || Object.getPrototypeOf(e2);
  }, ca(e);
}
function la(e, t) {
  return la = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e2, t2) {
    return e2.__proto__ = t2, e2;
  }, la(e, t);
}
function fa(e, t, r2) {
  return (t = ha(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
function ha(e) {
  var t = function(e2) {
    if ("object" != oa(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != oa(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == oa(t) ? t : t + "";
}
var da = "HierarchicalLayout";
var pa = function(e) {
  return void 0 !== e ? vr(e) : e;
};
var va = function() {
  function e(t2) {
    var r3;
    !function(e2, t3) {
      if (!(e2 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    }(this, e), fa(r3 = function(e2, t3, r4) {
      return t3 = ca(t3), function(e3, t4) {
        if (t4 && ("object" == oa(t4) || "function" == typeof t4)) return t4;
        if (void 0 !== t4) throw new TypeError("Derived constructors may only return object or undefined");
        return function(e4) {
          if (void 0 === e4) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return e4;
        }(e3);
      }(e2, ua() ? Reflect.construct(t3, r4 || [], ca(e2).constructor) : t3.apply(e2, r4));
    }(this, e, [t2]), "direction", void 0), fa(r3, "packing", void 0), fa(r3, "stateDisposers", void 0), fa(r3, "oldComputing", void 0), fa(r3, "computing", void 0), fa(r3, "pendingLayoutData", void 0), fa(r3, "worker", void 0), fa(r3, "directionChanged", void 0), fa(r3, "packingChanged", void 0), fa(r3, "workersDisabled", void 0), r3.direction = $i, r3.packing = Ji;
    var n2 = r3.state, o2 = n2.nodes, i2 = n2.rels;
    return o2.addChannel(da), i2.addChannel(da), r3.stateDisposers = [r3.state.reaction(function() {
      return r3.state.graphUpdates;
    }, function() {
      if (void 0 !== o2.version) {
        var e2 = o2.channels[da], t3 = Object.values(e2.adds).length > 0, n3 = Object.values(e2.removes).length > 0, a2 = Object.values(e2.updates), u2 = Dn(a2);
        r3.shouldUpdate = r3.shouldUpdate || t3 || n3 || u2;
      }
      if (void 0 !== i2.version) {
        var s2 = i2.channels[da], c2 = Object.values(s2.adds).length > 0, l2 = Object.values(s2.removes).length > 0;
        r3.shouldUpdate = r3.shouldUpdate || c2 || l2;
      }
    })], r3.shouldUpdate = true, r3.oldComputing = false, r3.computing = false, r3.workersDisabled = t2.state.disableWebWorkers, r3.setOptions(t2), r3.worker = no("HierarchicalLayout", r3.workersDisabled), r3.pendingLayoutData = null, r3.layout(o2.items, o2.idToItem, o2.idToPosition, i2.items), r3;
  }
  return function(e2, t2) {
    if ("function" != typeof t2 && null !== t2) throw new TypeError("Super expression must either be null or a function");
    e2.prototype = Object.create(t2 && t2.prototype, { constructor: { value: e2, writable: true, configurable: true } }), Object.defineProperty(e2, "prototype", { writable: false }), t2 && la(e2, t2);
  }(e, po), t = e, r2 = [{ key: "setOptions", value: function(e2) {
    if (void 0 !== e2 && function(e3) {
      return Object.keys(e3).every(function(e4) {
        return Vi.has(e4);
      });
    }(e2)) {
      var t2 = e2.direction, r3 = void 0 === t2 ? $i : t2, n2 = e2.packing, o2 = void 0 === n2 ? Ji : n2;
      Object.keys(Qi).includes(r3) && (this.directionChanged = this.direction && this.direction !== r3, this.direction = r3), ea.includes(o2) && (this.packingChanged = this.packing && this.packing !== o2, this.packing = o2), this.shouldUpdate = this.shouldUpdate || this.directionChanged || this.packingChanged;
    }
  } }, { key: "update", value: function() {
    var t2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
    if (this.shouldUpdate || t2) {
      var r3 = this.state, n2 = r3.nodes, o2 = r3.rels, i2 = this.directionChanged, a2 = this.packingChanged, u2 = Object.values(n2.channels[da].adds).length > 0, s2 = Object.values(o2.channels[da].adds).length > 0, c2 = Object.values(n2.channels[da].removes).length > 0, l2 = Object.values(o2.channels[da].removes).length > 0, f2 = Object.values(n2.channels[da].updates), h2 = Dn(f2);
      (t2 || u2 || s2 || c2 || l2 || i2 || a2 || h2) && this.layout(n2.items, n2.idToItem, n2.idToPosition, o2.items), n2.clearChannel(da), o2.clearChannel(da), this.directionChanged = false, this.packingChanged = false;
    }
    !function(e2, t3, r4) {
      var n3 = sa(ca(e2.prototype), "update", r4);
      return "function" == typeof n3 ? function(e3) {
        return n3.apply(r4, e3);
      } : n3;
    }(e, 0, this)([]), this.shouldUpdate = false, this.oldComputing = this.computing;
  } }, { key: "getShouldUpdate", value: function() {
    return this.shouldUpdate || this.shouldUpdateAnimator;
  } }, { key: "getComputing", value: function() {
    return this.computing;
  } }, { key: "layout", value: function(e2, t2, r3, n2) {
    var o2 = this;
    if (this.worker) {
      var i2 = pa(e2).map(function(e3) {
        return e3.html, ia(e3, ta);
      }), a2 = pa(t2), u2 = {};
      Object.keys(a2).forEach(function(e3) {
        var t3 = a2[e3], r4 = (t3.html, ia(t3, ra));
        u2[e3] = r4;
      });
      var s2 = pa(n2).map(function(e3) {
        return e3.captionHtml, ia(e3, na);
      }), c2 = pa(r3), l2 = this.direction, f2 = this.packing, h2 = window.devicePixelRatio, d2 = { nodes: i2, nodeIds: u2, idToPosition: c2, rels: s2, direction: l2, packing: f2, pixelRatio: h2, forcedDelay: 0 };
      this.computing ? this.pendingLayoutData = d2 : (this.worker.port.onmessage = function(e3) {
        var t3 = e3.data, r4 = t3.positions, n3 = t3.parents, i3 = t3.waypoints;
        o2.computing && (o2.positions = r4), o2.parents = n3, o2.state.setWaypoints(i3), null !== o2.pendingLayoutData ? (o2.worker.port.postMessage(o2.pendingLayoutData), o2.pendingLayoutData = null) : o2.computing = false, o2.shouldUpdate = true, o2.startAnimation();
      }, this.computing = true, this.worker.port.postMessage(d2));
    } else eo.info("Hierarchical layout code not yet initialised.");
  } }, { key: "terminateUpdate", value: function() {
    var e2, t2;
    this.computing = false, this.shouldUpdate = false, null === (e2 = this.state.nodes) || void 0 === e2 || e2.clearChannel(da), null === (t2 = this.state.rels) || void 0 === t2 || t2.clearChannel(da);
  } }, { key: "destroy", value: function() {
    var e2;
    this.stateDisposers.forEach(function(e3) {
      e3();
    }), this.state.nodes.removeChannel(da), this.state.rels.removeChannel(da), null === (e2 = this.worker) || void 0 === e2 || e2.port.close();
  } }], r2 && aa(t.prototype, r2), Object.defineProperty(t, "prototype", { writable: false }), t;
  var t, r2;
}();
function ya(e) {
  return ya = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, ya(e);
}
function ba(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, ga(n2.key), n2);
  }
}
function ma(e, t, r2) {
  return (t = ga(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
function ga(e) {
  var t = function(e2) {
    if ("object" != ya(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != ya(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == ya(t) ? t : t + "";
}
var _a2 = function() {
  return e = function e2(t2, r2) {
    !function(e3, t3) {
      if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    }(this, e2), ma(this, "elementId", void 0), ma(this, "currentValue", void 0), ma(this, "startValue", void 0), ma(this, "currentTime", void 0), ma(this, "duration", void 0), ma(this, "status", void 0), ma(this, "endValue", void 0), ma(this, "startTime", void 0), ma(this, "endTime", void 0), ma(this, "hasNextAnimation", void 0), this.elementId = t2, this.startValue = r2, this.status = 0, this.currentValue = r2, this.duration = 0;
  }, (t = [{ key: "setDuration", value: function(e2) {
    this.duration = e2, this.setEndTime(this.startTime + this.duration);
  } }, { key: "getStatus", value: function() {
    return this.status;
  } }, { key: "advance", value: function() {
    if (1 !== this.status) return false;
    this.currentTime = (/* @__PURE__ */ new Date()).getTime();
    var e2, t2 = this.endTime - this.startTime;
    return (e2 = t2 > 0 ? (this.currentTime - this.startTime) / t2 : 1) >= 1 ? (this.currentValue = this.endValue, this.status = 2) : (this.currentValue = this.startValue + e2 * (this.endValue - this.startValue), this.hasNextAnimation = true), this.hasNextAnimation;
  } }, { key: "setEndValue", value: function(e2) {
    this.endValue !== e2 && (e2 - this.currentValue !== 0 ? (this.currentTime = (/* @__PURE__ */ new Date()).getTime(), this.status = 1, this.startValue = this.currentValue, this.endValue = e2, this.startTime = this.currentTime, this.setEndTime(this.startTime + this.duration)) : this.endValue = e2);
  } }, { key: "setEndTime", value: function(e2) {
    this.endTime = Math.max(e2, this.startTime);
  } }]) && ba(e.prototype, t), Object.defineProperty(e, "prototype", { writable: false }), e;
  var e, t;
}();
function wa(e) {
  return wa = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, wa(e);
}
function Oa(e, t) {
  var r2 = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e);
    t && (n2 = n2.filter(function(t2) {
      return Object.getOwnPropertyDescriptor(e, t2).enumerable;
    })), r2.push.apply(r2, n2);
  }
  return r2;
}
function Sa(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r2 = null != arguments[t] ? arguments[t] : {};
    t % 2 ? Oa(Object(r2), true).forEach(function(t2) {
      Pa(e, t2, r2[t2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r2)) : Oa(Object(r2)).forEach(function(t2) {
      Object.defineProperty(e, t2, Object.getOwnPropertyDescriptor(r2, t2));
    });
  }
  return e;
}
function Ea(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, Ta(n2.key), n2);
  }
}
function Pa(e, t, r2) {
  return (t = Ta(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
function Ta(e) {
  var t = function(e2) {
    if ("object" != wa(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != wa(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == wa(t) ? t : t + "";
}
var xa = function() {
  return e = function e2() {
    !function(e3, t2) {
      if (!(e3 instanceof t2)) throw new TypeError("Cannot call a class as a function");
    }(this, e2), Pa(this, "animations", void 0), Pa(this, "durations", void 0), Pa(this, "defaultDuration", void 0), Pa(this, "hasNextAnimation", void 0), Pa(this, "ignoreAnimationsFlag", void 0), this.animations = /* @__PURE__ */ new Map(), this.durations = [], this.durations[0] = 0, this.durations[1] = 0, this.defaultDuration = 150, this.hasNextAnimation = false, this.ignoreAnimationsFlag = false;
  }, t = [{ key: "advance", value: function() {
    var e2 = this;
    return this.hasNextAnimation = false, this.animations.forEach(function(t2) {
      Object.values(t2).forEach(function(t3) {
        t3.advance() && (e2.hasNextAnimation = true);
      });
    }), this.hasNextAnimation;
  } }, { key: "ignoreAnimations", value: function(e2) {
    this.ignoreAnimationsFlag = e2;
  } }, { key: "setOptions", value: function(e2) {
    void 0 !== e2.fadeDuration && (this.durations[0] = e2.fadeDuration), void 0 !== e2.sizeDuration && (this.durations[1] = e2.sizeDuration);
  } }, { key: "needsToRun", value: function() {
    return this.hasNextAnimation;
  } }, { key: "getValueForAnimationName", value: function(e2, t2, r2) {
    var n2, o2, i2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1;
    if (this.ignoreAnimationsFlag) return r2;
    var a2 = null !== (n2 = this.getById(e2)) && void 0 !== n2 ? n2 : {};
    if (void 0 === a2[t2]) {
      var u2 = 1 === i2 ? this.createSizeAnimation(0, e2, t2) : this.createFadeAnimation(0, e2, t2);
      u2.setEndValue(r2), o2 = u2.currentValue;
    } else {
      var s2 = a2[t2];
      if (s2.currentValue === r2) return r2;
      s2.setEndValue(r2), o2 = s2.currentValue;
    }
    return this.hasNextAnimation = true, o2;
  } }, { key: "createAnimation", value: function(e2, t2, r2) {
    var n2, o2 = new _a2(t2, e2), i2 = null !== (n2 = this.animations.get(t2)) && void 0 !== n2 ? n2 : {};
    return this.animations.set(t2, Sa(Sa({}, i2), {}, Pa({}, r2, o2))), o2;
  } }, { key: "getById", value: function(e2) {
    return this.animations.get(e2);
  } }, { key: "createFadeAnimation", value: function(e2, t2, r2) {
    var n2, o2 = this.createAnimation(e2, t2, r2);
    return o2.setDuration(null !== (n2 = this.durations[0]) && void 0 !== n2 ? n2 : this.defaultDuration), o2;
  } }, { key: "createSizeAnimation", value: function(e2, t2, r2) {
    var n2, o2 = this.createAnimation(e2, t2, r2);
    return o2.setDuration(null !== (n2 = this.durations[1]) && void 0 !== n2 ? n2 : this.defaultDuration), o2;
  } }], t && Ea(e.prototype, t), Object.defineProperty(e, "prototype", { writable: false }), e;
  var e, t;
}();
function Ca(e) {
  return Ca = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, Ca(e);
}
function ja(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, Aa(n2.key), n2);
  }
}
function Aa(e) {
  var t = function(e2) {
    if ("object" != Ca(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != Ca(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == Ca(t) ? t : t + "";
}
var ka = 64;
var Ra = function() {
  return e = function e2() {
    var t2, r2, n2;
    !function(e3, t3) {
      if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    }(this, e2), t2 = this, n2 = void 0, (r2 = Aa(r2 = "cache")) in t2 ? Object.defineProperty(t2, r2, { value: n2, enumerable: true, configurable: true, writable: true }) : t2[r2] = n2, this.cache = {};
  }, t = [{ key: "getImage", value: function(e2) {
    var t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], r2 = this.getOrCreateEntry(e2), n2 = t2 ? "inverted" : "image", o2 = r2[n2];
    return void 0 === o2 && (o2 = this.loadImage(e2), r2[n2] = o2), this.drawIfNeeded(o2, t2), o2.canvas;
  } }, { key: "getOrCreateEntry", value: function(e2) {
    return void 0 === this.cache[e2] && (this.cache[e2] = {}), this.cache[e2];
  } }, { key: "invertCanvas", value: function(e2) {
    for (var t2 = e2.getImageData(0, 0, ka, ka), r2 = t2.data, n2 = 0; n2 < 4096; n2++) {
      var o2 = 4 * n2;
      r2[o2] ^= 255, r2[o2 + 1] ^= 255, r2[o2 + 2] ^= 255;
    }
    e2.putImageData(t2, 0, 0);
  } }, { key: "loadImage", value: function(e2) {
    var t2 = document.createElement("canvas");
    t2.width = ka, t2.height = ka;
    var r2 = new Image();
    return r2.src = e2, r2.crossOrigin = "anonymous", { canvas: t2, image: r2, drawn: false };
  } }, { key: "drawIfNeeded", value: function(e2, t2) {
    var r2 = e2.image, n2 = e2.canvas;
    if (!e2.drawn && r2.complete) {
      var o2 = n2.getContext("2d");
      try {
        o2.drawImage(r2, 0, 0, ka, ka);
      } catch (e3) {
        eo.error("Failed to draw image", r2.src, e3), o2.beginPath(), o2.strokeStyle = "black", o2.rect(0, 0, ka, ka), o2.moveTo(0, 0), o2.lineTo(ka, ka), o2.moveTo(0, ka), o2.lineTo(ka, 0), o2.stroke(), o2.closePath();
      }
      t2 && this.invertCanvas(o2), e2.drawn = true;
    }
  } }], t && ja(e.prototype, t), Object.defineProperty(e, "prototype", { writable: false }), e;
  var e, t;
}();
var Ia = Ra;
function Ma(e) {
  return Ma = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, Ma(e);
}
function Na(e, t) {
  if (e) {
    if ("string" == typeof e) return Da(e, t);
    var r2 = {}.toString.call(e).slice(8, -1);
    return "Object" === r2 && e.constructor && (r2 = e.constructor.name), "Map" === r2 || "Set" === r2 ? Array.from(e) : "Arguments" === r2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r2) ? Da(e, t) : void 0;
  }
}
function Da(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var r2 = 0, n2 = Array(t); r2 < t; r2++) n2[r2] = e[r2];
  return n2;
}
function La(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, Fa(n2.key), n2);
  }
}
function Ua(e, t, r2) {
  return (t = Fa(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
function Fa(e) {
  var t = function(e2) {
    if ("object" != Ma(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != Ma(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == Ma(t) ? t : t + "";
}
var Ba = function() {
  return e = function e2(t2, r2, n2) {
    !function(e3, t3) {
      if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    }(this, e2), Ua(this, "key", void 0), Ua(this, "rels", void 0), Ua(this, "waypointPath", void 0), Ua(this, "selfReferring", void 0), Ua(this, "fromId", void 0), Ua(this, "toId", void 0), Ua(this, "angles", void 0), Ua(this, "labelInfo", void 0), this.key = t2, this.rels = /* @__PURE__ */ new Map(), this.selfReferring = r2 === n2, this.fromId = r2, this.toId = n2, this.labelInfo = {}, this.angles = [];
  }, t = [{ key: "insert", value: function(e2) {
    this.rels.set(e2.id, e2);
  } }, { key: "setLabelInfo", value: function(e2, t2) {
    this.labelInfo[e2] = t2;
  } }, { key: "has", value: function(e2) {
    var t2 = e2.id;
    return this.rels.has(t2);
  } }, { key: "remove", value: function(e2) {
    var t2 = e2.id;
    if (this.rels.has(t2) && (this.rels.delete(t2), this.size() > 0)) {
      var r2 = function(e3, t3) {
        return function(e4) {
          if (Array.isArray(e4)) return e4;
        }(e3) || function(e4, t4) {
          var r3 = null == e4 ? null : "undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"];
          if (null != r3) {
            var n2, o2, i2, a2, u2 = [], s2 = true, c2 = false;
            try {
              if (i2 = (r3 = r3.call(e4)).next, 0 === t4) {
                if (Object(r3) !== r3) return;
                s2 = false;
              } else for (; !(s2 = (n2 = i2.call(r3)).done) && (u2.push(n2.value), u2.length !== t4); s2 = true) ;
            } catch (e5) {
              c2 = true, o2 = e5;
            } finally {
              try {
                if (!s2 && null != r3.return && (a2 = r3.return(), Object(a2) !== a2)) return;
              } finally {
                if (c2) throw o2;
              }
            }
            return u2;
          }
        }(e3, t3) || Na(e3, t3) || function() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
      }(this.relArray(), 1)[0];
      this.fromId = r2.from, this.toId = r2.to;
    }
  } }, { key: "size", value: function() {
    return this.rels.size;
  } }, { key: "relArray", value: function() {
    return Array.from(this.rels.values());
  } }, { key: "maxFontSize", value: function() {
    if (0 === this.size()) return 1;
    var e2 = this.relArray().map(function(e3) {
      return (0, i.isNumber)(e3.captionSize) ? e3.captionSize : 1;
    });
    return Math.max.apply(Math, function(e3) {
      return function(e4) {
        if (Array.isArray(e4)) return Da(e4);
      }(e3) || function(e4) {
        if ("undefined" != typeof Symbol && null != e4[Symbol.iterator] || null != e4["@@iterator"]) return Array.from(e4);
      }(e3) || Na(e3) || function() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }();
    }(e2));
  } }, { key: "relIsOppositeDirection", value: function(e2) {
    var t2 = e2.from, r2 = e2.to, n2 = this.fromId, o2 = this.toId;
    return t2 !== n2 && r2 !== o2 || t2 === o2 && r2 === n2;
  } }, { key: "indexOf", value: function(e2) {
    var t2 = e2.id, r2 = Array.from(this.rels.keys());
    return this.rels.has(t2) ? r2.indexOf(t2) : -1;
  } }, { key: "getRel", value: function(e2) {
    var t2 = this.relArray();
    return e2 < 0 || e2 >= t2.length ? null : t2[e2];
  } }, { key: "setWaypoints", value: function(e2) {
    this.waypointPath = e2;
  } }, { key: "setAngles", value: function(e2) {
    this.angles = e2;
  } }], t && La(e.prototype, t), Object.defineProperty(e, "prototype", { writable: false }), e;
  var e, t;
}();
var za = wn;
var Va = 2 * Math.PI / 50;
var Wa = 0.1 * Math.PI;
function qa(e) {
  return qa = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, qa(e);
}
function Ga(e, t) {
  var r2 = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
  if (!r2) {
    if (Array.isArray(e) || (r2 = Ya(e)) || t && e && "number" == typeof e.length) {
      r2 && (e = r2);
      var n2 = 0, o2 = function() {
      };
      return { s: o2, n: function() {
        return n2 >= e.length ? { done: true } : { done: false, value: e[n2++] };
      }, e: function(e2) {
        throw e2;
      }, f: o2 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var i2, a2 = true, u2 = false;
  return { s: function() {
    r2 = r2.call(e);
  }, n: function() {
    var e2 = r2.next();
    return a2 = e2.done, e2;
  }, e: function(e2) {
    u2 = true, i2 = e2;
  }, f: function() {
    try {
      a2 || null == r2.return || r2.return();
    } finally {
      if (u2) throw i2;
    }
  } };
}
function Ha(e) {
  return function(e2) {
    if (Array.isArray(e2)) return Xa(e2);
  }(e) || function(e2) {
    if ("undefined" != typeof Symbol && null != e2[Symbol.iterator] || null != e2["@@iterator"]) return Array.from(e2);
  }(e) || Ya(e) || function() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }();
}
function Ya(e, t) {
  if (e) {
    if ("string" == typeof e) return Xa(e, t);
    var r2 = {}.toString.call(e).slice(8, -1);
    return "Object" === r2 && e.constructor && (r2 = e.constructor.name), "Map" === r2 || "Set" === r2 ? Array.from(e) : "Arguments" === r2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r2) ? Xa(e, t) : void 0;
  }
}
function Xa(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var r2 = 0, n2 = Array(t); r2 < t; r2++) n2[r2] = e[r2];
  return n2;
}
function Ka(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, $a(n2.key), n2);
  }
}
function Za(e, t, r2) {
  return (t = $a(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
function $a(e) {
  var t = function(e2) {
    if ("object" != qa(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != qa(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == qa(t) ? t : t + "";
}
var Qa = function(e) {
  var t = [];
  if (0 === e.length) t.push({ size: 2 * Math.PI, start: 0 });
  else {
    for (var r2 = e.length - 1; r2 >= 0; r2--) {
      var n2 = void 0, o2 = void 0;
      0 === r2 ? (o2 = e[e.length - 1], n2 = e[r2] - e[e.length - 1] + 2 * Math.PI) : (o2 = e[r2 - 1], n2 = e[r2] - e[r2 - 1]), t.push({ size: n2, start: o2 });
    }
    t.sort(function(e2, t2) {
      return t2.size - e2.size;
    });
  }
  return t;
};
var Ja = function(e, t) {
  for (; t > e.length || e[0].size > 2 * e[t - 1].size; ) e.push({ size: e[0].size / 2, start: e[0].start }), e.push({ size: e[0].size / 2, start: e[0].start + e[0].size / 2 }), e.shift(), e.sort(function(e2, t2) {
    return t2.size - e2.size;
  });
  return e;
};
var eu = function() {
  return e = function e2(t2, r2) {
    !function(e3, t3) {
      if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    }(this, e2), Za(this, "bundles", void 0), Za(this, "nodeToBundles", void 0), this.bundles = {}, this.nodeToBundles = {};
    var n2 = t2.reduce(function(e3, t3) {
      return e3[t3.id] = t3, e3;
    }, {});
    this.updateData(n2, {}, {}, r2);
  }, t = [{ key: "getBundle", value: function(e2) {
    var t2 = this.bundles, r2 = this.nodeToBundles, n2 = this.generatePairId(e2.from, e2.to), o2 = t2[n2];
    return void 0 === o2 && (o2 = new Ba(n2, e2.from, e2.to), t2[n2] = o2, void 0 === r2[e2.from] && (r2[e2.from] = []), void 0 === r2[e2.to] && (r2[e2.to] = []), r2[e2.from].push(o2), r2[e2.to].push(o2)), o2;
  } }, { key: "updateData", value: function(e2, t2, r2, n2) {
    var o2, i2 = this.bundles, a2 = this.nodeToBundles, u2 = function(e3, t3) {
      var r3 = a2[t3].findIndex(function(t4) {
        return t4 === e3;
      });
      -1 !== r3 && a2[t3].splice(r3, 1), 0 === a2[t3].length && delete a2[t3];
    }, s2 = [].concat(Ha(Object.values(e2)), Ha(Object.values(r2))), c2 = Object.values(t2), l2 = Ga(s2);
    try {
      for (l2.s(); !(o2 = l2.n()).done; ) {
        var f2 = o2.value;
        this.getBundle(f2).insert(f2);
      }
    } catch (e3) {
      l2.e(e3);
    } finally {
      l2.f();
    }
    for (var h2 = 0, d2 = c2; h2 < d2.length; h2++) {
      var p3 = d2[h2], v3 = this.getBundle(p3);
      v3.remove(p3), 0 === v3.size() && (delete i2[v3.key], u2(v3, p3.from), u2(v3, p3.to));
    }
    for (var y3 = 0, b2 = Object.keys(i2); y3 < b2.length; y3++) {
      var m2 = i2[b2[y3]];
      m2.setWaypoints(n2["".concat(m2.fromId, "-").concat(m2.toId)]);
    }
  } }, { key: "updatePositions", value: function(e2) {
    for (var t2 = this.nodeToBundles, r2 = 0, n2 = Object.keys(e2); r2 < n2.length; r2++) {
      var o2, i2 = n2[r2], a2 = null !== (o2 = t2[i2]) && void 0 !== o2 ? o2 : [];
      if (0 !== a2.length) {
        var u2 = a2.find(function(e3) {
          return e3.selfReferring;
        }), s2 = a2.filter(function(e3) {
          return !e3.selfReferring;
        });
        if (void 0 !== u2) {
          var c2, l2 = [], f2 = Ga(s2);
          try {
            for (f2.s(); !(c2 = f2.n()).done; ) {
              var h2 = c2.value, d2 = e2[h2.fromId], p3 = e2[h2.toId];
              if (void 0 !== d2 && void 0 !== p3) for (var v3 = Va * h2.size(), y3 = d2.id === i2 ? Math.atan2(p3.y - d2.y, p3.x - d2.x) : Math.atan2(d2.y - p3.y, d2.x - p3.x), b2 = 0; b2 < h2.size(); b2++) l2.push(y3 + v3 / 2 - b2 * Va);
              else {
                var m2 = void 0 === d2 ? h2.fromId : h2.toId;
                eo.warn("Arrowbundler: Node with id ".concat(m2, " is not in position map"));
              }
            }
          } catch (e3) {
            f2.e(e3);
          } finally {
            f2.f();
          }
          var g2 = l2.map(function(e3) {
            return (e3 + 2 * Math.PI) % (2 * Math.PI);
          }).sort(), _2 = Qa(g2);
          Ja(_2, u2.size());
          var w2 = _2.map(function(e3) {
            return e3.start + e3.size / 2;
          }).slice(0, u2.size());
          u2.setAngles(w2);
        }
      }
    }
  } }, { key: "generatePairId", value: function(e2, t2) {
    return [e2.toString(), t2.toString()].sort(function(e3, t3) {
      return e3.localeCompare(t3);
    }).join("-");
  } }], t && Ka(e.prototype, t), Object.defineProperty(e, "prototype", { writable: false }), e;
  var e, t;
}();
var tu = o(3269);
var ru = o.n(tu);
function nu(e) {
  return nu = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, nu(e);
}
var ou = /^\s+/;
var iu = /\s+$/;
function au(e, t) {
  if (t = t || {}, (e = e || "") instanceof au) return e;
  if (!(this instanceof au)) return new au(e, t);
  var r2 = function(e2) {
    var t2, r3, n2, o2 = { r: 0, g: 0, b: 0 }, i2 = 1, a2 = null, u2 = null, s2 = null, c2 = false, l2 = false;
    return "string" == typeof e2 && (e2 = function(e3) {
      e3 = e3.replace(ou, "").replace(iu, "").toLowerCase();
      var t3, r4 = false;
      if (Su[e3]) e3 = Su[e3], r4 = true;
      else if ("transparent" == e3) return { r: 0, g: 0, b: 0, a: 0, format: "name" };
      return (t3 = Du.rgb.exec(e3)) ? { r: t3[1], g: t3[2], b: t3[3] } : (t3 = Du.rgba.exec(e3)) ? { r: t3[1], g: t3[2], b: t3[3], a: t3[4] } : (t3 = Du.hsl.exec(e3)) ? { h: t3[1], s: t3[2], l: t3[3] } : (t3 = Du.hsla.exec(e3)) ? { h: t3[1], s: t3[2], l: t3[3], a: t3[4] } : (t3 = Du.hsv.exec(e3)) ? { h: t3[1], s: t3[2], v: t3[3] } : (t3 = Du.hsva.exec(e3)) ? { h: t3[1], s: t3[2], v: t3[3], a: t3[4] } : (t3 = Du.hex8.exec(e3)) ? { r: Cu(t3[1]), g: Cu(t3[2]), b: Cu(t3[3]), a: Ru(t3[4]), format: r4 ? "name" : "hex8" } : (t3 = Du.hex6.exec(e3)) ? { r: Cu(t3[1]), g: Cu(t3[2]), b: Cu(t3[3]), format: r4 ? "name" : "hex" } : (t3 = Du.hex4.exec(e3)) ? { r: Cu(t3[1] + "" + t3[1]), g: Cu(t3[2] + "" + t3[2]), b: Cu(t3[3] + "" + t3[3]), a: Ru(t3[4] + "" + t3[4]), format: r4 ? "name" : "hex8" } : !!(t3 = Du.hex3.exec(e3)) && { r: Cu(t3[1] + "" + t3[1]), g: Cu(t3[2] + "" + t3[2]), b: Cu(t3[3] + "" + t3[3]), format: r4 ? "name" : "hex" };
    }(e2)), "object" == nu(e2) && (Lu(e2.r) && Lu(e2.g) && Lu(e2.b) ? (t2 = e2.r, r3 = e2.g, n2 = e2.b, o2 = { r: 255 * Tu(t2, 255), g: 255 * Tu(r3, 255), b: 255 * Tu(n2, 255) }, c2 = true, l2 = "%" === String(e2.r).substr(-1) ? "prgb" : "rgb") : Lu(e2.h) && Lu(e2.s) && Lu(e2.v) ? (a2 = Au(e2.s), u2 = Au(e2.v), o2 = function(e3, t3, r4) {
      e3 = 6 * Tu(e3, 360), t3 = Tu(t3, 100), r4 = Tu(r4, 100);
      var n3 = Math.floor(e3), o3 = e3 - n3, i3 = r4 * (1 - t3), a3 = r4 * (1 - o3 * t3), u3 = r4 * (1 - (1 - o3) * t3), s3 = n3 % 6;
      return { r: 255 * [r4, a3, i3, i3, u3, r4][s3], g: 255 * [u3, r4, r4, a3, i3, i3][s3], b: 255 * [i3, i3, u3, r4, r4, a3][s3] };
    }(e2.h, a2, u2), c2 = true, l2 = "hsv") : Lu(e2.h) && Lu(e2.s) && Lu(e2.l) && (a2 = Au(e2.s), s2 = Au(e2.l), o2 = function(e3, t3, r4) {
      var n3, o3, i3;
      function a3(e4, t4, r5) {
        return r5 < 0 && (r5 += 1), r5 > 1 && (r5 -= 1), r5 < 1 / 6 ? e4 + 6 * (t4 - e4) * r5 : r5 < 0.5 ? t4 : r5 < 2 / 3 ? e4 + (t4 - e4) * (2 / 3 - r5) * 6 : e4;
      }
      if (e3 = Tu(e3, 360), t3 = Tu(t3, 100), r4 = Tu(r4, 100), 0 === t3) n3 = o3 = i3 = r4;
      else {
        var u3 = r4 < 0.5 ? r4 * (1 + t3) : r4 + t3 - r4 * t3, s3 = 2 * r4 - u3;
        n3 = a3(s3, u3, e3 + 1 / 3), o3 = a3(s3, u3, e3), i3 = a3(s3, u3, e3 - 1 / 3);
      }
      return { r: 255 * n3, g: 255 * o3, b: 255 * i3 };
    }(e2.h, a2, s2), c2 = true, l2 = "hsl"), e2.hasOwnProperty("a") && (i2 = e2.a)), i2 = Pu(i2), { ok: c2, format: e2.format || l2, r: Math.min(255, Math.max(o2.r, 0)), g: Math.min(255, Math.max(o2.g, 0)), b: Math.min(255, Math.max(o2.b, 0)), a: i2 };
  }(e);
  this._originalInput = e, this._r = r2.r, this._g = r2.g, this._b = r2.b, this._a = r2.a, this._roundA = Math.round(100 * this._a) / 100, this._format = t.format || r2.format, this._gradientType = t.gradientType, this._r < 1 && (this._r = Math.round(this._r)), this._g < 1 && (this._g = Math.round(this._g)), this._b < 1 && (this._b = Math.round(this._b)), this._ok = r2.ok;
}
function uu(e, t, r2) {
  e = Tu(e, 255), t = Tu(t, 255), r2 = Tu(r2, 255);
  var n2, o2, i2 = Math.max(e, t, r2), a2 = Math.min(e, t, r2), u2 = (i2 + a2) / 2;
  if (i2 == a2) n2 = o2 = 0;
  else {
    var s2 = i2 - a2;
    switch (o2 = u2 > 0.5 ? s2 / (2 - i2 - a2) : s2 / (i2 + a2), i2) {
      case e:
        n2 = (t - r2) / s2 + (t < r2 ? 6 : 0);
        break;
      case t:
        n2 = (r2 - e) / s2 + 2;
        break;
      case r2:
        n2 = (e - t) / s2 + 4;
    }
    n2 /= 6;
  }
  return { h: n2, s: o2, l: u2 };
}
function su(e, t, r2) {
  e = Tu(e, 255), t = Tu(t, 255), r2 = Tu(r2, 255);
  var n2, o2, i2 = Math.max(e, t, r2), a2 = Math.min(e, t, r2), u2 = i2, s2 = i2 - a2;
  if (o2 = 0 === i2 ? 0 : s2 / i2, i2 == a2) n2 = 0;
  else {
    switch (i2) {
      case e:
        n2 = (t - r2) / s2 + (t < r2 ? 6 : 0);
        break;
      case t:
        n2 = (r2 - e) / s2 + 2;
        break;
      case r2:
        n2 = (e - t) / s2 + 4;
    }
    n2 /= 6;
  }
  return { h: n2, s: o2, v: u2 };
}
function cu(e, t, r2, n2) {
  var o2 = [ju(Math.round(e).toString(16)), ju(Math.round(t).toString(16)), ju(Math.round(r2).toString(16))];
  return n2 && o2[0].charAt(0) == o2[0].charAt(1) && o2[1].charAt(0) == o2[1].charAt(1) && o2[2].charAt(0) == o2[2].charAt(1) ? o2[0].charAt(0) + o2[1].charAt(0) + o2[2].charAt(0) : o2.join("");
}
function lu(e, t, r2, n2) {
  return [ju(ku(n2)), ju(Math.round(e).toString(16)), ju(Math.round(t).toString(16)), ju(Math.round(r2).toString(16))].join("");
}
function fu(e, t) {
  t = 0 === t ? 0 : t || 10;
  var r2 = au(e).toHsl();
  return r2.s -= t / 100, r2.s = xu(r2.s), au(r2);
}
function hu(e, t) {
  t = 0 === t ? 0 : t || 10;
  var r2 = au(e).toHsl();
  return r2.s += t / 100, r2.s = xu(r2.s), au(r2);
}
function du(e) {
  return au(e).desaturate(100);
}
function pu(e, t) {
  t = 0 === t ? 0 : t || 10;
  var r2 = au(e).toHsl();
  return r2.l += t / 100, r2.l = xu(r2.l), au(r2);
}
function vu(e, t) {
  t = 0 === t ? 0 : t || 10;
  var r2 = au(e).toRgb();
  return r2.r = Math.max(0, Math.min(255, r2.r - Math.round(-t / 100 * 255))), r2.g = Math.max(0, Math.min(255, r2.g - Math.round(-t / 100 * 255))), r2.b = Math.max(0, Math.min(255, r2.b - Math.round(-t / 100 * 255))), au(r2);
}
function yu(e, t) {
  t = 0 === t ? 0 : t || 10;
  var r2 = au(e).toHsl();
  return r2.l -= t / 100, r2.l = xu(r2.l), au(r2);
}
function bu(e, t) {
  var r2 = au(e).toHsl(), n2 = (r2.h + t) % 360;
  return r2.h = n2 < 0 ? 360 + n2 : n2, au(r2);
}
function mu(e) {
  var t = au(e).toHsl();
  return t.h = (t.h + 180) % 360, au(t);
}
function gu(e, t) {
  if (isNaN(t) || t <= 0) throw new Error("Argument to polyad must be a positive number");
  for (var r2 = au(e).toHsl(), n2 = [au(e)], o2 = 360 / t, i2 = 1; i2 < t; i2++) n2.push(au({ h: (r2.h + i2 * o2) % 360, s: r2.s, l: r2.l }));
  return n2;
}
function _u(e) {
  var t = au(e).toHsl(), r2 = t.h;
  return [au(e), au({ h: (r2 + 72) % 360, s: t.s, l: t.l }), au({ h: (r2 + 216) % 360, s: t.s, l: t.l })];
}
function wu(e, t, r2) {
  t = t || 6, r2 = r2 || 30;
  var n2 = au(e).toHsl(), o2 = 360 / r2, i2 = [au(e)];
  for (n2.h = (n2.h - (o2 * t >> 1) + 720) % 360; --t; ) n2.h = (n2.h + o2) % 360, i2.push(au(n2));
  return i2;
}
function Ou(e, t) {
  t = t || 6;
  for (var r2 = au(e).toHsv(), n2 = r2.h, o2 = r2.s, i2 = r2.v, a2 = [], u2 = 1 / t; t--; ) a2.push(au({ h: n2, s: o2, v: i2 })), i2 = (i2 + u2) % 1;
  return a2;
}
au.prototype = { isDark: function() {
  return this.getBrightness() < 128;
}, isLight: function() {
  return !this.isDark();
}, isValid: function() {
  return this._ok;
}, getOriginalInput: function() {
  return this._originalInput;
}, getFormat: function() {
  return this._format;
}, getAlpha: function() {
  return this._a;
}, getBrightness: function() {
  var e = this.toRgb();
  return (299 * e.r + 587 * e.g + 114 * e.b) / 1e3;
}, getLuminance: function() {
  var e, t, r2, n2 = this.toRgb();
  return e = n2.r / 255, t = n2.g / 255, r2 = n2.b / 255, 0.2126 * (e <= 0.03928 ? e / 12.92 : Math.pow((e + 0.055) / 1.055, 2.4)) + 0.7152 * (t <= 0.03928 ? t / 12.92 : Math.pow((t + 0.055) / 1.055, 2.4)) + 0.0722 * (r2 <= 0.03928 ? r2 / 12.92 : Math.pow((r2 + 0.055) / 1.055, 2.4));
}, setAlpha: function(e) {
  return this._a = Pu(e), this._roundA = Math.round(100 * this._a) / 100, this;
}, toHsv: function() {
  var e = su(this._r, this._g, this._b);
  return { h: 360 * e.h, s: e.s, v: e.v, a: this._a };
}, toHsvString: function() {
  var e = su(this._r, this._g, this._b), t = Math.round(360 * e.h), r2 = Math.round(100 * e.s), n2 = Math.round(100 * e.v);
  return 1 == this._a ? "hsv(" + t + ", " + r2 + "%, " + n2 + "%)" : "hsva(" + t + ", " + r2 + "%, " + n2 + "%, " + this._roundA + ")";
}, toHsl: function() {
  var e = uu(this._r, this._g, this._b);
  return { h: 360 * e.h, s: e.s, l: e.l, a: this._a };
}, toHslString: function() {
  var e = uu(this._r, this._g, this._b), t = Math.round(360 * e.h), r2 = Math.round(100 * e.s), n2 = Math.round(100 * e.l);
  return 1 == this._a ? "hsl(" + t + ", " + r2 + "%, " + n2 + "%)" : "hsla(" + t + ", " + r2 + "%, " + n2 + "%, " + this._roundA + ")";
}, toHex: function(e) {
  return cu(this._r, this._g, this._b, e);
}, toHexString: function(e) {
  return "#" + this.toHex(e);
}, toHex8: function(e) {
  return function(e2, t, r2, n2, o2) {
    var i2 = [ju(Math.round(e2).toString(16)), ju(Math.round(t).toString(16)), ju(Math.round(r2).toString(16)), ju(ku(n2))];
    return o2 && i2[0].charAt(0) == i2[0].charAt(1) && i2[1].charAt(0) == i2[1].charAt(1) && i2[2].charAt(0) == i2[2].charAt(1) && i2[3].charAt(0) == i2[3].charAt(1) ? i2[0].charAt(0) + i2[1].charAt(0) + i2[2].charAt(0) + i2[3].charAt(0) : i2.join("");
  }(this._r, this._g, this._b, this._a, e);
}, toHex8String: function(e) {
  return "#" + this.toHex8(e);
}, toRgb: function() {
  return { r: Math.round(this._r), g: Math.round(this._g), b: Math.round(this._b), a: this._a };
}, toRgbString: function() {
  return 1 == this._a ? "rgb(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ")" : "rgba(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ", " + this._roundA + ")";
}, toPercentageRgb: function() {
  return { r: Math.round(100 * Tu(this._r, 255)) + "%", g: Math.round(100 * Tu(this._g, 255)) + "%", b: Math.round(100 * Tu(this._b, 255)) + "%", a: this._a };
}, toPercentageRgbString: function() {
  return 1 == this._a ? "rgb(" + Math.round(100 * Tu(this._r, 255)) + "%, " + Math.round(100 * Tu(this._g, 255)) + "%, " + Math.round(100 * Tu(this._b, 255)) + "%)" : "rgba(" + Math.round(100 * Tu(this._r, 255)) + "%, " + Math.round(100 * Tu(this._g, 255)) + "%, " + Math.round(100 * Tu(this._b, 255)) + "%, " + this._roundA + ")";
}, toName: function() {
  return 0 === this._a ? "transparent" : !(this._a < 1) && (Eu[cu(this._r, this._g, this._b, true)] || false);
}, toFilter: function(e) {
  var t = "#" + lu(this._r, this._g, this._b, this._a), r2 = t, n2 = this._gradientType ? "GradientType = 1, " : "";
  if (e) {
    var o2 = au(e);
    r2 = "#" + lu(o2._r, o2._g, o2._b, o2._a);
  }
  return "progid:DXImageTransform.Microsoft.gradient(" + n2 + "startColorstr=" + t + ",endColorstr=" + r2 + ")";
}, toString: function(e) {
  var t = !!e;
  e = e || this._format;
  var r2 = false, n2 = this._a < 1 && this._a >= 0;
  return t || !n2 || "hex" !== e && "hex6" !== e && "hex3" !== e && "hex4" !== e && "hex8" !== e && "name" !== e ? ("rgb" === e && (r2 = this.toRgbString()), "prgb" === e && (r2 = this.toPercentageRgbString()), "hex" !== e && "hex6" !== e || (r2 = this.toHexString()), "hex3" === e && (r2 = this.toHexString(true)), "hex4" === e && (r2 = this.toHex8String(true)), "hex8" === e && (r2 = this.toHex8String()), "name" === e && (r2 = this.toName()), "hsl" === e && (r2 = this.toHslString()), "hsv" === e && (r2 = this.toHsvString()), r2 || this.toHexString()) : "name" === e && 0 === this._a ? this.toName() : this.toRgbString();
}, clone: function() {
  return au(this.toString());
}, _applyModification: function(e, t) {
  var r2 = e.apply(null, [this].concat([].slice.call(t)));
  return this._r = r2._r, this._g = r2._g, this._b = r2._b, this.setAlpha(r2._a), this;
}, lighten: function() {
  return this._applyModification(pu, arguments);
}, brighten: function() {
  return this._applyModification(vu, arguments);
}, darken: function() {
  return this._applyModification(yu, arguments);
}, desaturate: function() {
  return this._applyModification(fu, arguments);
}, saturate: function() {
  return this._applyModification(hu, arguments);
}, greyscale: function() {
  return this._applyModification(du, arguments);
}, spin: function() {
  return this._applyModification(bu, arguments);
}, _applyCombination: function(e, t) {
  return e.apply(null, [this].concat([].slice.call(t)));
}, analogous: function() {
  return this._applyCombination(wu, arguments);
}, complement: function() {
  return this._applyCombination(mu, arguments);
}, monochromatic: function() {
  return this._applyCombination(Ou, arguments);
}, splitcomplement: function() {
  return this._applyCombination(_u, arguments);
}, triad: function() {
  return this._applyCombination(gu, [3]);
}, tetrad: function() {
  return this._applyCombination(gu, [4]);
} }, au.fromRatio = function(e, t) {
  if ("object" == nu(e)) {
    var r2 = {};
    for (var n2 in e) e.hasOwnProperty(n2) && (r2[n2] = "a" === n2 ? e[n2] : Au(e[n2]));
    e = r2;
  }
  return au(e, t);
}, au.equals = function(e, t) {
  return !(!e || !t) && au(e).toRgbString() == au(t).toRgbString();
}, au.random = function() {
  return au.fromRatio({ r: Math.random(), g: Math.random(), b: Math.random() });
}, au.mix = function(e, t, r2) {
  r2 = 0 === r2 ? 0 : r2 || 50;
  var n2 = au(e).toRgb(), o2 = au(t).toRgb(), i2 = r2 / 100;
  return au({ r: (o2.r - n2.r) * i2 + n2.r, g: (o2.g - n2.g) * i2 + n2.g, b: (o2.b - n2.b) * i2 + n2.b, a: (o2.a - n2.a) * i2 + n2.a });
}, au.readability = function(e, t) {
  var r2 = au(e), n2 = au(t);
  return (Math.max(r2.getLuminance(), n2.getLuminance()) + 0.05) / (Math.min(r2.getLuminance(), n2.getLuminance()) + 0.05);
}, au.isReadable = function(e, t, r2) {
  var n2, o2, i2, a2, u2, s2 = au.readability(e, t);
  switch (o2 = false, "AA" !== (a2 = ((i2 = (i2 = r2) || { level: "AA", size: "small" }).level || "AA").toUpperCase()) && "AAA" !== a2 && (a2 = "AA"), "small" !== (u2 = (i2.size || "small").toLowerCase()) && "large" !== u2 && (u2 = "small"), (n2 = { level: a2, size: u2 }).level + n2.size) {
    case "AAsmall":
    case "AAAlarge":
      o2 = s2 >= 4.5;
      break;
    case "AAlarge":
      o2 = s2 >= 3;
      break;
    case "AAAsmall":
      o2 = s2 >= 7;
  }
  return o2;
}, au.mostReadable = function(e, t, r2) {
  var n2, o2, i2, a2, u2 = null, s2 = 0;
  o2 = (r2 = r2 || {}).includeFallbackColors, i2 = r2.level, a2 = r2.size;
  for (var c2 = 0; c2 < t.length; c2++) (n2 = au.readability(e, t[c2])) > s2 && (s2 = n2, u2 = au(t[c2]));
  return au.isReadable(e, u2, { level: i2, size: a2 }) || !o2 ? u2 : (r2.includeFallbackColors = false, au.mostReadable(e, ["#fff", "#000"], r2));
};
var Su = au.names = { aliceblue: "f0f8ff", antiquewhite: "faebd7", aqua: "0ff", aquamarine: "7fffd4", azure: "f0ffff", beige: "f5f5dc", bisque: "ffe4c4", black: "000", blanchedalmond: "ffebcd", blue: "00f", blueviolet: "8a2be2", brown: "a52a2a", burlywood: "deb887", burntsienna: "ea7e5d", cadetblue: "5f9ea0", chartreuse: "7fff00", chocolate: "d2691e", coral: "ff7f50", cornflowerblue: "6495ed", cornsilk: "fff8dc", crimson: "dc143c", cyan: "0ff", darkblue: "00008b", darkcyan: "008b8b", darkgoldenrod: "b8860b", darkgray: "a9a9a9", darkgreen: "006400", darkgrey: "a9a9a9", darkkhaki: "bdb76b", darkmagenta: "8b008b", darkolivegreen: "556b2f", darkorange: "ff8c00", darkorchid: "9932cc", darkred: "8b0000", darksalmon: "e9967a", darkseagreen: "8fbc8f", darkslateblue: "483d8b", darkslategray: "2f4f4f", darkslategrey: "2f4f4f", darkturquoise: "00ced1", darkviolet: "9400d3", deeppink: "ff1493", deepskyblue: "00bfff", dimgray: "696969", dimgrey: "696969", dodgerblue: "1e90ff", firebrick: "b22222", floralwhite: "fffaf0", forestgreen: "228b22", fuchsia: "f0f", gainsboro: "dcdcdc", ghostwhite: "f8f8ff", gold: "ffd700", goldenrod: "daa520", gray: "808080", green: "008000", greenyellow: "adff2f", grey: "808080", honeydew: "f0fff0", hotpink: "ff69b4", indianred: "cd5c5c", indigo: "4b0082", ivory: "fffff0", khaki: "f0e68c", lavender: "e6e6fa", lavenderblush: "fff0f5", lawngreen: "7cfc00", lemonchiffon: "fffacd", lightblue: "add8e6", lightcoral: "f08080", lightcyan: "e0ffff", lightgoldenrodyellow: "fafad2", lightgray: "d3d3d3", lightgreen: "90ee90", lightgrey: "d3d3d3", lightpink: "ffb6c1", lightsalmon: "ffa07a", lightseagreen: "20b2aa", lightskyblue: "87cefa", lightslategray: "789", lightslategrey: "789", lightsteelblue: "b0c4de", lightyellow: "ffffe0", lime: "0f0", limegreen: "32cd32", linen: "faf0e6", magenta: "f0f", maroon: "800000", mediumaquamarine: "66cdaa", mediumblue: "0000cd", mediumorchid: "ba55d3", mediumpurple: "9370db", mediumseagreen: "3cb371", mediumslateblue: "7b68ee", mediumspringgreen: "00fa9a", mediumturquoise: "48d1cc", mediumvioletred: "c71585", midnightblue: "191970", mintcream: "f5fffa", mistyrose: "ffe4e1", moccasin: "ffe4b5", navajowhite: "ffdead", navy: "000080", oldlace: "fdf5e6", olive: "808000", olivedrab: "6b8e23", orange: "ffa500", orangered: "ff4500", orchid: "da70d6", palegoldenrod: "eee8aa", palegreen: "98fb98", paleturquoise: "afeeee", palevioletred: "db7093", papayawhip: "ffefd5", peachpuff: "ffdab9", peru: "cd853f", pink: "ffc0cb", plum: "dda0dd", powderblue: "b0e0e6", purple: "800080", rebeccapurple: "663399", red: "f00", rosybrown: "bc8f8f", royalblue: "4169e1", saddlebrown: "8b4513", salmon: "fa8072", sandybrown: "f4a460", seagreen: "2e8b57", seashell: "fff5ee", sienna: "a0522d", silver: "c0c0c0", skyblue: "87ceeb", slateblue: "6a5acd", slategray: "708090", slategrey: "708090", snow: "fffafa", springgreen: "00ff7f", steelblue: "4682b4", tan: "d2b48c", teal: "008080", thistle: "d8bfd8", tomato: "ff6347", turquoise: "40e0d0", violet: "ee82ee", wheat: "f5deb3", white: "fff", whitesmoke: "f5f5f5", yellow: "ff0", yellowgreen: "9acd32" };
var Eu = au.hexNames = function(e) {
  var t = {};
  for (var r2 in e) e.hasOwnProperty(r2) && (t[e[r2]] = r2);
  return t;
}(Su);
function Pu(e) {
  return e = parseFloat(e), (isNaN(e) || e < 0 || e > 1) && (e = 1), e;
}
function Tu(e, t) {
  (function(e2) {
    return "string" == typeof e2 && -1 != e2.indexOf(".") && 1 === parseFloat(e2);
  })(e) && (e = "100%");
  var r2 = function(e2) {
    return "string" == typeof e2 && -1 != e2.indexOf("%");
  }(e);
  return e = Math.min(t, Math.max(0, parseFloat(e))), r2 && (e = parseInt(e * t, 10) / 100), Math.abs(e - t) < 1e-6 ? 1 : e % t / parseFloat(t);
}
function xu(e) {
  return Math.min(1, Math.max(0, e));
}
function Cu(e) {
  return parseInt(e, 16);
}
function ju(e) {
  return 1 == e.length ? "0" + e : "" + e;
}
function Au(e) {
  return e <= 1 && (e = 100 * e + "%"), e;
}
function ku(e) {
  return Math.round(255 * parseFloat(e)).toString(16);
}
function Ru(e) {
  return Cu(e) / 255;
}
var Iu;
var Mu;
var Nu;
var Du = (Mu = "[\\s|\\(]+(" + (Iu = "(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)") + ")[,|\\s]+(" + Iu + ")[,|\\s]+(" + Iu + ")\\s*\\)?", Nu = "[\\s|\\(]+(" + Iu + ")[,|\\s]+(" + Iu + ")[,|\\s]+(" + Iu + ")[,|\\s]+(" + Iu + ")\\s*\\)?", { CSS_UNIT: new RegExp(Iu), rgb: new RegExp("rgb" + Mu), rgba: new RegExp("rgba" + Nu), hsl: new RegExp("hsl" + Mu), hsla: new RegExp("hsla" + Nu), hsv: new RegExp("hsv" + Mu), hsva: new RegExp("hsva" + Nu), hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/, hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/, hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/, hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/ });
function Lu(e) {
  return !!Du.CSS_UNIT.exec(e);
}
var Uu = function(e) {
  return au.mostReadable(e, [Tn, "#FFFFFF"]).toString();
};
var Fu = function(e) {
  return ru().get.rgb(e);
};
var Bu = function(e) {
  var t = new ArrayBuffer(4), r2 = new Uint32Array(t), n2 = new Uint8Array(t), o2 = Fu(e);
  return n2[0] = o2[0], n2[1] = o2[1], n2[2] = o2[2], n2[3] = 255 * o2[3], r2[0];
};
var zu = function(e) {
  return [(t = Fu(e))[0] / 255, t[1] / 255, t[2] / 255];
  var t;
};
var Vu = { selected: { rings: [{ widthFactor: 0.05, color: En }, { widthFactor: 0.1, color: Pn }], shadow: { width: 10, opacity: 1, color: Sn } }, default: { rings: [] } };
var Wu = { selected: { rings: [{ color: En, width: 2 }, { color: Pn, width: 4 }], shadow: { width: 18, opacity: 1, color: Sn } }, default: { rings: [] } };
var qu = 0.75;
var Gu = { noPan: false, outOnly: false, animated: true };
function Hu(e) {
  return Hu = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, Hu(e);
}
function Yu(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var r2 = 0, n2 = Array(t); r2 < t; r2++) n2[r2] = e[r2];
  return n2;
}
function Xu(e, t) {
  var r2 = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e);
    t && (n2 = n2.filter(function(t2) {
      return Object.getOwnPropertyDescriptor(e, t2).enumerable;
    })), r2.push.apply(r2, n2);
  }
  return r2;
}
function Ku(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r2 = null != arguments[t] ? arguments[t] : {};
    t % 2 ? Xu(Object(r2), true).forEach(function(t2) {
      Zu(e, t2, r2[t2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r2)) : Xu(Object(r2)).forEach(function(t2) {
      Object.defineProperty(e, t2, Object.getOwnPropertyDescriptor(r2, t2));
    });
  }
  return e;
}
function Zu(e, t, r2) {
  return (t = function(e2) {
    var t2 = function(e3) {
      if ("object" != Hu(e3) || !e3) return e3;
      var t3 = e3[Symbol.toPrimitive];
      if (void 0 !== t3) {
        var r3 = t3.call(e3, "string");
        if ("object" != Hu(r3)) return r3;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return String(e3);
    }(e2);
    return "symbol" == Hu(t2) ? t2 : t2 + "";
  }(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
var $u = function(e) {
  return e.captions && e.captions.length > 0 ? e.captions : e.caption && e.caption.length > 0 ? [{ value: e.caption }] : [];
};
var Qu = function(e, t, r2) {
  (0, i.isNil)(e) || (function(e2) {
    return "string" == typeof e2 && null !== Fu(e2);
  }(e) ? t(e) : Jn().warn("Invalid color string for ".concat(r2, ":"), e));
};
function Ju(e) {
  return Ju = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, Ju(e);
}
function es(e, t) {
  var r2 = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e);
    t && (n2 = n2.filter(function(t2) {
      return Object.getOwnPropertyDescriptor(e, t2).enumerable;
    })), r2.push.apply(r2, n2);
  }
  return r2;
}
function ts(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, ns(n2.key), n2);
  }
}
function rs(e, t, r2) {
  return (t = ns(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
function ns(e) {
  var t = function(e2) {
    if ("object" != Ju(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != Ju(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == Ju(t) ? t : t + "";
}
var os = function(e, t) {
  return (0, i.isFinite)(e.x) && (0, i.isFinite)(e.y) && (0, i.isFinite)(t.x) && (0, i.isFinite)(t.y);
};
var is2 = function(e, t) {
  if (void 0 === e || void 0 === t || !os(e, t)) return false;
  var r2 = t.x - e.x, n2 = t.y - e.y, o2 = jn();
  return r2 * r2 + n2 * n2 < 100 * o2 * o2;
};
var as = function() {
  return e = function e2(t2, r2) {
    !function(e3, t3) {
      if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    }(this, e2), rs(this, "p1", void 0), rs(this, "p2", void 0), rs(this, "unit", void 0), rs(this, "norm", void 0), rs(this, "length", void 0), rs(this, "vector", void 0), this.p1 = t2, this.p2 = r2, this.vector = this.getVector(), this.length = this.getLength(), this.unit = this.getUnitVector(), this.norm = this.getUnitNormalVector();
  }, t = [{ key: "getVector", value: function() {
    return { x: this.p2.x - this.p1.x, y: this.p2.y - this.p1.y };
  } }, { key: "getLength", value: function() {
    var e2 = this.vector, t2 = e2.x, r2 = e2.y;
    return Math.sqrt(t2 * t2 + r2 * r2);
  } }, { key: "getUnitVector", value: function() {
    var e2 = this.vector, t2 = this.length;
    return { x: e2.x / t2, y: e2.y / t2 };
  } }, { key: "getUnitNormalVector", value: function() {
    return { x: this.unit.y, y: -this.unit.x };
  } }], t && ts(e.prototype, t), Object.defineProperty(e, "prototype", { writable: false }), e;
  var e, t;
}();
var us = function(e, t, r2) {
  var n2 = { x: t.x - e.x, y: t.y - e.y }, o2 = function(e2, t2) {
    var r3 = (e2.x * t2.x + e2.y * t2.y) / (t2.x * t2.x + t2.y * t2.y);
    return (0, i.clamp)(r3, 0, 1);
  }({ x: r2.x - e.x, y: r2.y - e.y }, n2), a2 = e.x + o2 * n2.x, u2 = e.y + o2 * n2.y, s2 = a2 - r2.x, c2 = u2 - r2.y;
  return Math.sqrt(s2 * s2 + c2 * c2);
};
var ss = function(e, t, r2, n2) {
  if (t.x === r2.x && t.y === r2.y) return t;
  var o2 = t.y - e.y, i2 = e.x - t.x, a2 = o2 * e.x + i2 * e.y, u2 = n2.y - r2.y, s2 = r2.x - n2.x, c2 = u2 * r2.x + s2 * r2.y, l2 = o2 * s2 - u2 * i2;
  return 0 === l2 ? null : { x: (s2 * a2 - i2 * c2) / l2, y: (o2 * c2 - u2 * a2) / l2 };
};
var cs = function(e, t, r2, n2) {
  var o2, i2, a2, u2 = 1e9, s2 = function(e2) {
    for (var t2 = 1; t2 < arguments.length; t2++) {
      var r3 = null != arguments[t2] ? arguments[t2] : {};
      t2 % 2 ? es(Object(r3), true).forEach(function(t3) {
        rs(e2, t3, r3[t3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(r3)) : es(Object(r3)).forEach(function(t3) {
        Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(r3, t3));
      });
    }
    return e2;
  }({}, e), c2 = { x: 0, y: 0 };
  for (i2 = 1; i2 < 10; i2++) a2 = 0.1 * i2, c2.x = Math.pow(1 - a2, 2) * e.x + 2 * a2 * (1 - a2) * r2.x + Math.pow(a2, 2) * t.x, c2.y = Math.pow(1 - a2, 2) * e.y + 2 * a2 * (1 - a2) * r2.y + Math.pow(a2, 2) * t.y, i2 > 0 && (u2 = (o2 = us(s2, c2, n2)) < u2 ? o2 : u2), s2.x = c2.x, s2.y = c2.y;
  return u2;
};
function ls(e) {
  return ls = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, ls(e);
}
function fs(e) {
  return function(e2) {
    if (Array.isArray(e2)) return ys(e2);
  }(e) || function(e2) {
    if ("undefined" != typeof Symbol && null != e2[Symbol.iterator] || null != e2["@@iterator"]) return Array.from(e2);
  }(e) || vs(e) || function() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }();
}
function hs(e, t) {
  var r2 = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e);
    t && (n2 = n2.filter(function(t2) {
      return Object.getOwnPropertyDescriptor(e, t2).enumerable;
    })), r2.push.apply(r2, n2);
  }
  return r2;
}
function ds(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r2 = null != arguments[t] ? arguments[t] : {};
    t % 2 ? hs(Object(r2), true).forEach(function(t2) {
      ps(e, t2, r2[t2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r2)) : hs(Object(r2)).forEach(function(t2) {
      Object.defineProperty(e, t2, Object.getOwnPropertyDescriptor(r2, t2));
    });
  }
  return e;
}
function ps(e, t, r2) {
  return (t = function(e2) {
    var t2 = function(e3) {
      if ("object" != ls(e3) || !e3) return e3;
      var t3 = e3[Symbol.toPrimitive];
      if (void 0 !== t3) {
        var r3 = t3.call(e3, "string");
        if ("object" != ls(r3)) return r3;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return String(e3);
    }(e2);
    return "symbol" == ls(t2) ? t2 : t2 + "";
  }(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
function vs(e, t) {
  if (e) {
    if ("string" == typeof e) return ys(e, t);
    var r2 = {}.toString.call(e).slice(8, -1);
    return "Object" === r2 && e.constructor && (r2 = e.constructor.name), "Map" === r2 || "Set" === r2 ? Array.from(e) : "Arguments" === r2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r2) ? ys(e, t) : void 0;
  }
}
function ys(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var r2 = 0, n2 = Array(t); r2 < t; r2++) n2[r2] = e[r2];
  return n2;
}
var bs = "…";
var ms3 = function(e) {
  return !(!e || !isNaN(Number(e)) || e.toLowerCase() === e.toUpperCase()) && e === e.toUpperCase();
};
var gs = function(e) {
  var t = e[e.length - 1], r2 = e[e.length - 2];
  return !(!t || !isNaN(Number(t)) || t.toLowerCase() === t.toUpperCase()) && !(!r2 || !isNaN(Number(r2)) || r2.toLowerCase() === r2.toUpperCase()) && ms3(t) && !ms3(r2);
};
var _s = function(e) {
  return " 	\n\r\v".includes(e);
};
var ws = function(e, t, r2, n2) {
  for (var o2, i2 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4], a2 = [], u2 = [], s2 = 0, c2 = 0, l2 = false, f2 = false, h2 = 0; h2 < n2; h2++) a2[h2] = r2(h2, n2);
  for (var d2, p3 = function() {
    o2 = e.slice(s2, v3);
    var r3, h3 = t(o2), d3 = a2[c2];
    if (h3 > d3 || (r3 = e[v3 - 1], "\n\r\v".includes(r3))) {
      if (!(c2 < n2 - 1)) {
        if (i2) return { v: [] };
        for (var p4 = v3, y3 = function() {
          return e[p4 - 1];
        }; h3 > d3; ) {
          for (p4 -= 1; _s(y3()); ) p4 -= 1;
          if (!(p4 - s2 > 1)) {
            o2 = "", f2 = true, l2 = false;
            break;
          }
          o2 = e.slice(s2, p4), h3 = t(o2), f2 = true, l2 = false;
        }
        return u2[c2] = { text: o2, hasEllipsisChar: f2, hasHyphenChar: l2 }, { v: u2 };
      }
      l2 = false, f2 = false;
      var b2 = function(e2) {
        var t2 = e2.length, r4 = Math.min(t2 - 1, 3);
        if (1 === t2) return { hyphen: false, cnt: 0 };
        for (var n3 = 0; n3 < r4; n3++) {
          var o3 = e2[e2.length - (n3 + 1)];
          if (" " === o3 || o3.toLowerCase() === o3.toUpperCase()) return { hyphen: false, cnt: n3 + 1 };
          var i3 = e2.slice(0, e2.length - n3);
          if (gs(i3)) return { hyphen: false, cnt: n3 + 1 };
        }
        return { hyphen: true, cnt: 1 };
      }(o2), m2 = v3 - b2.cnt;
      if (b2.hyphen) for (o2 = e.slice(s2, m2), h3 = t(o2), l2 = true; h3 > d3; ) {
        if (!(m2 - s2 > 1)) {
          o2 = e[s2], m2 = s2 + 1, h3 = t(o2), l2 = false;
          break;
        }
        m2 -= 1, o2 = e.slice(s2, m2), h3 = t(o2), l2 = true;
      }
      else o2 = (o2 = e.slice(s2, m2)).trim();
      u2[c2] = { text: o2, hasEllipsisChar: f2, hasHyphenChar: l2 }, s2 = m2, c2 += 1;
    }
  }, v3 = 1; v3 <= e.length; v3++) if (d2 = p3()) return d2.v;
  return o2 = e.slice(s2, e.length), u2[c2] = { text: o2, hasEllipsisChar: f2, hasHyphenChar: false }, u2;
};
var Os = function() {
  var e = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : []).reduce(function(e2, t, r2) {
    var n2 = t.value;
    if (n2) {
      var o2 = "".concat(r2 > 0 && e2.length ? ", " : "").concat(n2);
      return [].concat(fs(e2), [ds(ds({}, t), {}, { value: o2, chars: o2.split("").map(function(n3, o3) {
        var i2, a2;
        return 0 !== r2 && e2.length ? o3 < 2 ? null : fs(null !== (i2 = t.styles) && void 0 !== i2 ? i2 : []) : fs(null !== (a2 = t.styles) && void 0 !== a2 ? a2 : []);
      }) })]);
    }
    return e2;
  }, []);
  return { stylesPerChar: e.reduce(function(e2, t) {
    return [].concat(fs(e2), fs(t.chars));
  }, []), fullCaption: e.map(function(e2) {
    return e2.value;
  }).join("") };
};
function Ss(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var r2 = 0, n2 = Array(t); r2 < t; r2++) n2[r2] = e[r2];
  return n2;
}
var Es = [[0.04, 1], [100, 2]];
var Ps = [[0.8, 1.1], [3, 1.6], [8, 2.5]];
var Ts = [[Ps[0][0], 1], [100, 1.25]];
var xs = function(e, t) {
  if (e.includes("rgba")) return e;
  if (e.includes("rgb")) {
    var r2 = e.substr(e.indexOf("(") + 1).replace(")", "").split(",");
    return "rgba(".concat(r2[0], ",").concat(r2[1], ",").concat(r2[2], ",").concat(t, ")");
  }
  var n2 = ru().get.rgb(e);
  return null === n2 ? e : "rgba(".concat(n2[0], ",").concat(n2[1], ",").concat(n2[2], ",").concat(t, ")");
};
var Cs = function(e, t, r2, n2) {
  var o2 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], i2 = arguments.length > 5 && void 0 !== arguments[5] && arguments[5], a2 = n2.headPosition, u2 = n2.headAngle, s2 = n2.headHeight, c2 = n2.headChinHeight, l2 = n2.headWidth, f2 = Math.cos(u2), h2 = Math.sin(u2), d2 = function(e2, t2) {
    return { x: a2.x + e2 * f2 - t2 * h2, y: a2.y + e2 * h2 + t2 * f2 };
  }, p3 = [d2(c2 - s2, 0), d2(-s2, l2 / 2), d2(0, 0), d2(-s2, -l2 / 2)], v3 = { lineWidth: e.lineWidth, strokeStyle: e.strokeStyle, fillStyle: e.fillStyle };
  e.lineWidth = t, e.strokeStyle = r2, e.fillStyle = r2, function(e2, t2, r3, n3) {
    if (e2.beginPath(), t2.length > 0) {
      var o3 = t2[0];
      e2.moveTo(o3.x, o3.y);
    }
    for (var i3 = 1; i3 < t2.length; i3++) {
      var a3 = t2[i3];
      e2.lineTo(a3.x, a3.y);
    }
    e2.closePath(), r3 && e2.fill(), n3 && e2.stroke();
  }(e, p3, o2, i2), e.lineWidth = v3.lineWidth, e.strokeStyle = v3.strokeStyle, e.fillStyle = v3.fillStyle;
};
var js = function(e, t, r2, n2, o2) {
  var i2 = n2;
  o2.forEach(function(n3) {
    var o3 = n3.width, a2 = n3.color, u2 = i2 + o3;
    e.beginPath(), e.fillStyle = a2, e.arc(t, r2, u2, 0, 2 * Math.PI, false), e.arc(t, r2, i2, 2 * Math.PI, 0, true), e.fill(), e.closePath(), i2 = u2;
  });
};
var As = function(e, t, r2, n2) {
  e.beginPath(), e.arc(t, r2, n2, 0, 2 * Math.PI, false), e.closePath();
};
var ks = function(e, t, r2, n2, o2) {
  e.beginPath(), e.fillStyle = n2, As(e, t, r2, o2), e.fill(), e.closePath();
};
function Rs(e, t) {
  var r2 = t.find(function(t2) {
    return e < t2[0];
  }), n2 = t[t.length - 1][1];
  return void 0 !== r2 ? r2[1] : n2;
}
var Is = function(e, t) {
  return { x: e.x + t.x, y: e.y + t.y };
};
var Ms = function(e, t) {
  return { x: e.x - t.x, y: e.y - t.y };
};
var Ns = function(e, t) {
  return { x: e.x * t, y: e.y * t };
};
var Ds = function(e, t) {
  return e.x * t.x + e.y * t.y;
};
var Ls = function(e, t) {
  return function(e2) {
    return Math.sqrt(e2.x * e2.x + e2.y * e2.y);
  }(Ms(e, t));
};
var Us = function(e, t) {
  return { x: Math.cos(e) * t, y: Math.sin(e) * t };
};
function Fs(e, t) {
  var r2 = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
  if (!r2) {
    if (Array.isArray(e) || (r2 = function(e2, t2) {
      if (e2) {
        if ("string" == typeof e2) return Bs(e2, t2);
        var r3 = {}.toString.call(e2).slice(8, -1);
        return "Object" === r3 && e2.constructor && (r3 = e2.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(e2) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? Bs(e2, t2) : void 0;
      }
    }(e)) || t && e && "number" == typeof e.length) {
      r2 && (e = r2);
      var n2 = 0, o2 = function() {
      };
      return { s: o2, n: function() {
        return n2 >= e.length ? { done: true } : { done: false, value: e[n2++] };
      }, e: function(e2) {
        throw e2;
      }, f: o2 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var i2, a2 = true, u2 = false;
  return { s: function() {
    r2 = r2.call(e);
  }, n: function() {
    var e2 = r2.next();
    return a2 = e2.done, e2;
  }, e: function(e2) {
    u2 = true, i2 = e2;
  }, f: function() {
    try {
      a2 || null == r2.return || r2.return();
    } finally {
      if (u2) throw i2;
    }
  } };
}
function Bs(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var r2 = 0, n2 = Array(t); r2 < t; r2++) n2[r2] = e[r2];
  return n2;
}
var zs = 2 * Math.PI;
var Vs = Math.PI / 2;
var Ws = function(e, t, r2, n2, o2, i2) {
  var a2 = { x: (e.x + t.x) / 2, y: (e.y + t.y) / 2 }, u2 = { x: e.x, y: e.y }, s2 = { x: t.x, y: t.y }, c2 = new as(s2, u2), l2 = function(e2, t2) {
    var r3 = 0;
    return e2 && (r3 += e2), t2 && (r3 -= t2), r3;
  }(n2, r2);
  a2.x += l2 / 2 * c2.unit.x, a2.y += l2 / 2 * c2.unit.y;
  var f2 = i2.size() / 2 - i2.indexOf(o2);
  return a2.x += f2 * c2.unit.x, a2.y += f2 * c2.unit.y, a2;
};
var qs = function(e) {
  var t = jn(), r2 = e.size, n2 = e.selected;
  return ((null != r2 ? r2 : gn) + 4 + (true === n2 ? 4 : 0)) * t;
};
var Gs = function(e, t) {
  var r2 = jn();
  e.shadowColor = t.color, e.shadowBlur = t.width * r2, e.shadowOffsetX = 0, e.shadowOffsetY = 0;
};
var Hs = function(e) {
  e.shadowColor = "rgba(0,0,0,0)", e.shadowBlur = 0, e.shadowOffsetX = 0, e.shadowOffsetY = 0;
};
var Ys = function(e, t, r2, n2, o2) {
  var i2 = arguments.length > 5 && void 0 !== arguments[5] && arguments[5], a2 = function(e2) {
    var t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], r3 = e2.norm.x, n3 = e2.norm.y;
    return t2 ? { x: -r3, y: -n3 } : e2.norm;
  }, u2 = jn(), s2 = t.indexOf(e), c2 = (t.size() - 1) / 2, l2 = s2 > c2, f2 = Math.abs(s2 - c2), h2 = o2 ? 17 * t.maxFontSize() : 8, d2 = (t.size() - 1) * h2 * u2, p3 = function(e2, t2, r3, n3, o3, i3, a3) {
    var u3, s3 = arguments.length > 7 && void 0 !== arguments[7] && arguments[7], c3 = jn(), l3 = e2.size(), f3 = l3 > 1, h3 = e2.relIsOppositeDirection(i3), d3 = h3 ? r3 : t2, p4 = h3 ? t2 : r3, v5 = e2.waypointPath, y4 = null == v5 ? void 0 : v5.points, b3 = null == v5 ? void 0 : v5.from, m3 = null == v5 ? void 0 : v5.to, g3 = is2(d3, b3) && is2(p4, m3) || is2(p4, b3) && is2(d3, m3), _3 = g3 ? y4[1] : null, w3 = g3 ? y4[y4.length - 2] : null, O3 = qs(d3), S3 = qs(p4), E3 = function(e3, t3) {
      return Math.atan2(e3.y - t3.y, e3.x - t3.x);
    }, P3 = Math.max(Math.PI, zs / (l3 / 2)), T3 = f3 ? n3 * P3 * (a3 ? 1 : -1) / (null !== (u3 = d3.size) && void 0 !== u3 ? u3 : gn) : 0, x4 = E3(g3 ? _3 : p4, d3), C3 = g3 ? E3(p4, w3) : x4, j3 = function(e3, t3, r4, n4) {
      return { x: e3.x + Math.cos(t3) * r4 * (n4 ? -1 : 1), y: e3.y + Math.sin(t3) * r4 * (n4 ? -1 : 1) };
    }, A3 = function(e3, t3) {
      return j3(d3, x4 + e3, t3, false);
    }, k2 = function(e3, t3) {
      return j3(p4, C3 - e3, t3, true);
    }, R2 = function(e3, t3) {
      return { x: e3.x + (t3.x - e3.x) / 2, y: e3.y + (t3.y - e3.y) / 2 };
    }, I2 = function(e3, t3) {
      return Math.sqrt((e3.x - t3.x) * (e3.x - t3.x) + (e3.y - t3.y) * (e3.y - t3.y)) * c3;
    }, M2 = A3(T3, O3), N2 = k2(T3, S3), D2 = f3 ? A3(0, O3) : null, L2 = f3 ? k2(0, S3) : null, U2 = 200 * c3, F2 = [];
    if (g3) {
      var B2 = I2(M2, _3) < U2;
      if (f3 && !B2) {
        var z2 = R2(D2, _3);
        F2.push(new as(M2, z2)), F2.push(new as(z2, _3));
      } else F2.push(new as(M2, _3));
      for (var V2 = 2; V2 < y4.length - 1; V2++) F2.push(new as(y4[V2 - 1], y4[V2]));
      var W2 = I2(N2, w3) < U2;
      if (f3 && !W2) {
        var q2 = R2(L2, w3);
        F2.push(new as(w3, q2)), F2.push(new as(q2, N2));
      } else F2.push(new as(w3, N2));
    } else {
      var G2 = f3 ? I2(D2, L2) : 0;
      if (f3 && G2 > 2 * (30 * c3 + Math.min(O3, S3))) if (s3) {
        var H2 = Ws(d3, p4, O3, S3, i3, e2);
        F2.push(new as(M2, H2)), F2.push(new as(H2, N2));
      } else {
        var Y2 = n3 * o3, X2 = 30 + O3, K3 = Math.sqrt(X2 * X2 + Y2 * Y2), Z2 = 30 + S3, $3 = Math.sqrt(Z2 * Z2 + Y2 * Y2), Q2 = A3(0, K3), J2 = k2(0, $3);
        F2.push(new as(M2, Q2)), F2.push(new as(Q2, J2)), F2.push(new as(J2, N2));
      }
      else if (G2 > (O3 + S3) / 2) {
        var ee2 = Ws(d3, p4, O3, S3, i3, e2);
        F2.push(new as(M2, ee2)), F2.push(new as(ee2, N2));
      } else F2.push(new as(M2, N2));
    }
    return F2;
  }(t, r2, n2, f2, h2, e, l2, i2), v3 = [], y3 = p3[0], b2 = a2(y3, l2);
  v3.push({ x: y3.p1.x + b2.x, y: y3.p1.y + b2.y });
  for (var m2 = 1; m2 < p3.length; m2++) if (1 === t.size()) v3.push(p3[m2 - 1].p2);
  else {
    var g2 = p3[m2 - 1], _2 = p3[m2], w2 = a2(g2, l2), O2 = a2(_2, l2), S2 = Is(g2.p1, Ns(w2, d2 / 2)), E2 = Is(g2.p2, Ns(w2, d2 / 2)), P2 = Is(_2.p1, Ns(O2, d2 / 2)), T2 = Is(_2.p2, Ns(O2, d2 / 2)), x3 = null;
    Ds(w2, O2) < 0.99 && (x3 = ss(S2, E2, P2, T2));
    var C2 = null !== x3 ? Ms(x3, g2.p2) : Ns(w2, d2 / 2);
    v3.push(Is(g2.p2, Ns(C2, f2 / c2)));
  }
  var j2 = p3[p3.length - 1], A2 = a2(j2, l2);
  return v3.push({ x: j2.p2.x + A2.x, y: j2.p2.y + A2.y }), t.relIsOppositeDirection(e) ? v3.reverse() : v3;
};
var Xs = function(e, t, r2, n2, o2, i2, a2, u2) {
  var s2, c2 = arguments.length > 8 && void 0 !== arguments[8] && arguments[8], l2 = jn(), f2 = o2.selected, h2 = o2.width, d2 = o2.disabled, p3 = o2.captionAlign, v3 = void 0 === p3 ? "top" : p3, y3 = o2.captionSize, b2 = void 0 === y3 ? 1 : y3, m2 = $u(o2), g2 = m2.length > 0 ? null === (s2 = Os(m2)) || void 0 === s2 ? void 0 : s2.fullCaption : "";
  if (void 0 !== g2) {
    var _2 = 6 * b2 * l2, w2 = true === f2 ? "bold" : "normal", O2 = g2;
    e.fillStyle = true === d2 ? a2.fontColor : u2, e.font = "".concat(w2, " ").concat(_2, "px ").concat('"Open Sans", sans-serif');
    var S2 = function(t2) {
      return e.measureText(t2).width;
    }, E2 = (null != h2 ? h2 : 1) * (true === f2 ? 1.5 : 1), P2 = S2(O2);
    if (P2 > n2) {
      var T2 = ws(O2, S2, function() {
        return n2;
      }, 1, false)[0];
      O2 = true === T2.hasEllipsisChar ? "".concat(T2.text, "...") : O2, P2 = n2;
    }
    var x3 = Math.cos(r2), C2 = Math.sin(r2), j2 = { x: t.x, y: t.y }, A2 = j2.x, k2 = j2.y, R2 = r2;
    c2 && (R2 = r2 - Vs, A2 += 2 * _2 * x3, k2 += 2 * _2 * C2, R2 -= Vs);
    var I2 = (1 + b2) * l2, M2 = "bottom" === v3 ? _2 / 2 + E2 + I2 : -(E2 + I2);
    e.translate(A2, k2), e.rotate(R2), e.fillText(O2, -P2 / 2, M2), e.rotate(-R2), e.translate(-A2, -k2);
    var N2 = 2 * M2 * Math.sin(r2), D2 = 2 * M2 * Math.cos(r2), L2 = { position: { x: t.x - N2, y: t.y + D2 }, rotation: c2 ? r2 - Math.PI : r2, width: n2 / l2, height: (_2 + I2) / l2 };
    i2.setLabelInfo(o2.id, L2);
  }
};
var Ks = function(e, t, r2, n2, o2) {
  if (e.beginPath(), e.moveTo(t[0].x, t[0].y), o2 && t.length > 2) {
    for (var i2 = 1; i2 < t.length - 2; ) {
      var a2 = (t[i2].x + t[i2 + 1].x) / 2, u2 = (t[i2].y + t[i2 + 1].y) / 2;
      e.quadraticCurveTo(t[i2].x, t[i2].y, a2, u2), i2 += 1;
    }
    e.quadraticCurveTo(t[i2].x, t[i2].y, t[i2 + 1].x, t[i2 + 1].y);
  } else for (var s2 = 1; s2 < t.length; s2++) e.lineTo(t[s2].x, t[s2].y);
  e.lineWidth = r2, e.strokeStyle = n2, e.lineCap = "round", e.stroke();
};
var Zs = function(e) {
  return e.rings[0].width * jn() * 1.5;
};
var $s = function(e) {
  return 6 * e * jn();
};
var Qs = function(e, t, r2) {
  var n2, o2;
  return { widthAlign: t / 2 * (null !== (n2 = e[0]) && void 0 !== n2 ? n2 : 0), heightAlign: r2 / 2 * (null !== (o2 = e[1]) && void 0 !== o2 ? o2 : 0) };
};
var Js = function(e, t, r2) {
  var n2, o2, i2 = r2.indexOf(e), a2 = null !== (n2 = r2.angles[i2]) && void 0 !== n2 ? n2 : 0, u2 = a2 - Wa / 2, s2 = a2 + Wa / 2, c2 = null !== (o2 = e.width) && void 0 !== o2 ? o2 : 1, l2 = jn(), f2 = qs(t), h2 = { x: t.x + Math.cos(u2) * (f2 + c2 / 2), y: t.y + Math.sin(u2) * (f2 + c2 / 2) }, d2 = { x: t.x + Math.cos(s2) * (f2 + c2 / 2), y: t.y + Math.sin(s2) * (f2 + c2 / 2) }, p3 = { x: t.x + Math.cos(a2) * (f2 + 35 * l2), y: t.y + Math.sin(a2) * (f2 + 35 * l2) };
  return { startAngle: u2, endAngle: s2, startPoint: h2, endPoint: d2, apexPoint: p3, control1Point: { x: p3.x + 25 * Math.cos(a2 - Vs) * l2 / 2, y: p3.y + 25 * Math.sin(a2 - Vs) * l2 / 2 }, control2Point: { x: p3.x + 25 * Math.cos(a2 + Vs) * l2 / 2, y: p3.y + 25 * Math.sin(a2 + Vs) * l2 / 2 } };
};
var ec = function(e, t, r2, n2, o2, i2) {
  e.beginPath(), e.moveTo(t.x, t.y), e.quadraticCurveTo(o2.x, o2.y, n2.x, n2.y), e.quadraticCurveTo(i2.x, i2.y, r2.x, r2.y), e.stroke();
};
var tc = function(e, t, r2, n2, o2, i2, a2, u2, s2, c2) {
  var l2 = !(arguments.length > 10 && void 0 !== arguments[10]) || arguments[10];
  os(r2, n2) && (r2.id === n2.id ? function(e2, t2, r3, n3, o3, i3, a3, u3) {
    var s3 = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : za, c3 = t2.overlayIcon, l3 = t2.selected, f2 = t2.width, h2 = t2.hovered, d2 = t2.disabled, p3 = t2.color, v3 = Js(t2, r3, n3), y3 = v3.startPoint, b2 = v3.endPoint, m2 = v3.apexPoint, g2 = v3.control1Point, _2 = v3.control2Point, w2 = a3.rings, O2 = a3.shadow, S2 = jn(), E2 = w2[0].color, P2 = w2[1].color, T2 = w2[0].width * S2, x3 = w2[1].width * S2, C2 = 40 * S2, j2 = (null != f2 ? f2 : 1) * S2, A2 = j2 > 1 ? j2 / 2 : 1, k2 = 9 * A2, R2 = 2 * A2, I2 = 7 * A2, M2 = true === l3, N2 = true === d2, D2 = void 0 !== c3, L2 = Math.atan2(b2.y - _2.y, b2.x - _2.x), U2 = M2 ? T2 * Math.sqrt(1 + 2 * k2 / I2 * (2 * k2 / I2)) : 0, F2 = { x: b2.x - Math.cos(L2) * (0.5 * k2 - R2 + U2), y: b2.y - Math.sin(L2) * (0.5 * k2 - R2 + U2) }, B2 = { headPosition: { x: b2.x + Math.cos(L2) * (0.5 * k2 - R2 - U2), y: b2.y + Math.sin(L2) * (0.5 * k2 - R2 - U2) }, headAngle: L2, headHeight: k2, headChinHeight: R2, headWidth: I2 };
    if (e2.save(), e2.lineCap = "round", M2 && (Gs(e2, O2), e2.lineWidth = j2 + x3, e2.strokeStyle = P2, ec(e2, y3, F2, m2, g2, _2), Cs(e2, x3, P2, B2, false, true), Hs(e2), e2.lineWidth = j2 + T2, e2.strokeStyle = E2, ec(e2, y3, F2, m2, g2, _2), Cs(e2, T2, E2, B2, false, true)), e2.lineWidth = j2, true === h2 && !M2 && !N2) {
      var z2 = O2.color;
      Gs(e2, O2), e2.strokeStyle = z2, e2.fillStyle = z2, ec(e2, y3, F2, m2, g2, _2), Cs(e2, j2, z2, B2), Hs(e2);
    }
    var V2 = N2 ? u3.color : null != p3 ? p3 : s3;
    if (e2.fillStyle = V2, e2.strokeStyle = V2, ec(e2, y3, F2, m2, g2, _2), Cs(e2, j2, V2, B2), i3 || D2) {
      var W2, q2 = n3.indexOf(t2), G2 = null !== (W2 = n3.angles[q2]) && void 0 !== W2 ? W2 : 0, H2 = m2.x - Math.cos(L2) * (U2 / 4), Y2 = m2.y - Math.sin(L2) * (U2 / 4), X2 = (G2 + Vs) % zs, K3 = (G2 + zs) % zs < Math.PI;
      if (i3 && Xs(e2, { x: H2, y: Y2 }, X2, C2, t2, n3, u3, s3, K3), D2) {
        var Z2 = c3.position, $3 = void 0 === Z2 ? [0, 0] : Z2, Q2 = c3.url, J2 = c3.size, ee2 = $s(void 0 === J2 ? 1 : J2), te2 = Qs($3, C2, ee2), re2 = te2.widthAlign, ne2 = te2.heightAlign + (M2 ? Zs(a3) : 0) * ($3[1] < 0 ? -1 : 1);
        e2.save(), e2.translate(H2, Y2), K3 ? (e2.rotate(X2 - Math.PI), e2.translate(2 * -re2, 2 * -ne2)) : e2.rotate(X2);
        var oe2 = ee2 / 2, ie2 = -oe2 + re2, ae2 = -oe2 + ne2;
        e2.drawImage(o3.getImage(Q2), ie2, ae2, ee2, ee2), e2.restore();
      }
    }
    e2.restore();
  }(e, t, r2, o2, i2, a2, u2, s2, c2) : function(e2, t2, r3, n3, o3, i3, a3, u3, s3, c3) {
    var l3 = arguments.length > 10 && void 0 !== arguments[10] ? arguments[10] : za, f2 = t2.overlayIcon, h2 = t2.color, d2 = t2.disabled, p3 = t2.selected, v3 = t2.width, y3 = t2.hovered, b2 = t2.captionAlign, m2 = true === p3, g2 = true === d2, _2 = void 0 !== f2, w2 = s3.rings, O2 = s3.shadow, S2 = Ys(t2, o3, r3, n3, a3, u3), E2 = jn(), P2 = function(e3) {
      var t3, r4 = true === e3.selected ? 1.5 : 1;
      return (null !== (t3 = e3.width) && void 0 !== t3 ? t3 : 1) * r4 * jn();
    }(t2), T2 = g2 ? c3.color : null != h2 ? h2 : l3, x3 = w2[0].width * E2, C2 = w2[1].width * E2, j2 = E2 * (v3 > 1 ? v3 / 2 : 1), A2 = 9 * j2, k2 = 2 * j2, R2 = 7 * j2, I2 = Ls(S2[S2.length - 2], S2[S2.length - 1]), M2 = 2 * A2, N2 = m2 ? x3 * Math.sqrt(1 + M2 / R2 * (M2 / R2)) : 0, D2 = 2 - N2, L2 = Math.floor(S2.length / 2);
    S2.length > 2 && m2 && I2 < A2 + N2 - k2 && (D2 += I2, N2 -= I2 / 2 + k2, S2.pop(), L2 = Math.floor(S2.length / 2));
    var U2, F2, B2 = S2[S2.length - 2], z2 = S2[S2.length - 1], V2 = (U2 = B2, F2 = z2, Math.atan2(F2.y - U2.y, F2.x - U2.x)), W2 = A2 / 2 + N2, q2 = Math.cos(V2), G2 = Math.sin(V2);
    S2[S2.length - 1] = { x: z2.x - q2 * W2, y: z2.y - G2 * W2 };
    var H2, Y2 = { headPosition: { x: z2.x + q2 * D2, y: z2.y + G2 * D2 }, headAngle: V2, headHeight: A2, headChinHeight: k2, headWidth: R2 }, X2 = Fs(S2);
    try {
      for (X2.s(); !(H2 = X2.n()).done; ) {
        var K3 = H2.value;
        K3.x = Math.round(K3.x), K3.y = Math.round(K3.y);
      }
    } catch (e3) {
      X2.e(e3);
    } finally {
      X2.f();
    }
    if (e2.save(), m2) {
      var Z2 = w2[0].color, $3 = w2[1].color, Q2 = Math.atan2(S2[1].y - S2[0].y, S2[1].x - S2[0].x), J2 = Us(Q2, Zs(s3));
      S2[0] = Is(S2[0], J2), Gs(e2, O2), Ks(e2, S2, P2 + C2, $3, u3), Cs(e2, C2, $3, Y2, false, true), Hs(e2), Ks(e2, S2, P2 + x3, Z2, u3), Cs(e2, x3, Z2, Y2, false, true);
    }
    if (true === y3 && !m2 && !g2) {
      var ee2 = O2.color;
      Gs(e2, O2), Ks(e2, S2, P2, ee2, u3), Cs(e2, P2, ee2, Y2), Hs(e2);
    }
    if (Ks(e2, S2, P2, T2, u3), Cs(e2, P2, T2, Y2), a3 || _2) {
      var te2, re2, ne2, oe2, ie2, ae2 = r3.x > n3.x, ue2 = S2[L2];
      1 & ~S2.length ? (te2 = S2[ae2 ? L2 : L2 - 1], re2 = S2[ae2 ? L2 - 1 : L2], ne2 = (te2.x + re2.x) / 2, oe2 = (te2.y + re2.y) / 2, ie2 = Math.atan2(re2.y - te2.y, re2.x - te2.x)) : (te2 = S2[ae2 ? L2 + 1 : L2 - 1], re2 = S2[ae2 ? L2 - 1 : L2 + 1], u3 ? (ne2 = (ue2.x + (te2.x + re2.x) / 2) / 2, oe2 = (ue2.y + (te2.y + re2.y) / 2) / 2, ie2 = ae2 ? Math.atan2(r3.y - n3.y, r3.x - n3.x) : Math.atan2(n3.y - r3.y, n3.x - r3.x)) : (Ls(ue2, te2) > Ls(ue2, re2) ? re2 = ue2 : te2 = ue2, ne2 = (te2.x + re2.x) / 2, oe2 = (te2.y + re2.y) / 2, ie2 = Math.atan2(re2.y - te2.y, re2.x - te2.x)));
      var se2 = m2 ? Us(ie2 + Vs, Zs(s3)) : { x: 0, y: 0 }, ce2 = Ls(te2, re2);
      if (a3) {
        var le2 = "bottom" === b2 ? 1 : -1, fe2 = { x: ne2 + se2.x * le2, y: oe2 + se2.y * le2 };
        Xs(e2, fe2, ie2, ce2, t2, o3, c3, l3);
      }
      if (_2) {
        var he2 = f2.position, de2 = void 0 === he2 ? [0, 0] : he2, pe2 = f2.url, ve2 = f2.size, ye2 = $s(void 0 === ve2 ? 1 : ve2), be2 = Qs(de2, ce2, ye2), me2 = be2.widthAlign, ge2 = be2.heightAlign, _e2 = de2[1] < 0 ? -1 : 1, we2 = se2.x * _e2, Oe2 = se2.y * _e2, Se2 = ye2 / 2;
        e2.translate(ne2, oe2), e2.rotate(ie2);
        var Ee2 = -Se2 + we2 + me2, Pe2 = -Se2 + Oe2 + ge2;
        e2.drawImage(i3.getImage(pe2), Ee2, Pe2, ye2, ye2), e2.rotate(-ie2), e2.translate(-ne2, -oe2);
      }
    }
    e2.restore();
  }(e, t, r2, n2, o2, i2, a2, l2, u2, s2, c2));
};
var rc = function(e, t, r2, n2) {
  var o2 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4], i2 = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];
  return os(r2, n2) ? r2.id === n2.id ? function(e2, t2, r3) {
    for (var n3 = Js(e2, t2, r3), o3 = { left: 1 / 0, top: 1 / 0, right: -1 / 0, bottom: -1 / 0 }, i3 = ["startPoint", "endPoint", "apexPoint", "control1Point", "control2Point"], a2 = 0; a2 < i3.length; a2++) {
      var u2 = n3[i3[a2]], s2 = u2.x, c2 = u2.y;
      s2 < o3.left && (o3.left = s2), s2 > o3.right && (o3.right = s2), c2 < o3.top && (o3.top = c2), c2 > o3.bottom && (o3.bottom = c2);
    }
    return o3;
  }(e, r2, t) : function(e2, t2, r3, n3, o3, i3) {
    var a2, u2 = { left: 1 / 0, top: 1 / 0, right: -1 / 0, bottom: -1 / 0 }, s2 = Fs(Ys(e2, t2, r3, n3, o3, i3));
    try {
      for (s2.s(); !(a2 = s2.n()).done; ) {
        var c2 = a2.value, l2 = c2.x, f2 = c2.y;
        l2 < u2.left && (u2.left = l2), l2 > u2.right && (u2.right = l2), f2 < u2.top && (u2.top = f2), f2 > u2.bottom && (u2.bottom = f2);
      }
    } catch (e3) {
      s2.e(e3);
    } finally {
      s2.f();
    }
    return u2;
  }(e, t, r2, n2, o2, i2) : null;
};
function nc(e, t) {
  return function(e2) {
    if (Array.isArray(e2)) return e2;
  }(e) || function(e2, t2) {
    var r2 = null == e2 ? null : "undefined" != typeof Symbol && e2[Symbol.iterator] || e2["@@iterator"];
    if (null != r2) {
      var n2, o2, i2, a2, u2 = [], s2 = true, c2 = false;
      try {
        if (i2 = (r2 = r2.call(e2)).next, 0 === t2) {
          if (Object(r2) !== r2) return;
          s2 = false;
        } else for (; !(s2 = (n2 = i2.call(r2)).done) && (u2.push(n2.value), u2.length !== t2); s2 = true) ;
      } catch (e3) {
        c2 = true, o2 = e3;
      } finally {
        try {
          if (!s2 && null != r2.return && (a2 = r2.return(), Object(a2) !== a2)) return;
        } finally {
          if (c2) throw o2;
        }
      }
      return u2;
    }
  }(e, t) || function(e2, t2) {
    if (e2) {
      if ("string" == typeof e2) return oc(e2, t2);
      var r2 = {}.toString.call(e2).slice(8, -1);
      return "Object" === r2 && e2.constructor && (r2 = e2.constructor.name), "Map" === r2 || "Set" === r2 ? Array.from(e2) : "Arguments" === r2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r2) ? oc(e2, t2) : void 0;
    }
  }(e, t) || function() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }();
}
function oc(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var r2 = 0, n2 = Array(t); r2 < t; r2++) n2[r2] = e[r2];
  return n2;
}
var ic = function(e) {
  var t = e.x, r2 = void 0 === t ? 0 : t, n2 = e.y, o2 = void 0 === n2 ? 0 : n2, i2 = e.size, a2 = void 0 === i2 ? gn : i2;
  return { top: o2 - a2, left: r2 - a2, right: r2 + a2, bottom: o2 + a2 };
};
var ac = function(e, t, r2, n2, o2, i2) {
  var a2 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : _n, u2 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : 1, s2 = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 1, c2 = t.x, l2 = void 0 === c2 ? 0 : c2, f2 = t.y, h2 = void 0 === f2 ? 0 : f2, d2 = t.size, p3 = void 0 === d2 ? gn : d2, v3 = t.captionAlign, y3 = void 0 === v3 ? "center" : v3, b2 = t.captionSize, m2 = void 0 === b2 ? 1 : b2, g2 = t.disabled, _2 = t.activated, w2 = t.selected, O2 = t.hovered, S2 = t.id, E2 = t.icon, P2 = t.overlayIcon, T2 = $u(t), x3 = jn(), C2 = function(e2, t2, r3) {
    var n3 = e2.selected ? r3.selected.rings : r3.default.rings;
    if (!n3.length) {
      var o3 = t2.getById(e2.id);
      return void 0 !== o3 && Object.entries(o3).forEach(function(e3) {
        var t3 = nc(e3, 2), r4 = t3[0], n4 = t3[1];
        r4.startsWith("ring-") && n4.setEndValue(0);
      }), [{ width: 0, color: "" }];
    }
    return n3.map(function(r4, n4) {
      var o4 = r4.widthFactor, i3 = r4.color, a3 = (e2.size || gn) * o4 * jn();
      return { width: t2.getValueForAnimationName(e2.id, "ring-".concat(n4), a3), color: i3 };
    });
  }(t, n2, o2), j2 = C2.reduce(function(e2, t2) {
    return e2 + t2.width;
  }, 0), A2 = p3 * x3, k2 = 2 * A2, R2 = function(e2, t2) {
    if (!e2 || !t2) return { nodeInfoLevel: 0, fontInfoLevel: 1.25, iconInfoLevel: 1 };
    var r3 = jn(), n3 = 1600 * r3 * (1200 * r3), o3 = Math.pow(e2, 2) * Math.PI * Math.pow(t2, 2) / (n3 / 100);
    return { nodeInfoLevel: Rs(o3, Es), fontInfoLevel: Rs(o3, Ps), iconInfoLevel: Rs(o3, Ts) };
  }(A2, s2), I2 = R2.nodeInfoLevel, M2 = R2.fontInfoLevel, N2 = R2.iconInfoLevel, D2 = t.color || a2, L2 = function(e2) {
    return (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : gn) / ({ 1: 3.5, 2: 2.75, 3: 2 }[arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1] + (arguments.length > 3 && void 0 !== arguments[3] && arguments[3] ? 1 : 0)) / e2;
  }(M2, A2, m2, Boolean(E2)), U2 = Uu(D2), F2 = A2;
  if (j2 > 0 && (F2 = A2 + j2), g2) D2 = i2.color, U2 = i2.fontColor;
  else {
    var B2;
    if (_2) {
      var z2 = Date.now() % 1e3 / 1e3, V2 = z2 < 0.7 ? z2 / 0.7 : 0, W2 = xs(D2, 0.4 - 0.4 * V2);
      ks(e, l2, h2, W2, A2 + 0.88 * A2 * V2);
    }
    var q2 = null !== (B2 = o2.selected.shadow) && void 0 !== B2 ? B2 : { width: 0, opacity: 0, color: "" }, G2 = q2.width * x3, H2 = q2.opacity, Y2 = q2.color, X2 = w2 || O2 ? G2 : 0, K3 = n2.getValueForAnimationName(S2, "shadowWidth", X2);
    K3 > 0 && function(e2, t2, r3, n3, o3, i3) {
      var a3 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1, u3 = o3 + i3, s3 = e2.createRadialGradient(t2, r3, o3, t2, r3, u3);
      s3.addColorStop(0, "transparent"), s3.addColorStop(0.01, xs(n3, 0.5 * a3)), s3.addColorStop(0.05, xs(n3, 0.5 * a3)), s3.addColorStop(0.5, xs(n3, 0.12 * a3)), s3.addColorStop(0.75, xs(n3, 0.03 * a3)), s3.addColorStop(1, xs(n3, 0)), e2.fillStyle = s3, As(e2, t2, r3, u3), e2.fill();
    }(e, l2, h2, Y2, F2, K3, H2);
  }
  ks(e, l2, h2, D2, A2), j2 > 0 && js(e, l2, h2, A2, C2);
  var Z2 = Boolean(T2.length), $3 = Boolean(E2);
  if (E2) {
    var Q2 = I2 < 2 || !Z2, J2 = I2 > 0 ? 1 : 0, ee2 = Q2 ? 1 * A2 : 0.75 * A2;
    ee2 /= N2;
    var te2 = Q2 ? 0.5 * ee2 : ee2 * (1 === N2 ? "center" === y3 ? 1.3 : "bottom" === y3 || Q2 ? 1.1 : 0 : "center" === y3 ? 1.35 : "bottom" === y3 || Q2 ? 1.1 : 0), re2 = ee2 / 2;
    ee2 = n2.getValueForAnimationName(S2, "iconSize", ee2), re2 = n2.getValueForAnimationName(S2, "iconXPos", re2), te2 = n2.getValueForAnimationName(S2, "iconYPos", te2);
    var ne2 = e.globalAlpha, oe2 = g2 ? 0.1 : J2;
    e.globalAlpha = n2.getValueForAnimationName(S2, "iconOpacity", oe2);
    var ie2 = "#ffffff" === U2, ae2 = r2.getImage(E2, ie2);
    e.drawImage(ae2, l2 - re2, h2 - te2, Math.floor(ee2), Math.floor(ee2)), e.globalAlpha = ne2;
  }
  if (void 0 !== P2) {
    var ue2, se2, ce2, le2, fe2, he2 = k2 * (null !== (ue2 = P2.size) && void 0 !== ue2 ? ue2 : 1), de2 = he2 / 2 - A2 * (null !== (se2 = null === (ce2 = P2.position) || void 0 === ce2 ? void 0 : ce2[1]) && void 0 !== se2 ? se2 : 0), pe2 = he2 / 2 - A2 * (null !== (le2 = null === (fe2 = P2.position) || void 0 === fe2 ? void 0 : fe2[0]) && void 0 !== le2 ? le2 : 0), ve2 = e.globalAlpha, ye2 = g2 ? 0.1 : 1;
    e.globalAlpha = n2.getValueForAnimationName(S2, "iconOpacity", ye2);
    var be2 = r2.getImage(P2.url);
    e.drawImage(be2, l2 - pe2, h2 - de2, he2, he2), e.globalAlpha = ve2;
  }
  if (Z2) {
    var me2 = I2 < 2 ? 0 : 1, ge2 = n2.getValueForAnimationName(S2, "textOpacity", me2, 0);
    if (ge2 > 0) {
      var _e2, we2, Oe2 = '"Open Sans", sans-serif', Se2 = 2;
      M2 === (null === (_e2 = Ps[1]) || void 0 === _e2 ? void 0 : _e2[1]) ? Se2 = 3 : M2 === (null === (we2 = Ps[2]) || void 0 === we2 ? void 0 : we2[1]) && (Se2 = 4);
      var Ee2 = "center" === y3 ? 0.7 * k2 : 2 * Math.sqrt(Math.pow(k2 / 2, 2) - Math.pow(k2 / 3, 2));
      if (e.fillStyle = xs(U2, ge2), Z2) {
        var Pe2 = Os(T2), Te2 = Pe2.stylesPerChar, xe2 = function(e2, t2, r3, n3, o3, i3, a3) {
          var u3 = function(e3) {
            return /[\u0591-\u07FF\uFB1D-\uFDFD\uFE70-\uFEFC]/.test(e3);
          }(t2) ? t2.split("").reverse().join("") : t2;
          e2.font = "bold ".concat(n3, "px ").concat(r3).replace(/"/g, "");
          for (var s3 = function(t3) {
            var r4;
            return null === (r4 = e2.measureText(t3)) || void 0 === r4 ? void 0 : r4.width;
          }, c3 = i3 ? (a3 < 4 ? ["", ""] : [""]).length : 0, l3 = function(e3, t3) {
            return function(e4, t4, r4) {
              var n4 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "top", o4 = 0.98 * r4, i4 = 0.89 * r4, a4 = 0.95 * r4;
              return 1 === t4 ? o4 : 2 === t4 ? a4 : 3 === t4 && "top" === n4 ? 0 === e4 || 2 === e4 ? i4 : o4 : 4 === t4 && "top" === n4 ? 0 === e4 || 3 === e4 ? 0.78 * r4 : a4 : 5 === t4 && "top" === n4 ? 0 === e4 || 4 === e4 ? 0.65 * r4 : 1 === e4 || 3 === e4 ? i4 : a4 : o4;
            }(e3 + c3, t3 + c3, o3);
          }, f3 = 1, h3 = [], d3 = function() {
            if (0 === (h3 = function(e4, t3, r4, n4) {
              var o4, i4 = e4.split(/\s/g).filter(function(e5) {
                return e5.length > 0;
              }), a4 = [], u4 = null, s4 = function(e5) {
                return t3(e5) > r4(a4.length, n4);
              }, c4 = function(e5) {
                var t4 = "undefined" != typeof Symbol && e5[Symbol.iterator] || e5["@@iterator"];
                if (!t4) {
                  if (Array.isArray(e5) || (t4 = vs(e5))) {
                    t4 && (e5 = t4);
                    var r5 = 0, n5 = function() {
                    };
                    return { s: n5, n: function() {
                      return r5 >= e5.length ? { done: true } : { done: false, value: e5[r5++] };
                    }, e: function(e6) {
                      throw e6;
                    }, f: n5 };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var o5, i5 = true, a5 = false;
                return { s: function() {
                  t4 = t4.call(e5);
                }, n: function() {
                  var e6 = t4.next();
                  return i5 = e6.done, e6;
                }, e: function(e6) {
                  a5 = true, o5 = e6;
                }, f: function() {
                  try {
                    i5 || null == t4.return || t4.return();
                  } finally {
                    if (a5) throw o5;
                  }
                } };
              }(i4);
              try {
                for (c4.s(); !(o4 = c4.n()).done; ) {
                  var l4 = o4.value, f4 = u4 ? "".concat(u4, " ").concat(l4) : l4;
                  if (t3(f4) < r4(a4.length, n4)) u4 = f4;
                  else {
                    if (null !== u4) {
                      var h4 = s4(u4);
                      a4.push({ text: u4, overflowed: h4 });
                    }
                    if (u4 = l4, a4.length > n4) return [];
                  }
                }
              } catch (e5) {
                c4.e(e5);
              } finally {
                c4.f();
              }
              if (u4) {
                var d4 = s4(u4);
                a4.push({ text: u4, overflowed: d4 });
              }
              return a4.length <= n4 ? a4 : [];
            }(u3, s3, l3, f3)).length) h3 = ws(u3, s3, l3, f3, a3 > f3);
            else if (h3.some(function(e4) {
              return e4.overflowed;
            })) {
              var e3 = f3;
              h3 = h3.reduce(function(t3, r4) {
                var n4 = a3 - t3.length;
                if (0 === n4) {
                  var o4 = t3[t3.length - 1];
                  return o4.text.endsWith(bs) || (s3(o4.text) + s3(bs) > l3(t3.length, e3) ? (t3[t3.length - 1].text = o4.text.slice(0, -2), t3[t3.length - 1].hasEllipsisChar = true) : (t3[t3.length - 1].text = o4.text, t3[t3.length - 1].hasEllipsisChar = true)), t3;
                }
                if (r4.overflowed) {
                  var i4 = ws(r4.text, s3, l3, n4);
                  t3 = t3.concat(i4);
                } else t3.push({ text: r4.text, hasEllipsisChar: false, hasHyphenChar: false });
                return t3;
              }, []);
            } else h3 = h3.map(function(e4) {
              return ds(ds({}, e4), {}, { hasEllipsisChar: false, hasHyphenChar: false });
            });
            f3 += 1;
          }; 0 === h3.length; ) d3();
          return Array.from(h3);
        }(e, Pe2.fullCaption, Oe2, L2, Ee2, $3, Se2, null == t || t.captionAlign), Ce2 = -(xe2.length - 2) * L2 / 2;
        !function(e2, t2, r3, n3, o3, i3, a3, u3, s3, c3) {
          var l3 = n3, f3 = 0, h3 = 0, d3 = "".concat(o3, "px ").concat(i3), p4 = "normal ".concat(d3);
          t2.forEach(function(t3) {
            var n4;
            e2.font = p4;
            var o4, i4 = -(null === (n4 = e2.measureText(t3.text)) || void 0 === n4 ? void 0 : n4.width) / 2, v5 = t3.text ? function(e3) {
              if (Array.isArray(e3)) return Ss(e3);
            }(o4 = t3.text) || function(e3) {
              if ("undefined" != typeof Symbol && null != e3[Symbol.iterator] || null != e3["@@iterator"]) return Array.from(e3);
            }(o4) || function(e3, t4) {
              if (e3) {
                if ("string" == typeof e3) return Ss(e3, t4);
                var r4 = {}.toString.call(e3).slice(8, -1);
                return "Object" === r4 && e3.constructor && (r4 = e3.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(e3) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? Ss(e3, t4) : void 0;
              }
            }(o4) || function() {
              throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }() : [];
            t3.hasHyphenChar || t3.hasEllipsisChar || v5.push(" "), v5.forEach(function(n5) {
              var o5, a4 = e2.measureText(n5).width, v6 = null !== (o5 = r3[h3]) && void 0 !== o5 ? o5 : [], y4 = v6.includes("bold"), b3 = v6.includes("italic");
              e2.font = y4 && b3 ? "italic 600 ".concat(d3) : b3 ? "italic 400 ".concat(d3) : y4 ? "bold ".concat(d3) : p4, v6.includes("underline") && e2.fillRect(u3 + i4 + f3, s3 + l3 + 0.2, a4, 0.2), t3.hasEllipsisChar ? e2.fillText(n5, u3 + i4 + f3 - c3 / 2, s3 + l3) : e2.fillText(n5, u3 + i4 + f3, s3 + l3), f3 += a4, h3 += 1;
            }), e2.font = p4, t3.hasHyphenChar && e2.fillText("‐", u3 + i4 + f3, s3 + l3), t3.hasEllipsisChar && e2.fillText(bs, u3 + i4 + f3 - c3 / 2, s3 + l3), f3 = 0, l3 += a3;
          });
        }(e, xe2, Te2, y3 && "center" !== y3 ? "bottom" === y3 ? Ce2 + A2 / Math.PI : Ce2 - A2 / Math.PI : Ce2, L2, Oe2, L2, l2, h2, u2);
      }
    }
  }
};
function uc(e) {
  return uc = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, uc(e);
}
function sc(e, t) {
  var r2 = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e);
    t && (n2 = n2.filter(function(t2) {
      return Object.getOwnPropertyDescriptor(e, t2).enumerable;
    })), r2.push.apply(r2, n2);
  }
  return r2;
}
function cc(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r2 = null != arguments[t] ? arguments[t] : {};
    t % 2 ? sc(Object(r2), true).forEach(function(t2) {
      dc(e, t2, r2[t2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r2)) : sc(Object(r2)).forEach(function(t2) {
      Object.defineProperty(e, t2, Object.getOwnPropertyDescriptor(r2, t2));
    });
  }
  return e;
}
function lc(e, t) {
  var r2 = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
  if (!r2) {
    if (Array.isArray(e) || (r2 = function(e2, t2) {
      if (e2) {
        if ("string" == typeof e2) return fc(e2, t2);
        var r3 = {}.toString.call(e2).slice(8, -1);
        return "Object" === r3 && e2.constructor && (r3 = e2.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(e2) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? fc(e2, t2) : void 0;
      }
    }(e)) || t && e && "number" == typeof e.length) {
      r2 && (e = r2);
      var n2 = 0, o2 = function() {
      };
      return { s: o2, n: function() {
        return n2 >= e.length ? { done: true } : { done: false, value: e[n2++] };
      }, e: function(e2) {
        throw e2;
      }, f: o2 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var i2, a2 = true, u2 = false;
  return { s: function() {
    r2 = r2.call(e);
  }, n: function() {
    var e2 = r2.next();
    return a2 = e2.done, e2;
  }, e: function(e2) {
    u2 = true, i2 = e2;
  }, f: function() {
    try {
      a2 || null == r2.return || r2.return();
    } finally {
      if (u2) throw i2;
    }
  } };
}
function fc(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var r2 = 0, n2 = Array(t); r2 < t; r2++) n2[r2] = e[r2];
  return n2;
}
function hc(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, pc(n2.key), n2);
  }
}
function dc(e, t, r2) {
  return (t = pc(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
function pc(e) {
  var t = function(e2) {
    if ("object" != uc(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != uc(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == uc(t) ? t : t + "";
}
var vc = "canvasRenderer";
var yc = function() {
  return e = function e2(t2, r2, n2) {
    var o2 = this, i2 = (arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}).relationshipThreshold, a2 = void 0 === i2 ? 0 : i2;
    !function(e3, t3) {
      if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    }(this, e2), dc(this, "arrowBundler", void 0), dc(this, "activeNodes", void 0), dc(this, "canvas", void 0), dc(this, "context", void 0), dc(this, "state", void 0), dc(this, "stateDisposers", void 0), dc(this, "relationshipThreshold", void 0), dc(this, "animationHandler", void 0), dc(this, "imageCache", void 0), dc(this, "needsRun", void 0), dc(this, "nodeVersion", void 0), dc(this, "relVersion", void 0), dc(this, "waypointVersion", void 0), dc(this, "ellipsisWidth", void 0), null !== r2 && (this.activeNodes = /* @__PURE__ */ new Set(), this.canvas = t2, this.context = r2, this.state = n2, this.stateDisposers = [], this.stateDisposers.push(n2.autorun(function() {
      void 0 !== n2.zoom && (o2.needsRun = true), void 0 !== n2.panX && (o2.needsRun = true), void 0 !== n2.panY && (o2.needsRun = true), void 0 !== n2.nodes.version && (o2.needsRun = true), void 0 !== n2.rels.version && (o2.needsRun = true), n2.waypoints.counter > 0 && (o2.needsRun = true), void 0 !== n2.layout && (o2.needsRun = true);
    })), n2.nodes.addChannel(vc), n2.rels.addChannel(vc), this.relationshipThreshold = a2, this.nodeVersion = n2.nodes.version, this.relVersion = n2.rels.version, this.waypointVersion = n2.waypoints.counter, this.animationHandler = new xa(), this.animationHandler.setOptions({ fadeDuration: 150, sizeDuration: 150 }), this.arrowBundler = new eu(n2.rels.items, n2.waypoints.data), this.imageCache = new Ia(), this.needsRun = true, this.ellipsisWidth = r2.measureText(bs).width);
  }, t = [{ key: "needsToRun", value: function() {
    return this.needsRun || this.animationHandler.needsToRun() || this.activeNodes.size > 0;
  } }, { key: "processUpdates", value: function() {
    var e2 = this.state, t2 = false, r2 = e2.nodes.channels[vc], n2 = e2.rels.channels[vc], o2 = n2.adds, i2 = n2.removes, a2 = n2.updates;
    this.nodeVersion < e2.nodes.version && (this.handleChannelUpdate(r2, e2.nodes, true), this.nodeVersion = e2.nodes.version, e2.nodes.clearChannel(vc)), this.relVersion < e2.rels.version && (t2 = Object.keys(o2).length > 0 || Object.keys(i2).length > 0 || Object.keys(a2).length > 0, e2.rels.clearChannel(vc), this.relVersion = e2.rels.version), (t2 || this.waypointVersion < e2.waypoints.counter) && (this.arrowBundler.updateData(o2, i2, a2, e2.waypoints.data), this.waypointVersion = e2.waypoints.counter);
  } }, { key: "render", value: function(e2) {
    var t2, r2, n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, o2 = this.state, i2 = this.animationHandler, a2 = this.arrowBundler, u2 = o2.zoom, s2 = o2.layout, c2 = o2.nodes.idToPosition, l2 = null !== (t2 = n2.canvas) && void 0 !== t2 ? t2 : this.canvas, f2 = null !== (r2 = n2.context) && void 0 !== r2 ? r2 : this.context, h2 = jn(), d2 = l2.clientWidth * h2, p3 = l2.clientHeight * h2;
    f2.save(), void 0 !== n2.backgroundColor ? (f2.fillStyle = n2.backgroundColor, f2.fillRect(0, 0, d2, p3)) : f2.clearRect(0, 0, d2, p3), this.zoomAndPan(f2, l2), i2.ignoreAnimations(Boolean(n2.ignoreAnimations)), n2.ignoreAnimations || i2.advance(), a2.updatePositions(c2);
    var v3 = this.getRelationshipsToRender(n2.showCaptions, d2, p3);
    this.renderRelationships(v3, f2, s2 !== qi);
    var y3 = this.getNodesToRender(e2, d2, p3);
    this.renderNodes(y3, f2, u2), f2.restore(), this.needsRun = false;
  } }, { key: "getRelationshipsToRender", value: function(e2, t2, r2) {
    var n2, o2 = [], i2 = [], a2 = [], u2 = this.arrowBundler, s2 = this.state, c2 = this.relationshipThreshold, l2 = s2.layout, f2 = s2.zoom, h2 = s2.rels, d2 = s2.nodes, p3 = d2.idToItem, v3 = d2.idToPosition, y3 = lc(h2.items);
    try {
      for (y3.s(); !(n2 = y3.n()).done; ) {
        var b2 = n2.value, m2 = u2.getBundle(b2), g2 = cc(cc({}, p3[b2.from]), v3[b2.from]), _2 = cc(cc({}, p3[b2.to]), v3[b2.to]), w2 = e2 || f2 > c2 || void 0 !== b2.captionHtml, O2 = rc(b2, m2, g2, _2, w2, l2 !== qi);
        if (null !== O2) {
          var S2, E2, P2, T2, x3, C2, j2 = this.isBoundingBoxOffScreen(O2, t2, r2), A2 = Ls({ x: null !== (S2 = g2.x) && void 0 !== S2 ? S2 : 0, y: null !== (E2 = g2.y) && void 0 !== E2 ? E2 : 0 }, { x: null !== (P2 = _2.x) && void 0 !== P2 ? P2 : 0, y: null !== (T2 = _2.y) && void 0 !== T2 ? T2 : 0 }), k2 = ((null !== (x3 = g2.size) && void 0 !== x3 ? x3 : gn) + (null !== (C2 = _2.size) && void 0 !== C2 ? C2 : gn)) * devicePixelRatio, R2 = g2.id !== _2.id && k2 > A2;
          j2 || R2 || (b2.disabled ? i2.push(cc(cc({}, b2), {}, { fromNode: g2, toNode: _2, showLabel: w2 })) : b2.selected ? o2.push(cc(cc({}, b2), {}, { fromNode: g2, toNode: _2, showLabel: w2 })) : a2.push(cc(cc({}, b2), {}, { fromNode: g2, toNode: _2, showLabel: w2 })));
        }
      }
    } catch (e3) {
      y3.e(e3);
    } finally {
      y3.f();
    }
    return [].concat(i2, a2, o2);
  } }, { key: "getNodesToRender", value: function(e2, t2, r2) {
    var n2, o2 = [], i2 = [], a2 = [], u2 = this.state.nodes.idToItem, s2 = lc(e2);
    try {
      for (s2.s(); !(n2 = s2.n()).done; ) {
        var c2 = n2.value, l2 = ic(c2);
        this.isBoundingBoxOffScreen(l2, t2, r2) || (u2[c2.id].disabled ? o2.push(cc({}, c2)) : u2[c2.id].selected ? i2.push(cc({}, c2)) : a2.push(cc({}, c2)));
      }
    } catch (e3) {
      s2.e(e3);
    } finally {
      s2.f();
    }
    return [].concat(o2, a2, i2);
  } }, { key: "renderNodes", value: function(e2, t2, r2) {
    var n2, o2 = this.imageCache, i2 = this.animationHandler, a2 = this.state, u2 = this.ellipsisWidth, s2 = a2.nodes.idToItem, c2 = a2.nodeBorderStyles, l2 = a2.disabledItemStyles, f2 = a2.defaultNodeColor, h2 = lc(e2);
    try {
      for (h2.s(); !(n2 = h2.n()).done; ) {
        var d2 = n2.value;
        ac(t2, cc(cc({}, s2[d2.id]), d2), o2, i2, c2, l2, f2, u2, r2);
      }
    } catch (e3) {
      h2.e(e3);
    } finally {
      h2.f();
    }
  } }, { key: "renderRelationships", value: function(e2, t2, r2) {
    var n2, o2 = this.state.relationshipBorderStyles.selected, i2 = this.arrowBundler, a2 = this.imageCache, u2 = this.state, s2 = u2.disabledItemStyles, c2 = u2.defaultRelationshipColor, l2 = lc(e2);
    try {
      for (l2.s(); !(n2 = l2.n()).done; ) {
        var f2 = n2.value, h2 = i2.getBundle(f2), d2 = f2.fromNode, p3 = f2.toNode, v3 = f2.showLabel;
        tc(t2, f2, d2, p3, h2, a2, v3, o2, s2, c2, r2);
      }
    } catch (e3) {
      l2.e(e3);
    } finally {
      l2.f();
    }
  } }, { key: "getNodesAt", value: function(e2) {
    var t2, r2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, n2 = [], o2 = this.state.nodes, i2 = o2.items, a2 = o2.idToPosition, u2 = jn(), s2 = lc(i2);
    try {
      var c2 = function() {
        var o3 = t2.value, i3 = o3.id, s3 = o3.size, c3 = void 0 === s3 ? gn : s3, l2 = a2[i3], f2 = l2.x, h2 = l2.y, d2 = Math.sqrt(Math.pow(e2.x - f2, 2) + Math.pow(e2.y - h2, 2));
        if (d2 <= (c3 + r2) * u2) {
          var p3 = n2.findIndex(function(e3) {
            return e3.distance > d2;
          });
          n2.splice(-1 !== p3 ? p3 : n2.length, 0, { data: o3, targetCoordinates: { x: f2, y: h2 }, pointerCoordinates: e2, distanceVector: { x: e2.x - f2, y: e2.y - h2 }, insideNode: d2 <= c3 * u2, distance: d2 });
        }
      };
      for (s2.s(); !(t2 = s2.n()).done; ) c2();
    } catch (e3) {
      s2.e(e3);
    } finally {
      s2.f();
    }
    return n2;
  } }, { key: "getRelsAt", value: function(e2) {
    var t2, r2 = [], n2 = this.state, o2 = this.arrowBundler, i2 = this.relationshipThreshold, a2 = n2.zoom, u2 = n2.rels.items, s2 = n2.nodes.idToPosition, c2 = n2.layout, l2 = a2 > i2, f2 = lc(u2);
    try {
      var h2 = function() {
        var n3 = t2.value, i3 = o2.getBundle(n3), a3 = s2[n3.from], u3 = s2[n3.to];
        if (void 0 !== a3 && void 0 !== u3 && i3.has(n3)) {
          var f3 = function(e3, t3, r3, n4, o3, i4) {
            var a4 = arguments.length > 6 && void 0 !== arguments[6] && arguments[6];
            if (!os(r3, n4)) return 1 / 0;
            var u4 = r3 === n4 ? function(e4, t4, r4, n5) {
              var o4 = Js(t4, r4, n5), i5 = o4.startPoint, a5 = o4.endPoint, u5 = o4.apexPoint, s3 = o4.control1Point, c3 = o4.control2Point, l3 = cs(i5, u5, s3, e4), f4 = cs(u5, a5, c3, e4);
              return Math.min(l3, f4);
            }(e3, t3, r3, o3) : function(e4, t4, r4, n5, o4, i5, a5) {
              var u5 = Ys(t4, r4, n5, o4, i5, a5), s3 = 1 / 0;
              if (a5 && 3 === u5.length) s3 = cs(u5[0], u5[2], u5[1], e4);
              else for (var c3 = 1; c3 < u5.length; c3++) {
                var l3 = u5[c3 - 1], f4 = u5[c3], h4 = us(l3, f4, e4);
                s3 = h4 < s3 ? h4 : s3;
              }
              return s3;
            }(e3, t3, o3, r3, n4, i4, a4);
            return u4;
          }(e2, n3, a3, u3, i3, l2, c2 !== qi);
          if (f3 < 10) {
            var h3 = r2.findIndex(function(e3) {
              return e3.distance > f3;
            });
            r2.splice(-1 !== h3 ? h3 : r2.length, 0, { data: n3, fromTargetCoordinates: a3, toTargetCoordinates: u3, pointerCoordinates: e2, distance: f3 });
          }
        }
      };
      for (f2.s(); !(t2 = f2.n()).done; ) h2();
    } catch (e3) {
      f2.e(e3);
    } finally {
      f2.f();
    }
    return r2;
  } }, { key: "destroy", value: function() {
    this.stateDisposers.forEach(function(e2) {
      e2();
    }), this.state.nodes.removeChannel(vc), this.state.rels.removeChannel(vc);
  } }, { key: "isBoundingBoxOffScreen", value: function(e2, t2, r2) {
    var n2 = this.state, o2 = n2.zoom, i2 = t2 / o2, a2 = r2 / o2, u2 = n2.panX - i2 / 2, s2 = n2.panY - a2 / 2, c2 = e2.right < u2, l2 = e2.bottom < s2, f2 = e2.left > u2 + i2, h2 = e2.top > s2 + a2;
    return c2 || f2 || l2 || h2;
  } }, { key: "handleChannelUpdate", value: function(e2, t2, r2) {
    for (var n2 = Object.keys(e2.adds), o2 = 0; o2 < n2.length; o2++) {
      var i2 = n2[o2];
      e2.adds[i2].activated && this.activeNodes.add(i2);
    }
    for (var a2 = Object.keys(e2.removes), u2 = 0; u2 < a2.length; u2++) {
      var s2 = a2[u2];
      this.activeNodes.delete(s2);
    }
    if (r2) for (var c2 = Object.keys(e2.updates), l2 = 0; l2 < c2.length; l2++) {
      var f2 = c2[l2];
      t2.idToItem[f2].activated ? this.activeNodes.add(f2) : this.activeNodes.delete(f2);
    }
  } }, { key: "zoomAndPan", value: function(e2, t2) {
    var r2 = t2.width, n2 = t2.height, o2 = this.state, i2 = o2.zoom, a2 = o2.panX, u2 = o2.panY;
    e2.translate(-r2 / 2 * i2, -n2 / 2 * i2), e2.translate(-a2 * i2, -u2 * i2), e2.scale(i2, i2), e2.translate(r2 / 2 / i2, n2 / 2 / i2), e2.translate(r2 / 2, n2 / 2);
  } }], t && hc(e.prototype, t), Object.defineProperty(e, "prototype", { writable: false }), e;
  var e, t;
}();
var bc = function(e, t) {
  var r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1, n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, o2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, a2 = function(e2, t2) {
    if ((0, i.isNil)(e2) || (0, i.isNil)(t2)) return { offsetX: 0, offsetY: 0 };
    var r3 = t2.getBoundingClientRect(), n3 = window.devicePixelRatio || 1;
    return { offsetX: n3 * (e2.clientX - r3.left - 0.5 * r3.width), offsetY: n3 * (e2.clientY - r3.top - 0.5 * r3.height) };
  }(e, t);
  return { x: n2 + a2.offsetX / r2, y: o2 + a2.offsetY / r2 };
};
function mc(e) {
  return mc = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, mc(e);
}
function gc2(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}
function _c(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, Sc(n2.key), n2);
  }
}
function wc(e, t, r2) {
  return t && _c(e.prototype, t), r2 && _c(e, r2), Object.defineProperty(e, "prototype", { writable: false }), e;
}
function Oc(e, t, r2) {
  return (t = Sc(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
function Sc(e) {
  var t = function(e2) {
    if ("object" != mc(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != mc(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == mc(t) ? t : t + "";
}
var Ec = "WebGLRenderer";
var Pc = function() {
  return wc(function e(t) {
    var r2 = this;
    if (gc2(this, e), Oc(this, "mainSceneRenderer", void 0), Oc(this, "minimapRenderer", void 0), Oc(this, "needsRun", void 0), Oc(this, "minimapMouseDown", void 0), Oc(this, "stateDisposers", void 0), Oc(this, "state", void 0), void 0 === t.state) throw new Error("Renderer missing options: state - state object");
    var n2 = t.state, o2 = t.mainSceneRenderer, i2 = t.minimapRenderer, a2 = n2.nodes, u2 = n2.rels;
    this.mainSceneRenderer = o2, this.minimapRenderer = i2, this.needsRun = false, this.minimapMouseDown = false, this.stateDisposers = [], this.stateDisposers.push(n2.autorun(function() {
      r2.updateMainViewport(n2.zoom, n2.panX, n2.panY);
    })), this.stateDisposers.push(n2.autorun(function() {
      r2.updateMinimapViewport(n2.minimapZoom, n2.minimapPanX, n2.minimapPanY);
    })), this.stateDisposers.push(n2.autorun(function() {
      void 0 !== n2.nodes.version && (r2.needsRun = true), void 0 !== n2.rels.version && (r2.needsRun = true);
    })), a2.addChannel(Ec), u2.addChannel(Ec), this.state = n2, this.setupMinimapInteractions();
  }, [{ key: "needsToRun", value: function() {
    return this.needsRun || Object.keys(this.mainSceneRenderer.activeNodes).length > 0;
  } }, { key: "renderMainScene", value: function(e) {
    var t = this.state, r2 = t.nodes, n2 = t.rels;
    this.checkForUpdates(r2, n2), this.mainSceneRenderer.render(e, r2, n2), this.needsRun = false;
  } }, { key: "renderMinimap", value: function(e) {
    var t = this.state, r2 = t.nodes, n2 = t.rels;
    this.checkForUpdates(r2, n2), this.minimapRenderer.render(e, r2, n2), this.minimapRenderer.renderViewbox(), this.needsRun = false;
  } }, { key: "checkForUpdates", value: function(e, t) {
    var r2 = Object.values(e.channels[Ec].adds).length > 0, n2 = Object.values(t.channels[Ec].adds).length > 0, o2 = Object.values(e.channels[Ec].removes).length > 0, i2 = Object.values(t.channels[Ec].removes).length > 0, a2 = Object.values(e.channels[Ec].updates), u2 = Object.values(t.channels[Ec].updates);
    r2 || n2 || o2 || i2 ? (this.mainSceneRenderer.setData({ nodes: e.items, rels: t.items }), this.minimapRenderer.setData({ nodes: e.items, rels: t.items })) : (a2.length > 0 && (this.mainSceneRenderer.updateNodes(a2), this.minimapRenderer.updateNodes(a2)), u2.length > 0 && (this.mainSceneRenderer.updateRelationships(t.items), this.minimapRenderer.updateRelationships(t.items))), e.clearChannel(Ec), t.clearChannel(Ec);
  } }, { key: "onResize", value: function() {
    var e = this.state, t = e.zoom, r2 = e.panX, n2 = e.panY, o2 = e.minimapZoom, i2 = e.minimapPanX, a2 = e.minimapPanY;
    this.updateMainViewport(t, r2, n2), this.updateMinimapViewport(o2, i2, a2);
  } }, { key: "updateMainViewport", value: function(e, t, r2) {
    this.mainSceneRenderer.updateViewport(e, t, r2);
    var n2 = this.mainSceneRenderer.canvas.clientWidth, o2 = this.mainSceneRenderer.canvas.clientHeight;
    this.minimapRenderer.updateViewportBox(e, t, r2, n2, o2), this.needsRun = true;
  } }, { key: "updateMinimapViewport", value: function(e, t, r2) {
    this.minimapRenderer.updateViewport(e, t, r2), this.needsRun = true;
  } }, { key: "handleMinimapDrag", value: function(e) {
    var t = this.state, r2 = this.minimapRenderer, n2 = bc(e, r2.canvas, t.minimapZoom, t.minimapPanX, t.minimapPanY), o2 = n2.x, i2 = n2.y;
    t.setPan(o2, i2);
  } }, { key: "handleMinimapWheel", value: function(e) {
    var t = this.state, r2 = this.mainSceneRenderer;
    t.setZoom(function(e2) {
      var t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
      return (0, i.isNil)(e2) || isNaN(e2.deltaY) ? t2 : t2 - e2.deltaY / 500 * Math.min(1, t2);
    }(e, t.zoom), r2.canvas), e.preventDefault();
  } }, { key: "setupMinimapInteractions", value: function() {
    var e = this, t = this.minimapRenderer.canvas;
    t.addEventListener("mousedown", function(t2) {
      e.handleMinimapDrag(t2), e.minimapMouseDown = true;
    }), t.addEventListener("mousemove", function(t2) {
      e.minimapMouseDown && e.handleMinimapDrag(t2);
    }), t.addEventListener("mouseup", function() {
      e.minimapMouseDown = false;
    }), t.addEventListener("mouseleave", function() {
      e.minimapMouseDown = false;
    }), t.addEventListener("wheel", function(t2) {
      e.handleMinimapWheel(t2);
    });
  } }, { key: "destroy", value: function() {
    this.stateDisposers.forEach(function(e) {
      e();
    }), this.state.nodes.removeChannel(Ec), this.state.rels.removeChannel(Ec), this.mainSceneRenderer.destroy(), this.minimapRenderer.destroy();
  } }]);
}();
var Tc = function() {
  return wc(function e() {
    gc2(this, e), Oc(this, "mainSceneRenderer", void 0), Oc(this, "minimapRenderer", void 0), Oc(this, "needsRun", void 0), Oc(this, "minimapMouseDown", void 0), Oc(this, "stateDisposers", void 0), Oc(this, "state", void 0);
  }, [{ key: "renderMainScene", value: function(e) {
  } }, { key: "renderMinimap", value: function(e) {
  } }, { key: "checkForUpdates", value: function(e, t) {
  } }, { key: "onResize", value: function() {
  } }, { key: "updateMainViewport", value: function(e, t, r2) {
  } }, { key: "updateMinimapViewport", value: function(e, t, r2) {
  } }, { key: "handleMinimapDrag", value: function(e) {
  } }, { key: "handleMinimapWheel", value: function(e) {
  } }, { key: "setupMinimapInteractions", value: function() {
  } }, { key: "destroy", value: function() {
  } }, { key: "needsToRun", value: function() {
    return false;
  } }]);
}();
function xc(e) {
  return xc = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, xc(e);
}
function Cc(e, t) {
  var r2 = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
  if (!r2) {
    if (Array.isArray(e) || (r2 = function(e2, t2) {
      if (e2) {
        if ("string" == typeof e2) return jc(e2, t2);
        var r3 = {}.toString.call(e2).slice(8, -1);
        return "Object" === r3 && e2.constructor && (r3 = e2.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(e2) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? jc(e2, t2) : void 0;
      }
    }(e)) || t && e && "number" == typeof e.length) {
      r2 && (e = r2);
      var n2 = 0, o2 = function() {
      };
      return { s: o2, n: function() {
        return n2 >= e.length ? { done: true } : { done: false, value: e[n2++] };
      }, e: function(e2) {
        throw e2;
      }, f: o2 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var i2, a2 = true, u2 = false;
  return { s: function() {
    r2 = r2.call(e);
  }, n: function() {
    var e2 = r2.next();
    return a2 = e2.done, e2;
  }, e: function(e2) {
    u2 = true, i2 = e2;
  }, f: function() {
    try {
      a2 || null == r2.return || r2.return();
    } finally {
      if (u2) throw i2;
    }
  } };
}
function jc(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var r2 = 0, n2 = Array(t); r2 < t; r2++) n2[r2] = e[r2];
  return n2;
}
function Ac(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, Rc(n2.key), n2);
  }
}
function kc(e, t, r2) {
  return (t = Rc(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
function Rc(e) {
  var t = function(e2) {
    if ("object" != xc(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != xc(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == xc(t) ? t : t + "";
}
var Ic;
var Mc = 24;
var Nc = function() {
  return e = function e2(t2, r2, n2, o2) {
    var i2;
    if (function(e3, t3) {
      if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    }(this, e2), kc(this, "nodeShader", void 0), kc(this, "nodeAnimShader", void 0), kc(this, "relShader", void 0), kc(this, "relDataBuffer", void 0), kc(this, "viewportBoxShader", void 0), kc(this, "defaultRelColor", void 0), kc(this, "defaultNodeColor", void 0), kc(this, "disableRelColor", void 0), kc(this, "disableNodeColor", void 0), kc(this, "gl", void 0), kc(this, "activeNodes", void 0), kc(this, "canvas", void 0), kc(this, "projection", void 0), kc(this, "idToIndex", void 0), kc(this, "posBuffer", void 0), kc(this, "numRels", void 0), kc(this, "numNodes", void 0), kc(this, "nodeDataByte", void 0), kc(this, "relIdToIndex", void 0), kc(this, "relData", void 0), kc(this, "viewportBoxBuffer", void 0), kc(this, "relBuffer", void 0), kc(this, "nodeBuffer", void 0), kc(this, "posTexture", void 0), void 0 === (null !== (i2 = t2.getExtension("OES_texture_float")) && void 0 !== i2 ? i2 : void 0)) throw new Error("Renderer needs floating point texture support");
    this.nodeShader = new Bo(t2, "uniform mat4 u_projection;\nuniform sampler2D u_positions;\nuniform mediump float u_zoom;\nuniform mediump float u_glAdjust;\nuniform lowp vec3 u_nodeBorderColor;\nuniform lowp vec3 u_selectedBorderColor;\nuniform lowp vec3 u_selectedInnerBorderColor;\nuniform lowp vec3 u_shadowColor;\nuniform lowp float u_drawDefaultBorder;\n\nattribute float a_size;\nattribute lowp vec2 a_index;\nattribute lowp vec4 a_color;\nattribute lowp float a_selected;\nattribute lowp float a_hovered;\n\nvarying lowp float window;\nvarying lowp vec4 color;\nvarying lowp float selected;\nvarying lowp float hovered;\nvarying lowp float varNodeSize;\nvarying lowp vec3 nodeBorderColor;\nvarying lowp vec3 selectedBorderColor;\nvarying lowp vec3 selectedInnerBorderColor;\nvarying lowp vec3 shadowColor;\nvarying lowp float drawDefaultBorder;\n\nlowp float MinNodeSize = 5.0;\n\nvoid main(void) {\n  vec4 data = texture2D(u_positions, a_index);\n  gl_Position = u_projection * vec4(data.xy, 0.0, 1.0);\n\n  lowp float nodeSize = a_size * u_zoom * u_glAdjust;\n  if (nodeSize < MinNodeSize) {\n   gl_PointSize = MinNodeSize;\n   varNodeSize = MinNodeSize;\n  } else {\n    gl_PointSize = nodeSize;\n    varNodeSize = nodeSize;\n  }\n\n  color = a_color;\n  selected = a_selected;\n  hovered = a_hovered;\n  nodeBorderColor = u_nodeBorderColor;\n  selectedBorderColor = u_selectedBorderColor;\n  selectedInnerBorderColor = u_selectedInnerBorderColor;\n  shadowColor = u_shadowColor;\n  drawDefaultBorder = u_drawDefaultBorder;\n}", "uniform mediump float u_zoom;\nuniform mediump float u_glAdjust;\n\nvarying lowp vec4 color;\nvarying lowp float drawDefaultBorder;\nvarying lowp vec3 nodeBorderColor;\nvarying lowp vec3 selectedBorderColor;\nvarying lowp vec3 selectedInnerBorderColor;\nvarying lowp vec3 shadowColor;\nvarying lowp float selected;\nvarying lowp float hovered;\nvarying lowp float varNodeSize;\n\nmediump float circleSize = 0.40;\nmediump float defaultBoderSize = 0.42;\nmediump float innerSelectedRingSize = 0.43;\nmediump float outerSelectedRingSize = 0.47;\nmediump float shadowSize = 0.51;\n\nlowp float getShadowAlpha(lowp float size, lowp float dist) {\n  return (1.0 - smoothstep(size, shadowSize, dist)) * 0.25;\n}\n\nlowp float getCircleAlpha(lowp float ringSize, lowp float nodeSize, lowp float dist) {\n  return color.w - smoothstep(ringSize - nodeSize, ringSize, dist);\n}\n\nvoid main() {\n  lowp float dist = distance(gl_PointCoord, vec2(0.5));\n\n  if (dist > 0.51) {\n    discard;\n  }\n  else {\n    lowp float nodeSize = 1.0 / varNodeSize;\n    lowp float nodeAlpha = getCircleAlpha(circleSize, nodeSize, dist);\n    lowp float borderAlpha = getCircleAlpha(defaultBoderSize, nodeSize, dist);\n    lowp float ringAlpha = getCircleAlpha(innerSelectedRingSize, nodeSize, dist);\n    lowp vec3 finalColor = color.xyz;\n    lowp float finalAlpha = nodeAlpha;\n\n    if (selected > 0.0) {\n      lowp float shadowAlpha = getShadowAlpha(outerSelectedRingSize, dist);\n      lowp float ringAlpha2 = getCircleAlpha(outerSelectedRingSize, nodeSize, dist);\n\n      if (drawDefaultBorder > 0.0) {\n        finalColor = mix(nodeBorderColor, finalColor, nodeAlpha);\n        finalColor = mix(selectedInnerBorderColor, finalColor, borderAlpha);\n        finalColor = mix(selectedBorderColor, finalColor, ringAlpha);\n        finalColor = mix(shadowColor, finalColor, ringAlpha2);\n        finalAlpha = max(shadowAlpha, max(nodeAlpha, max(borderAlpha, ringAlpha2)));\n      } else {\n        finalColor = mix(selectedInnerBorderColor, finalColor, nodeAlpha);\n        finalColor = mix(selectedBorderColor, finalColor, ringAlpha);\n        finalColor = mix(shadowColor, finalColor, ringAlpha2);\n        finalAlpha = max(shadowAlpha, max(nodeAlpha, max(ringAlpha, ringAlpha2)));\n      }\n    } else if (hovered > 0.0) {\n      if (drawDefaultBorder > 0.0) {\n        lowp float shadowAlpha = getShadowAlpha(defaultBoderSize, dist);\n  \n        finalColor = mix(nodeBorderColor, finalColor, nodeAlpha);\n        finalColor = mix(shadowColor, finalColor, borderAlpha);\n        finalAlpha = max(shadowAlpha, max(nodeAlpha, ringAlpha));\n      } else {\n        lowp float shadowAlpha = getShadowAlpha(circleSize, dist);\n\n        finalColor = mix(shadowColor, finalColor, nodeAlpha);\n        finalAlpha = max(shadowAlpha, nodeAlpha);\n      }\n    } else {\n      if (drawDefaultBorder > 0.0) {\n        finalColor = mix(nodeBorderColor, finalColor, nodeAlpha);\n        finalAlpha = borderAlpha;\n      }\n    }\n    gl_FragColor = vec4(finalColor, 1.0) * finalAlpha;\n  }\n}\n"), this.nodeAnimShader = new Bo(t2, "uniform mat4 u_projection;\nuniform sampler2D u_positions;\nuniform lowp float u_animPos;\nuniform mediump float u_zoom;\nuniform mediump float u_glAdjust;\n\nattribute float a_size;\nattribute lowp vec2 a_index;\nattribute lowp vec4 a_color;\nattribute lowp float a_active;\n\nvarying lowp float varNodeSize;\nvarying lowp vec4 color;\n\nvoid main(void) {\n  vec4 data = texture2D(u_positions, a_index);\n\n  gl_Position = u_projection * vec4(data.xy, 0.0, 1.0);\n\n  float nodeSize = a_size * u_zoom * u_glAdjust;\n  nodeSize = nodeSize * (0.4 / 0.5); // Remove extra space added for shadow and selection ring\n\n  gl_PointSize = a_active > 0.5\n    ? nodeSize + 0.88 * nodeSize * u_animPos\n    : 0.0;\n\n  color = a_color;\n  varNodeSize = a_size;\n}", "uniform mediump float u_zoom;\nuniform lowp float u_animPos;\nuniform mediump float u_glAdjust;\n\nvarying lowp vec4 color;\nvarying lowp float varNodeSize;\nmediump float circleSize = 0.50;\n\nvoid main(void) {\n\n  lowp float dist = distance(gl_PointCoord, vec2(0.5));\n\n  if (dist > 0.51) {\n    discard;\n  }\n  else {\n    lowp float alpha = 1.0 - smoothstep(circleSize - (1.0 / (varNodeSize * 2.0 * u_zoom * u_glAdjust)), circleSize, dist);\n    lowp float pulseAlpha = 0.9 - 0.9 * u_animPos;\n    gl_FragColor = vec4(color.xyz, 1.0) * alpha * pulseAlpha;\n  }\n}\n"), this.relShader = new Bo(t2, "uniform mat4 u_projection;\nuniform sampler2D u_positions;\nuniform mediump float u_glAdjust;\n\nattribute vec2 a_from;\nattribute vec2 a_to;\nattribute lowp vec4 a_color;\nattribute lowp float a_triside;\nattribute float a_width;\n\nvarying lowp vec4 color;\n\nvoid main(void) {\n  vec4 from = texture2D(u_positions, a_from);\n  vec4 to = texture2D(u_positions, a_to);\n  vec2 direction = normalize(to.xy - from.xy);\n  direction = vec2(-direction.y, direction.x);\n\n  float width = a_width * u_glAdjust * 0.5;\n\n  if (a_triside == 0.0) {\n    from.y += (width / 2.0) * direction.y;\n    from.x += (width / 2.0) * direction.x;\n  } else {\n    from.y -= (width / 2.0) * direction.y;\n    from.x -= (width / 2.0) * direction.x;\n  }\n\n  color = a_color;\n  gl_Position = u_projection * vec4(from.xy, 0.0, 1.0);\n}\n", "varying lowp vec4 color;\n\nvoid main(void) {\n  gl_FragColor = vec4(color.xyz, 1.0) * color.w;\n}\n"), this.viewportBoxShader = new Bo(t2, "\nattribute vec2 coordinates;\nuniform mat4 u_projection;\nuniform lowp vec4 u_minimapViewportBoxColor;\n\nvarying lowp vec4 minimapViewportBoxColor;\n\nvoid main(void) {\n  gl_Position = u_projection * vec4(coordinates, 0.0, 1.0);\n  minimapViewportBoxColor = u_minimapViewportBoxColor;\n}\n", "\nvarying lowp vec4 minimapViewportBoxColor;\n\nvoid main(void) {\n gl_FragColor = minimapViewportBoxColor;\n}\n"), this.setShaderUniforms(o2), t2.clearColor(0, 0, 0, 0), t2.disable(t2.DEPTH_TEST), this.defaultRelColor = o2.defaultRelationshipColor, this.defaultNodeColor = o2.defaultNodeColor, this.disableRelColor = o2.disabledItemStyles.color, this.disableNodeColor = o2.disabledItemStyles.color, t2.blendFunc(t2.ONE, t2.ONE_MINUS_SRC_ALPHA), this.gl = t2, this.activeNodes = {}, this.canvas = t2.canvas, this.projection = Ro(), this.setData({ nodes: r2.items, rels: n2.items }), this.createPositionTexture(), this.setupViewportRendering(o2.minimapViewportBoxColor);
  }, t = [{ key: "setShaderUniforms", value: function(e2) {
    var t2, r2, n2, o2, a2, u2 = e2.nodeBorderStyles, s2 = null;
    (null === (t2 = u2.default) || void 0 === t2 ? void 0 : t2.rings.length) > 0 && (s2 = null === (a2 = u2.default.rings[0]) || void 0 === a2 ? void 0 : a2.color);
    var c2, l2, f2 = null, h2 = null, d2 = null !== (r2 = null === (n2 = u2.selected) || void 0 === n2 ? void 0 : n2.rings) && void 0 !== r2 ? r2 : [], p3 = d2.length;
    p3 > 1 && (h2 = null === (c2 = d2[p3 - 2]) || void 0 === c2 ? void 0 : c2.color, f2 = null === (l2 = d2[p3 - 1]) || void 0 === l2 ? void 0 : l2.color);
    var v3 = null;
    null !== (o2 = u2.selected) && void 0 !== o2 && o2.shadow && (v3 = u2.selected.shadow.color), this.nodeShader.use(), (0, i.isNil)(s2) ? this.nodeShader.setUniform("u_drawDefaultBorder", 0) : (this.nodeShader.setUniform("u_nodeBorderColor", zu(s2)), this.nodeShader.setUniform("u_drawDefaultBorder", 1));
    var y3 = zu(f2), b2 = zu(h2), m2 = zu(v3);
    this.nodeShader.setUniform("u_selectedBorderColor", y3), this.nodeShader.setUniform("u_selectedInnerBorderColor", b2), this.nodeShader.setUniform("u_shadowColor", m2);
  } }, { key: "setData", value: function(e2) {
    var t2 = Nn(e2.rels, this.disableRelColor);
    this.setupNodeRendering(e2.nodes), this.setupRelationshipRendering(t2);
  } }, { key: "render", value: function(e2, t2, r2) {
    var n2, o2 = this.gl, i2 = this.idToIndex, a2 = Cc(e2);
    try {
      for (a2.s(); !(n2 = a2.n()).done; ) {
        var u2 = n2.value, s2 = i2[u2.id];
        this.posBuffer[4 * s2 + 0] = u2.x, this.posBuffer[4 * s2 + 1] = u2.y;
      }
    } catch (e3) {
      a2.e(e3);
    } finally {
      a2.f();
    }
    o2.bindTexture(o2.TEXTURE_2D, this.posTexture), o2.texImage2D(o2.TEXTURE_2D, 0, o2.RGBA, bn, bn, 0, o2.RGBA, o2.FLOAT, this.posBuffer), o2.enable(o2.BLEND), o2.bindFramebuffer(o2.FRAMEBUFFER, null), o2.clear(o2.COLOR_BUFFER_BIT), o2.viewport(0, 0, o2.drawingBufferWidth, o2.drawingBufferHeight), this.renderAnimations(this.posTexture), this.numRels > 0 && (this.relShader.use(), this.relShader.setUniform("u_positions", this.posTexture), o2.bindBuffer(o2.ARRAY_BUFFER, this.relBuffer), this.relShader.setAttributePointerByteNorm("a_color", 4, 0, 16), this.relShader.setAttributePointerByteNorm("a_from", 2, 4, 16), this.relShader.setAttributePointerByteNorm("a_to", 2, 6, 16), this.relShader.setAttributePointerByteNorm("a_triside", 1, 8, 16), this.relShader.setAttributePointerFloat("a_width", 1, 12, 16), o2.drawArrays(o2.TRIANGLES, 0, 6 * this.numRels)), this.numNodes > 0 && (this.nodeShader.use(), this.nodeShader.setUniform("u_positions", this.posTexture), o2.bindBuffer(o2.ARRAY_BUFFER, this.nodeBuffer), this.nodeShader.setAttributePointerByteNorm("a_color", 4, 0, 12), this.nodeShader.setAttributePointerByteNorm("a_selected", 1, 4, 12), this.nodeShader.setAttributePointerByteNorm("a_index", 2, 5, 12), this.nodeShader.setAttributePointerByte("a_size", 4, 8, 12), this.nodeShader.setAttributePointerByteNorm("a_hovered", 1, 9, 12), o2.drawArrays(o2.POINTS, 0, this.numNodes));
  } }, { key: "renderViewbox", value: function() {
    var e2 = this.gl, t2 = this.projection, r2 = this.viewportBoxBuffer;
    this.viewportBoxShader.use(), this.viewportBoxShader.setUniform("u_projection", t2), e2.bindBuffer(e2.ARRAY_BUFFER, r2), this.viewportBoxShader.setAttributePointerFloat("coordinates", 2, 0, 0), e2.drawArrays(e2.LINES, 0, 8);
  } }, { key: "updateNodes", value: function(e2) {
    var t2, r2 = this.gl, n2 = this.idToIndex, o2 = this.disableNodeColor, a2 = this.nodeBuffer, u2 = this.nodeDataByte, s2 = false, c2 = Cc(e2);
    try {
      for (c2.s(); !(t2 = c2.n()).done; ) {
        var l2 = t2.value, f2 = n2[l2.id];
        if (!(0, i.isNil)(l2.color) || true === l2.disabled) {
          var h2 = Fu(true === l2.disabled ? o2 : l2.color);
          this.nodeDataByte[3 * f2 * 4 + 0] = h2[0], this.nodeDataByte[3 * f2 * 4 + 1] = h2[1], this.nodeDataByte[3 * f2 * 4 + 2] = h2[2], this.nodeDataByte[3 * f2 * 4 + 3] = 255 * h2[3], s2 = true;
        }
        if (void 0 !== l2.selected) {
          var d2 = l2.selected;
          this.nodeDataByte[3 * f2 * 4 + 4] = d2 ? 255 : 0, s2 = true;
        }
        if (void 0 !== l2.activated && (this.nodeDataByte[3 * f2 * 4 + 7] = l2.activated ? 255 : 0, s2 = true, l2.activated ? this.activeNodes[l2.id] = true : delete this.activeNodes[l2.id]), void 0 !== l2.hovered) {
          var p3 = true !== l2.disabled && l2.hovered;
          this.nodeDataByte[3 * f2 * 4 + 9] = p3 ? 255 : 0, s2 = true;
        }
        if (void 0 !== l2.size) {
          var v3 = l2.size;
          this.nodeDataByte[3 * f2 * 4 + 8] = v3 || gn, s2 = true;
        }
      }
    } catch (e3) {
      c2.e(e3);
    } finally {
      c2.f();
    }
    s2 && (r2.bindBuffer(r2.ARRAY_BUFFER, a2), r2.bufferData(r2.ARRAY_BUFFER, u2, r2.DYNAMIC_DRAW));
  } }, { key: "updateRelationships", value: function(e2) {
    var t2, r2 = Nn(e2, this.disableRelColor), n2 = this.gl, o2 = false, a2 = Cc(r2);
    try {
      for (a2.s(); !(t2 = a2.n()).done; ) {
        var u2 = t2.value, s2 = u2.key, c2 = u2.width, l2 = u2.color, f2 = u2.disabled, h2 = this.relIdToIndex[s2], d2 = (0, i.isNil)(l2) ? this.defaultRelColor : l2, p3 = Bu(f2 ? this.disableRelColor : d2);
        this.relData.positionsAndColors[h2 * Mc + 0] = p3, this.relData.positionsAndColors[h2 * Mc + 4] = p3, this.relData.positionsAndColors[h2 * Mc + 8] = p3, this.relData.positionsAndColors[h2 * Mc + 12] = p3, this.relData.positionsAndColors[h2 * Mc + 16] = p3, this.relData.positionsAndColors[h2 * Mc + 20] = p3, o2 = true, void 0 !== c2 && (this.relData.widths[h2 * Mc + 3] = c2, this.relData.widths[h2 * Mc + 7] = c2, this.relData.widths[h2 * Mc + 11] = c2, this.relData.widths[h2 * Mc + 15] = c2, this.relData.widths[h2 * Mc + 19] = c2, this.relData.widths[h2 * Mc + 23] = c2, o2 = true);
      }
    } catch (e3) {
      a2.e(e3);
    } finally {
      a2.f();
    }
    o2 && (n2.bindBuffer(n2.ARRAY_BUFFER, this.relBuffer), n2.bufferData(n2.ARRAY_BUFFER, this.relDataBuffer, n2.DYNAMIC_DRAW));
  } }, { key: "createPositionTexture", value: function() {
    var e2 = this.gl, t2 = e2.createTexture(), r2 = new Float32Array(262144);
    e2.bindTexture(e2.TEXTURE_2D, t2), e2.texParameteri(e2.TEXTURE_2D, e2.TEXTURE_MIN_FILTER, e2.NEAREST), e2.texParameteri(e2.TEXTURE_2D, e2.TEXTURE_MAG_FILTER, e2.NEAREST), e2.texParameteri(e2.TEXTURE_2D, e2.TEXTURE_WRAP_S, e2.CLAMP_TO_EDGE), e2.texParameteri(e2.TEXTURE_2D, e2.TEXTURE_WRAP_T, e2.CLAMP_TO_EDGE), e2.texImage2D(e2.TEXTURE_2D, 0, e2.RGBA, bn, bn, 0, e2.RGBA, e2.FLOAT, r2), this.posTexture = t2, this.posBuffer = r2;
  } }, { key: "updateViewportBox", value: function(e2, t2, r2, n2, o2) {
    var i2 = this.gl, a2 = jn(), u2 = n2 * a2, s2 = o2 * a2, c2 = (0.5 * u2 + t2 * e2) / e2, l2 = (0.5 * s2 + r2 * e2) / e2, f2 = (0.5 * -u2 + t2 * e2) / e2, h2 = (0.5 * -s2 + r2 * e2) / e2, d2 = [c2, l2, f2, l2, f2, l2, f2, h2, f2, h2, c2, h2, c2, h2, c2, l2];
    i2.bindBuffer(i2.ARRAY_BUFFER, this.viewportBoxBuffer), i2.bufferData(i2.ARRAY_BUFFER, new Float32Array(d2), i2.DYNAMIC_DRAW);
  } }, { key: "updateViewport", value: function(e2, t2, r2) {
    var n2 = this.gl, o2 = 1 / e2, i2 = t2 - n2.drawingBufferWidth * o2 * 0.5, a2 = r2 - n2.drawingBufferHeight * o2 * 0.5, u2 = n2.drawingBufferWidth * o2, s2 = n2.drawingBufferHeight * o2, c2 = Ro(), l2 = Cn * jn();
    Io(c2, i2, i2 + u2, a2 + s2, a2, 0, 1e6), this.nodeShader.use(), this.nodeShader.setUniform("u_zoom", e2), this.nodeShader.setUniform("u_glAdjust", l2), this.nodeShader.setUniform("u_projection", c2), this.nodeAnimShader.use(), this.nodeAnimShader.setUniform("u_zoom", e2), this.nodeAnimShader.setUniform("u_glAdjust", l2), this.nodeAnimShader.setUniform("u_projection", c2), this.relShader.use(), this.relShader.setUniform("u_glAdjust", l2), this.relShader.setUniform("u_projection", c2), this.projection = c2;
  } }, { key: "setupViewportRendering", value: function() {
    var e2, t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Tn;
    this.viewportBoxBuffer = this.gl.createBuffer(), this.viewportBoxShader.use(), this.viewportBoxShader.setUniform("u_minimapViewportBoxColor", [(e2 = Fu(t2))[0] / 255, e2[1] / 255, e2[2] / 255, e2[3]]);
  } }, { key: "setupNodeRendering", value: function(e2) {
    var t2 = this.gl, r2 = new ArrayBuffer(8), n2 = new Uint32Array(r2), o2 = new Uint8Array(r2);
    void 0 === this.nodeBuffer && (this.nodeBuffer = t2.createBuffer()), this.numNodes = e2.length;
    var a2 = new ArrayBuffer(3 * e2.length * 8), u2 = new Uint32Array(a2), s2 = {};
    this.activeNodes = {};
    for (var c2 = 0; c2 < e2.length; c2++) {
      var l2 = e2[c2], f2 = l2.selected, h2 = l2.hovered, d2 = l2.color, p3 = l2.activated, v3 = l2.size, y3 = l2.id, b2 = l2.disabled, m2 = Bu((0, i.isNil)(d2) ? this.defaultNodeColor : d2);
      u2[3 * c2 + 0] = b2 ? Bu(this.disableNodeColor) : m2, o2[0] = f2 ? 255 : 0, o2[1] = c2 % bn, o2[2] = Math.floor(c2 / bn), o2[3] = p3 ? 255 : 0, o2[4] = !b2 && h2 ? 255 : 0, p3 && (this.activeNodes[y3] = true), u2[3 * c2 + 1] = n2[0], u2[3 * c2 + 2] = null != v3 ? v3 : gn, u2[3 * c2 + 3] = n2[1], s2[y3] = c2;
    }
    t2.bindBuffer(t2.ARRAY_BUFFER, this.nodeBuffer), t2.bufferData(t2.ARRAY_BUFFER, u2, t2.DYNAMIC_DRAW), this.numNodes = e2.length, this.nodeDataByte = new Uint8Array(a2), this.idToIndex = s2;
  } }, { key: "setupRelationshipRendering", value: function(e2) {
    var t2 = this, r2 = this.gl, n2 = new ArrayBuffer(4), o2 = new Uint32Array(n2), a2 = new Uint8Array(n2), u2 = {};
    void 0 === this.relBuffer && (this.relBuffer = r2.createBuffer());
    for (var s2 = new ArrayBuffer(e2.length * Mc * 4), c2 = new Uint32Array(s2), l2 = new Float32Array(s2), f2 = function(r3) {
      var n3 = e2[r3], s3 = n3.from, f3 = n3.to, h3 = n3.color, d2 = n3.width, p3 = void 0 === d2 ? 1 : d2, v3 = n3.key, y3 = n3.disabled, b2 = t2.idToIndex[s3], m2 = t2.idToIndex[f3], g2 = b2 % bn, _2 = Math.floor(b2 / bn), w2 = m2 % bn, O2 = Math.floor(m2 / bn), S2 = [g2, _2, w2, O2], E2 = [w2, O2, g2, _2], P2 = (0, i.isNil)(h3) ? t2.defaultRelColor : h3, T2 = Bu(y3 ? t2.disableRelColor : P2);
      u2[v3] = r3;
      var x3 = 0, C2 = function(e3, t3, n4, i2) {
        c2[r3 * Mc + x3] = e3, x3 += 1;
        for (var u3 = 0; u3 < t3.length; u3++) a2[u3] = t3[u3];
        c2[r3 * Mc + x3] = o2[0], x3 += 1, a2[0] = n4, c2[r3 * Mc + x3] = o2[0], l2[r3 * Mc + (x3 += 1)] = i2, x3 += 1;
      };
      C2(T2, S2, 255, p3), C2(T2, E2, 0, p3), C2(T2, S2, 0, p3), C2(T2, E2, 0, p3), C2(T2, S2, 0, p3), C2(T2, E2, 255, p3);
    }, h2 = 0; h2 < e2.length; h2++) f2(h2);
    r2.bindBuffer(r2.ARRAY_BUFFER, this.relBuffer), r2.bufferData(r2.ARRAY_BUFFER, s2, r2.DYNAMIC_DRAW), this.numRels = e2.length, this.relDataBuffer = s2, this.relData = { positionsAndColors: c2, widths: l2 }, this.relIdToIndex = u2;
  } }, { key: "renderAnimations", value: function(e2) {
    var t2 = this.gl, r2 = this.nodeBuffer, n2 = this.numNodes, o2 = Date.now() % 1e3 / 1e3, i2 = o2 < 0.7 ? o2 / 0.7 : 0;
    this.nodeAnimShader.use(), this.nodeAnimShader.setUniform("u_positions", e2), this.nodeAnimShader.setUniform("u_animPos", i2), t2.bindBuffer(t2.ARRAY_BUFFER, r2), this.nodeAnimShader.setAttributePointerByteNorm("a_color", 4, 0, 12), this.nodeAnimShader.setAttributePointerByteNorm("a_active", 1, 7, 12), this.nodeAnimShader.setAttributePointerByteNorm("a_index", 2, 5, 12), this.nodeAnimShader.setAttributePointerByte("a_size", 4, 8, 12), t2.drawArrays(t2.POINTS, 0, n2);
  } }, { key: "destroy", value: function() {
    this.gl.deleteBuffer(this.nodeBuffer), this.gl.deleteBuffer(this.relBuffer), this.nodeShader.remove(), this.nodeAnimShader.remove(), this.relShader.remove();
  } }], t && Ac(e.prototype, t), Object.defineProperty(e, "prototype", { writable: false }), e;
  var e, t;
}();
var Dc = function(e, t, r2) {
  var n2 = jn();
  e.width = t * n2, e.height = r2 * n2, e.style.width = "".concat(t, "px"), e.style.height = "".concat(r2, "px");
};
var Lc = function(e) {
  eo.warn("Error: WebGL context lost - visualization will stop working!", e), void 0 !== Ic && Ic(e);
};
var Uc = function(e) {
  var t = e.parentElement, r2 = t.getBoundingClientRect(), n2 = r2.width, o2 = r2.height;
  0 !== n2 || 0 !== o2 || t.isConnected || (n2 = parseInt(t.style.width, 10) || 0, o2 = parseInt(t.style.height, 10) || 0), Dc(e, n2, o2);
};
var Fc = function(e, t) {
  var r2 = document.createElement("canvas");
  return Object.assign(r2.style, xn), void 0 !== e && (e.appendChild(r2), Uc(r2)), function(e2, t2) {
    Ic = t2, e2.addEventListener("webglcontextlost", Lc);
  }(r2, t), r2;
};
var Bc = function(e) {
  e.width = 0, e.height = 0, e.remove();
};
var zc = function(e) {
  var t = { antialias: true }, r2 = e.getContext("webgl", t);
  return null === r2 && (r2 = e.getContext("experimental-webgl", t)), function(e2) {
    return e2 instanceof WebGLRenderingContext;
  }(r2) ? r2 : null;
};
var Vc = function(e) {
  e.canvas.removeEventListener("webglcontextlost", Lc);
  var t = e.getExtension("WEBGL_lose_context");
  null == t || t.loseContext();
};
function Wc(e) {
  return function(e2) {
    if (Array.isArray(e2)) return Hc(e2);
  }(e) || function(e2) {
    if ("undefined" != typeof Symbol && null != e2[Symbol.iterator] || null != e2["@@iterator"]) return Array.from(e2);
  }(e) || Gc(e) || function() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }();
}
function qc(e, t) {
  var r2 = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
  if (!r2) {
    if (Array.isArray(e) || (r2 = Gc(e)) || t && e && "number" == typeof e.length) {
      r2 && (e = r2);
      var n2 = 0, o2 = function() {
      };
      return { s: o2, n: function() {
        return n2 >= e.length ? { done: true } : { done: false, value: e[n2++] };
      }, e: function(e2) {
        throw e2;
      }, f: o2 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var i2, a2 = true, u2 = false;
  return { s: function() {
    r2 = r2.call(e);
  }, n: function() {
    var e2 = r2.next();
    return a2 = e2.done, e2;
  }, e: function(e2) {
    u2 = true, i2 = e2;
  }, f: function() {
    try {
      a2 || null == r2.return || r2.return();
    } finally {
      if (u2) throw i2;
    }
  } };
}
function Gc(e, t) {
  if (e) {
    if ("string" == typeof e) return Hc(e, t);
    var r2 = {}.toString.call(e).slice(8, -1);
    return "Object" === r2 && e.constructor && (r2 = e.constructor.name), "Map" === r2 || "Set" === r2 ? Array.from(e) : "Arguments" === r2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r2) ? Hc(e, t) : void 0;
  }
}
function Hc(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var r2 = 0, n2 = Array(t); r2 < t; r2++) n2[r2] = e[r2];
  return n2;
}
var Yc = gn * jn();
function Xc(e) {
  return Xc = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, Xc(e);
}
function Kc(e, t) {
  var r2 = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e);
    t && (n2 = n2.filter(function(t2) {
      return Object.getOwnPropertyDescriptor(e, t2).enumerable;
    })), r2.push.apply(r2, n2);
  }
  return r2;
}
function Zc(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r2 = null != arguments[t] ? arguments[t] : {};
    t % 2 ? Kc(Object(r2), true).forEach(function(t2) {
      $c(e, t2, r2[t2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r2)) : Kc(Object(r2)).forEach(function(t2) {
      Object.defineProperty(e, t2, Object.getOwnPropertyDescriptor(r2, t2));
    });
  }
  return e;
}
function $c(e, t, r2) {
  return (t = function(e2) {
    var t2 = function(e3) {
      if ("object" != Xc(e3) || !e3) return e3;
      var t3 = e3[Symbol.toPrimitive];
      if (void 0 !== t3) {
        var r3 = t3.call(e3, "string");
        if ("object" != Xc(r3)) return r3;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return String(e3);
    }(e2);
    return "symbol" == Xc(t2) ? t2 : t2 + "";
  }(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
var Qc = function() {
  for (var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 50, r2 = { minX: 1 / 0, minY: 1 / 0, maxX: -1 / 0, maxY: -1 / 0 }, n2 = 0; n2 < e.length; n2++) r2.minX > e[n2].x && (r2.minX = e[n2].x), r2.minY > e[n2].y && (r2.minY = e[n2].y), r2.maxX < e[n2].x && (r2.maxX = e[n2].x), r2.maxY < e[n2].y && (r2.maxY = e[n2].y);
  var o2 = (r2.minX + r2.maxX) / 2, i2 = (r2.minY + r2.maxY) / 2, a2 = 2 * t, u2 = jn() * a2;
  return { centerX: o2, centerY: i2, nodesWidth: r2.maxX - r2.minX + a2 + u2, nodesHeight: r2.maxY - r2.minY + a2 + u2 };
};
var Jc = function(e, t, r2, n2) {
  var o2 = 1 / 0, i2 = 1 / 0;
  return e > 1 && (o2 = r2 / e), t > 1 && (i2 = n2 / t), { zoomX: o2, zoomY: i2 };
};
var el = function(e, t) {
  var r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1 / 0, o2 = Math.min(e, t);
  return Math.min(n2, Math.max(r2, o2));
};
var rl = function(e, t, r2, n2) {
  return Math.max(Math.min(t, r2), Math.min(e, n2));
};
var nl = function(e, t, r2, n2, o2, i2) {
  var a2 = t;
  return function(e2, t2, r3) {
    return e2 < t2 && e2 < r3;
  }(o2, i2, t) && e.length > 1 ? (a2 = function(e2, t2, r3) {
    var n3 = function(e3) {
      var t3 = new Array(4).fill(e3[0]);
      return e3.forEach(function(e4) {
        t3[0] = e4.x < t3[0].x ? t3[0] : Zc({}, e4), t3[1] = e4.y < t3[1].y ? t3[1] : Zc({}, e4), t3[2] = e4.x < t3[2].x ? Zc({}, e4) : t3[2], t3[3] = e4.y < t3[3].y ? Zc({}, e4) : t3[3];
      }), t3;
    }(e2), o3 = function() {
      for (var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], t3 = 0, r4 = 0, n4 = 0; n4 < e3.length; n4++) for (var o4 = n4 + 1; o4 < e3.length; o4++) t3 = Math.hypot(Math.abs(e3[n4].x - e3[o4].x), Math.abs(e3[n4].y - e3[o4].y)), r4 = Math.max(r4, t3);
      return r4;
    }(n3), i3 = 2 * r3, a3 = jn() * i3, u2 = t2.height <= t2.width ? t2.height - i3 - a3 : t2.width - i3 - a3;
    return o3 > u2 ? 0.9 * u2 / o3 : 0.9 * o3 / u2;
  }(e, n2, 25), rl(o2, i2, Math.min(t, a2), r2)) : rl(o2, i2, t, r2);
};
function ol(e) {
  return ol = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, ol(e);
}
function il(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, al(n2.key), n2);
  }
}
function al(e) {
  var t = function(e2) {
    if ("object" != ol(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != ol(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == ol(t) ? t : t + "";
}
var ul = function() {
  return e = function e2() {
    var t2, r2, n2;
    !function(e3, t3) {
      if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    }(this, e2), t2 = this, n2 = void 0, (r2 = al(r2 = "callbacks")) in t2 ? Object.defineProperty(t2, r2, { value: n2, enumerable: true, configurable: true, writable: true }) : t2[r2] = n2, this.callbacks = {};
  }, t = [{ key: "register", value: function(e2, t2) {
    this.isCallbackRegistered(e2) || (this.callbacks[e2] = []), this.callbacks[e2].push(t2);
  } }, { key: "isCallbackRegistered", value: function(e2) {
    return void 0 !== this.callbacks[e2];
  } }, { key: "callIfRegistered", value: function() {
    var e2, t2 = arguments, r2 = Array.prototype.slice.call(arguments)[0];
    e2 = r2, Er.includes(e2) && this.isCallbackRegistered(r2) && this.callbacks[r2].slice(0).forEach(function(e3) {
      return e3.apply(null, Array.prototype.slice.call(t2, 1));
    });
  } }], t && il(e.prototype, t), Object.defineProperty(e, "prototype", { writable: false }), e;
  var e, t;
}();
var sl = o(481);
var cl = o.n(sl);
function ll(e) {
  return ll = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, ll(e);
}
function fl(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, dl(n2.key), n2);
  }
}
function hl(e, t, r2) {
  return (t = dl(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
function dl(e) {
  var t = function(e2) {
    if ("object" != ll(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != ll(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == ll(t) ? t : t + "";
}
var pl = 5e-5;
var vl = function() {
  return e = function e2(t2) {
    var r2, n2 = this, o2 = t2.state, i2 = t2.getNodePositions, a2 = t2.canvas;
    !function(e3, t3) {
      if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    }(this, e2), hl(this, "xCtrl", void 0), hl(this, "yCtrl", void 0), hl(this, "zoomCtrl", void 0), hl(this, "getNodePositions", void 0), hl(this, "firstUpdate", void 0), hl(this, "state", void 0), hl(this, "canvas", void 0), hl(this, "stateDisposers", void 0), this.state = o2, this.getNodePositions = i2, this.canvas = a2, this.xCtrl = new (cl())(0.35, pl, 0.05, 1), this.yCtrl = new (cl())(0.35, pl, 0.05, 1), this.zoomCtrl = new (cl())(0.3, 1e-5, 0.01, 1), this.stateDisposers = [], this.stateDisposers.push(o2.autorun(function() {
      null === o2.fitNodeIds && (n2.xCtrl.reset(), n2.yCtrl.reset(), n2.zoomCtrl.reset());
    })), this.stateDisposers.push(o2.autorun(function() {
      r2 !== o2.fitNodeIds && (r2 = o2.fitNodeIds, n2.firstUpdate = true);
    })), this.stateDisposers.push(o2.autorun(function() {
      o2.resetZoom && (n2.firstUpdate = true);
    }));
  }, t = [{ key: "needsToRun", value: function() {
    var e2 = this.state, t2 = e2.fitNodeIds, r2 = e2.resetZoom;
    return t2.length > 0 || r2;
  } }, { key: "update", value: function(e2, t2) {
    var r2 = this.state, n2 = r2.fitNodeIds, o2 = r2.resetZoom;
    n2.length > 0 ? this.fitNodes(n2, e2, t2) : o2 && this.reset(e2, t2);
  } }, { key: "destroy", value: function() {
    this.stateDisposers.forEach(function(e2) {
      return e2();
    });
  } }, { key: "recalculateTarget", value: function(e2, t2, r2, n2) {
    for (var o2 = this.xCtrl, i2 = this.yCtrl, a2 = this.zoomCtrl, u2 = this.state, s2 = [], c2 = 0; c2 < e2.length; c2++) s2.push({ id: e2[c2] });
    var l2 = u2.zoom, f2 = u2.panX, h2 = u2.panY, d2 = u2.maxNodeRadius, p3 = u2.nodes, v3 = u2.defaultZoomLevel, y3 = this.getNodePositions(s2);
    p3.updatePositions(y3);
    var b2 = Qc(y3, d2), m2 = b2.centerX, g2 = b2.centerY, _2 = b2.nodesWidth, w2 = b2.nodesHeight;
    if (isNaN(m2) || isNaN(g2)) return eo.info("fit() function couldn't calculate center point, not updating viewport"), false;
    var O2 = t2.noPan, S2 = t2.outOnly, E2 = t2.minZoom, P2 = t2.maxZoom;
    o2.setTarget(O2 ? f2 : m2), i2.setTarget(O2 ? h2 : g2);
    var T2 = Jc(_2, w2, r2, n2), x3 = T2.zoomX, C2 = T2.zoomY;
    if (x3 === 1 / 0 && C2 === 1 / 0) a2.setTarget(v3);
    else {
      var j2 = el(x3, C2, E2, P2);
      S2 && l2 < j2 ? a2.setTarget(l2) : a2.setTarget(j2);
    }
    return true;
  } }, { key: "allNodesAreVisible", value: function(e2, t2, r2) {
    var n2 = Jc(t2, r2, this.canvas.width, this.canvas.height), o2 = n2.zoomX, i2 = n2.zoomY;
    return e2 < o2 && e2 < i2;
  } }, { key: "reset", value: function(e2, t2) {
    var r2 = this.xCtrl, n2 = this.yCtrl, o2 = this.zoomCtrl, i2 = this.state, a2 = this.firstUpdate, u2 = this.canvas, s2 = i2.zoom, c2 = i2.panX, l2 = i2.panY, f2 = i2.nodes, h2 = i2.maxNodeRadius, d2 = i2.defaultZoomLevel;
    if (a2 || e2) {
      o2.setTarget(d2);
      var p3 = Qc(Object.values(f2.idToPosition), h2), v3 = p3.centerX, y3 = p3.centerY, b2 = p3.nodesWidth, m2 = p3.nodesHeight;
      this.allNodesAreVisible(s2, b2, m2) ? (r2.setTarget(v3), n2.setTarget(y3)) : (r2.setTarget(c2), n2.setTarget(l2)), this.firstUpdate = false;
    }
    var g2 = s2 + o2.update(s2), _2 = c2 + r2.update(c2), w2 = l2 + n2.update(l2);
    i2.updateZoomToFit(g2, _2, w2, u2), Math.abs(o2.target - g2) < 0.01 && (i2.updateZoomToFit(d2, _2, w2, u2), i2.clearReset(), void 0 !== t2 && t2());
  } }, { key: "fitNodes", value: function(e2, t2, r2) {
    var n2 = this.state, o2 = this.firstUpdate, i2 = this.canvas, a2 = this.xCtrl, u2 = this.yCtrl, s2 = this.zoomCtrl, c2 = n2.zoomOptions, l2 = void 0 === c2 ? {} : c2, f2 = n2.zoom, h2 = n2.panX, d2 = n2.panY, p3 = true;
    if (o2 || t2) {
      var v3 = i2.width, y3 = i2.height;
      p3 = this.recalculateTarget(e2, l2, v3, y3), this.firstUpdate = false;
    }
    if (p3) {
      if (!l2.animated) return n2.setZoomPan(s2.target, a2.target, u2.target, i2), void n2.clearFit();
      var b2 = h2 + a2.update(h2), m2 = d2 + u2.update(d2), g2 = f2 + s2.update(f2);
      n2.updateZoomToFit(g2, b2, m2, i2);
      var _2 = Math.max(5, 10 / s2.target), w2 = Math.min(0.01, 0.01 * s2.target);
      !t2 && Math.abs(s2.target - g2) < w2 && Math.abs(a2.target - b2) < _2 && Math.abs(u2.target - m2) < _2 && (n2.setZoom(s2.target, i2), n2.clearFit(), void 0 !== r2 && r2());
    }
  } }], t && fl(e.prototype, t), Object.defineProperty(e, "prototype", { writable: false }), e;
  var e, t;
}();
function yl(e) {
  return yl = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, yl(e);
}
function bl() {
  var e, t, r2 = "function" == typeof Symbol ? Symbol : {}, n2 = r2.iterator || "@@iterator", o2 = r2.toStringTag || "@@toStringTag";
  function i2(r3, n3, o3, i3) {
    var s3 = n3 && n3.prototype instanceof u2 ? n3 : u2, c3 = Object.create(s3.prototype);
    return ml(c3, "_invoke", function(r4, n4, o4) {
      var i4, u3, s4, c4 = 0, l3 = o4 || [], f3 = false, h3 = { p: 0, n: 0, v: e, a: d2, f: d2.bind(e, 4), d: function(t2, r5) {
        return i4 = t2, u3 = 0, s4 = e, h3.n = r5, a2;
      } };
      function d2(r5, n5) {
        for (u3 = r5, s4 = n5, t = 0; !f3 && c4 && !o5 && t < l3.length; t++) {
          var o5, i5 = l3[t], d3 = h3.p, p3 = i5[2];
          r5 > 3 ? (o5 = p3 === n5) && (s4 = i5[(u3 = i5[4]) ? 5 : (u3 = 3, 3)], i5[4] = i5[5] = e) : i5[0] <= d3 && ((o5 = r5 < 2 && d3 < i5[1]) ? (u3 = 0, h3.v = n5, h3.n = i5[1]) : d3 < p3 && (o5 = r5 < 3 || i5[0] > n5 || n5 > p3) && (i5[4] = r5, i5[5] = n5, h3.n = p3, u3 = 0));
        }
        if (o5 || r5 > 1) return a2;
        throw f3 = true, n5;
      }
      return function(o5, l4, p3) {
        if (c4 > 1) throw TypeError("Generator is already running");
        for (f3 && 1 === l4 && d2(l4, p3), u3 = l4, s4 = p3; (t = u3 < 2 ? e : s4) || !f3; ) {
          i4 || (u3 ? u3 < 3 ? (u3 > 1 && (h3.n = -1), d2(u3, s4)) : h3.n = s4 : h3.v = s4);
          try {
            if (c4 = 2, i4) {
              if (u3 || (o5 = "next"), t = i4[o5]) {
                if (!(t = t.call(i4, s4))) throw TypeError("iterator result is not an object");
                if (!t.done) return t;
                s4 = t.value, u3 < 2 && (u3 = 0);
              } else 1 === u3 && (t = i4.return) && t.call(i4), u3 < 2 && (s4 = TypeError("The iterator does not provide a '" + o5 + "' method"), u3 = 1);
              i4 = e;
            } else if ((t = (f3 = h3.n < 0) ? s4 : r4.call(n4, h3)) !== a2) break;
          } catch (t2) {
            i4 = e, u3 = 1, s4 = t2;
          } finally {
            c4 = 1;
          }
        }
        return { value: t, done: f3 };
      };
    }(r3, o3, i3), true), c3;
  }
  var a2 = {};
  function u2() {
  }
  function s2() {
  }
  function c2() {
  }
  t = Object.getPrototypeOf;
  var l2 = [][n2] ? t(t([][n2]())) : (ml(t = {}, n2, function() {
    return this;
  }), t), f2 = c2.prototype = u2.prototype = Object.create(l2);
  function h2(e2) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(e2, c2) : (e2.__proto__ = c2, ml(e2, o2, "GeneratorFunction")), e2.prototype = Object.create(f2), e2;
  }
  return s2.prototype = c2, ml(f2, "constructor", c2), ml(c2, "constructor", s2), s2.displayName = "GeneratorFunction", ml(c2, o2, "GeneratorFunction"), ml(f2), ml(f2, o2, "Generator"), ml(f2, n2, function() {
    return this;
  }), ml(f2, "toString", function() {
    return "[object Generator]";
  }), (bl = function() {
    return { w: i2, m: h2 };
  })();
}
function ml(e, t, r2, n2) {
  var o2 = Object.defineProperty;
  try {
    o2({}, "", {});
  } catch (e2) {
    o2 = 0;
  }
  ml = function(e2, t2, r3, n3) {
    if (t2) o2 ? o2(e2, t2, { value: r3, enumerable: !n3, configurable: !n3, writable: !n3 }) : e2[t2] = r3;
    else {
      var i2 = function(t3, r4) {
        ml(e2, t3, function(e3) {
          return this._invoke(t3, r4, e3);
        });
      };
      i2("next", 0), i2("throw", 1), i2("return", 2);
    }
  }, ml(e, t, r2, n2);
}
function gl(e, t, r2, n2, o2, i2, a2) {
  try {
    var u2 = e[i2](a2), s2 = u2.value;
  } catch (e2) {
    return void r2(e2);
  }
  u2.done ? t(s2) : Promise.resolve(s2).then(n2, o2);
}
function _l(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var r2 = 0, n2 = Array(t); r2 < t; r2++) n2[r2] = e[r2];
  return n2;
}
function wl(e, t) {
  var r2 = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e);
    t && (n2 = n2.filter(function(t2) {
      return Object.getOwnPropertyDescriptor(e, t2).enumerable;
    })), r2.push.apply(r2, n2);
  }
  return r2;
}
function Ol(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r2 = null != arguments[t] ? arguments[t] : {};
    t % 2 ? wl(Object(r2), true).forEach(function(t2) {
      El(e, t2, r2[t2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r2)) : wl(Object(r2)).forEach(function(t2) {
      Object.defineProperty(e, t2, Object.getOwnPropertyDescriptor(r2, t2));
    });
  }
  return e;
}
function Sl(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, Pl(n2.key), n2);
  }
}
function El(e, t, r2) {
  return (t = Pl(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
function Pl(e) {
  var t = function(e2) {
    if ("object" != yl(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != yl(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == yl(t) ? t : t + "";
}
var Tl = "NvlController";
var xl = { filename: "visualisation.png", backgroundColor: "rgba(0,0,0,0)" };
var Cl = "onError";
var jl = "onLayoutDone";
var Al = "onLayoutStep";
var kl = {};
var Rl = function() {
  var e;
  return null !== (e = kl[arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "default"]) && void 0 !== e ? e : Object.values(kl).pop();
};
var Il = function() {
  return e = function e2(t2, r3, n3) {
    var o2, i2, a2, u2 = this;
    !function(e3, t3) {
      if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    }(this, e2), El(this, "destroyed", void 0), El(this, "state", void 0), El(this, "callbacks", void 0), El(this, "instanceId", void 0), El(this, "glController", void 0), El(this, "webGLContext", void 0), El(this, "webGLMinimapContext", void 0), El(this, "htmlOverlay", void 0), El(this, "hasResized", void 0), El(this, "hierarchicalLayout", void 0), El(this, "gridLayout", void 0), El(this, "freeLayout", void 0), El(this, "d3ForceLayout", void 0), El(this, "forceLayout", void 0), El(this, "canvasRenderer", void 0), El(this, "glCanvas", void 0), El(this, "canvasRect", void 0), El(this, "glMinimapCanvas", void 0), El(this, "c2dCanvas", void 0), El(this, "isInRenderSwitchAnimation", void 0), El(this, "justSwitchedRenderer", void 0), El(this, "justSwitchedLayout", void 0), El(this, "layoutUpdating", void 0), El(this, "layoutComputing", void 0), El(this, "isRenderingDisabled", void 0), El(this, "setRenderSwitchAnimation", void 0), El(this, "stateDisposers", void 0), El(this, "zoomTransitionHandler", void 0), El(this, "currentLayout", void 0), El(this, "layoutTimeLimit", void 0), El(this, "pixelRatio", void 0), El(this, "removeResizeListener", void 0), El(this, "removeMinimapResizeListener", void 0), El(this, "pendingZoomOperation", void 0), El(this, "layoutRunner", void 0), El(this, "animationRequestId", void 0), El(this, "layoutDoneCallback", void 0), El(this, "layoutComputingCallback", void 0), El(this, "currentLayoutType", void 0), El(this, "descriptionElement", void 0), this.destroyed = false;
    var s2 = n3.minimapContainer, c2 = void 0 === s2 ? document.createElement("span") : s2, l2 = n3.layoutOptions, f2 = n3.layout, h2 = n3.instanceId, d2 = void 0 === h2 ? "default" : h2, p3 = n3.disableAria, v3 = void 0 !== p3 && p3, y3 = t2.nodes, b2 = t2.rels, m2 = t2.webGLVisible, g2 = t2.disableWebGL;
    this.state = t2, this.callbacks = new ul(), this.instanceId = d2;
    var _2 = r3;
    _2.setAttribute("instanceId", d2), _2.setAttribute("data-testid", "nvl-parent"), null !== (o2 = _2.style.height) && void 0 !== o2 && o2.length || Object.assign(_2.style, { height: "100%" }), null !== (i2 = _2.style.outline) && void 0 !== i2 && i2.length || Object.assign(_2.style, { outline: "none" }), this.descriptionElement = v3 ? document.createElement("div") : function(e3, t3) {
      var r4;
      e3.setAttribute("role", "img"), e3.setAttribute("aria-label", "Graph visualization");
      var n4 = "nvl-".concat(t3, "-description"), o3 = null !== (r4 = document.getElementById(n4)) && void 0 !== r4 ? r4 : document.createElement("div");
      return o3.innerHTML = "", o3.id = "nvl-".concat(t3, "-description"), o3.setAttribute("role", "status"), o3.setAttribute("aria-live", "polite"), o3.setAttribute("aria-atomic", "false"), o3.style.display = "none", e3.appendChild(o3), e3.setAttribute("aria-describedby", o3.id), o3;
    }(_2, d2);
    var w2 = Fc(_2, this.onWebGLContextLost.bind(this)), O2 = Fc(c2, this.onWebGLContextLost.bind(this));
    if (w2.setAttribute("data-testid", "nvl-gl-canvas"), g2) this.glController = new Tc();
    else {
      var S2 = zc(w2), E2 = zc(O2);
      this.glController = new Pc({ mainSceneRenderer: new Nc(S2, y3, b2, this.state), minimapRenderer: new Nc(E2, y3, b2, this.state), state: t2 }), this.webGLContext = S2, this.webGLMinimapContext = E2;
    }
    var P2 = Fc(_2, this.onWebGLContextLost.bind(this));
    P2.setAttribute("data-testid", "nvl-c2d-canvas");
    var T2 = P2.getContext("2d"), x3 = document.createElement("div");
    Object.assign(x3.style, Ol(Ol({}, xn), {}, { overflow: "hidden" })), _2.appendChild(x3), this.htmlOverlay = x3, this.hasResized = true, this.hierarchicalLayout = new va(Ol(Ol({}, l2), {}, { state: this.state })), this.gridLayout = new zi({ state: this.state }), this.freeLayout = new ki({ state: this.state }), this.d3ForceLayout = new $n({ state: this.state }), this.forceLayout = g2 ? this.d3ForceLayout : new wi(Ol(Ol({}, l2), {}, { webGLContext: this.webGLContext, state: this.state })), this.state.setLayout(f2), this.state.setLayoutOptions(l2);
    var C2 = new yc(P2, T2, t2, n3);
    this.canvasRenderer = C2, this.glCanvas = w2, this.canvasRect = w2.getBoundingClientRect(), this.glMinimapCanvas = O2, this.c2dCanvas = P2, this.glCanvas.style.opacity = m2 ? "1" : "0", this.c2dCanvas.style.opacity = m2 ? "0" : "1", this.isInRenderSwitchAnimation = false, this.justSwitchedRenderer = false, this.justSwitchedLayout = false, this.hasResized = false, this.layoutUpdating = false, this.layoutComputing = false, this.isRenderingDisabled = false, y3.addChannel(Tl), b2.addChannel(Tl), this.setRenderSwitchAnimation = function() {
      u2.isInRenderSwitchAnimation = false;
    }, this.stateDisposers = [], this.stateDisposers.push(t2.autorun(function() {
      u2.callIfRegistered("zoom", t2.zoom);
    })), this.stateDisposers.push(t2.autorun(function() {
      u2.callIfRegistered("pan", { panX: t2.panX, panY: t2.panY });
    })), this.stateDisposers.push(t2.autorun(function() {
      u2.setLayout(t2.layout);
    })), this.stateDisposers.push(t2.autorun(function() {
      u2.setLayoutOptions(t2.layoutOptions);
    })), v3 || this.stateDisposers.push(t2.autorun(function() {
      !function(e3, t3) {
        var r4 = e3.nodes, n4 = e3.rels, o3 = e3.layout, i3 = r4.items.length, a3 = n4.items.length;
        if (0 !== i3 || 0 !== a3) {
          var u3 = "".concat(i3, " node").concat(1 !== i3 ? "s" : ""), s3 = "".concat(a3, " relationship").concat(1 !== a3 ? "s" : ""), c3 = "displayed using a ".concat(null != o3 ? o3 : "forceDirected", " layout");
          t3.innerHTML = "A graph visualization with ".concat(u3, " and ").concat(s3, ", ").concat(c3, ".");
        } else t3.innerHTML = "An empty graph visualization.";
      }(t2, u2.descriptionElement);
    })), this.stateDisposers.push(t2.autorun(function() {
      var e3 = t2.webGLVisible ? "1" : "0";
      e3 !== u2.glCanvas.style.opacity && (u2.justSwitchedRenderer = true, u2.glCanvas.style.opacity = e3, u2.c2dCanvas.style.opacity = t2.webGLVisible ? "0" : "1");
    })), this.startMainLoop(), this.zoomTransitionHandler = new vl({ state: t2, getNodePositions: function(e3) {
      return u2.currentLayout.getNodePositions(e3);
    }, canvas: w2 }), this.layoutTimeLimit = null !== (a2 = n3.layoutTimeLimit) && void 0 !== a2 ? a2 : 16, this.pixelRatio = jn(), this.removeResizeListener = xr()(_2, function() {
      Uc(w2), Uc(P2), u2.canvasRect = w2.getBoundingClientRect(), u2.hasResized = true;
    }), this.removeMinimapResizeListener = xr()(c2, function() {
      Uc(O2);
    }), kl[d2] = this, window.__Nvl_dumpNodes = function(e3) {
      var t3;
      return null === (t3 = Rl(e3)) || void 0 === t3 ? void 0 : t3.dumpNodes();
    }, window.__Nvl_dumpRelationships = function(e3) {
      var t3;
      return null === (t3 = Rl(e3)) || void 0 === t3 ? void 0 : t3.dumpRelationships();
    }, window.__Nvl_registerDoneCallback = function(e3, t3) {
      var r4;
      return null === (r4 = Rl(t3)) || void 0 === r4 ? void 0 : r4.on(jl, e3);
    }, window.__Nvl_getNodesOnScreen = function(e3) {
      var t3;
      return null === (t3 = Rl(e3)) || void 0 === t3 ? void 0 : t3.getNodesOnScreen();
    }, window.__Nvl_getZoomLevel = function(e3) {
      var t3;
      return null === (t3 = Rl(e3)) || void 0 === t3 ? void 0 : t3.getScale();
    }, this.pendingZoomOperation = null;
  }, t = [{ key: "onWebGLContextLost", value: function(e2) {
    this.callIfRegistered("onWebGLContextLost", e2);
  } }, { key: "updateMinimapZoom", value: function() {
    var e2 = this.state, t2 = e2.nodes, r3 = e2.maxNodeRadius, n3 = e2.maxMinimapZoom, o2 = e2.minMinimapZoom, i2 = Qc(Object.values(t2.idToPosition), r3), a2 = i2.centerX, u2 = i2.centerY, s2 = i2.nodesWidth, c2 = i2.nodesHeight, l2 = Jc(s2, c2, this.glMinimapCanvas.width, this.glMinimapCanvas.height), f2 = l2.zoomX, h2 = l2.zoomY, d2 = el(f2, h2, o2, n3);
    this.state.updateMinimapZoomToFit(d2, a2, u2);
  } }, { key: "startMainLoop", value: function() {
    var e2 = this, t2 = this.state, r3 = t2.nodes, n3 = t2.rels;
    this.currentLayout.update();
    var o2 = this.currentLayout.getNodePositions(r3.items);
    r3.updatePositions(o2), this.isRenderingDisabled || (this.glController.renderMainScene(o2), this.glController.renderMinimap(o2), this.canvasRenderer.processUpdates(), this.canvasRenderer.render(o2)), this.layoutRunner = setInterval(function() {
      try {
        !function() {
          var t3 = e2.currentLayout.getShouldUpdate(), r4 = t3 || e2.justSwitchedLayout, n4 = r4 && !e2.layoutUpdating && !e2.justSwitchedLayout;
          if (r4) for (var o3 = window.performance.now(), i3 = n4 ? 0 : 50, a2 = 0; a2 < i3; a2++) {
            e2.currentLayout.update(e2.justSwitchedLayout), e2.justSwitchedLayout = false;
            var u2 = window.performance.now();
            if (!t3 || u2 - o3 > e2.layoutTimeLimit) break;
          }
        }();
      } catch (t3) {
        if (!e2.callbacks.isCallbackRegistered(Cl)) throw t3;
        e2.callIfRegistered(Cl, t3);
      }
    }, 13);
    var i2 = function() {
      try {
        !function(t3) {
          if (e2.destroyed) eo.info("STEP IN A DESTROYED STRIP");
          else {
            var o3 = jn();
            if (o3 !== e2.pixelRatio) return e2.pixelRatio = o3, void e2.callIfRegistered("restart");
            var i3 = e2.currentLayout.getShouldUpdate(), a2 = i3 || e2.justSwitchedLayout, u2 = e2.currentLayout.getComputing(), s2 = e2.zoomTransitionHandler.needsToRun(), c2 = a2 && !e2.layoutUpdating && !e2.justSwitchedLayout, l2 = e2.layoutComputing && !u2, f2 = e2.state.webGLVisible && e2.glController.needsToRun(), h2 = !e2.state.webGLVisible && e2.canvasRenderer.needsToRun(), d2 = e2.isInRenderSwitchAnimation || e2.justSwitchedRenderer, p3 = e2.hasResized, v3 = null !== e2.pendingZoomOperation, y3 = e2.glController.minimapMouseDown;
            if (r3.clearChannel(Tl), n3.clearChannel(Tl), s2 || a2 || l2 || d2 || f2 || h2 || y3 || p3 || v3) {
              !v3 || c2 || e2.currentLayout.getComputing() || (e2.pendingZoomOperation(), e2.pendingZoomOperation = null);
              var b2 = i3 || u2 || l2;
              e2.zoomTransitionHandler.update(b2, function() {
                return e2.callIfRegistered("onZoomTransitionDone");
              }), p3 && e2.glController.onResize();
              var m2 = e2.currentLayout.getNodePositions(r3.items);
              if (r3.updatePositions(m2), e2.callbacks.isCallbackRegistered(Al) && e2.callIfRegistered(Al, e2.dumpNodes()), e2.updateMinimapZoom(), e2.glController.renderMinimap(m2), !e2.isRenderingDisabled) {
                if ((e2.state.webGLVisible || d2) && e2.glController.renderMainScene(m2), !e2.state.webGLVisible || d2) {
                  e2.canvasRenderer.processUpdates(), e2.canvasRenderer.render(m2);
                  for (var g2 = 0; g2 < n3.items.length; g2++) {
                    var _2 = n3.items[g2].id, w2 = e2.canvasRenderer.arrowBundler.getBundle(n3.items[g2]), O2 = n3.idToHtmlOverlay[_2], S2 = w2.labelInfo[_2];
                    if (O2 && S2) {
                      var E2 = S2.rotation, P2 = S2.position, T2 = S2.width, x3 = S2.height, C2 = e2.mapCanvasSpaceToRelativePosition(P2.x, P2.y), j2 = C2.x, A2 = C2.y, k2 = T2 > 5 && !e2.state.webGLVisible;
                      Object.assign(O2.style, { top: "".concat(A2, "px"), left: "".concat(j2, "px"), width: "".concat(T2, "px"), height: "".concat(x3, "px"), display: k2 ? "block" : "none", transform: "translate(-50%, -50%) scale(".concat(Number(e2.state.zoom), ") rotate(").concat(E2, "rad") });
                    }
                  }
                }
                for (var R2 = 0; R2 < r3.items.length; R2++) {
                  var I2 = r3.items[R2], M2 = I2.id, N2 = I2.size, D2 = r3.idToHtmlOverlay[M2];
                  if (D2) {
                    var L2 = e2.state.nodes.idToPosition[M2], U2 = e2.mapCanvasSpaceToRelativePosition(L2.x, L2.y), F2 = U2.x, B2 = U2.y, z2 = "".concat(2 * (null != N2 ? N2 : gn), "px");
                    Object.assign(D2.style, { top: "".concat(B2, "px"), left: "".concat(F2, "px"), width: z2, height: z2, transform: "translate(-50%, -50%) scale(".concat(Number(e2.state.zoom), ")") });
                  }
                }
              }
            }
            var V2 = !a2 && e2.layoutUpdating, W2 = u2 !== e2.layoutComputing;
            e2.layoutComputing = u2, e2.layoutUpdating = a2, V2 && e2.callIfRegistered(jl), W2 && e2.callIfRegistered("onLayoutComputing", u2), e2.justSwitchedRenderer = false, e2.hasResized = false, void 0 !== t3 && t3();
          }
        }(function() {
          e2.animationRequestId = window.requestAnimationFrame(i2);
        });
      } catch (t3) {
        if (!e2.callbacks.isCallbackRegistered(Cl)) throw t3;
        e2.callIfRegistered(Cl, t3);
      }
    };
    this.animationRequestId = window.requestAnimationFrame(i2);
  } }, { key: "updateHtmlOverlay", value: function() {
    this.state.nodes.updateHtmlOverlay(this.htmlOverlay), this.state.rels.updateHtmlOverlay(this.htmlOverlay);
  } }, { key: "dumpNodes", value: function() {
    var e2, t2 = vr(this.state.nodes.items), r3 = this.state.nodes.idToPosition, n3 = [], o2 = function(e3, t3) {
      var r4 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
      if (!r4) {
        if (Array.isArray(e3) || (r4 = function(e4, t4) {
          if (e4) {
            if ("string" == typeof e4) return _l(e4, t4);
            var r5 = {}.toString.call(e4).slice(8, -1);
            return "Object" === r5 && e4.constructor && (r5 = e4.constructor.name), "Map" === r5 || "Set" === r5 ? Array.from(e4) : "Arguments" === r5 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r5) ? _l(e4, t4) : void 0;
          }
        }(e3)) || t3 && e3 && "number" == typeof e3.length) {
          r4 && (e3 = r4);
          var n4 = 0, o3 = function() {
          };
          return { s: o3, n: function() {
            return n4 >= e3.length ? { done: true } : { done: false, value: e3[n4++] };
          }, e: function(e4) {
            throw e4;
          }, f: o3 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var i3, a3 = true, u3 = false;
      return { s: function() {
        r4 = r4.call(e3);
      }, n: function() {
        var e4 = r4.next();
        return a3 = e4.done, e4;
      }, e: function(e4) {
        u3 = true, i3 = e4;
      }, f: function() {
        try {
          a3 || null == r4.return || r4.return();
        } finally {
          if (u3) throw i3;
        }
      } };
    }(t2);
    try {
      for (o2.s(); !(e2 = o2.n()).done; ) {
        var i2 = e2.value, a2 = r3[i2.id], u2 = this.mapCanvasSpaceToRelativePosition(a2.x, a2.y);
        n3.push(Ol(Ol({}, i2), {}, { x: u2.x, y: u2.y }));
      }
    } catch (e3) {
      o2.e(e3);
    } finally {
      o2.f();
    }
    return n3;
  } }, { key: "dumpRelationships", value: function() {
    return vr(this.state.rels.items);
  } }, { key: "mapCanvasSpaceToRelativePosition", value: function(e2, t2) {
    var r3 = this.canvasRect, n3 = window.devicePixelRatio || 1, o2 = (e2 - this.state.panX) * this.state.zoom / n3, i2 = (t2 - this.state.panY) * this.state.zoom / n3;
    return { x: o2 + 0.5 * r3.width, y: i2 + 0.5 * r3.height };
  } }, { key: "mapRelativePositionToCanvasSpace", value: function(e2, t2) {
    var r3 = this.glCanvas.getBoundingClientRect(), n3 = window.devicePixelRatio || 1, o2 = n3 * (e2 - 0.5 * r3.width), i2 = n3 * (t2 - 0.5 * r3.height);
    return { x: this.state.panX + o2 / this.state.zoom, y: this.state.panY + i2 / this.state.zoom };
  } }, { key: "getNodePositions", value: function() {
    return Object.values(vr(this.state.nodes.idToPosition));
  } }, { key: "setNodePositions", value: function(e2) {
    var t2 = this, r3 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n3 = [], o2 = e2.filter(function(e3) {
      var r4 = e3.id, o3 = void 0 !== t2.state.nodes.idToItem[r4];
      return o3 || n3.push(r4), o3;
    });
    n3.length > 0 && eo.warn("Failed to set positions for following nodes:", n3, "They do not exist in the graph."), this.state.nodes.updatePositions(o2), this.currentLayout.updateNodes(o2), r3 || this.currentLayout.terminateUpdate(), this.hasResized = true, 0 === this.getNodesOnScreen().nodes.length && this.state.setPan(0, 0), this.state.clearFit();
  } }, { key: "isLayoutMoving", value: function() {
    return this.layoutUpdating;
  } }, { key: "getNodesOnScreen", value: function() {
    var e2 = this.glCanvas.getBoundingClientRect(), t2 = this.mapRelativePositionToCanvasSpace(0, 0), r3 = t2.x, n3 = t2.y, o2 = this.mapRelativePositionToCanvasSpace(e2.width, e2.height);
    return function(e3, t3, r4, n4, o3) {
      var i2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : ["node"], a2 = o3.nodes, u2 = o3.rels, s2 = Math.min(e3, r4), c2 = Math.max(e3, r4), l2 = Math.min(t3, n4), f2 = Math.max(t3, n4), h2 = [], d2 = [];
      if (i2.includes("node")) for (var p3 = 0, v3 = Object.values(a2.idToPosition); p3 < v3.length; p3++) {
        var y3 = v3[p3], b2 = y3.x, m2 = y3.y;
        void 0 !== b2 && void 0 !== m2 && b2 > s2 && b2 < c2 && m2 > l2 && m2 < f2 && h2.push(y3);
      }
      if (i2.includes("relationship")) {
        var g2, _2 = qc(u2.items);
        try {
          for (_2.s(); !(g2 = _2.n()).done; ) {
            var w2 = g2.value, O2 = w2.from, S2 = w2.to, E2 = a2.idToPosition[O2], P2 = a2.idToPosition[S2];
            if (void 0 !== E2.x && void 0 !== E2.y && void 0 !== P2.x && void 0 !== P2.y) {
              var T2 = E2.x > s2 && E2.x < c2 && E2.y > l2 && E2.y < f2, x3 = P2.x > s2 && P2.x < c2 && P2.y > l2 && P2.y < f2;
              T2 && x3 && d2.push(w2);
            }
          }
        } catch (e4) {
          _2.e(e4);
        } finally {
          _2.f();
        }
      }
      return { nodes: h2, rels: d2 };
    }(r3, n3, o2.x, o2.y, this.state, ["node"]);
  } }, { key: "registerDoneCallback", value: function(e2) {
    this.layoutDoneCallback = e2;
  } }, { key: "registerComputingCallback", value: function(e2) {
    this.layoutComputingCallback = e2;
  } }, { key: "getPosition", value: function(e2) {
    return this.currentLayout.getNodePositions([{ id: e2 }])[0];
  } }, { key: "getScale", value: function() {
    return this.state.zoom;
  } }, { key: "getPan", value: function() {
    return { x: this.state.panX, y: this.state.panY };
  } }, { key: "setZoomLevel", value: function(e2) {
    var t2 = this;
    this.pendingZoomOperation = function() {
      return t2.state.setZoom(e2, t2.glCanvas);
    };
  } }, { key: "setPanCoordinates", value: function(e2, t2) {
    this.state.setPan(e2, t2);
  } }, { key: "setZoomAndPan", value: function(e2, t2, r3) {
    var n3 = this;
    this.pendingZoomOperation = function() {
      return n3.state.setZoomPan(e2, t2, r3, n3.glCanvas);
    };
  } }, { key: "fit", value: function(e2, t2) {
    var r3 = this;
    this.pendingZoomOperation = function() {
      return r3.state.fitNodes(e2, t2);
    };
  } }, { key: "resetZoom", value: function() {
    var e2 = this;
    this.pendingZoomOperation = function() {
      return e2.state.setZoomReset();
    };
  } }, { key: "setRenderer", value: function(e2) {
    this.state.setRenderer(e2);
  } }, { key: "on", value: function(e2, t2) {
    this.callbacks.register(e2, t2);
  } }, { key: "isDestroyed", value: function() {
    return this.destroyed;
  } }, { key: "destroy", value: function() {
    var e2;
    this.destroyed || (this.animationRequestId && window.cancelAnimationFrame(this.animationRequestId), void 0 !== this.layoutRunner && window.clearInterval(this.layoutRunner), this.glController.destroy(), this.glCanvas.removeEventListener("transitionend", this.setRenderSwitchAnimation), void 0 !== this.webGLContext && Vc(this.webGLContext), void 0 !== this.webGLMinimapContext && Vc(this.webGLMinimapContext), Bc(this.glCanvas), Bc(this.glMinimapCanvas), this.canvasRenderer.destroy(), Bc(this.c2dCanvas), this.removeResizeListener(), this.removeMinimapResizeListener(), this.forceLayout.destroy(), this.hierarchicalLayout.destroy(), this.gridLayout.destroy(), this.freeLayout.destroy(), this.htmlOverlay.remove(), this.descriptionElement.remove(), this.zoomTransitionHandler.destroy(), this.stateDisposers.forEach(function(e3) {
      e3();
    }), e2 = this.instanceId, delete kl[e2], this.destroyed = true);
  } }, { key: "callIfRegistered", value: function() {
    for (var e2 = arguments.length, t2 = new Array(e2), r3 = 0; r3 < e2; r3++) t2[r3] = arguments[r3];
    this.callbacks.callIfRegistered.apply(this.callbacks, arguments);
  } }, { key: "getCanvasRelsAt", value: function(e2) {
    return this.canvasRenderer.getRelsAt(e2);
  } }, { key: "getCanvasNodesAt", value: function(e2) {
    var t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
    return this.canvasRenderer.getNodesAt(e2, t2);
  } }, { key: "getLayout", value: function(e2) {
    return e2 === qi ? this.hierarchicalLayout : e2 === Wi ? this.forceLayout : e2 === Gi ? this.gridLayout : e2 === Hi ? this.freeLayout : e2 === Yi ? this.d3ForceLayout : this.forceLayout;
  } }, { key: "setLayout", value: function(e2) {
    eo.info("Switching to layout: ".concat(e2));
    var t2 = this.currentLayoutType, r3 = this.getLayout(e2);
    "free" === e2 && r3.setNodePositions(this.state.nodes.idToPosition), this.currentLayout = r3, this.currentLayoutType = e2, t2 && t2 !== this.currentLayoutType && (this.justSwitchedLayout = true);
  } }, { key: "setLayoutOptions", value: function(e2) {
    this.getLayout(this.state.layout).setOptions(e2);
  } }, { key: "getDataUrlForCanvas", value: function(e2) {
    var t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], r3 = e2.toDataURL("image/png");
    return t2 ? r3.replace(/^data:image\/png/, "data:application/octet-stream") : r3;
  } }, { key: "initiateFileDownload", value: function(e2, t2) {
    var r3 = document.createElement("a");
    r3.style.display = "none", r3.setAttribute("download", e2);
    var n3 = this.getDataUrlForCanvas(t2, true);
    r3.setAttribute("href", n3), r3.click();
  } }, { key: "updateLayoutAndPositions", value: function() {
    var e2 = this.state.nodes, t2 = e2.items;
    this.currentLayout.update(this.justSwitchedLayout), this.justSwitchedLayout = false;
    var r3 = this.currentLayout.getNodePositions(t2);
    return e2.updatePositions(r3), r3;
  } }, { key: "saveToFile", value: function(e2) {
    var t2 = Ol(Ol({}, xl), e2), r3 = this.createCanvasAndRenderImage(this.c2dCanvas.width, this.c2dCanvas.height, t2.backgroundColor);
    this.initiateFileDownload(t2.filename, r3), Bc(r3), r3 = null;
  } }, { key: "getImageDataURL", value: function(e2) {
    var t2 = Ol(Ol({}, xl), e2), r3 = this.createCanvasAndRenderImage(this.c2dCanvas.width, this.c2dCanvas.height, t2.backgroundColor), n3 = this.getDataUrlForCanvas(r3);
    return Bc(r3), r3 = null, n3;
  } }, { key: "prepareLargeFileForDownload", value: function(e2) {
    var t2 = this, r3 = Ol(Ol({}, xl), e2), n3 = this.currentLayout.getNodePositions(this.state.nodes.items), o2 = Qc(n3, 100), i2 = o2.nodesWidth, a2 = o2.nodesHeight, u2 = o2.centerX, s2 = o2.centerY, c2 = Math.max(Math.min(i2 + 100, 15e3), 5e3), l2 = Math.max(Math.min(a2 + 100, 15e3), 5e3);
    return this.isRenderingDisabled = true, new Promise(function(e3, n4) {
      try {
        t2.setPanCoordinates(u2, s2);
        var o3 = Math.max(c2 / i2 - 0.02, t2.state.minZoom), f2 = Math.max(l2 / a2 - 0.02, t2.state.minZoom);
        t2.setZoomLevel(Math.min(o3, f2));
      } catch (e4) {
        return eo.error("An error occurred while downloading the file"), void n4(new Error("An error occurred while downloading the file", { cause: e4 }));
      }
      setTimeout(function() {
        try {
          var o4 = t2.createCanvasAndRenderImage(c2, l2, r3.backgroundColor);
          t2.initiateFileDownload(r3.filename, o4), Bc(o4), o4 = null, e3(true);
        } catch (e4) {
          n4(new Error("An error occurred while downloading the file", { cause: e4 }));
        }
      }, 500);
    });
  } }, { key: "createCanvasAndRenderImage", value: function(e2, t2, r3) {
    var n3 = function(e3, t3) {
      var r4 = document.createElement("canvas");
      return document.body.appendChild(r4), Dc(r4, e3, t3), r4;
    }(e2, t2), o2 = function(e3) {
      return e3.getContext("2d");
    }(n3), i2 = this.updateLayoutAndPositions();
    return this.canvasRenderer.processUpdates(), this.canvasRenderer.render(i2, { canvas: n3, context: o2, backgroundColor: r3, ignoreAnimations: true, showCaptions: true }), n3;
  } }, { key: "saveFullGraphToLargeFile", value: (r2 = bl().m(function e2(t2) {
    var r3, n3, o2, i2, a2;
    return bl().w(function(e3) {
      for (; ; ) switch (e3.n) {
        case 0:
          return r3 = Ol(Ol({}, xl), t2), n3 = this.state.zoom, o2 = this.state.panX, i2 = this.state.panY, e3.p = 1, e3.n = 2, this.prepareLargeFileForDownload(r3);
        case 2:
          e3.n = 5;
          break;
        case 3:
          if (e3.p = 3, a2 = e3.v, eo.error("An error occurred while downloading the image"), !this.callbacks.isCallbackRegistered(Cl)) {
            e3.n = 4;
            break;
          }
          this.callIfRegistered(Cl, a2), e3.n = 5;
          break;
        case 4:
          throw a2;
        case 5:
          return e3.p = 5, this.isRenderingDisabled = false, this.setZoomLevel(n3), this.setPanCoordinates(o2, i2), e3.f(5);
        case 6:
          return e3.a(2);
      }
    }, e2, this, [[1, 3, 5, 6]]);
  }), n2 = function() {
    var e2 = this, t2 = arguments;
    return new Promise(function(n3, o2) {
      var i2 = r2.apply(e2, t2);
      function a2(e3) {
        gl(i2, n3, o2, a2, u2, "next", e3);
      }
      function u2(e3) {
        gl(i2, n3, o2, a2, u2, "throw", e3);
      }
      a2(void 0);
    });
  }, function(e2) {
    return n2.apply(this, arguments);
  }) }], t && Sl(e.prototype, t), Object.defineProperty(e, "prototype", { writable: false }), e;
  var e, t, r2, n2;
}();
function Ml(e) {
  return Ml = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, Ml(e);
}
function Nl(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}
function Dl(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, Ul(n2.key), n2);
  }
}
function Ll(e, t, r2) {
  return t && Dl(e.prototype, t), r2 && Dl(e, r2), Object.defineProperty(e, "prototype", { writable: false }), e;
}
function Ul(e) {
  var t = function(e2) {
    if ("object" != Ml(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != Ml(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == Ml(t) ? t : t + "";
}
var Fl = function() {
  return Ll(function e(t, r2) {
    if (Nl(this, e), !t) throw new Error("Tried to create a node with no data");
    this.data = t, this.parent = r2, this.children = [];
  }, [{ key: "addChild", value: function(e) {
    this.children.push(e);
  } }, { key: "isRoot", value: function() {
    return null === this.parent;
  } }, { key: "print", value: function() {
    var e = this.data.name;
    this.isRoot() || (e = "".concat(e, "		").concat(function(e2) {
      for (var t2 = (Math.round(1e3 * e2) / 1e3).toFixed(3); t2.length < 6; ) t2 = " ".concat(t2);
      return t2;
    }(this.data._timeSpent()), " ms"), this.parent.isRoot() || (e = "".concat(e, "	").concat(this._percentageOfParentSpent(), "%")));
    var t = this.noOfChildren() > 0;
    for (var r2 in t ? (e = "".concat(e, "	 Children: ").concat(this.noOfChildren()), console.groupCollapsed(e)) : console.log(e), this.children) this.children[r2].print();
    t && console.groupEnd();
  } }, { key: "noOfChildren", value: function() {
    return this.children.length;
  } }, { key: "_percentageOfParentSpent", value: function() {
    return Math.round(this.data._timeSpent() / this.parent.data._timeSpent() * 100);
  } }]);
}();
var Bl = function() {
  return Ll(function e(t) {
    Nl(this, e), this.name = t, this.startTime = performance.now(), this.endTime = null;
  }, [{ key: "close", value: function() {
    this.endTime = performance.now();
  } }, { key: "_timeSpent", value: function() {
    if (null === this.startTime || null === this.endTime) throw new Error("You have an error in your performance measurements that makes the whole tree unreliable. You probably forgot to call performanceTestEnd on ".concat(this.name));
    return this.endTime - this.startTime;
  } }]);
}();
var zl = function() {
  return Ll(function e() {
    Nl(this, e), this.root = new Fl(new Bl("Performance Tree"), null), this.current = this.root;
  }, [{ key: "clear", value: function() {
    this.root.children = [], this.current = this.root;
  } }, { key: "add", value: function(e) {
    if (this.current) {
      var t = new Fl(e, this.current);
      this.current.addChild(t), this.current = t;
    } else {
      if (this.root) throw new Error("Performance tree is screwed up");
      this.root = new Fl(e, null), this.current = this.root;
    }
  } }, { key: "close", value: function() {
    if (this.current.isRoot()) throw new Error("Tried to close performance tree root. You probably have one too many Performance.endTest() in your code.");
    this.current.data.close(), this.current = this.current.parent;
  } }, { key: "getCurrentData", value: function() {
    return this.current.data;
  } }, { key: "print", value: function() {
    this.root.noOfChildren() > 0 && this.root.print();
  } }]);
}();
var Vl = function() {
  return Ll(function e() {
    Nl(this, e), window.performance ? (this.disabled = false, this.tree = new zl()) : (this.disabled = true, this.tree = null);
  }, [{ key: "startTest", value: function(e) {
    if (!this.disabled) {
      var t, r2 = e || (t = "at" === (t = new Error().stack.split("\n")[3].trim()).split(" ")[0] ? t.split(" ")[1] : t.split("@")[0]), n2 = new Bl(r2);
      this.tree.add(n2);
    }
  } }, { key: "endTest", value: function() {
    this.disabled || this.tree.close();
  } }, { key: "reset", value: function() {
    this.disabled || this.tree.clear();
  } }, { key: "print", value: function() {
    this.disabled || this.tree.print();
  } }]);
}();
function Wl(e, t) {
  var r2 = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
  if (!r2) {
    if (Array.isArray(e) || (r2 = function(e2, t2) {
      if (e2) {
        if ("string" == typeof e2) return ql(e2, t2);
        var r3 = {}.toString.call(e2).slice(8, -1);
        return "Object" === r3 && e2.constructor && (r3 = e2.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(e2) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? ql(e2, t2) : void 0;
      }
    }(e)) || t && e && "number" == typeof e.length) {
      r2 && (e = r2);
      var n2 = 0, o2 = function() {
      };
      return { s: o2, n: function() {
        return n2 >= e.length ? { done: true } : { done: false, value: e[n2++] };
      }, e: function(e2) {
        throw e2;
      }, f: o2 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var i2, a2 = true, u2 = false;
  return { s: function() {
    r2 = r2.call(e);
  }, n: function() {
    var e2 = r2.next();
    return a2 = e2.done, e2;
  }, e: function(e2) {
    u2 = true, i2 = e2;
  }, f: function() {
    try {
      a2 || null == r2.return || r2.return();
    } finally {
      if (u2) throw i2;
    }
  } };
}
function ql(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var r2 = 0, n2 = Array(t); r2 < t; r2++) n2[r2] = e[r2];
  return n2;
}
function Gl(e) {
  return "from" in e && "to" in e;
}
function Hl(e) {
  this.channels[e] = { adds: {}, updates: {}, removes: {} };
}
function Yl(e) {
  delete this.channels[e];
}
function Xl(e) {
  this.channels[e].adds = {}, this.channels[e].updates = {}, this.channels[e].removes = {};
}
var Kl = function(e) {
  return "html" in e ? e.html : "captionHtml" in e ? e.captionHtml : void 0;
};
function Zl(e, t) {
  var r2, n2 = false, o2 = Wl(e);
  try {
    for (o2.s(); !(r2 = o2.n()).done; ) {
      var a2 = r2.value, u2 = a2.id;
      if (void 0 === this.idToItem[u2]) {
        if (a2 = (0, i.cloneDeep)(a2), this.items.push(a2), this.idToItem[u2] = a2, this.idToPosition[u2] = { id: u2, x: 0, y: 0 }, "x" in a2 && "y" in a2) {
          var s2 = a2, c2 = s2.x, l2 = s2.y;
          isNaN(c2) || isNaN(l2) || (this.idToPosition[u2].x = c2, this.idToPosition[u2].y = l2);
        }
        var f2 = Kl(a2);
        if (f2 instanceof HTMLElement) {
          var h2 = document.createElement("div");
          Object.assign(h2.style, { position: "absolute" }), h2.appendChild(f2), this.idToHtmlOverlay[u2] = h2;
        }
        for (var d2 = Object.values(this.channels), p3 = 0, v3 = d2; p3 < v3.length; p3++) {
          var y3 = v3[p3];
          void 0 === y3.removes[u2] ? y3.adds[u2] = a2 : (delete y3.removes[u2], y3.updates[u2] = a2);
        }
        n2 = true;
      }
    }
  } catch (e2) {
    o2.e(e2);
  } finally {
    o2.f();
  }
  n2 && (this.version += 1, void 0 !== t && (t.added = true));
}
function $l(e, t) {
  var r2, n2 = false, o2 = Wl(e);
  try {
    for (o2.s(); !(r2 = o2.n()).done; ) {
      var i2 = r2.value, a2 = i2.id, u2 = this.idToItem[a2];
      if (void 0 !== u2) {
        Object.assign(u2, i2);
        var s2 = Kl(i2);
        if (s2 instanceof HTMLElement) {
          var c2;
          null === (c2 = this.idToHtmlOverlay[a2]) || void 0 === c2 || c2.remove(), delete this.idToHtmlOverlay[a2];
          var l2 = document.createElement("div");
          Object.assign(l2.style, { position: "absolute" }), l2.appendChild(s2), this.idToHtmlOverlay[a2] = l2;
        }
        for (var f2 = Object.values(this.channels), h2 = 0, d2 = f2; h2 < d2.length; h2++) {
          var p3 = d2[h2];
          if (void 0 === p3.adds[a2]) {
            var v3 = p3.updates[a2];
            void 0 === v3 && (v3 = { id: a2 }, Gl(u2) && (v3 = { id: a2, from: u2.from, to: u2.to }), p3.updates[a2] = v3), Object.assign(v3, i2);
          }
        }
        void 0 !== t && (t.updated = true);
      }
      n2 = true;
    }
  } catch (e2) {
    o2.e(e2);
  } finally {
    o2.f();
  }
  n2 && (this.version += 1);
}
function Ql(e, t) {
  var r2, n2 = false, o2 = Wl(e);
  try {
    for (o2.s(); !(r2 = o2.n()).done; ) {
      var i2 = r2.value, a2 = this.idToItem[i2];
      if (void 0 !== a2) {
        var u2;
        n2 = true, delete this.idToItem[a2.id], delete this.idToPosition[a2.id], null === (u2 = this.idToHtmlOverlay[a2.id]) || void 0 === u2 || u2.remove(), delete this.idToHtmlOverlay[a2.id], this.items.splice(this.items.indexOf(a2), 1);
        for (var s2 = Object.values(this.channels), c2 = 0, l2 = s2; c2 < l2.length; c2++) {
          var f2 = l2[c2];
          void 0 !== f2.adds[i2] ? delete f2.adds[i2] : (delete f2.updates[i2], f2.removes[i2] = a2);
        }
      }
    }
  } catch (e2) {
    o2.e(e2);
  } finally {
    o2.f();
  }
  n2 && (void 0 !== t && (t.removed = true), this.version += 1);
}
function Jl(e) {
  var t, r2 = Wl(e);
  try {
    for (r2.s(); !(t = r2.n()).done; ) {
      var n2 = t.value;
      if (void 0 !== this.idToPosition[n2.id]) {
        var o2 = this.idToPosition[n2.id];
        Object.assign(o2, n2);
      } else this.idToPosition[n2.id] = { id: n2.id, x: n2.x, y: n2.y, pinned: n2.pinned };
    }
  } catch (e2) {
    r2.e(e2);
  } finally {
    r2.f();
  }
}
function ef(e) {
  for (var t in this.idToHtmlOverlay) {
    var r2 = this.idToHtmlOverlay[t];
    e.appendChild(r2);
  }
}
var tf = function() {
  return { idToItem: Ue.shallow({}), items: Ue.shallow([]), channels: Ue.shallow({}), idToPosition: Ue.shallow({}), idToHtmlOverlay: Ue.shallow({}), version: 0, addChannel: te(Hl), removeChannel: te(Yl), clearChannel: te(Xl), add: te(Zl), update: te($l), remove: te(Ql), updatePositions: te(Jl), updateHtmlOverlay: te(ef) };
};
function rf(e) {
  return rf = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, rf(e);
}
function nf(e, t) {
  var r2 = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e);
    t && (n2 = n2.filter(function(t2) {
      return Object.getOwnPropertyDescriptor(e, t2).enumerable;
    })), r2.push.apply(r2, n2);
  }
  return r2;
}
function of(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r2 = null != arguments[t] ? arguments[t] : {};
    t % 2 ? nf(Object(r2), true).forEach(function(t2) {
      af(e, t2, r2[t2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r2)) : nf(Object(r2)).forEach(function(t2) {
      Object.defineProperty(e, t2, Object.getOwnPropertyDescriptor(r2, t2));
    });
  }
  return e;
}
function af(e, t, r2) {
  return (t = function(e2) {
    var t2 = function(e3) {
      if ("object" != rf(e3) || !e3) return e3;
      var t3 = e3[Symbol.toPrimitive];
      if (void 0 !== t3) {
        var r3 = t3.call(e3, "string");
        if ("object" != rf(r3)) return r3;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return String(e3);
    }(e2);
    return "symbol" == rf(t2) ? t2 : t2 + "";
  }(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
var uf = function(e) {
  var t = e.minZoom, r2 = e.maxZoom, n2 = e.allowDynamicMinZoom, o2 = void 0 === n2 || n2, a2 = e.layout, u2 = e.layoutOptions, s2 = e.styling, c2 = void 0 === s2 ? {} : s2, l2 = e.panX, f2 = void 0 === l2 ? 0 : l2, h2 = e.panY, d2 = void 0 === h2 ? 0 : h2, p3 = e.initialZoom, v3 = e.renderer, y3 = void 0 === v3 ? Xi : v3, b2 = e.disableWebGL, m2 = void 0 !== b2 && b2, g2 = e.disableWebWorkers, _2 = void 0 !== g2 && g2, w2 = e.disableTelemetry, O2 = void 0 !== w2 && w2;
  H(true), yr.isolateGlobalState();
  var S2 = (0, i.isNil)(t) ? 0.075 : t, E2 = (0, i.isNil)(r2) ? 10 : r2, P2 = function(e2) {
    var t2 = e2.nodeDefaultBorderColor, r3 = e2.selectedBorderColor, n3 = e2.disabledItemColor, o3 = e2.disabledItemFontColor, i2 = e2.selectedInnerBorderColor, a3 = e2.dropShadowColor, u3 = e2.defaultNodeColor, s3 = e2.defaultRelationshipColor, c3 = e2.minimapViewportBoxColor, l3 = Ku({}, Vu.default), f3 = Ku({}, Vu.selected), h3 = Ku({}, Wu.selected), d3 = { color: On, fontColor: "#DDDDDD" }, p4 = wn, v5 = _n;
    return Qu(i2, function(e3) {
      f3.rings[0].color = e3, h3.rings[0].color = e3;
    }, "selectedInnerBorderColor"), Qu(r3, function(e3) {
      f3.rings[1].color = e3, h3.rings[1].color = e3;
    }, "selectedBorderColor"), Qu(t2, function(e3) {
      var t3;
      l3.rings = [{ color: e3, widthFactor: 0.025 }], f3.rings = [{ color: e3, widthFactor: 0.025 }].concat(function(e4) {
        if (Array.isArray(e4)) return Yu(e4);
      }(t3 = f3.rings) || function(e4) {
        if ("undefined" != typeof Symbol && null != e4[Symbol.iterator] || null != e4["@@iterator"]) return Array.from(e4);
      }(t3) || function(e4, t4) {
        if (e4) {
          if ("string" == typeof e4) return Yu(e4, t4);
          var r4 = {}.toString.call(e4).slice(8, -1);
          return "Object" === r4 && e4.constructor && (r4 = e4.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(e4) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? Yu(e4, t4) : void 0;
        }
      }(t3) || function() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }());
    }, "nodeDefaultBorderColor"), Qu(a3, function(e3) {
      f3.shadow.color = e3, h3.shadow.color = e3;
    }, "dropShadowColor"), Qu(n3, function(e3) {
      d3.color = e3;
    }, "disabledItemColor"), Qu(o3, function(e3) {
      d3.fontColor = e3;
    }, "disabledItemFontColor"), Qu(u3, function(e3) {
      v5 = e3;
    }, "defaultNodeColor"), Qu(s3, function(e3) {
      p4 = e3;
    }, "defaultRelationshipColor"), { nodeBorderStyles: { default: l3, selected: f3 }, relationshipBorderStyles: { default: Wu.default, selected: h3 }, disabledItemStyles: d3, defaultNodeColor: v5, defaultRelationshipColor: p4, minimapViewportBoxColor: c3 || Tn };
  }(c2), T2 = P2.nodeBorderStyles, x3 = P2.relationshipBorderStyles, C2 = P2.disabledItemStyles, j2 = P2.defaultNodeColor, A2 = P2.defaultRelationshipColor, k2 = P2.minimapViewportBoxColor, R2 = Ue({ zoom: p3 || qu, minimapZoom: qu, defaultZoomLevel: qu, panX: f2, panY: d2, minimapPanX: 0, minimapPanY: 0, fitNodeIds: [], resetZoom: false, zoomOptions: Gu, forceWebGL: false, renderer: y3, disableWebGL: m2, disableWebWorkers: _2, disableTelemetry: O2, fitMovement: 0, layout: a2, layoutOptions: u2, maxDistance: 0, maxNodeRadius: 50, nodeBorderStyles: T2, relationshipBorderStyles: x3, disabledItemStyles: C2, defaultNodeColor: j2, defaultRelationshipColor: A2, minimapViewportBoxColor: k2, get minZoom() {
    return S2;
  }, get maxZoom() {
    return E2;
  }, get minMinimapZoom() {
    return 0;
  }, get maxMinimapZoom() {
    return 0.2;
  }, get webGLVisible() {
    var e2 = this.fitMovement > 50;
    return "webgl" === this.renderer || e2;
  }, nodes: tf(), rels: tf(), graphUpdates: 0, waypoints: { data: Ue.shallow({}), counter: 0 }, setGraphUpdated: te(function() {
    this.graphUpdates += 1;
  }), setRenderer: te(function(e2) {
    te(function() {
      this.graphUpdates += 1;
    }), this.renderer = e2;
  }), setWaypoints: te(function(e2) {
    this.waypoints.data = e2, this.waypoints.counter += 1;
  }), setZoomPan: te(function(e2, t2, r3, n3) {
    if (o2) {
      var i2 = Object.values(this.nodes.idToPosition), a3 = nl(i2, S2, E2, n3, e2, this.zoom);
      a3 !== this.zoom && (this.zoom = a3, e2 === a3 && (this.panX = t2, this.panY = r3));
    } else {
      var u3 = rl(e2, this.zoom, S2, E2);
      u3 !== this.zoom && (this.zoom = u3, this.panX = t2, this.panY = r3);
    }
    this.fitNodeIds = [], this.resetZoom = false, this.forceWebGL = false;
  }), setZoom: te(function(e2, t2) {
    if (o2) {
      var r3 = Object.values(this.nodes.idToPosition);
      this.zoom = nl(r3, S2, E2, t2, e2, this.zoom);
    } else this.zoom = rl(e2, this.zoom, S2, E2);
    this.fitNodeIds = [], this.fitMovement = 0, this.resetZoom = false, this.forceWebGL = false;
  }), setPan: te(function(e2, t2) {
    this.panX = e2, this.panY = t2, this.fitNodeIds = [], this.resetZoom = false, this.forceWebGL = false;
  }), setLayout: te(function(e2) {
    this.layout = e2;
  }), setLayoutOptions: te(function(e2) {
    this.layoutOptions = e2;
  }), fitNodes: te(function(e2) {
    var t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    this.fitNodeIds = (0, i.intersection)(e2, (0, i.map)(this.nodes.items, "id")), this.zoomOptions = of(of({}, Gu), t2);
  }), setZoomReset: te(function() {
    this.resetZoom = true;
  }), clearFit: te(function() {
    this.fitNodeIds = [], this.forceWebGL = false, this.fitMovement = 0, this.zoomOptions = Gu;
  }), clearReset: te(function() {
    this.resetZoom = false, this.fitMovement = 0;
  }), updateZoomToFit: te(function(e2, t2, r3, n3) {
    var i2;
    if (this.fitMovement = Math.abs(e2 - this.zoom) + Math.abs(t2 - this.panX) + Math.abs(r3 - this.panY), o2) {
      var a3 = Object.values(this.nodes.idToPosition);
      i2 = nl(a3, S2, E2, n3, e2, this.zoom);
    } else i2 = rl(e2, this.zoom, S2, E2);
    this.zoom = i2, this.panX = t2, this.panY = r3;
  }), updateMinimapZoomToFit: te(function(e2, t2, r3) {
    this.minimapZoom = e2, this.minimapPanX = t2, this.minimapPanY = r3;
  }), autorun: he, reaction: de });
  return R2;
};
var sf = function(e) {
  return Boolean(e) && "string" == typeof e.id && e.id.length > 0;
};
var cf = o(1187);
function lf(e) {
  return lf = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, lf(e);
}
function ff(e, t) {
  var r2 = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e);
    t && (n2 = n2.filter(function(t2) {
      return Object.getOwnPropertyDescriptor(e, t2).enumerable;
    })), r2.push.apply(r2, n2);
  }
  return r2;
}
function hf(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r2 = null != arguments[t] ? arguments[t] : {};
    t % 2 ? ff(Object(r2), true).forEach(function(t2) {
      df(e, t2, r2[t2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r2)) : ff(Object(r2)).forEach(function(t2) {
      Object.defineProperty(e, t2, Object.getOwnPropertyDescriptor(r2, t2));
    });
  }
  return e;
}
function df(e, t, r2) {
  return (t = function(e2) {
    var t2 = function(e3) {
      if ("object" != lf(e3) || !e3) return e3;
      var t3 = e3[Symbol.toPrimitive];
      if (void 0 !== t3) {
        var r3 = t3.call(e3, "string");
        if ("object" != lf(r3)) return r3;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return String(e3);
    }(e2);
    return "symbol" == lf(t2) ? t2 : t2 + "";
  }(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
function pf(e) {
  return function(e2) {
    if (Array.isArray(e2)) return vf(e2);
  }(e) || function(e2) {
    if ("undefined" != typeof Symbol && null != e2[Symbol.iterator] || null != e2["@@iterator"]) return Array.from(e2);
  }(e) || function(e2, t) {
    if (e2) {
      if ("string" == typeof e2) return vf(e2, t);
      var r2 = {}.toString.call(e2).slice(8, -1);
      return "Object" === r2 && e2.constructor && (r2 = e2.constructor.name), "Map" === r2 || "Set" === r2 ? Array.from(e2) : "Arguments" === r2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r2) ? vf(e2, t) : void 0;
    }
  }(e) || function() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }();
}
function vf(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var r2 = 0, n2 = Array(t); r2 < t; r2++) n2[r2] = e[r2];
  return n2;
}
var yf = function(e) {
  return { id: e.elementId };
};
var bf = function(e) {
  return { id: e.elementId, from: e.startNodeElementId, to: e.endNodeElementId };
};
var mf = cf.resultTransformers.mappedResultTransformer({ map: function(e) {
  return Object.values(e.toObject());
}, collect: function(e) {
  var t = { nodes: [], relationships: [] }, r2 = /* @__PURE__ */ new Map();
  return function(e2) {
    for (var t2 = pf(e2), r3 = []; t2.length; ) {
      var n2 = t2.pop();
      Array.isArray(n2) ? t2.push.apply(t2, pf(n2)) : r3.push(n2);
    }
    return r3;
  }(e).forEach(function(e2) {
    (0, cf.isNode)(e2) ? (t.nodes.push(yf(e2)), r2.set(e2.elementId, e2)) : (0, cf.isPath)(e2) ? e2.segments.forEach(function(e3) {
      t.nodes.push(yf(e3.start)), t.nodes.push(yf(e3.end)), t.relationships.push(bf(e3.relationship)), r2.set(e3.start.elementId, e3.start), r2.set(e3.end.elementId, e3.end), r2.set(e3.relationship.elementId, e3.relationship);
    }) : (0, cf.isRelationship)(e2) && (t.relationships.push(bf(e2)), r2.set(e2.elementId, e2));
  }), hf(hf({}, t), {}, { recordObjectMap: r2 });
} });
var gf = ((e) => {
  var t = {};
  return o.d(t, e), t;
})({ AnalyticsBrowser: () => AnalyticsBrowser });
var _f;
var wf = new Uint8Array(16);
function Of() {
  if (!_f && !(_f = "undefined" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || "undefined" != typeof msCrypto && "function" == typeof msCrypto.getRandomValues && msCrypto.getRandomValues.bind(msCrypto))) throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
  return _f(wf);
}
var Sf = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
for (Ef = [], Pf = 0; Pf < 256; ++Pf) Ef.push((Pf + 256).toString(16).substr(1));
var Ef;
var Pf;
var Tf = function(e) {
  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, r2 = (Ef[e[t + 0]] + Ef[e[t + 1]] + Ef[e[t + 2]] + Ef[e[t + 3]] + "-" + Ef[e[t + 4]] + Ef[e[t + 5]] + "-" + Ef[e[t + 6]] + Ef[e[t + 7]] + "-" + Ef[e[t + 8]] + Ef[e[t + 9]] + "-" + Ef[e[t + 10]] + Ef[e[t + 11]] + Ef[e[t + 12]] + Ef[e[t + 13]] + Ef[e[t + 14]] + Ef[e[t + 15]]).toLowerCase();
  if (!function(e2) {
    return "string" == typeof e2 && Sf.test(e2);
  }(r2)) throw TypeError("Stringified UUID is invalid");
  return r2;
};
var xf;
var Cf;
var jf = 0;
var Af = 0;
var kf = function(e, t, r2) {
  var n2 = t && r2 || 0, o2 = t || new Array(16), i2 = (e = e || {}).node || xf, a2 = void 0 !== e.clockseq ? e.clockseq : Cf;
  if (null == i2 || null == a2) {
    var u2 = e.random || (e.rng || Of)();
    null == i2 && (i2 = xf = [1 | u2[0], u2[1], u2[2], u2[3], u2[4], u2[5]]), null == a2 && (a2 = Cf = 16383 & (u2[6] << 8 | u2[7]));
  }
  var s2 = void 0 !== e.msecs ? e.msecs : Date.now(), c2 = void 0 !== e.nsecs ? e.nsecs : Af + 1, l2 = s2 - jf + (c2 - Af) / 1e4;
  if (l2 < 0 && void 0 === e.clockseq && (a2 = a2 + 1 & 16383), (l2 < 0 || s2 > jf) && void 0 === e.nsecs && (c2 = 0), c2 >= 1e4) throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  jf = s2, Af = c2, Cf = a2;
  var f2 = (1e4 * (268435455 & (s2 += 122192928e5)) + c2) % 4294967296;
  o2[n2++] = f2 >>> 24 & 255, o2[n2++] = f2 >>> 16 & 255, o2[n2++] = f2 >>> 8 & 255, o2[n2++] = 255 & f2;
  var h2 = s2 / 4294967296 * 1e4 & 268435455;
  o2[n2++] = h2 >>> 8 & 255, o2[n2++] = 255 & h2, o2[n2++] = h2 >>> 24 & 15 | 16, o2[n2++] = h2 >>> 16 & 255, o2[n2++] = a2 >>> 8 | 128, o2[n2++] = 255 & a2;
  for (var d2 = 0; d2 < 6; ++d2) o2[n2 + d2] = i2[d2];
  return t || Tf(o2);
};
function Rf(e) {
  return Rf = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, Rf(e);
}
function If() {
  var e, t, r2 = "function" == typeof Symbol ? Symbol : {}, n2 = r2.iterator || "@@iterator", o2 = r2.toStringTag || "@@toStringTag";
  function i2(r3, n3, o3, i3) {
    var s3 = n3 && n3.prototype instanceof u2 ? n3 : u2, c3 = Object.create(s3.prototype);
    return Mf(c3, "_invoke", function(r4, n4, o4) {
      var i4, u3, s4, c4 = 0, l3 = o4 || [], f3 = false, h3 = { p: 0, n: 0, v: e, a: d2, f: d2.bind(e, 4), d: function(t2, r5) {
        return i4 = t2, u3 = 0, s4 = e, h3.n = r5, a2;
      } };
      function d2(r5, n5) {
        for (u3 = r5, s4 = n5, t = 0; !f3 && c4 && !o5 && t < l3.length; t++) {
          var o5, i5 = l3[t], d3 = h3.p, p3 = i5[2];
          r5 > 3 ? (o5 = p3 === n5) && (s4 = i5[(u3 = i5[4]) ? 5 : (u3 = 3, 3)], i5[4] = i5[5] = e) : i5[0] <= d3 && ((o5 = r5 < 2 && d3 < i5[1]) ? (u3 = 0, h3.v = n5, h3.n = i5[1]) : d3 < p3 && (o5 = r5 < 3 || i5[0] > n5 || n5 > p3) && (i5[4] = r5, i5[5] = n5, h3.n = p3, u3 = 0));
        }
        if (o5 || r5 > 1) return a2;
        throw f3 = true, n5;
      }
      return function(o5, l4, p3) {
        if (c4 > 1) throw TypeError("Generator is already running");
        for (f3 && 1 === l4 && d2(l4, p3), u3 = l4, s4 = p3; (t = u3 < 2 ? e : s4) || !f3; ) {
          i4 || (u3 ? u3 < 3 ? (u3 > 1 && (h3.n = -1), d2(u3, s4)) : h3.n = s4 : h3.v = s4);
          try {
            if (c4 = 2, i4) {
              if (u3 || (o5 = "next"), t = i4[o5]) {
                if (!(t = t.call(i4, s4))) throw TypeError("iterator result is not an object");
                if (!t.done) return t;
                s4 = t.value, u3 < 2 && (u3 = 0);
              } else 1 === u3 && (t = i4.return) && t.call(i4), u3 < 2 && (s4 = TypeError("The iterator does not provide a '" + o5 + "' method"), u3 = 1);
              i4 = e;
            } else if ((t = (f3 = h3.n < 0) ? s4 : r4.call(n4, h3)) !== a2) break;
          } catch (t2) {
            i4 = e, u3 = 1, s4 = t2;
          } finally {
            c4 = 1;
          }
        }
        return { value: t, done: f3 };
      };
    }(r3, o3, i3), true), c3;
  }
  var a2 = {};
  function u2() {
  }
  function s2() {
  }
  function c2() {
  }
  t = Object.getPrototypeOf;
  var l2 = [][n2] ? t(t([][n2]())) : (Mf(t = {}, n2, function() {
    return this;
  }), t), f2 = c2.prototype = u2.prototype = Object.create(l2);
  function h2(e2) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(e2, c2) : (e2.__proto__ = c2, Mf(e2, o2, "GeneratorFunction")), e2.prototype = Object.create(f2), e2;
  }
  return s2.prototype = c2, Mf(f2, "constructor", c2), Mf(c2, "constructor", s2), s2.displayName = "GeneratorFunction", Mf(c2, o2, "GeneratorFunction"), Mf(f2), Mf(f2, o2, "Generator"), Mf(f2, n2, function() {
    return this;
  }), Mf(f2, "toString", function() {
    return "[object Generator]";
  }), (If = function() {
    return { w: i2, m: h2 };
  })();
}
function Mf(e, t, r2, n2) {
  var o2 = Object.defineProperty;
  try {
    o2({}, "", {});
  } catch (e2) {
    o2 = 0;
  }
  Mf = function(e2, t2, r3, n3) {
    if (t2) o2 ? o2(e2, t2, { value: r3, enumerable: !n3, configurable: !n3, writable: !n3 }) : e2[t2] = r3;
    else {
      var i2 = function(t3, r4) {
        Mf(e2, t3, function(e3) {
          return this._invoke(t3, r4, e3);
        });
      };
      i2("next", 0), i2("throw", 1), i2("return", 2);
    }
  }, Mf(e, t, r2, n2);
}
function Nf(e, t, r2, n2, o2, i2, a2) {
  try {
    var u2 = e[i2](a2), s2 = u2.value;
  } catch (e2) {
    return void r2(e2);
  }
  u2.done ? t(s2) : Promise.resolve(s2).then(n2, o2);
}
function Df(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, Lf(n2.key), n2);
  }
}
function Lf(e) {
  var t = function(e2) {
    if ("object" != Rf(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != Rf(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == Rf(t) ? t : t + "";
}
var Uf = window.localStorage;
var Ff = "neo4j.nvl.sTid";
var Bf = false;
var zf = function() {
  return e = function e2() {
    var t2, r3, n3;
    (function(e3, t3) {
      if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    })(this, e2), t2 = this, n3 = void 0, (r3 = Lf(r3 = "analytics")) in t2 ? Object.defineProperty(t2, r3, { value: n3, enumerable: true, configurable: true, writable: true }) : t2[r3] = n3;
    var o3 = new gf.AnalyticsBrowser();
    this.analytics = o3;
  }, t = [{ key: "init", value: function(e2) {
    this.analytics.load({ writeKey: e2 }), this.analytics.addSourceMiddleware(function(e3) {
      var t2 = e3.payload, r3 = e3.next, n3 = t2.obj.context.page;
      void 0 !== n3 && (n3.url = "", n3.title = "", n3.search = "", n3.referrer = "", n3.path = ""), r3(t2);
    });
  } }, { key: "trackEvent", value: (n2 = If().m(function e2(t2) {
    var r3;
    return If().w(function(e3) {
      for (; ; ) switch (e3.n) {
        case 0:
          return e3.n = 1, this.ready();
        case 1:
          r3 = "".concat(t2.eventPrefix ? t2.eventPrefix : "NVL_core", "-").concat(t2.event), this.analytics.track(r3, t2.properties).catch(function(e4) {
            eo.warn("TRACKING: Event tracking is failed. err: ".concat(e4));
          });
        case 2:
          return e3.a(2);
      }
    }, e2, this);
  }), o2 = function() {
    var e2 = this, t2 = arguments;
    return new Promise(function(r3, o3) {
      var i2 = n2.apply(e2, t2);
      function a2(e3) {
        Nf(i2, r3, o3, a2, u2, "next", e3);
      }
      function u2(e3) {
        Nf(i2, r3, o3, a2, u2, "throw", e3);
      }
      a2(void 0);
    });
  }, function(e2) {
    return o2.apply(this, arguments);
  }) }, { key: "identify", value: function() {
    if (!Bf) {
      var e2 = this.getSegmentTrackingId();
      this.analytics.identify(e2).catch(function(e3) {
        eo.debug("TRACKING: Identifying user for Segment tracking failed. err: ".concat(e3));
      }), Bf = true;
    }
  } }, { key: "loadSavedSegmentId", value: function() {
    try {
      var e2 = Uf.getItem(Ff);
      return "string" == typeof e2 ? e2 : null;
    } catch (e3) {
      return eo.debug("TRACKING: Retrieving tracking Id failed. err: ".concat(e3)), null;
    }
  } }, { key: "getSegmentTrackingId", value: function() {
    var e2 = this.loadSavedSegmentId(), t2 = null != e2 ? e2 : kf();
    return this.saveTrackingId(t2), t2;
  } }, { key: "saveTrackingId", value: function(e2) {
    Uf.setItem(Ff, e2);
  } }, { key: "ready", value: function() {
    return this.analytics.ready().catch(function(e2) {
      eo.debug("TRACKING: segment track instance not ready. err: ".concat(e2));
    });
  } }], t && Df(e.prototype, t), r2 && Df(e, r2), Object.defineProperty(e, "prototype", { writable: false }), e;
  var e, t, r2, n2, o2;
}();
function Vf(e) {
  return Vf = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, Vf(e);
}
function Wf(e, t) {
  var r2 = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
  if (!r2) {
    if (Array.isArray(e) || (r2 = qf(e)) || t && e && "number" == typeof e.length) {
      r2 && (e = r2);
      var n2 = 0, o2 = function() {
      };
      return { s: o2, n: function() {
        return n2 >= e.length ? { done: true } : { done: false, value: e[n2++] };
      }, e: function(e2) {
        throw e2;
      }, f: o2 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var i2, a2 = true, u2 = false;
  return { s: function() {
    r2 = r2.call(e);
  }, n: function() {
    var e2 = r2.next();
    return a2 = e2.done, e2;
  }, e: function(e2) {
    u2 = true, i2 = e2;
  }, f: function() {
    try {
      a2 || null == r2.return || r2.return();
    } finally {
      if (u2) throw i2;
    }
  } };
}
function qf(e, t) {
  if (e) {
    if ("string" == typeof e) return Gf(e, t);
    var r2 = {}.toString.call(e).slice(8, -1);
    return "Object" === r2 && e.constructor && (r2 = e.constructor.name), "Map" === r2 || "Set" === r2 ? Array.from(e) : "Arguments" === r2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r2) ? Gf(e, t) : void 0;
  }
}
function Gf(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var r2 = 0, n2 = Array(t); r2 < t; r2++) n2[r2] = e[r2];
  return n2;
}
function Hf(e, t) {
  var r2 = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e);
    t && (n2 = n2.filter(function(t2) {
      return Object.getOwnPropertyDescriptor(e, t2).enumerable;
    })), r2.push.apply(r2, n2);
  }
  return r2;
}
function Yf(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r2 = null != arguments[t] ? arguments[t] : {};
    t % 2 ? Hf(Object(r2), true).forEach(function(t2) {
      $f(e, t2, r2[t2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r2)) : Hf(Object(r2)).forEach(function(t2) {
      Object.defineProperty(e, t2, Object.getOwnPropertyDescriptor(r2, t2));
    });
  }
  return e;
}
function Xf(e, t) {
  for (var r2 = 0; r2 < t.length; r2++) {
    var n2 = t[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, Qf(n2.key), n2);
  }
}
function Kf(e, t, r2) {
  Zf(e, t), t.set(e, r2);
}
function Zf(e, t) {
  if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function $f(e, t, r2) {
  return (t = Qf(t)) in e ? Object.defineProperty(e, t, { value: r2, enumerable: true, configurable: true, writable: true }) : e[t] = r2, e;
}
function Qf(e) {
  var t = function(e2) {
    if ("object" != Vf(e2) || !e2) return e2;
    var t2 = e2[Symbol.toPrimitive];
    if (void 0 !== t2) {
      var r2 = t2.call(e2, "string");
      if ("object" != Vf(r2)) return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(e2);
  }(e);
  return "symbol" == Vf(t) ? t : t + "";
}
function Jf(e, t) {
  return e.get(th(e, t));
}
function eh(e, t, r2) {
  return e.set(th(e, t), r2), r2;
}
function th(e, t, r2) {
  if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : r2;
  throw new TypeError("Private element is not present on this object");
}
var rh = /* @__PURE__ */ new WeakMap();
var nh = /* @__PURE__ */ new WeakMap();
var oh = /* @__PURE__ */ new WeakMap();
var ih = /* @__PURE__ */ new WeakMap();
var ah = /* @__PURE__ */ new WeakMap();
var uh = /* @__PURE__ */ new WeakMap();
var sh = /* @__PURE__ */ new WeakSet();
var ch = function() {
  return e = function e2(t2) {
    var r2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [], o2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}, i2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : {};
    !function(e3, t3) {
      if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
    }(this, e2), function(e3, t3) {
      Zf(e3, t3), t3.add(e3);
    }(this, sh), $f(this, "performance", void 0), Kf(this, rh, void 0), Kf(this, nh, void 0), Kf(this, oh, void 0), Kf(this, ih, void 0), Kf(this, ah, void 0), Kf(this, uh, void 0), o2.disableTelemetry || (eh(uh, this, new zf()), Jf(uh, this).init("4SGwdwzuDm5WkFvQtz7D6ATQlo14yjmW"), Jf(uh, this).identify()), th(sh, this, fh).call(this, o2), eh(rh, this, new Pr(i2)), this.performance = new Vl(), eh(ih, this, o2), eh(ah, this, t2), this.checkWebGLCompatibility(), th(sh, this, lh).call(this, r2, n2, o2);
  }, t = [{ key: "restart", value: function() {
    var e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], r2 = this.getNodePositions(), n2 = Jf(nh, this), o2 = n2.zoom, i2 = n2.layout, a2 = n2.layoutOptions, u2 = n2.nodes, s2 = n2.rels;
    Jf(oh, this).destroy(), Object.assign(Jf(ih, this), e2), th(sh, this, lh).call(this, u2.items, s2.items, Jf(ih, this)), this.setZoom(o2), this.setLayout(i2), this.setLayoutOptions(a2), this.addAndUpdateElementsInGraph(u2.items, s2.items), t2 && this.setNodePositions(r2);
  } }, { key: "addAndUpdateElementsInGraph", value: function() {
    var e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
    th(sh, this, ph).call(this, e2), th(sh, this, vh).call(this, t2, e2);
    var r2 = { added: false, updated: false };
    Jf(nh, this).nodes.update(e2, Yf({}, r2)), Jf(nh, this).rels.update(t2, Yf({}, r2)), Jf(nh, this).nodes.add(e2, Yf({}, r2)), Jf(nh, this).rels.add(t2, Yf({}, r2)), Jf(nh, this).setGraphUpdated(), Jf(oh, this).updateHtmlOverlay();
  } }, { key: "getSelectedNodes", value: function() {
    var e2 = this;
    return vr(Jf(nh, this).nodes.items).filter(function(e3) {
      return e3.selected;
    }).map(function(t2) {
      return Yf(Yf({}, t2), Jf(nh, e2).nodes.idToPosition[t2.id]);
    });
  } }, { key: "getSelectedRelationships", value: function() {
    return vr(Jf(nh, this).rels.items).filter(function(e2) {
      return e2.selected;
    });
  } }, { key: "updateElementsInGraph", value: function(e2, t2) {
    var r2 = this, n2 = { added: false, updated: false }, o2 = e2.filter(function(e3) {
      return void 0 !== Jf(nh, r2).nodes.idToItem[e3.id];
    }), i2 = t2.filter(function(e3) {
      return void 0 !== Jf(nh, r2).rels.idToItem[e3.id];
    });
    th(sh, this, ph).call(this, o2), th(sh, this, vh).call(this, i2, e2), Jf(nh, this).nodes.update(o2, Yf({}, n2)), Jf(nh, this).rels.update(i2, Yf({}, n2)), Jf(oh, this).updateHtmlOverlay();
  } }, { key: "addElementsToGraph", value: function(e2, t2) {
    th(sh, this, ph).call(this, e2), th(sh, this, vh).call(this, t2, e2);
    var r2 = { added: false, updated: false };
    Jf(nh, this).nodes.add(e2, Yf({}, r2)), Jf(nh, this).rels.add(t2, Yf({}, r2)), Jf(oh, this).updateHtmlOverlay();
  } }, { key: "removeNodesWithIds", value: function(e2) {
    if (Array.isArray(e2) && !(0, i.isEmpty)(e2)) {
      var t2, r2 = {}, n2 = Wf(e2);
      try {
        for (n2.s(); !(t2 = n2.n()).done; ) r2[t2.value] = true;
      } catch (e3) {
        n2.e(e3);
      } finally {
        n2.f();
      }
      var o2, a2 = [], u2 = Wf(Jf(nh, this).rels.items);
      try {
        for (u2.s(); !(o2 = u2.n()).done; ) {
          var s2 = o2.value;
          true !== r2[s2.from] && true !== r2[s2.to] || a2.push(s2.id);
        }
      } catch (e3) {
        u2.e(e3);
      } finally {
        u2.f();
      }
      a2.length > 0 && th(sh, this, dh).call(this, a2), th(sh, this, hh).call(this, e2), Jf(nh, this).setGraphUpdated(), Jf(oh, this).updateHtmlOverlay();
    }
  } }, { key: "removeRelationshipsWithIds", value: function(e2) {
    Array.isArray(e2) && !(0, i.isEmpty)(e2) && (th(sh, this, dh).call(this, e2), Jf(nh, this).setGraphUpdated(), Jf(oh, this).updateHtmlOverlay());
  } }, { key: "getNodes", value: function() {
    return Jf(oh, this).dumpNodes();
  } }, { key: "getRelationships", value: function() {
    return Jf(oh, this).dumpRelationships();
  } }, { key: "getNodeById", value: function(e2) {
    return Jf(nh, this).nodes.idToItem[e2];
  } }, { key: "getRelationshipById", value: function(e2) {
    return Jf(nh, this).rels.idToItem[e2];
  } }, { key: "getPositionById", value: function(e2) {
    return Jf(nh, this).nodes.idToPosition[e2];
  } }, { key: "getCurrentOptions", value: function() {
    return Jf(ih, this);
  } }, { key: "destroy", value: function() {
    Jf(oh, this).destroy();
  } }, { key: "deselectAll", value: function() {
    this.updateElementsInGraph(Jf(nh, this).nodes.items.map(function(e2) {
      return Yf(Yf({}, e2), {}, { selected: false });
    }), Jf(nh, this).rels.items.map(function(e2) {
      return Yf(Yf({}, e2), {}, { selected: false });
    }));
  } }, { key: "fit", value: function(e2, t2) {
    Jf(oh, this).fit(e2, t2);
  } }, { key: "resetZoom", value: function() {
    Jf(oh, this).resetZoom();
  } }, { key: "setRenderer", value: function(e2) {
    Jf(oh, this).setRenderer(e2);
  } }, { key: "setDisableWebGL", value: function() {
    var e2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
    Jf(ih, this).disableWebGL !== e2 && (Jf(ih, this).disableWebGL = e2, this.restart());
  } }, { key: "pinNode", value: function(e2) {
    Jf(nh, this).nodes.update([{ id: e2, pinned: true }], {});
  } }, { key: "unPinNode", value: function(e2) {
    Jf(nh, this).nodes.update(e2.map(function(e3) {
      return { id: e3, pinned: false };
    }), {});
  } }, { key: "setLayout", value: function(e2) {
    Jf(nh, this).setLayout(e2);
  } }, { key: "setLayoutOptions", value: function(e2) {
    Jf(nh, this).setLayoutOptions(e2);
  } }, { key: "getNodesOnScreen", value: function() {
    return Jf(oh, this).getNodesOnScreen();
  } }, { key: "getNodePositions", value: function() {
    return Jf(oh, this).getNodePositions();
  } }, { key: "setNodePositions", value: function(e2) {
    var t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
    Jf(oh, this).setNodePositions(e2, t2);
  } }, { key: "isLayoutMoving", value: function() {
    return Jf(oh, this).isLayoutMoving();
  } }, { key: "saveToFile", value: function() {
    var e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    Jf(oh, this).saveToFile(e2);
  } }, { key: "getImageDataUrl", value: function() {
    var e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    return Jf(oh, this).getImageDataURL(e2);
  } }, { key: "saveFullGraphToLargeFile", value: function() {
    var e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    Jf(oh, this).saveFullGraphToLargeFile(e2);
  } }, { key: "setZoom", value: function(e2) {
    Jf(oh, this).setZoomLevel(e2);
  } }, { key: "setPan", value: function(e2, t2) {
    Jf(oh, this).setPanCoordinates(e2, t2);
  } }, { key: "setZoomAndPan", value: function(e2, t2, r2) {
    Jf(oh, this).setZoomAndPan(e2, t2, r2);
  } }, { key: "getScale", value: function() {
    return Jf(oh, this).getScale();
  } }, { key: "getPan", value: function() {
    return Jf(oh, this).getPan();
  } }, { key: "getHits", value: function(e2) {
    var t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : ["node", "relationship"], r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : { hitNodeMarginWidth: 0 }, n2 = Jf(nh, this), o2 = n2.zoom, i2 = n2.panX, a2 = n2.panY, u2 = n2.webGLVisible, s2 = bc(e2, Jf(ah, this), o2, i2, a2), c2 = s2.x, l2 = s2.y, f2 = u2 ? function(e3, t3, r3) {
      var n3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : ["node", "relationship"], o3 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : {}, i3 = [], a3 = [], u3 = r3.nodes, s3 = r3.rels;
      return n3.includes("node") && i3.push.apply(i3, Wc(function(e4, t4) {
        var r4, n4 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}, o4 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, i4 = [], a4 = qc(arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : []);
        try {
          var u4 = function() {
            var a5, u5 = r4.value, s4 = n4[u5.id];
            if (void 0 === (null == s4 ? void 0 : s4.x) || void 0 === s4.y) return 1;
            var c3 = (null !== (a5 = u5.size) && void 0 !== a5 ? a5 : gn) * jn(), l3 = { x: s4.x - e4, y: s4.y - t4 }, f3 = Math.pow(c3, 2), h2 = Math.pow(c3 + o4, 2), d2 = Math.pow(l3.x, 2) + Math.pow(l3.y, 2), p3 = Math.sqrt(d2);
            if (d2 < h2) {
              var v3 = i4.findIndex(function(e5) {
                return e5.distance > p3;
              });
              i4.splice(-1 !== v3 ? v3 : i4.length, 0, { data: u5, targetCoordinates: { x: s4.x, y: s4.y }, pointerCoordinates: { x: e4, y: t4 }, distanceVector: l3, distance: p3, insideNode: d2 < f3 });
            }
          };
          for (a4.s(); !(r4 = a4.n()).done; ) u4();
        } catch (e5) {
          a4.e(e5);
        } finally {
          a4.f();
        }
        return i4;
      }(e3, t3, u3.items, u3.idToPosition, o3.hitNodeMarginWidth))), n3.includes("relationship") && a3.push.apply(a3, Wc(function(e4, t4) {
        var r4, n4 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}, o4 = [], i4 = {}, a4 = qc(arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : []);
        try {
          var u4 = function() {
            var a5 = r4.value, u5 = a5.from, s4 = a5.to;
            if (void 0 === i4["".concat(u5, ".").concat(s4)]) {
              var c3 = n4[u5], l3 = n4[s4];
              if (void 0 === (null == c3 ? void 0 : c3.x) || void 0 === c3.y) return 0;
              if (void 0 === (null == l3 ? void 0 : l3.x) || void 0 === l3.y) return 0;
              var f3 = us({ x: c3.x, y: c3.y }, { x: l3.x, y: l3.y }, { x: e4, y: t4 });
              if (f3 <= Yc) {
                var h2 = o4.findIndex(function(e5) {
                  return e5.distance > f3;
                });
                o4.splice(-1 !== h2 ? h2 : o4.length, 0, { data: a5, fromTargetCoordinates: { x: c3.x, y: c3.y }, toTargetCoordinates: { x: l3.x, y: l3.y }, pointerCoordinates: { x: e4, y: t4 }, distance: f3 });
              }
              i4["".concat(u5, ".").concat(s4)] = 1, i4["".concat(s4, ".").concat(u5)] = 1;
            }
          };
          for (a4.s(); !(r4 = a4.n()).done; ) u4();
        } catch (e5) {
          a4.e(e5);
        } finally {
          a4.f();
        }
        return o4;
      }(e3, t3, s3.items, u3.idToPosition))), { nodes: i3, relationships: a3 };
    }(c2, l2, Jf(nh, this), t2, r2) : function(e3, t3, r3) {
      var n3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : ["node", "relationship"], o3 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : {}, i3 = [], a3 = [];
      return n3.includes("node") && i3.push.apply(i3, Wc(r3.getCanvasNodesAt({ x: e3, y: t3 }, o3.hitNodeMarginWidth))), n3.includes("relationship") && a3.push.apply(a3, Wc(r3.getCanvasRelsAt({ x: e3, y: t3 }))), { nodes: i3, relationships: a3 };
    }(c2, l2, Jf(oh, this), t2, r2);
    return Yf(Yf({}, e2), {}, { nvlTargets: f2 });
  } }, { key: "getContainer", value: function() {
    return Jf(ah, this);
  } }, { key: "checkWebGLCompatibility", value: function() {
    var e2 = Jf(ih, this).disableWebGL;
    if (void 0 === e2 || !e2) {
      var t2 = function() {
        var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : document.createElement("canvas");
        try {
          return Boolean(void 0 !== window.WebGLRenderingContext && (null !== e3.getContext("webgl") || null !== e3.getContext("experimental-webgl")));
        } catch (e4) {
          return false;
        }
      }();
      if (!t2) {
        if (void 0 !== e2) throw new Xo("Could not initialize WebGL");
        Jf(ih, this).renderer = Xi, eo.warn("GPU acceleration is not available on your browser. Falling back to CPU layout and rendering. You can disable this warning by setting the disableWebGL option to true.");
      }
      void 0 === e2 && (Jf(ih, this).disableWebGL = !t2);
    }
  } }], t && Xf(e.prototype, t), Object.defineProperty(e, "prototype", { writable: false }), e;
  var e, t;
}();
function lh() {
  var e, t = this, r2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], o2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
  eh(nh, this, uf(o2)), o2.minimapContainer instanceof HTMLElement || delete o2.minimapContainer, eh(oh, this, new Il(Jf(nh, this), Jf(ah, this), o2)), this.addAndUpdateElementsInGraph(r2, n2), Jf(oh, this).on("restart", this.restart.bind(this));
  var i2, a2, u2 = Wf((i2 = Jf(rh, this).callbacks, Object.entries(i2)));
  try {
    var s2 = function() {
      var e2, r3, n3 = (e2 = a2.value, r3 = 2, function(e3) {
        if (Array.isArray(e3)) return e3;
      }(e2) || function(e3, t2) {
        var r4 = null == e3 ? null : "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
        if (null != r4) {
          var n4, o4, i4, a3, u3 = [], s3 = true, c3 = false;
          try {
            if (i4 = (r4 = r4.call(e3)).next, 0 === t2) {
              if (Object(r4) !== r4) return;
              s3 = false;
            } else for (; !(s3 = (n4 = i4.call(r4)).done) && (u3.push(n4.value), u3.length !== t2); s3 = true) ;
          } catch (e4) {
            c3 = true, o4 = e4;
          } finally {
            try {
              if (!s3 && null != r4.return && (a3 = r4.return(), Object(a3) !== a3)) return;
            } finally {
              if (c3) throw o4;
            }
          }
          return u3;
        }
      }(e2, r3) || qf(e2, r3) || function() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }()), o3 = n3[0], i3 = n3[1];
      void 0 !== i3 && Jf(oh, t).on(o3, function() {
        for (var e3 = arguments.length, r4 = new Array(e3), n4 = 0; n4 < e3; n4++) r4[n4] = arguments[n4];
        return i3.apply(Jf(rh, t), r4);
      });
    };
    for (u2.s(); !(a2 = u2.n()).done; ) s2();
  } catch (e2) {
    u2.e(e2);
  } finally {
    u2.f();
  }
  setTimeout(function() {
    Jf(oh, t).callIfRegistered("onInitialization");
  });
  var c2 = null === (e = Jf(ah, this)) || void 0 === e ? void 0 : e.getAttribute("id");
  Jf(ih, this).disableTelemetry || setTimeout(function() {
    Jf(oh, t).isDestroyed() || Jf(uh, t).trackEvent({ eventPrefix: An.includes(c2) ? c2 : null, event: "instantiated", properties: {} });
  }, 200);
}
function fh(e) {
  var t, r2 = e.logging;
  void 0 !== (null == r2 ? void 0 : r2.level) && (t = r2.level, eo.setLevel(t), function(e2, t2) {
    var r3 = e2.methodFactory;
    e2.methodFactory = function(e3, n2, o2) {
      var i2 = r3(e3, n2, o2);
      return function() {
        for (var r4 = arguments.length, n3 = new Array(r4), o3 = 0; o3 < r4; o3++) n3[o3] = arguments[o3];
        "function" == typeof t2.logger ? t2.logger.apply(t2, [e3].concat(n3)) : i2.apply(void 0, n3);
      };
    }, e2.setLevel(e2.getLevel());
  }(eo, r2));
}
function hh(e) {
  var t = Array.isArray(e) ? e : [e], r2 = Jf(nh, this), n2 = r2.nodes, o2 = r2.fitNodeIds;
  n2.remove(t, { removed: false }), o2.length && void 0 !== t.find(function(e2) {
    return o2.includes(e2);
  }) && Jf(nh, this).fitNodes(o2.filter(function(e2) {
    return !t.includes(e2);
  }));
}
function dh(e) {
  var t = Array.isArray(e) ? e : [e];
  Jf(nh, this).rels.remove(t, { removed: false });
}
function ph(e) {
  var t = e.find(function(e2) {
    return !function(e3) {
      return Boolean(e3) && "string" == typeof e3.id && e3.id.length > 0;
    }(e2);
  });
  if (t) {
    var r2 = "";
    throw /^\d+$/.test(t.id) || (r2 = " Node ids need to be numeric strings. Strings that contain anything other than numbers are not yet supported."), new TypeError("Invalid node provided: ".concat(JSON.stringify(t), ".").concat(r2));
  }
}
function vh(e) {
  for (var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], r2 = "", n2 = null, o2 = Jf(nh, this), i2 = o2.nodes, a2 = o2.rels, u2 = {}, s2 = 0; s2 < t.length; s2++) {
    var c2 = t[s2];
    u2[c2.id] = c2;
  }
  for (var l2 = Yf(Yf({}, i2.idToItem), u2), f2 = a2.idToItem, h2 = 0; h2 < e.length; h2++) {
    var d2 = e[h2];
    if (!sf(d2)) {
      n2 = d2, /^\d+$/.test(d2.id) && (r2 = " Node ids need to be numeric strings. Strings that contain anything other than numbers are not yet supported.");
      break;
    }
    if (void 0 === f2[d2.id]) {
      var p3 = l2[d2.from], v3 = l2[d2.to];
      if (void 0 === p3) {
        r2 = ' Node with id "'.concat(d2.from, '" does not exist.'), n2 = d2;
        break;
      }
      if (void 0 === v3) {
        r2 = ' Node with id "'.concat(d2.to, '" does not exist.'), n2 = d2;
        break;
      }
    }
  }
  if (null !== n2) throw new TypeError("Invalid relationship provided: ".concat(JSON.stringify(n2), ".").concat(r2));
}
var bh = ch;

// node_modules/@neo4j-nvl/react/lib/basic-wrapper/BasicNvlWrapper.js
var import_react2 = __toESM(require_react());

// node_modules/@neo4j-nvl/react/lib/utils/constants.js
var BASIC_WRAPPER_ID = "NVL_basic-wrapper";
var INTERACTIVE_WRAPPER_ID = "NVL_interactive-wrapper";

// node_modules/@neo4j-nvl/react/lib/utils/graph-comparison.js
var import_lodash = __toESM(require_lodash2());
var getMapDifferences = (prevGraphElements, newGraphElements) => {
  const prevMap = (0, import_lodash.keyBy)(prevGraphElements, "id");
  const currentMap = (0, import_lodash.keyBy)(newGraphElements, "id");
  const prevIds = (0, import_lodash.sortBy)((0, import_lodash.keys)(prevMap));
  const currentIds = (0, import_lodash.sortBy)((0, import_lodash.keys)(currentMap));
  const added = [];
  const removed = [];
  const updated = [];
  let i2 = 0;
  let j2 = 0;
  while (i2 < prevIds.length && j2 < currentIds.length) {
    const prevId = prevIds[i2];
    const currId = currentIds[j2];
    if (prevId === void 0 || currId === void 0) {
      continue;
    }
    if (prevId === currId) {
      if (!(0, import_lodash.isEqual)(prevMap[prevId], currentMap[currId])) {
        updated.push(currId);
      }
      i2 += 1;
      j2 += 1;
    } else if (prevId < currId) {
      removed.push(prevId);
      i2 += 1;
    } else {
      added.push(currId);
      j2 += 1;
    }
  }
  while (i2 < prevIds.length) {
    const prevId = prevIds[i2];
    if (prevId === void 0) {
      continue;
    }
    removed.push(prevId);
    i2 += 1;
  }
  while (j2 < currentIds.length) {
    const currId = currentIds[j2];
    if (currId === void 0) {
      continue;
    }
    added.push(currId);
    j2 += 1;
  }
  return {
    added: added.map((id2) => currentMap[id2]).filter((n2) => !(0, import_lodash.isNil)(n2)),
    removed: removed.map((id2) => prevMap[id2]).filter((n2) => !(0, import_lodash.isNil)(n2)),
    updated: updated.map((id2) => currentMap[id2]).filter((n2) => !(0, import_lodash.isNil)(n2))
  };
};
var getNodeAttributeDifferences = (prevNodes, newNodes) => {
  const prevNodeMap = (0, import_lodash.keyBy)(prevNodes, "id");
  return newNodes.map((nodeToUpdate) => {
    const previousNode = prevNodeMap[nodeToUpdate.id];
    if (previousNode === void 0) {
      return null;
    }
    return (0, import_lodash.transform)(nodeToUpdate, (result, value, key) => {
      if (key === "id" || value !== previousNode[key]) {
        Object.assign(result, { [key]: value });
      }
    });
  }).filter((n2) => n2 !== null && Object.keys(n2).length > 1);
};

// node_modules/@neo4j-nvl/react/lib/utils/hooks.js
var import_lodash2 = __toESM(require_lodash2());
var import_react = __toESM(require_react());
var deepCompareEquals = (a2, b2) => {
  return (0, import_lodash2.isEqual)(a2, b2);
};
var useDeepCompareMemoize = (value) => {
  const ref = (0, import_react.useRef)();
  if (!deepCompareEquals(value, ref.current)) {
    ref.current = value;
  }
  return ref.current;
};
var useDeepCompareEffect = (callback, dependencies) => {
  (0, import_react.useEffect)(callback, dependencies.map(useDeepCompareMemoize));
};

// node_modules/@neo4j-nvl/react/lib/basic-wrapper/BasicNvlWrapper.js
var BasicNvlWrapper = (0, import_react2.memo)((0, import_react2.forwardRef)(({ nodes: nodes3, rels, layout: layout6, layoutOptions, nvlCallbacks = {}, nvlOptions = {}, positions: positions2 = [], zoom: zoom2, pan: pan2, onInitializationError, ...nvlEvents }, ref) => {
  const nvlRef = (0, import_react2.useRef)(null);
  (0, import_react2.useImperativeHandle)(ref, () => {
    const nvlMethods = Object.getOwnPropertyNames(bh.prototype);
    return nvlMethods.reduce((current, method) => ({
      ...current,
      [method]: (...args) => {
        if (nvlRef.current === null) {
          return null;
        }
        return nvlRef.current[method](...args);
      }
    }), {});
  });
  const containerRef = (0, import_react2.useRef)(null);
  const [currentNodes, setCurrentNodes] = (0, import_react2.useState)(nodes3);
  const [currentRels, setCurrentRels] = (0, import_react2.useState)(rels);
  (0, import_react2.useEffect)(() => {
    let newNvl = null;
    if (containerRef.current !== null) {
      if (nvlRef.current === null) {
        const combinedOptions = { ...nvlOptions, layoutOptions };
        if (layout6 !== void 0) {
          combinedOptions.layout = layout6;
        }
        try {
          newNvl = new bh(containerRef.current, currentNodes, currentRels, combinedOptions, nvlCallbacks);
          nvlRef.current = newNvl;
          setCurrentRels(rels);
          setCurrentNodes(nodes3);
        } catch (e) {
          if (typeof onInitializationError === "function") {
            onInitializationError(e);
          } else {
            throw e;
          }
        }
      }
    }
    return () => {
      newNvl == null ? void 0 : newNvl.destroy();
      nvlRef.current = null;
    };
  }, []);
  (0, import_react2.useEffect)(() => {
    if (nvlRef.current === null) {
      return;
    }
    const nodeChanges = getMapDifferences(currentNodes, nodes3);
    const nodeDiff = getNodeAttributeDifferences(currentNodes, nodes3);
    const relChanges = getMapDifferences(currentRels, rels);
    const graphIsUnchanged = nodeChanges.added.length === 0 && nodeChanges.removed.length === 0 && nodeDiff.length === 0 && relChanges.added.length === 0 && relChanges.removed.length === 0 && relChanges.updated.length === 0;
    if (graphIsUnchanged) {
      return;
    }
    setCurrentRels(rels);
    setCurrentNodes(nodes3);
    const nodesToAddAndUpdate = [...nodeChanges.added, ...nodeDiff];
    const relsToAddAndUpdate = [...relChanges.added, ...relChanges.updated];
    nvlRef.current.addAndUpdateElementsInGraph(nodesToAddAndUpdate, relsToAddAndUpdate);
    const relationshipsToRemove = relChanges.removed.map((r2) => r2.id);
    const nodesToRemove = nodeChanges.removed.map((n2) => n2.id);
    nvlRef.current.removeRelationshipsWithIds(relationshipsToRemove);
    nvlRef.current.removeNodesWithIds(nodesToRemove);
  }, [currentNodes, currentRels, nodes3, rels]);
  (0, import_react2.useEffect)(() => {
    const updatedLayout = layout6 ?? nvlOptions.layout;
    if (nvlRef.current === null || updatedLayout === void 0) {
      return;
    }
    nvlRef.current.setLayout(updatedLayout);
  }, [layout6, nvlOptions.layout]);
  useDeepCompareEffect(() => {
    const updatedLayoutOptions = layoutOptions ?? (nvlOptions == null ? void 0 : nvlOptions.layoutOptions);
    if (nvlRef.current === null || updatedLayoutOptions === void 0) {
      return;
    }
    nvlRef.current.setLayoutOptions(updatedLayoutOptions);
  }, [layoutOptions, nvlOptions.layoutOptions]);
  (0, import_react2.useEffect)(() => {
    if (nvlRef.current === null || nvlOptions.renderer === void 0) {
      return;
    }
    nvlRef.current.setRenderer(nvlOptions.renderer);
  }, [nvlOptions.renderer]);
  (0, import_react2.useEffect)(() => {
    if (nvlRef.current === null || nvlOptions.disableWebGL === void 0) {
      return;
    }
    nvlRef.current.setDisableWebGL(nvlOptions.disableWebGL);
  }, [nvlOptions.disableWebGL]);
  (0, import_react2.useEffect)(() => {
    if (nvlRef.current === null || positions2.length === 0) {
      return;
    }
    nvlRef.current.setNodePositions(positions2);
  }, [positions2]);
  (0, import_react2.useEffect)(() => {
    if (nvlRef.current === null) {
      return;
    }
    if (zoom2 !== void 0 && pan2 !== void 0) {
      nvlRef.current.setZoomAndPan(zoom2, pan2.x, pan2.y);
    } else if (zoom2 !== void 0) {
      nvlRef.current.setZoom(zoom2);
    } else if (pan2 !== void 0) {
      nvlRef.current.setPan(pan2.x, pan2.y);
    }
  }, [zoom2, pan2]);
  return (0, import_jsx_runtime.jsx)("div", { id: BASIC_WRAPPER_ID, ref: containerRef, style: { height: "100%", outline: "0" }, ...nvlEvents });
}));

// node_modules/@neo4j-nvl/react/lib/interactive-nvl-wrapper/InteractiveNvlWrapper.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_react5 = __toESM(require_react());

// node_modules/@neo4j-nvl/interaction-handlers/lib/constants.js
var NODE_EDGE_WIDTH = 10;
var DRAG_THRESHOLD = 10;

// node_modules/@neo4j-nvl/interaction-handlers/lib/overlay-renderer/overlay-renderer.js
var marquee = {
  frameWidth: 3,
  frameColor: "#a9a9a9",
  color: "#e0e0e0",
  lineDash: [10, 15],
  opacity: 0.5
};
var OverlayRenderer = class {
  constructor(canvasParent) {
    __publicField(this, "ctx");
    __publicField(this, "canvas");
    __publicField(this, "removeResizeListener");
    const canvas = document.createElement("canvas");
    canvas.style.position = "absolute";
    canvas.style.top = "0";
    canvas.style.bottom = "0";
    canvas.style.left = "0";
    canvas.style.right = "0";
    canvas.style.touchAction = "none";
    canvasParent == null ? void 0 : canvasParent.appendChild(canvas);
    const context = canvas.getContext("2d");
    this.ctx = context;
    this.canvas = canvas;
    const handleResize = () => {
      this.fixCanvasSize(canvas);
    };
    canvasParent == null ? void 0 : canvasParent.addEventListener("resize", handleResize);
    this.removeResizeListener = () => canvasParent == null ? void 0 : canvasParent.removeEventListener("resize", handleResize);
    this.fixCanvasSize(canvas);
  }
  fixCanvasSize(canvas) {
    const parent4 = canvas.parentElement;
    if (!parent4) {
      return;
    }
    const rect = parent4.getBoundingClientRect();
    const { width: width2 } = rect;
    const { height: height2 } = rect;
    const devicePixelRatio2 = window.devicePixelRatio || 1;
    canvas.width = width2 * devicePixelRatio2;
    canvas.height = height2 * devicePixelRatio2;
    canvas.style.width = `${width2}px`;
    canvas.style.height = `${height2}px`;
  }
  drawBox(startX2, startY2, endX, endY) {
    const { ctx } = this;
    if (ctx === null) {
      return;
    }
    this.clear();
    ctx.save();
    ctx.beginPath();
    ctx.rect(startX2, startY2, endX - startX2, endY - startY2);
    ctx.closePath();
    ctx.strokeStyle = marquee.frameColor;
    const devicePixelRatio2 = window.devicePixelRatio || 1;
    ctx.lineWidth = marquee.frameWidth * devicePixelRatio2;
    ctx.fillStyle = marquee.color;
    ctx.globalAlpha = marquee.opacity;
    ctx.setLineDash(marquee.lineDash);
    ctx.stroke();
    ctx.fill();
    ctx.restore();
  }
  drawLasso(points, stroke, fill) {
    const { ctx } = this;
    if (ctx === null) {
      return;
    }
    ctx.save();
    this.clear();
    ctx.beginPath();
    let i2 = 0;
    for (const point of points) {
      const { x: x3, y: y3 } = point;
      if (i2 === 0) {
        ctx.moveTo(x3, y3);
      } else {
        ctx.lineTo(x3, y3);
      }
      i2 += 1;
    }
    const devicePixelRatio2 = window.devicePixelRatio || 1;
    ctx.strokeStyle = marquee.frameColor;
    ctx.setLineDash(marquee.lineDash);
    ctx.lineWidth = marquee.frameWidth * devicePixelRatio2;
    ctx.fillStyle = marquee.color;
    ctx.globalAlpha = marquee.opacity;
    if (stroke) {
      ctx.stroke();
    }
    if (fill) {
      ctx.fill();
    }
    ctx.restore();
  }
  clear() {
    const { ctx, canvas } = this;
    if (ctx === null) {
      return;
    }
    const rect = canvas.getBoundingClientRect();
    const devicePixelRatio2 = window.devicePixelRatio || 1;
    ctx.clearRect(0, 0, rect.width * devicePixelRatio2, rect.height * devicePixelRatio2);
  }
  destroy() {
    const { canvas } = this;
    this.removeResizeListener();
    canvas.remove();
  }
};

// node_modules/@neo4j-nvl/interaction-handlers/lib/interaction-handlers/base.js
var BaseInteraction = class {
  /**
   * @internal
   * @hidden
   */
  constructor(nvl, options3) {
    __publicField(this, "nvl");
    __publicField(this, "options");
    __publicField(this, "container");
    /**
     * @internal
     * @hidden
     */
    __publicField(this, "callbackMap");
    /**
     * @internal
     * @hidden
     */
    __publicField(this, "addEventListener", (type2, listener, options3) => {
      var _a3;
      (_a3 = this.container) == null ? void 0 : _a3.addEventListener(type2, listener, options3);
    });
    /**
     * @internal
     * @hidden
     */
    __publicField(this, "removeEventListener", (type2, listener, options3) => {
      var _a3;
      (_a3 = this.container) == null ? void 0 : _a3.removeEventListener(type2, listener, options3);
    });
    /**
     * @internal
     * @hidden
     */
    __publicField(this, "callCallbackIfRegistered", (name, ...args) => {
      const callback = this.callbackMap.get(name);
      if (typeof callback === "function") {
        callback(...args);
      }
    });
    /**
     * Add or update a callback for a given event of type.
     * @param name - The name of the event.
     * @param callback - The callback to be called when the event is triggered.
     */
    __publicField(this, "updateCallback", (name, callback) => {
      this.callbackMap.set(name, callback);
    });
    /**
     * Remove a callback for a given event of type.
     * @param name - The name of the event.
     */
    __publicField(this, "removeCallback", (name) => {
      this.callbackMap.delete(name);
    });
    /**
     * Enables or disables global text selection during a drag or pan operation.
     * @param enable - Whether to enable or disable global text selection.
     * @param eventFunction - The event function to be added/removed when text selection is disabled/enabled.
     */
    __publicField(this, "toggleGlobalTextSelection", (enable, eventFunction) => {
      if (enable) {
        document.body.style.removeProperty("user-select");
        if (eventFunction) {
          document.body.removeEventListener("mouseup", eventFunction);
        }
      } else {
        document.body.style.setProperty("user-select", "none", "important");
        if (eventFunction) {
          document.body.addEventListener("mouseup", eventFunction);
        }
      }
    });
    this.nvl = nvl;
    this.options = options3;
    this.container = this.nvl.getContainer();
    this.callbackMap = /* @__PURE__ */ new Map();
  }
  /**
   * @internal
   * @hidden
   */
  get nvlInstance() {
    return this.nvl;
  }
  /**
   * Returns the current options of the interaction.
   * @returns The current options of the interaction.
   */
  get currentOptions() {
    return this.options;
  }
  /**
   * @internal
   * @hidden
   */
  get containerInstance() {
    return this.container;
  }
};

// node_modules/@neo4j-nvl/interaction-handlers/lib/interaction-handlers/utils.js
var generateUniqueId = (digit) => Math.floor(Math.random() * Math.pow(10, digit)).toString();
var isDraggingMovement = (event3, originalPosition) => {
  const diffX = Math.abs(event3.clientX - originalPosition.x);
  const diffY = Math.abs(event3.clientY - originalPosition.y);
  if (diffX > DRAG_THRESHOLD || diffY > DRAG_THRESHOLD) {
    return true;
  }
  const distanceSquared = Math.pow(diffX, 2) + Math.pow(diffY, 2);
  return distanceSquared > DRAG_THRESHOLD;
};
var getCanvasPosition = (canvas, mouseEvent) => {
  const rect = canvas.getBoundingClientRect();
  const devicePixelRatio2 = window.devicePixelRatio || 1;
  return {
    x: (mouseEvent.clientX - rect.left) * devicePixelRatio2,
    y: (mouseEvent.clientY - rect.top) * devicePixelRatio2
  };
};
var getCanvasCenterOffset = (canvas, mouseEvent) => {
  const rect = canvas.getBoundingClientRect();
  const devicePixelRatio2 = window.devicePixelRatio || 1;
  return {
    x: (mouseEvent.clientX - rect.left - rect.width * 0.5) * devicePixelRatio2,
    y: (mouseEvent.clientY - rect.top - rect.height * 0.5) * devicePixelRatio2
  };
};
var getWorldPosition = (nvl, pos) => {
  const scale2 = nvl.getScale();
  const pan2 = nvl.getPan();
  const container2 = nvl.getContainer();
  const { width: width2, height: height2 } = container2.getBoundingClientRect();
  const devicePixelRatio2 = window.devicePixelRatio || 1;
  const x3 = pos.x - width2 * 0.5 * devicePixelRatio2;
  const y3 = pos.y - height2 * 0.5 * devicePixelRatio2;
  return {
    x: pan2.x + x3 / scale2,
    y: pan2.y + y3 / scale2
  };
};

// node_modules/@neo4j-nvl/interaction-handlers/lib/interaction-handlers/box-select-interaction.js
var BoxSelectInteraction = class extends BaseInteraction {
  /**
   * Creates a new instance of the multi-select interaction handler.
   * @param nvl - The NVL instance to attach the interaction handler to.
   * @param options - Options for the multi-select interaction handler to customize its behavior.
   */
  constructor(nvl, options3 = { selectOnRelease: false }) {
    super(nvl, options3);
    __publicField(this, "mousePosition", { x: 0, y: 0 });
    __publicField(this, "startWorldPosition", { x: 0, y: 0 });
    __publicField(this, "overlayRenderer");
    __publicField(this, "isBoxSelecting", false);
    __publicField(this, "handleMouseDown", (event3) => {
      if (event3.button !== 0) {
        this.isBoxSelecting = false;
        return;
      }
      this.turnOnBoxSelect(event3);
    });
    __publicField(this, "handleDrag", (event3) => {
      if (this.isBoxSelecting) {
        const curPos = getCanvasPosition(this.containerInstance, event3);
        this.overlayRenderer.drawBox(this.mousePosition.x, this.mousePosition.y, curPos.x, curPos.y);
      } else if (event3.buttons === 1) {
        this.turnOnBoxSelect(event3);
      }
    });
    __publicField(this, "getHitsInBox", (startPos, endPos) => {
      const inside = (pos, start, end) => {
        const minX = Math.min(start.x, end.x);
        const maxX = Math.max(start.x, end.x);
        const minY = Math.min(start.y, end.y);
        const maxY = Math.max(start.y, end.y);
        return pos.x >= minX && pos.x <= maxX && pos.y >= minY && pos.y <= maxY;
      };
      const positions2 = this.nvlInstance.getNodePositions();
      const hitNodes = /* @__PURE__ */ new Set();
      for (const pos of positions2) {
        if (inside(pos, startPos, endPos)) {
          hitNodes.add(pos.id);
        }
      }
      const rels = this.nvlInstance.getRelationships();
      const hitRels = [];
      for (const rel of rels) {
        if (hitNodes.has(rel.from) && hitNodes.has(rel.to)) {
          hitRels.push(rel);
        }
      }
      const hitNodeArray = Array.from(hitNodes).map((id2) => this.nvlInstance.getNodeById(id2));
      return {
        nodes: hitNodeArray,
        rels: hitRels
      };
    });
    __publicField(this, "endBoxSelect", (event3) => {
      if (!this.isBoxSelecting) {
        return;
      }
      this.isBoxSelecting = false;
      this.overlayRenderer.clear();
      const endPosition = getCanvasPosition(this.containerInstance, event3);
      const endWorldPosition = getWorldPosition(this.nvlInstance, endPosition);
      const { nodes: nodes3, rels } = this.getHitsInBox(this.startWorldPosition, endWorldPosition);
      if (this.currentOptions.selectOnRelease === true) {
        this.nvlInstance.updateElementsInGraph(nodes3.map((node) => ({ id: node.id, selected: true })), rels.map((rel) => ({ id: rel.id, selected: true })));
      }
      this.callCallbackIfRegistered("onBoxSelect", { nodes: nodes3, rels }, event3);
      this.toggleGlobalTextSelection(true, this.endBoxSelect);
    });
    this.overlayRenderer = new OverlayRenderer(this.containerInstance);
    this.addEventListener("mousedown", this.handleMouseDown, true);
    this.addEventListener("mousemove", this.handleDrag, true);
    this.addEventListener("mouseup", this.endBoxSelect, true);
  }
  /**
   * Removes all related event listeners and the overlay renderer for the box.
   */
  destroy() {
    this.toggleGlobalTextSelection(true, this.endBoxSelect);
    this.removeEventListener("mousedown", this.handleMouseDown, true);
    this.removeEventListener("mousemove", this.handleDrag, true);
    this.removeEventListener("mouseup", this.endBoxSelect, true);
    this.overlayRenderer.destroy();
  }
  turnOnBoxSelect(event3) {
    this.mousePosition = getCanvasPosition(this.containerInstance, event3);
    this.startWorldPosition = getWorldPosition(this.nvlInstance, this.mousePosition);
    const hits = this.nvlInstance.getHits(event3, ["node"], { hitNodeMarginWidth: NODE_EDGE_WIDTH });
    if (hits.nvlTargets.nodes.length > 0) {
      this.isBoxSelecting = false;
    } else {
      this.isBoxSelecting = true;
      this.toggleGlobalTextSelection(false, this.endBoxSelect);
      this.callCallbackIfRegistered("onBoxStarted", event3);
      if (this.currentOptions.selectOnRelease === true) {
        this.nvlInstance.deselectAll();
      }
    }
  }
};

// node_modules/@neo4j-nvl/interaction-handlers/lib/interaction-handlers/click-interaction.js
var ClickInteraction = class extends BaseInteraction {
  /**
   * Creates a new click interaction handler.
   * @param nvl - The NVL instance to attach the interaction handler to.
   * @param options - Options for the click interaction handler.
   */
  constructor(nvl, options3 = { selectOnClick: false }) {
    super(nvl, options3);
    __publicField(this, "moved", false);
    __publicField(this, "mousePosition", { x: 0, y: 0 });
    __publicField(this, "handleMouseDown", (event3) => {
      this.mousePosition = { x: event3.clientX, y: event3.clientY };
    });
    __publicField(this, "handleRightClick", (event3) => {
      var _a3, _b2;
      event3.preventDefault();
      const { nvlTargets } = this.nvlInstance.getHits(event3);
      const { nodes: nodes3 = [], relationships = [] } = nvlTargets;
      if (nodes3.length === 0 && relationships.length === 0) {
        this.callCallbackIfRegistered("onCanvasRightClick", event3);
        return;
      }
      if (nodes3.length > 0) {
        this.callCallbackIfRegistered("onNodeRightClick", (_a3 = nodes3[0]) == null ? void 0 : _a3.data, nvlTargets, event3);
      } else if (relationships.length > 0) {
        this.callCallbackIfRegistered("onRelationshipRightClick", (_b2 = relationships[0]) == null ? void 0 : _b2.data, nvlTargets, event3);
      }
    });
    __publicField(this, "handleDoubleClick", (event3) => {
      var _a3, _b2;
      const { nvlTargets } = this.nvlInstance.getHits(event3);
      const { nodes: nodes3 = [], relationships = [] } = nvlTargets;
      if (nodes3.length === 0 && relationships.length === 0) {
        this.callCallbackIfRegistered("onCanvasDoubleClick", event3);
        return;
      }
      if (nodes3.length > 0) {
        this.callCallbackIfRegistered("onNodeDoubleClick", (_a3 = nodes3[0]) == null ? void 0 : _a3.data, nvlTargets, event3);
      } else if (relationships.length > 0) {
        this.callCallbackIfRegistered("onRelationshipDoubleClick", (_b2 = relationships[0]) == null ? void 0 : _b2.data, nvlTargets, event3);
      }
    });
    __publicField(this, "handleClick", (event3) => {
      var _a3, _b2;
      if (isDraggingMovement(event3, this.mousePosition) || event3.button !== 0) {
        return;
      }
      const { nvlTargets } = this.nvlInstance.getHits(event3);
      const { nodes: nodes3 = [], relationships = [] } = nvlTargets;
      if (nodes3.length === 0 && relationships.length === 0) {
        if (this.currentOptions.selectOnClick === true) {
          this.nvlInstance.deselectAll();
        }
        this.callCallbackIfRegistered("onCanvasClick", event3);
        return;
      }
      if (nodes3.length > 0) {
        const hitNodeData = nodes3.map((node) => node.data);
        if (this.currentOptions.selectOnClick === true) {
          const selectedNodes = this.nvlInstance.getSelectedNodes();
          const selectedRelationships = this.nvlInstance.getSelectedRelationships();
          const newSelectedNodes = hitNodeData[0] ? [{ id: hitNodeData[0].id, selected: true }] : [];
          const nodeUpdates = [...newSelectedNodes, ...selectedNodes.map((node) => ({ id: node.id, selected: false }))];
          const relationshipUpdates = selectedRelationships.map((relationship) => ({
            ...relationship,
            selected: false
          }));
          this.nvlInstance.updateElementsInGraph(nodeUpdates, relationshipUpdates);
        }
        this.callCallbackIfRegistered("onNodeClick", (_a3 = nodes3[0]) == null ? void 0 : _a3.data, nvlTargets, event3);
      } else if (relationships.length > 0) {
        const hitRelationshipData = relationships.map((relationship) => relationship.data);
        if (this.currentOptions.selectOnClick === true) {
          const selectedNodes = this.nvlInstance.getSelectedNodes();
          const selectedRelationships = this.nvlInstance.getSelectedRelationships();
          const nodeUpdates = selectedNodes.map((node) => ({ id: node.id, selected: false }));
          const newSelectedRelationships = hitRelationshipData[0] ? [{ id: hitRelationshipData[0].id, selected: true }] : [];
          const relationshipUpdates = [
            ...newSelectedRelationships,
            ...selectedRelationships.map((relationship) => ({
              ...relationship,
              selected: false
            }))
          ];
          this.nvlInstance.updateElementsInGraph(nodeUpdates, relationshipUpdates);
        }
        this.callCallbackIfRegistered("onRelationshipClick", (_b2 = relationships[0]) == null ? void 0 : _b2.data, nvlTargets, event3);
      }
    });
    /**
     * Removes all related event listeners from the container.
     */
    __publicField(this, "destroy", () => {
      this.removeEventListener("mousedown", this.handleMouseDown, true);
      this.removeEventListener("click", this.handleClick, true);
      this.removeEventListener("dblclick", this.handleDoubleClick, true);
      this.removeEventListener("contextmenu", this.handleRightClick, true);
    });
    this.addEventListener("mousedown", this.handleMouseDown, true);
    this.addEventListener("click", this.handleClick, true);
    this.addEventListener("dblclick", this.handleDoubleClick, true);
    this.addEventListener("contextmenu", this.handleRightClick, true);
  }
};

// node_modules/@neo4j-nvl/interaction-handlers/lib/interaction-handlers/drag-node-interaction.js
var DragNodeInteraction = class extends BaseInteraction {
  /**
   * Creates a new instance of the drag node interaction handler.
   * @param nvl - The NVL instance to attach the interaction handler to.
   */
  constructor(nvl, options3 = {}) {
    super(nvl, options3);
    __publicField(this, "mousePosition", { x: 0, y: 0 });
    __publicField(this, "mouseDownNode", null);
    __publicField(this, "isDragging", false);
    __publicField(this, "isDrawing", false);
    __publicField(this, "selectedNodes", []);
    __publicField(this, "moveSelectedNodes", false);
    __publicField(this, "handleMouseDown", (event3) => {
      this.mousePosition = { x: event3.clientX, y: event3.clientY };
      const hits = this.nvlInstance.getHits(event3, ["node"], { hitNodeMarginWidth: NODE_EDGE_WIDTH });
      const hitNodes = hits.nvlTargets.nodes.filter((node) => node.insideNode);
      const hitNodeEdges = hits.nvlTargets.nodes.filter((node) => !node.insideNode);
      if (hitNodeEdges.length > 0) {
        this.isDrawing = true;
        this.mouseDownNode = null;
        this.addEventListener("mouseup", this.resetState, { once: true });
      } else if (hitNodes.length > 0) {
        this.mouseDownNode = hits.nvlTargets.nodes[0] ?? null;
      } else {
        this.mouseDownNode = null;
      }
      this.selectedNodes = this.nvlInstance.getSelectedNodes();
      if (this.mouseDownNode !== null && this.selectedNodes.map((node) => node.id).includes(this.mouseDownNode.data.id)) {
        this.moveSelectedNodes = true;
      } else {
        this.moveSelectedNodes = false;
      }
    });
    __publicField(this, "handleMouseMove", (evt) => {
      if (this.mouseDownNode === null || evt.buttons !== 1 || this.isDrawing) {
        return;
      }
      if (!isDraggingMovement(evt, this.mousePosition)) {
        return;
      }
      if (!this.isDragging) {
        this.toggleGlobalTextSelection(false, this.handleBodyMouseUp);
        if (this.moveSelectedNodes) {
          this.callCallbackIfRegistered("onDragStart", this.selectedNodes, evt);
        } else {
          this.callCallbackIfRegistered("onDragStart", [this.mouseDownNode.data], evt);
        }
        this.isDragging = true;
      }
      const zoom2 = this.nvlInstance.getScale();
      const dx = (evt.clientX - this.mousePosition.x) / zoom2 * window.devicePixelRatio;
      const dy = (evt.clientY - this.mousePosition.y) / zoom2 * window.devicePixelRatio;
      if (this.moveSelectedNodes) {
        this.nvlInstance.setNodePositions(this.selectedNodes.map((node) => ({ id: node.id, x: node.x + dx, y: node.y + dy, pinned: true })), true);
        this.callCallbackIfRegistered("onDrag", this.selectedNodes, evt);
      } else {
        this.nvlInstance.setNodePositions([
          {
            id: this.mouseDownNode.data.id,
            x: this.mouseDownNode.targetCoordinates.x + dx,
            y: this.mouseDownNode.targetCoordinates.y + dy,
            pinned: true
          }
        ], true);
        this.callCallbackIfRegistered("onDrag", [this.mouseDownNode.data], evt);
      }
    });
    __publicField(this, "handleBodyMouseUp", (evt) => {
      this.toggleGlobalTextSelection(true, this.handleBodyMouseUp);
      if (this.isDragging && this.mouseDownNode !== null) {
        if (this.moveSelectedNodes) {
          this.callCallbackIfRegistered("onDragEnd", this.selectedNodes, evt);
        } else {
          this.callCallbackIfRegistered("onDragEnd", [this.mouseDownNode.data], evt);
        }
      }
      if (this.isDragging) {
        this.resetState();
      }
    });
    __publicField(this, "resetState", () => {
      this.isDragging = false;
      this.mouseDownNode = null;
      this.isDrawing = false;
      this.selectedNodes = [];
      this.moveSelectedNodes = false;
    });
    /**
     * Removes all related event listeners from the container.
     */
    __publicField(this, "destroy", () => {
      this.toggleGlobalTextSelection(true, this.handleBodyMouseUp);
      this.removeEventListener("mousedown", this.handleMouseDown);
      this.removeEventListener("mousemove", this.handleMouseMove);
    });
    this.addEventListener("mousedown", this.handleMouseDown);
    this.addEventListener("mousemove", this.handleMouseMove);
  }
};

// node_modules/@neo4j-nvl/interaction-handlers/lib/interaction-handlers/draw-interaction.js
var DefaultGhostGraphStyling = {
  node: {
    color: "black",
    size: 25
  },
  relationship: {
    color: "red",
    width: 1
  }
};
var DrawInteraction = class extends BaseInteraction {
  constructor(nvl, options3 = {}) {
    var _a3, _b2;
    super(nvl, options3);
    __publicField(this, "isMoved", false);
    __publicField(this, "isDrawing", false);
    __publicField(this, "isDraggingNode", false);
    __publicField(this, "mouseDownNode");
    __publicField(this, "newTempTargetNode", null);
    __publicField(this, "newTempRegularRelationshipToNewTempTargetNode", null);
    __publicField(this, "newTempRegularRelationshipToExistingNode", null);
    __publicField(this, "newTempSelfReferredRelationship", null);
    __publicField(this, "newTargetNodeToAdd", null);
    __publicField(this, "newRelationshipToAdd", null);
    __publicField(this, "mouseOutsideOfNvlArea", false);
    __publicField(this, "cancelDrawing", () => {
      var _a3, _b2, _c2, _d, _e2;
      this.nvlInstance.removeRelationshipsWithIds([
        (_a3 = this.newTempRegularRelationshipToNewTempTargetNode) == null ? void 0 : _a3.id,
        (_b2 = this.newTempRegularRelationshipToExistingNode) == null ? void 0 : _b2.id,
        (_c2 = this.newTempSelfReferredRelationship) == null ? void 0 : _c2.id
      ].filter((id2) => Boolean(id2)));
      this.nvlInstance.removeNodesWithIds(((_d = this.newTempTargetNode) == null ? void 0 : _d.id) ? [(_e2 = this.newTempTargetNode) == null ? void 0 : _e2.id] : []);
      this.newTempTargetNode = null;
      this.newTempRegularRelationshipToNewTempTargetNode = null;
      this.newTempRegularRelationshipToExistingNode = null;
      this.newTempSelfReferredRelationship = null;
      this.isMoved = false;
      this.isDrawing = false;
      this.isDraggingNode = false;
    });
    __publicField(this, "handleMouseUpGlobal", (event3) => {
      if (this.isDrawing && this.mouseOutsideOfNvlArea) {
        this.cancelDrawing();
      }
    });
    __publicField(this, "handleMouseLeaveNvl", () => {
      this.mouseOutsideOfNvlArea = true;
    });
    __publicField(this, "handleMouseEnterNvl", () => {
      this.mouseOutsideOfNvlArea = false;
    });
    __publicField(this, "handleMouseMove", (event3) => {
      var _a3, _b2, _c2, _d, _e2, _f2, _g, _h, _i2, _j, _k, _l2, _m;
      this.isMoved = true;
      if (this.isDrawing) {
        const canvasPos = getCanvasPosition(this.containerInstance, event3);
        const pos = getWorldPosition(this.nvlInstance, canvasPos);
        const hits = this.nvlInstance.getHits(event3, ["node"]);
        const [hitNode] = hits.nvlTargets.nodes.filter((n2) => {
          var _a4;
          return n2.data.id !== ((_a4 = this.newTempTargetNode) == null ? void 0 : _a4.id);
        });
        const targetNode = hitNode ? {
          id: hitNode.data.id,
          x: hitNode.targetCoordinates.x,
          y: hitNode.targetCoordinates.y,
          size: hitNode.data.size
        } : void 0;
        const newTargetNodeId = generateUniqueId(13);
        const newTargetNode = targetNode ? null : {
          id: newTargetNodeId,
          size: ((_b2 = (_a3 = this.currentOptions.ghostGraphStyling) == null ? void 0 : _a3.node) == null ? void 0 : _b2.size) ?? DefaultGhostGraphStyling.node.size,
          selected: false,
          x: pos.x,
          y: pos.y
        };
        const newRelationshipId = generateUniqueId(13);
        const relationship = ((_c2 = this.mouseDownNode) == null ? void 0 : _c2.data) ? {
          id: newRelationshipId,
          from: this.mouseDownNode.data.id,
          to: targetNode ? targetNode.id : newTargetNodeId
        } : null;
        let { x: x3, y: y3 } = pos;
        let size3 = ((_e2 = (_d = this.currentOptions.ghostGraphStyling) == null ? void 0 : _d.node) == null ? void 0 : _e2.size) ?? DefaultGhostGraphStyling.node.size;
        if (hitNode) {
          x3 = hitNode.targetCoordinates.x;
          y3 = hitNode.targetCoordinates.y;
          size3 = hitNode.data.size ?? size3;
          if (hitNode.data.id === ((_f2 = this.mouseDownNode) == null ? void 0 : _f2.data.id) && !this.newTempSelfReferredRelationship) {
            this.nvlInstance.removeRelationshipsWithIds([
              (_g = this.newTempRegularRelationshipToNewTempTargetNode) == null ? void 0 : _g.id,
              (_h = this.newTempRegularRelationshipToExistingNode) == null ? void 0 : _h.id
            ].filter((id2) => Boolean(id2)));
            this.newTempRegularRelationshipToNewTempTargetNode = null;
            this.newTempRegularRelationshipToExistingNode = null;
            this.setNewSelfReferredRelationship();
            if (this.newTempSelfReferredRelationship) {
              this.nvlInstance.addElementsToGraph([], [this.newTempSelfReferredRelationship]);
            }
          } else if (hitNode.data.id !== ((_i2 = this.mouseDownNode) == null ? void 0 : _i2.data.id) && !this.newTempRegularRelationshipToExistingNode) {
            this.nvlInstance.removeRelationshipsWithIds([(_j = this.newTempSelfReferredRelationship) == null ? void 0 : _j.id, (_k = this.newTempRegularRelationshipToNewTempTargetNode) == null ? void 0 : _k.id].filter((id2) => Boolean(id2)));
            this.newTempSelfReferredRelationship = null;
            this.newTempRegularRelationshipToNewTempTargetNode = null;
            this.setNewRegularRelationshipToExistingNode(hitNode.data.id);
            if (this.newTempRegularRelationshipToExistingNode) {
              this.nvlInstance.addElementsToGraph([], [this.newTempRegularRelationshipToExistingNode]);
            }
          }
        } else if (!this.newTempRegularRelationshipToNewTempTargetNode) {
          this.nvlInstance.removeRelationshipsWithIds([(_l2 = this.newTempSelfReferredRelationship) == null ? void 0 : _l2.id, (_m = this.newTempRegularRelationshipToExistingNode) == null ? void 0 : _m.id].filter((id2) => Boolean(id2)));
          this.newTempSelfReferredRelationship = null;
          this.newTempRegularRelationshipToExistingNode = null;
          this.setNewRegularRelationshipToNewTempTargetNode();
          this.nvlInstance.addElementsToGraph([], this.newTempRegularRelationshipToNewTempTargetNode ? [this.newTempRegularRelationshipToNewTempTargetNode] : []);
        }
        if (this.newTempTargetNode) {
          this.nvlInstance.setNodePositions([{ id: this.newTempTargetNode.id, x: x3, y: y3 }]);
          this.nvlInstance.updateElementsInGraph([{ id: this.newTempTargetNode.id, x: x3, y: y3, size: size3 }], []);
        }
        this.newRelationshipToAdd = relationship;
        this.newTargetNodeToAdd = newTargetNode;
      } else if (!this.isDraggingNode) {
        this.newRelationshipToAdd = null;
        this.newTargetNodeToAdd = null;
        const hits = this.nvlInstance.getHits(event3, ["node"], { hitNodeMarginWidth: NODE_EDGE_WIDTH });
        const hitNodeEdges = hits.nvlTargets.nodes.filter((node) => !node.insideNode);
        if (hitNodeEdges.length > 0) {
          const [node] = hitNodeEdges;
          this.callCallbackIfRegistered("onHoverNodeMargin", node == null ? void 0 : node.data);
        } else {
          this.callCallbackIfRegistered("onHoverNodeMargin", null);
        }
      }
    });
    __publicField(this, "handleMouseDown", (event3) => {
      var _a3, _b2, _c2, _d, _e2;
      this.callCallbackIfRegistered("onHoverNodeMargin", null);
      this.isMoved = false;
      this.newRelationshipToAdd = null;
      this.newTargetNodeToAdd = null;
      const hits = this.nvlInstance.getHits(event3, ["node"], { hitNodeMarginWidth: NODE_EDGE_WIDTH });
      const hitNodes = hits.nvlTargets.nodes.filter((node) => node.insideNode);
      const hitNodeEdges = hits.nvlTargets.nodes.filter((node) => !node.insideNode);
      const startDragging = hitNodes.length > 0;
      const startDrawing = hitNodeEdges.length > 0;
      if (startDragging || startDrawing) {
        event3.preventDefault();
        (_a3 = this.containerInstance) == null ? void 0 : _a3.focus();
      }
      if (startDragging) {
        this.isDraggingNode = true;
        this.isDrawing = false;
      } else if (startDrawing) {
        this.isDrawing = true;
        this.isDraggingNode = false;
        this.mouseDownNode = hitNodeEdges[0];
        const canvasPos = getCanvasPosition(this.containerInstance, event3);
        const pos = getWorldPosition(this.nvlInstance, canvasPos);
        const color = ((_c2 = (_b2 = this.currentOptions.ghostGraphStyling) == null ? void 0 : _b2.node) == null ? void 0 : _c2.color) ?? DefaultGhostGraphStyling.node.color;
        const html = document.createElement("div");
        html.style.width = "110%";
        html.style.height = "110%";
        html.style.position = "absolute";
        html.style.left = "-5%";
        html.style.top = "-5%";
        html.style.borderRadius = "50%";
        html.style.backgroundColor = color;
        this.newTempTargetNode = {
          id: generateUniqueId(13),
          size: ((_e2 = (_d = this.currentOptions.ghostGraphStyling) == null ? void 0 : _d.node) == null ? void 0 : _e2.size) ?? DefaultGhostGraphStyling.node.size,
          selected: false,
          x: pos.x,
          y: pos.y,
          html
        };
        this.setNewRegularRelationshipToNewTempTargetNode();
        this.nvlInstance.addAndUpdateElementsInGraph([this.newTempTargetNode], this.newTempRegularRelationshipToNewTempTargetNode ? [this.newTempRegularRelationshipToNewTempTargetNode] : []);
        this.callCallbackIfRegistered("onDrawStarted", event3);
      } else {
        this.mouseDownNode = void 0;
        this.isDrawing = false;
        this.isDraggingNode = false;
      }
    });
    __publicField(this, "handleMouseUp", (event3) => {
      var _a3, _b2, _c2, _d, _e2;
      this.nvlInstance.removeRelationshipsWithIds([
        (_a3 = this.newTempRegularRelationshipToNewTempTargetNode) == null ? void 0 : _a3.id,
        (_b2 = this.newTempRegularRelationshipToExistingNode) == null ? void 0 : _b2.id,
        (_c2 = this.newTempSelfReferredRelationship) == null ? void 0 : _c2.id
      ].filter((id2) => Boolean(id2)));
      this.nvlInstance.removeNodesWithIds(((_d = this.newTempTargetNode) == null ? void 0 : _d.id) ? [(_e2 = this.newTempTargetNode) == null ? void 0 : _e2.id] : []);
      if (this.isDrawing && this.isMoved) {
        if (this.newTargetNodeToAdd) {
          this.nvlInstance.setNodePositions([this.newTargetNodeToAdd]);
        }
        this.nvlInstance.addAndUpdateElementsInGraph(this.newTargetNodeToAdd ? [{ id: this.newTargetNodeToAdd.id }] : [], this.newRelationshipToAdd ? [this.newRelationshipToAdd] : []);
        this.callCallbackIfRegistered("onDrawEnded", this.newRelationshipToAdd, this.newTargetNodeToAdd, event3);
      }
      this.newTempTargetNode = null;
      this.newTempRegularRelationshipToNewTempTargetNode = null;
      this.newTempRegularRelationshipToExistingNode = null;
      this.newTempSelfReferredRelationship = null;
      this.isMoved = false;
      this.isDrawing = false;
      this.isDraggingNode = false;
    });
    __publicField(this, "destroy", () => {
      var _a3, _b2;
      this.removeEventListener("mousemove", this.handleMouseMove, true);
      this.removeEventListener("mousedown", this.handleMouseDown, true);
      this.removeEventListener("mouseup", this.handleMouseUp, true);
      (_a3 = this.containerInstance) == null ? void 0 : _a3.removeEventListener("mouseleave", this.handleMouseLeaveNvl);
      (_b2 = this.containerInstance) == null ? void 0 : _b2.removeEventListener("mouseenter", this.handleMouseEnterNvl);
      document.removeEventListener("mouseup", this.handleMouseUpGlobal, true);
    });
    this.nvlInstance.setLayout("free");
    this.addEventListener("mousemove", this.handleMouseMove, true);
    this.addEventListener("mousedown", this.handleMouseDown, true);
    this.addEventListener("mouseup", this.handleMouseUp, true);
    (_a3 = this.containerInstance) == null ? void 0 : _a3.addEventListener("mouseleave", this.handleMouseLeaveNvl);
    (_b2 = this.containerInstance) == null ? void 0 : _b2.addEventListener("mouseenter", this.handleMouseEnterNvl);
    document.addEventListener("mouseup", this.handleMouseUpGlobal, true);
  }
  setNewRegularRelationship(targetId) {
    var _a3, _b2, _c2, _d;
    if (!this.mouseDownNode) {
      return null;
    }
    return {
      id: generateUniqueId(13),
      from: this.mouseDownNode.data.id,
      to: targetId,
      color: ((_b2 = (_a3 = this.currentOptions.ghostGraphStyling) == null ? void 0 : _a3.relationship) == null ? void 0 : _b2.color) ?? DefaultGhostGraphStyling.relationship.color,
      width: ((_d = (_c2 = this.currentOptions.ghostGraphStyling) == null ? void 0 : _c2.relationship) == null ? void 0 : _d.width) ?? DefaultGhostGraphStyling.relationship.width
    };
  }
  setNewRegularRelationshipToNewTempTargetNode() {
    if (!this.mouseDownNode || !this.newTempTargetNode) {
      return;
    }
    this.newTempRegularRelationshipToNewTempTargetNode = this.setNewRegularRelationship(this.newTempTargetNode.id);
  }
  setNewRegularRelationshipToExistingNode(targetId) {
    if (!this.mouseDownNode) {
      return;
    }
    this.newTempRegularRelationshipToExistingNode = this.setNewRegularRelationship(targetId);
  }
  setNewSelfReferredRelationship() {
    var _a3, _b2, _c2, _d;
    if (!this.mouseDownNode) {
      return;
    }
    this.newTempSelfReferredRelationship = {
      id: generateUniqueId(13),
      from: this.mouseDownNode.data.id,
      to: this.mouseDownNode.data.id,
      color: ((_b2 = (_a3 = this.currentOptions.ghostGraphStyling) == null ? void 0 : _a3.relationship) == null ? void 0 : _b2.color) ?? DefaultGhostGraphStyling.relationship.color,
      width: ((_d = (_c2 = this.currentOptions.ghostGraphStyling) == null ? void 0 : _c2.relationship) == null ? void 0 : _d.width) ?? DefaultGhostGraphStyling.relationship.width
    };
  }
};

// node_modules/@neo4j-nvl/interaction-handlers/lib/interaction-handlers/hover-interaction.js
var HoverInteraction = class extends BaseInteraction {
  constructor(nvl, options3 = { drawShadowOnHover: false }) {
    super(nvl, options3);
    __publicField(this, "currentHoveredElementId");
    __publicField(this, "currentHoveredElementIsNode");
    __publicField(this, "updates", {
      nodes: [],
      relationships: []
    });
    /**
     * Handle mouse hover events
     * @param event - The mouse event.
     */
    __publicField(this, "handleHover", (event3) => {
      const { nvlTargets } = this.nvlInstance.getHits(event3);
      const { nodes: nodes3 = [], relationships = [] } = nvlTargets;
      const mainTarget = nodes3[0] ?? relationships[0];
      const hoveredElement = mainTarget == null ? void 0 : mainTarget.data;
      const newHoveredElementIsNode = hoveredElement !== void 0 && nodes3[0] !== void 0;
      const nothingHasBeenHoveredOrUnHovered = this.currentHoveredElementId === void 0 && hoveredElement === void 0;
      const newHoveredElementIsTheSameAsCurrent = (hoveredElement == null ? void 0 : hoveredElement.id) !== void 0 && this.currentHoveredElementId === hoveredElement.id && newHoveredElementIsNode === this.currentHoveredElementIsNode;
      if (nothingHasBeenHoveredOrUnHovered || newHoveredElementIsTheSameAsCurrent) {
        this.callCallbackIfRegistered("onHover", hoveredElement, nvlTargets, event3);
        return;
      }
      const currentElementNeedsUnHover = this.currentHoveredElementId !== void 0 && this.currentHoveredElementId !== (hoveredElement == null ? void 0 : hoveredElement.id);
      if (currentElementNeedsUnHover) {
        this.unHoverCurrentElement();
      }
      if (newHoveredElementIsNode) {
        this.updates.nodes.push({ id: hoveredElement.id, hovered: true });
        this.currentHoveredElementId = hoveredElement.id;
        this.currentHoveredElementIsNode = true;
      } else if (hoveredElement !== void 0) {
        const { id: id2 } = hoveredElement;
        this.updates.relationships.push({ id: id2, hovered: true });
        this.currentHoveredElementId = hoveredElement.id;
        this.currentHoveredElementIsNode = false;
      } else {
        this.currentHoveredElementId = void 0;
        this.currentHoveredElementIsNode = void 0;
      }
      this.callCallbackIfRegistered("onHover", hoveredElement, nvlTargets, event3);
      this.updateElementsInNVL();
      this.clearUpdates();
    });
    this.addEventListener("mousemove", this.handleHover, true);
  }
  updateElementsInNVL() {
    if (this.currentOptions.drawShadowOnHover === true) {
      const currentNodes = this.nvlInstance.getNodes();
      if (currentNodes.length > 0) {
        this.nvlInstance.updateElementsInGraph(this.updates.nodes, this.updates.relationships);
      }
    }
  }
  clearUpdates() {
    this.updates.nodes = [];
    this.updates.relationships = [];
  }
  unHoverCurrentElement() {
    if (this.currentHoveredElementId === void 0) {
      return;
    }
    const update2 = {
      id: this.currentHoveredElementId,
      hovered: false
    };
    if (this.currentHoveredElementIsNode === true) {
      this.updates.nodes.push(update2);
    } else {
      this.updates.relationships.push({ ...update2 });
    }
  }
  destroy() {
    this.removeEventListener("mousemove", this.handleHover, true);
  }
};

// node_modules/@neo4j-nvl/interaction-handlers/lib/interaction-handlers/lasso-interaction.js
var import_concaveman = __toESM(require_concaveman());
var pointDist = 10;
var shapeShowTime = 500;
var checkLinesCrossing = (p1, p22, p3, p4) => {
  const denom = (p4[1] - p3[1]) * (p22[0] - p1[0]) - (p4[0] - p3[0]) * (p22[1] - p1[1]);
  if (denom === 0) {
    return false;
  }
  const t1 = ((p1[1] - p3[1]) * (p4[0] - p3[0]) - (p1[0] - p3[0]) * (p4[1] - p3[1])) / denom;
  const t2 = ((p3[0] - p1[0]) * (p22[1] - p1[1]) - (p3[1] - p1[1]) * (p22[0] - p1[0])) / denom;
  return t1 > 0 && t1 < 1 && t2 > 0 && t2 < 1;
};
var checkIntersection = (polygon2) => {
  for (let i2 = 0; i2 < polygon2.length - 1; i2++) {
    for (let j2 = i2 + 2; j2 < polygon2.length; j2++) {
      const line1p1 = polygon2[i2] ?? [0, 0];
      const line1p2 = polygon2[i2 + 1] ?? [0, 0];
      const line2p1 = polygon2[j2] ?? [0, 0];
      const jNext = j2 < polygon2.length - 1 ? j2 + 1 : 0;
      const line2p2 = polygon2[jNext] ?? [0, 0];
      if (checkLinesCrossing(line1p1, line1p2, line2p1, line2p2)) {
        return true;
      }
    }
  }
  return false;
};
var checkPointInside = (x3, y3, vs2) => {
  let isInside = false;
  for (let i2 = 0, j2 = vs2.length - 1; i2 < vs2.length; j2 = i2, i2 += 1) {
    const vsI = vs2[i2];
    const vsJ = vs2[j2];
    if (vsI === void 0 || vsJ === void 0) {
      continue;
    }
    const { x: xi2, y: yi2 } = vsI;
    const { x: xj, y: yj } = vsJ;
    const intersect2 = yi2 > y3 !== yj > y3 && x3 < (xj - xi2) * (y3 - yi2) / (yj - yi2) + xi2;
    if (intersect2) {
      isInside = !isInside;
    }
  }
  return isInside;
};
var LassoInteraction = class extends BaseInteraction {
  /**
   * Creates a new instance of the lasso interaction handler.
   * @param nvl - The NVL instance to attach the interaction handler to.
   * @param options - Options for the lasso interaction handler to customize its behavior.
   */
  constructor(nvl, options3 = { selectOnRelease: false }) {
    super(nvl, options3);
    __publicField(this, "active", false);
    __publicField(this, "points", []);
    __publicField(this, "overlayRenderer");
    __publicField(this, "startLasso", (event3) => {
      const hits = this.nvlInstance.getHits(event3, ["node"], { hitNodeMarginWidth: NODE_EDGE_WIDTH });
      if (hits.nvlTargets.nodes.length > 0) {
        this.active = false;
      } else {
        this.active = true;
        this.points = [getCanvasPosition(this.containerInstance, event3)];
        this.toggleGlobalTextSelection(false, this.endLasso);
        this.callCallbackIfRegistered("onLassoStarted", event3);
        if (this.currentOptions.selectOnRelease === true) {
          this.nvlInstance.deselectAll();
        }
      }
    });
    __publicField(this, "handleMouseDown", (event3) => {
      if (event3.button === 0 && !this.active) {
        this.startLasso(event3);
      }
    });
    __publicField(this, "handleDrag", (event3) => {
      if (this.active) {
        const lastPoint2 = this.points[this.points.length - 1];
        if (lastPoint2 === void 0) {
          return;
        }
        const pos = getCanvasPosition(this.containerInstance, event3);
        const dx = Math.abs(lastPoint2.x - pos.x);
        const dy = Math.abs(lastPoint2.y - pos.y);
        if (dx > pointDist || dy > pointDist) {
          this.points.push(pos);
          this.overlayRenderer.drawLasso(this.points, true, false);
        }
      }
    });
    __publicField(this, "handleMouseUp", (event3) => {
      this.points.push(getCanvasPosition(this.containerInstance, event3));
      this.endLasso(event3);
    });
    __publicField(this, "getLassoItems", (points) => {
      const worldPoints = points.map((p3) => getWorldPosition(this.nvlInstance, p3));
      const nodePositions = this.nvlInstance.getNodePositions();
      const hitNodes = /* @__PURE__ */ new Set();
      for (const pos of nodePositions) {
        if (pos.x === void 0 || pos.y === void 0 || pos.id === void 0) {
          continue;
        }
        if (checkPointInside(pos.x, pos.y, worldPoints)) {
          hitNodes.add(pos.id);
        }
      }
      const rels = this.nvlInstance.getRelationships();
      const hitRels = [];
      for (const rel of rels) {
        if (hitNodes.has(rel.from) && hitNodes.has(rel.to)) {
          hitRels.push(rel);
        }
      }
      const hitNodeArray = Array.from(hitNodes).map((id2) => this.nvlInstance.getNodeById(id2));
      return {
        nodes: hitNodeArray,
        rels: hitRels
      };
    });
    __publicField(this, "endLasso", (event3) => {
      if (!this.active) {
        return;
      }
      this.active = false;
      this.toggleGlobalTextSelection(true, this.endLasso);
      const pointArrays = this.points.map((p3) => [p3.x, p3.y]);
      const hasCrossings = checkIntersection(pointArrays);
      const hull = (hasCrossings ? (0, import_concaveman.default)(pointArrays, 2) : pointArrays).map((p3) => ({ x: p3[0], y: p3[1] })).filter((point) => point.x !== void 0 && point.y !== void 0);
      this.overlayRenderer.drawLasso(hull, false, true);
      setTimeout(() => this.overlayRenderer.clear(), shapeShowTime);
      const hitItems = this.getLassoItems(hull);
      if (this.currentOptions.selectOnRelease === true) {
        this.nvlInstance.updateElementsInGraph(hitItems.nodes.map((node) => ({ id: node.id, selected: true })), hitItems.rels.map((rel) => ({ id: rel.id, selected: true })));
      }
      this.callCallbackIfRegistered("onLassoSelect", hitItems, event3);
    });
    this.overlayRenderer = new OverlayRenderer(this.containerInstance);
    this.addEventListener("mousedown", this.handleMouseDown, true);
    this.addEventListener("mousemove", this.handleDrag, true);
    this.addEventListener("mouseup", this.handleMouseUp, true);
  }
  /**
   * Removes all related event listeners and the overlay renderer for the box.
   */
  destroy() {
    this.toggleGlobalTextSelection(true, this.endLasso);
    this.removeEventListener("mousedown", this.handleMouseDown, true);
    this.removeEventListener("mousemove", this.handleDrag, true);
    this.removeEventListener("mouseup", this.handleMouseUp, true);
    this.overlayRenderer.destroy();
  }
};

// node_modules/@neo4j-nvl/interaction-handlers/lib/interaction-handlers/pan-interaction.js
var import_lodash3 = __toESM(require_lodash2());
var PanInteraction = class extends BaseInteraction {
  /**
   * Creates a new instance of the pan interaction handler.
   * @param nvl - The NVL instance to attach the interaction handler to.
   */
  constructor(nvl, options3 = { excludeNodeMargin: false }) {
    super(nvl, options3);
    __publicField(this, "mousePosition", { x: 0, y: 0 });
    __publicField(this, "targets", []);
    __publicField(this, "shouldPan", false);
    __publicField(this, "isPanning", false);
    /**
     * Updates which type of graph elements should hinder panning.
     * @param targets - The graph elements that should hinder panning.
     * @param excludeNodeMargin - If true, the node margin will not hinder panning.
     * By default, panning is hindered by nodes and relationships.
     *
     * @example
     * ```js
     * import { NVL } from '@neo4j-nvl/base'
     * import { PanInteraction } from '@neo4j-nvl/interaction-handlers'
     *
     * const nvl = new NVL(document.createElement('div'), [{ id: '0' }], [])
     * const panInteraction = new PanInteraction(nvl)
     *
     * // Pan canvas even when dragging on nodes and relationships
     * panInteraction.updateTargets([], true)
     * ```
     */
    __publicField(this, "updateTargets", (targets, excludeNodeMargin) => {
      this.targets = targets;
      this.currentOptions.excludeNodeMargin = excludeNodeMargin;
    });
    __publicField(this, "handleMouseDown", (event3) => {
      const hits = this.nvlInstance.getHits(event3, (0, import_lodash3.difference)(["node", "relationship"], this.targets), {
        hitNodeMarginWidth: this.currentOptions.excludeNodeMargin === true ? NODE_EDGE_WIDTH : 0
      });
      if (hits.nvlTargets.nodes.length > 0 || hits.nvlTargets.relationships.length > 0) {
        this.shouldPan = false;
      } else {
        this.mousePosition = { x: event3.clientX, y: event3.clientY };
        this.shouldPan = true;
      }
    });
    __publicField(this, "handleMouseMove", (evt) => {
      if (!this.shouldPan || evt.buttons !== 1) {
        return;
      }
      if (!this.isPanning) {
        this.toggleGlobalTextSelection(false, this.handleMouseUp);
        this.isPanning = true;
      }
      const zoom2 = this.nvlInstance.getScale();
      const { x: x3, y: y3 } = this.nvlInstance.getPan();
      const dx = (evt.clientX - this.mousePosition.x) / zoom2 * window.devicePixelRatio;
      const dy = (evt.clientY - this.mousePosition.y) / zoom2 * window.devicePixelRatio;
      this.nvlInstance.setPan(x3 - dx, y3 - dy);
      this.callCallbackIfRegistered("onPan", { x: x3 - dx, y: y3 - dy }, evt);
      this.mousePosition = { x: evt.clientX, y: evt.clientY };
    });
    __publicField(this, "handleMouseUp", () => {
      if (this.isPanning) {
        this.toggleGlobalTextSelection(true, this.handleMouseUp);
        this.isPanning = false;
      }
      this.shouldPan = false;
    });
    this.addEventListener("mousedown", this.handleMouseDown, true);
    this.addEventListener("mousemove", this.handleMouseMove, true);
    this.addEventListener("mouseup", this.handleMouseUp, true);
  }
  /**
   * Removes the related event listeners from the canvas.
   */
  destroy() {
    this.toggleGlobalTextSelection(true, this.handleMouseUp);
    this.removeEventListener("mousedown", this.handleMouseDown, true);
    this.removeEventListener("mousemove", this.handleMouseMove, true);
    this.removeEventListener("mouseup", this.handleMouseUp, true);
  }
};

// node_modules/@neo4j-nvl/interaction-handlers/lib/interaction-handlers/zoom-interaction.js
var import_lodash4 = __toESM(require_lodash2());
var ZoomInteraction = class extends BaseInteraction {
  /**
   * Creates a new instance of the zoom interaction handler.
   * @param nvl - The NVL instance to attach the interaction handler to.
   */
  constructor(nvl, options3 = {}) {
    super(nvl, options3);
    /**
     * Throttled zoom function to avoid events happening too fast.
     * @param event - The original mouse wheel event.
     *
     * @remarks
     * "Wheel" with a touchpad, the wheel is triggered event a lot,
     * especially a lot of very small values.
     * However, updating values in NVL instance takes time.
     * Sometimes it lost the track of multiple events happening too soon.
     * As a result, the zoom might lose its anchor point under touch pad.
     * Therefore, the throttle is needed to avoid events happening too fast.
     * The throttle is set to 25ms.
     */
    __publicField(this, "throttledZoom", (0, import_lodash4.throttle)((event3) => {
      const zoom2 = this.nvlInstance.getScale();
      const { x: x3, y: y3 } = this.nvlInstance.getPan();
      const baseSpeed = event3.deltaY / 500;
      const factor = zoom2 >= 1 ? baseSpeed * Math.pow(zoom2, 1) : baseSpeed;
      const newZoomTarget = zoom2 - factor * Math.min(1, zoom2);
      const offs = getCanvasCenterOffset(this.containerInstance, event3);
      const newPanX = x3 + (offs.x / zoom2 - offs.x / newZoomTarget);
      const newPanY = y3 + (offs.y / zoom2 - offs.y / newZoomTarget);
      this.nvlInstance.setZoomAndPan(newZoomTarget, newPanX, newPanY);
      this.callCallbackIfRegistered("onZoom", newZoomTarget, event3);
    }, 25, { leading: true }));
    /**
     * The function to be called on mouse wheel event on the canvas.
     * @param evt - The mouse wheel event.
     * @remarks If the ctrl key or meta key is pressed, it does not zoom to avoid conflicts with default browser behavior.
     */
    __publicField(this, "handleWheel", (evt) => {
      if (evt.ctrlKey || evt.metaKey) {
        return;
      }
      evt.preventDefault();
      this.throttledZoom(evt);
    });
    /**
     * Removes the relevant event listeners from the canvas.
     */
    __publicField(this, "destroy", () => {
      this.removeEventListener("wheel", this.handleWheel);
    });
    this.addEventListener("wheel", this.handleWheel);
  }
};

// node_modules/@neo4j-nvl/react/lib/interactive-nvl-wrapper/InteractionHandlers.js
var import_react4 = __toESM(require_react());

// node_modules/@neo4j-nvl/react/lib/interactive-nvl-wrapper/hooks.js
var import_lodash5 = __toESM(require_lodash2());
var import_react3 = __toESM(require_react());
var destroyInteraction = (interactionRef) => {
  var _a3;
  (_a3 = interactionRef.current) == null ? void 0 : _a3.destroy();
  interactionRef.current = null;
};
var useInteraction = (Interaction, interactionRef, callback, eventName, nvlRef, interactionOptions) => {
  (0, import_react3.useEffect)(() => {
    const nvl = nvlRef.current;
    if ((0, import_lodash5.isNil)(nvl) || (0, import_lodash5.isNil)(nvl.getContainer())) {
      return;
    }
    if (callback === true || typeof callback === "function") {
      if ((0, import_lodash5.isNil)(interactionRef.current)) {
        interactionRef.current = new Interaction(nvl, interactionOptions);
      }
      if (typeof callback === "function") {
        interactionRef.current.updateCallback(eventName, callback);
      } else if (!(0, import_lodash5.isNil)(interactionRef.current.callbackMap[eventName])) {
        interactionRef.current.removeCallback(eventName);
      }
    } else if (callback === false) {
      destroyInteraction(interactionRef);
    }
  }, [Interaction, callback, eventName, interactionOptions, interactionRef, nvlRef]);
};

// node_modules/@neo4j-nvl/react/lib/interactive-nvl-wrapper/InteractionHandlers.js
var InteractionHandlers = ({ nvlRef, mouseEventCallbacks, interactionOptions }) => {
  const hoverInteraction = (0, import_react4.useRef)(null);
  const clickInteraction = (0, import_react4.useRef)(null);
  const panInteraction = (0, import_react4.useRef)(null);
  const zoomInteraction = (0, import_react4.useRef)(null);
  const dragNodeInteraction = (0, import_react4.useRef)(null);
  const drawInteraction = (0, import_react4.useRef)(null);
  const multiSelectInteraction = (0, import_react4.useRef)(null);
  const lassoInteraction = (0, import_react4.useRef)(null);
  useInteraction(HoverInteraction, hoverInteraction, mouseEventCallbacks.onHover, "onHover", nvlRef, interactionOptions);
  useInteraction(ClickInteraction, clickInteraction, mouseEventCallbacks.onNodeClick, "onNodeClick", nvlRef, interactionOptions);
  useInteraction(ClickInteraction, clickInteraction, mouseEventCallbacks.onNodeDoubleClick, "onNodeDoubleClick", nvlRef, interactionOptions);
  useInteraction(ClickInteraction, clickInteraction, mouseEventCallbacks.onNodeRightClick, "onNodeRightClick", nvlRef, interactionOptions);
  useInteraction(ClickInteraction, clickInteraction, mouseEventCallbacks.onRelationshipClick, "onRelationshipClick", nvlRef, interactionOptions);
  useInteraction(ClickInteraction, clickInteraction, mouseEventCallbacks.onRelationshipDoubleClick, "onRelationshipDoubleClick", nvlRef, interactionOptions);
  useInteraction(ClickInteraction, clickInteraction, mouseEventCallbacks.onRelationshipRightClick, "onRelationshipRightClick", nvlRef, interactionOptions);
  useInteraction(ClickInteraction, clickInteraction, mouseEventCallbacks.onCanvasClick, "onCanvasClick", nvlRef, interactionOptions);
  useInteraction(ClickInteraction, clickInteraction, mouseEventCallbacks.onCanvasRightClick, "onCanvasRightClick", nvlRef, interactionOptions);
  useInteraction(PanInteraction, panInteraction, mouseEventCallbacks.onPan, "onPan", nvlRef, interactionOptions);
  useInteraction(ZoomInteraction, zoomInteraction, mouseEventCallbacks.onZoom, "onZoom", nvlRef, interactionOptions);
  useInteraction(DragNodeInteraction, dragNodeInteraction, mouseEventCallbacks.onDrag, "onDrag", nvlRef, interactionOptions);
  useInteraction(DragNodeInteraction, dragNodeInteraction, mouseEventCallbacks.onDragStart, "onDragStart", nvlRef, interactionOptions);
  useInteraction(DragNodeInteraction, dragNodeInteraction, mouseEventCallbacks.onDragEnd, "onDragEnd", nvlRef, interactionOptions);
  useInteraction(DrawInteraction, drawInteraction, mouseEventCallbacks.onHoverNodeMargin, "onHoverNodeMargin", nvlRef, interactionOptions);
  useInteraction(DrawInteraction, drawInteraction, mouseEventCallbacks.onDrawStarted, "onDrawStarted", nvlRef, interactionOptions);
  useInteraction(DrawInteraction, drawInteraction, mouseEventCallbacks.onDrawEnded, "onDrawEnded", nvlRef, interactionOptions);
  useInteraction(BoxSelectInteraction, multiSelectInteraction, mouseEventCallbacks.onBoxStarted, "onBoxStarted", nvlRef, interactionOptions);
  useInteraction(BoxSelectInteraction, multiSelectInteraction, mouseEventCallbacks.onBoxSelect, "onBoxSelect", nvlRef, interactionOptions);
  useInteraction(LassoInteraction, lassoInteraction, mouseEventCallbacks.onLassoStarted, "onLassoStarted", nvlRef, interactionOptions);
  useInteraction(LassoInteraction, lassoInteraction, mouseEventCallbacks.onLassoSelect, "onLassoSelect", nvlRef, interactionOptions);
  (0, import_react4.useEffect)(() => () => {
    destroyInteraction(hoverInteraction);
    destroyInteraction(clickInteraction);
    destroyInteraction(panInteraction);
    destroyInteraction(zoomInteraction);
    destroyInteraction(dragNodeInteraction);
    destroyInteraction(drawInteraction);
    destroyInteraction(multiSelectInteraction);
    destroyInteraction(lassoInteraction);
  }, []);
  return null;
};

// node_modules/@neo4j-nvl/react/lib/interactive-nvl-wrapper/InteractiveNvlWrapper.js
var options2 = {
  selectOnClick: false,
  drawShadowOnHover: true,
  selectOnRelease: false,
  excludeNodeMargin: true
};
var InteractiveNvlWrapper = (0, import_react5.memo)((0, import_react5.forwardRef)(({ nodes: nodes3, rels, layout: layout6, layoutOptions, onInitializationError, mouseEventCallbacks = {}, nvlCallbacks = {}, nvlOptions = {}, interactionOptions = options2, ...nvlEvents }, nvlRef) => {
  const newNvlRef = (0, import_react5.useRef)(null);
  const myNvlRef = nvlRef ?? newNvlRef;
  const [isNvlInitialized, setIsNvlInitialized] = (0, import_react5.useState)(false);
  const handleInitialization = (0, import_react5.useCallback)(() => {
    setIsNvlInitialized(true);
  }, []);
  const handleInitializationError = (0, import_react5.useCallback)((error3) => {
    setIsNvlInitialized(false);
    if (onInitializationError) {
      onInitializationError(error3);
    }
  }, [onInitializationError]);
  const setupInteractions = isNvlInitialized && myNvlRef.current !== null;
  return (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [(0, import_jsx_runtime2.jsx)(BasicNvlWrapper, { ref: myNvlRef, nodes: nodes3, id: INTERACTIVE_WRAPPER_ID, rels, nvlOptions, nvlCallbacks: {
    ...nvlCallbacks,
    onInitialization: () => {
      if (nvlCallbacks.onInitialization !== void 0) {
        nvlCallbacks.onInitialization();
      }
      handleInitialization();
    }
  }, layout: layout6, layoutOptions, onInitializationError: handleInitializationError, ...nvlEvents }), setupInteractions && (0, import_jsx_runtime2.jsx)(InteractionHandlers, { nvlRef: myNvlRef, mouseEventCallbacks, interactionOptions })] });
}));

// node_modules/@neo4j-nvl/react/lib/static-picture-wrapper/StaticPictureWrapper.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var import_react6 = __toESM(require_react());
var StaticPictureWrapper = ({ nodes: nodes3, rels, nvlOptions = {}, width: width2 = 500, height: height2 = 500 }) => {
  const [imgSrc, setImgSrc] = (0, import_react6.useState)();
  (0, import_react6.useEffect)(() => {
    const div = document.createElement("div");
    div.style.width = `${width2 / window.devicePixelRatio}px`;
    div.style.height = `${height2 / window.devicePixelRatio}px`;
    const myNvl = new bh(div, nodes3, rels, nvlOptions, {
      onLayoutDone: () => {
        myNvl.fit(myNvl.getNodes().map((n2) => n2.id));
      },
      onZoomTransitionDone: () => {
        setImgSrc(myNvl.getImageDataUrl());
        setTimeout(() => {
          myNvl.destroy();
        });
      }
    });
    return () => {
      myNvl == null ? void 0 : myNvl.destroy();
    };
  }, [nodes3, rels, width2, height2]);
  return imgSrc !== void 0 ? (0, import_jsx_runtime3.jsx)("img", { src: imgSrc, width: width2, height: height2, alt: "Graph" }) : null;
};
export {
  BasicNvlWrapper,
  InteractiveNvlWrapper,
  StaticPictureWrapper
};
/*! Bundled license information:

lodash/lodash.js:
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)

cytoscape/dist/cytoscape.esm.mjs:
  (*!
  Embeddable Minimum Strictly-Compliant Promises/A+ 1.1.1 Thenable
  Copyright (c) 2013-2014 Ralf S. Engelschall (http://engelschall.com)
  Licensed under The MIT License (http://opensource.org/licenses/MIT)
  *)
  (*!
  Event object based on jQuery events, MIT license
  
  https://jquery.org/license/
  https://tldrlegal.com/license/mit-license
  https://github.com/jquery/jquery/blob/master/src/event.js
  *)
  (*! Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License *)
  (*! Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License *)

js-cookie/dist/js.cookie.mjs:
  (*! js-cookie v3.0.1 | MIT *)

@neo4j-nvl/base/dist/base.mjs:
  (*! For license information please see base.mjs.LICENSE.txt *)
*/
//# sourceMappingURL=@neo4j-nvl_react.js.map
